void static Duration.UnitsFormatStyle.UnitWidth.abbreviated.getter(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 1;
  *(_DWORD *)(a1 + 4) = 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  if (*v0) {
    return 0x536E726574746170;
  }
  else {
    return 0x6874646977;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Duration.UnitsFormatStyle.UnitWidth.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.UnitsFormatStyle.UnitWidth.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.UnitWidth.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
    char v14 = 0;
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnitDuration><>.FormatStyle.UnitWidth and conformance Measurement<A><>.FormatStyle.UnitWidth, &demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v9 = v15;
    char v13 = 1;
    int v10 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(unsigned char *)a2 = v9;
    *(_DWORD *)(a2 + 4) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys);
  }
  return result;
}

uint64_t Duration.UnitsFormatStyle.UnitWidth.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.UnitWidth.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = *v1;
  int v11 = *((_DWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth.CodingKeys and conformance Duration.UnitsFormatStyle.UnitWidth.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = v8;
  char v13 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
  lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Measurement<NSUnitDuration><>.FormatStyle.UnitWidth and conformance Measurement<A><>.FormatStyle.UnitWidth, &demangling cache variable for type metadata for Measurement<NSUnitDuration><>.FormatStyle.UnitWidth);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v12 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void Duration.UnitsFormatStyle.UnitWidth.hash(into:)()
{
  Swift::UInt32 v1 = *((_DWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

BOOL static Duration.UnitsFormatStyle.UnitWidth.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

Swift::Int Duration.UnitsFormatStyle.UnitWidth.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Swift::UInt32 v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.UnitWidth@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.UnitWidth.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.UnitWidth(void *a1)
{
  return Duration.UnitsFormatStyle.UnitWidth.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  Swift::UInt v1 = *v0;
  Swift::UInt32 v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  Swift::UInt32 v1 = *((_DWORD *)v0 + 1);
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.UnitWidth()
{
  Swift::UInt v1 = *v0;
  Swift::UInt32 v2 = *((_DWORD *)v0 + 1);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance Duration.UnitsFormatStyle.UnitWidth(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  return RawRepresentable<>.encode(to:)();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance Duration.UnitsFormatStyle.Unit._Unit(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

void protocol witness for static CaseIterable.allCases.getter in conformance Duration.UnitsFormatStyle.Unit._Unit(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static Duration.UnitsFormatStyle.Unit._Unit.allCases.getter;
}

unint64_t Duration.UnitsFormatStyle.Unit.icuSkeleton.getter()
{
  Swift::UInt v1 = (void *)0xE400000000000000;
  uint64_t v2 = 1801807223;
  switch(*v0)
  {
    case 1:
      Swift::UInt v1 = (void *)0xE300000000000000;
      uint64_t v2 = 7954788;
      break;
    case 2:
      uint64_t v2 = 1920298856;
      break;
    case 3:
      Swift::UInt v1 = (void *)0xE600000000000000;
      uint64_t v2 = 0x6574756E696DLL;
      break;
    case 4:
      Swift::UInt v1 = (void *)0xE600000000000000;
      uint64_t v2 = 0x646E6F636573;
      break;
    case 5:
      uint64_t v3 = 0x73696C6C696DLL;
      goto LABEL_8;
    case 6:
      uint64_t v3 = 0x736F7263696DLL;
LABEL_8:
      uint64_t v2 = v3 & 0xFFFFFFFFFFFFLL | 0x6365000000000000;
      Swift::UInt v1 = (void *)0xEB00000000646E6FLL;
      break;
    case 7:
      Swift::UInt v1 = (void *)0xEA0000000000646ELL;
      uint64_t v2 = 0x6F6365736F6E616ELL;
      break;
    default:
      break;
  }
  _StringGuts.grow(_:)(24);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = v2;
  v4._object = v1;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  return 0xD000000000000016;
}

void static Duration.UnitsFormatStyle.Unit.weeks.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void Duration.UnitsFormatStyle.Unit.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Duration.UnitsFormatStyle.Unit.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return 1953066613;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.Unit.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1953066613 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.Unit.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.UnitsFormatStyle.Unit.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Unit.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v10 = v7;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit);
  }
  return result;
}

Swift::Int Duration.UnitsFormatStyle.Unit.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.Unit.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.Unit.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit.CodingKeys and conformance Duration.UnitsFormatStyle.Unit.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit._Unit and conformance Duration.UnitsFormatStyle.Unit._Unit();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Unit@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return Duration.UnitsFormatStyle.Unit.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Unit(void *a1)
{
  return Duration.UnitsFormatStyle.Unit.encode(to:)(a1);
}

uint64_t static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.show(length:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return 0x6874676E656CLL;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6874676E656CLL && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys);
  }
  return result;
}

Swift::Int Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.getter()
{
  return *(void *)v0;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.minimumLength.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.maximumLength.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingRule.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.getter()
{
  return *(void *)(v0
                   + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0)
                            + 28));
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.setter(uint64_t a1, char a2)
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v6 = v2 + *(int *)(result + 28);
  *(void *)uint64_t v6 = a1;
  *(unsigned char *)(v6 + 8) = a2 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.roundingIncrement.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init<A>(lengthLimits:roundingRule:roundingIncrement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 0x7FFFFFFFFFFFFFFFLL, a5);
  char v14 = v13;
  uint64_t v16 = v15;
  char v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  if (v14) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v12;
  }
  if (v18) {
    uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v20 = v16;
  }
  uint64_t v21 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  v22 = (char *)a6 + *(int *)(v21 + 28);
  *a6 = v19;
  a6[1] = v20;
  v23 = (char *)a6 + *(int *)(v21 + 24);
  uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32))(v23, a2, v24);
  *(void *)v22 = a3;
  v22[8] = a4 & 1;
  return result;
}

uint64_t static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.show(length:rounded:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v11 = (char *)a5 + *(int *)(v10 + 24);
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v11, a2, v12);
  char v14 = (char *)a5 + *(int *)(v10 + 28);
  *a5 = a1;
  a5[1] = a1;
  *(void *)char v14 = a3;
  v14[8] = a4 & 1;
  return result;
}

void Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hash(into:)()
{
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  uint64_t v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = (char *)v0 + *(int *)(v1 + 28);
  if (v2[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v3 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v3;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  unint64_t result = 0x4C6D756D696E696DLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x4C6D756D6978616DLL;
      break;
    case 2:
      unint64_t result = 0x676E69646E756F72;
      break;
    case 3:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    v8[13] = 2;
    type metadata accessor for FloatingPointRoundingRule();
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  uint64_t v1 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v2 = (char *)v0 + *(int *)(v1 + 28);
  if (v2[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v3 = *(void *)v2;
    Hasher._combine(_:)(1u);
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v4 = v3;
    }
    else {
      Swift::UInt64 v4 = 0;
    }
    Hasher._combine(_:)(v4);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v26 = *(void *)(v3 - 8);
  uint64_t v27 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys>);
  uint64_t v25 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (uint64_t *)((char *)v10 + *(int *)(v11 + 28));
  *uint64_t v12 = 0;
  *((unsigned char *)v12 + 8) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys();
  v28 = v7;
  uint64_t v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v30 = v8;
  v23 = v12;
  uint64_t v14 = (uint64_t)a1;
  uint64_t v15 = v25;
  uint64_t v16 = v26;
  uint64_t v17 = v27;
  char v34 = 0;
  *uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  char v33 = 1;
  v10[1] = KeyedDecodingContainer.decode(_:forKey:)();
  char v32 = 2;
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule, MEMORY[0x1E4FBBEB8]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))((char *)v10 + *(int *)(v30 + 24), v5, v17);
  char v31 = 3;
  uint64_t v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  LOBYTE(v17) = v19;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v28, v29);
  uint64_t v21 = v23;
  uint64_t v20 = v24;
  uint64_t *v23 = v18;
  *((unsigned char *)v21 + 8) = v17 & 1;
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v10, v20, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  __swift_destroy_boxed_opaque_existential_1(v14);
  return outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v10, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(void *a1)
{
  return Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.encode(to:)(a1);
}

void protocol witness for Hashable.hash(into:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*v2);
  Hasher._combine(_:)(v2[1]);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (char *)v2 + *(int *)(a2 + 28);
  if (v4[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v5 = *(void *)v4;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v2);
  Hasher._combine(_:)(v2[1]);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v4 = (char *)v2 + *(int *)(a2 + 28);
  if (v4[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Swift::UInt64 v5 = *(void *)v4;
    Hasher._combine(_:)(1u);
    if ((v5 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v6 = v5;
    }
    else {
      Swift::UInt64 v6 = 0;
    }
    Hasher._combine(_:)(v6);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Duration.UnitsFormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Duration.UnitsFormatStyle.allowedUnits.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.allowedUnits.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Duration.UnitsFormatStyle.unitWidth.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 28);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 24);
  *(_DWORD *)(a1 + 4) = v2;
}

uint64_t Duration.UnitsFormatStyle.unitWidth.setter(uint64_t result)
{
  int v2 = *(_DWORD *)(result + 4);
  *(unsigned char *)(v1 + 24) = *(unsigned char *)result;
  *(_DWORD *)(v1 + 28) = v2;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.unitWidth.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t Duration.UnitsFormatStyle.maximumUnitCount.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 32) = result;
  *(unsigned char *)(v2 + 40) = a2 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.maximumUnitCount.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Duration.UnitsFormatStyle.zeroValueUnitsDisplay.getter(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 48);
}

void *Duration.UnitsFormatStyle.zeroValueUnitsDisplay.setter(void *result)
{
  *(void *)(v1 + 48) = *result;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.zeroValueUnitsDisplay.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle(0);
  return outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v1 + *(int *)(v3 + 36), a1, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t Duration.UnitsFormatStyle.fractionalPartDisplay.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle(0);
  return outlined assign with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(a1, v1 + *(int *)(v3 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t (*Duration.UnitsFormatStyle.fractionalPartDisplay.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.valueLengthLimits.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0) + 40));
}

uint64_t Duration.UnitsFormatStyle.valueLengthLimits.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v8 = v3 + *(int *)(result + 40);
  *(void *)uint64_t v8 = a1;
  *(void *)(v8 + 8) = a2;
  *(unsigned char *)(v8 + 16) = a3 & 1;
  return result;
}

uint64_t (*Duration.UnitsFormatStyle.valueLengthLimits.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Duration.UnitsFormatStyle.init<A>(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v15 = *a2;
  int v16 = *((_DWORD *)a2 + 1);
  uint64_t v17 = *a5;
  uint64_t v18 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v19 = a9 + *(int *)(v18 + 40);
  *(void *)(a9 + 16) = a1;
  *(unsigned char *)(a9 + 24) = v15;
  *(_DWORD *)(a9 + 28) = v16;
  uint64_t v20 = a6;
  uint64_t v21 = a8;
  *(void *)(a9 + 32) = a3;
  *(unsigned char *)(a9 + 40) = a4 & 1;
  *(void *)(a9 + 48) = v17;
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(a7, a9 + *(int *)(v18 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v22 = RangeExpression.clampedLowerAndUpperBounds(_:)(0, 0x7FFFFFFFFFFFFFFFLL, a8);
  if ((v25 & 1) == 0)
  {
    if (v24) {
      uint64_t v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
    if (v23 >= v22) {
      goto LABEL_5;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if ((v24 & 1) == 0)
  {
    uint64_t v22 = 0;
    if (v23 >= 0)
    {
LABEL_5:
      *(void *)uint64_t v19 = v22;
      *(void *)(v19 + 8) = v23;
      *(unsigned char *)(v19 + 16) = 0;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
LABEL_9:
  *(void *)uint64_t v19 = 0;
  *(void *)(v19 + 8) = 0;
  *(unsigned char *)(v19 + 16) = 1;
LABEL_10:
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v26 = static LocaleCache.cache + 16;
  uint64_t v27 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v27);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v26, &v32);
  os_unfair_lock_unlock(v27);
  swift_release_n();
  uint64_t v28 = v32;
  uint64_t v29 = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(a7, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  *(void *)a9 = v28;
  *(void *)(a9 + 8) = v29;
  return result;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  uint64_t v2 = result + 56;
  char v3 = *(unsigned char *)(result + 32);
  uint64_t v4 = 1 << v3;
  uint64_t v5 = -1;
  if (1 << v3 < 64) {
    uint64_t v5 = ~(-1 << (1 << v3));
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = __clz(__rbit64(v6));
    unint64_t v9 = (v6 - 1) & v6;
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
  }
  else
  {
    LODWORD(v7) = v3 & 0x3F;
    if (v7 <= 6) {
      goto LABEL_50;
    }
    int64_t v10 = (unint64_t)(v4 + 63) >> 6;
    unint64_t v20 = *(void *)(result + 64);
    if (v20)
    {
      uint64_t v7 = 1;
    }
    else
    {
      if (v7 < 8) {
        goto LABEL_50;
      }
      unint64_t v20 = *(void *)(result + 72);
      if (v20)
      {
        uint64_t v7 = 2;
      }
      else
      {
        unint64_t v20 = *(void *)(result + 80);
        if (v20)
        {
          uint64_t v7 = 3;
        }
        else
        {
LABEL_38:
          if (v7 < 9) {
            goto LABEL_50;
          }
          unint64_t v20 = *(void *)(result + 88);
          if (v20)
          {
            uint64_t v7 = 4;
          }
          else
          {
            unint64_t v20 = *(void *)(result + 96);
            if (!v20) {
              goto LABEL_44;
            }
            uint64_t v7 = 5;
          }
        }
      }
    }
LABEL_31:
    unint64_t v9 = (v20 - 1) & v20;
    unint64_t v8 = __clz(__rbit64(v20)) + (v7 << 6);
  }
  uint64_t v11 = *(void *)(result + 48);
  char v12 = *(unsigned char *)(v11 + v8);
  unsigned __int8 v13 = v12;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v7 << 6);
      goto LABEL_7;
    }
    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v17 >= v10) {
      goto LABEL_51;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v17);
    ++v7;
    if (!v18)
    {
      uint64_t v7 = v17 + 1;
      if (v17 + 1 >= v10) {
        goto LABEL_51;
      }
      unint64_t v18 = *(void *)(v2 + 8 * v7);
      if (!v18)
      {
        uint64_t v7 = v17 + 2;
        if (v17 + 2 >= v10) {
          goto LABEL_51;
        }
        unint64_t v18 = *(void *)(v2 + 8 * v7);
        if (!v18)
        {
          uint64_t v7 = v17 + 3;
          if (v17 + 3 >= v10) {
            goto LABEL_51;
          }
          unint64_t v18 = *(void *)(v2 + 8 * v7);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
    unsigned int v16 = *(unsigned __int8 *)(v11 + v15);
    if (v13 < v16) {
      char v12 = v16;
    }
    if (v13 <= v16) {
      unsigned __int8 v13 = v16;
    }
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v10) {
    goto LABEL_51;
  }
  unint64_t v18 = *(void *)(v2 + 8 * v19);
  if (v18)
  {
    uint64_t v7 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v7 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v7 >= v10) {
      goto LABEL_51;
    }
    unint64_t v18 = *(void *)(v2 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
  __break(1u);
LABEL_44:
  uint64_t v21 = 0;
  uint64_t v22 = 6;
  if (v10 > 6) {
    uint64_t v22 = v10;
  }
  uint64_t v23 = v22 - 6;
  while (v23 != v21)
  {
    unint64_t v20 = *(void *)(result + 104 + 8 * v21++);
    if (v20)
    {
      uint64_t v7 = v21 + 5;
      goto LABEL_31;
    }
  }
LABEL_50:
  char v12 = 8;
LABEL_51:
  *a2 = v12;
  return result;
}

uint64_t specialized getter of mostSignificantUnit #1 in Duration.UnitsFormatStyle._getSkeletons(_:)(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (v2 == 9)
  {
    SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSays8DurationV10FoundationE16UnitsFormatStyleV4UnitVG_AL01_I0Os5NeverOTg504_ss8d3V10e3E16fgh35V13_getSkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n(a2);
    unint64_t v5 = *(void *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                   + 16);
    if (v5)
    {
      uint64_t v2 = *(unsigned __int8 *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                              + 32);
      unint64_t v6 = v5 - 1;
      if (v5 != 1)
      {
        if (v5 < 9)
        {
          unint64_t v7 = 1;
          goto LABEL_18;
        }
        if (v5 >= 0x21)
        {
          unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFE0;
          uint8x16_t v9 = (uint8x16_t)vdupq_n_s8(v2);
          int64_t v10 = (uint8x16_t *)(SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                             + 49);
          unint64_t v11 = v6 & 0xFFFFFFFFFFFFFFE0;
          uint8x16_t v12 = v9;
          do
          {
            uint8x16_t v9 = vminq_u8(v10[-1], v9);
            uint8x16_t v12 = vminq_u8(*v10, v12);
            v10 += 2;
            v11 -= 32;
          }
          while (v11);
          uint8x16_t v13 = vminq_u8(v9, v12);
          v13.i8[0] = vminvq_u8(v13);
          uint64_t v2 = v13.u32[0];
          if (v6 == v8) {
            goto LABEL_23;
          }
          if ((v6 & 0x18) == 0)
          {
            unint64_t v7 = v8 | 1;
            goto LABEL_18;
          }
        }
        else
        {
          unint64_t v8 = 0;
        }
        unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8 | 1;
        uint8x8_t v14 = (uint8x8_t)vdup_n_s8(v2);
        unint64_t v15 = (uint8x8_t *)(v8
                          + SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                          + 33);
        unint64_t v16 = v8 - (v6 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint8x8_t v17 = *v15++;
          uint8x8_t v14 = vmin_u8(v17, v14);
          v16 += 8;
        }
        while (v16);
        v14.i8[0] = vminv_u8(v14);
        uint64_t v2 = v14.u32[0];
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_23;
        }
LABEL_18:
        unint64_t v18 = v5 - v7;
        int64_t v19 = (unsigned __int8 *)(v7
                                + SkeletonsySaySS8skeleton_AE4i37V011measurementI0Sd0J5ValuetGABFAI01_U55OAIcfu_33_64547b37a44c81f84a69b677aba82e0bAiNTf3nnnpk_nTf1cn_n
                                + 32);
        do
        {
          unsigned int v21 = *v19++;
          unsigned int v20 = v21;
          if (v21 >= v2) {
            uint64_t v2 = v2;
          }
          else {
            uint64_t v2 = v20;
          }
          --v18;
        }
        while (v18);
      }
    }
    else
    {
      uint64_t v2 = 8;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    *a1 = v2;
  }
  return v2;
}

uint64_t closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 8);
  uint64_t ObjectType = swift_getObjectType();
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
  swift_unknownObjectRetain();
  v6(ObjectType, v4);
  swift_unknownObjectRelease();
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  unsigned int ListPattern = uatmufmt_getListPattern();
  swift_release();
  return ListPattern;
}

__n128 Duration.UnitsFormatStyle.locale(_:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v2, (uint64_t)a2, type metadata accessor for Duration.UnitsFormatStyle);
  __n128 v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v6;
  *a2 = v6;
  return result;
}

uint64_t Duration.UnitsFormatStyle.attributed.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v1, a1, type metadata accessor for Duration.UnitsFormatStyle);
}

void Duration.UnitsFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt *v45;
  uint64_t v46;
  char *v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  void *v53;
  unsigned char v54[144];
  unsigned char v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  unsigned char v74[144];
  unsigned char v75[152];

  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if (v6(ObjectType, v4))
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v8(v73, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    uint8x16_t v9 = 0;
  }
  else
  {
    uint8x16_t v9 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  int64_t v10 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    unint64_t v15 = v55;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  unint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v15 = v54;
LABEL_20:
    outlined retain of LocalePreferences(v15);
    if (!v57) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint8x16_t v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint8x16_t v13 = v59;
    if (!v59) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v13);
    swift_bridgeObjectRelease();
    uint8x8_t v14 = v60;
    if (!v60) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint8x16_t v13 = v59;
  if (v59) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  uint8x8_t v14 = v60;
  if (!v60)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
LABEL_25:
  unint64_t v16 = v61;
  uint8x8_t v17 = v62;
  int64_t v19 = v63;
  unint64_t v18 = v64;
  unsigned int v20 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unsigned int v21 = v17;
    uint64_t v22 = v19;
    uint64_t v23 = v18;
    char v24 = v20;
    char v25 = v16;
    _CFObject.hash(into:)();
    v53 = v16;
    if (v17) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v20;
    char v31 = v17;
    uint64_t v32 = v19;
    char v33 = v18;
    v53 = 0;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v26 = v17;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v29 = 0;
LABEL_36:

  char v34 = v66;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v34);
    swift_bridgeObjectRelease();
    v35 = v67;
    if (v67) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  v35 = v67;
  if (!v67) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v71 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v72 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v72 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  v41 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  v42 = *(_DWORD *)(v2 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 24));
  Hasher._combine(_:)(v42);
  if (*(unsigned char *)(v2 + 40))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = *(void *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  Hasher._combine(_:)(*(void *)(v2 + 48));
  v44 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v45 = (Swift::UInt *)(v2 + *(int *)(v44 + 36));
  Hasher._combine(_:)(*v45);
  Hasher._combine(_:)(v45[1]);
  v46 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v47 = (char *)v45 + *(int *)(v46 + 28);
  if (v47[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v48 = *(void *)v47;
    Hasher._combine(_:)(1u);
    if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v49 = v48;
    }
    else {
      v49 = 0;
    }
    Hasher._combine(_:)(v49);
  }
  v50 = v2 + *(int *)(v44 + 40);
  if (*(unsigned char *)(v50 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v52 = *(void *)v50;
    v51 = *(void *)(v50 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v51);
  }
}

unint64_t Duration.UnitsFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x656C61636F6CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x556465776F6C6C61;
      break;
    case 2:
      unint64_t result = 0x7464695774696E75;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance Duration.UnitsFormatStyle.CodingKeys()
{
  return Duration.UnitsFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Duration.UnitsFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Duration.UnitsFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.UnitsFormatStyle.encode(to:)(void *a1)
{
  char v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v14 = *v3;
  char v16 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v14 = *((void *)v3 + 2);
    char v16 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
    lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>, (void (*)(void))lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    int v9 = *((_DWORD *)v3 + 7);
    LOBYTE(v14) = *((unsigned char *)v3 + 24);
    DWORD1(v14) = v9;
    char v16 = 2;
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    *(void *)&long long v14 = *((void *)v3 + 6);
    char v16 = 4;
    lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle(0);
    LOBYTE(v14) = 5;
    type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unint64_t v11 = (long long *)((char *)v3 + *(int *)(v10 + 40));
    char v12 = *((unsigned char *)v11 + 16);
    long long v14 = *v11;
    char v15 = v12;
    char v16 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Duration.UnitsFormatStyle.hashValue.getter()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  uint64_t v39;
  Swift::UInt32 v40;
  Swift::UInt v41;
  uint64_t v42;
  Swift::UInt *v43;
  uint64_t v44;
  char *v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  unsigned char v52[144];
  unsigned char v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void v71[18];
  unsigned char v72[144];
  unsigned char v73[144];
  unsigned char v74[80];

  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if (v4(ObjectType, v2))
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v53, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  unint64_t v8 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    uint8x16_t v13 = v53;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  int v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v52, &demangling cache variable for type metadata for LocalePreferences?);
    uint8x16_t v13 = v52;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v55) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v56) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    unint64_t v11 = v57;
    if (!v57) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v11);
    swift_bridgeObjectRelease();
    char v12 = v58;
    if (!v58) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v11 = v57;
  if (v57) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  char v12 = v58;
  if (!v58)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  char v15 = v59;
  long long v14 = v60;
  uint8x8_t v17 = v61;
  char v16 = v62;
  unint64_t v18 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    int64_t v19 = v14;
    unsigned int v20 = v17;
    unsigned int v21 = v16;
    uint64_t v22 = v18;
    uint64_t v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v28 = v18;
    uint64_t v29 = v14;
    uint64_t v30 = v17;
    char v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      char v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    char v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v27 = 0;
LABEL_36:

  uint64_t v32 = v64;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v32);
    swift_bridgeObjectRelease();
    char v33 = v65;
    if (v65) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v66) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  char v33 = v65;
  if (!v65) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v33);
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v34 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v35 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v69 == 2)
  {
    v36 = 0;
  }
  else
  {
    v36 = v69 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v70 == 2)
  {
    v37 = 0;
  }
  else
  {
    v38 = v70 & 1;
    Hasher._combine(_:)(1u);
    v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  v39 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v74, v39);
  swift_bridgeObjectRelease();
  v40 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v40);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v41 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  Hasher._combine(_:)(*(void *)(v1 + 48));
  v42 = type metadata accessor for Duration.UnitsFormatStyle(0);
  v43 = (Swift::UInt *)(v1 + *(int *)(v42 + 36));
  Hasher._combine(_:)(*v43);
  Hasher._combine(_:)(v43[1]);
  v44 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v45 = (char *)v43 + *(int *)(v44 + 28);
  if (v45[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v46 = *(void *)v45;
    Hasher._combine(_:)(1u);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v47 = v46;
    }
    else {
      v47 = 0;
    }
    Hasher._combine(_:)(v47);
  }
  v48 = v1 + *(int *)(v42 + 40);
  if (*(unsigned char *)(v48 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v50 = *(void *)v48;
    v49 = *(void *)(v48 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
    Hasher._combine(_:)(v49);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1F4188790](v25);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.CodingKeys>);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v10 + 4) = 0;
  v10[40] = 1;
  char v12 = &v10[*(int *)(v11 + 40)];
  *(void *)char v12 = 0;
  *((void *)v12 + 1) = 0;
  v12[16] = 1;
  uint64_t v13 = a1[3];
  uint64_t v28 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys();
  long long v14 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  uint64_t v29 = v4;
  uint64_t v15 = v26;
  char v32 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v16 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = (uint64_t)v10;
  long long v23 = v30;
  *(_OWORD *)uint64_t v10 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
  char v32 = 1;
  lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>(&lazy protocol witness table cache variable for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>, (void (*)(void))lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Unit and conformance Duration.UnitsFormatStyle.Unit);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((void *)v10 + 2) = v30;
  char v32 = 2;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v18 = DWORD1(v30);
  v10[24] = v30;
  *((_DWORD *)v10 + 7) = v18;
  LOBYTE(v30) = 3;
  *((void *)v10 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v10[40] = v19 & 1;
  char v32 = 4;
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  MEMORY[0x30] = v30;
  LOBYTE(v30) = 5;
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v20 = (uint64_t)v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  outlined init with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v20, v17 + *(int *)(v8 + 36), type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Int>);
  char v32 = 6;
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v16);
  char v22 = v31;
  *(_OWORD *)char v12 = v30;
  v12[16] = v22;
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v17, v24, type metadata accessor for Duration.UnitsFormatStyle);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v17, type metadata accessor for Duration.UnitsFormatStyle);
}

__n128 protocol witness for FormatStyle.locale(_:) in conformance Duration.UnitsFormatStyle@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v2, (uint64_t)a2, type metadata accessor for Duration.UnitsFormatStyle);
  __n128 v6 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v6;
  *a2 = v6;
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle(void *a1)
{
  return Duration.UnitsFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2)
{
  void (*v9)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  Swift::UInt *v44;
  uint64_t v45;
  char *v46;
  Swift::UInt64 v47;
  Swift::UInt64 v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  char v70;
  char v71;
  void v72[18];
  unsigned char v73[144];
  unsigned char v74[144];
  unsigned char v75[80];

  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain();
  if (v7(ObjectType, v5))
  {
    Swift::UInt8 v8 = 1;
LABEL_5:
    Hasher._combine(_:)(v8);
    goto LABEL_57;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v9(v72, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v74) == 1)
  {
    Swift::UInt8 v8 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)&v54, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v54 == 2)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = v54 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v10);
  uint64_t v11 = v55;
  if (!v55)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v54);
    if (!v56) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  char v12 = *(void *)(v11 + 16);
  if (!v12) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v13 = v11 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v13 += 16;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v57) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v14 = v58;
    if (!v58) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v57) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  long long v14 = v58;
  if (!v58)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v14);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v15 = v59;
  v53 = a2;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v17 = v60;
  uint64_t v16 = v61;
  char v19 = v62;
  int v18 = v63;
  uint64_t v20 = v64;
  if (v60)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unsigned int v21 = v16;
    char v22 = v19;
    long long v23 = v18;
    uint64_t v24 = v20;
    uint64_t v25 = v17;
    _CFObject.hash(into:)();
    if (v16) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v30 = v20;
    char v31 = v16;
    char v32 = v19;
    char v33 = v18;
    if (v16)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v26 = v16;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  uint64_t v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v29 = 0;
LABEL_36:

  char v34 = v65;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v75, v34);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  a2 = v53;
  v35 = v66;
  if (!v66)
  {
    Hasher._combine(_:)(0);
    if (v67) {
      goto LABEL_41;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    goto LABEL_44;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v75, v35);
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_43;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_44:
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v36 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v70 == 2)
  {
    v38 = 0;
  }
  else
  {
    v38 = v70 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v71 == 2)
  {
    v39 = 0;
  }
  else
  {
    v40 = v71 & 1;
    Hasher._combine(_:)(1u);
    v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v73, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_57:
  swift_unknownObjectRelease();
  v41 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v75, v41);
  swift_bridgeObjectRelease();
  v42 = *(_DWORD *)(v4 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v4 + 24));
  Hasher._combine(_:)(v42);
  if (*(unsigned char *)(v4 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = *(void *)(v4 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  Hasher._combine(_:)(*(void *)(v4 + 48));
  v44 = (Swift::UInt *)(v4 + *(int *)(a2 + 36));
  Hasher._combine(_:)(*v44);
  Hasher._combine(_:)(v44[1]);
  v45 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  v46 = (char *)v44 + *(int *)(v45 + 28);
  if (v46[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v47 = *(void *)v46;
    Hasher._combine(_:)(1u);
    if ((v47 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      v48 = v47;
    }
    else {
      v48 = 0;
    }
    Hasher._combine(_:)(v48);
  }
  v49 = v4 + *(int *)(a2 + 40);
  if (*(unsigned char *)(v49 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v51 = *(void *)v49;
    v50 = *(void *)(v49 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v51);
    Hasher._combine(_:)(v50);
  }
  return Hasher._finalize()();
}

uint64_t static FormatStyle<>.units<A>(allowed:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v26 = a8;
  uint64_t v27 = a2;
  char v13 = a3 & 1;
  uint64_t v14 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v21 = *(_DWORD *)(a1 + 4);
  uint64_t v22 = *a4;
  v29[0] = *(unsigned char *)a1;
  int v30 = v21;
  uint64_t v28 = v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v20, a5, a7, v18);
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(a6, (uint64_t)v16, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v24 = swift_bridgeObjectRetain();
  return Duration.UnitsFormatStyle.init<A>(allowedUnits:width:maximumUnitCount:zeroValueUnits:valueLengthLimits:fractionalPart:)(v24, v29, v27, v13, &v28, (uint64_t)v20, (uint64_t)v16, a7, v26);
}

uint64_t Duration.UnitsFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = Duration.UnitsFormatStyle._getSkeletons(_:)(a1, a2);
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_AI16AttributedStringVs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j7VSdAC16mn53VIggnyr_SS8skeleton_AG011measurementF0Sd0J5ValuetAIs5O11OIegnrzr_TRSSAMSdARIggnyr_Tf1cn_nTf4ng_n(v3, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned char *, double))partial apply for closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:));
  uint64_t v5 = swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(v4 + 16);
  uint64_t v108 = 0;
  unint64_t v109 = 0;
  uint64_t v101 = v4;
  if (v6 == 1) {
    goto LABEL_27;
  }
  if (v6 == 2)
  {
    MEMORY[0x1F4188790](v5);
    uint64_t v7 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v8) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0x7D317B202C7D307BLL;
    }
    if (v8) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = 0xE800000000000000;
    }
    swift_bridgeObjectRelease();
    uint64_t v108 = v9;
    unint64_t v109 = v10;
    uint64_t v121 = 8204667;
    unint64_t v122 = 0xE300000000000000;
    *(void *)&v150[0] = 8204411;
    *((void *)&v150[0] + 1) = 0xE300000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    goto LABEL_27;
  }
  MEMORY[0x1F4188790](v5);
  uint64_t v11 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0x7D317B202C7D307BLL;
  }
  unint64_t v14 = 0xE800000000000000;
  if (v12) {
    unint64_t v15 = v12;
  }
  else {
    unint64_t v15 = 0xE800000000000000;
  }
  MEMORY[0x1F4188790](v11);
  uint64_t v16 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
  if (v17) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = 0x7D317B202C7D307BLL;
  }
  if (v17) {
    unint64_t v14 = v17;
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v108 = v18;
  unint64_t v109 = v14;
  unint64_t v20 = v6 - 3;
  if (v6 < 3) {
    goto LABEL_48;
  }
  if (v6 == 3)
  {
LABEL_26:
    uint64_t v21 = swift_bridgeObjectRelease();
    MEMORY[0x1F4188790](v21);
    _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    swift_bridgeObjectRelease();
    uint64_t v121 = 8204667;
    unint64_t v122 = 0xE300000000000000;
    *(void *)&v150[0] = 8204411;
    *((void *)&v150[0] + 1) = 0xE300000000000000;
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
LABEL_27:
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v118, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], &v108);
    uint64_t v22 = (_OWORD *)v108;
    uint64_t v23 = *(void *)(v4 + 16);
    if (!v23)
    {
LABEL_39:
      uint64_t result = swift_bridgeObjectRelease();
      *a3 = v22;
      return result;
    }
    uint64_t v102 = v4 + 24;
    while (1)
    {
      if (v23 > *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      uint64_t v104 = v23;
      uint64_t v28 = *(_OWORD **)(v102 + 8 * v23);
      long long v29 = v22[1];
      long long v30 = v22[3];
      v139[1] = v22[2];
      v139[2] = v30;
      v139[0] = v29;
      swift_retain_n();
      v103 = v28;
      swift_retain();
      outlined retain of Locale((uint64_t)v139);
      uint64_t v31 = BigString.startIndex.getter();
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      uint64_t v37 = v36;
      outlined release of Locale((uint64_t)v139);
      long long v38 = v22[1];
      long long v39 = v22[3];
      v138[1] = v22[2];
      v138[2] = v39;
      v138[0] = v38;
      long long v40 = v22[1];
      v140[1] = v22[2];
      v140[2] = v39;
      v140[0] = v40;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v140, (uint64_t)v141);
      outlined retain of Locale((uint64_t)v141);
      uint64_t v41 = BigString.endIndex.getter();
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      uint64_t v47 = v46;
      outlined release of Locale((uint64_t)v138);
      v107 = v22;
      uint64_t v108 = (uint64_t)v22;
      unint64_t v109 = v31;
      uint64_t v110 = v33;
      uint64_t v111 = v35;
      uint64_t v112 = v37;
      uint64_t v113 = v41;
      uint64_t v114 = v43;
      uint64_t v115 = v45;
      uint64_t v116 = v47;
      uint64_t v117 = 0;
      lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
      unint64_t v48 = Substring.init<A>(_:)();
      unint64_t v50 = v49;
      uint64_t v52 = v51;
      uint64_t v54 = v53;
      uint64_t v108 = 8204411;
      unint64_t v109 = 0xE300000000000000;
      unint64_t v55 = Substring.init<A>(_:)();
      if ((v48 ^ v50) < 0x4000 || !((v55 ^ v56) >> 14)) {
        goto LABEL_45;
      }
      specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v55, v56, v57, v58, 0, 0, 0, 0, 1, v48, v50, v52, v54);
      char v60 = v59;
      swift_bridgeObjectRelease();
      if (v60) {
        break;
      }
      v61 = v107 + 1;
      swift_bridgeObjectRetain();
      uint64_t v62 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = Substring.UTF8View.distance(from:to:)();
      swift_bridgeObjectRelease();
      long long v64 = v107[1];
      long long v65 = v107[3];
      v137[1] = v107[2];
      v137[2] = v65;
      v137[0] = v64;
      long long v66 = v107[1];
      long long v67 = v107[2];
      v142[2] = v65;
      v142[1] = v67;
      v142[0] = v66;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v142, (uint64_t)v143);
      outlined retain of Locale((uint64_t)v143);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v137);
      if (__OFADD__(BigString.Index.utf8Offset.getter(), v62)) {
        goto LABEL_41;
      }
      long long v68 = v107[2];
      v136[0] = *v61;
      v136[1] = v68;
      v136[2] = v107[3];
      swift_retain();
      outlined retain of Locale((uint64_t)v136);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v136);
      long long v69 = *v61;
      long long v70 = v107[3];
      v135[1] = v107[2];
      v135[2] = v70;
      v135[0] = v69;
      long long v71 = *v61;
      long long v72 = v107[2];
      v144[2] = v70;
      v144[1] = v72;
      v144[0] = v71;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v144, (uint64_t)v145);
      outlined retain of Locale((uint64_t)v145);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v135);
      uint64_t v73 = BigString.UTF8View.index(_:offsetBy:)();
      unint64_t v75 = v74;
      uint64_t v105 = v77;
      uint64_t v106 = v76;
      outlined release of Locale((uint64_t)&v119);
      swift_release();
      long long v78 = *v61;
      long long v79 = v107[3];
      v134[1] = v107[2];
      v134[2] = v79;
      v134[0] = v78;
      long long v80 = *v61;
      long long v81 = v107[2];
      v146[2] = v79;
      v146[1] = v81;
      v146[0] = v80;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v146, (uint64_t)v147);
      outlined retain of Locale((uint64_t)v147);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v134);
      if (__OFADD__(BigString.Index.utf8Offset.getter(), v63)) {
        goto LABEL_42;
      }
      long long v82 = v107[2];
      v133[0] = *v61;
      v133[1] = v82;
      v133[2] = v107[3];
      swift_retain();
      outlined retain of Locale((uint64_t)v133);
      BigString.utf8.getter();
      outlined release of Locale((uint64_t)v133);
      long long v83 = *v61;
      long long v84 = v107[3];
      v132[1] = v107[2];
      v132[2] = v84;
      v132[0] = v83;
      long long v85 = *v61;
      long long v86 = v107[2];
      v148[2] = v84;
      v148[1] = v86;
      v148[0] = v85;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v148, (uint64_t)v149);
      outlined retain of Locale((uint64_t)v149);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v132);
      uint64_t v22 = v107;
      uint64_t v87 = BigString.UTF8View.index(_:offsetBy:)();
      uint64_t v89 = v88;
      uint64_t v91 = v90;
      uint64_t v93 = v92;
      outlined release of Locale((uint64_t)&v120);
      swift_release();
      char v94 = static BigString.Index.< infix(_:_:)();
      swift_release();
      if (v94) {
        goto LABEL_43;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        long long v95 = v107[2];
        v131[0] = *v61;
        v131[1] = v95;
        v131[2] = v107[3];
        uint64_t v96 = *((void *)v107 + 8);
        uint64_t v97 = *((void *)v107 + 9);
        uint64_t v99 = *((void *)v107 + 11);
        uint64_t v100 = *((void *)v107 + 10);
        type metadata accessor for AttributedString.Guts();
        swift_allocObject();
        outlined retain of Locale((uint64_t)v131);
        swift_unknownObjectRetain();
        uint64_t v22 = (_OWORD *)AttributedString.Guts.init(string:runs:)(v131, v96, v97, v100, v99);
        swift_release();
      }
      uint64_t v23 = v104 - 1;
      long long v24 = v22[2];
      v130[0] = v22[1];
      v130[1] = v24;
      v130[2] = v22[3];
      swift_retain();
      outlined retain of Locale((uint64_t)v130);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v130);
      long long v25 = v22[1];
      long long v26 = v22[3];
      v129[1] = v22[2];
      v129[2] = v26;
      v129[0] = v25;
      long long v27 = v22[1];
      v150[1] = v22[2];
      v150[2] = v26;
      v150[0] = v27;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v150, (uint64_t)v151);
      outlined retain of Locale((uint64_t)v151);
      BigString.endIndex.getter();
      outlined release of Locale((uint64_t)v129);
      swift_release();
      uint64_t v121 = v73;
      unint64_t v122 = v75;
      uint64_t v123 = v106;
      uint64_t v124 = v105;
      uint64_t v125 = v87;
      uint64_t v126 = v89;
      uint64_t v127 = v91;
      uint64_t v128 = v93;
      specialized AttributedString.Guts.replaceSubrange<A>(_:with:)((uint64_t)&v121, v103);
      swift_release();
      uint64_t v4 = v101;
      if (v104 == 1) {
        goto LABEL_39;
      }
    }
    swift_release();
    goto LABEL_47;
  }
  while (v20)
  {
    uint64_t v121 = 8204667;
    unint64_t v122 = 0xE300000000000000;
    *(void *)&v150[0] = v13;
    *((void *)&v150[0] + 1) = v15;
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
    if (!--v20) {
      goto LABEL_26;
    }
  }
LABEL_44:
  __break(1u);
LABEL_45:
  swift_release();
  swift_bridgeObjectRelease();
LABEL_47:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
LABEL_48:
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

uint64_t Duration.UnitsFormatStyle.Attributed.locale(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = (long long *)((char *)&v12 - v9);
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v2, (uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v7, (uint64_t)v10, type metadata accessor for Duration.UnitsFormatStyle);
  long long v12 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *unint64_t v10 = v12;
  outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  return outlined init with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v10, a2, type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>, uint64_t a8@<D0>)
{
  char v13 = *a3;
  long long v199 = *a4;
  swift_unknownObjectRetain();
  unint64_t v14 = specialized static ICUMeasurementNumberFormatter.create(for:locale:)(a1, a2, (uint64_t *)&v199);
  swift_unknownObjectRelease();
  if (!v14) {
    goto LABEL_107;
  }
  unint64_t v15 = 0x705060403020100uLL >> (8 * v13);
  uint64_t v16 = ICUNumberFormatterBase.attributedFormatPositions(_:)(a8, 0, 0x100000000);
  if (!v17)
  {
    uint64_t v115 = Duration.UnitsFormatStyle._getSkeletons(_:)(a5, a6);
    MEMORY[0x1F4188790](v115);
    uint64_t v117 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_SSs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j57VSdSSIggnyo_SS8skeleton_AG011measurementF0Sd0H5ValuetSSs5M11OIegnrzr_TRSSAMSdSSIggnyo_Tf1cn_nTf4ng_n(v116, (uint64_t (*)(uint64_t, uint64_t, unsigned char *, double))closure #1 in Duration.UnitsFormatStyle._formatFields(_:)partial apply);
    uint64_t v118 = swift_bridgeObjectRelease();
    unint64_t v119 = *(void *)(v117 + 16);
    long long v199 = 0uLL;
    uint64_t v164 = v117;
    unint64_t v166 = 0x705060403020100uLL >> (8 * v13);
    if (v119 == 2)
    {
      MEMORY[0x1F4188790](v118);
      uint64_t v122 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
      if (v123) {
        uint64_t v124 = v122;
      }
      else {
        uint64_t v124 = 0x7D317B202C7D307BLL;
      }
      if (v123) {
        unint64_t v125 = v123;
      }
      else {
        unint64_t v125 = 0xE800000000000000;
      }
      swift_bridgeObjectRelease();
      *(void *)&long long v199 = v124;
      *((void *)&v199 + 1) = v125;
      uint64_t v180 = 8204667;
      unint64_t v181 = 0xE300000000000000;
      unint64_t v208 = 8204411;
      unint64_t v209 = 0xE300000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
LABEL_73:
      if (*((void *)&v199 + 1))
      {
        uint64_t v120 = *(void *)(v117 + 16);
        if (!v120) {
          goto LABEL_104;
        }
        goto LABEL_75;
      }
      goto LABEL_108;
    }
    if (v119 == 1)
    {
      *(void *)&long long v199 = 8204411;
      *((void *)&v199 + 1) = 0xE300000000000000;
      uint64_t v120 = 1;
LABEL_75:
      uint64_t v169 = v117 + 32;
      while (v120 <= *(void *)(v117 + 16))
      {
        uint64_t v177 = v120 - 1;
        v139 = (uint64_t *)(v169 + 16 * (v120 - 1));
        uint64_t v172 = *v139;
        unint64_t v174 = v139[1];
        if ((*((void *)&v199 + 1) & 0x2000000000000000) != 0) {
          uint64_t v140 = HIBYTE(*((void *)&v199 + 1)) & 0xFLL;
        }
        else {
          uint64_t v140 = v199 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v141 = 7;
        if (((*((void *)&v199 + 1) >> 60) & ((v199 & 0x800000000000000) == 0)) != 0) {
          uint64_t v141 = 11;
        }
        unint64_t v142 = v141 | (v140 << 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v143 = specialized BidirectionalCollection._index<A>(_:backwardsOffsetByCountOf:)(v142, 8204411, 0xE300000000000000);
        if (v144) {
          goto LABEL_100;
        }
        unint64_t v145 = v143;
        unint64_t v146 = 4 * v140;
        while (1)
        {
          unint64_t v15 = v145;
          for (unint64_t i = 15; i < 0x30000; unint64_t i = String.index(after:)())
          {
            if (v146 <= v15 >> 14) {
              break;
            }
            uint64_t v149 = String.subscript.getter();
            uint64_t v151 = v150;
            if (v149 == String.subscript.getter() && v151 == v152)
            {
              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v148 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v148 & 1) == 0) {
                break;
              }
            }
            unint64_t v15 = String.index(after:)();
          }
          if ((i & 0xFFFFFFFFFFFFC000) == 0x30000) {
            break;
          }
          if (v145 < 0x4000) {
            goto LABEL_100;
          }
          unint64_t v145 = String.index(_:offsetBy:)();
        }
        swift_bridgeObjectRelease();
        if (v15 >> 14 < v145 >> 14) {
          goto LABEL_99;
        }
        uint64_t v180 = v172;
        unint64_t v181 = v174;
        lazy protocol witness table accessor for type String and conformance String();
        String.replaceSubrange<A>(_:with:)();
        swift_bridgeObjectRelease();
        uint64_t v117 = v164;
        LOBYTE(v15) = v166;
        uint64_t v120 = v177;
        if (!v177)
        {
          swift_bridgeObjectRelease();
          goto LABEL_97;
        }
      }
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      swift_bridgeObjectRelease();
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      swift_bridgeObjectRelease();
LABEL_97:
      uint64_t v180 = MEMORY[0x1E4FBC868];
      unint64_t v181 = MEMORY[0x1E4FBC870];
      v200 = &type metadata for AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field;
      unint64_t v201 = lazy protocol witness table accessor for type AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field and conformance AttributeScopes.FoundationAttributes.DurationFieldAttribute.Field();
      LOBYTE(v199) = v15;
      long long v202 = xmmword_182106C90;
      char v203 = 1;
      uint64_t v204 = 0;
      specialized AttributedString._AttributeStorage.subscript.setter((uint64_t)&v199, 0xD000000000000021, 0x80000001823AE490);
      uint64_t v153 = v180;
      uint64_t v154 = v181;
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(&v199, v153, v154, (uint64_t *)&v208);
      uint64_t result = swift_release();
      *a7 = v208;
      return result;
    }
    MEMORY[0x1F4188790](v118);
    uint64_t v126 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v127) {
      unint64_t v15 = v126;
    }
    else {
      unint64_t v15 = 0x7D317B202C7D307BLL;
    }
    unint64_t v128 = 0xE800000000000000;
    if (v127) {
      unint64_t v129 = v127;
    }
    else {
      unint64_t v129 = 0xE800000000000000;
    }
    MEMORY[0x1F4188790](v126);
    uint64_t v130 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
    if (v131) {
      uint64_t v132 = v130;
    }
    else {
      uint64_t v132 = 0x7D317B202C7D307BLL;
    }
    if (v131) {
      unint64_t v128 = v131;
    }
    swift_bridgeObjectRelease();
    *(void *)&long long v199 = v132;
    *((void *)&v199 + 1) = v128;
    unint64_t v133 = v119 - 3;
    if (v119 >= 3)
    {
      if (v119 != 3)
      {
        while (v133)
        {
          uint64_t v180 = 8204667;
          unint64_t v181 = 0xE300000000000000;
          unint64_t v208 = v15;
          unint64_t v209 = v129;
          if (!*((void *)&v199 + 1)) {
            goto LABEL_106;
          }
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
          if (!--v133) {
            goto LABEL_67;
          }
        }
        goto LABEL_102;
      }
LABEL_67:
      uint64_t v134 = swift_bridgeObjectRelease();
      uint64_t v180 = 8204667;
      unint64_t v181 = 0xE300000000000000;
      MEMORY[0x1F4188790](v134);
      uint64_t v135 = _withFixedUCharBuffer(size:defaultIsError:_:)(128, 0, (uint64_t (*)(uint64_t, uint64_t, int *))closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)partial apply);
      uint64_t v137 = 0x7D317B202C7D307BLL;
      if (v136)
      {
        uint64_t v137 = v135;
        unint64_t v138 = v136;
      }
      else
      {
        unint64_t v138 = 0xE800000000000000;
      }
      unint64_t v208 = v137;
      unint64_t v209 = v138;
      if (!*((void *)&v199 + 1)) {
        goto LABEL_109;
      }
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      swift_bridgeObjectRelease();
      uint64_t v180 = 8204667;
      unint64_t v181 = 0xE300000000000000;
      unint64_t v208 = 8204411;
      unint64_t v209 = 0xE300000000000000;
      uint64_t v117 = v164;
      if (!*((void *)&v199 + 1)) {
        goto LABEL_110;
      }
      RangeReplaceableCollection<>.replace<A, B>(_:with:maxReplacements:)();
      LOBYTE(v15) = v166;
      goto LABEL_73;
    }
    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    __break(1u);
LABEL_108:
    __break(1u);
LABEL_109:
    __break(1u);
LABEL_110:
    __break(1u);
LABEL_111:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v19 = v16;
  unint64_t v20 = v17;
  uint64_t v21 = v18;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v191, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v190);
  specialized AttributedString.subscript.setter(v15);
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v23 = v19;
    unint64_t v15 = v190[0];
    unint64_t v163 = v20;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v24 = v21 + 48;
    uint64_t v159 = v23;
    while (1)
    {
      char v173 = *(_DWORD *)(v24 - 16) == 11;
      uint64_t v180 = v23;
      unint64_t v181 = v20;
      swift_bridgeObjectRetain();
      unint64_t v25 = String.Index.init<A>(utf16Offset:in:)();
      uint64_t v180 = v23;
      unint64_t v181 = v20;
      swift_bridgeObjectRetain();
      unint64_t v26 = String.Index.init<A>(utf16Offset:in:)();
      if (v26 >> 14 < v25 >> 14) {
        goto LABEL_101;
      }
      unint64_t v27 = v26;
      long long v28 = *(_OWORD *)(v15 + 32);
      v227[0] = *(_OWORD *)(v15 + 16);
      v227[1] = v28;
      v227[2] = *(_OWORD *)(v15 + 48);
      if ((v25 & 0xC) == 8)
      {
        swift_retain();
        outlined retain of Locale((uint64_t)v227);
        BigString.utf16.getter();
        uint64_t v29 = BigString.UTF16View.count.getter();
        outlined release of Locale((uint64_t)&v192);
        if (v29 < (uint64_t)(v25 >> 16))
        {
          outlined release of Locale((uint64_t)v227);
          swift_release();
          goto LABEL_6;
        }
        uint64_t v178 = v24;
        long long v30 = (_OWORD *)v15;
        BigString.utf16.getter();
        BigString.startIndex.getter();
        uint64_t v31 = BigString.UTF16View.index(_:offsetBy:)();
        unint64_t v33 = v32;
        uint64_t v35 = v34;
        uint64_t v37 = v36;
        outlined release of Locale((uint64_t)&v193);
        if ((unsigned __int16)v25 >> 14)
        {
          BigString.utf8.getter();
          unint64_t v20 = v163;
          uint64_t v38 = BigString.UTF8View.index(_:offsetBy:)();
          unint64_t v170 = v39;
          uint64_t v35 = v40;
          uint64_t v165 = v41;
          outlined release of Locale((uint64_t)&v194);
        }
        else
        {
          uint64_t v165 = v37;
          unint64_t v170 = v33;
          uint64_t v38 = v31;
        }
        uint64_t v175 = v22;
        uint64_t v167 = v35;
        outlined release of Locale((uint64_t)v227);
      }
      else
      {
        uint64_t v175 = v22;
        uint64_t v178 = v24;
        swift_retain();
        outlined retain of Locale((uint64_t)v227);
        long long v30 = (_OWORD *)v15;
        uint64_t v42 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
        unint64_t v44 = v43;
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        BigString.endIndex.getter();
        uint64_t v167 = v46;
        unint64_t v170 = v44;
        uint64_t v165 = v48;
        char v49 = static BigString.Index.< infix(_:_:)();
        outlined release of Locale((uint64_t)v227);
        if (v49)
        {
          swift_release();
          unint64_t v20 = v163;
          unint64_t v15 = (unint64_t)v30;
          uint64_t v24 = v178;
          goto LABEL_6;
        }
        unint64_t v20 = v163;
        uint64_t v38 = v42;
      }
      unint64_t v15 = (unint64_t)v30;
      unint64_t v50 = v30 + 1;
      long long v51 = v30[2];
      v226[0] = v30[1];
      v226[1] = v51;
      v226[2] = v30[3];
      if ((v27 & 0xC) == 8)
      {
        long long v52 = v30[2];
        v228[0] = *v50;
        v228[1] = v52;
        v228[2] = v30[3];
        outlined init with take of any PredicateExpression<Self.Output == B1>(v228, (uint64_t)v229);
        outlined retain of Locale((uint64_t)v229);
        BigString.utf16.getter();
        uint64_t v53 = BigString.UTF16View.count.getter();
        outlined release of Locale((uint64_t)&v195);
        uint64_t v22 = v175;
        if (v53 >= (uint64_t)(v27 >> 16))
        {
          uint64_t v161 = v38;
          v162 = v30;
          uint64_t v64 = (unsigned __int16)v27 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          uint64_t v65 = BigString.UTF16View.index(_:offsetBy:)();
          uint64_t v67 = v66;
          uint64_t v69 = v68;
          uint64_t v71 = v70;
          outlined release of Locale((uint64_t)&v196);
          if (v64)
          {
            BigString.utf8.getter();
            uint64_t v65 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v67 = v72;
            uint64_t v157 = v73;
            uint64_t v160 = v74;
            outlined release of Locale((uint64_t)&v197);
          }
          else
          {
            uint64_t v160 = v71;
            uint64_t v157 = v69;
          }
          uint64_t v158 = v67;
          uint64_t v156 = v65;
          outlined release of Locale((uint64_t)v226);
          goto LABEL_27;
        }
        outlined release of Locale((uint64_t)v226);
LABEL_28:
        swift_release();
        uint64_t v23 = v159;
        uint64_t v24 = v178;
        goto LABEL_6;
      }
      v162 = v30;
      uint64_t v54 = v38;
      long long v55 = v30[2];
      v230[0] = *v50;
      v230[1] = v55;
      v230[2] = v30[3];
      outlined init with take of any PredicateExpression<Self.Output == B1>(v230, (uint64_t)v231);
      outlined retain of Locale((uint64_t)v231);
      uint64_t v56 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
      uint64_t v58 = v57;
      uint64_t v60 = v59;
      uint64_t v62 = v61;
      BigString.endIndex.getter();
      uint64_t v160 = v62;
      char v63 = static BigString.Index.< infix(_:_:)();
      outlined release of Locale((uint64_t)v226);
      uint64_t v22 = v175;
      if ((v63 & 1) == 0)
      {
        uint64_t v157 = v60;
        uint64_t v158 = v58;
        uint64_t v156 = v56;
        uint64_t v161 = v54;
        unint64_t v20 = v163;
LABEL_27:
        long long v75 = *v50;
        long long v76 = v30[2];
        long long v225 = v30[3];
        v224[1] = v76;
        v224[0] = v75;
        long long v77 = *v50;
        long long v78 = v30[2];
        v232[2] = v225;
        v232[1] = v78;
        v232[0] = v77;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v232, (uint64_t)v233);
        outlined retain of Locale((uint64_t)v233);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v224);
        unint64_t v15 = (unint64_t)v162;
        if ((static BigString.Index.< infix(_:_:)() & 1) == 0)
        {
          long long v79 = *v50;
          long long v80 = v30[2];
          long long v223 = v30[3];
          v222[1] = v80;
          v222[0] = v79;
          long long v81 = *v50;
          long long v82 = v30[2];
          v234[2] = v223;
          v234[1] = v82;
          v234[0] = v81;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v234, (uint64_t)v235);
          outlined retain of Locale((uint64_t)v235);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v222);
          uint64_t v83 = v156;
          char v84 = static BigString.Index.< infix(_:_:)();
          swift_release();
          uint64_t v24 = v178;
          if (v84)
          {
            uint64_t v23 = v159;
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              long long v85 = v50[1];
              v221[0] = *v50;
              v221[1] = v85;
              v221[2] = v50[2];
              uint64_t v86 = v162[8];
              uint64_t v87 = v162[9];
              uint64_t v88 = v162[10];
              uint64_t v89 = v162[11];
              type metadata accessor for AttributedString.Guts();
              swift_allocObject();
              outlined retain of Locale((uint64_t)v221);
              swift_unknownObjectRetain();
              uint64_t v90 = v89;
              uint64_t v83 = v156;
              uint64_t v91 = AttributedString.Guts.init(string:runs:)(v221, v86, v87, v88, v90);
              swift_release();
              unint64_t v15 = v91;
            }
            long long v92 = *(_OWORD *)(v15 + 32);
            v220[0] = *(_OWORD *)(v15 + 16);
            v220[1] = v92;
            v220[2] = *(_OWORD *)(v15 + 48);
            swift_retain();
            outlined retain of Locale((uint64_t)v220);
            BigString.startIndex.getter();
            outlined release of Locale((uint64_t)v220);
            long long v93 = *(_OWORD *)(v15 + 16);
            long long v94 = *(_OWORD *)(v15 + 48);
            v219[1] = *(_OWORD *)(v15 + 32);
            v219[2] = v94;
            v219[0] = v93;
            long long v95 = *(_OWORD *)(v15 + 16);
            v236[1] = *(_OWORD *)(v15 + 32);
            v236[2] = v94;
            v236[0] = v95;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v236, (uint64_t)v237);
            outlined retain of Locale((uint64_t)v237);
            BigString.endIndex.getter();
            outlined release of Locale((uint64_t)v219);
            swift_release();
            unint64_t v208 = v161;
            unint64_t v209 = v170;
            uint64_t v210 = v167;
            uint64_t v211 = v165;
            uint64_t v212 = v83;
            uint64_t v213 = v158;
            uint64_t v214 = v157;
            uint64_t v215 = v160;
            long long v96 = *(_OWORD *)(v15 + 16);
            long long v97 = *(_OWORD *)(v15 + 48);
            long long v217 = *(_OWORD *)(v15 + 32);
            long long v218 = v97;
            long long v216 = v96;
            swift_retain_n();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v198);
            uint64_t v98 = BigSubstring.UnicodeScalarView.startIndex.getter();
            uint64_t v176 = v99;
            uint64_t v168 = v101;
            uint64_t v171 = v100;
            uint64_t v102 = BigSubstring.UnicodeScalarView.endIndex.getter();
            uint64_t v104 = v103;
            uint64_t v106 = v105;
            uint64_t v108 = v107;
            outlined release of Locale((uint64_t)&v199);
            swift_release();
            uint64_t v180 = v15;
            unint64_t v181 = v98;
            uint64_t v182 = v176;
            uint64_t v183 = v171;
            uint64_t v184 = v168;
            uint64_t v185 = v102;
            uint64_t v186 = v104;
            uint64_t v187 = v106;
            uint64_t v188 = v108;
            if (one-time initialization token for currentIdentity != -1) {
              swift_once();
            }
            unint64_t v109 = (uint64_t *)(static AttributedString.currentIdentity + 16);
            uint64_t v110 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
            swift_retain();
            os_unfair_lock_lock(v110);
            closure #1 in static AttributedString._nextModifyIdentity.getter(v109, &v179);
            os_unfair_lock_unlock(v110);
            swift_release();
            uint64_t v111 = v179;
            uint64_t v189 = v179;
            BigString.init()();
            uint64_t v179 = 0;
            MEMORY[0x185309530](&v179, 8);
            uint64_t v112 = v179;
            type metadata accessor for AttributedString.Guts();
            uint64_t v113 = swift_allocObject();
            if ((BigString.isEmpty.getter() & 1) == 0) {
              goto LABEL_103;
            }
            long long v114 = v206;
            *(_OWORD *)(v113 + 16) = v205;
            *(_OWORD *)(v113 + 32) = v114;
            *(_OWORD *)(v113 + 48) = v207;
            *(void *)(v113 + 64) = 0;
            *(void *)(v113 + 72) = 0;
            *(void *)(v113 + 80) = 0;
            *(void *)(v113 + 88) = v112;
            swift_release();
            specialized AttributedSubstring.subscript.setter(v173);
            if (v189 != v111) {
              goto LABEL_111;
            }
            unint64_t v15 = v180;
            swift_release();
            uint64_t v23 = v159;
          }
          goto LABEL_6;
        }
        goto LABEL_28;
      }
      unint64_t v15 = (unint64_t)v30;
      swift_release();
      uint64_t v23 = v159;
      unint64_t v20 = v163;
      uint64_t v24 = v178;
LABEL_6:
      v24 += 24;
      if (!--v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = v190[0];
LABEL_43:
  uint64_t result = swift_release();
  *a7 = v15;
  return result;
}

void Duration.UnitsFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v8)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  Swift::UInt v36;
  Swift::UInt v37;
  Swift::UInt8 v38;
  Swift::UInt8 v39;
  Swift::UInt8 v40;
  uint64_t v41;
  Swift::UInt32 v42;
  Swift::UInt v43;
  uint64_t v44;
  Swift::UInt *v45;
  uint64_t v46;
  char *v47;
  Swift::UInt64 v48;
  Swift::UInt64 v49;
  uint64_t v50;
  Swift::UInt v51;
  Swift::UInt v52;
  void *v53;
  unsigned char v54[144];
  unsigned char v55[8];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  char v71;
  char v72;
  void v73[18];
  unsigned char v74[144];
  unsigned char v75[152];

  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain();
  if (v6(ObjectType, v4))
  {
    Swift::UInt8 v7 = 1;
LABEL_5:
    Hasher._combine(_:)(v7);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v8(v73, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v73, (uint64_t)v74, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v75) == 1)
  {
    Swift::UInt8 v7 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v55, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v55[0] == 2)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = v55[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  unint64_t v10 = v56;
  if (!v56)
  {
    Hasher._combine(_:)(0);
    unint64_t v15 = v55;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v10 + 16));
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v54, &demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v15 = v54;
LABEL_20:
    outlined retain of LocalePreferences(v15);
    if (!v57) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v12 = v10 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v12 += 16;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  if (!v57)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v58) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    char v13 = v59;
    if (!v59) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v13);
    swift_bridgeObjectRelease();
    unint64_t v14 = v60;
    if (!v60) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v13 = v59;
  if (v59) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  unint64_t v14 = v60;
  if (!v60)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v14);
  swift_bridgeObjectRelease();
LABEL_25:
  uint64_t v16 = v61;
  unint64_t v17 = v62;
  uint64_t v19 = v63;
  uint64_t v18 = v64;
  unint64_t v20 = v65;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v21 = v17;
    uint64_t v22 = v19;
    uint64_t v23 = v18;
    uint64_t v24 = v20;
    unint64_t v25 = v16;
    _CFObject.hash(into:)();
    uint64_t v53 = v16;
    if (v17) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v30 = v20;
    uint64_t v31 = v17;
    unint64_t v32 = v19;
    unint64_t v33 = v18;
    uint64_t v53 = 0;
    if (v17)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      unint64_t v26 = v17;
      _CFObject.hash(into:)();

      if (v19) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v19)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v27 = v19;
    _CFObject.hash(into:)();

    if (v18) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v20) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v18) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  long long v28 = v18;
  _CFObject.hash(into:)();

  if (v20)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v29 = v20;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  uint64_t v29 = 0;
LABEL_36:

  uint64_t v34 = v66;
  if (v34)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v34);
    swift_bridgeObjectRelease();
    uint64_t v35 = v67;
    if (v67) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v68) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  uint64_t v35 = v67;
  if (!v67) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v35);
  swift_bridgeObjectRelease();
  if (!v68) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v69 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v36 = v69 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v36);
  }
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v37 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v37);
  }
  if (v71 == 2)
  {
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v38 = v71 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v38);
  if (v72 == 2)
  {
    unint64_t v39 = 0;
  }
  else
  {
    uint64_t v40 = v72 & 1;
    Hasher._combine(_:)(1u);
    unint64_t v39 = v40;
  }
  Hasher._combine(_:)(v39);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v74, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  uint64_t v41 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  uint64_t v42 = *(_DWORD *)(v2 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 24));
  Hasher._combine(_:)(v42);
  if (*(unsigned char *)(v2 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v43 = *(void *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  Hasher._combine(_:)(*(void *)(v2 + 48));
  unint64_t v44 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v45 = (Swift::UInt *)(v2 + *(int *)(v44 + 36));
  Hasher._combine(_:)(*v45);
  Hasher._combine(_:)(v45[1]);
  uint64_t v46 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v47 = (char *)v45 + *(int *)(v46 + 28);
  if (v47[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v48 = *(void *)v47;
    Hasher._combine(_:)(1u);
    if ((v48 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      char v49 = v48;
    }
    else {
      char v49 = 0;
    }
    Hasher._combine(_:)(v49);
  }
  unint64_t v50 = v2 + *(int *)(v44 + 40);
  if (*(unsigned char *)(v50 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v52 = *(void *)v50;
    long long v51 = *(void *)(v50 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v51);
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Duration.UnitsFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Duration.UnitsFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Duration.UnitsFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.UnitsFormatStyle(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int Duration.UnitsFormatStyle.Attributed.hashValue.getter()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  Swift::UInt v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  Swift::UInt8 v38;
  uint64_t v39;
  Swift::UInt32 v40;
  Swift::UInt v41;
  uint64_t v42;
  Swift::UInt *v43;
  uint64_t v44;
  char *v45;
  Swift::UInt64 v46;
  Swift::UInt64 v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  unsigned char v52[144];
  unsigned char v53[8];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  void v71[18];
  unsigned char v72[144];
  unsigned char v73[144];
  unsigned char v74[80];

  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if (v4(ObjectType, v2))
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_56;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v71, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v73, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v73) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v53, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v53[0] == 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v53[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  uint64_t v8 = v54;
  if (!v54)
  {
    Hasher._combine(_:)(0);
    char v13 = v53;
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
    outlined init with take of LocalePreferences?((uint64_t)v72, (uint64_t)v52, &demangling cache variable for type metadata for LocalePreferences?);
    char v13 = v52;
LABEL_20:
    outlined retain of LocalePreferences(v13);
    if (!v55) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v55)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v56) {
      goto LABEL_15;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v56)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v11 = v57;
    if (!v57) {
      goto LABEL_16;
    }
LABEL_23:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v11);
    swift_bridgeObjectRelease();
    long long v12 = v58;
    if (!v58) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v57;
  if (v57) {
    goto LABEL_23;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  long long v12 = v58;
  if (!v58)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v12);
  swift_bridgeObjectRelease();
LABEL_25:
  unint64_t v15 = v59;
  unint64_t v14 = v60;
  unint64_t v17 = v61;
  uint64_t v16 = v62;
  uint64_t v18 = v63;
  if (v59)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v19 = v14;
    unint64_t v20 = v17;
    uint64_t v21 = v16;
    uint64_t v22 = v18;
    uint64_t v23 = v15;
    _CFObject.hash(into:)();
    if (v14) {
      goto LABEL_27;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v28 = v18;
    uint64_t v29 = v14;
    long long v30 = v17;
    uint64_t v31 = v16;
    if (v14)
    {
LABEL_27:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v24 = v14;
      _CFObject.hash(into:)();

      if (v17) {
        goto LABEL_28;
      }
      goto LABEL_33;
    }
  }
  Hasher._combine(_:)(0);
  if (v17)
  {
LABEL_28:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v25 = v17;
    _CFObject.hash(into:)();

    if (v16) {
      goto LABEL_29;
    }
LABEL_34:
    Hasher._combine(_:)(0);
    if (v18) {
      goto LABEL_30;
    }
    goto LABEL_35;
  }
LABEL_33:
  Hasher._combine(_:)(0);
  if (!v16) {
    goto LABEL_34;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  unint64_t v26 = v16;
  _CFObject.hash(into:)();

  if (v18)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v27 = v18;
    _CFObject.hash(into:)();

    goto LABEL_36;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  unint64_t v27 = 0;
LABEL_36:

  unint64_t v32 = v64;
  if (v32)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v74, v32);
    swift_bridgeObjectRelease();
    unint64_t v33 = v65;
    if (v65) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    if (v66) {
      goto LABEL_39;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    goto LABEL_43;
  }
  Hasher._combine(_:)(0);
  unint64_t v33 = v65;
  if (!v65) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v74, v33);
  swift_bridgeObjectRelease();
  if (!v66) {
    goto LABEL_42;
  }
LABEL_39:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_43:
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v34 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v68 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v35 = v68 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v35);
  }
  if (v69 == 2)
  {
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v36 = v69 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v36);
  if (v70 == 2)
  {
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v38 = v70 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v37 = v38;
  }
  Hasher._combine(_:)(v37);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_56:
  swift_unknownObjectRelease();
  unint64_t v39 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v74, v39);
  swift_bridgeObjectRelease();
  uint64_t v40 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v40);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v41 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  Hasher._combine(_:)(*(void *)(v1 + 48));
  uint64_t v42 = type metadata accessor for Duration.UnitsFormatStyle(0);
  unint64_t v43 = (Swift::UInt *)(v1 + *(int *)(v42 + 36));
  Hasher._combine(_:)(*v43);
  Hasher._combine(_:)(v43[1]);
  unint64_t v44 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v45 = (char *)v43 + *(int *)(v44 + 28);
  if (v45[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v46 = *(void *)v45;
    Hasher._combine(_:)(1u);
    if ((v46 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    Hasher._combine(_:)(v47);
  }
  uint64_t v48 = v1 + *(int *)(v42 + 40);
  if (*(unsigned char *)(v48 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v50 = *(void *)v48;
    char v49 = *(void *)(v48 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v50);
    Hasher._combine(_:)(v49);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v13 = a2;
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v15 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.Attributed(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v6);
    outlined init with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v15, (uint64_t)v11, type metadata accessor for Duration.UnitsFormatStyle);
    outlined init with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v11, v13, type metadata accessor for Duration.UnitsFormatStyle.Attributed);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return Duration.UnitsFormatStyle.Attributed.format(_:)(*a1, a1[1], a2);
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (long long *)((char *)&v12 - v9);
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v2, (uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v7, (uint64_t)v10, type metadata accessor for Duration.UnitsFormatStyle);
  long long v12 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *uint64_t v10 = v12;
  outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v7, type metadata accessor for Duration.UnitsFormatStyle);
  return outlined init with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v10, a2, type metadata accessor for Duration.UnitsFormatStyle);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Duration.UnitsFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Duration.UnitsFormatStyle.Attributed(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Duration.UnitsFormatStyle.Attributed.CodingKeys>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for Duration.UnitsFormatStyle(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Duration.UnitsFormatStyle.Attributed()
{
  void (*v6)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Swift::UInt v33;
  Swift::UInt v34;
  Swift::UInt8 v35;
  Swift::UInt8 v36;
  Swift::UInt8 v37;
  uint64_t v38;
  Swift::UInt32 v39;
  Swift::UInt v40;
  uint64_t v41;
  Swift::UInt *v42;
  uint64_t v43;
  char *v44;
  Swift::UInt64 v45;
  Swift::UInt64 v46;
  uint64_t v47;
  Swift::UInt v48;
  Swift::UInt v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  void v69[18];
  unsigned char v70[144];
  unsigned char v71[144];
  unsigned char v72[80];

  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  swift_unknownObjectRetain();
  if (v4(ObjectType, v2))
  {
    Swift::UInt8 v5 = 1;
LABEL_5:
    Hasher._combine(_:)(v5);
    goto LABEL_55;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 464);
  swift_unknownObjectRetain();
  v6(v69, ObjectType, v2);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70, &demangling cache variable for type metadata for LocalePreferences?);
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71, &demangling cache variable for type metadata for LocalePreferences?);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v71) == 1)
  {
    Swift::UInt8 v5 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)&v51, &demangling cache variable for type metadata for LocalePreferences?);
  Hasher._combine(_:)(1u);
  if (v51 == 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = v51 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v7);
  uint64_t v8 = v52;
  if (!v52)
  {
    Hasher._combine(_:)(0);
LABEL_19:
    outlined retain of LocalePreferences(&v51);
    if (!v53) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v8 + 16));
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9) {
    goto LABEL_19;
  }
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v10 = v8 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v10 += 16;
    --v9;
  }
  while (v9);
  swift_bridgeObjectRelease();
  if (!v53)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v54) {
      goto LABEL_15;
    }
    goto LABEL_21;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_15:
    Hasher._combine(_:)(0);
    uint64_t v11 = v55;
    if (!v55) {
      goto LABEL_16;
    }
LABEL_22:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v11);
    swift_bridgeObjectRelease();
    long long v12 = v56;
    if (!v56) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v55;
  if (v55) {
    goto LABEL_22;
  }
LABEL_16:
  Hasher._combine(_:)(0);
  long long v12 = v56;
  if (!v56)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v12);
  swift_bridgeObjectRelease();
LABEL_24:
  uint64_t v14 = v57;
  uint64_t v13 = v58;
  uint64_t v16 = v59;
  uint64_t v15 = v60;
  unint64_t v17 = v61;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v18 = v13;
    uint64_t v19 = v16;
    unint64_t v20 = v15;
    uint64_t v21 = v17;
    uint64_t v22 = v14;
    _CFObject.hash(into:)();
    if (v13) {
      goto LABEL_26;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unint64_t v27 = v17;
    long long v28 = v13;
    uint64_t v29 = v16;
    long long v30 = v15;
    if (v13)
    {
LABEL_26:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
      uint64_t v23 = v13;
      _CFObject.hash(into:)();

      if (v16) {
        goto LABEL_27;
      }
      goto LABEL_32;
    }
  }
  Hasher._combine(_:)(0);
  if (v16)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    uint64_t v24 = v16;
    _CFObject.hash(into:)();

    if (v15) {
      goto LABEL_28;
    }
LABEL_33:
    Hasher._combine(_:)(0);
    if (v17) {
      goto LABEL_29;
    }
    goto LABEL_34;
  }
LABEL_32:
  Hasher._combine(_:)(0);
  if (!v15) {
    goto LABEL_33;
  }
LABEL_28:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
  unint64_t v25 = v15;
  _CFObject.hash(into:)();

  if (v17)
  {
LABEL_29:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
    unint64_t v26 = v17;
    _CFObject.hash(into:)();

    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
  unint64_t v26 = 0;
LABEL_35:

  uint64_t v31 = v62;
  if (v31)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v72, v31);
    swift_bridgeObjectRelease();
    unint64_t v32 = v63;
    if (v63) {
      goto LABEL_37;
    }
LABEL_40:
    Hasher._combine(_:)(0);
    if (v64) {
      goto LABEL_38;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    goto LABEL_42;
  }
  Hasher._combine(_:)(0);
  unint64_t v32 = v63;
  if (!v63) {
    goto LABEL_40;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v72, v32);
  swift_bridgeObjectRelease();
  if (!v64) {
    goto LABEL_41;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_42:
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v33 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v33);
  }
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v34 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v34);
  }
  if (v67 == 2)
  {
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = v67 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v35);
  if (v68 == 2)
  {
    uint64_t v36 = 0;
  }
  else
  {
    uint64_t v37 = v68 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v36 = v37;
  }
  Hasher._combine(_:)(v36);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v70, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
LABEL_55:
  swift_unknownObjectRelease();
  uint64_t v38 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v72, v38);
  swift_bridgeObjectRelease();
  unint64_t v39 = *(_DWORD *)(v1 + 28);
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 24));
  Hasher._combine(_:)(v39);
  if (*(unsigned char *)(v1 + 40) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v40 = *(void *)(v1 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  Hasher._combine(_:)(*(void *)(v1 + 48));
  uint64_t v41 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v42 = (Swift::UInt *)(v1 + *(int *)(v41 + 36));
  Hasher._combine(_:)(*v42);
  Hasher._combine(_:)(v42[1]);
  unint64_t v43 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  type metadata accessor for FloatingPointRoundingRule();
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v44 = (char *)v42 + *(int *)(v43 + 28);
  if (v44[8] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v45 = *(void *)v44;
    Hasher._combine(_:)(1u);
    if ((v45 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v46 = v45;
    }
    else {
      uint64_t v46 = 0;
    }
    Hasher._combine(_:)(v46);
  }
  uint64_t v47 = v1 + *(int *)(v41 + 40);
  if (*(unsigned char *)(v47 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v49 = *(void *)v47;
    uint64_t v48 = *(void *)(v47 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v49);
    Hasher._combine(_:)(v48);
  }
  return Hasher._finalize()();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.getter()
{
  return swift_getAtKeyPath();
}

uint64_t Duration.UnitsFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Duration.UnitsFormatStyle.Attributed.subscript.setter(a1);
  swift_release();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + v3 + 8) - 8) + 8);

  return v4(a1);
}

void (*Duration.UnitsFormatStyle.Attributed.subscript.modify(void *a1, void *a2))(uint64_t a1, char a2)
{
  Swift::UInt8 v5 = malloc(0x38uLL);
  *a1 = v5;
  *Swift::UInt8 v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x1E4FBBC10] + *a2 + 8);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  v5[6] = malloc(v8);
  swift_getAtKeyPath();
  return Measurement<>.AttributedStyle.subscript.modify;
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 1, MEMORY[0x1E4FBC6F8]);
}

uint64_t Duration.UnitsFormatStyle.discreteInput(before:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 1, MEMORY[0x1E4FBC6F8]);
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 0, MEMORY[0x1E4FBC6F0]);
}

uint64_t Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(uint64_t a1, uint64_t a2, int a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = Duration.UnitsFormatStyle.bound(for:countingDown:)(a1, a2, a3);
  uint64_t v7 = v6;
  if (v8)
  {
    uint64_t v9 = Duration.init(secondsComponent:attosecondsComponent:)();
    return a4(v5, v7, v9, v10);
  }
  return v5;
}

uint64_t Duration.UnitsFormatStyle.discreteInput(after:)(uint64_t a1, uint64_t a2)
{
  return Duration.UnitsFormatStyle.Attributed.discreteInput(before:)(a1, a2, 0, MEMORY[0x1E4FBC6F0]);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed(a1, 1, MEMORY[0x1E4FBC6F8], a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed(a1, 0, MEMORY[0x1E4FBC6F0], a2);
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Duration.UnitsFormatStyle.Attributed@<X0>(uint64_t *a1@<X0>, int a2@<W3>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = Duration.UnitsFormatStyle.bound(for:countingDown:)(*a1, a1[1], a2);
  uint64_t v7 = result;
  uint64_t v9 = v8;
  if (v10)
  {
    uint64_t v11 = Duration.init(secondsComponent:attosecondsComponent:)();
    uint64_t result = a3(v7, v9, v11, v12);
    uint64_t v7 = result;
    uint64_t v9 = v13;
  }
  *(void *)a4 = v7;
  *(void *)(a4 + 8) = v9;
  *(unsigned char *)(a4 + 16) = 0;
  return result;
}

uint64_t Duration.UnitsFormatStyle.bound(for:countingDown:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v3 + 16);
  uint64_t v40 = a1;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  char v16 = a3;
  uint64_t v17 = Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(v14, a2, a3, v13);
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v38 = v9;
  uint64_t v39 = v7;
  if (v20)
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBBE88], v41);
  }
  else
  {
    uint64_t v22 = type metadata accessor for Duration.UnitsFormatStyle(0);
    outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v3 + *(int *)(v22 + 36), (uint64_t)v9, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, &v9[*(int *)(v7 + 24)], v41);
  }
  int v23 = v16 & 1;
  uint64_t v24 = static Duration.bound(for:in:countingDown:roundingRule:)(v40, v15, v17, v19, v23, (uint64_t)v12);
  uint64_t v26 = v25;
  unint64_t v27 = *(void (**)(char *, uint64_t))(v10 + 8);
  v27(v12, v41);
  if (v21)
  {
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = specialized _NativeSet.filter(_:)(v28);
    uint64_t v30 = Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(v24, v26, v23, v29);
    uint64_t v32 = v31;
    swift_release();
    uint64_t v33 = type metadata accessor for Duration.UnitsFormatStyle(0);
    uint64_t v34 = (uint64_t)v38;
    outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v3 + *(int *)(v33 + 36), (uint64_t)v38, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    uint64_t v35 = v34 + *(int *)(v39 + 24);
    uint64_t v24 = static Duration.bound(for:in:countingDown:roundingRule:)(v24, v26, v30, v32, v23, v35);
    v27((char *)v35, v41);
  }
  return v24;
}

uint64_t Duration.UnitsFormatStyle.interval(for:countingDown:allowedUnits:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v270 = a3;
  uint64_t v297 = a1;
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle(0);
  MEMORY[0x1F4188790](v6);
  v272 = &v256[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  v296 = &v256[-v9];
  uint64_t v286 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v286 - 8);
  MEMORY[0x1F4188790](v286);
  v269 = &v256[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = &v256[-v13];
  uint64_t v283 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  MEMORY[0x1F4188790](v283);
  uint64_t v294 = (uint64_t)&v256[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v256[-v17];
  swift_bridgeObjectRetain();
  Swift::Int v19 = specialized _ArrayProtocol.filter(_:)((Swift::Int)&outlined read-only object #0 of static Duration.UnitsFormatStyle.Unit._Unit.allCases.getter, a4);
  swift_bridgeObjectRelease();
  int64_t v20 = *(void *)(v19 + 16);
  uint64_t v287 = a2;
  uint64_t v298 = v10;
  if (v20)
  {
    char v21 = v18;
    v301[0] = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    uint64_t v22 = 0;
    uint64_t v23 = v301[0];
    uint64_t v24 = *(void *)(v301[0] + 16);
    do
    {
      char v25 = *(unsigned char *)(v19 + v22 + 32);
      v301[0] = v23;
      unint64_t v26 = *(void *)(v23 + 24);
      if (v24 + v22 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v24 + v22 + 1, 1);
        uint64_t v23 = v301[0];
      }
      *(void *)(v23 + 16) = v24 + v22 + 1;
      *(unsigned char *)(v23 + v24 + v22++ + 32) = v25;
    }
    while (v20 != v22);
    swift_bridgeObjectRelease();
    a2 = v287;
    uint64_t v18 = v21;
    uint64_t v10 = v298;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = MEMORY[0x1E4FBC860];
  }
  uint64_t v27 = *(void *)(v23 + 16);
  if (!v27)
  {
    swift_bridgeObjectRelease();
    return -1000000000000000000;
  }
  uint64_t v282 = v23;
  uint64_t v288 = *(char *)(v27 + v23 + 31);
  v301[0] = v297;
  v301[1] = a2;
  uint64_t v28 = v277;
  uint64_t v29 = *(void *)(v277 + 32);
  BOOL v30 = *(unsigned char *)(v277 + 40) == 0;
  uint64_t v279 = v27;
  if (!v30) {
    uint64_t v29 = v27;
  }
  uint64_t v295 = v29;
  uint64_t v299 = v277 + *(int *)(v6 + 36);
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v299, (uint64_t)v18, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
  uint64_t v291 = v6;
  uint64_t v31 = v283;
  uint64_t v32 = &v18[*(int *)(v283 + 24)];
  uint64_t v33 = *(void (**)(unsigned char *))(v10 + 104);
  int v261 = *MEMORY[0x1E4FBBE98];
  v292 = v18;
  v293 = v33;
  uint64_t v34 = v286;
  v33(v14);
  char v35 = static FloatingPointRoundingRule.== infix(_:_:)();
  uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v36((uint64_t)v14, v34);
  v36((uint64_t)v32, v34);
  uint64_t v37 = v28;
  uint64_t v38 = v296;
  outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v37, (uint64_t)v296, type metadata accessor for Duration.UnitsFormatStyle);
  uint64_t v281 = v10 + 8;
  v280 = v36;
  if (v35)
  {
    uint64_t result = outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v38, type metadata accessor for Duration.UnitsFormatStyle);
    int v265 = *MEMORY[0x1E4FBBEA0];
    int v271 = 1;
  }
  else
  {
    uint64_t v40 = (uint64_t)v292;
    outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)&v38[*(int *)(v291 + 36)], (uint64_t)v292, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    uint64_t v41 = v40 + *(int *)(v31 + 24);
    int v265 = *MEMORY[0x1E4FBBEA0];
    v293(v14);
    int v271 = static FloatingPointRoundingRule.== infix(_:_:)();
    v36((uint64_t)v14, v34);
    outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy((uint64_t)v38, type metadata accessor for Duration.UnitsFormatStyle);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v36)(v41, v34);
  }
  uint64_t v42 = 0;
  unsigned int v274 = 0;
  uint64_t v276 = 0;
  uint64_t v275 = 0;
  v264 = (void (**)(unsigned char *, uint64_t, uint64_t))(v298 + 16);
  v263 = (uint64_t (**)(unsigned char *, uint64_t))(v298 + 88);
  int v260 = *MEMORY[0x1E4FBBEA8];
  uint64_t v43 = v288;
  int v259 = *MEMORY[0x1E4FBBEB0];
  int v258 = *MEMORY[0x1E4FBBE88];
  int v257 = *MEMORY[0x1E4FBBE90];
  uint64_t v267 = 3 * (v288 - 5) + 3;
  uint64_t v266 = v267 ^ 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v262 = (char)(v288 - 5);
  uint64_t v273 = 1;
  unsigned int v268 = (v288 - 5);
  uint64_t v44 = v297;
  uint64_t v45 = v283;
  while (1)
  {
    if (__OFADD__(v42, 1))
    {
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
      __break(1u);
LABEL_207:
      __break(1u);
      __break(1u);
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
      goto LABEL_210;
    }
    if (v295 < 1) {
      goto LABEL_183;
    }
    uint64_t v47 = (unsigned char *)*(char *)(v282 + v42 + 32);
    uint64_t v285 = v295 - 1;
    if (v47 < 5)
    {
      static Duration.interval(fractionalSecondsLength:)(0);
      unint64_t v300 = qword_1821A5C18[(void)v47];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v48 = static Duration.* infix<A>(_:_:)();
    }
    else
    {
      if (((_BYTE)v47 - 5) >= 3u) {
        goto LABEL_205;
      }
      uint64_t v48 = static Duration.interval(fractionalSecondsLength:)(3 * ((_BYTE)v47 - 5) + 3);
    }
    uint64_t v289 = v49;
    uint64_t v290 = v48;
    uint64_t result = *(void *)(v299 + 8);
    uint64_t v50 = v299 + *(int *)(v45 + 28);
    char v51 = *(unsigned char *)(v50 + 8);
    v296 = v47;
    v292 = (unsigned char *)(v42 + 1);
    uint64_t v284 = v50;
    if (v43 < 5)
    {
      static Duration.interval(fractionalSecondsLength:)(result);
      unint64_t v300 = qword_1821A5C18[v43];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v53 = static Duration.* infix<A>(_:_:)();
      uint64_t v55 = v56;
      if (v51) {
        goto LABEL_36;
      }
      goto LABEL_34;
    }
    if (v268 >= 3) {
      goto LABEL_204;
    }
    uint64_t v52 = v266;
    if (v266 >= result) {
      uint64_t v52 = result;
    }
    uint64_t result = v267 + v52;
    if (__OFADD__(v267, v52)) {
      goto LABEL_186;
    }
    uint64_t result = static Duration.interval(fractionalSecondsLength:)(result);
    uint64_t v53 = result;
    uint64_t v55 = v54;
    if ((v51 & 1) == 0)
    {
      if (v262 >= 3) {
        goto LABEL_207;
      }
LABEL_34:
      uint64_t v57 = static Duration.* infix(_:_:)();
      uint64_t v59 = v58;
      if ((static Duration.< infix(_:_:)() & 1) == 0)
      {
        uint64_t v53 = v57;
        uint64_t v55 = v59;
      }
    }
LABEL_36:
    outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v299, v294, type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
    uint64_t v60 = *(int *)(v45 + 24);
    static Duration.zero.getter();
    char v61 = static Duration.< infix(_:_:)();
    uint64_t v298 = v60;
    if (v61)
    {
      uint64_t v62 = static Duration.zero.getter();
      uint64_t v53 = MEMORY[0x185304360](v62);
      uint64_t v55 = v63;
    }
    static Duration.zero.getter();
    uint64_t v64 = v44;
    uint64_t v65 = a2;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v66 = static Duration.zero.getter();
      uint64_t v64 = MEMORY[0x185304360](v66);
      uint64_t v65 = v67;
    }
    uint64_t v291 = v42;
    uint64_t v68 = Duration.components.getter();
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v69 = static Duration.zero.getter();
      MEMORY[0x185304360](v69);
    }
    uint64_t result = Duration.components.getter();
    unint64_t v71 = v70;
    if (!result)
    {
      unint64_t v300 = v70;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v74 = static Duration./ infix<A>(_:_:)();
      long long v76 = v79;
      unint64_t v300 = v71;
      uint64_t v80 = static Duration.* infix<A>(_:_:)();
LABEL_51:
      uint64_t v85 = v80;
      uint64_t v86 = v81;
      uint64_t v73 = v297;
      goto LABEL_60;
    }
    if (!v70)
    {
      uint64_t v82 = result;
      if (v68 == 0x8000000000000000 && result == -1) {
        goto LABEL_202;
      }
      uint64_t v83 = v68 / result;
      uint64_t v74 = Duration.init(secondsComponent:attosecondsComponent:)();
      uint64_t result = v82 * v83;
      if ((unsigned __int128)(v82 * (__int128)v83) >> 64 != (v82 * v83) >> 63) {
        goto LABEL_188;
      }
      long long v76 = v84;
      uint64_t v80 = Duration.init(secondsComponent:attosecondsComponent:)();
      goto LABEL_51;
    }
    char v72 = static Duration.< infix(_:_:)();
    uint64_t v73 = v297;
    if (v72)
    {
      uint64_t v74 = static Duration.zero.getter();
      long long v76 = v75;
      uint64_t v77 = static Duration.zero.getter();
    }
    else
    {
      uint64_t result = static Duration./ infix(_:_:)();
      if ((~*(void *)&v87 & 0x7FF0000000000000) == 0) {
        goto LABEL_189;
      }
      if (v87 <= -1.0) {
        goto LABEL_190;
      }
      if (v87 >= 1.84467441e19) {
        goto LABEL_191;
      }
      unint64_t v88 = (unint64_t)v87;
      unint64_t v300 = (unint64_t)v87;
      lazy protocol witness table accessor for type UInt64 and conformance UInt64();
      uint64_t v89 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x185304360](v64, v65, v89, v90);
      uint64_t result = static Duration./ infix(_:_:)();
      if ((~*(void *)&v91 & 0x7FF0000000000000) == 0) {
        goto LABEL_192;
      }
      if (v91 <= -9.22337204e18) {
        goto LABEL_193;
      }
      if (v91 >= 9.22337204e18) {
        goto LABEL_194;
      }
      uint64_t v92 = (uint64_t)v91;
      v293 = (void (*)(unsigned char *))(uint64_t)v91;
      Duration.init(secondsComponent:attosecondsComponent:)();
      unint64_t v300 = v88;
      uint64_t v93 = static Duration.* infix<A>(_:_:)();
      uint64_t v95 = v94;
      Duration.init(secondsComponent:attosecondsComponent:)();
      unint64_t v278 = v88;
      unint64_t v300 = v92;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v73 = v297;
      uint64_t v96 = static Duration.* infix<A>(_:_:)();
      uint64_t v98 = MEMORY[0x185304350](v93, v95, v96, v97);
      unint64_t v300 = v278;
      long long v76 = v99;
      uint64_t v100 = static Duration.* infix<A>(_:_:)();
      uint64_t v102 = v101;
      unint64_t v300 = (unint64_t)v293;
      a2 = v287;
      uint64_t v103 = static Duration.* infix<A>(_:_:)();
      uint64_t v105 = v104;
      uint64_t v106 = v102;
      uint64_t v74 = v98;
      uint64_t v77 = MEMORY[0x185304350](v100, v106, v103, v105);
    }
    uint64_t v85 = v77;
    uint64_t v86 = v78;
LABEL_60:
    static Duration.zero.getter();
    int v107 = static Duration.< infix(_:_:)() & 1;
    static Duration.zero.getter();
    if (v107 != (static Duration.< infix(_:_:)() & 1))
    {
      uint64_t v108 = static Duration.zero.getter();
      uint64_t v85 = MEMORY[0x185304360](v108);
      uint64_t v86 = v109;
      uint64_t v110 = static Duration.zero.getter();
      uint64_t v74 = MEMORY[0x185304360](v110);
      long long v76 = v111;
    }
    static Duration.zero.getter();
    uint64_t v112 = v85;
    uint64_t v113 = v86;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v114 = static Duration.zero.getter();
      uint64_t v112 = MEMORY[0x185304360](v114);
      uint64_t v113 = v115;
    }
    v293 = v76;
    static Duration.zero.getter();
    char v116 = static Duration.< infix(_:_:)();
    uint64_t v117 = v73;
    uint64_t v118 = a2;
    if (v116)
    {
      uint64_t v119 = static Duration.zero.getter();
      uint64_t v117 = MEMORY[0x185304360](v119);
      uint64_t v118 = v120;
    }
    MEMORY[0x185304360](v112, v113, v117, v118);
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v121 = static Duration.zero.getter();
      MEMORY[0x185304360](v121);
    }
    v298 += v294;
    static Duration.zero.getter();
    if ((static Duration.== infix(_:_:)() & 1) == 0) {
      break;
    }
    unint64_t v300 = 2;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v122 = (void (*)(void))v293;
    static Duration./ infix<A>(_:_:)();
    unint64_t v300 = 2;
    uint64_t v123 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x185304360](v74, v122, v123, v124);
    static Duration.zero.getter();
    static Duration.== infix(_:_:)();
    uint64_t v125 = a2;
LABEL_87:
    v280(v298, v286);
    uint64_t v43 = v288;
    uint64_t v150 = v296;
    if (v296 == v288) {
      goto LABEL_92;
    }
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v151 = static Duration.zero.getter();
      MEMORY[0x185304360](v151);
    }
    uint64_t result = static Duration.< infix(_:_:)();
    if ((result & 1) == 0)
    {
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v166 = static Duration.zero.getter();
        MEMORY[0x185304360](v166);
      }
      uint64_t result = static Duration.== infix(_:_:)();
      if ((result & 1) == 0
        || (static Duration.zero.getter(),
            uint64_t result = static Duration.< infix(_:_:)(),
            ((result ^ v270) & 1) != 0))
      {
        uint64_t v44 = v297;
        uint64_t v45 = v283;
        uint64_t v167 = v291;
        uint64_t v46 = (uint64_t)v292;
        goto LABEL_18;
      }
    }
    if (v295 == 1)
    {
LABEL_92:
      uint64_t result = *(void *)(v299 + 8);
      char v152 = *(unsigned char *)(v284 + 8);
      if (v150 < 5)
      {
        static Duration.interval(fractionalSecondsLength:)(result);
        unint64_t v300 = qword_1821A5C18[(void)v150];
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v155 = static Duration.* infix<A>(_:_:)();
        uint64_t v157 = v158;
        if (v152) {
          goto LABEL_119;
        }
        goto LABEL_101;
      }
      if (((_BYTE)v150 - 5) >= 3u) {
        goto LABEL_206;
      }
      uint64_t v153 = 3 * ((_BYTE)v150 - 5) + 3;
      uint64_t v154 = v153 ^ 0x7FFFFFFFFFFFFFFFLL;
      if ((v153 ^ 0x7FFFFFFFFFFFFFFFLL) >= result) {
        uint64_t v154 = *(void *)(v299 + 8);
      }
      uint64_t result = v153 + v154;
      if (__OFADD__(v153, v154)) {
        goto LABEL_187;
      }
      uint64_t result = static Duration.interval(fractionalSecondsLength:)(result);
      uint64_t v155 = result;
      uint64_t v157 = v156;
      if ((v152 & 1) == 0)
      {
        if (((_BYTE)v296 - 5) >= 3u) {
          goto LABEL_208;
        }
LABEL_101:
        uint64_t v159 = static Duration.* infix(_:_:)();
        uint64_t v161 = v160;
        if ((static Duration.< infix(_:_:)() & 1) == 0)
        {
          uint64_t v155 = v159;
          uint64_t v157 = v161;
        }
      }
    }
    else
    {
      if (v150 < 5)
      {
        static Duration.interval(fractionalSecondsLength:)(0);
        unint64_t v300 = qword_1821A5C18[(void)v150];
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v168 = static Duration.* infix<A>(_:_:)();
      }
      else
      {
        if (((_BYTE)v150 - 5) >= 3u) {
          goto LABEL_209;
        }
        uint64_t v168 = static Duration.interval(fractionalSecondsLength:)(3 * ((_BYTE)v150 - 5) + 3);
      }
      uint64_t v155 = v168;
      uint64_t v157 = v169;
    }
LABEL_119:
    if ((v271 & 1) != 0
      && (static Duration.zero.getter(), ((static Duration.< infix(_:_:)() ^ v270) & 1) == 0))
    {
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v170 = static Duration.zero.getter();
        MEMORY[0x185304360](v170);
      }
      BOOL v171 = v296 != v43;
      unint64_t v300 = 2;
      lazy protocol witness table accessor for type Int and conformance Int();
      uint64_t v172 = static Duration./ infix<A>(_:_:)();
      MEMORY[0x185304350](v290, v289, v172, v173);
      unsigned int v174 = v171 & ~static Duration.< infix(_:_:)();
      if (v295 != 1) {
        unsigned int v174 = 0;
      }
      unsigned int v274 = v174;
    }
    else
    {
      unsigned int v274 = 0;
    }
    static Duration.zero.getter();
    uint64_t v175 = (unsigned char *)v155;
    uint64_t v176 = v157;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v177 = static Duration.zero.getter();
      uint64_t v175 = (unsigned char *)MEMORY[0x185304360](v177);
      uint64_t v176 = v178;
    }
    uint64_t v275 = v157;
    uint64_t v276 = v155;
    static Duration.zero.getter();
    uint64_t v179 = v73;
    uint64_t v180 = v125;
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v181 = static Duration.zero.getter();
      uint64_t v179 = MEMORY[0x185304360](v181);
      uint64_t v180 = v182;
    }
    uint64_t v183 = Duration.components.getter();
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v184 = static Duration.zero.getter();
      MEMORY[0x185304360](v184);
    }
    uint64_t v298 = v176;
    uint64_t result = Duration.components.getter();
    unint64_t v186 = v185;
    if (result)
    {
      if (v185)
      {
        if ((static Duration.< infix(_:_:)() & 1) == 0)
        {
          uint64_t result = static Duration./ infix(_:_:)();
          if ((~*(void *)&v235 & 0x7FF0000000000000) == 0) {
            goto LABEL_196;
          }
          if (v235 <= -1.0) {
            goto LABEL_197;
          }
          if (v235 >= 1.84467441e19) {
            goto LABEL_198;
          }
          v296 = v175;
          unint64_t v236 = (unint64_t)v235;
          unint64_t v300 = (unint64_t)v235;
          lazy protocol witness table accessor for type UInt64 and conformance UInt64();
          uint64_t v237 = static Duration.* infix<A>(_:_:)();
          MEMORY[0x185304360](v179, v180, v237, v238);
          uint64_t result = static Duration./ infix(_:_:)();
          if ((~*(void *)&v239 & 0x7FF0000000000000) == 0) {
            goto LABEL_199;
          }
          if (v239 <= -9.22337204e18) {
            goto LABEL_200;
          }
          if (v239 >= 9.22337204e18) {
            goto LABEL_201;
          }
          uint64_t v240 = (uint64_t)v239;
          v293 = (void (*)(unsigned char *))(uint64_t)v239;
          Duration.init(secondsComponent:attosecondsComponent:)();
          unint64_t v300 = v236;
          uint64_t v290 = static Duration.* infix<A>(_:_:)();
          uint64_t v242 = v241;
          Duration.init(secondsComponent:attosecondsComponent:)();
          unint64_t v300 = v240;
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          uint64_t v243 = static Duration.* infix<A>(_:_:)();
          uint64_t v245 = MEMORY[0x185304350](v290, v242, v243, v244);
          uint64_t v189 = v246;
          unint64_t v300 = v236;
          uint64_t v247 = static Duration.* infix<A>(_:_:)();
          uint64_t v249 = v248;
          unint64_t v300 = (unint64_t)v293;
          uint64_t v250 = static Duration.* infix<A>(_:_:)();
          uint64_t v252 = v251;
          uint64_t v253 = v249;
          uint64_t v187 = (unsigned char *)v245;
          a2 = v287;
          uint64_t v196 = MEMORY[0x185304350](v247, v253, v250, v252);
          uint64_t v197 = v254;
          uint64_t v175 = v296;
          goto LABEL_143;
        }
        uint64_t v187 = (unsigned char *)static Duration.zero.getter();
        uint64_t v189 = v188;
        uint64_t v190 = static Duration.zero.getter();
      }
      else
      {
        uint64_t v193 = result;
        if (v183 == 0x8000000000000000 && result == -1) {
          goto LABEL_203;
        }
        uint64_t v194 = v183 / result;
        uint64_t v187 = (unsigned char *)Duration.init(secondsComponent:attosecondsComponent:)();
        uint64_t result = v193 * v194;
        if ((unsigned __int128)(v193 * (__int128)v194) >> 64 != (v193 * v194) >> 63) {
          goto LABEL_195;
        }
        uint64_t v189 = v195;
        uint64_t v190 = Duration.init(secondsComponent:attosecondsComponent:)();
      }
    }
    else
    {
      unint64_t v300 = v185;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v187 = (unsigned char *)static Duration./ infix<A>(_:_:)();
      uint64_t v189 = v192;
      unint64_t v300 = v186;
      uint64_t v190 = static Duration.* infix<A>(_:_:)();
    }
    uint64_t v196 = v190;
    uint64_t v197 = v191;
    a2 = v287;
LABEL_143:
    static Duration.zero.getter();
    int v198 = static Duration.< infix(_:_:)() & 1;
    static Duration.zero.getter();
    if (v198 == (static Duration.< infix(_:_:)() & 1))
    {
      v296 = v187;
    }
    else
    {
      uint64_t v199 = static Duration.zero.getter();
      uint64_t v196 = MEMORY[0x185304360](v199);
      uint64_t v197 = v200;
      uint64_t v201 = static Duration.zero.getter();
      v296 = (unsigned char *)MEMORY[0x185304360](v201);
      uint64_t v189 = v202;
    }
    static Duration.zero.getter();
    char v203 = static Duration.< infix(_:_:)();
    uint64_t v204 = v196;
    uint64_t v205 = v197;
    uint64_t v206 = v298;
    if (v203)
    {
      uint64_t v207 = static Duration.zero.getter();
      uint64_t v204 = MEMORY[0x185304360](v207);
      uint64_t v205 = v208;
    }
    static Duration.zero.getter();
    char v209 = static Duration.< infix(_:_:)();
    uint64_t v210 = v73;
    uint64_t v211 = v125;
    if (v209)
    {
      uint64_t v212 = static Duration.zero.getter();
      uint64_t v210 = MEMORY[0x185304360](v212);
      uint64_t v211 = v213;
    }
    MEMORY[0x185304360](v204, v205, v210, v211);
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v214 = static Duration.zero.getter();
      MEMORY[0x185304360](v214);
    }
    static Duration.zero.getter();
    if (static Duration.== infix(_:_:)())
    {
      unint64_t v300 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      uint64_t v215 = v296;
      static Duration./ infix<A>(_:_:)();
      unint64_t v300 = 2;
      uint64_t v216 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x185304360](v215, v189, v216, v217);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      uint64_t v196 = v73;
      uint64_t v197 = v125;
      uint64_t v44 = v297;
      uint64_t v218 = (uint64_t)v272;
      uint64_t v45 = v283;
      uint64_t v43 = v288;
    }
    else
    {
      static Duration.zero.getter();
      char v219 = static Duration.< infix(_:_:)();
      uint64_t v43 = v288;
      if (v219)
      {
        uint64_t v220 = static Duration.zero.getter();
        uint64_t v175 = (unsigned char *)MEMORY[0x185304360](v220);
        uint64_t v206 = v221;
      }
      uint64_t v222 = MEMORY[0x185304350](v196, v197, v175, v206);
      uint64_t v224 = v223;
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v225 = static Duration.zero.getter();
        uint64_t v222 = MEMORY[0x185304360](v225);
        uint64_t v224 = v226;
      }
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v227 = static Duration.zero.getter();
        uint64_t v73 = MEMORY[0x185304360](v227);
        uint64_t v125 = v228;
      }
      MEMORY[0x185304360](v222, v224, v73, v125);
      static Duration.zero.getter();
      if (static Duration.< infix(_:_:)())
      {
        uint64_t v229 = static Duration.zero.getter();
        MEMORY[0x185304360](v229);
      }
      unint64_t v300 = 2;
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      v230 = v296;
      static Duration./ infix<A>(_:_:)();
      unint64_t v300 = 2;
      uint64_t v231 = static Duration.* infix<A>(_:_:)();
      MEMORY[0x185304360](v230, v189, v231, v232);
      static Duration.zero.getter();
      static Duration.== infix(_:_:)();
      static Duration.== infix(_:_:)();
      uint64_t v44 = v297;
      uint64_t v218 = (uint64_t)v272;
      uint64_t v45 = v283;
    }
    uint64_t v167 = v291;
    MEMORY[0x185304380](v301, v196, v197);
    static Duration.zero.getter();
    char v233 = static Duration.== infix(_:_:)();
    outlined init with copy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v277, v218, type metadata accessor for Duration.UnitsFormatStyle);
    if (v233)
    {
      uint64_t v234 = *(void *)(v218 + 48);
      uint64_t result = outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v218, type metadata accessor for Duration.UnitsFormatStyle);
      uint64_t v46 = (uint64_t)v292;
      if (v234 < 1)
      {
        uint64_t v273 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t result = outlined destroy of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(v218, type metadata accessor for Duration.UnitsFormatStyle);
      uint64_t v46 = (uint64_t)v292;
    }
    uint64_t v273 = 0;
    uint64_t v295 = v285;
LABEL_18:
    uint64_t v42 = v167 + 1;
    if (v46 == v279) {
      goto LABEL_183;
    }
  }
  static Duration.zero.getter();
  char v126 = static Duration.< infix(_:_:)();
  unint64_t v278 = v74;
  if (v126)
  {
    uint64_t v127 = static Duration.zero.getter();
    uint64_t v53 = MEMORY[0x185304360](v127);
    uint64_t v55 = v128;
  }
  uint64_t v129 = MEMORY[0x185304350](v85, v86, v53, v55);
  uint64_t v131 = v130;
  static Duration.zero.getter();
  uint64_t v132 = v129;
  uint64_t v133 = v131;
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v134 = static Duration.zero.getter();
    uint64_t v132 = MEMORY[0x185304360](v134);
    uint64_t v133 = v135;
  }
  static Duration.zero.getter();
  char v136 = static Duration.< infix(_:_:)();
  uint64_t v137 = v73;
  uint64_t v138 = a2;
  if (v136)
  {
    uint64_t v139 = static Duration.zero.getter();
    uint64_t v137 = MEMORY[0x185304360](v139);
    uint64_t v138 = v140;
  }
  MEMORY[0x185304360](v132, v133, v137, v138);
  static Duration.zero.getter();
  if (static Duration.< infix(_:_:)())
  {
    uint64_t v141 = static Duration.zero.getter();
    MEMORY[0x185304360](v141);
  }
  unint64_t v142 = v269;
  uint64_t v143 = v286;
  (*v264)(v269, v298, v286);
  int v144 = (*v263)(v142, v143);
  if (v144 == v265)
  {
LABEL_79:
    char v145 = static Duration.< infix(_:_:)();
    goto LABEL_80;
  }
  if (v144 == v261)
  {
    uint64_t v73 = v85;
    uint64_t v125 = v86;
    if ((static Duration.< infix(_:_:)() & 1) == 0)
    {
      uint64_t v73 = v129;
      uint64_t v125 = v131;
      if (static Duration.== infix(_:_:)())
      {
        unint64_t v300 = 2;
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        unint64_t v162 = v278;
        unint64_t v163 = (void (*)(void))v293;
        static Duration./ infix<A>(_:_:)();
        unint64_t v300 = 2;
        uint64_t v164 = static Duration.* infix<A>(_:_:)();
        MEMORY[0x185304360](v162, v163, v164, v165);
        static Duration.zero.getter();
        char v145 = static Duration.== infix(_:_:)();
LABEL_80:
        if (v145) {
          uint64_t v73 = v85;
        }
        else {
          uint64_t v73 = v129;
        }
        if (v145) {
          uint64_t v125 = v86;
        }
        else {
          uint64_t v125 = v131;
        }
      }
    }
    goto LABEL_86;
  }
  if (v144 == v260) {
    goto LABEL_79;
  }
  if (v144 == v259)
  {
    char v255 = static Duration.< infix(_:_:)();
    if (v255) {
      uint64_t v73 = v129;
    }
    else {
      uint64_t v73 = v85;
    }
    if (v255) {
      uint64_t v125 = v131;
    }
    else {
      uint64_t v125 = v86;
    }
    goto LABEL_86;
  }
  uint64_t v73 = v85;
  uint64_t v125 = v86;
  if (v144 == v258 || (uint64_t v73 = v129, v125 = v131, v144 == v257))
  {
LABEL_86:
    unint64_t v300 = 2;
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    unint64_t v146 = v278;
    v147 = (void (*)(void))v293;
    static Duration./ infix<A>(_:_:)();
    unint64_t v300 = 2;
    uint64_t v148 = static Duration.* infix<A>(_:_:)();
    MEMORY[0x185304360](v146, v147, v148, v149);
    static Duration.zero.getter();
    static Duration.== infix(_:_:)();
    static Duration.== infix(_:_:)();
    a2 = v287;
    goto LABEL_87;
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_183:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v273 & 1) == 0) {
    return v276;
  }
LABEL_210:
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  uint64_t v22 = __src;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  char v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (void)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst) {
        memmove(__dst, a2, a3 - (void)a2);
      }
      uint64_t v14 = &v4[v9];
      int64_t v20 = &v4[v9];
      uint64_t v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        uint64_t v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          uint64_t v16 = v15 + 1;
          uint64_t v17 = v6 - 1;
          unsigned int v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            int64_t v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14) {
              *uint64_t v15 = *(v14 - 1);
            }
            --v14;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v16 != v6 || v15 >= v6) {
              *uint64_t v15 = v18;
            }
            uint64_t v22 = --v6;
            if (v17 <= v7) {
              goto LABEL_38;
            }
          }
          --v15;
          if (v14 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst) {
      memmove(__dst, __src, v8);
    }
    uint64_t v10 = &v4[v8];
    int64_t v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        unsigned int v11 = *v6;
        unsigned int v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4) {
            *uint64_t v7 = v12;
          }
          char v21 = ++v4;
          uint64_t v13 = v6;
        }
        else
        {
          uint64_t v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6) {
            *uint64_t v7 = v11;
          }
        }
        ++v7;
        if (v4 >= v10) {
          break;
        }
        uint64_t v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      uint64_t v22 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v22, (const void **)&v21, &v20);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v1 = isStackAllocationSafe;
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  char v2 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v74 = (unint64_t)((1 << v2) + 63) >> 6;
  size_t v3 = 8 * v74;
  uint64_t v76 = isStackAllocationSafe;
  if ((v2 & 0x3Fu) > 0xD)
  {
    isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      long long v75 = (unint64_t *)swift_slowAlloc();
      bzero(v75, v3);
      uint64_t v73 = 0;
      int64_t v21 = 0;
      uint64_t v22 = v1 + 56;
      uint64_t v23 = 1 << *(unsigned char *)(v1 + 32);
      if (v23 < 64) {
        uint64_t v24 = ~(-1 << v23);
      }
      else {
        uint64_t v24 = -1;
      }
      unint64_t v25 = v24 & *(void *)(v1 + 56);
      int64_t v26 = (unint64_t)(v23 + 63) >> 6;
      while (1)
      {
        if (v25)
        {
          unint64_t v27 = __clz(__rbit64(v25));
          v25 &= v25 - 1;
          unint64_t v28 = v27 | (v21 << 6);
        }
        else
        {
          BOOL v13 = __OFADD__(v21++, 1);
          if (v13) {
            goto LABEL_148;
          }
          if (v21 >= v26) {
            goto LABEL_72;
          }
          unint64_t v29 = *(void *)(v22 + 8 * v21);
          if (!v29)
          {
            int64_t v30 = v21 + 1;
            if (v21 + 1 >= v26) {
              goto LABEL_72;
            }
            unint64_t v29 = *(void *)(v22 + 8 * v30);
            if (!v29)
            {
              int64_t v30 = v21 + 2;
              if (v21 + 2 >= v26) {
                goto LABEL_72;
              }
              unint64_t v29 = *(void *)(v22 + 8 * v30);
              if (!v29)
              {
                int64_t v30 = v21 + 3;
                if (v21 + 3 >= v26) {
                  goto LABEL_72;
                }
                unint64_t v29 = *(void *)(v22 + 8 * v30);
                if (!v29)
                {
                  int64_t v30 = v21 + 4;
                  if (v21 + 4 >= v26) {
                    goto LABEL_72;
                  }
                  unint64_t v29 = *(void *)(v22 + 8 * v30);
                  if (!v29)
                  {
                    while (1)
                    {
                      int64_t v21 = v30 + 1;
                      if (__OFADD__(v30, 1)) {
                        goto LABEL_152;
                      }
                      if (v21 >= v26) {
                        break;
                      }
                      unint64_t v29 = *(void *)(v22 + 8 * v21);
                      ++v30;
                      if (v29) {
                        goto LABEL_58;
                      }
                    }
LABEL_72:
                    uint64_t v34 = v73;
                    if (!v73)
                    {
                      swift_release();
                      uint64_t v20 = MEMORY[0x1E4FBC870];
                      goto LABEL_144;
                    }
                    if (v73 == *(void *)(v1 + 16))
                    {
                      uint64_t v20 = v1;
                      goto LABEL_144;
                    }
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>);
                    uint64_t v20 = static _SetStorage.allocate(capacity:)();
                    int64_t v53 = 0;
                    unint64_t v54 = *v75;
                    uint64_t v55 = v20 + 56;
                    while (1)
                    {
                      if (v54)
                      {
                        unint64_t v57 = __clz(__rbit64(v54));
                        v54 &= v54 - 1;
                        unint64_t v58 = v57 | (v53 << 6);
                      }
                      else
                      {
                        BOOL v13 = __OFADD__(v53++, 1);
                        if (v13) {
                          goto LABEL_151;
                        }
                        if (v53 >= v74) {
                          goto LABEL_143;
                        }
                        unint64_t v59 = v75[v53];
                        if (!v59)
                        {
                          int64_t v60 = v53 + 1;
                          if (v53 + 1 >= v74) {
                            goto LABEL_143;
                          }
                          unint64_t v59 = v75[v60];
                          if (v59) {
                            goto LABEL_126;
                          }
                          int64_t v60 = v53 + 2;
                          if (v53 + 2 >= v74) {
                            goto LABEL_143;
                          }
                          unint64_t v59 = v75[v60];
                          if (v59) {
                            goto LABEL_126;
                          }
                          int64_t v60 = v53 + 3;
                          if (v53 + 3 >= v74) {
                            goto LABEL_143;
                          }
                          unint64_t v59 = v75[v60];
                          if (v59) {
                            goto LABEL_126;
                          }
                          int64_t v60 = v53 + 4;
                          if (v53 + 4 >= v74) {
                            goto LABEL_143;
                          }
                          unint64_t v59 = v75[v60];
                          if (v59)
                          {
LABEL_126:
                            int64_t v53 = v60;
                          }
                          else
                          {
                            int64_t v70 = v53 + 5;
                            if (v53 + 5 >= v74) {
                              goto LABEL_143;
                            }
                            unint64_t v59 = v75[v70];
                            v53 += 5;
                            if (!v59)
                            {
                              while (1)
                              {
                                int64_t v53 = v70 + 1;
                                if (__OFADD__(v70, 1)) {
                                  goto LABEL_155;
                                }
                                if (v53 >= v74) {
                                  break;
                                }
                                unint64_t v59 = v75[v53];
                                ++v70;
                                if (v59) {
                                  goto LABEL_127;
                                }
                              }
LABEL_143:
                              swift_release();
LABEL_144:
                              MEMORY[0x185309510](v75, -1, -1);
                              return v20;
                            }
                          }
                        }
LABEL_127:
                        unint64_t v54 = (v59 - 1) & v59;
                        unint64_t v58 = __clz(__rbit64(v59)) + (v53 << 6);
                      }
                      Swift::UInt v61 = *(unsigned __int8 *)(*(void *)(v76 + 48) + v58);
                      Hasher.init(_seed:)();
                      Hasher._combine(_:)(v61);
                      Swift::Int v62 = Hasher._finalize()();
                      uint64_t v63 = -1 << *(unsigned char *)(v20 + 32);
                      unint64_t v64 = v62 & ~v63;
                      unint64_t v65 = v64 >> 6;
                      if (((-1 << v64) & ~*(void *)(v55 + 8 * (v64 >> 6))) != 0)
                      {
                        unint64_t v56 = __clz(__rbit64((-1 << v64) & ~*(void *)(v55 + 8 * (v64 >> 6)))) | v64 & 0x7FFFFFFFFFFFFFC0;
                      }
                      else
                      {
                        char v66 = 0;
                        unint64_t v67 = (unint64_t)(63 - v63) >> 6;
                        do
                        {
                          if (++v65 == v67 && (v66 & 1) != 0) {
                            goto LABEL_147;
                          }
                          BOOL v68 = v65 == v67;
                          if (v65 == v67) {
                            unint64_t v65 = 0;
                          }
                          v66 |= v68;
                          uint64_t v69 = *(void *)(v55 + 8 * v65);
                        }
                        while (v69 == -1);
                        unint64_t v56 = __clz(__rbit64(~v69)) + (v65 << 6);
                      }
                      *(void *)(v55 + ((v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
                      *(unsigned char *)(*(void *)(v20 + 48) + v56) = v61;
                      ++*(void *)(v20 + 16);
                      if (!--v34) {
                        goto LABEL_143;
                      }
                    }
                  }
                }
              }
            }
            int64_t v21 = v30;
          }
LABEL_58:
          unint64_t v25 = (v29 - 1) & v29;
          unint64_t v28 = __clz(__rbit64(v29)) + (v21 << 6);
        }
        unint64_t v31 = *(char *)(*(void *)(v1 + 48) + v28);
        if (v31 < 5)
        {
          uint64_t v77 = qword_1821A5C18[v31];
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          static Duration.* infix<A>(_:_:)();
        }
        else
        {
          unsigned __int8 v32 = v31 - 5;
          if (v32 > 2u) {
            goto LABEL_156;
          }
          static Duration.interval(fractionalSecondsLength:)(3 * v32 + 3);
        }
        static Duration.zero.getter();
        if (static Duration.< infix(_:_:)())
        {
          uint64_t v33 = static Duration.zero.getter();
          MEMORY[0x185304360](v33);
        }
        uint64_t v1 = v76;
        if (static Duration.< infix(_:_:)())
        {
          *(unint64_t *)((char *)v75 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
          BOOL v13 = __OFADD__(v73++, 1);
          if (v13)
          {
            __break(1u);
            goto LABEL_72;
          }
        }
      }
    }
  }
  uint64_t v72 = (uint64_t)&v72;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  long long v75 = (unint64_t *)((char *)&v72 - ((v3 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v75, v3);
  uint64_t v73 = 0;
  int64_t v4 = 0;
  uint64_t v5 = v1 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v1 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_22:
    unint64_t v16 = *(char *)(*(void *)(v1 + 48) + v12);
    if (v16 < 5)
    {
      uint64_t v77 = qword_1821A5C18[v16];
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      static Duration.* infix<A>(_:_:)();
    }
    else
    {
      unsigned __int8 v17 = v16 - 5;
      if (v17 > 2u) {
        goto LABEL_154;
      }
      static Duration.interval(fractionalSecondsLength:)(3 * v17 + 3);
    }
    static Duration.zero.getter();
    if (static Duration.< infix(_:_:)())
    {
      uint64_t v18 = static Duration.zero.getter();
      MEMORY[0x185304360](v18);
    }
    char v10 = static Duration.< infix(_:_:)();
    uint64_t v1 = v76;
    if (v10)
    {
      *(unint64_t *)((char *)v75 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      BOOL v13 = __OFADD__(v73++, 1);
      if (v13)
      {
        __break(1u);
        goto LABEL_35;
      }
    }
  }
  BOOL v13 = __OFADD__(v4++, 1);
  if (v13) {
    goto LABEL_146;
  }
  if (v4 >= v9) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_21:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_22;
  }
  int64_t v15 = v4 + 1;
  if (v4 + 1 >= v9) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v15 = v4 + 2;
  if (v4 + 2 >= v9) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v15 = v4 + 3;
  if (v4 + 3 >= v9) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v15 = v4 + 4;
  if (v4 + 4 >= v9) {
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_20:
    int64_t v4 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_150;
    }
    if (v4 >= v9) {
      break;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_21;
    }
  }
LABEL_35:
  uint64_t v19 = v73;
  if (v73)
  {
    if (v73 != *(void *)(v1 + 16))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Duration.UnitsFormatStyle.Unit>);
      uint64_t v20 = static _SetStorage.allocate(capacity:)();
      int64_t v35 = 0;
      unint64_t v36 = *v75;
      uint64_t v37 = v20 + 56;
      while (1)
      {
        if (v36)
        {
          unint64_t v39 = __clz(__rbit64(v36));
          v36 &= v36 - 1;
          unint64_t v40 = v39 | (v35 << 6);
        }
        else
        {
          BOOL v13 = __OFADD__(v35++, 1);
          if (v13) {
            goto LABEL_149;
          }
          if (v35 >= v74)
          {
LABEL_108:
            swift_release();
            return v20;
          }
          unint64_t v41 = v75[v35];
          if (!v41)
          {
            int64_t v42 = v35 + 1;
            if (v35 + 1 >= v74) {
              goto LABEL_108;
            }
            unint64_t v41 = v75[v42];
            if (v41) {
              goto LABEL_91;
            }
            int64_t v42 = v35 + 2;
            if (v35 + 2 >= v74) {
              goto LABEL_108;
            }
            unint64_t v41 = v75[v42];
            if (v41) {
              goto LABEL_91;
            }
            int64_t v42 = v35 + 3;
            if (v35 + 3 >= v74) {
              goto LABEL_108;
            }
            unint64_t v41 = v75[v42];
            if (v41) {
              goto LABEL_91;
            }
            int64_t v42 = v35 + 4;
            if (v35 + 4 >= v74) {
              goto LABEL_108;
            }
            unint64_t v41 = v75[v42];
            if (v41)
            {
LABEL_91:
              int64_t v35 = v42;
            }
            else
            {
              int64_t v52 = v35 + 5;
              if (v35 + 5 >= v74) {
                goto LABEL_108;
              }
              unint64_t v41 = v75[v52];
              v35 += 5;
              if (!v41)
              {
                while (1)
                {
                  int64_t v35 = v52 + 1;
                  if (__OFADD__(v52, 1)) {
                    break;
                  }
                  if (v35 >= v74) {
                    goto LABEL_108;
                  }
                  unint64_t v41 = v75[v35];
                  ++v52;
                  if (v41) {
                    goto LABEL_92;
                  }
                }
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
              }
            }
          }
LABEL_92:
          unint64_t v36 = (v41 - 1) & v41;
          unint64_t v40 = __clz(__rbit64(v41)) + (v35 << 6);
        }
        Swift::UInt v43 = *(unsigned __int8 *)(*(void *)(v76 + 48) + v40);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v43);
        Swift::Int v44 = Hasher._finalize()();
        uint64_t v45 = -1 << *(unsigned char *)(v20 + 32);
        unint64_t v46 = v44 & ~v45;
        unint64_t v47 = v46 >> 6;
        if (((-1 << v46) & ~*(void *)(v37 + 8 * (v46 >> 6))) != 0)
        {
          unint64_t v38 = __clz(__rbit64((-1 << v46) & ~*(void *)(v37 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
          goto LABEL_77;
        }
        char v48 = 0;
        unint64_t v49 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v49 && (v48 & 1) != 0)
          {
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
            goto LABEL_153;
          }
          BOOL v50 = v47 == v49;
          if (v47 == v49) {
            unint64_t v47 = 0;
          }
          v48 |= v50;
          uint64_t v51 = *(void *)(v37 + 8 * v47);
        }
        while (v51 == -1);
        unint64_t v38 = __clz(__rbit64(~v51)) + (v47 << 6);
LABEL_77:
        *(void *)(v37 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
        *(unsigned char *)(*(void *)(v20 + 48) + v38) = v43;
        ++*(void *)(v20 + 16);
        if (!--v19) {
          goto LABEL_108;
        }
      }
    }
    return v1;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t specialized static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[1] != a2[1]) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  if ((static FloatingPointRoundingRule.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(int *)(v4 + 28);
  uint64_t v6 = (double *)((char *)a1 + v5);
  char v7 = *((unsigned char *)a1 + v5 + 8);
  unint64_t v8 = (double *)((char *)a2 + v5);
  char v9 = *((unsigned char *)a2 + v5 + 8);
  if (v7)
  {
    if ((v9 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*v6 != *v8) {
      char v9 = 1;
    }
    if (v9) {
      return 0;
    }
  }
  return 1;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys);
  }
  return result;
}

BOOL specialized static Duration.UnitsFormatStyle.== infix(_:_:)(long long *a1, long long *a2)
{
  long long v4 = *a1;
  long long v13 = *a2;
  long long v14 = v4;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0
    || (specialized static Set.== infix(_:_:)(*((void *)a1 + 2), *((void *)a2 + 2)) & 1) == 0)
  {
    return 0;
  }
  if (*((unsigned __int8 *)a1 + 24) != *((unsigned __int8 *)a2 + 24) || *((_DWORD *)a1 + 7) != *((_DWORD *)a2 + 7)) {
    return 0;
  }
  char v7 = *((unsigned char *)a2 + 40);
  if (*((unsigned char *)a1 + 40))
  {
    if (!*((unsigned char *)a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*((void *)a1 + 4) != *((void *)a2 + 4)) {
      char v7 = 1;
    }
    if (v7) {
      return 0;
    }
  }
  if (*((void *)a1 + 6) != *((void *)a2 + 6)) {
    return 0;
  }
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle(0);
  if ((specialized static Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.== infix(_:_:)((long long *)((char *)a1 + *(int *)(v8 + 36)), (long long *)((char *)a2 + *(int *)(v8 + 36))) & 1) == 0)return 0; {
  uint64_t v9 = *(int *)(v8 + 40);
  }
  char v10 = (void *)((char *)a1 + v9);
  char v11 = *((unsigned char *)a1 + v9 + 16);
  uint64_t v12 = (uint64_t)a2 + v9;
  if ((v11 & 1) == 0) {
    return (*(unsigned char *)(v12 + 16) & 1) == 0 && *v10 == *(void *)v12 && v10[1] == *(void *)(v12 + 8);
  }
  return (*(unsigned char *)(v12 + 16) & 1) != 0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS8skeleton_s8DurationV10FoundationE16UnitsFormatStyleV4UnitV011measurementJ0Sd0K5ValuetG_AI16AttributedStringVs5NeverOTg506_sSSs8e3V10f3E16ghi2V4j7VSdAC16mn53VIggnyr_SS8skeleton_AG011measurementF0Sd0J5ValuetAIs5O11OIegnrzr_TRSSAMSdARIggnyr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t, unsigned char *, double))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v17;
    uint64_t v6 = (void *)(a1 + 56);
    do
    {
      uint64_t v7 = *(v6 - 3);
      uint64_t v8 = *(v6 - 2);
      double v9 = *(double *)v6;
      v14[0] = *((unsigned char *)v6 - 8);
      double v15 = v9;
      swift_bridgeObjectRetain();
      a2(&v16, v7, v8, v14, v9);
      swift_bridgeObjectRelease();
      uint64_t v17 = v3;
      unint64_t v11 = *(void *)(v3 + 16);
      unint64_t v10 = *(void *)(v3 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v3 = v17;
      }
      uint64_t v12 = v16;
      *(void *)(v3 + 16) = v11 + 1;
      *(void *)(v3 + 8 * v11 + 32) = v12;
      v6 += 4;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in Duration.UnitsFormatStyle._getListPattern(_:)(a1, a2, a3, *(void *)(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.CodingKeys and conformance Duration.UnitsFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.UnitWidth and conformance Duration.UnitsFormatStyle.UnitWidth);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy and conformance Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Set<Duration.UnitsFormatStyle.Unit> and conformance <> Set<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<Duration.UnitsFormatStyle.Unit>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, unint64_t *a4@<X8>, uint64_t a5@<D0>)
{
  return closure #1 in Duration.UnitsFormatStyle.Attributed._formatFields(_:)(a1, a2, a3, *(long long **)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), a4, a5);
}

uint64_t outlined init with take of Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed.CodingKeys and conformance Duration.UnitsFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t type metadata accessor for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  return type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(a1, (uint64_t *)&type metadata singleton initialization cache for Duration.UnitsFormatStyle.Attributed);
}

Swift::Int specialized _ArrayProtocol.filter(_:)(Swift::Int result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    unint64_t v4 = 0;
    Swift::Int v5 = result + 32;
    uint64_t v6 = a2 + 56;
    uint64_t v7 = MEMORY[0x1E4FBC860];
    Swift::Int v17 = result + 32;
    while (1)
    {
      uint64_t v8 = v4 <= v2 ? v2 : v4;
      while (1)
      {
        if (v4 == v8)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = v4++;
        if (*(void *)(a2 + 16))
        {
          Swift::UInt v10 = *(unsigned __int8 *)(v5 + v9);
          Hasher.init(_seed:)();
          Hasher._combine(_:)(v10);
          unint64_t result = Hasher._finalize()();
          uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v12 = result & ~v11;
          if ((*(void *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12)) {
            break;
          }
        }
LABEL_6:
        if (v4 == v2) {
          return v7;
        }
      }
      uint64_t v13 = *(void *)(a2 + 48);
      if (*(unsigned __int8 *)(v13 + v12) != v10) {
        break;
      }
LABEL_14:
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
      }
      unint64_t v16 = *(void *)(v7 + 16);
      unint64_t v15 = *(void *)(v7 + 24);
      if (v16 >= v15 >> 1) {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      }
      *(void *)(v7 + 16) = v16 + 1;
      *(unsigned char *)(v7 + v16 + 32) = v10;
      Swift::Int v5 = v17;
      if (v4 == v2) {
        return v7;
      }
    }
    uint64_t v14 = ~v11;
    while (1)
    {
      unint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_6;
      }
      if (*(unsigned __int8 *)(v13 + v12) == v10) {
        goto LABEL_14;
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

{
  unint64_t v2;
  unint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  unint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    unint64_t v4 = result + 32;
    Swift::Int v5 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v6 = v3 <= v2 ? v2 : v3;
      while (1)
      {
        if (v3 == v6)
        {
          __break(1u);
          return result;
        }
        uint64_t v7 = *(unsigned __int8 *)(v4 + v3++);
        uint64_t v8 = v7 - 1;
        if (v7 - 1) <= 0xA && ((0x63Fu >> v8))
        {
          uint64_t v9 = *(void *)(a2 + 40);
          if (*(void *)(v9 + 16))
          {
            Swift::UInt v10 = qword_1821A8BE8[v8];
            Hasher.init(_seed:)();
            Hasher._combine(_:)(v10);
            unint64_t result = Hasher._finalize()();
            uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
            unint64_t v12 = result & ~v11;
            if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12)) {
              break;
            }
          }
        }
LABEL_6:
        if (v3 == v2) {
          return v5;
        }
      }
      uint64_t v13 = *(void *)(v9 + 48);
      if (v10 != *(unsigned __int8 *)(v13 + v12)) {
        break;
      }
LABEL_16:
      unint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1);
      }
      unint64_t v16 = *(void *)(v5 + 16);
      unint64_t v15 = *(void *)(v5 + 24);
      if (v16 >= v15 >> 1) {
        unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      }
      *(void *)(v5 + 16) = v16 + 1;
      *(unsigned char *)(v5 + v16 + 32) = v7;
      if (v3 == v2) {
        return v5;
      }
    }
    uint64_t v14 = ~v11;
    while (1)
    {
      unint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
        goto LABEL_6;
      }
      if (v10 == *(unsigned __int8 *)(v13 + v12)) {
        goto LABEL_16;
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized Duration.UnitsFormatStyle.UnitWidth.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6874646977 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x536E726574746170 && a2 == 0xEC000000656C7974)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4C6D756D696E696DLL && a2 == 0xED00006874676E65;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C6D756D6978616DLL && a2 == 0xED00006874676E65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E69646E756F72 && a2 == 0xEC000000656C7552 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823AAD70)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized Duration.UnitsFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x556465776F6C6C61 && a2 == 0xEC0000007374696ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7464695774696E75 && a2 == 0xE900000000000068 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001823AEAD0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001823AEAF0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001823AEB10 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001823AEB30)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t specialized Duration.UnitsFormatStyle.Attributed.subscript.setter(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - v2, v1);
  return swift_setAtWritableKeyPath();
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle.FractionalPartDisplayStrategy()
{
  return lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.FractionalPartDisplayStrategy and conformance Duration.UnitsFormatStyle.FractionalPartDisplayStrategy, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.Attributed);
  a1[2] = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.Attributed);
  uint64_t result = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.Attributed);
  a1[3] = result;
  return result;
}

uint64_t base witness table accessor for Equatable in Duration.UnitsFormatStyle.Attributed()
{
  return lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle.Attributed and conformance Duration.UnitsFormatStyle.Attributed, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle.Attributed);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for Duration.UnitsFormatStyle(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type FloatingPointRoundingRule and conformance FloatingPointRoundingRule(&lazy protocol witness table cache variable for type Duration.UnitsFormatStyle and conformance Duration.UnitsFormatStyle, (void (*)(uint64_t))type metadata accessor for Duration.UnitsFormatStyle);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181D5B20C()
{
  return Duration.UnitsFormatStyle.Attributed.subscript.getter();
}

uint64_t sub_181D5B234(uint64_t a1)
{
  swift_retain();
  specialized Duration.UnitsFormatStyle.Attributed.subscript.setter(a1);

  return swift_release();
}

uint64_t sub_181D5B28C()
{
  return 8;
}

void *sub_181D5B298(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *(void *)a1 = v5;
    uint64_t v3 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v8;
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    uint64_t v12 = *(int *)(a3 + 36);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    *(_OWORD *)(a1 + v12) = *(_OWORD *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    uint64_t v16 = *(int *)(v15 + 24);
    uint64_t v26 = v14 + v16;
    uint64_t v27 = v13 + v16;
    uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v18(v27, v26, v17);
    uint64_t v19 = *(int *)(v15 + 28);
    uint64_t v20 = v13 + v19;
    uint64_t v21 = v14 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
    uint64_t v22 = *(int *)(a3 + 40);
    uint64_t v23 = v3 + v22;
    uint64_t v24 = (uint64_t)a2 + v22;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
  }
  return v3;
}

uint64_t initializeWithCopy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v21 = v7 + v10;
  uint64_t v11 = v8 + v10;
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v13(v21, v11, v12);
  uint64_t v14 = *(int *)(v9 + 28);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = v8 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = *(int *)(a3 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  return a1;
}

uint64_t assignWithCopy for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v7 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  *uint64_t v9 = *(void *)(a2 + v8);
  v9[1] = *(void *)(a2 + v8 + 8);
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = (char *)v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = (char *)v9 + v16;
  uint64_t v18 = (uint64_t *)(v10 + v16);
  uint64_t v19 = *v18;
  v17[8] = *((unsigned char *)v18 + 8);
  *(void *)uint64_t v17 = v19;
  uint64_t v20 = *(int *)(a3 + 40);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  LOBYTE(v19) = *(unsigned char *)(v22 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = v19;
  return a1;
}

uint64_t initializeWithTake for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = *(int *)(a3 + 40);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
  return a1;
}

uint64_t assignWithTake for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v12 = *(int *)(v11 + 24);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = *(int *)(v11 + 28);
  uint64_t v17 = v9 + v16;
  uint64_t v18 = v10 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = *(int *)(a3 + 40);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(unsigned char *)(v20 + 16) = *(unsigned char *)(v21 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D5B8F4);
}

uint64_t sub_181D5B8F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D5B9B8);
}

void *sub_181D5B9B8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[8]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for FloatingPointRoundingRule();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(void *)uint64_t v12 = *(void *)v13;
    v12[8] = v13[8];
  }
  return v4;
}

uint64_t destroy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  BOOL v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_OWORD *initializeWithCopy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  return a1;
}

void *assignWithCopy for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v13;
  return a1;
}

_OWORD *initializeWithTake for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  return a1;
}

_OWORD *assignWithTake for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  *(void *)uint64_t v11 = *(void *)v12;
  v11[8] = v12[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D5BF00);
}

uint64_t sub_181D5BF00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D5BF84);
}

uint64_t sub_181D5BF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t initializeBufferWithCopyOfBuffer for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    *(void *)a1 = v6;
    a1 = v6 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = v4;
    uint64_t v8 = a2[1];
    uint64_t v9 = a2[2];
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = a2[6];
    uint64_t v12 = *(int *)(v4 + 36);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = (uint64_t)a2 + v12;
    *(_OWORD *)(a1 + v12) = *(_OWORD *)((char *)a2 + v12);
    uint64_t v15 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
    uint64_t v16 = *(int *)(v15 + 24);
    uint64_t v26 = v14 + v16;
    uint64_t v27 = v13 + v16;
    uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v18(v27, v26, v17);
    uint64_t v19 = *(int *)(v15 + 28);
    uint64_t v20 = v13 + v19;
    uint64_t v21 = v14 + v19;
    *(void *)uint64_t v20 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
    uint64_t v22 = *(int *)(v7 + 40);
    uint64_t v23 = a1 + v22;
    uint64_t v24 = (uint64_t)a2 + v22;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
  }
  return a1;
}

uint64_t destroy for Duration.UnitsFormatStyle.Attributed(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle(0) + 36);
  uint64_t v3 = v2 + *(int *)(type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0) + 24);
  uint64_t v4 = type metadata accessor for FloatingPointRoundingRule();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t initializeWithCopy for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v21 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v5 = *(int *)(v21 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v9 = *(int *)(v8 + 24);
  uint64_t v20 = v6 + v9;
  uint64_t v10 = v7 + v9;
  uint64_t v11 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v12(v20, v10, v11);
  uint64_t v13 = *(int *)(v8 + 28);
  uint64_t v14 = v6 + v13;
  uint64_t v15 = v7 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = *(int *)(v21 + 40);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  return a1;
}

uint64_t assignWithCopy for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v7 = *(int *)(v6 + 36);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  void *v8 = *(void *)(a2 + v7);
  v8[1] = *(void *)(a2 + v7 + 8);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = (char *)v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = (char *)v8 + v15;
  uint64_t v17 = (uint64_t *)(v9 + v15);
  uint64_t v18 = *v17;
  v16[8] = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = *(int *)(v6 + 40);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  LOBYTE(v18) = *(unsigned char *)(v21 + 16);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *(unsigned char *)(v20 + 16) = v18;
  return a1;
}

uint64_t initializeWithTake for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v6 = *(int *)(v5 + 36);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v10 = *(int *)(v9 + 24);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = v8 + v10;
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = *(int *)(v9 + 28);
  uint64_t v15 = v7 + v14;
  uint64_t v16 = v8 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  uint64_t v17 = *(int *)(v5 + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  return a1;
}

uint64_t assignWithTake for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v7 = *(int *)(v6 + 36);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy(0);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = v8 + v15;
  uint64_t v17 = v9 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  uint64_t v18 = *(int *)(v6 + 40);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D5C704);
}

uint64_t sub_181D5C704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D5C784);
}

uint64_t sub_181D5C784(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Duration.UnitsFormatStyle(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for Duration.UnitsFormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for Duration.UnitsFormatStyle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.Attributed.CodingKeys()
{
  return &unk_1ECA51998;
}

uint64_t getEnumTagSinglePayload for Duration.UnitsFormatStyle.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Duration.UnitsFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D5C9F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.CodingKeys()
{
  return &unk_1ECA51A58;
}

unsigned char *storeEnumTagSinglePayload for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D5CAF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.FractionalPartDisplayStrategy.CodingKeys()
{
  return &unk_1ECA51AE8;
}

void *type metadata accessor for Duration.UnitsFormatStyle.ZeroValueUnitsDisplayStrategy.CodingKeys()
{
  return &unk_1ECA518E0;
}

ValueMetadata *type metadata accessor for Duration.UnitsFormatStyle.Unit._Unit()
{
  return &type metadata for Duration.UnitsFormatStyle.Unit._Unit;
}

unsigned char *storeEnumTagSinglePayload for Duration.UnitsFormatStyle.Attributed.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D5CC10);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.Unit.CodingKeys()
{
  return &unk_1ECA51C30;
}

unsigned char *storeEnumTagSinglePayload for Duration.UnitsFormatStyle.UnitWidth.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D5CD14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Duration.UnitsFormatStyle.UnitWidth.CodingKeys()
{
  return &unk_1ECA51D40;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in Duration.UnitsFormatStyle.Unit._Unit()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [Duration.UnitsFormatStyle.Unit._Unit] and conformance [A], &demangling cache variable for type metadata for [Duration.UnitsFormatStyle.Unit._Unit]);
}

id POSIXError._nsError.getter()
{
  return *v0;
}

void __swiftcall POSIXError.init(_nsError:)(Foundation::POSIXError *__return_ptr retstr, NSError *_nsError)
{
  unsigned int v4 = [(NSError *)_nsError domain];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.isa = (Class)_nsError;
}

id static POSIXError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
}

uint64_t POSIXError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance POSIXError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
}

uint64_t static POSIXError.EPERM.getter()
{
  return 1;
}

uint64_t static POSIXError.ENOENT.getter()
{
  return 2;
}

uint64_t static POSIXError.ESRCH.getter()
{
  return 3;
}

uint64_t static POSIXError.EINTR.getter()
{
  return 4;
}

uint64_t static POSIXError.EIO.getter()
{
  return 5;
}

uint64_t static POSIXError.ENXIO.getter()
{
  return 6;
}

uint64_t static POSIXError.E2BIG.getter()
{
  return 7;
}

uint64_t static POSIXError.ENOEXEC.getter()
{
  return 8;
}

uint64_t static POSIXError.EBADF.getter()
{
  return 9;
}

uint64_t static POSIXError.ECHILD.getter()
{
  return 10;
}

uint64_t static POSIXError.EDEADLK.getter()
{
  return 11;
}

uint64_t static POSIXError.ENOMEM.getter()
{
  return 12;
}

uint64_t static POSIXError.EACCES.getter()
{
  return 13;
}

uint64_t static POSIXError.EFAULT.getter()
{
  return 14;
}

uint64_t static POSIXError.ENOTBLK.getter()
{
  return 15;
}

uint64_t static POSIXError.EBUSY.getter()
{
  return 16;
}

uint64_t static POSIXError.EEXIST.getter()
{
  return 17;
}

uint64_t static POSIXError.EXDEV.getter()
{
  return 18;
}

uint64_t static POSIXError.ENODEV.getter()
{
  return 19;
}

uint64_t static POSIXError.ENOTDIR.getter()
{
  return 20;
}

uint64_t static POSIXError.EISDIR.getter()
{
  return 21;
}

uint64_t static POSIXError.EINVAL.getter()
{
  return 22;
}

uint64_t static POSIXError.ENFILE.getter()
{
  return 23;
}

uint64_t static POSIXError.EMFILE.getter()
{
  return 24;
}

uint64_t static POSIXError.ENOTTY.getter()
{
  return 25;
}

uint64_t static POSIXError.ETXTBSY.getter()
{
  return 26;
}

uint64_t static POSIXError.EFBIG.getter()
{
  return 27;
}

uint64_t static POSIXError.ENOSPC.getter()
{
  return 28;
}

uint64_t static POSIXError.ESPIPE.getter()
{
  return 29;
}

uint64_t static POSIXError.EROFS.getter()
{
  return 30;
}

uint64_t static POSIXError.EMLINK.getter()
{
  return 31;
}

uint64_t static POSIXError.EPIPE.getter()
{
  return 32;
}

uint64_t static POSIXError.EDOM.getter()
{
  return 33;
}

uint64_t static POSIXError.ERANGE.getter()
{
  return 34;
}

uint64_t static POSIXError.EAGAIN.getter()
{
  return 35;
}

uint64_t static POSIXError.EWOULDBLOCK.getter()
{
  return MEMORY[0x1F4188488]();
}

uint64_t static POSIXError.EINPROGRESS.getter()
{
  return 36;
}

uint64_t static POSIXError.EALREADY.getter()
{
  return 37;
}

uint64_t static POSIXError.ENOTSOCK.getter()
{
  return 38;
}

uint64_t static POSIXError.EDESTADDRREQ.getter()
{
  return 39;
}

uint64_t static POSIXError.EMSGSIZE.getter()
{
  return 40;
}

uint64_t static POSIXError.EPROTOTYPE.getter()
{
  return 41;
}

uint64_t static POSIXError.ENOPROTOOPT.getter()
{
  return 42;
}

uint64_t static POSIXError.EPROTONOSUPPORT.getter()
{
  return 43;
}

uint64_t static POSIXError.ESOCKTNOSUPPORT.getter()
{
  return 44;
}

uint64_t static POSIXError.ENOTSUP.getter()
{
  return 45;
}

uint64_t static POSIXError.EPFNOSUPPORT.getter()
{
  return 46;
}

uint64_t static POSIXError.EAFNOSUPPORT.getter()
{
  return 47;
}

uint64_t static POSIXError.EADDRINUSE.getter()
{
  return 48;
}

uint64_t static POSIXError.EADDRNOTAVAIL.getter()
{
  return 49;
}

uint64_t static POSIXError.ENETDOWN.getter()
{
  return 50;
}

uint64_t static POSIXError.ENETUNREACH.getter()
{
  return 51;
}

uint64_t static POSIXError.ENETRESET.getter()
{
  return 52;
}

uint64_t static POSIXError.ECONNABORTED.getter()
{
  return 53;
}

uint64_t static POSIXError.ECONNRESET.getter()
{
  return 54;
}

uint64_t static POSIXError.ENOBUFS.getter()
{
  return 55;
}

uint64_t static POSIXError.EISCONN.getter()
{
  return 56;
}

uint64_t static POSIXError.ENOTCONN.getter()
{
  return 57;
}

uint64_t static POSIXError.ESHUTDOWN.getter()
{
  return 58;
}

uint64_t static POSIXError.ETOOMANYREFS.getter()
{
  return 59;
}

uint64_t static POSIXError.ETIMEDOUT.getter()
{
  return 60;
}

uint64_t static POSIXError.ECONNREFUSED.getter()
{
  return 61;
}

uint64_t static POSIXError.ELOOP.getter()
{
  return 62;
}

uint64_t static POSIXError.ENAMETOOLONG.getter()
{
  return 63;
}

uint64_t static POSIXError.EHOSTDOWN.getter()
{
  return 64;
}

uint64_t static POSIXError.EHOSTUNREACH.getter()
{
  return 65;
}

uint64_t static POSIXError.ENOTEMPTY.getter()
{
  return 66;
}

uint64_t static POSIXError.EPROCLIM.getter()
{
  return 67;
}

uint64_t static POSIXError.EUSERS.getter()
{
  return 68;
}

uint64_t static POSIXError.EDQUOT.getter()
{
  return 69;
}

uint64_t static POSIXError.ESTALE.getter()
{
  return 70;
}

uint64_t static POSIXError.EREMOTE.getter()
{
  return 71;
}

uint64_t static POSIXError.EBADRPC.getter()
{
  return 72;
}

uint64_t static POSIXError.ERPCMISMATCH.getter()
{
  return 73;
}

uint64_t static POSIXError.EPROGUNAVAIL.getter()
{
  return 74;
}

uint64_t static POSIXError.EPROGMISMATCH.getter()
{
  return 75;
}

uint64_t static POSIXError.EPROCUNAVAIL.getter()
{
  return 76;
}

uint64_t static POSIXError.ENOLCK.getter()
{
  return 77;
}

uint64_t static POSIXError.ENOSYS.getter()
{
  return 78;
}

uint64_t static POSIXError.EFTYPE.getter()
{
  return 79;
}

uint64_t static POSIXError.EAUTH.getter()
{
  return 80;
}

uint64_t static POSIXError.ENEEDAUTH.getter()
{
  return 81;
}

uint64_t static POSIXError.EPWROFF.getter()
{
  return 82;
}

uint64_t static POSIXError.EDEVERR.getter()
{
  return 83;
}

uint64_t static POSIXError.EOVERFLOW.getter()
{
  return 84;
}

uint64_t static POSIXError.EBADEXEC.getter()
{
  return 85;
}

uint64_t static POSIXError.EBADARCH.getter()
{
  return 86;
}

uint64_t static POSIXError.ESHLIBVERS.getter()
{
  return 87;
}

uint64_t static POSIXError.EBADMACHO.getter()
{
  return 88;
}

uint64_t static POSIXError.ECANCELED.getter()
{
  return 89;
}

uint64_t static POSIXError.EIDRM.getter()
{
  return 90;
}

uint64_t static POSIXError.ENOMSG.getter()
{
  return 91;
}

uint64_t static POSIXError.EILSEQ.getter()
{
  return 92;
}

uint64_t static POSIXError.ENOATTR.getter()
{
  return 93;
}

uint64_t static POSIXError.EBADMSG.getter()
{
  return 94;
}

uint64_t static POSIXError.EMULTIHOP.getter()
{
  return 95;
}

uint64_t static POSIXError.ENODATA.getter()
{
  return 96;
}

uint64_t static POSIXError.ENOLINK.getter()
{
  return 97;
}

uint64_t static POSIXError.ENOSR.getter()
{
  return 98;
}

uint64_t static POSIXError.ENOSTR.getter()
{
  return 99;
}

uint64_t static POSIXError.EPROTO.getter()
{
  return 100;
}

uint64_t static POSIXError.ETIME.getter()
{
  return 101;
}

uint64_t static POSIXError.ENOPOLICY.getter()
{
  return 103;
}

uint64_t static POSIXError.ENOTRECOVERABLE.getter()
{
  return 104;
}

uint64_t static POSIXError.EOWNERDEAD.getter()
{
  return 105;
}

uint64_t static POSIXError.EQFULL.getter()
{
  return 106;
}

unint64_t lazy protocol witness table accessor for type POSIXErrorCode and conformance POSIXErrorCode()
{
  unint64_t result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode;
  if (!lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type POSIXErrorCode and conformance POSIXErrorCode);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  a1[2] = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  unint64_t result = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for POSIXErrorCode(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type POSIXErrorCode and conformance POSIXErrorCode();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t _BridgedStoredNSError.init(_:userInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v22[3] = a5;
  v22[2] = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  double v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v22 - v11;
  v22[0] = (*(uint64_t (**)(uint64_t, double))(*(void *)(a4 + 8) + 16))(a3, v10);
  v22[1] = v13;
  uint64_t v14 = swift_checkMetadataState();
  uint64_t v23 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v15 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  if (dispatch thunk of static BinaryInteger.isSigned.getter()) {
    uint64_t v16 = specialized numericCast<A, B>(_:)((uint64_t)v12, AssociatedTypeWitness, v15);
  }
  else {
    uint64_t v16 = specialized numericCast<A, B>(_:)((uint64_t)v12, AssociatedTypeWitness, v15);
  }
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  id v18 = objc_allocWithZone((Class)NSError);
  uint64_t v19 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, v17, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  (*(void (**)(id, uint64_t, uint64_t))(a4 + 72))(v20, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v23, v14);
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance MachError(void *a1@<X0>, void *a2@<X8>)
{
}

void specialized _BridgedStoredNSError.init(_bridgedNSError:)(void *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  unsigned int v4 = a1;
  id v6 = objc_msgSend(a1, sel_domain);
  id v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  double v10 = *a2;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)(v10) && v9 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v13 & 1) == 0)
    {

      unsigned int v4 = 0;
LABEL_12:
      *a3 = v4;
      return;
    }
  }
  id v14 = objc_msgSend(v4, sel_domain);
  id v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  uint64_t v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)(v10) && v17 == v18)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19) {
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance MachError()
{
  return specialized _BridgedStoredNSError.errorUserInfo.getter(*v0);
}

void _BridgedStoredNSError.errorUserInfo.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = MEMORY[0x1E4FBC868];
  uint64_t v55 = MEMORY[0x1E4FBC868];
  int v3 = (void *)(*(uint64_t (**)(void))(a2 + 64))();
  id v4 = objc_msgSend(v3, sel_userInfo);

  if (!v4) {
    goto LABEL_20;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (!v5)
  {
    id v6 = objc_msgSend(v4, sel_count);
    if (!v6) {
      goto LABEL_19;
    }
    uint64_t v7 = (uint64_t)v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v8 = *(void **)(v2 + 48);
    uint64_t v9 = *(void *)(v2 + 56);
    swift_retain();
    uint64_t v10 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v4, v7);
    if (v10 < 0 || v7 < v10) {
      goto LABEL_50;
    }
    *(void *)(v2 + 16) = v10;
    if (!v10)
    {
LABEL_18:
      swift_release();
      goto LABEL_19;
    }
    int64_t v11 = v10 - 1;
    uint64_t v12 = v2 + 64;
    while (1)
    {
      if ((*(void *)(v12 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
        goto LABEL_10;
      }
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v11);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      swift_bridgeObjectRetain();
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
      char v22 = v21;
      swift_bridgeObjectRelease();
      if (v22)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v23 = *(void *)(v2 + 16);
        BOOL v24 = __OFSUB__(v23, 1);
        uint64_t v25 = v23 - 1;
        if (v24) {
          goto LABEL_48;
        }
        *(void *)(v2 + 16) = v25;
        goto LABEL_10;
      }
      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v2 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v2 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v2 + 56);
        id v14 = (_OWORD *)(v13 + 32 * v11);
        long long v15 = v14[1];
        uint64_t v16 = (_OWORD *)(v13 + 32 * v20);
        *uint64_t v16 = *v14;
        v16[1] = v15;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }
      else
      {
        if (v20 == v11) {
          goto LABEL_10;
        }
        uint64_t v26 = *(void *)(v2 + 48);
        uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
        unint64_t v28 = (uint64_t *)(v26 + 16 * v11);
        uint64_t v29 = *v27;
        uint64_t v30 = v27[1];
        uint64_t v31 = v28[1];
        *uint64_t v27 = *v28;
        v27[1] = v31;
        uint64_t *v28 = v29;
        v28[1] = v30;
        uint64_t v32 = *(void *)(v2 + 56);
        uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
        uint64_t v34 = (_OWORD *)(v32 + 32 * v11);
        outlined init with take of Any(v33, &v53);
        outlined init with take of Any(v34, v33);
        outlined init with take of Any(&v53, v34);
        if (v11 < 0) {
          goto LABEL_18;
        }
      }
    }
  }
  uint64_t v2 = v5;
LABEL_19:

LABEL_20:
  int64_t v35 = 0;
  uint64_t v36 = v2 + 64;
  uint64_t v37 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v38 = -1;
  if (v37 < 64) {
    uint64_t v38 = ~(-1 << v37);
  }
  unint64_t v39 = v38 & *(void *)(v2 + 64);
  int64_t v40 = (unint64_t)(v37 + 63) >> 6;
  if (!v39) {
    goto LABEL_27;
  }
LABEL_25:
  unint64_t v42 = __clz(__rbit64(v39));
  v39 &= v39 - 1;
  unint64_t v43 = v42 | (v35 << 6);
LABEL_26:
  uint64_t v44 = *(void *)(v2 + 56);
  uint64_t v45 = (void *)(*(void *)(v2 + 48) + 16 * v43);
  uint64_t v46 = v45[1];
  *(void *)&long long v51 = *v45;
  *((void *)&v51 + 1) = v46;
  outlined init with copy of Any(v44 + 32 * v43, (uint64_t)v52);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v51, (uint64_t)&v53);
    uint64_t v50 = *((void *)&v53 + 1);
    if (!*((void *)&v53 + 1))
    {
      swift_release();
      return;
    }
    uint64_t v41 = v53;
    outlined init with take of Any(&v54, &v51);
    specialized Dictionary.subscript.setter((uint64_t)&v51, v41, v50);
    if (v39) {
      goto LABEL_25;
    }
LABEL_27:
    int64_t v47 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v47 < v40)
    {
      unint64_t v48 = *(void *)(v36 + 8 * v47);
      if (v48) {
        goto LABEL_30;
      }
      int64_t v49 = v35 + 2;
      ++v35;
      if (v47 + 1 < v40)
      {
        unint64_t v48 = *(void *)(v36 + 8 * v49);
        if (v48) {
          goto LABEL_33;
        }
        int64_t v35 = v47 + 1;
        if (v47 + 2 < v40)
        {
          unint64_t v48 = *(void *)(v36 + 8 * (v47 + 2));
          if (v48)
          {
            v47 += 2;
            goto LABEL_30;
          }
          int64_t v49 = v47 + 3;
          int64_t v35 = v47 + 2;
          if (v47 + 3 < v40)
          {
            unint64_t v48 = *(void *)(v36 + 8 * v49);
            if (!v48)
            {
              while (1)
              {
                int64_t v47 = v49 + 1;
                if (__OFADD__(v49, 1)) {
                  goto LABEL_49;
                }
                if (v47 >= v40)
                {
                  int64_t v35 = v40 - 1;
                  goto LABEL_44;
                }
                unint64_t v48 = *(void *)(v36 + 8 * v47);
                ++v49;
                if (v48) {
                  goto LABEL_30;
                }
              }
            }
LABEL_33:
            int64_t v47 = v49;
LABEL_30:
            unint64_t v39 = (v48 - 1) & v48;
            unint64_t v43 = __clz(__rbit64(v48)) + (v47 << 6);
            int64_t v35 = v47;
            goto LABEL_26;
          }
        }
      }
    }
LABEL_44:
    unint64_t v39 = 0;
    memset(v52, 0, sizeof(v52));
    long long v51 = 0u;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

void _BridgedStoredNSError.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  NSObject.hash(into:)();
}

uint64_t _BridgedStoredNSError._getEmbeddedNSError()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

id static _BridgedStoredNSError.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 64);
  uint64_t v7 = (void *)v6(a3, a4);
  uint64_t v8 = (void *)v6(a3, a4);
  id v9 = objc_msgSend(v7, sel_isEqual_, v8);

  return v9;
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance POSIXError(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t outlined init with take of (key: String, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t RecoverableError.attemptRecovery(optionIndex:resultHandler:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 32))(a1, a4, a5);
  return a2(v6 & 1);
}

id NSError._domain.getter()
{
  id v1 = objc_msgSend(v0, sel_domain);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id NSError._code.getter()
{
  return objc_msgSend(v0, sel_code);
}

id NSError._userInfo.getter()
{
  id result = objc_msgSend(v0, sel_userInfo);
  if (!result) {
    __break(1u);
  }
  return result;
}

id protocol witness for Error._domain.getter in conformance NSError()
{
  id v1 = objc_msgSend(*v0, sel_domain);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

id protocol witness for Error._userInfo.getter in conformance NSError()
{
  id result = objc_msgSend(*v0, sel_userInfo);
  if (!result) {
    __break(1u);
  }
  return result;
}

__CFString *CFErrorRef._domain.getter()
{
  id result = (id)CFErrorGetDomain(v0);
  if (result)
  {
    id v2 = result;
    id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);

    return (__CFString *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

CFIndex CFErrorRef._code.getter()
{
  return CFErrorGetCode(v0);
}

uint64_t CFErrorRef._userInfo.getter()
{
  CFDictionaryRef v3 = CFErrorCopyUserInfo(v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFDictionaryRef?);
  uint64_t v1 = Optional._bridgeToObjectiveC()();

  return v1;
}

uint64_t CFErrorRef._getEmbeddedNSError()()
{
  return swift_unknownObjectRetain();
}

uint64_t _BridgedNSError._domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t _BridgedNSError._code.getter()
{
  swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(*(void *)(*(void *)(swift_getAssociatedConformanceWitness() + 8) + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v55 = (char *)&v51 - v0;
  uint64_t v1 = swift_checkMetadataState();
  id v2 = *(void **)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  long long v54 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unint64_t v57 = (char *)&v51 - v5;
  MEMORY[0x1F4188790](v6);
  unint64_t v59 = (char *)&v51 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v51 - v9;
  MEMORY[0x1F4188790](v11);
  unint64_t v58 = (char *)&v51 - v12;
  MEMORY[0x1F4188790](v13);
  long long v15 = (char *)&v51 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v51 - v17;
  MEMORY[0x1F4188790](v19);
  char v21 = (char *)&v51 - v20;
  dispatch thunk of RawRepresentable.rawValue.getter();
  char v22 = dispatch thunk of static BinaryInteger.isSigned.getter();
  int64_t v60 = (void (*)(char *, char *, uint64_t))v2[2];
  v60(v18, v21, v1);
  if ((v22 & 1) == 0)
  {
    long long v15 = (char *)v2[1];
    ((void (*)(char *, uint64_t))v15)(v18, v1);
    goto LABEL_20;
  }
  uint64_t v23 = dispatch thunk of BinaryInteger.bitWidth.getter();
  int64_t v52 = v2;
  BOOL v24 = (void (*)(char *, uint64_t))v2[1];
  v24(v18, v1);
  if (v23 <= 64)
  {
    id v2 = v52;
    long long v15 = (char *)v24;
    goto LABEL_20;
  }
  v60(v15, v21, v1);
  int64_t v62 = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64) {
      goto LABEL_14;
    }
LABEL_10:
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v27 = v58;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v28 = dispatch thunk of static Comparable.< infix(_:_:)();
    v24(v27, v1);
    uint64_t v29 = v15;
    long long v15 = (char *)v24;
    v24(v29, v1);
    id v2 = v52;
    if (v28) {
      goto LABEL_15;
    }
LABEL_20:
    uint64_t v38 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v60(v10, v21, v1);
    if (v38 < 65)
    {
      uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
      ((void (*)(char *, uint64_t))v15)(v10, v1);
      if (v45 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter() & 1) != 0) {
        goto LABEL_33;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t))v15)(v10, v1);
    }
    unint64_t v39 = v59;
    v60(v59, v21, v1);
    int64_t v62 = 0x7FFFFFFFFFFFFFFFLL;
    char v40 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v41 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v40)
    {
      if (v41 > 64)
      {
        lazy protocol witness table accessor for type Int and conformance Int();
        unint64_t v42 = v58;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v43 = dispatch thunk of static Comparable.< infix(_:_:)();
        ((void (*)(char *, uint64_t))v15)(v42, v1);
        for (unint64_t i = v39; ; unint64_t i = v48)
        {
          ((void (*)(char *, uint64_t))v15)(i, v1);
          if ((v43 & 1) == 0) {
            break;
          }
LABEL_30:
          __break(1u);
LABEL_31:
          uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
          int64_t v47 = (void (*)(char *, char *, uint64_t))v2[4];
          v2 += 4;
          unint64_t v48 = v58;
          v47(v58, v39, v1);
          lazy protocol witness table accessor for type Int and conformance Int();
          unint64_t v39 = v57;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v43 = dispatch thunk of static Comparable.< infix(_:_:)();
          ((void (*)(char *, uint64_t))v15)(v39, v1);
        }
        goto LABEL_33;
      }
    }
    else if (v41 > 63)
    {
      goto LABEL_31;
    }
    uint64_t v46 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, uint64_t))v15)(v39, v1);
    if (v62 < v46) {
      goto LABEL_30;
    }
LABEL_33:
    uint64_t v49 = dispatch thunk of BinaryInteger._lowWord.getter();
    ((void (*)(char *, uint64_t))v15)(v21, v1);
    return v49;
  }
  char v25 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v26 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v25)
  {
    if (v26 <= 64) {
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  if (v26 >= 64)
  {
    uint64_t v37 = v15;
    long long v15 = (char *)v24;
    v24(v37, v1);
    id v2 = v52;
    goto LABEL_20;
  }
LABEL_14:
  uint64_t v30 = dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v31 = v15;
  long long v15 = (char *)v24;
  v24(v31, v1);
  id v2 = v52;
  if (v30 >= v62) {
    goto LABEL_20;
  }
LABEL_15:
  while (1)
  {
    __break(1u);
LABEL_16:
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v32 = v58;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    LODWORD(v56) = dispatch thunk of static Comparable.< infix(_:_:)();
    v24(v32, v1);
    uint64_t v33 = v54;
    ((void (*)(char *, char *, uint64_t))v52[4])(v54, v15, v1);
    if (v56) {
      break;
    }
    int64_t v34 = v62;
    uint64_t v35 = dispatch thunk of BinaryInteger._lowWord.getter();
    v24(v33, v1);
    BOOL v36 = v35 < v34;
    id v2 = v52;
    long long v15 = (char *)v24;
    if (!v36) {
      goto LABEL_20;
    }
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v33, v1);
  __break(1u);
  return result;
}

uint64_t _BridgedNSError.init(_bridgedNSError:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v24 - v10;
  id v12 = objc_msgSend(a1, sel_domain, v9);
  id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  if (v13 == (id)(*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      uint64_t v19 = *(void *)(a2 - 8);
      goto LABEL_10;
    }
  }
  id v28 = objc_msgSend(a1, sel_code);
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type Int and conformance Int();
  dispatch thunk of BinaryInteger.init<A>(_:)();
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v19 = *(void *)(a2 - 8);
  uint64_t v20 = v19;
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v11, 1, a2))
  {
    uint64_t v22 = v27;
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v27, v11, a2);
    uint64_t v21 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v22, v21, 1, a2);
  }
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v26);
LABEL_10:
  uint64_t v20 = v19;
  uint64_t v21 = 1;
  uint64_t v22 = v27;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v22, v21, 1, a2);
}

void _BridgedNSError.hash(into:)()
{
  Swift::UInt v0 = dispatch thunk of Error._code.getter();
  Hasher._combine(_:)(v0);
}

uint64_t _BridgedStoredNSError.userInfo.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 32))();
}

uint64_t _SwiftNewtypeWrapper<>._bridgeToObjectiveC()()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
  id v5 = a1;
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

BOOL static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v15 - v9;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, double))(v7 + 8);
  v11(a2, v6, v8);
  v15[1] = a1;
  id v12 = a1;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  BOOL v13 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 48))(v10, 1, a3) != 1;
  ((void (*)(char *, uint64_t))v11)(v10, v6);
  return v13;
}

uint64_t static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v6 - 8);
  double v8 = (char *)v14 - v7;
  if (a1)
  {
    uint64_t v9 = (uint64_t)a1;
  }
  else
  {
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    uint64_t v9 = _nilObjCError;
    id v10 = (id)_nilObjCError;
  }
  v14[1] = v9;
  id v11 = a1;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  uint64_t v12 = *(void *)(a2 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, a2);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a3, v8, a2);
  }
  __break(1u);
  return result;
}

Foundation::ErrorUserInfoKey __swiftcall ErrorUserInfoKey.init(rawValue:)(Foundation::ErrorUserInfoKey rawValue)
{
  Foundation::ErrorUserInfoKey *v1 = rawValue;
  return rawValue;
}

uint64_t ErrorUserInfoKey.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ErrorUserInfoKey.rawValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *id v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*ErrorUserInfoKey.rawValue.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance ErrorUserInfoKey@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ErrorUserInfoKey@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ErrorUserInfoKey(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ErrorUserInfoKey()
{
  swift_bridgeObjectRetain();
  uint64_t v0 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ErrorUserInfoKey()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ErrorUserInfoKey()
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance ErrorUserInfoKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ErrorUserInfoKey and conformance ErrorUserInfoKey();
  unint64_t v3 = lazy protocol witness table accessor for type ErrorUserInfoKey and conformance ErrorUserInfoKey();
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

id one-time initialization function for underlyingErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSUnderlyingError");
  static ErrorUserInfoKey.underlyingErrorKey = (uint64_t)result;
  unk_1E8EDB2C0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.underlyingErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for underlyingErrorKey, &static ErrorUserInfoKey.underlyingErrorKey, &qword_1E8EDB2C0, a1);
}

id one-time initialization function for localizedDescriptionKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedDescription");
  static ErrorUserInfoKey.localizedDescriptionKey = (uint64_t)result;
  unk_1E8EDB2D0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedDescriptionKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedDescriptionKey, &static ErrorUserInfoKey.localizedDescriptionKey, &qword_1E8EDB2D0, a1);
}

id one-time initialization function for localizedFailureReasonErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedFailureReason");
  static ErrorUserInfoKey.localizedFailureReasonErrorKey = (uint64_t)result;
  unk_1E8EDB2E0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedFailureReasonErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedFailureReasonErrorKey, &static ErrorUserInfoKey.localizedFailureReasonErrorKey, &qword_1E8EDB2E0, a1);
}

id one-time initialization function for localizedRecoverySuggestionErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoverySuggestion");
  static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey = (uint64_t)result;
  unk_1E8EDB2F0 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedRecoverySuggestionErrorKey, &static ErrorUserInfoKey.localizedRecoverySuggestionErrorKey, &qword_1E8EDB2F0, a1);
}

id one-time initialization function for localizedRecoveryOptionsErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSLocalizedRecoveryOptions");
  static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey = (uint64_t)result;
  unk_1E8EDB300 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for localizedRecoveryOptionsErrorKey, &static ErrorUserInfoKey.localizedRecoveryOptionsErrorKey, &qword_1E8EDB300, a1);
}

id one-time initialization function for recoveryAttempterErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSRecoveryAttempter");
  static ErrorUserInfoKey.recoveryAttempterErrorKey = (uint64_t)result;
  unk_1E8EDB310 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.recoveryAttempterErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for recoveryAttempterErrorKey, &static ErrorUserInfoKey.recoveryAttempterErrorKey, &qword_1E8EDB310, a1);
}

id one-time initialization function for helpAnchorErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSHelpAnchor");
  static ErrorUserInfoKey.helpAnchorErrorKey = (uint64_t)result;
  unk_1E8EDB320 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.helpAnchorErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for helpAnchorErrorKey, &static ErrorUserInfoKey.helpAnchorErrorKey, &qword_1E8EDB320, a1);
}

id one-time initialization function for stringEncodingErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSStringEncoding");
  static ErrorUserInfoKey.stringEncodingErrorKey = (uint64_t)result;
  unk_1E8EDB330 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.stringEncodingErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for stringEncodingErrorKey, &static ErrorUserInfoKey.stringEncodingErrorKey, &qword_1E8EDB330, a1);
}

id one-time initialization function for NSURLErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURL");
  static ErrorUserInfoKey.NSURLErrorKey = (uint64_t)result;
  unk_1E8EDB340 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.NSURLErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for NSURLErrorKey, &static ErrorUserInfoKey.NSURLErrorKey, &qword_1E8EDB340, a1);
}

id one-time initialization function for filePathErrorKey()
{
  id result = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
  static ErrorUserInfoKey.filePathErrorKey = (uint64_t)result;
  unk_1E8EDB350 = v1;
  return result;
}

uint64_t static ErrorUserInfoKey.filePathErrorKey.getter@<X0>(void *a1@<X8>)
{
  return static ErrorUserInfoKey.underlyingErrorKey.getter(&one-time initialization token for filePathErrorKey, &static ErrorUserInfoKey.filePathErrorKey, &qword_1E8EDB350, a1);
}

uint64_t static ErrorUserInfoKey.underlyingErrorKey.getter@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = *a3;
  *a4 = *a2;
  a4[1] = v7;

  return swift_bridgeObjectRetain();
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance URLError(void *a1@<X0>, void *a2@<X8>)
{
}

void protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance CocoaError(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_181D605A0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_181D605D8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t type metadata accessor for __NSErrorRecoveryAttempter()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type ErrorUserInfoKey and conformance ErrorUserInfoKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey;
  if (!lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ErrorUserInfoKey and conformance ErrorUserInfoKey);
  }
  return result;
}

uint64_t dispatch thunk of RecoverableError.recoveryOptions.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of RecoverableError.attemptRecovery(optionIndex:resultHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of RecoverableError.attemptRecovery(optionIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _ObjectiveCBridgeableError.init(_bridgedNSError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static _BridgedNSError._nsErrorDomain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _BridgedStoredNSError._nsError.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _BridgedStoredNSError.init(_nsError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

ValueMetadata *type metadata accessor for ErrorUserInfoKey()
{
  return &type metadata for ErrorUserInfoKey;
}

uint64_t sub_181D607B0()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

id partial apply for closure #1 in __NSErrorRecoveryAttempter.attemptRecovery(fromError:optionIndex:delegate:didRecoverSelector:contextInfo:)(char a1)
{
  return __NSErrorPerformRecoverySelector(*(id *)(v1 + 16), *(SEL *)(v1 + 24), a1 & 1, *(void *)(v1 + 32));
}

unsigned char *storeEnumTagSinglePayload for _GenericObjCError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D60940);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _GenericObjCError()
{
  return &type metadata for _GenericObjCError;
}

uint64_t _LocaleProtocol.regionCode.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 376))(&v5);
  uint64_t v2 = v6;
  if (!v6) {
    return 0;
  }
  uint64_t v3 = v5;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v3, v2);
  return v3;
}

uint64_t _LocaleProtocol.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(identifier:prefs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(name:prefs:disableBundleMatching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of _LocaleProtocol.init(components:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of _LocaleProtocol.copy(newCalendarIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of _LocaleProtocol.isAutoupdating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of _LocaleProtocol.isBridged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of _LocaleProtocol.languageCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of _LocaleProtocol.countryCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of _LocaleProtocol.scriptCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of _LocaleProtocol.variantCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 104))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendarIdentifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencyCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencySymbolDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of _LocaleProtocol.collationIdentifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of _LocaleProtocol.collatorIdentifierDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 144))();
}

uint64_t dispatch thunk of _LocaleProtocol.languageCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of _LocaleProtocol.scriptCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 160))();
}

uint64_t dispatch thunk of _LocaleProtocol.variantCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 168))();
}

uint64_t dispatch thunk of _LocaleProtocol.regionCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 176))();
}

uint64_t dispatch thunk of _LocaleProtocol.exemplarCharacterSet.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 184))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendar.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 192))();
}

uint64_t dispatch thunk of _LocaleProtocol.calendarIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 200))();
}

uint64_t dispatch thunk of _LocaleProtocol.collationIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 208))();
}

uint64_t dispatch thunk of _LocaleProtocol.usesMetricSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t dispatch thunk of _LocaleProtocol.decimalSeparator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 224))();
}

uint64_t dispatch thunk of _LocaleProtocol.groupingSeparator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 232))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencySymbol.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 240))();
}

uint64_t dispatch thunk of _LocaleProtocol.currencyCode.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 248))();
}

uint64_t dispatch thunk of _LocaleProtocol.collatorIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 256))();
}

uint64_t dispatch thunk of _LocaleProtocol.quotationBeginDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 264))();
}

uint64_t dispatch thunk of _LocaleProtocol.quotationEndDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 272))();
}

uint64_t dispatch thunk of _LocaleProtocol.alternateQuotationBeginDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of _LocaleProtocol.alternateQuotationEndDelimiter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 288))();
}

uint64_t dispatch thunk of _LocaleProtocol.measurementSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 296))();
}

uint64_t dispatch thunk of _LocaleProtocol.currency.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 304))();
}

uint64_t dispatch thunk of _LocaleProtocol.numberingSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 312))();
}

uint64_t dispatch thunk of _LocaleProtocol.availableNumberingSystems.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 320))();
}

uint64_t dispatch thunk of _LocaleProtocol.firstDayOfWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 328))();
}

uint64_t dispatch thunk of _LocaleProtocol.weekendRange.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 336))();
}

uint64_t dispatch thunk of _LocaleProtocol.minimumDaysInFirstWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 344))();
}

uint64_t dispatch thunk of _LocaleProtocol.language.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 352))();
}

uint64_t dispatch thunk of _LocaleProtocol.hourCycle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 360))();
}

uint64_t dispatch thunk of _LocaleProtocol.collation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 368))();
}

uint64_t dispatch thunk of _LocaleProtocol.region.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 376))();
}

uint64_t dispatch thunk of _LocaleProtocol.timeZone.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 384))();
}

uint64_t dispatch thunk of _LocaleProtocol.subdivision.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 392))();
}

uint64_t dispatch thunk of _LocaleProtocol.variant.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 400))();
}

uint64_t dispatch thunk of _LocaleProtocol.temperatureUnit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 408))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifier(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 416))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceHourCycle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 424))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceFirstWeekday(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 432))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceMinDaysInFirstWeek(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 440))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceMeasurementSystem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 448))();
}

uint64_t dispatch thunk of _LocaleProtocol.forceTemperatureUnit.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 456))();
}

uint64_t dispatch thunk of _LocaleProtocol.prefs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 464))();
}

uint64_t dispatch thunk of _LocaleProtocol.identifierCapturingPreferences.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 472))();
}

uint64_t dispatch thunk of _LocaleProtocol.pref(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 480))();
}

uint64_t dispatch thunk of _LocaleProtocol.bridgeToNSLocale()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 488))();
}

uint64_t dispatch thunk of _LocaleProtocol.customDateFormat(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 496))();
}

id NSNotificationCenter.Publisher.center.getter()
{
  return *v0;
}

id NSNotificationCenter.Publisher.name.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t NSNotificationCenter.Publisher.object.getter()
{
  return swift_unknownObjectRetain();
}

void Notification.Subscription.customMirror.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  v21[1] = *v1;
  v21[2] = a1;
  v21[0] = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v3 = *(void *)(v21[0] - 8);
  MEMORY[0x1F4188790](v21[0]);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  double v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (os_unfair_lock_s *)v1[2];
  os_unfair_lock_lock(v9);
  uint64_t v22 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18210C6A0;
  *(void *)(v10 + 32) = 0x7265746E6563;
  *(void *)(v10 + 40) = 0xE600000000000000;
  id v11 = (void *)v1[5];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSNotificationCenter?);
  *(void *)(v10 + 48) = v11;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = 1701667182;
  *(void *)(v10 + 88) = 0xE400000000000000;
  BOOL v13 = (void *)v1[6];
  type metadata accessor for NSNotificationName(0);
  *(void *)(v10 + 96) = v13;
  *(void *)(v10 + 120) = v14;
  *(void *)(v10 + 128) = 0x7463656A626FLL;
  *(void *)(v10 + 136) = 0xE600000000000000;
  uint64_t v15 = v2[7];
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
  *(void *)(v10 + 144) = v15;
  *(void *)(v10 + 168) = v16;
  *(void *)(v10 + 176) = 0x646E616D6564;
  uint64_t v17 = v2[4];
  *(void *)(v10 + 216) = MEMORY[0x1E4F1AAD8];
  *(void *)(v10 + 184) = 0xE600000000000000;
  *(void *)(v10 + 192) = v17;
  uint64_t v18 = type metadata accessor for Mirror.DisplayStyle();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
  (*(void (**)(char *, void, void))(v3 + 104))(v5, *MEMORY[0x1E4FBC430], v21[0]);
  swift_unknownObjectRetain();
  swift_retain();
  id v19 = v11;
  id v20 = v13;
  Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)();
  os_unfair_lock_unlock(v9);
}

void Notification.Subscription.playgroundDescription.getter(void *a1@<X8>)
{
  a1[3] = MEMORY[0x1E4FBB1A0];
  *a1 = 0xD00000000000001BLL;
  a1[1] = 0x80000001823AEC50;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance Notification.Subscription<A>()
{
  return 0xD00000000000001BLL;
}

void protocol witness for CustomReflectable.customMirror.getter in conformance Notification.Subscription<A>(uint64_t a1@<X8>)
{
}

void protocol witness for CustomPlaygroundDisplayConvertible.playgroundDescription.getter in conformance Notification.Subscription<A>(void *a1@<X8>)
{
}

uint64_t assignWithTake for NSNotificationCenter.Publisher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_181D612DC()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181D61314()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

void specialized closure #1 in Data.withBufferView<A>(_:)(unsigned char *a1, uint64_t a2, void *a3, uint64_t a4, Swift::Int a5, uint64_t a6, char *a7)
{
  if (a1)
  {
    uint64_t v7 = a2 - (void)a1;
    if (v7 >= 0)
    {
      closure #1 in closure #1 in _XMLPlistEncodingFormat.Writer.appendBase64(_:indentation:)(a1, v7, a3, a4, a5, a6, a7);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t _s10Foundation4DataV14withBufferViewyxxAA0dE0Vys5UInt8VGKXEKlFxSWKXEfU_AA23LocalizedStringResourceV_Tg50102_s10Foundation19PropertyListDecoderC30detectFormatAndConvertEncoding3for11binaryPlist3xml8openstepxAA4b7V_xAA10de4Vys5f45VGKXExAOKXExSS05UTF16Q0VKXEtKlFZxAOKXEfU_AA23ghI5V_Tg5AIxs5Error_pRi_zRi0_zlyAKIsgyrzo_AA0lmN0CXMTAIxsAM_pRi_zRi0_zlyAKIsgyrzo_SS05UTF16E0VxsAM_pRi_zRi0_zlyAKIsggrzo_AOXDXMTTf1nnc_n@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X2>, void *(*a4)(_OWORD *__return_ptr, unsigned __int8 *, uint64_t)@<X5>, void (*a5)(id)@<X7>, uint64_t a6@<X8>)
{
  if (result)
  {
    uint64_t v6 = a2 - result;
    if (v6 >= 0) {
      return specialized closure #1 in static PropertyListDecoder.detectFormatAndConvertEncoding<A>(for:binaryPlist:xml:openstep:)(result, v6, a3, a4, a5, a6);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t _CalendarBridged.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t *a1, uint64_t *a2, void *a3, char a4, void *a5, char a6)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  id v11 = *(void **)(v6 + 16);
  swift_retain();
  id v12 = objc_msgSend(v11, sel_calendarIdentifier);
  id v13 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C318]);
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18)
  {
LABEL_17:

    char v29 = 0;
    goto LABEL_18;
  }
  id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C2E8]);
  uint64_t v21 = v20;
  if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v21 == v22)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_35;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24)
  {
LABEL_35:

    char v29 = 1;
    goto LABEL_18;
  }
  id v25 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C2F0]);
  uint64_t v27 = v26;
  if (v25 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
LABEL_38:

    char v29 = 2;
    goto LABEL_18;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41) {
    goto LABEL_38;
  }
  id v42 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C2F8]);
  uint64_t v44 = v43;
  if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v44 == v45)
  {
    swift_bridgeObjectRelease_n();
LABEL_43:

    char v29 = 3;
    goto LABEL_18;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v46) {
    goto LABEL_43;
  }
  id v47 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C308]);
  uint64_t v49 = v48;
  if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v49 == v50)
  {
    swift_bridgeObjectRelease_n();
LABEL_48:

    char v29 = 4;
    goto LABEL_18;
  }
  char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v51) {
    goto LABEL_48;
  }
  id v52 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C300]);
  uint64_t v54 = v53;
  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
LABEL_53:

    char v29 = 5;
    goto LABEL_18;
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v56) {
    goto LABEL_53;
  }
  id v57 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C320]);
  uint64_t v59 = v58;
  if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
LABEL_58:

    char v29 = 6;
    goto LABEL_18;
  }
  char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v61) {
    goto LABEL_58;
  }
  id v62 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C328]);
  uint64_t v64 = v63;
  if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v64 == v65)
  {
    swift_bridgeObjectRelease_n();
LABEL_63:

    char v29 = 7;
    goto LABEL_18;
  }
  char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v66) {
    goto LABEL_63;
  }
  id v67 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C330]);
  uint64_t v69 = v68;
  if (v67 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v69 == v70)
  {
    swift_bridgeObjectRelease_n();
LABEL_68:

    char v29 = 8;
    goto LABEL_18;
  }
  char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v71) {
    goto LABEL_68;
  }
  id v72 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C338]);
  uint64_t v74 = v73;
  if (v72 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v74 == v75)
  {
    swift_bridgeObjectRelease_n();
LABEL_73:

    char v29 = 9;
    goto LABEL_18;
  }
  char v76 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v76) {
    goto LABEL_73;
  }
  id v77 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C340]);
  uint64_t v79 = v78;
  if (v77 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v79 == v80)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v81 & 1) == 0) {
      goto LABEL_80;
    }
  }

  char v29 = 10;
  while (1)
  {
LABEL_18:
    char v115 = v29;
    uint64_t v30 = v7;
    if (!v7)
    {
      id v32 = objc_msgSend(v11, sel_locale);
      if (v32)
      {
        id v12 = v32;
        type metadata accessor for _NSSwiftLocale();
        uint64_t v33 = swift_dynamicCastClass();
        if (v33)
        {
          uint64_t v30 = *(void *)(v33 + OBJC_IVAR____NSSwiftLocale_locale);
          uint64_t v8 = *(void *)(v33 + OBJC_IVAR____NSSwiftLocale_locale + 8);
          swift_unknownObjectRetain();
        }
        else
        {
          type metadata accessor for _LocaleBridged();
          uint64_t v30 = swift_allocObject();
          *(void *)(v30 + 16) = v12;
          uint64_t v8 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, 255, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
        }
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v8 = 0;
      }
    }
    *(void *)&long long v114 = v30;
    *((void *)&v114 + 1) = v8;
    if (v9)
    {
      swift_unknownObjectRetain();
      uint64_t v31 = v9;
      goto LABEL_29;
    }
    swift_unknownObjectRetain();
    id v34 = objc_msgSend(v11, sel_timeZone);
    if (v34) {
      break;
    }
    __break(1u);
LABEL_80:
    id v82 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C358]);
    uint64_t v84 = v83;
    if (v82 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v84 == v85)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_84;
    }
    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v86)
    {
LABEL_84:

      char v29 = 11;
    }
    else
    {
      id v87 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C360]);
      uint64_t v89 = v88;
      if (v87 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v89 == v90)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_89;
      }
      char v91 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v91)
      {
LABEL_89:

        char v29 = 12;
      }
      else
      {
        id v92 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C368]);
        uint64_t v94 = v93;
        if (v92 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v94 == v95)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_94;
        }
        char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v96)
        {
LABEL_94:

          char v29 = 13;
        }
        else
        {
          id v97 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C348]);
          uint64_t v99 = v98;
          if (v97 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v99 == v100)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_99;
          }
          char v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v101)
          {
LABEL_99:

            char v29 = 14;
          }
          else
          {
            id v102 = static String._unconditionallyBridgeFromObjectiveC(_:)((void *)*MEMORY[0x1E4F1C350]);
            uint64_t v104 = v103;
            if (v102 == static String._unconditionallyBridgeFromObjectiveC(_:)(v12) && v104 == v105)
            {

              swift_bridgeObjectRelease_n();
            }
            else
            {
              char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();

              swift_bridgeObjectRelease();
              uint64_t result = swift_bridgeObjectRelease();
              if ((v106 & 1) == 0)
              {
                __break(1u);
                return result;
              }
            }
            char v29 = 15;
          }
        }
      }
    }
  }
  uint64_t v35 = v34;
  type metadata accessor for _NSSwiftTimeZone();
  uint64_t v36 = swift_dynamicCastClass();
  if (v36)
  {
    uint64_t v31 = *(void *)(v36 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
    uint64_t v10 = *(void *)(v36 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for _TimeZoneBridged();
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v35;
    uint64_t v10 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, 255, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
  }
LABEL_29:
  *(void *)&long long v113 = v31;
  *((void *)&v113 + 1) = v10;
  swift_unknownObjectRetain();
  id v37 = a3;
  if (a4) {
    id v37 = objc_msgSend(v11, sel_firstWeekday);
  }
  id v38 = a5;
  if (a6) {
    id v38 = objc_msgSend(v11, sel_minimumDaysInFirstWeek);
  }
  uint64_t v111 = 0;
  char v112 = 1;
  uint64_t v39 = CalendarCache.fixed(identifier:locale:timeZone:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(&v115, &v114, &v113, (uint64_t)v37, 0, (uint64_t)v38, 0, &v111);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v39;
}

void _CalendarBridged.locale.getter(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_locale);
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for _NSSwiftLocale();
    uint64_t v5 = swift_dynamicCastClass();
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + OBJC_IVAR____NSSwiftLocale_locale);
      uint64_t v7 = *(void *)(v5 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _LocaleBridged();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v4;
      uint64_t v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, 255, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *a1 = v6;
  a1[1] = v7;
}

id _CalendarBridged.localeIdentifier.getter()
{
  id v1 = objc_msgSend(*(id *)(v0 + 16), sel_locale);
  if (v1)
  {
    type metadata accessor for _NSSwiftLocale();
    uint64_t v2 = swift_dynamicCastClass();
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + OBJC_IVAR____NSSwiftLocale_locale + 8);
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _LocaleBridged();
      *(void *)(swift_allocObject() + 16) = v1;
      uint64_t v3 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged((unint64_t *)&lazy protocol witness table cache variable for type _LocaleBridged and conformance _LocaleBridged, 255, (void (*)(uint64_t))type metadata accessor for _LocaleBridged);
    }
    uint64_t ObjectType = swift_getObjectType();
    id v1 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(ObjectType, v3);
    swift_unknownObjectRelease();
  }
  return v1;
}

unint64_t _CalendarBridged.minimumRange(of:)(unsigned __int8 *a1)
{
  Swift::UInt v2 = *a1;
  uint64_t v3 = *(void **)(v1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v4 = static _SetStorage.allocate(capacity:)();
  uint64_t v5 = v4 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  unint64_t result = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = result & ~v7;
  unint64_t v9 = v8 >> 6;
  uint64_t v10 = *(void *)(v4 + 56 + 8 * (v8 >> 6));
  uint64_t v11 = 1 << v8;
  uint64_t v12 = *(void *)(v4 + 48);
  if (((1 << v8) & v10) != 0)
  {
    if (*(unsigned __int8 *)(v12 + v8) == v2) {
      goto LABEL_12;
    }
    uint64_t v13 = ~v7;
    unint64_t v8 = (v8 + 1) & v13;
    unint64_t v9 = v8 >> 6;
    uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
    uint64_t v11 = 1 << v8;
    if ((v10 & (1 << v8)) != 0)
    {
      if (*(unsigned __int8 *)(v12 + v8) == v2) {
        goto LABEL_12;
      }
      unint64_t v8 = (v8 + 1) & v13;
      unint64_t v9 = v8 >> 6;
      uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
      uint64_t v11 = 1 << v8;
      if ((v10 & (1 << v8)) != 0)
      {
        if (*(unsigned __int8 *)(v12 + v8) == v2) {
          goto LABEL_12;
        }
        unint64_t v8 = (v8 + 1) & v13;
        unint64_t v9 = v8 >> 6;
        uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
        uint64_t v11 = 1 << v8;
        if ((v10 & (1 << v8)) != 0)
        {
          while (*(unsigned __int8 *)(v12 + v8) != v2)
          {
            unint64_t v8 = (v8 + 1) & v13;
            unint64_t v9 = v8 >> 6;
            uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
            uint64_t v11 = 1 << v8;
            if ((v10 & (1 << v8)) == 0) {
              goto LABEL_10;
            }
          }
          goto LABEL_12;
        }
      }
    }
  }
LABEL_10:
  *(void *)(v5 + 8 * v9) = v11 | v10;
  *(unsigned char *)(v12 + v8) = v2;
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    goto LABEL_52;
  }
  *(void *)(v4 + 16) = v16;
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v17 = (void *)result;
  uint64_t v18 = 0;
  unint64_t v19 = result + 64;
  do
  {
    int v20 = outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 32];
    if (v20 == 18) {
      break;
    }
    uint64_t v21 = *(void *)&outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 40];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.minimumRange(of:)[v18 + 32]);
    if (v22) {
      goto LABEL_49;
    }
    *(void *)(v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v17[6] + result) = v20;
    *(void *)(v17[7] + 8 * result) = v21;
    uint64_t v23 = v17[2];
    BOOL v15 = __OFADD__(v23, 1);
    uint64_t v24 = v23 + 1;
    if (v15) {
      goto LABEL_50;
    }
    v17[2] = v24;
    v18 += 16;
  }
  while (v18 != 256);
  int64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v28 = *(void *)(v4 + 56);
  uint64_t v29 = -1;
  if (v27 < 64) {
    uint64_t v29 = ~(-1 << v27);
  }
  unint64_t v30 = v29 & v28;
  int64_t v31 = (unint64_t)(v27 + 63) >> 6;
  if ((v29 & v28) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  unint64_t v32 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  unint64_t v33 = v32 | (v25 << 6);
  if (v17[2])
  {
    while (1)
    {
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v4 + 48) + v33));
      if ((v37 & 1) == 0) {
        break;
      }
      uint64_t v38 = *(void *)(v17[7] + 8 * result);
      if ((v38 & ~v26) == 0) {
        uint64_t v38 = 0;
      }
      v26 |= v38;
      if (v30) {
        goto LABEL_20;
      }
LABEL_22:
      int64_t v34 = v25 + 1;
      if (__OFADD__(v25, 1)) {
        goto LABEL_48;
      }
      if (v34 >= v31)
      {
LABEL_41:
        swift_release();
        swift_release();
        unint64_t result = (unint64_t)objc_msgSend(v3, sel_minimumRangeOfUnit_, v26);
        if (result == 0x7FFFFFFFFFFFFFFFLL) {
          return 0;
        }
        if (__OFADD__(result, v39)) {
          goto LABEL_53;
        }
        return result;
      }
      unint64_t v35 = *(void *)(v5 + 8 * v34);
      ++v25;
      if (!v35)
      {
        int64_t v25 = v34 + 1;
        if (v34 + 1 >= v31) {
          goto LABEL_41;
        }
        unint64_t v35 = *(void *)(v5 + 8 * v25);
        if (!v35)
        {
          int64_t v25 = v34 + 2;
          if (v34 + 2 >= v31) {
            goto LABEL_41;
          }
          unint64_t v35 = *(void *)(v5 + 8 * v25);
          if (!v35)
          {
            int64_t v36 = v34 + 3;
            if (v36 >= v31) {
              goto LABEL_41;
            }
            unint64_t v35 = *(void *)(v5 + 8 * v36);
            if (!v35)
            {
              while (1)
              {
                int64_t v25 = v36 + 1;
                if (__OFADD__(v36, 1)) {
                  goto LABEL_51;
                }
                if (v25 >= v31) {
                  goto LABEL_41;
                }
                unint64_t v35 = *(void *)(v5 + 8 * v25);
                ++v36;
                if (v35) {
                  goto LABEL_35;
                }
              }
            }
            int64_t v25 = v36;
          }
        }
      }
LABEL_35:
      unint64_t v30 = (v35 - 1) & v35;
      unint64_t v33 = __clz(__rbit64(v35)) + (v25 << 6);
      if (!v17[2]) {
        goto LABEL_46;
      }
    }
  }
  else
  {
LABEL_46:
    __break(1u);
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

unint64_t _CalendarBridged.maximumRange(of:)(unsigned __int8 *a1)
{
  Swift::UInt v2 = *a1;
  uint64_t v3 = *(void **)(v1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v4 = static _SetStorage.allocate(capacity:)();
  uint64_t v5 = v4 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  unint64_t result = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v8 = result & ~v7;
  unint64_t v9 = v8 >> 6;
  uint64_t v10 = *(void *)(v4 + 56 + 8 * (v8 >> 6));
  uint64_t v11 = 1 << v8;
  uint64_t v12 = *(void *)(v4 + 48);
  if (((1 << v8) & v10) != 0)
  {
    if (*(unsigned __int8 *)(v12 + v8) == v2) {
      goto LABEL_12;
    }
    uint64_t v13 = ~v7;
    unint64_t v8 = (v8 + 1) & v13;
    unint64_t v9 = v8 >> 6;
    uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
    uint64_t v11 = 1 << v8;
    if ((v10 & (1 << v8)) != 0)
    {
      if (*(unsigned __int8 *)(v12 + v8) == v2) {
        goto LABEL_12;
      }
      unint64_t v8 = (v8 + 1) & v13;
      unint64_t v9 = v8 >> 6;
      uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
      uint64_t v11 = 1 << v8;
      if ((v10 & (1 << v8)) != 0)
      {
        if (*(unsigned __int8 *)(v12 + v8) == v2) {
          goto LABEL_12;
        }
        unint64_t v8 = (v8 + 1) & v13;
        unint64_t v9 = v8 >> 6;
        uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
        uint64_t v11 = 1 << v8;
        if ((v10 & (1 << v8)) != 0)
        {
          while (*(unsigned __int8 *)(v12 + v8) != v2)
          {
            unint64_t v8 = (v8 + 1) & v13;
            unint64_t v9 = v8 >> 6;
            uint64_t v10 = *(void *)(v5 + 8 * (v8 >> 6));
            uint64_t v11 = 1 << v8;
            if ((v10 & (1 << v8)) == 0) {
              goto LABEL_10;
            }
          }
          goto LABEL_12;
        }
      }
    }
  }
LABEL_10:
  *(void *)(v5 + 8 * v9) = v11 | v10;
  *(unsigned char *)(v12 + v8) = v2;
  uint64_t v14 = *(void *)(v4 + 16);
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    goto LABEL_54;
  }
  *(void *)(v4 + 16) = v16;
LABEL_12:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v17 = (void *)result;
  uint64_t v18 = 0;
  unint64_t v19 = result + 64;
  do
  {
    int v20 = outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 32];
    if (v20 == 18) {
      break;
    }
    uint64_t v21 = *(void *)&outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 40];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.maximumRange(of:)[v18 + 32]);
    if (v22) {
      goto LABEL_51;
    }
    *(void *)(v19 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v17[6] + result) = v20;
    *(void *)(v17[7] + 8 * result) = v21;
    uint64_t v23 = v17[2];
    BOOL v15 = __OFADD__(v23, 1);
    uint64_t v24 = v23 + 1;
    if (v15) {
      goto LABEL_52;
    }
    v17[2] = v24;
    v18 += 16;
  }
  while (v18 != 256);
  int64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v28 = *(void *)(v4 + 56);
  uint64_t v29 = -1;
  if (v27 < 64) {
    uint64_t v29 = ~(-1 << v27);
  }
  unint64_t v30 = v29 & v28;
  int64_t v31 = (unint64_t)(v27 + 63) >> 6;
  if ((v29 & v28) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  unint64_t v32 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  unint64_t v33 = v32 | (v25 << 6);
  if (v17[2])
  {
    while (1)
    {
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v4 + 48) + v33));
      if ((v37 & 1) == 0) {
        break;
      }
      uint64_t v38 = *(void *)(v17[7] + 8 * result);
      if ((v38 & ~v26) == 0) {
        uint64_t v38 = 0;
      }
      v26 |= v38;
      if (v30) {
        goto LABEL_20;
      }
LABEL_22:
      int64_t v34 = v25 + 1;
      if (__OFADD__(v25, 1)) {
        goto LABEL_50;
      }
      if (v34 >= v31)
      {
LABEL_43:
        swift_release();
        swift_release();
        unint64_t result = (unint64_t)objc_msgSend(v3, sel_maximumRangeOfUnit_, v26);
        if (result == 0x7FFFFFFFFFFFFFFFLL) {
          return 0;
        }
        if (__OFADD__(result, v39)) {
          goto LABEL_55;
        }
        return result;
      }
      unint64_t v35 = *(void *)(v5 + 8 * v34);
      ++v25;
      if (!v35)
      {
        int64_t v25 = v34 + 1;
        if (v34 + 1 >= v31) {
          goto LABEL_43;
        }
        unint64_t v35 = *(void *)(v5 + 8 * v25);
        if (!v35)
        {
          int64_t v25 = v34 + 2;
          if (v34 + 2 >= v31) {
            goto LABEL_43;
          }
          unint64_t v35 = *(void *)(v5 + 8 * v25);
          if (!v35)
          {
            int64_t v25 = v34 + 3;
            if (v34 + 3 >= v31) {
              goto LABEL_43;
            }
            unint64_t v35 = *(void *)(v5 + 8 * v25);
            if (!v35)
            {
              int64_t v36 = v34 + 4;
              if (v36 >= v31) {
                goto LABEL_43;
              }
              unint64_t v35 = *(void *)(v5 + 8 * v36);
              if (!v35)
              {
                while (1)
                {
                  int64_t v25 = v36 + 1;
                  if (__OFADD__(v36, 1)) {
                    goto LABEL_53;
                  }
                  if (v25 >= v31) {
                    goto LABEL_43;
                  }
                  unint64_t v35 = *(void *)(v5 + 8 * v25);
                  ++v36;
                  if (v35) {
                    goto LABEL_37;
                  }
                }
              }
              int64_t v25 = v36;
            }
          }
        }
      }
LABEL_37:
      unint64_t v30 = (v35 - 1) & v35;
      unint64_t v33 = __clz(__rbit64(v35)) + (v25 << 6);
      if (!v17[2]) {
        goto LABEL_48;
      }
    }
  }
  else
  {
LABEL_48:
    __break(1u);
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
  return result;
}

void _CalendarBridged.range(of:in:for:)(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
  Swift::UInt v4 = *a1;
  Swift::UInt v5 = *a2;
  double v6 = *a3;
  uint64_t v7 = *(void **)(v3 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v8 = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = v8 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v4);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v8 + 56 + 8 * (v12 >> 6));
  uint64_t v15 = 1 << v12;
  uint64_t v16 = *(void *)(v8 + 48);
  if (((1 << v12) & v14) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v16 + v12) == v4) {
    goto LABEL_12;
  }
  uint64_t v17 = ~v11;
  unint64_t v12 = (v12 + 1) & v17;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
  uint64_t v15 = 1 << v12;
  if ((v14 & (1 << v12)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v16 + v12) == v4) {
    goto LABEL_12;
  }
  unint64_t v12 = (v12 + 1) & v17;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
  uint64_t v15 = 1 << v12;
  if ((v14 & (1 << v12)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v16 + v12) == v4) {
    goto LABEL_12;
  }
  unint64_t v12 = (v12 + 1) & v17;
  unint64_t v13 = v12 >> 6;
  uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
  uint64_t v15 = 1 << v12;
  if ((v14 & (1 << v12)) != 0)
  {
    while (*(unsigned __int8 *)(v16 + v12) != v4)
    {
      unint64_t v12 = (v12 + 1) & v17;
      unint64_t v13 = v12 >> 6;
      uint64_t v14 = *(void *)(v9 + 8 * (v12 >> 6));
      uint64_t v15 = 1 << v12;
      if ((v14 & (1 << v12)) == 0) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    *(void *)(v9 + 8 * v13) = v15 | v14;
    *(unsigned char *)(v16 + v12) = v4;
    uint64_t v18 = *(void *)(v8 + 16);
    BOOL v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_96;
    }
    *(void *)(v8 + 16) = v20;
  }
LABEL_12:
  Swift::UInt v84 = v5;
  id v83 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  uint64_t v21 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (uint64_t i = 0; i != 256; i += 16)
  {
    int v23 = outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 32];
    if (v23 == 18) {
      break;
    }
    uint64_t v24 = *(void *)&outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 40];
    unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.range(of:in:for:)[i + 32]);
    if (v26) {
      goto LABEL_89;
    }
    *(void *)((char *)v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v25;
    *(unsigned char *)(v21[6] + v25) = v23;
    *(void *)(v21[7] + 8 * v25) = v24;
    uint64_t v27 = v21[2];
    BOOL v19 = __OFADD__(v27, 1);
    uint64_t v28 = v27 + 1;
    if (v19) {
      goto LABEL_90;
    }
    v21[2] = v28;
  }
  int64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v32 = *(void *)(v8 + 56);
  uint64_t v33 = -1;
  if (v31 < 64) {
    uint64_t v33 = ~(-1 << v31);
  }
  unint64_t v34 = v33 & v32;
  int64_t v35 = (unint64_t)(v31 + 63) >> 6;
  if ((v33 & v32) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  unint64_t v36 = __clz(__rbit64(v34));
  v34 &= v34 - 1;
  unint64_t v37 = v36 | (v29 << 6);
  if (v21[2])
  {
    while (1)
    {
      uint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v8 + 48) + v37));
      if ((v42 & 1) == 0) {
        goto LABEL_85;
      }
      uint64_t v43 = *(void *)(v21[7] + 8 * v41);
      if ((v43 & ~v30) == 0) {
        uint64_t v43 = 0;
      }
      v30 |= v43;
      if (v34) {
        goto LABEL_20;
      }
LABEL_22:
      int64_t v38 = v29 + 1;
      if (__OFADD__(v29, 1)) {
        goto LABEL_88;
      }
      if (v38 >= v35) {
        break;
      }
      unint64_t v39 = *(void *)(v9 + 8 * v38);
      ++v29;
      if (!v39)
      {
        int64_t v29 = v38 + 1;
        if (v38 + 1 >= v35) {
          break;
        }
        unint64_t v39 = *(void *)(v9 + 8 * v29);
        if (!v39)
        {
          int64_t v29 = v38 + 2;
          if (v38 + 2 >= v35) {
            break;
          }
          unint64_t v39 = *(void *)(v9 + 8 * v29);
          if (!v39)
          {
            int64_t v40 = v38 + 3;
            if (v40 >= v35) {
              break;
            }
            unint64_t v39 = *(void *)(v9 + 8 * v40);
            if (!v39)
            {
              while (1)
              {
                int64_t v29 = v40 + 1;
                if (__OFADD__(v40, 1)) {
                  goto LABEL_94;
                }
                if (v29 >= v35) {
                  goto LABEL_41;
                }
                unint64_t v39 = *(void *)(v9 + 8 * v29);
                ++v40;
                if (v39) {
                  goto LABEL_35;
                }
              }
            }
            int64_t v29 = v40;
          }
        }
      }
LABEL_35:
      unint64_t v34 = (v39 - 1) & v39;
      unint64_t v37 = __clz(__rbit64(v39)) + (v29 << 6);
      if (!v21[2]) {
        goto LABEL_84;
      }
    }
LABEL_41:
    swift_release();
    swift_release();
    uint64_t v44 = static _SetStorage.allocate(capacity:)();
    uint64_t v45 = v44 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v84);
    Swift::Int v46 = Hasher._finalize()();
    uint64_t v47 = -1 << *(unsigned char *)(v44 + 32);
    unint64_t v48 = v46 & ~v47;
    unint64_t v49 = v48 >> 6;
    uint64_t v50 = *(void *)(v44 + 56 + 8 * (v48 >> 6));
    uint64_t v51 = 1 << v48;
    uint64_t v52 = *(void *)(v44 + 48);
    if (((1 << v48) & v50) == 0) {
      goto LABEL_50;
    }
    if (*(unsigned __int8 *)(v52 + v48) == v84) {
      goto LABEL_52;
    }
    uint64_t v53 = ~v47;
    unint64_t v48 = (v48 + 1) & v53;
    unint64_t v49 = v48 >> 6;
    uint64_t v50 = *(void *)(v45 + 8 * (v48 >> 6));
    uint64_t v51 = 1 << v48;
    if ((v50 & (1 << v48)) == 0) {
      goto LABEL_50;
    }
    if (*(unsigned __int8 *)(v52 + v48) == v84) {
      goto LABEL_52;
    }
    unint64_t v48 = (v48 + 1) & v53;
    unint64_t v49 = v48 >> 6;
    uint64_t v50 = *(void *)(v45 + 8 * (v48 >> 6));
    uint64_t v51 = 1 << v48;
    if ((v50 & (1 << v48)) == 0) {
      goto LABEL_50;
    }
    if (*(unsigned __int8 *)(v52 + v48) == v84) {
      goto LABEL_52;
    }
    unint64_t v48 = (v48 + 1) & v53;
    unint64_t v49 = v48 >> 6;
    uint64_t v50 = *(void *)(v45 + 8 * (v48 >> 6));
    uint64_t v51 = 1 << v48;
    if ((v50 & (1 << v48)) != 0)
    {
      while (*(unsigned __int8 *)(v52 + v48) != v84)
      {
        unint64_t v48 = (v48 + 1) & v53;
        unint64_t v49 = v48 >> 6;
        uint64_t v50 = *(void *)(v45 + 8 * (v48 >> 6));
        uint64_t v51 = 1 << v48;
        if ((v50 & (1 << v48)) == 0) {
          goto LABEL_50;
        }
      }
    }
    else
    {
LABEL_50:
      *(void *)(v45 + 8 * v49) = v51 | v50;
      *(unsigned char *)(v52 + v48) = v84;
      uint64_t v54 = *(void *)(v44 + 16);
      BOOL v19 = __OFADD__(v54, 1);
      uint64_t v55 = v54 + 1;
      if (v19) {
        goto LABEL_97;
      }
      *(void *)(v44 + 16) = v55;
    }
LABEL_52:
    char v56 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t j = 0; j != 256; j += 16)
    {
      int v58 = outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 32];
      if (v58 == 18) {
        break;
      }
      uint64_t v59 = *(void *)&outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 40];
      unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.range(of:in:for:)[j + 32]);
      if (v61) {
        goto LABEL_92;
      }
      *(void *)((char *)v56 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v60;
      *(unsigned char *)(v56[6] + v60) = v58;
      *(void *)(v56[7] + 8 * v60) = v59;
      uint64_t v62 = v56[2];
      BOOL v19 = __OFADD__(v62, 1);
      uint64_t v63 = v62 + 1;
      if (v19) {
        goto LABEL_93;
      }
      v56[2] = v63;
    }
    int64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v66 = 1 << *(unsigned char *)(v44 + 32);
    uint64_t v67 = *(void *)(v44 + 56);
    uint64_t v68 = -1;
    if (v66 < 64) {
      uint64_t v68 = ~(-1 << v66);
    }
    unint64_t v69 = v68 & v67;
    int64_t v70 = (unint64_t)(v66 + 63) >> 6;
    if ((v68 & v67) == 0) {
      goto LABEL_62;
    }
LABEL_60:
    unint64_t v71 = __clz(__rbit64(v69));
    v69 &= v69 - 1;
    unint64_t v72 = v71 | (v64 << 6);
    if (v56[2])
    {
      while (1)
      {
        uint64_t v76 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v44 + 48) + v72));
        if ((v77 & 1) == 0) {
          goto LABEL_87;
        }
        uint64_t v78 = *(void *)(v56[7] + 8 * v76);
        if ((v78 & ~v65) == 0) {
          uint64_t v78 = 0;
        }
        v65 |= v78;
        if (v69) {
          goto LABEL_60;
        }
LABEL_62:
        int64_t v73 = v64 + 1;
        if (__OFADD__(v64, 1)) {
          goto LABEL_91;
        }
        if (v73 >= v70)
        {
LABEL_81:
          swift_release();
          swift_release();
          id v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v6);
          id v80 = objc_msgSend(v83, sel_rangeOfUnit_inUnit_forDate_, v30, v65, v79);
          uint64_t v82 = v81;

          if (v80 != (id)0x7FFFFFFFFFFFFFFFLL && __OFADD__(v80, v82)) {
            goto LABEL_98;
          }
          return;
        }
        unint64_t v74 = *(void *)(v45 + 8 * v73);
        ++v64;
        if (!v74)
        {
          int64_t v64 = v73 + 1;
          if (v73 + 1 >= v70) {
            goto LABEL_81;
          }
          unint64_t v74 = *(void *)(v45 + 8 * v64);
          if (!v74)
          {
            int64_t v64 = v73 + 2;
            if (v73 + 2 >= v70) {
              goto LABEL_81;
            }
            unint64_t v74 = *(void *)(v45 + 8 * v64);
            if (!v74)
            {
              int64_t v75 = v73 + 3;
              if (v75 >= v70) {
                goto LABEL_81;
              }
              unint64_t v74 = *(void *)(v45 + 8 * v75);
              if (!v74)
              {
                while (1)
                {
                  int64_t v64 = v75 + 1;
                  if (__OFADD__(v75, 1)) {
                    goto LABEL_95;
                  }
                  if (v64 >= v70) {
                    goto LABEL_81;
                  }
                  unint64_t v74 = *(void *)(v45 + 8 * v64);
                  ++v75;
                  if (v74) {
                    goto LABEL_75;
                  }
                }
              }
              int64_t v64 = v75;
            }
          }
        }
LABEL_75:
        unint64_t v69 = (v74 - 1) & v74;
        unint64_t v72 = __clz(__rbit64(v74)) + (v64 << 6);
        if (!v56[2]) {
          goto LABEL_86;
        }
      }
    }
    goto LABEL_86;
  }
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
}

Foundation::DateInterval_optional __swiftcall _CalendarBridged.dateInterval(of:for:)(Foundation::Calendar::Component of, Foundation::Date a2)
{
  uint64_t v5 = v3;
  v58[1] = *(double *)MEMORY[0x1E4F143B8];
  Swift::UInt v6 = *(unsigned __int8 *)of;
  double v7 = *v2;
  v58[0] = 0.0;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, 0.0);
  uint64_t v9 = *(void **)(v4 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v10 = static _SetStorage.allocate(capacity:)();
  uint64_t v11 = v10 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v6);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v14 = v12 & ~v13;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 56 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  uint64_t v18 = *(void *)(v10 + 48);
  if (((1 << v14) & v16) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v18 + v14) == v6) {
    goto LABEL_12;
  }
  uint64_t v19 = ~v13;
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v18 + v14) == v6) {
    goto LABEL_12;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v18 + v14) == v6) {
    goto LABEL_12;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0)
  {
LABEL_10:
    *(void *)(v11 + 8 * v15) = v17 | v16;
    *(unsigned char *)(v18 + v14) = v6;
    uint64_t v20 = *(void *)(v10 + 16);
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_53;
    }
    *(void *)(v10 + 16) = v22;
    goto LABEL_12;
  }
  while (*(unsigned __int8 *)(v18 + v14) != v6)
  {
    unint64_t v14 = (v14 + 1) & v19;
    unint64_t v15 = v14 >> 6;
    uint64_t v16 = *(void *)(v11 + 8 * (v14 >> 6));
    uint64_t v17 = 1 << v14;
    if ((v16 & (1 << v14)) == 0) {
      goto LABEL_10;
    }
  }
LABEL_12:
  id v55 = v9;
  uint64_t v56 = v5;
  int v23 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  uint64_t v24 = (void *)static _DictionaryStorage.allocate(capacity:)();
  for (uint64_t i = 0; i != 256; i += 16)
  {
    int v26 = outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 32];
    if (v26 == 18) {
      break;
    }
    uint64_t v27 = *(void *)&outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 40];
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateInterval(of:for:)[i + 32]);
    if (v29) {
      goto LABEL_50;
    }
    *(void *)((char *)v24 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v28;
    *(unsigned char *)(v24[6] + v28) = v26;
    *(void *)(v24[7] + 8 * v28) = v27;
    uint64_t v30 = v24[2];
    BOOL v21 = __OFADD__(v30, 1);
    uint64_t v31 = v30 + 1;
    if (v21) {
      goto LABEL_51;
    }
    v24[2] = v31;
  }
  int64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v35 = *(void *)(v10 + 56);
  uint64_t v36 = -1;
  if (v34 < 64) {
    uint64_t v36 = ~(-1 << v34);
  }
  unint64_t v37 = v36 & v35;
  int64_t v38 = (unint64_t)(v34 + 63) >> 6;
  if ((v36 & v35) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  unint64_t v39 = __clz(__rbit64(v37));
  v37 &= v37 - 1;
  unint64_t v40 = v39 | (v32 << 6);
  if (!v24[2])
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  while (1)
  {
    uint64_t v44 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v10 + 48) + v40));
    if ((v45 & 1) == 0) {
      goto LABEL_48;
    }
    uint64_t v46 = *(void *)(v24[7] + 8 * v44);
    if ((v46 & ~v33) == 0) {
      uint64_t v46 = 0;
    }
    v33 |= v46;
    if (v37) {
      goto LABEL_20;
    }
LABEL_22:
    int64_t v41 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      goto LABEL_49;
    }
    if (v41 >= v38) {
      break;
    }
    unint64_t v42 = *(void *)(v11 + 8 * v41);
    ++v32;
    if (!v42)
    {
      int64_t v32 = v41 + 1;
      if (v41 + 1 >= v38) {
        break;
      }
      unint64_t v42 = *(void *)(v11 + 8 * v32);
      if (!v42)
      {
        int64_t v32 = v41 + 2;
        if (v41 + 2 >= v38) {
          break;
        }
        unint64_t v42 = *(void *)(v11 + 8 * v32);
        if (!v42)
        {
          int64_t v43 = v41 + 3;
          if (v43 >= v38) {
            break;
          }
          unint64_t v42 = *(void *)(v11 + 8 * v43);
          if (!v42)
          {
            while (1)
            {
              int64_t v32 = v43 + 1;
              if (__OFADD__(v43, 1)) {
                break;
              }
              if (v32 >= v38) {
                goto LABEL_41;
              }
              unint64_t v42 = *(void *)(v11 + 8 * v32);
              ++v43;
              if (v42) {
                goto LABEL_35;
              }
            }
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
          }
          int64_t v32 = v43;
        }
      }
    }
LABEL_35:
    unint64_t v37 = (v42 - 1) & v42;
    unint64_t v40 = __clz(__rbit64(v42)) + (v32 << 6);
    if (!v24[2]) {
      goto LABEL_47;
    }
  }
LABEL_41:
  swift_release();
  swift_release();
  id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
  v57[0] = v8;
  unsigned int v48 = objc_msgSend(v55, sel_rangeOfUnit_startDate_interval_forDate_, v33, v57, v58, v47);

  id v49 = v57[0];
  if (v48)
  {
    if (v49)
    {
      objc_msgSend(v49, sel_timeIntervalSinceReferenceDate);
      uint64_t v54 = v53;

      Swift::Double v51 = v58[0];
      if (v58[0] < 0.0) {
        goto LABEL_54;
      }
      *(void *)uint64_t v56 = v54;
      *(Swift::Double *)(v56 + 8) = v51;
      *(unsigned char *)(v56 + 16) = 0;
    }
    else
    {
      *(void *)uint64_t v56 = 0;
      *(void *)(v56 + 8) = 0;
      *(unsigned char *)(v56 + 16) = 1;
    }
  }
  else
  {

    *(void *)uint64_t v56 = 0;
    *(void *)(v56 + 8) = 0;
    *(unsigned char *)(v56 + 16) = 1;
  }
  result.value.duration = v52;
  result.value.start._time = v51;
  result.is_nil = v50;
  return result;
}

Swift::Int_optional __swiftcall _CalendarBridged.ordinality(of:in:for:)(Foundation::Calendar::Component of, Foundation::Calendar::Component in, Foundation::Date a3)
{
  Swift::UInt v5 = *(unsigned __int8 *)of;
  Swift::UInt v6 = *(unsigned __int8 *)in;
  double v7 = *v3;
  id v8 = *(void **)(v4 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Calendar.Component>);
  uint64_t v9 = static _SetStorage.allocate(capacity:)();
  uint64_t v10 = v9 + 56;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  unint64_t v11 = Hasher._finalize()();
  uint64_t v13 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v14 = v11 & ~v13;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v9 + 56 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  uint64_t v18 = *(void *)(v9 + 48);
  if (((1 << v14) & v16) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v18 + v14) == v5) {
    goto LABEL_12;
  }
  uint64_t v19 = ~v13;
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v18 + v14) == v5) {
    goto LABEL_12;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  if ((v16 & (1 << v14)) == 0) {
    goto LABEL_10;
  }
  if (*(unsigned __int8 *)(v18 + v14) == v5) {
    goto LABEL_12;
  }
  unint64_t v14 = (v14 + 1) & v19;
  unint64_t v15 = v14 >> 6;
  uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
  uint64_t v17 = 1 << v14;
  if ((v16 & (1 << v14)) != 0)
  {
    while (*(unsigned __int8 *)(v18 + v14) != v5)
    {
      unint64_t v14 = (v14 + 1) & v19;
      unint64_t v15 = v14 >> 6;
      uint64_t v16 = *(void *)(v10 + 8 * (v14 >> 6));
      uint64_t v17 = 1 << v14;
      if ((v16 & (1 << v14)) == 0) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    *(void *)(v10 + 8 * v15) = v17 | v16;
    *(unsigned char *)(v18 + v14) = v5;
    uint64_t v20 = *(void *)(v9 + 16);
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_100;
    }
    *(void *)(v9 + 16) = v22;
  }
LABEL_12:
  Swift::UInt v77 = v6;
  id v76 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
  int v23 = (void *)v11;
  uint64_t v24 = 0;
  unint64_t v25 = v11 + 64;
  do
  {
    int v26 = outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 32];
    if (v26 == 18) {
      break;
    }
    uint64_t v27 = *(void *)&outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 40];
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.ordinality(of:in:for:)[v24 + 32]);
    if (v12) {
      goto LABEL_94;
    }
    *(void *)(v25 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(unsigned char *)(v23[6] + v11) = v26;
    *(void *)(v23[7] + 8 * v11) = v27;
    uint64_t v28 = v23[2];
    BOOL v21 = __OFADD__(v28, 1);
    uint64_t v29 = v28 + 1;
    if (v21) {
      goto LABEL_95;
    }
    v23[2] = v29;
    v24 += 16;
  }
  while (v24 != 256);
  int64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v33 = *(void *)(v9 + 56);
  uint64_t v34 = -1;
  if (v32 < 64) {
    uint64_t v34 = ~(-1 << v32);
  }
  unint64_t v35 = v34 & v33;
  int64_t v36 = (unint64_t)(v32 + 63) >> 6;
  if ((v34 & v33) == 0) {
    goto LABEL_22;
  }
LABEL_20:
  unint64_t v37 = __clz(__rbit64(v35));
  v35 &= v35 - 1;
  unint64_t v38 = v37 | (v30 << 6);
  if (v23[2])
  {
    while (1)
    {
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v9 + 48) + v38));
      if (!v12) {
        goto LABEL_89;
      }
      uint64_t v42 = *(void *)(v23[7] + 8 * v11);
      if ((v42 & ~v31) == 0) {
        uint64_t v42 = 0;
      }
      v31 |= v42;
      if (v35) {
        goto LABEL_20;
      }
LABEL_22:
      int64_t v39 = v30 + 1;
      if (__OFADD__(v30, 1)) {
        goto LABEL_92;
      }
      if (v39 >= v36) {
        break;
      }
      unint64_t v40 = *(void *)(v10 + 8 * v39);
      ++v30;
      if (!v40)
      {
        int64_t v30 = v39 + 1;
        if (v39 + 1 >= v36) {
          break;
        }
        unint64_t v40 = *(void *)(v10 + 8 * v30);
        if (!v40)
        {
          int64_t v30 = v39 + 2;
          if (v39 + 2 >= v36) {
            break;
          }
          unint64_t v40 = *(void *)(v10 + 8 * v30);
          if (!v40)
          {
            int64_t v30 = v39 + 3;
            if (v39 + 3 >= v36) {
              break;
            }
            unint64_t v40 = *(void *)(v10 + 8 * v30);
            if (!v40)
            {
              int64_t v41 = v39 + 4;
              if (v41 >= v36) {
                break;
              }
              unint64_t v40 = *(void *)(v10 + 8 * v41);
              if (!v40)
              {
                while (1)
                {
                  int64_t v30 = v41 + 1;
                  if (__OFADD__(v41, 1)) {
                    goto LABEL_98;
                  }
                  if (v30 >= v36) {
                    goto LABEL_43;
                  }
                  unint64_t v40 = *(void *)(v10 + 8 * v30);
                  ++v41;
                  if (v40) {
                    goto LABEL_37;
                  }
                }
              }
              int64_t v30 = v41;
            }
          }
        }
      }
LABEL_37:
      unint64_t v35 = (v40 - 1) & v40;
      unint64_t v38 = __clz(__rbit64(v40)) + (v30 << 6);
      if (!v23[2]) {
        goto LABEL_88;
      }
    }
LABEL_43:
    swift_release();
    swift_release();
    uint64_t v43 = static _SetStorage.allocate(capacity:)();
    uint64_t v44 = v43 + 56;
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v77);
    unint64_t v11 = Hasher._finalize()();
    uint64_t v45 = -1 << *(unsigned char *)(v43 + 32);
    unint64_t v46 = v11 & ~v45;
    unint64_t v47 = v46 >> 6;
    uint64_t v48 = *(void *)(v43 + 56 + 8 * (v46 >> 6));
    uint64_t v49 = 1 << v46;
    uint64_t v50 = *(void *)(v43 + 48);
    if (((1 << v46) & v48) == 0) {
      goto LABEL_52;
    }
    if (*(unsigned __int8 *)(v50 + v46) == v77) {
      goto LABEL_54;
    }
    uint64_t v51 = ~v45;
    unint64_t v46 = (v46 + 1) & v51;
    unint64_t v47 = v46 >> 6;
    uint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
    uint64_t v49 = 1 << v46;
    if ((v48 & (1 << v46)) == 0) {
      goto LABEL_52;
    }
    if (*(unsigned __int8 *)(v50 + v46) == v77) {
      goto LABEL_54;
    }
    unint64_t v46 = (v46 + 1) & v51;
    unint64_t v47 = v46 >> 6;
    uint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
    uint64_t v49 = 1 << v46;
    if ((v48 & (1 << v46)) == 0) {
      goto LABEL_52;
    }
    if (*(unsigned __int8 *)(v50 + v46) == v77) {
      goto LABEL_54;
    }
    unint64_t v46 = (v46 + 1) & v51;
    unint64_t v47 = v46 >> 6;
    uint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
    uint64_t v49 = 1 << v46;
    if ((v48 & (1 << v46)) != 0)
    {
      while (*(unsigned __int8 *)(v50 + v46) != v77)
      {
        unint64_t v46 = (v46 + 1) & v51;
        unint64_t v47 = v46 >> 6;
        uint64_t v48 = *(void *)(v44 + 8 * (v46 >> 6));
        uint64_t v49 = 1 << v46;
        if ((v48 & (1 << v46)) == 0) {
          goto LABEL_52;
        }
      }
    }
    else
    {
LABEL_52:
      *(void *)(v44 + 8 * v47) = v49 | v48;
      *(unsigned char *)(v50 + v46) = v77;
      uint64_t v52 = *(void *)(v43 + 16);
      BOOL v21 = __OFADD__(v52, 1);
      uint64_t v53 = v52 + 1;
      if (v21) {
        goto LABEL_101;
      }
      *(void *)(v43 + 16) = v53;
    }
LABEL_54:
    unint64_t v11 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v54 = (void *)v11;
    uint64_t v55 = 0;
    unint64_t v56 = v11 + 64;
    do
    {
      int v57 = outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 32];
      if (v57 == 18) {
        break;
      }
      uint64_t v58 = *(void *)&outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 40];
      unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.ordinality(of:in:for:)[v55 + 32]);
      if (v12) {
        goto LABEL_96;
      }
      *(void *)(v56 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(unsigned char *)(v54[6] + v11) = v57;
      *(void *)(v54[7] + 8 * v11) = v58;
      uint64_t v59 = v54[2];
      BOOL v21 = __OFADD__(v59, 1);
      uint64_t v60 = v59 + 1;
      if (v21) {
        goto LABEL_97;
      }
      v54[2] = v60;
      v55 += 16;
    }
    while (v55 != 256);
    int64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 1 << *(unsigned char *)(v43 + 32);
    uint64_t v64 = *(void *)(v43 + 56);
    uint64_t v65 = -1;
    if (v63 < 64) {
      uint64_t v65 = ~(-1 << v63);
    }
    unint64_t v66 = v65 & v64;
    int64_t v67 = (unint64_t)(v63 + 63) >> 6;
    if ((v65 & v64) == 0) {
      goto LABEL_64;
    }
LABEL_62:
    unint64_t v68 = __clz(__rbit64(v66));
    v66 &= v66 - 1;
    unint64_t v69 = v68 | (v61 << 6);
    if (v54[2])
    {
      while (1)
      {
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v43 + 48) + v69));
        if (!v12) {
          goto LABEL_91;
        }
        uint64_t v73 = *(void *)(v54[7] + 8 * v11);
        if ((v73 & ~v62) == 0) {
          uint64_t v73 = 0;
        }
        v62 |= v73;
        if (v66) {
          goto LABEL_62;
        }
LABEL_64:
        int64_t v70 = v61 + 1;
        if (__OFADD__(v61, 1)) {
          goto LABEL_93;
        }
        if (v70 >= v67)
        {
LABEL_85:
          swift_release();
          swift_release();
          id v74 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
          id v75 = objc_msgSend(v76, sel_ordinalityOfUnit_inUnit_forDate_, v31, v62, v74);

          Swift::Bool v12 = v75 == (id)0x7FFFFFFFFFFFFFFFLL;
          if (v75 == (id)0x7FFFFFFFFFFFFFFFLL) {
            unint64_t v11 = 0;
          }
          else {
            unint64_t v11 = (unint64_t)v75;
          }
          goto LABEL_102;
        }
        unint64_t v71 = *(void *)(v44 + 8 * v70);
        ++v61;
        if (!v71)
        {
          int64_t v61 = v70 + 1;
          if (v70 + 1 >= v67) {
            goto LABEL_85;
          }
          unint64_t v71 = *(void *)(v44 + 8 * v61);
          if (!v71)
          {
            int64_t v61 = v70 + 2;
            if (v70 + 2 >= v67) {
              goto LABEL_85;
            }
            unint64_t v71 = *(void *)(v44 + 8 * v61);
            if (!v71)
            {
              int64_t v61 = v70 + 3;
              if (v70 + 3 >= v67) {
                goto LABEL_85;
              }
              unint64_t v71 = *(void *)(v44 + 8 * v61);
              if (!v71)
              {
                int64_t v72 = v70 + 4;
                if (v72 >= v67) {
                  goto LABEL_85;
                }
                unint64_t v71 = *(void *)(v44 + 8 * v72);
                if (!v71)
                {
                  while (1)
                  {
                    int64_t v61 = v72 + 1;
                    if (__OFADD__(v72, 1)) {
                      goto LABEL_99;
                    }
                    if (v61 >= v67) {
                      goto LABEL_85;
                    }
                    unint64_t v71 = *(void *)(v44 + 8 * v61);
                    ++v72;
                    if (v71) {
                      goto LABEL_79;
                    }
                  }
                }
                int64_t v61 = v72;
              }
            }
          }
        }
LABEL_79:
        unint64_t v66 = (v71 - 1) & v71;
        unint64_t v69 = __clz(__rbit64(v71)) + (v61 << 6);
        if (!v54[2]) {
          goto LABEL_90;
        }
      }
    }
    goto LABEL_90;
  }
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  __break(1u);
LABEL_102:
  result.value = v11;
  result.is_nil = v12;
  return result;
}

void _CalendarBridged.date(byAdding:to:wrappingComponents:)(void *__src@<X0>, double *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  memcpy(v15, __src, sizeof(v15));
  double v8 = *a2;
  uint64_t v9 = *(void **)(v4 + 16);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v8);
  id v12 = objc_msgSend(v9, sel_dateByAddingComponents_toDate_options_, isa, v11, a3 & 1);

  if (v12)
  {
    objc_msgSend(v12, sel_timeIntervalSinceReferenceDate);
    uint64_t v14 = v13;
  }
  else
  {
    uint64_t v14 = 0;
  }
  *(void *)a4 = v14;
  *(unsigned char *)(a4 + 8) = v12 == 0;
}

void _CalendarBridged.date(from:)(void *__src@<X0>, uint64_t a2@<X8>)
{
  memcpy(v9, __src, sizeof(v9));
  uint64_t v4 = *(void **)(v2 + 16);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  id v6 = objc_msgSend(v4, sel_dateFromComponents_, isa);

  if (v6)
  {
    objc_msgSend(v6, sel_timeIntervalSinceReferenceDate);
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)a2 = v8;
  *(unsigned char *)(a2 + 8) = v6 == 0;
}

unint64_t _CalendarBridged.dateComponents(_:from:)@<X0>(void *a1@<X0>, double *a2@<X1>, void *a3@<X8>)
{
  double v5 = *a2;
  id v6 = *(void **)(v3 + 16);
  *(void *)&__dst[0] = *a1;
  uint64_t v7 = Calendar.ComponentSet.set.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = (void *)result;
  uint64_t v10 = 0;
  unint64_t v11 = result + 64;
  do
  {
    int v12 = outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 32];
    if (v12 == 18) {
      break;
    }
    uint64_t v13 = *(void *)&outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 40];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:)[v10 + 32]);
    if (v14) {
      goto LABEL_38;
    }
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v9[6] + result) = v12;
    *(void *)(v9[7] + 8 * result) = v13;
    uint64_t v15 = v9[2];
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_39;
    }
    v9[2] = v17;
    v10 += 16;
  }
  while (v10 != 256);
  int64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v7 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & *(void *)(v7 + 56);
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  if (!v23) {
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v25 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v26 = v25 | (v18 << 6);
  if (v9[2])
  {
    while (1)
    {
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v7 + 48) + v26));
      if ((v30 & 1) == 0) {
        break;
      }
      uint64_t v31 = *(void *)(v9[7] + 8 * result);
      if ((v31 & ~v19) == 0) {
        uint64_t v31 = 0;
      }
      v19 |= v31;
      if (v23) {
        goto LABEL_9;
      }
LABEL_11:
      int64_t v27 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_37;
      }
      if (v27 >= v24)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        swift_release();
        id v32 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v5);
        id v33 = objc_msgSend(v6, sel_components_fromDate_, v19, v32);

        if (v33)
        {
          __dst[0] = 0uLL;
          __src[0] = 0uLL;
          id v34 = v33;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)__src, 0, 1, 0, 1, 0, 1, (uint64_t)v37, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
          destructiveProjectEnumData for PredicateCodableError(v37, v35);
          outlined init with take of DateComponents?((uint64_t)v37, (uint64_t)v36);
          static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v34, (uint64_t)v36);
          outlined init with take of DateComponents?((uint64_t)v36, (uint64_t)v38);
          outlined init with take of DateComponents?((uint64_t)v38, (uint64_t)__src);
          unint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
          if (result == 1) {
            goto LABEL_41;
          }

          memcpy(__dst, __src, 0x11AuLL);
        }
        else
        {
          __src[0] = 0uLL;
          v38[1] = 0;
          v38[0] = 0;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v38, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
        }
        return (unint64_t)memcpy(a3, __dst, 0x11AuLL);
      }
      unint64_t v28 = *(void *)(v20 + 8 * v27);
      ++v18;
      if (!v28)
      {
        int64_t v18 = v27 + 1;
        if (v27 + 1 >= v24) {
          goto LABEL_30;
        }
        unint64_t v28 = *(void *)(v20 + 8 * v18);
        if (!v28)
        {
          int64_t v18 = v27 + 2;
          if (v27 + 2 >= v24) {
            goto LABEL_30;
          }
          unint64_t v28 = *(void *)(v20 + 8 * v18);
          if (!v28)
          {
            int64_t v29 = v27 + 3;
            if (v29 >= v24) {
              goto LABEL_30;
            }
            unint64_t v28 = *(void *)(v20 + 8 * v29);
            if (!v28)
            {
              while (1)
              {
                int64_t v18 = v29 + 1;
                if (__OFADD__(v29, 1)) {
                  goto LABEL_40;
                }
                if (v18 >= v24) {
                  goto LABEL_30;
                }
                unint64_t v28 = *(void *)(v20 + 8 * v18);
                ++v29;
                if (v28) {
                  goto LABEL_24;
                }
              }
            }
            int64_t v18 = v29;
          }
        }
      }
LABEL_24:
      unint64_t v23 = (v28 - 1) & v28;
      unint64_t v26 = __clz(__rbit64(v28)) + (v18 << 6);
      if (!v9[2]) {
        goto LABEL_35;
      }
    }
  }
  else
  {
LABEL_35:
    __break(1u);
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

void _CalendarBridged.dateComponents(_:from:in:)(double *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  double v5 = *a1;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void **)(v3 + 16);
  id v8 = objc_msgSend(v7, sel_timeZone);
  if (v8)
  {
    uint64_t v9 = v8;
    id v74 = a3;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v10 = swift_dynamicCastClass();
    if (v10)
    {
      uint64_t v73 = *(void *)(v10 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      *(void *)(swift_allocObject() + 16) = v9;
      uint64_t v73 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, 255, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    }
    uint64_t ObjectType = swift_getObjectType();
    int v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 120))(ObjectType, v6);
    objc_msgSend(v7, sel_setTimeZone_, v12);

    uint64_t v13 = unk_1ECA39600;
    if ((unk_1ECA39600 & ~qword_1ECA395F8) == 0) {
      uint64_t v13 = 0;
    }
    uint64_t v14 = v13 | qword_1ECA395F8;
    uint64_t v15 = qword_1ECA39608;
    if ((qword_1ECA39608 & ~v14) == 0) {
      uint64_t v15 = 0;
    }
    uint64_t v16 = v15 | v14;
    if ((unk_1ECA39610 & ~v16) != 0) {
      uint64_t v17 = unk_1ECA39610;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v18 = v17 | v16;
    uint64_t v19 = qword_1ECA39618;
    if ((qword_1ECA39618 & ~v18) == 0) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = v19 | v18;
    if ((unk_1ECA39620 & ~v20) != 0) {
      uint64_t v21 = unk_1ECA39620;
    }
    else {
      uint64_t v21 = 0;
    }
    uint64_t v22 = v21 | v20;
    uint64_t v23 = qword_1ECA39628;
    if ((qword_1ECA39628 & ~v22) == 0) {
      uint64_t v23 = 0;
    }
    uint64_t v24 = v23 | v22;
    if ((unk_1ECA39630 & ~v24) != 0) {
      uint64_t v25 = unk_1ECA39630;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = v25 | v24;
    uint64_t v27 = qword_1ECA39638;
    if ((qword_1ECA39638 & ~v26) == 0) {
      uint64_t v27 = 0;
    }
    uint64_t v28 = v27 | v26;
    if ((unk_1ECA39640 & ~v28) != 0) {
      uint64_t v29 = unk_1ECA39640;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = v29 | v28;
    uint64_t v31 = qword_1ECA39648;
    if ((qword_1ECA39648 & ~v30) == 0) {
      uint64_t v31 = 0;
    }
    uint64_t v32 = v31 | v30;
    if ((unk_1ECA39650 & ~v32) != 0) {
      uint64_t v33 = unk_1ECA39650;
    }
    else {
      uint64_t v33 = 0;
    }
    uint64_t v34 = v33 | v32;
    uint64_t v35 = qword_1ECA39658;
    if ((qword_1ECA39658 & ~v34) == 0) {
      uint64_t v35 = 0;
    }
    uint64_t v36 = v35 | v34;
    if ((unk_1ECA39660 & ~v36) != 0) {
      uint64_t v37 = unk_1ECA39660;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = v37 | v36;
    uint64_t v40 = qword_1ECA39668;
    uint64_t v39 = unk_1ECA39670;
    if ((qword_1ECA39668 & ~v38) == 0) {
      uint64_t v40 = 0;
    }
    uint64_t v41 = v40 | v38;
    if ((unk_1ECA39670 & ~v41) == 0) {
      uint64_t v39 = 0;
    }
    *(void *)&__dst[0] = v39 | v41;
    uint64_t v42 = Calendar.ComponentSet.set.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
    uint64_t v43 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = 0; i != 256; i += 16)
    {
      int v45 = outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 32];
      if (v45 == 18) {
        break;
      }
      uint64_t v46 = *(void *)&outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 40];
      unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #1 of _CalendarBridged.dateComponents(_:from:in:)[i + 32]);
      if (v48) {
        goto LABEL_80;
      }
      *(void *)((char *)v43 + ((v47 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v47;
      *(unsigned char *)(v43[6] + v47) = v45;
      *(void *)(v43[7] + 8 * v47) = v46;
      uint64_t v49 = v43[2];
      BOOL v50 = __OFADD__(v49, 1);
      uint64_t v51 = v49 + 1;
      if (v50) {
        goto LABEL_81;
      }
      v43[2] = v51;
    }
    int64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = v42 + 56;
    uint64_t v55 = 1 << *(unsigned char *)(v42 + 32);
    uint64_t v56 = -1;
    if (v55 < 64) {
      uint64_t v56 = ~(-1 << v55);
    }
    unint64_t v57 = v56 & *(void *)(v42 + 56);
    int64_t v58 = (unint64_t)(v55 + 63) >> 6;
    if (!v57) {
      goto LABEL_51;
    }
LABEL_49:
    unint64_t v59 = __clz(__rbit64(v57));
    v57 &= v57 - 1;
    unint64_t v60 = v59 | (v52 << 6);
    if (v43[2])
    {
      while (1)
      {
        uint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v42 + 48) + v60));
        if ((v65 & 1) == 0) {
          break;
        }
        uint64_t v66 = *(void *)(v43[7] + 8 * v64);
        if ((v66 & ~v53) == 0) {
          uint64_t v66 = 0;
        }
        v53 |= v66;
        if (v57) {
          goto LABEL_49;
        }
LABEL_51:
        int64_t v61 = v52 + 1;
        if (__OFADD__(v52, 1)) {
          goto LABEL_79;
        }
        if (v61 >= v58)
        {
LABEL_72:
          swift_bridgeObjectRelease();
          swift_release();
          id v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v5);
          id v68 = objc_msgSend(v7, sel_components_fromDate_, v53, v67);

          if (v68)
          {
            __dst[0] = 0uLL;
            __src[0] = 0uLL;
            id v69 = v68;
            DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)__src, 0, 1, 0, 1, 0, 1, (uint64_t)v76, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1);
            destructiveProjectEnumData for PredicateCodableError(v76, v70);
            outlined init with take of DateComponents?((uint64_t)v76, (uint64_t)v75);
            static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v69, (uint64_t)v75);
            outlined init with take of DateComponents?((uint64_t)v75, (uint64_t)v77);
            outlined init with take of DateComponents?((uint64_t)v77, (uint64_t)__src);
            if (_s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src) == 1) {
              goto LABEL_84;
            }

            memcpy(__dst, __src, 0x11AuLL);
          }
          else
          {
            __src[0] = 0uLL;
            v77[1] = 0;
            v77[0] = 0;
            DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v77, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1,
              0,
              1);
          }
          memcpy(v74, __dst, 0x11AuLL);
          uint64_t v71 = swift_getObjectType();
          int64_t v72 = (void *)(*(uint64_t (**)(uint64_t))(v73 + 120))(v71);
          objc_msgSend(v7, sel_setTimeZone_, v72);
          swift_unknownObjectRelease();

          return;
        }
        unint64_t v62 = *(void *)(v54 + 8 * v61);
        ++v52;
        if (!v62)
        {
          int64_t v52 = v61 + 1;
          if (v61 + 1 >= v58) {
            goto LABEL_72;
          }
          unint64_t v62 = *(void *)(v54 + 8 * v52);
          if (!v62)
          {
            int64_t v52 = v61 + 2;
            if (v61 + 2 >= v58) {
              goto LABEL_72;
            }
            unint64_t v62 = *(void *)(v54 + 8 * v52);
            if (!v62)
            {
              int64_t v52 = v61 + 3;
              if (v61 + 3 >= v58) {
                goto LABEL_72;
              }
              unint64_t v62 = *(void *)(v54 + 8 * v52);
              if (!v62)
              {
                int64_t v63 = v61 + 4;
                if (v63 >= v58) {
                  goto LABEL_72;
                }
                unint64_t v62 = *(void *)(v54 + 8 * v63);
                if (!v62)
                {
                  while (1)
                  {
                    int64_t v52 = v63 + 1;
                    if (__OFADD__(v63, 1)) {
                      goto LABEL_82;
                    }
                    if (v52 >= v58) {
                      goto LABEL_72;
                    }
                    unint64_t v62 = *(void *)(v54 + 8 * v52);
                    ++v63;
                    if (v62) {
                      goto LABEL_66;
                    }
                  }
                }
                int64_t v52 = v63;
              }
            }
          }
        }
LABEL_66:
        unint64_t v57 = (v62 - 1) & v62;
        unint64_t v60 = __clz(__rbit64(v62)) + (v52 << 6);
        if (!v43[2]) {
          goto LABEL_77;
        }
      }
    }
    else
    {
LABEL_77:
      __break(1u);
    }
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
  }
  __break(1u);
LABEL_84:
  __break(1u);
}

unint64_t _CalendarBridged.dateComponents(_:from:to:)@<X0>(void *a1@<X0>, double *a2@<X1>, double *a3@<X2>, void *a4@<X8>)
{
  double v6 = *a2;
  double v7 = *a3;
  id v8 = *(void **)(v4 + 16);
  *(void *)&__dst[0] = *a1;
  uint64_t v9 = Calendar.ComponentSet.set.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Calendar.Component, NSCalendarUnit>);
  unint64_t result = static _DictionaryStorage.allocate(capacity:)();
  unint64_t v11 = (void *)result;
  uint64_t v12 = 0;
  unint64_t v13 = result + 64;
  do
  {
    int v14 = outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 32];
    if (v14 == 18) {
      break;
    }
    uint64_t v15 = *(void *)&outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 40];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(outlined read-only object #0 of _CalendarBridged.dateComponents(_:from:to:)[v12 + 32]);
    if (v16) {
      goto LABEL_40;
    }
    *(void *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(unsigned char *)(v11[6] + result) = v14;
    *(void *)(v11[7] + 8 * result) = v15;
    uint64_t v17 = v11[2];
    BOOL v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_41;
    }
    v11[2] = v19;
    v12 += 16;
  }
  while (v12 != 256);
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = v9 + 56;
  uint64_t v23 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & *(void *)(v9 + 56);
  int64_t v26 = (unint64_t)(v23 + 63) >> 6;
  if (!v25) {
    goto LABEL_11;
  }
LABEL_9:
  unint64_t v27 = __clz(__rbit64(v25));
  v25 &= v25 - 1;
  unint64_t v28 = v27 | (v20 << 6);
  if (v11[2])
  {
    while (1)
    {
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned __int8 *)(*(void *)(v9 + 48) + v28));
      if ((v32 & 1) == 0) {
        break;
      }
      uint64_t v33 = *(void *)(v11[7] + 8 * result);
      if ((v33 & ~v21) == 0) {
        uint64_t v33 = 0;
      }
      v21 |= v33;
      if (v25) {
        goto LABEL_9;
      }
LABEL_11:
      int64_t v29 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        goto LABEL_39;
      }
      if (v29 >= v26)
      {
LABEL_32:
        swift_bridgeObjectRelease();
        swift_release();
        id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v6);
        id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v7);
        id v36 = objc_msgSend(v8, sel_components_fromDate_toDate_options_, v21, v34, v35, 0);

        if (v36)
        {
          __dst[0] = 0uLL;
          __src[0] = 0uLL;
          id v37 = v36;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__dst, (uint64_t *)__src, 0, 1, 0, 1, 0, 1, (uint64_t)v40, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
          destructiveProjectEnumData for PredicateCodableError(v40, v38);
          outlined init with take of DateComponents?((uint64_t)v40, (uint64_t)v39);
          static DateComponents._conditionallyBridgeFromObjectiveC(_:result:)(v37, (uint64_t)v39);
          outlined init with take of DateComponents?((uint64_t)v39, (uint64_t)v41);
          outlined init with take of DateComponents?((uint64_t)v41, (uint64_t)__src);
          unint64_t result = _s10Foundation13URLComponentsV01_B0VSgWOg((uint64_t *)__src);
          if (result == 1) {
            goto LABEL_43;
          }

          memcpy(__dst, __src, 0x11AuLL);
        }
        else
        {
          __src[0] = 0uLL;
          v41[1] = 0;
          v41[0] = 0;
          DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)(__src, v41, 0, 1, 0, 1, 0, 1, (uint64_t)__dst, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1,
            0,
            1);
        }
        return (unint64_t)memcpy(a4, __dst, 0x11AuLL);
      }
      unint64_t v30 = *(void *)(v22 + 8 * v29);
      ++v20;
      if (!v30)
      {
        int64_t v20 = v29 + 1;
        if (v29 + 1 >= v26) {
          goto LABEL_32;
        }
        unint64_t v30 = *(void *)(v22 + 8 * v20);
        if (!v30)
        {
          int64_t v20 = v29 + 2;
          if (v29 + 2 >= v26) {
            goto LABEL_32;
          }
          unint64_t v30 = *(void *)(v22 + 8 * v20);
          if (!v30)
          {
            int64_t v20 = v29 + 3;
            if (v29 + 3 >= v26) {
              goto LABEL_32;
            }
            unint64_t v30 = *(void *)(v22 + 8 * v20);
            if (!v30)
            {
              int64_t v31 = v29 + 4;
              if (v31 >= v26) {
                goto LABEL_32;
              }
              unint64_t v30 = *(void *)(v22 + 8 * v31);
              if (!v30)
              {
                while (1)
                {
                  int64_t v20 = v31 + 1;
                  if (__OFADD__(v31, 1)) {
                    goto LABEL_42;
                  }
                  if (v20 >= v26) {
                    goto LABEL_32;
                  }
                  unint64_t v30 = *(void *)(v22 + 8 * v20);
                  ++v31;
                  if (v30) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v20 = v31;
            }
          }
        }
      }
LABEL_26:
      unint64_t v25 = (v30 - 1) & v30;
      unint64_t v28 = __clz(__rbit64(v30)) + (v20 << 6);
      if (!v11[2]) {
        goto LABEL_37;
      }
    }
  }
  else
  {
LABEL_37:
    __break(1u);
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _CalendarBridged()
{
  return self;
}

void protocol witness for _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:) in conformance _CalendarBridged()
{
}

void protocol witness for _CalendarProtocol.identifier.getter in conformance _CalendarBridged(unsigned char *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_calendarIdentifier);
  static Calendar._fromNSCalendarIdentifier(_:)(v3, &v4);

  if (v4 == 16) {
    __break(1u);
  }
  else {
    *a1 = v4;
  }
}

void protocol witness for _CalendarProtocol.timeZone.getter in conformance _CalendarBridged(uint64_t *a1@<X8>)
{
  id v3 = objc_msgSend(*(id *)(v1 + 16), sel_timeZone);
  if (v3)
  {
    char v4 = v3;
    type metadata accessor for _NSSwiftTimeZone();
    uint64_t v5 = swift_dynamicCastClass();
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + OBJC_IVAR____NSSwiftTimeZone_timeZone);
      uint64_t v7 = *(void *)(v5 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
      swift_unknownObjectRetain();
    }
    else
    {
      type metadata accessor for _TimeZoneBridged();
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = v4;
      uint64_t v7 = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _TimeZoneBridged and conformance _TimeZoneBridged, 255, (void (*)(uint64_t))type metadata accessor for _TimeZoneBridged);
    }
    *a1 = v6;
    a1[1] = v7;
  }
  else
  {
    __break(1u);
  }
}

id protocol witness for _CalendarProtocol.firstWeekday.getter in conformance _CalendarBridged()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_firstWeekday);
}

id protocol witness for _CalendarProtocol.minimumDaysInFirstWeek.getter in conformance _CalendarBridged()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_minimumDaysInFirstWeek);
}

uint64_t protocol witness for _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:) in conformance _CalendarBridged(uint64_t *a1, uint64_t *a2, void *a3, char a4, void *a5, char a6)
{
  return _CalendarBridged.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

unint64_t protocol witness for _CalendarProtocol.minimumRange(of:) in conformance _CalendarBridged(unsigned __int8 *a1)
{
  return _CalendarBridged.minimumRange(of:)(a1);
}

unint64_t protocol witness for _CalendarProtocol.maximumRange(of:) in conformance _CalendarBridged(unsigned __int8 *a1)
{
  return _CalendarBridged.maximumRange(of:)(a1);
}

void protocol witness for _CalendarProtocol.range(of:in:for:) in conformance _CalendarBridged(unsigned __int8 *a1, unsigned __int8 *a2, double *a3)
{
}

unint64_t protocol witness for _CalendarProtocol.ordinality(of:in:for:) in conformance _CalendarBridged(Foundation::Calendar::Component a1, Foundation::Calendar::Component a2, double a3)
{
  return (unint64_t)_CalendarBridged.ordinality(of:in:for:)(a1, a2, *(Foundation::Date *)&a3);
}

id protocol witness for _CalendarProtocol.isDateInWeekend(_:) in conformance _CalendarBridged(double *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, *a1);
  id v4 = objc_msgSend(v2, sel_isDateInWeekend_, v3);

  return v4;
}

uint64_t protocol witness for _CalendarProtocol.bridgeToNSCalendar() in conformance _CalendarBridged()
{
  objc_msgSend(*(id *)(v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSCalendar();
  swift_dynamicCast();
  return v2;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _CalendarBridged()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_debugDescription);
  id v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  id v4 = v3;

  v5._countAndFlagsBits = (uint64_t)v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  return 0x2064656764697262;
}

uint64_t instantiation function for generic protocol witness table for _CalendarBridged(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(&lazy protocol witness table cache variable for type _CalendarBridged and conformance _CalendarBridged, a2, (void (*)(uint64_t))type metadata accessor for _CalendarBridged);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t type metadata accessor for NSCalendar()
{
  unint64_t result = lazy cache variable for type metadata for NSCalendar;
  if (!lazy cache variable for type metadata for NSCalendar)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSCalendar);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _CalendarBridged and conformance _CalendarBridged(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Platform()
{
  return &type metadata for Platform;
}

uint64_t one-time initialization function for _cachedUGIDs()
{
  uint64_t v2 = *MEMORY[0x1E4F143B8];
  *(void *)id v1 = 0;
  if (pthread_getugid_np(&v1[1], v1))
  {
    v1[1] = geteuid();
    uint64_t result = getegid();
  }
  else
  {
    uint64_t result = v1[0];
  }
  _cachedUGIDs._0 = v1[1];
  _cachedUGIDs._1 = result;
  return result;
}

uint64_t MeasurementFormatUnitUsage.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6567617375 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys()
{
  return 0x6567617375;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MeasurementFormatUnitUsage<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = MeasurementFormatUnitUsage.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MeasurementFormatUnitUsage<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t MeasurementFormatUnitUsage.encode(to:)(void *a1)
{
  type metadata accessor for MeasurementFormatUnitUsage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v13[-v5];
  char v7 = *v1;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1;
  uint64_t v11 = v10;
  __swift_project_boxed_opaque_existential_1(v9, v8);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v13[31] = v7;
  lazy protocol witness table accessor for type Usage and conformance Usage();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v11);
}

uint64_t type metadata accessor for MeasurementFormatUnitUsage.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Int MeasurementFormatUnitUsage.hashValue.getter()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  Usage.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t MeasurementFormatUnitUsage.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v11 = a2;
  type metadata accessor for MeasurementFormatUnitUsage.CodingKeys();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v10 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v8 = v11;
    lazy protocol witness table accessor for type Usage and conformance Usage();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    unsigned char *v8 = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance MeasurementFormatUnitUsage<A>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return MeasurementFormatUnitUsage.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MeasurementFormatUnitUsage<A>(void *a1)
{
  return MeasurementFormatUnitUsage.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MeasurementFormatUnitUsage<A>()
{
  return Hasher._finalize()();
}

void static MeasurementFormatUnitUsage<>.road.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static MeasurementFormatUnitUsage<>.personHeight.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static MeasurementFormatUnitUsage<>.focalLength.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void static MeasurementFormatUnitUsage<>.food.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static MeasurementFormatUnitUsage<>.personWeight.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static MeasurementFormatUnitUsage<>.liquid.getter(unsigned char *a1@<X8>)
{
  *a1 = 12;
}

unsigned char *storeEnumTagSinglePayload for MeasurementFormatUnitUsage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D65950);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MeasurementFormatUnitUsage.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D65A14);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in MeasurementFormatUnitUsage<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in MeasurementFormatUnitUsage<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in MeasurementFormatUnitUsage<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

void *specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v8 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v9 = swift_allocObject();
    swift_retain();
    id v10 = v8;
    objc_msgSend(v10, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v9 + 16) = v15;
    *(void *)a1 = v9;
    swift_release();
  }
  uint64_t v11 = *(void **)(*(void *)a1 + 16);
  if (a2) {
    id v12 = a2;
  }
  else {
    id v12 = 0;
  }
  id v13 = v11;
  objc_msgSend(v13, *a5, v12);

  return outlined consume of URL?(a2);
}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unsigned int v4 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v5 = swift_allocObject();
    swift_retain();
    id v6 = v4;
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v5 + 16) = v9;
    *(void *)a1 = v5;
    swift_release();
  }
  id v7 = *(id *)(*(void *)a1 + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)_NativeDictionary.bridged()();
  }
  else
  {
    uint64_t v8 = 0;
  }
  objc_msgSend(v7, sel_setAllHTTPHeaderFields_, v8);
  swift_bridgeObjectRelease();
}

uint64_t specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    id v6 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v7 = swift_allocObject();
    swift_retain();
    id v8 = v6;
    objc_msgSend(v8, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v7 + 16) = v11;
    *(void *)a1 = v7;
    swift_release();
  }
  id v9 = *(id *)(*(void *)a1 + 16);
  closure #1 in URLRequest.httpBody.setter(v9, a2, a3);

  return outlined consume of Data?(a2, a3);
}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, void *a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unsigned int v4 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v5 = swift_allocObject();
    swift_retain();
    id v6 = v4;
    objc_msgSend(v6, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v5 + 16) = v7;
    *(void *)a1 = v5;
    swift_release();
  }
  objc_msgSend(*(id *)(*(void *)a1 + 16), sel_setHTTPBodyStream_, a2);
}

void specialized URLRequest._applyMutation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)a1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v11;
    *(void *)a1 = v6;
    swift_release();
  }
  id v8 = *(void **)(*(void *)a1 + 16);
  if (a3) {
    id v9 = (void *)String._bridgeToObjectiveCImpl()();
  }
  else {
    id v9 = 0;
  }
  id v10 = v8;
  objc_msgSend(v10, sel_setCookiePartitionIdentifier_, v9);
  swift_bridgeObjectRelease();
}

void *URLRequest.url.setter(uint64_t a1)
{
  return URLRequest.url.setter(a1, (SEL *)&selRef_setURL_);
}

void *(*URLRequest.url.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = [v3 URL];
  if (v4)
  {
    uint64_t v5 = v4;
    URL.init(reference:)(v4, &v9);

    uint64_t v6 = v9;
    long long v7 = v10;
  }
  else
  {

    uint64_t v6 = 0;
    long long v7 = 0uLL;
  }
  *(void *)a1 = v6;
  *(_OWORD *)(a1 + 8) = v7;
  return URLRequest.url.modify;
}

void *URLRequest.url.modify(uint64_t *a1, char a2)
{
  return URLRequest.url.modify(a1, a2, (SEL *)&selRef_setURL_);
}

id URLRequest.cachePolicy.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_cachePolicy);
}

id (*URLRequest.cachePolicy.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_cachePolicy);
  return URLRequest.cachePolicy.modify;
}

id URLRequest.cachePolicy.modify(uint64_t *a1)
{
  return URLRequest.cachePolicy.setter(*a1);
}

id URLRequest.timeoutInterval.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_timeoutInterval);
}

id (*URLRequest.timeoutInterval.modify(void *a1))(double *a1)
{
  a1[1] = v1;
  objc_msgSend(*(id *)(*(void *)v1 + 16), sel_timeoutInterval);
  *a1 = v3;
  return URLRequest.timeoutInterval.modify;
}

id URLRequest.timeoutInterval.modify(double *a1)
{
  return URLRequest.timeoutInterval.setter(*a1);
}

void URLRequest.mainDocumentURL.getter(uint64_t a1@<X8>)
{
}

void *URLRequest.mainDocumentURL.setter(uint64_t a1)
{
  return URLRequest.url.setter(a1, (SEL *)&selRef_setMainDocumentURL_);
}

void *URLRequest.url.setter(uint64_t a1, SEL *a2)
{
  return specialized URLRequest._applyMutation<A>(_:)(v2, *(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), a2);
}

void *(*URLRequest.mainDocumentURL.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_mainDocumentURL);
  if (v4)
  {
    uint64_t v5 = v4;
    URL.init(reference:)(v4, &v9);

    uint64_t v6 = v9;
    long long v7 = v10;
  }
  else
  {

    uint64_t v6 = 0;
    long long v7 = 0uLL;
  }
  *(void *)a1 = v6;
  *(_OWORD *)(a1 + 8) = v7;
  return URLRequest.mainDocumentURL.modify;
}

void *URLRequest.mainDocumentURL.modify(uint64_t *a1, char a2)
{
  return URLRequest.url.modify(a1, a2, (SEL *)&selRef_setMainDocumentURL_);
}

void *URLRequest.url.modify(uint64_t *a1, char a2, SEL *a3)
{
  id v4 = (void *)*a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  if ((a2 & 1) == 0) {
    return specialized URLRequest._applyMutation<A>(_:)(a1[3], v4, v5, v6, a3);
  }
  outlined copy of URL?(*a1);
  specialized URLRequest._applyMutation<A>(_:)(v7, v4, v5, v6, a3);

  return outlined consume of URL?(v4);
}

id URLRequest.networkServiceType.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_networkServiceType);
}

id URLRequest.networkServiceType.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setNetworkServiceType_);
}

id (*URLRequest.networkServiceType.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_networkServiceType);
  return URLRequest.networkServiceType.modify;
}

id URLRequest.networkServiceType.modify(uint64_t *a1)
{
  return URLRequest.networkServiceType.setter(*a1);
}

id URLRequest.allowsCellularAccess.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsCellularAccess);
}

id URLRequest.allowsCellularAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsCellularAccess_);
}

id (*URLRequest.allowsCellularAccess.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsCellularAccess);
  return URLRequest.allowsCellularAccess.modify;
}

id URLRequest.allowsCellularAccess.modify(uint64_t a1)
{
  return URLRequest.allowsCellularAccess.setter(*(unsigned char *)(a1 + 8));
}

id URLRequest.allowsExpensiveNetworkAccess.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsExpensiveNetworkAccess);
}

id URLRequest.allowsExpensiveNetworkAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsExpensiveNetworkAccess_);
}

id URLRequest.allowsCellularAccess.setter(char a1, SEL *a2)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)v2 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v6 = swift_allocObject();
    swift_retain();
    id v7 = v5;
    objc_msgSend(v7, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v6 + 16) = v9;
    *(void *)uint64_t v2 = v6;
    swift_release();
  }
  return objc_msgSend(*(id *)(*(void *)v2 + 16), *a2, a1 & 1);
}

id (*URLRequest.allowsExpensiveNetworkAccess.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsExpensiveNetworkAccess);
  return URLRequest.allowsExpensiveNetworkAccess.modify;
}

id URLRequest.allowsExpensiveNetworkAccess.modify(uint64_t a1)
{
  return URLRequest.allowsExpensiveNetworkAccess.setter(*(unsigned char *)(a1 + 8));
}

id URLRequest.allowsConstrainedNetworkAccess.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsConstrainedNetworkAccess);
}

id URLRequest.allowsConstrainedNetworkAccess.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsConstrainedNetworkAccess_);
}

id (*URLRequest.allowsConstrainedNetworkAccess.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsConstrainedNetworkAccess);
  return URLRequest.allowsConstrainedNetworkAccess.modify;
}

id URLRequest.allowsConstrainedNetworkAccess.modify(uint64_t a1)
{
  return URLRequest.allowsConstrainedNetworkAccess.setter(*(unsigned char *)(a1 + 8));
}

id URLRequest.assumesHTTP3Capable.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_assumesHTTP3Capable);
}

id URLRequest.assumesHTTP3Capable.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAssumesHTTP3Capable_);
}

id (*URLRequest.assumesHTTP3Capable.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_assumesHTTP3Capable);
  return URLRequest.assumesHTTP3Capable.modify;
}

id URLRequest.assumesHTTP3Capable.modify(uint64_t a1)
{
  return URLRequest.assumesHTTP3Capable.setter(*(unsigned char *)(a1 + 8));
}

id URLRequest.attribution.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_attribution);
}

id URLRequest.attribution.setter(uint64_t a1)
{
  return URLRequest.cachePolicy.setter(a1, (SEL *)&selRef_setAttribution_);
}

id (*URLRequest.attribution.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_attribution);
  return URLRequest.attribution.modify;
}

id URLRequest.attribution.modify(uint64_t *a1)
{
  return URLRequest.attribution.setter(*a1);
}

id URLRequest.requiresDNSSECValidation.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_requiresDNSSECValidation);
}

id URLRequest.requiresDNSSECValidation.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setRequiresDNSSECValidation_);
}

id (*URLRequest.requiresDNSSECValidation.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_requiresDNSSECValidation);
  return URLRequest.requiresDNSSECValidation.modify;
}

id URLRequest.requiresDNSSECValidation.modify(uint64_t a1)
{
  return URLRequest.requiresDNSSECValidation.setter(*(unsigned char *)(a1 + 8));
}

id URLRequest.allowsPersistentDNS.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_allowsPersistentDNS);
}

id URLRequest.allowsPersistentDNS.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setAllowsPersistentDNS_);
}

id (*URLRequest.allowsPersistentDNS.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_allowsPersistentDNS);
  return URLRequest.allowsPersistentDNS.modify;
}

id URLRequest.allowsPersistentDNS.modify(uint64_t a1)
{
  return URLRequest.allowsPersistentDNS.setter(*(unsigned char *)(a1 + 8));
}

id URLRequest.httpMethod.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  id v2 = objc_msgSend(v1, sel_HTTPMethod);
  id v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

void key path getter for URLRequest.httpMethod : URLRequest(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = *(void **)(*(void *)a1 + 16);
  swift_retain();
  id v4 = v3;
  id v5 = objc_msgSend(v4, sel_HTTPMethod);
  id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;
  swift_release();

  *a2 = v6;
  a2[1] = v8;
}

uint64_t (*URLRequest.httpMethod.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_HTTPMethod);
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  *a1 = v5;
  a1[1] = v7;
  return URLRequest.httpMethod.modify;
}

uint64_t URLRequest.httpMethod.modify(uint64_t *a1, char a2)
{
  return URLRequest.httpMethod.modify(a1, a2, (void (*)(uint64_t, uint64_t, uint64_t))specialized URLRequest._applyMutation<A>(_:));
}

void key path getter for URLRequest.allHTTPHeaderFields : URLRequest(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *(id *)(*(void *)a1 + 16);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_allHTTPHeaderFields);
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v4);
    swift_release();
  }
  else
  {
    swift_release();

    uint64_t v6 = 0;
  }
  *a2 = v6;
}

uint64_t URLRequest.allHTTPHeaderFields.modify(void *a1)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  *((void *)v3 + 6) = v1;
  id v4 = *(id *)(*(void *)v1 + 16);
  id v5 = objc_msgSend(v4, sel_allHTTPHeaderFields);
  if (!v5)
  {
    uint64_t v7 = 0;
LABEL_40:

    *((void *)v3 + 4) = v7;
    return (uint64_t)URLRequest.allHTTPHeaderFields.modify;
  }
  uint64_t v6 = v5;
  if (MEMORY[0x1E4FBC840] + 8 != MEMORY[0x1E4FBB1A0])
  {
    swift_unknownObjectRetain();
    uint64_t v7 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (!v7)
    {
      id v39 = objc_msgSend(v6, sel_count);
      if (v39)
      {
        uint64_t v40 = (uint64_t)v39;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
        uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
        id v69 = v6;
        uint64_t v41 = (char *)v7[6];
        uint64_t v42 = v7[7];
        swift_retain();
        uint64_t v43 = v42;
        uint64_t v6 = v69;
        uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v41, v43, v69, v40);
        if (result < 0) {
          goto LABEL_44;
        }
        unint64_t v44 = result;
        if (v40 < result) {
          goto LABEL_44;
        }
        v7[2] = result;
        if (result)
        {
          id v68 = v4;
          int v45 = v7 + 8;
          while (2)
          {
            uint64_t v47 = v44--;
            while (((1 << v44) & v45[v44 >> 6]) == 0)
            {
              char v48 = (uint64_t *)(v7[6] + 16 * v44);
              uint64_t v49 = *v48;
              uint64_t v50 = v48[1];
              swift_bridgeObjectRetain();
              unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v50);
              char v53 = v52;
              swift_bridgeObjectRelease();
              if (v53)
              {
                swift_arrayDestroy();
                uint64_t result = swift_arrayDestroy();
                uint64_t v66 = v7[2];
                BOOL v37 = __OFSUB__(v66, 1);
                uint64_t v67 = v66 - 1;
                if (v37) {
                  goto LABEL_42;
                }
                v7[2] = v67;
                break;
              }
              *(void *)((char *)v45 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v51;
              if (v47 <= (uint64_t)v51)
              {
                uint64_t v46 = 16 * v51;
                *(_OWORD *)(v7[6] + v46) = *(_OWORD *)(v7[6] + 16 * v44);
                *(_OWORD *)(v7[7] + v46) = *(_OWORD *)(v7[7] + 16 * v44);
                break;
              }
              if (v51 == v44) {
                break;
              }
              uint64_t v54 = v7[6];
              uint64_t v55 = (uint64_t *)(v54 + 16 * v51);
              uint64_t v56 = (uint64_t *)(v54 + 16 * v44);
              uint64_t v57 = *v55;
              uint64_t v58 = v55[1];
              uint64_t v59 = v56[1];
              *uint64_t v55 = *v56;
              v55[1] = v59;
              *uint64_t v56 = v57;
              v56[1] = v58;
              uint64_t v60 = v7[7];
              int64_t v61 = (uint64_t *)(v60 + 16 * v51);
              unint64_t v62 = (uint64_t *)(v60 + 16 * v44);
              uint64_t v63 = *v61;
              uint64_t v64 = v61[1];
              uint64_t v65 = v62[1];
              uint64_t *v61 = *v62;
              v61[1] = v65;
              *unint64_t v62 = v63;
              v62[1] = v64;
            }
            if (v47 >= 2) {
              continue;
            }
            break;
          }
LABEL_36:
          id v4 = v68;
          uint64_t v6 = v69;
        }
LABEL_37:
        swift_release();
        goto LABEL_39;
      }
LABEL_38:
      uint64_t v7 = (void *)MEMORY[0x1E4FBC868];
    }
LABEL_39:

    goto LABEL_40;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v7) {
    goto LABEL_39;
  }
  id v8 = objc_msgSend(v6, sel_count);
  if (!v8) {
    goto LABEL_38;
  }
  uint64_t v9 = (uint64_t)v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = (void *)static _DictionaryStorage.allocate(capacity:)();
  id v69 = v6;
  long long v10 = (void *)v7[6];
  uint64_t v11 = v7[7];
  swift_retain();
  uint64_t v12 = v11;
  uint64_t v6 = v69;
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v10, v12, v69, v9);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v14 = result;
    if (v9 >= result)
    {
      v7[2] = result;
      if (result)
      {
        id v68 = v4;
        uint64_t v15 = v7 + 8;
        while (2)
        {
          uint64_t v20 = v14--;
          while (1)
          {
            if (((1 << v14) & v15[v14 >> 6]) != 0) {
              goto LABEL_11;
            }
            uint64_t v21 = (uint64_t *)(v7[6] + 16 * v14);
            uint64_t v22 = *v21;
            uint64_t v23 = v21[1];
            swift_bridgeObjectRetain();
            unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v23);
            char v26 = v25;
            swift_bridgeObjectRelease();
            if (v26) {
              break;
            }
            *(void *)((char *)v15 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
            if (v20 <= (uint64_t)v24)
            {
              *(_OWORD *)(v7[6] + 16 * v24) = *(_OWORD *)(v7[6] + 16 * v14);
              uint64_t v16 = v7[7];
              uint64_t v17 = (_OWORD *)(v16 + 32 * v14);
              long long v18 = v17[1];
              uint64_t v19 = (_OWORD *)(v16 + 32 * v24);
              *uint64_t v19 = *v17;
              v19[1] = v18;
              goto LABEL_11;
            }
            if (v24 == v14) {
              goto LABEL_11;
            }
            uint64_t v27 = v7[6];
            unint64_t v28 = (uint64_t *)(v27 + 16 * v24);
            int64_t v29 = (uint64_t *)(v27 + 16 * v14);
            uint64_t v30 = *v28;
            uint64_t v31 = v28[1];
            uint64_t v32 = v29[1];
            uint64_t *v28 = *v29;
            v28[1] = v32;
            *int64_t v29 = v30;
            v29[1] = v31;
            uint64_t v33 = v7[7];
            id v34 = (_OWORD *)(v33 + 32 * v24);
            id v35 = (_OWORD *)(v33 + 32 * v14);
            outlined init with take of Any(v34, v3);
            outlined init with take of Any(v35, v34);
            outlined init with take of Any(v3, v35);
          }
          swift_arrayDestroy();
          uint64_t result = swift_arrayDestroy();
          uint64_t v36 = v7[2];
          BOOL v37 = __OFSUB__(v36, 1);
          uint64_t v38 = v36 - 1;
          if (!v37)
          {
            v7[2] = v38;
LABEL_11:
            if (v20 < 2) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      goto LABEL_37;
    }
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

void URLRequest.allHTTPHeaderFields.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 32);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v4 = v2[6];
      id v5 = *(void **)(*(void *)v4 + 16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
      uint64_t v6 = swift_allocObject();
      swift_retain();
      id v7 = v5;
      objc_msgSend(v7, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
      swift_dynamicCast();
      uint64_t v8 = v2[5];
      swift_release();

      *(void *)(v6 + 16) = v8;
      *(void *)uint64_t v4 = v6;
      swift_release();
    }
    uint64_t v9 = *(void **)(*(void *)v2[6] + 16);
    if (v3)
    {
      swift_bridgeObjectRetain();
      id v10 = v9;
      uint64_t v11 = (void *)_NativeDictionary.bridged()();
    }
    else
    {
      id v20 = v9;
      uint64_t v11 = 0;
    }
    objc_msgSend(v9, sel_setAllHTTPHeaderFields_, v11);

    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v12 = v2[6];
      id v13 = *(void **)(*(void *)v12 + 16);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
      uint64_t v14 = swift_allocObject();
      swift_retain();
      id v15 = v13;
      objc_msgSend(v15, sel_copy);
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
      swift_dynamicCast();
      uint64_t v16 = v2[5];
      swift_release();

      *(void *)(v14 + 16) = v16;
      *(void *)uint64_t v12 = v14;
      swift_release();
    }
    uint64_t v17 = *(void **)(*(void *)v2[6] + 16);
    id v18 = v17;
    if (v3)
    {
      swift_bridgeObjectRetain();
      uint64_t v19 = (void *)_NativeDictionary.bridged()();
    }
    else
    {
      uint64_t v19 = 0;
    }
    objc_msgSend(v17, sel_setAllHTTPHeaderFields_, v19);
  }
  swift_bridgeObjectRelease();

  free(v2);
}

Swift::String_optional __swiftcall URLRequest.value(forHTTPHeaderField:)(Swift::String forHTTPHeaderField)
{
  id v2 = *(void **)(*(void *)v1 + 16);
  uint64_t v3 = String._bridgeToObjectiveCImpl()();
  id v4 = v2;
  id v5 = objc_msgSend(v4, sel_valueForHTTPHeaderField_, v3);
  swift_unknownObjectRelease();
  if (v5)
  {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v9 = (uint64_t)v6;
  id v10 = v8;
  result.value._object = v10;
  result.value._countAndFlagsBits = v9;
  return result;
}

id URLRequest.httpBody.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  id v2 = objc_msgSend(v1, sel_HTTPBody);
  if (v2)
  {
    id v3 = v2;
    id v4 = specialized Data.init(referencing:)(v3);
  }
  else
  {

    return 0;
  }
  return v4;
}

void key path getter for URLRequest.httpBody : URLRequest(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = *(id *)(*(void *)a1 + 16);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_HTTPBody);
  if (v4)
  {
    id v5 = v4;
    id v6 = specialized Data.init(referencing:)(v5);
    unint64_t v8 = v7;
    swift_release();
  }
  else
  {
    swift_release();

    id v6 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  *a2 = v6;
  a2[1] = v8;
}

uint64_t (*URLRequest.httpBody.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_HTTPBody);
  if (v4)
  {
    id v5 = v4;
    id v6 = specialized Data.init(referencing:)(v5);
    unint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    unint64_t v8 = 0xF000000000000000;
  }
  *a1 = v6;
  a1[1] = v8;
  return URLRequest.httpBody.modify;
}

uint64_t URLRequest.httpBody.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  if (a2)
  {
    outlined copy of Data?(*a1, v3);
    specialized URLRequest._applyMutation<A>(_:)(v4, v2, v3);
    return outlined consume of Data?(v2, v3);
  }
  else
  {
    uint64_t v6 = a1[2];
    return specialized URLRequest._applyMutation<A>(_:)(v6, v2, v3);
  }
}

id URLRequest.httpBodyStream.getter()
{
  id v1 = objc_msgSend(*(id *)(*(void *)v0 + 16), sel_HTTPBodyStream);

  return v1;
}

void URLRequest.httpBodyStream.setter(void *a1)
{
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    unint64_t v3 = *(void **)(*(void *)v1 + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
    uint64_t v4 = swift_allocObject();
    swift_retain();
    id v5 = v3;
    objc_msgSend(v5, sel_copy);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
    swift_dynamicCast();

    swift_release();
    *(void *)(v4 + 16) = v6;
    *(void *)uint64_t v1 = v4;
    swift_release();
  }
  objc_msgSend(*(id *)(*(void *)v1 + 16), sel_setHTTPBodyStream_, a1);
}

void (*URLRequest.httpBodyStream.modify(void *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_HTTPBodyStream);
  return URLRequest.httpBodyStream.modify;
}

void URLRequest.httpBodyStream.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (a2)
  {
    id v5 = v2;
    specialized URLRequest._applyMutation<A>(_:)(v3, v2);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    specialized URLRequest._applyMutation<A>(_:)(v4, v2);
  }
}

id URLRequest.httpShouldHandleCookies.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_HTTPShouldHandleCookies);
}

id URLRequest.httpShouldHandleCookies.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setHTTPShouldHandleCookies_);
}

id (*URLRequest.httpShouldHandleCookies.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_HTTPShouldHandleCookies);
  return URLRequest.httpShouldHandleCookies.modify;
}

id URLRequest.httpShouldHandleCookies.modify(uint64_t a1)
{
  return URLRequest.httpShouldHandleCookies.setter(*(unsigned char *)(a1 + 8));
}

id URLRequest.cookiePartitionIdentifier.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  id v2 = objc_msgSend(v1, sel_cookiePartitionIdentifier);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  }
  else
  {

    return 0;
  }
  return v4;
}

void key path getter for URLRequest.cookiePartitionIdentifier : URLRequest(uint64_t a1@<X0>, void *a2@<X8>)
{
  id v3 = *(id *)(*(void *)a1 + 16);
  swift_retain();
  id v4 = objc_msgSend(v3, sel_cookiePartitionIdentifier);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
    swift_release();
  }
  else
  {
    swift_release();

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a2 = v6;
  a2[1] = v8;
}

void URLRequest.cookiePartitionIdentifier.setter(uint64_t a1, uint64_t a2)
{
  specialized URLRequest._applyMutation<A>(_:)(v2, a1, a2);
}

uint64_t (*URLRequest.cookiePartitionIdentifier.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[2] = v1;
  id v3 = *(id *)(*(void *)v1 + 16);
  id v4 = objc_msgSend(v3, sel_cookiePartitionIdentifier);
  if (v4)
  {
    id v5 = v4;
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    uint64_t v8 = v7;
  }
  else
  {

    id v6 = 0;
    uint64_t v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return URLRequest.cookiePartitionIdentifier.modify;
}

uint64_t URLRequest.cookiePartitionIdentifier.modify(uint64_t *a1, char a2)
{
  return URLRequest.httpMethod.modify(a1, a2, specialized URLRequest._applyMutation<A>(_:));
}

uint64_t URLRequest.httpMethod.modify(uint64_t *a1, char a2, void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  if (a2)
  {
    swift_bridgeObjectRetain();
    a3(v5, v4, v3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = a1[2];
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a3)(v7, v4, v3);
  }
}

id URLRequest.httpShouldUsePipelining.getter()
{
  return objc_msgSend(*(id *)(*(void *)v0 + 16), sel_HTTPShouldUsePipelining);
}

id URLRequest.httpShouldUsePipelining.setter(char a1)
{
  return URLRequest.allowsCellularAccess.setter(a1, (SEL *)&selRef_setHTTPShouldUsePipelining_);
}

id (*URLRequest.httpShouldUsePipelining.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = objc_msgSend(*(id *)(*(void *)v1 + 16), sel_HTTPShouldUsePipelining);
  return URLRequest.httpShouldUsePipelining.modify;
}

id URLRequest.httpShouldUsePipelining.modify(uint64_t a1)
{
  return URLRequest.httpShouldUsePipelining.setter(*(unsigned char *)(a1 + 8));
}

void URLRequest.hash(into:)()
{
  uint64_t v1 = *(void **)(*(void *)v0 + 16);
  swift_retain();
  id v2 = v1;
  NSObject.hash(into:)();
  swift_release();
}

id static URLRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(void *)a1 + 16), sel_isEqual_, *(void *)(*(void *)a2 + 16));
}

Swift::Int URLRequest.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance URLRequest()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  id v2 = *(id *)(v1 + 16);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

uint64_t URLRequest.description.getter()
{
  id v1 = *(id *)(*(void *)v0 + 16);
  swift_retain();
  id v2 = [v1 URL];
  if (v2)
  {
    uint64_t v3 = v2;
    URL.init(reference:)(v2, &v7);
    swift_release();

    uint64_t v4 = v7;
    uint64_t v5 = URL.description.getter();

    swift_release();
    swift_release();
  }
  else
  {
    swift_release();

    return 0x6C696E203A6C7275;
  }
  return v5;
}

uint64_t URLRequest.debugDescription.getter()
{
  return URLRequest.description.getter();
}

uint64_t URLRequest.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v115 = *(void *)(v3 - 8);
  uint64_t v116 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v117 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  long long v114 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(label: String?, value: Any)>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1821A65B0;
  *(_OWORD *)(v8 + 32) = xmmword_1821A65C0;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  *(void *)(v8 + 72) = v9;
  id v10 = *(id *)(v7 + 16);
  swift_retain();
  id v11 = [v10 URL];
  if (v11)
  {
    uint64_t v12 = v11;
    URL.init(reference:)(v11, &v118);

    uint64_t v13 = v118;
    long long v14 = v119;
  }
  else
  {

    uint64_t v13 = 0;
    long long v14 = 0uLL;
  }
  *(void *)(v8 + 48) = v13;
  *(_OWORD *)(v8 + 56) = v14;
  swift_release();
  *(_OWORD *)(v8 + 80) = xmmword_1821A65D0;
  id v15 = objc_msgSend(*(id *)(v7 + 16), sel_cachePolicy);
  *(void *)(v8 + 120) = MEMORY[0x1E4FBB808];
  *(void *)(v8 + 96) = v15;
  *(_OWORD *)(v8 + 128) = xmmword_1821A65E0;
  objc_msgSend(*(id *)(v7 + 16), sel_timeoutInterval);
  *(void *)(v8 + 168) = MEMORY[0x1E4FBB3D0];
  *(void *)(v8 + 144) = v16;
  *(_OWORD *)(v8 + 176) = xmmword_1821A65F0;
  *(void *)(v8 + 216) = v9;
  uint64_t v17 = *(void **)(v7 + 16);
  swift_retain();
  id v18 = v17;
  id v19 = objc_msgSend(v18, sel_mainDocumentURL);
  if (v19)
  {
    id v20 = v19;
    URL.init(reference:)(v19, &v118);

    uint64_t v21 = v118;
    long long v22 = v119;
  }
  else
  {

    uint64_t v21 = 0;
    long long v22 = 0uLL;
  }
  *(void *)(v8 + 192) = v21;
  *(_OWORD *)(v8 + 200) = v22;
  swift_release();
  *(void *)(v8 + 224) = 0xD000000000000012;
  *(void *)(v8 + 232) = 0x80000001823AECD0;
  id v23 = objc_msgSend(*(id *)(v7 + 16), sel_networkServiceType);
  type metadata accessor for NSURLRequestNetworkServiceType(0);
  *(void *)(v8 + 240) = v23;
  *(void *)(v8 + 264) = v24;
  *(void *)(v8 + 272) = 0xD000000000000014;
  *(void *)(v8 + 280) = 0x80000001823AECF0;
  unsigned __int8 v25 = objc_msgSend(*(id *)(v7 + 16), sel_allowsCellularAccess);
  *(void *)(v8 + 312) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v8 + 288) = v25;
  *(_OWORD *)(v8 + 320) = xmmword_1821A6600;
  char v26 = *(void **)(v7 + 16);
  swift_retain();
  id v27 = v26;
  id v28 = objc_msgSend(v27, sel_HTTPMethod);
  id v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  uint64_t v31 = v30;
  swift_release();

  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  *(void *)(v8 + 336) = v29;
  *(void *)(v8 + 344) = v31;
  *(void *)(v8 + 360) = v32;
  *(void *)(v8 + 368) = 0xD000000000000013;
  *(void *)(v8 + 376) = 0x80000001823AED10;
  uint64_t v33 = *(void **)(v7 + 16);
  swift_retain();
  id v34 = v33;
  id v35 = objc_msgSend(v34, sel_allHTTPHeaderFields);
  if (!v35)
  {
    swift_release();

    uint64_t v38 = 0;
LABEL_45:
    *(void *)(v8 + 408) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
    *(void *)(v8 + 384) = v38;
    *(_OWORD *)(v8 + 416) = xmmword_1821A6610;
    uint64_t v95 = *(void **)(v7 + 16);
    swift_retain();
    id v96 = v95;
    id v97 = objc_msgSend(v96, sel_HTTPBody);
    if (v97)
    {
      id v98 = v97;
      id v99 = specialized Data.init(referencing:)(v98);
      unint64_t v101 = v100;
      swift_release();
    }
    else
    {
      swift_release();

      id v99 = 0;
      unint64_t v101 = 0xF000000000000000;
    }
    *(void *)(v8 + 456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    *(void *)(v8 + 432) = v99;
    *(void *)(v8 + 440) = v101;
    *(_OWORD *)(v8 + 464) = xmmword_1821A6620;
    id v102 = objc_msgSend(*(id *)(v7 + 16), sel_HTTPBodyStream);
    uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSInputStream?);
    *(void *)(v8 + 480) = v102;
    *(void *)(v8 + 504) = v103;
    *(void *)(v8 + 512) = 0xD000000000000017;
    *(void *)(v8 + 520) = 0x80000001823AED30;
    unsigned __int8 v104 = objc_msgSend(*(id *)(v7 + 16), sel_HTTPShouldHandleCookies);
    uint64_t v105 = MEMORY[0x1E4FBB390];
    *(void *)(v8 + 552) = MEMORY[0x1E4FBB390];
    *(unsigned char *)(v8 + 528) = v104;
    *(void *)(v8 + 560) = 0xD000000000000017;
    *(void *)(v8 + 568) = 0x80000001823AED50;
    unsigned __int8 v106 = objc_msgSend(*(id *)(v7 + 16), sel_HTTPShouldUsePipelining);
    *(void *)(v8 + 600) = v105;
    *(unsigned char *)(v8 + 576) = v106;
    uint64_t v118 = v7;
    uint64_t v120 = v8;
    uint64_t v107 = *MEMORY[0x1E4FBC410];
    uint64_t v108 = type metadata accessor for Mirror.DisplayStyle();
    uint64_t v109 = *(void *)(v108 - 8);
    uint64_t v110 = v114;
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 104))(v114, v107, v108);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v110, 0, 1, v108);
    (*(void (**)(char *, void, uint64_t))(v115 + 104))(v117, *MEMORY[0x1E4FBC430], v116);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
    lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
    return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
  }
  uint64_t v36 = v35;
  uint64_t v37 = MEMORY[0x1E4FBC840];
  if (MEMORY[0x1E4FBC840] + 8 != MEMORY[0x1E4FBB1A0])
  {
    swift_unknownObjectRetain();
    uint64_t v38 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v38) {
      goto LABEL_44;
    }
    id v46 = objc_msgSend(v36, sel_count);
    if (!v46) {
      goto LABEL_42;
    }
    uint64_t v47 = (uint64_t)v46;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
    uint64_t v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
    char v48 = (char *)v38[6];
    uint64_t v49 = v38[7];
    swift_retain();
    uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v48, v49, v36, v47);
    if (result < 0 || v47 < result) {
      goto LABEL_53;
    }
    v38[2] = result;
    if (!result) {
      goto LABEL_43;
    }
    uint64_t v112 = a1;
    uint64_t v50 = result - 1;
    unint64_t v51 = v38 + 8;
    while (1)
    {
      if ((*(void *)((char *)v51 + (((unint64_t)v50 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v50)) {
        goto LABEL_33;
      }
      id v75 = (uint64_t *)(v38[6] + 16 * v50);
      uint64_t v76 = *v75;
      uint64_t v77 = v75[1];
      swift_bridgeObjectRetain();
      unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(v76, v77);
      char v80 = v79;
      swift_bridgeObjectRelease();
      if (v80)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v81 = v38[2];
        BOOL v63 = __OFSUB__(v81, 1);
        uint64_t v82 = v81 - 1;
        if (v63) {
          goto LABEL_51;
        }
        v38[2] = v82;
        goto LABEL_33;
      }
      *(void *)((char *)v51 + ((v78 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v78;
      if (v50 < (uint64_t)v78)
      {
        uint64_t v74 = 16 * v78;
        *(_OWORD *)(v38[6] + v74) = *(_OWORD *)(v38[6] + 16 * v50);
        *(_OWORD *)(v38[7] + v74) = *(_OWORD *)(v38[7] + 16 * v50);
LABEL_33:
        if (--v50 < 0) {
          goto LABEL_43;
        }
      }
      else
      {
        if (v78 == v50) {
          goto LABEL_33;
        }
        uint64_t v83 = v38[6];
        Swift::UInt v84 = (uint64_t *)(v83 + 16 * v78);
        uint64_t v85 = (uint64_t *)(v83 + 16 * v50);
        uint64_t v86 = *v84;
        uint64_t v87 = v84[1];
        uint64_t v88 = v85[1];
        *Swift::UInt v84 = *v85;
        v84[1] = v88;
        *uint64_t v85 = v86;
        v85[1] = v87;
        uint64_t v89 = v38[7];
        uint64_t v90 = (uint64_t *)(v89 + 16 * v78);
        char v91 = (uint64_t *)(v89 + 16 * v50);
        uint64_t v92 = *v90;
        uint64_t v93 = v90[1];
        uint64_t v94 = v91[1];
        *uint64_t v90 = *v91;
        v90[1] = v94;
        *char v91 = v92;
        v91[1] = v93;
        if (v50 < 0) {
          goto LABEL_43;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t v38 = (void *)static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v38)
  {
LABEL_44:
    swift_release();

    goto LABEL_45;
  }
  id v39 = objc_msgSend(v36, sel_count);
  if (!v39)
  {
LABEL_42:
    uint64_t v38 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_44;
  }
  uint64_t v40 = (uint64_t)v39;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v38 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v42 = (void *)v38[6];
  uint64_t v41 = v38[7];
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v42, v41, v36, v40);
  if (result < 0 || v40 < result) {
    goto LABEL_52;
  }
  v38[2] = result;
  if (!result)
  {
LABEL_43:
    swift_release();
    goto LABEL_44;
  }
  uint64_t v112 = a1;
  uint64_t v44 = result - 1;
  int v45 = v38 + 8;
  uint64_t v113 = v37 + 8;
  while (1)
  {
    if ((*(void *)((char *)v45 + (((unint64_t)v44 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v44)) {
      goto LABEL_23;
    }
    uint64_t v56 = (uint64_t *)(v38[6] + 16 * v44);
    uint64_t v57 = *v56;
    uint64_t v58 = v56[1];
    swift_bridgeObjectRetain();
    unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(v57, v58);
    char v61 = v60;
    swift_bridgeObjectRelease();
    if (v61) {
      break;
    }
    *(void *)((char *)v45 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v59;
    if (v44 < (uint64_t)v59)
    {
      *(_OWORD *)(v38[6] + 16 * v59) = *(_OWORD *)(v38[6] + 16 * v44);
      uint64_t v52 = v38[7];
      char v53 = (_OWORD *)(v52 + 32 * v44);
      long long v54 = v53[1];
      uint64_t v55 = (_OWORD *)(v52 + 32 * v59);
      *uint64_t v55 = *v53;
      v55[1] = v54;
LABEL_23:
      if (--v44 < 0) {
        goto LABEL_43;
      }
    }
    else
    {
      if (v59 == v44) {
        goto LABEL_23;
      }
      uint64_t v65 = v38[6];
      uint64_t v66 = (uint64_t *)(v65 + 16 * v59);
      uint64_t v67 = (uint64_t *)(v65 + 16 * v44);
      uint64_t v68 = *v66;
      uint64_t v69 = v66[1];
      uint64_t v70 = v67[1];
      *uint64_t v66 = *v67;
      v66[1] = v70;
      *uint64_t v67 = v68;
      v67[1] = v69;
      uint64_t v71 = v38[7];
      int64_t v72 = (_OWORD *)(v71 + 32 * v59);
      uint64_t v73 = (_OWORD *)(v71 + 32 * v44);
      outlined init with take of Any(v72, &v118);
      outlined init with take of Any(v73, v72);
      outlined init with take of Any(&v118, v73);
      if (v44 < 0) {
        goto LABEL_43;
      }
    }
  }
  swift_arrayDestroy();
  uint64_t result = swift_arrayDestroy();
  uint64_t v62 = v38[2];
  BOOL v63 = __OFSUB__(v62, 1);
  uint64_t v64 = v62 - 1;
  if (!v63)
  {
    v38[2] = v64;
    goto LABEL_23;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance URLRequest()
{
  return URLRequest.description.getter();
}

uint64_t static URLRequest._getObjectiveCType()()
{
  return type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURLRequest);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance URLRequest()
{
  objc_msgSend(*(id *)(*(void *)v0 + 16), sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  return v2;
}

uint64_t NSURLRequest._toCustomAnyHashable()()
{
  objc_msgSend(v0, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  uint64_t v1 = swift_allocObject();
  objc_msgSend(v4, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(void *)(v1 + 16) = v3;

  lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSURLRequest()
{
  id v1 = *v0;
  NSURLRequest._toCustomAnyHashable()();
}

void specialized static URLRequest._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  objc_msgSend(a1, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  uint64_t v4 = swift_allocObject();
  objc_msgSend(v6, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v5;

  *a2 = v4;
}

uint64_t specialized static URLRequest._conditionallyBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_release();
  objc_msgSend(a1, sel_mutableCopy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableURLRequest);
  swift_dynamicCast();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _MutableHandle<NSMutableURLRequest>);
  uint64_t v4 = swift_allocObject();
  objc_msgSend(v7, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  *(void *)(v4 + 16) = v6;

  *a2 = v4;
  return 1;
}

unint64_t lazy protocol witness table accessor for type URLRequest and conformance URLRequest()
{
  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLRequest and conformance URLRequest;
  if (!lazy protocol witness table cache variable for type URLRequest and conformance URLRequest)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLRequest and conformance URLRequest);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLRequest(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[2] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[3] = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  unint64_t result = lazy protocol witness table accessor for type URLRequest and conformance URLRequest();
  a1[4] = result;
  return result;
}

double sub_181D690C8@<D0>(uint64_t a1@<X8>)
{
  return keypath_getTm((void (*)(long long *__return_ptr))URLRequest.url.getter, a1);
}

void *sub_181D690E0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setURL_);
}

id sub_181D690EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_10Tm(a1, (SEL *)&selRef_cachePolicy, a2);
}

id sub_181D690F8(uint64_t *a1)
{
  return URLRequest.cachePolicy.setter(*a1);
}

id sub_181D69120@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*(void *)a1 + 16), sel_timeoutInterval);
  *a2 = v4;
  return result;
}

id sub_181D69158(double *a1)
{
  return URLRequest.timeoutInterval.setter(*a1);
}

double sub_181D69180@<D0>(uint64_t a1@<X8>)
{
  return keypath_getTm((void (*)(long long *__return_ptr))URLRequest.mainDocumentURL.getter, a1);
}

double keypath_getTm@<D0>(void (*a1)(long long *__return_ptr)@<X3>, uint64_t a2@<X8>)
{
  a1(&v5);
  uint64_t v3 = v6;
  double result = *(double *)&v5;
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 16) = v3;
  return result;
}

void *sub_181D691E8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm(a1, a2, a3, a4, (SEL *)&selRef_setMainDocumentURL_);
}

void *keypath_setTm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v7 = (void *)*a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  outlined copy of URL?(*a1);
  return specialized URLRequest._applyMutation<A>(_:)(a2, v7, v8, v9, a5);
}

id sub_181D69258@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_10Tm(a1, (SEL *)&selRef_networkServiceType, a2);
}

id sub_181D69264(uint64_t *a1)
{
  return URLRequest.networkServiceType.setter(*a1);
}

id sub_181D6928C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_allowsCellularAccess, a2);
}

id sub_181D69298(char *a1)
{
  return URLRequest.allowsCellularAccess.setter(*a1);
}

id sub_181D692C0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_allowsExpensiveNetworkAccess, a2);
}

id sub_181D692CC(char *a1)
{
  return URLRequest.allowsExpensiveNetworkAccess.setter(*a1);
}

id sub_181D692F4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_allowsConstrainedNetworkAccess, a2);
}

id sub_181D69300(char *a1)
{
  return URLRequest.allowsConstrainedNetworkAccess.setter(*a1);
}

id sub_181D69328@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_assumesHTTP3Capable, a2);
}

id sub_181D69334(char *a1)
{
  return URLRequest.assumesHTTP3Capable.setter(*a1);
}

id sub_181D6935C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return keypath_get_10Tm(a1, (SEL *)&selRef_attribution, a2);
}

id keypath_get_10Tm@<X0>(uint64_t a1@<X0>, SEL *a2@<X3>, void *a3@<X8>)
{
  id result = [*(id *)(*(void *)a1 + 16) *a2];
  *a3 = result;
  return result;
}

id sub_181D6939C(uint64_t *a1)
{
  return URLRequest.attribution.setter(*a1);
}

id sub_181D693C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_requiresDNSSECValidation, a2);
}

id sub_181D693D0(char *a1)
{
  return URLRequest.requiresDNSSECValidation.setter(*a1);
}

id sub_181D693F8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_allowsPersistentDNS, a2);
}

id sub_181D69404(char *a1)
{
  return URLRequest.allowsPersistentDNS.setter(*a1);
}

uint64_t sub_181D69430(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, specialized URLRequest._applyMutation<A>(_:));
}

void sub_181D6944C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();

  specialized URLRequest._applyMutation<A>(_:)(a2, v3);
}

uint64_t sub_181D69494(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  outlined copy of Data?(*a1, v4);

  return specialized URLRequest._applyMutation<A>(_:)(a2, v3, v4);
}

id sub_181D694E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*(id *)(*(void *)a1 + 16), sel_HTTPBodyStream);
  *a2 = result;
  return result;
}

void sub_181D69528(id *a1, uint64_t a2)
{
  id v3 = *a1;
  id v4 = *a1;

  specialized URLRequest._applyMutation<A>(_:)(a2, v3);
}

id sub_181D69568@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_HTTPShouldHandleCookies, a2);
}

id sub_181D69574(char *a1)
{
  return URLRequest.httpShouldHandleCookies.setter(*a1);
}

uint64_t sub_181D695A0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_33Tm(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized URLRequest._applyMutation<A>(_:));
}

uint64_t keypath_set_33Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  swift_bridgeObjectRetain();

  return a5(a2, v6, v7);
}

id sub_181D6961C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return keypath_get_18Tm(a1, (SEL *)&selRef_HTTPShouldUsePipelining, a2);
}

id keypath_get_18Tm@<X0>(uint64_t a1@<X0>, SEL *a2@<X3>, unsigned char *a3@<X8>)
{
  id result = [*(id *)(*(void *)a1 + 16) *a2];
  *a3 = (_BYTE)result;
  return result;
}

id sub_181D6965C(char *a1)
{
  return URLRequest.httpShouldUsePipelining.setter(*a1);
}

uint64_t _PlistKeyedEncodingContainerBPlist.encodeNil(forKey:)()
{
  uint64_t v2 = *v0;
  uint64_t v1 = v0[1];
  uint64_t v23 = *(void *)(*v0 + 56);
  swift_retain();
  uint64_t v3 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v26 = v4;
  if (specialized Sequence.allSatisfy(_:)(v3, v4))
  {
    swift_bridgeObjectRetain();
    id v5 = (id)String.hashValue.getter();
    unsigned __int8 v6 = 1;
  }
  else
  {
    uint64_t v7 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v5 = objc_msgSend(v7, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v6 = 0;
  }
  uint64_t v8 = *(void *)(v2 + 88);
  uint64_t v9 = v2;
  uint64_t v10 = *(void *)(v8 + 16);
  unint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(v8 + 32);
  unint64_t v13 = v26;
  *(void *)(v8 + 16) = v3;
  *(void *)(v8 + 24) = v13;
  *(void *)(v8 + 32) = v5;
  unsigned __int8 v14 = *(unsigned char *)(v8 + 40);
  *(unsigned char *)(v8 + 40) = v6;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v3, v13, (uint64_t)v5, v6);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v14);
  swift_retain();
  char v15 = specialized Set._Variant.insert(_:)(&v24, v8);
  uint64_t v16 = v24;
  if (v15)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 24) = 0;
    *(void *)(v17 + 32) = 0;
    *(void *)(v17 + 16) = 2;
    *(unsigned char *)(v17 + 40) = -112;
    *(void *)(v17 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v9 + 88) = v17;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v1 + 40) & 0xF0) == 0x60)
  {
    uint64_t v24 = *(void *)(v1 + 16);
    long long v25 = *(_OWORD *)(v1 + 24);
    *(void *)(v1 + 16) = 2;
    *(void *)(v1 + 24) = 0;
    *(void *)(v1 + 32) = 0;
    *(unsigned char *)(v1 + 40) = -112;
    swift_retain();
    swift_retain();
    specialized OrderedDictionary.subscript.setter(v23, v16);
    uint64_t v19 = *(void *)(v1 + 16);
    unint64_t v20 = *(void *)(v1 + 24);
    uint64_t v21 = *(void *)(v1 + 32);
    *(void *)(v1 + 16) = v24;
    *(_OWORD *)(v1 + 24) = v25;
    unsigned __int8 v22 = *(unsigned char *)(v1 + 40);
    *(unsigned char *)(v1 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v19, v20, v21, v22);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(float a1)
{
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  specialized _BPlistEncodingFormat.number<A>(from:)(a1);
  uint64_t v4 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v27 = v5;
  if (specialized Sequence.allSatisfy(_:)(v4, v5))
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }
  else
  {
    uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }
  uint64_t v9 = *(void *)(v3 + 88);
  uint64_t v10 = v3;
  uint64_t v11 = *(void *)(v9 + 16);
  unint64_t v12 = *(void *)(v9 + 24);
  uint64_t v13 = *(void *)(v9 + 32);
  unint64_t v14 = v27;
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v14;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v15 = *(unsigned char *)(v9 + 40);
  *(unsigned char *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v4, v14, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v11, v12, v13, v15);
  swift_retain();
  char v16 = specialized Set._Variant.insert(_:)(&v25, v9);
  uint64_t v17 = v25;
  if (v16)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = 0;
    *(void *)(v18 + 16) = 2;
    *(unsigned char *)(v18 + 40) = -112;
    *(void *)(v18 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v10 + 88) = v18;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if ((*(unsigned char *)(v2 + 40) & 0xF0) == 0x60)
  {
    uint64_t v25 = *(void *)(v2 + 16);
    long long v26 = *(_OWORD *)(v2 + 24);
    *(void *)(v2 + 16) = 2;
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 32) = 0;
    *(unsigned char *)(v2 + 40) = -112;
    swift_retain();
    uint64_t v20 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v20, v17);
    uint64_t v21 = *(void *)(v2 + 16);
    unint64_t v22 = *(void *)(v2 + 24);
    uint64_t v23 = *(void *)(v2 + 32);
    *(void *)(v2 + 16) = v25;
    *(_OWORD *)(v2 + 24) = v26;
    unsigned __int8 v24 = *(unsigned char *)(v2 + 40);
    *(unsigned char *)(v2 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v21, v22, v23, v24);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v68 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v66 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v70 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v74 = (char *)&v64 - v13;
  id v75 = v3;
  uint64_t v14 = *v3;
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v69 = a1;
  uint64_t v65 = v15;
  uint64_t v16 = dispatch thunk of CodingKey.stringValue.getter();
  unint64_t v18 = v17;
  char v19 = specialized Sequence.allSatisfy(_:)(v16, v17);
  uint64_t v71 = v10;
  uint64_t v72 = v9;
  uint64_t v73 = v7;
  if (v19)
  {
    swift_bridgeObjectRetain();
    id v20 = (id)String.hashValue.getter();
    unsigned __int8 v21 = 1;
  }
  else
  {
    unint64_t v22 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v20 = objc_msgSend(v22, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v21 = 0;
  }
  uint64_t v23 = *(void *)(v14 + 88);
  uint64_t v25 = *(void *)(v23 + 16);
  unint64_t v24 = *(void *)(v23 + 24);
  uint64_t v26 = *(void *)(v23 + 32);
  *(void *)(v23 + 16) = v16;
  *(void *)(v23 + 24) = v18;
  *(void *)(v23 + 32) = v20;
  unsigned __int8 v27 = *(unsigned char *)(v23 + 40);
  *(unsigned char *)(v23 + 40) = v21;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(v16, v18, (uint64_t)v20, v21);
  unsigned __int8 v28 = v27;
  uint64_t v29 = v14;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v25, v24, v26, v28);
  swift_retain();
  char v30 = specialized Set._Variant.insert(_:)(&v76, v23);
  uint64_t v31 = v76;
  if (v30)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 24) = 0;
    *(void *)(v32 + 32) = 0;
    *(void *)(v32 + 16) = 2;
    *(unsigned char *)(v32 + 40) = -112;
    *(void *)(v32 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v14 + 88) = v32;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v34 = v75[1];
  unsigned __int8 v35 = *(unsigned char *)(v34 + 40);
  uint64_t v36 = v73;
  if ((v35 & 0xF0) == 0x60)
  {
    unint64_t v38 = *(void *)(v34 + 24);
    uint64_t v37 = *(void *)(v34 + 32);
    uint64_t v39 = *(void *)(v34 + 16);
    swift_retain();
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v39, v38, v37, v35);
    uint64_t v40 = specialized OrderedDictionary.subscript.getter(v31, v39, v38, v37);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v39, v38, v37, v35);
    swift_release();
    if (v40)
    {
      uint64_t v41 = v74;
      if ((*(unsigned char *)(v40 + 40) & 0xF0) == 0x50) {
        goto LABEL_14;
      }
      __break(1u);
    }
    uint64_t v42 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v41 = v74;
    if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0) {
      goto LABEL_25;
    }
    while (1)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t result = swift_allocObject();
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 0;
      *(void *)(result + 16) = v42;
      *(unsigned char *)(result + 40) = 80;
      *(void *)(result + 48) = -1;
      if ((*(unsigned char *)(v34 + 40) & 0xF0) != 0x60) {
        goto LABEL_27;
      }
      uint64_t v40 = result;
      uint64_t v76 = *(void *)(v34 + 16);
      long long v77 = *(_OWORD *)(v34 + 24);
      *(void *)(v34 + 16) = 2;
      *(void *)(v34 + 24) = 0;
      *(void *)(v34 + 32) = 0;
      *(unsigned char *)(v34 + 40) = -112;
      swift_retain_n();
      swift_retain();
      specialized OrderedDictionary.subscript.setter(v40, v31);
      uint64_t v43 = *(void *)(v34 + 16);
      unint64_t v44 = *(void *)(v34 + 24);
      uint64_t v45 = *(void *)(v34 + 32);
      *(void *)(v34 + 16) = v76;
      *(_OWORD *)(v34 + 24) = v77;
      unsigned __int8 v46 = *(unsigned char *)(v34 + 40);
      *(unsigned char *)(v34 + 40) = 96;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v43, v44, v45, v46);
      swift_release();
LABEL_14:
      uint64_t v67 = v31;
      unint64_t v47 = v75[2];
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v41, v69, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v41, 0, 1, v6);
      char v48 = v70;
      uint64_t v49 = v71;
      uint64_t v50 = v72;
      (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v70, v41, v72);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v48, 1, v6) == 1) {
        break;
      }
      uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v36 += 32;
      uint64_t v53 = v29;
      long long v54 = v66;
      v52(v66, v48, v6);
      uint64_t v55 = (uint64_t *)swift_allocObject();
      uint64_t v56 = v65;
      v55[5] = v6;
      v55[6] = v56;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v55 + 2);
      uint64_t v58 = v54;
      uint64_t v29 = v53;
      v52((char *)boxed_opaque_existential_1, v58, v6);
      unint64_t v59 = *(char **)(v49 + 8);
      uint64_t v34 = v49 + 8;
      uint64_t v41 = v59;
      swift_retain();
      ((void (*)(char *, uint64_t))v59)(v74, v50);
      v55[7] = v47;
      if (v47 >> 62)
      {
        if (v47 >> 62 != 1)
        {
          uint64_t v62 = 1;
LABEL_21:
          v55[8] = v62;
          unint64_t v47 = (unint64_t)v55;
LABEL_22:
          BOOL v63 = v68;
          v68[3] = &unk_1ECA436B0;
          v63[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
          uint64_t result = swift_release();
          *BOOL v63 = v29;
          v63[1] = v40;
          v63[2] = v47;
          return result;
        }
        char v60 = (uint64_t *)((v47 & 0x3FFFFFFFFFFFFFFFLL) + 32);
      }
      else
      {
        char v60 = (uint64_t *)(v47 + 64);
      }
      uint64_t v31 = v67;
      uint64_t v61 = *v60;
      swift_retain();
      uint64_t v62 = v61 + 1;
      if (!__OFADD__(v61, 1)) {
        goto LABEL_21;
      }
      __break(1u);
LABEL_25:
      uint64_t v42 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E4FBC860]);
    }
    unint64_t v51 = *(void (**)(char *, uint64_t))(v49 + 8);
    swift_retain();
    v51(v41, v50);
    v51(v48, v50);
    swift_retain();
    goto LABEL_22;
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = type metadata accessor for __PlistReferencingEncoderBPlist();
  uint64_t v7 = swift_allocObject();
  swift_retain();
  swift_retain();
  uint64_t v8 = swift_retain();
  uint64_t v9 = specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(v8, 0x7265707573, 0xE500000000000000, 0, 0, v5, v3, v7);
  a1[3] = v6;
  uint64_t result = lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(&lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist, 255, (void (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _PlistKeyedEncodingContainerBPlist.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  uint64_t v10 = v3[1];
  unint64_t v12 = *(void *)(v11 + 40);
  uint64_t v13 = type metadata accessor for __PlistReferencingEncoderBPlist();
  uint64_t v14 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v19, v6);
  uint64_t v15 = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(v11, (uint64_t)v9, v12, v10, v14, v6, v15);
  a3[3] = v13;
  uint64_t result = lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(&lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist, 255, (void (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist);
  a3[4] = result;
  *a3 = v16;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return _PlistKeyedEncodingContainerBPlist.encodeNil(forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>(float a1)
{
  return _PlistKeyedEncodingContainerBPlist.encode(_:forKey:)(a1);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _PlistKeyedEncodingContainerBPlist<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t _PlistUnkeyedEncodingContainerBPlist.encode(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  if (specialized Sequence.allSatisfy(_:)(a1, a2))
  {
    swift_bridgeObjectRetain();
    id v6 = (id)String.hashValue.getter();
    unsigned __int8 v7 = 1;
  }
  else
  {
    uint64_t v8 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v6 = objc_msgSend(v8, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v7 = 0;
  }
  uint64_t v9 = *(void *)(v5 + 88);
  uint64_t v10 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  uint64_t v12 = *(void *)(v9 + 32);
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  *(void *)(v9 + 32) = v6;
  unsigned __int8 v13 = *(unsigned char *)(v9 + 40);
  *(unsigned char *)(v9 + 40) = v7;
  outlined copy of _BPlistEncodingFormat.Reference.Backing(a1, a2, (uint64_t)v6, v7);
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v10, v11, v12, v13);
  swift_retain();
  if (specialized Set._Variant.insert(_:)(&v16, v9))
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 24) = 0;
    *(void *)(v14 + 32) = 0;
    *(void *)(v14 + 16) = 2;
    *(unsigned char *)(v14 + 40) = -112;
    *(void *)(v14 + 48) = -1;
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)(v5 + 88) = v14;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

void _PlistUnkeyedEncodingContainerBPlist.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 8);
  int v3 = *(unsigned __int8 *)(v2 + 40) >> 4;
  if (v3 == 6)
  {
    uint64_t v4 = v2 + 32;
  }
  else
  {
    if (v3 != 5) {
      goto LABEL_13;
    }
    uint64_t v4 = v2 + 16;
  }
  uint64_t v5 = *(void *)(*(void *)v4 + 16);
  uint64_t v6 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v6;
  *(void *)(v11 + 24) = v8;
  *(void *)(v11 + 32) = v10;
  *(unsigned char *)(v11 + 40) = 96;
  *(void *)(v11 + 48) = -1;
  _BPlistEncodingFormat.Reference.insert(_:)();
  unint64_t v12 = *(void *)(v1 + 16);
  unsigned __int8 v13 = (void *)swift_allocObject();
  v13[5] = &type metadata for _CodingKey;
  v13[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v14 = swift_allocObject();
  v13[2] = v14;
  *(void *)(v14 + 24) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 16) = v5;
  *(unsigned char *)(v14 + 40) = 2;
  v13[7] = v12;
  if (!(v12 >> 62))
  {
    uint64_t v16 = (uint64_t *)(v12 + 64);
    goto LABEL_9;
  }
  uint64_t v15 = 0;
  if (v12 >> 62 == 1)
  {
    uint64_t v16 = (uint64_t *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_9:
    uint64_t v15 = *v16;
    swift_retain();
  }
  if (!__OFADD__(v15, 1))
  {
    v13[8] = v15 + 1;
    type metadata accessor for _PlistKeyedEncodingContainerBPlist();
    swift_retain();
    swift_getWitnessTable();
    KeyedEncodingContainer.init<A>(_:)();
    return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
}

void _PlistUnkeyedEncodingContainerBPlist.nestedUnkeyedContainer()(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[1];
  int v5 = *(unsigned __int8 *)(v4 + 40) >> 4;
  if (v5 == 6)
  {
    uint64_t v6 = v4 + 32;
  }
  else
  {
    if (v5 != 5)
    {
LABEL_17:
      __break(1u);
      return;
    }
    uint64_t v6 = v4 + 16;
  }
  uint64_t v7 = *(void *)(*(void *)v6 + 16);
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0) {
    uint64_t v8 = specialized _copyCollectionToContiguousArray<A>(_:)(MEMORY[0x1E4FBC860]);
  }
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 24) = 0;
  *(void *)(v9 + 32) = 0;
  *(void *)(v9 + 16) = v8;
  *(unsigned char *)(v9 + 40) = 80;
  *(void *)(v9 + 48) = -1;
  _BPlistEncodingFormat.Reference.insert(_:)();
  uint64_t v10 = *v2;
  unint64_t v11 = v2[2];
  unint64_t v12 = (void *)swift_allocObject();
  v12[5] = &type metadata for _CodingKey;
  v12[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v13 = swift_allocObject();
  v12[2] = v13;
  *(void *)(v13 + 24) = 0;
  *(void *)(v13 + 32) = 0;
  *(void *)(v13 + 16) = v7;
  *(unsigned char *)(v13 + 40) = 2;
  v12[7] = v11;
  if (v11 >> 62)
  {
    uint64_t v14 = 0;
    if (v11 >> 62 != 1) {
      goto LABEL_12;
    }
    uint64_t v15 = (uint64_t *)((v11 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v15 = (uint64_t *)(v11 + 64);
  }
  uint64_t v14 = *v15;
  swift_retain();
LABEL_12:
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
  v12[8] = v14 + 1;
  a1[3] = &unk_1ECA436B0;
  a1[4] = lazy protocol witness table accessor for type _PlistUnkeyedEncodingContainerBPlist and conformance _PlistUnkeyedEncodingContainerBPlist();
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v12;

  swift_retain();
}

void _PlistUnkeyedEncodingContainerBPlist.superEncoder()(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  int v5 = *(unsigned __int8 *)(v3 + 40) >> 4;
  if (v5 == 6)
  {
    uint64_t v6 = v3 + 32;
    goto LABEL_5;
  }
  if (v5 == 5)
  {
    uint64_t v6 = v3 + 16;
LABEL_5:
    uint64_t v7 = *(void *)(*(void *)v6 + 16);
    unint64_t v8 = *(void *)(v4 + 40);
    uint64_t v9 = type metadata accessor for __PlistReferencingEncoderBPlist();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v10 = swift_retain();
    uint64_t v11 = __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(v10, v7, v8, v3);
    a1[3] = v9;
    a1[4] = lazy protocol witness table accessor for type _BPlistEncodingFormat.Reference and conformance _BPlistEncodingFormat.Reference(&lazy protocol witness table cache variable for type __PlistReferencingEncoderBPlist and conformance __PlistEncoderBPlist, 255, (void (*)(uint64_t))type metadata accessor for __PlistReferencingEncoderBPlist);
    *a1 = v11;
    return;
  }
  __break(1u);
}

uint64_t protocol witness for UnkeyedEncodingContainer.count.getter in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  uint64_t v1 = *(void *)(v0 + 8);
  int v2 = *(unsigned __int8 *)(v1 + 40) >> 4;
  if (v2 == 6)
  {
    uint64_t v3 = v1 + 32;
    return *(void *)(*(void *)v3 + 16);
  }
  if (v2 == 5)
  {
    uint64_t v3 = v1 + 16;
    return *(void *)(*(void *)v3 + 16);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist()
{
  return swift_release();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(unint64_t a1, unint64_t a2)
{
  return _PlistUnkeyedEncodingContainerBPlist.encode(_:)(a1, a2);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(double a1)
{
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(float a1)
{
  return swift_release();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

{
  return protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(a1, a2, a3, (void (*)(void))specialized _BPlistEncodingFormat.number<A>(from:));
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _PlistUnkeyedEncodingContainerBPlist(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

{
  a4();
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

{
  a4();
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

{
  a4();
  _BPlistEncodingFormat.Reference.insert(_:)();
  return swift_release();
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __PlistEncoderBPlist()
{
  unint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_retain();
  uint64_t v2 = _CodingPathNode.path.getter(v1);
  swift_release();
  return v2;
}

uint64_t protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __PlistEncoderBPlist()
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v0 + 240))();
  if (result)
  {
    swift_retain_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(double a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 240))();
  if (result)
  {
    specialized _BPlistEncodingFormat.number<A>(from:)(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist(float a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v1 + 240))();
  if (result)
  {
    specialized _BPlistEncodingFormat.number<A>(from:)(a1);
    swift_retain();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __PlistEncoderBPlist()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned __int16 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v8 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if (v9)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 2;
    *(unsigned char *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v8 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if (v9)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 2;
    *(unsigned char *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(__int16 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v8 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if (v9)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 2;
    *(unsigned char *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(int a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v8 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if (v9)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 2;
    *(unsigned char *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(unsigned __int8 a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = v4;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v8 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 32;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v6, v7, v8);
  swift_retain();
  char v9 = specialized Set._Variant.insert(_:)(&v13, v3);
  uint64_t v10 = v13;
  if (v9)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 24) = 0;
    *(void *)(v11 + 32) = 0;
    *(void *)(v11 + 16) = 2;
    *(unsigned char *)(v11 + 40) = -112;
    *(void *)(v11 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v11;
  }
  return v10;
}

uint64_t specialized _BPlistEncodingFormat.number<A>(from:)(float a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = *(void *)(v3 + 16);
  unint64_t v5 = *(void *)(v3 + 24);
  uint64_t v6 = *(void *)(v3 + 32);
  *(void *)(v3 + 16) = LODWORD(a1);
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  unsigned __int8 v7 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)(v3 + 40) = 64;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v4, v5, v6, v7);
  swift_retain();
  char v8 = specialized Set._Variant.insert(_:)(&v12, v3);
  uint64_t v9 = v12;
  if (v8)
  {
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 2;
    *(unsigned char *)(v10 + 40) = -112;
    *(void *)(v10 + 48) = -1;
    swift_release();
    *(void *)(v2 + 32) = v10;
  }
  return v9;
}

uint64_t specialized __PlistEncoderBPlist.wrap<A>(_:for:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v88 = a4;
  int v10 = ~a6;
  unint64_t v67 = *(void *)(*(void *)(v6 + 16) + 16);
  uint64_t v11 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  type metadata accessor for _BPlistEncodingFormat.Reference();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 24) = v13;
  uint64_t v72 = (void *)(v16 + 24);
  *(void *)(v16 + 16) = v11;
  *(void *)(v16 + 32) = v15;
  *(unsigned char *)(v16 + 40) = 96;
  *(void *)(v16 + 48) = -1;
  swift_retain();
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  uint64_t v74 = v16;
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  uint64_t v68 = v6 + 16;
  specialized ContiguousArray._endMutation()();
  if (!v10)
  {
    swift_retain();
    unint64_t v17 = (void *)a2;
    uint64_t v20 = v88;
    uint64_t v19 = a3;
    goto LABEL_11;
  }
  unint64_t v17 = (void *)swift_allocObject();
  v17[5] = &type metadata for _CodingKey;
  v17[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t v18 = swift_allocObject();
  v17[2] = v18;
  uint64_t v19 = a3;
  uint64_t v20 = v88;
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = v20;
  *(void *)(v18 + 32) = a5;
  *(unsigned char *)(v18 + 40) = a6;
  v17[7] = a2;
  if (a2 >> 62)
  {
    if (a2 >> 62 != 1)
    {
      uint64_t v22 = 0;
      goto LABEL_9;
    }
    unsigned __int8 v21 = (uint64_t *)((a2 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    unsigned __int8 v21 = (uint64_t *)(a2 + 64);
  }
  uint64_t v22 = *v21;
  swift_retain();
LABEL_9:
  if (__OFADD__(v22, 1)) {
    goto LABEL_63;
  }
  v17[8] = v22 + 1;
LABEL_11:
  outlined copy of _CodingKey?(v19, v20, a5, a6);
  uint64_t v23 = swift_bridgeObjectRetain();
  unint64_t v24 = specialized _copyCollectionToContiguousArray<A>(_:)(v23);
  swift_bridgeObjectRelease();
  uint64_t v85 = v24;
  specialized MutableCollection<>.sort(by:)(&v85);
  if (v76)
  {
LABEL_65:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  unint64_t v25 = 0;
  unint64_t v26 = v85[2];
  uint64_t v70 = v85;
  uint64_t v69 = v85 + 4;
  uint64_t v73 = v17;
  unint64_t v71 = v26;
  if (!v26) {
    goto LABEL_16;
  }
LABEL_13:
  if ((v25 & 0x8000000000000000) != 0)
  {
LABEL_61:
    __break(1u);
    goto LABEL_62;
  }
  if (v25 >= v70[2])
  {
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  outlined init with copy of (key: String, value: Encodable)((uint64_t)&v69[7 * v25], (uint64_t)&v81);
  unint64_t v27 = v25 + 1;
  while (1)
  {
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v81, (uint64_t)&v85);
    unint64_t v28 = v86;
    if (!v86) {
      break;
    }
    unint64_t v77 = v27;
    unint64_t v29 = (unint64_t)v85;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v87, (uint64_t)&v81);
    if ((v28 & 0x2000000000000000) != 0) {
      unint64_t v30 = HIBYTE(v28) & 0xF;
    }
    else {
      unint64_t v30 = v29 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v31 = (v29 >> 59) & 1;
    if ((v28 & 0x1000000000000000) == 0) {
      LOBYTE(v31) = 1;
    }
    uint64_t v32 = 4 << v31;
    uint64_t v88 = v28 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v33 = 15;
    do
    {
      while (1)
      {
        if (4 * v30 == v33 >> 14)
        {
          swift_bridgeObjectRetain();
          id v39 = (id)String.hashValue.getter();
          unsigned __int8 v40 = 1;
          goto LABEL_45;
        }
        unint64_t v34 = v33 & 0xC;
        unint64_t v35 = v33;
        if (v34 == v32) {
          unint64_t v35 = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, v29, v28);
        }
        unint64_t v36 = v35 >> 16;
        if (v35 >> 16 >= v30)
        {
          __break(1u);
LABEL_60:
          __break(1u);
          goto LABEL_61;
        }
        if ((v28 & 0x1000000000000000) == 0) {
          break;
        }
        char v38 = String.UTF8View._foreignSubscript(position:)();
        if (v34 == v32) {
          goto LABEL_34;
        }
LABEL_37:
        if ((v28 & 0x1000000000000000) != 0) {
          goto LABEL_38;
        }
LABEL_24:
        unint64_t v33 = (v33 & 0xFFFFFFFFFFFF0000) + 65540;
        if (v38 < 0) {
          goto LABEL_44;
        }
      }
      if ((v28 & 0x2000000000000000) != 0)
      {
        unint64_t v79 = v29;
        *(void *)&long long v80 = v88;
        char v38 = *((unsigned char *)&v79 + v36);
        if (v34 == v32) {
          goto LABEL_34;
        }
        goto LABEL_37;
      }
      uint64_t v37 = (v28 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((v29 & 0x1000000000000000) == 0) {
        uint64_t v37 = _StringObject.sharedUTF8.getter();
      }
      char v38 = *(unsigned char *)(v37 + v36);
      if (v34 != v32) {
        goto LABEL_37;
      }
LABEL_34:
      unint64_t v33 = _StringGuts._slowEnsureMatchingEncoding(_:)(v33, v29, v28);
      if ((v28 & 0x1000000000000000) == 0) {
        goto LABEL_24;
      }
LABEL_38:
      if (v30 <= v33 >> 16) {
        goto LABEL_60;
      }
      unint64_t v33 = String.UTF8View._foreignIndex(after:)();
    }
    while ((v38 & 0x80) == 0);
LABEL_44:
    uint64_t v41 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRetain();
    id v39 = objc_msgSend(v41, sel_hash);
    swift_unknownObjectRelease();
    unsigned __int8 v40 = 0;
LABEL_45:
    uint64_t v42 = *(void *)(v75 + 88);
    uint64_t v43 = *(void *)(v42 + 16);
    unint64_t v44 = *(void *)(v42 + 24);
    uint64_t v45 = *(void *)(v42 + 32);
    *(void *)(v42 + 16) = v29;
    *(void *)(v42 + 24) = v28;
    *(void *)(v42 + 32) = v39;
    unsigned __int8 v46 = *(unsigned char *)(v42 + 40);
    *(unsigned char *)(v42 + 40) = v40;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v29, v28, (uint64_t)v39, v40);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v43, v44, v45, v46);
    swift_retain();
    char v47 = specialized Set._Variant.insert(_:)((uint64_t *)&v79, v42);
    uint64_t v48 = v79;
    if (v47)
    {
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 24) = 0;
      *(void *)(v49 + 32) = 0;
      *(void *)(v49 + 16) = 2;
      *(unsigned char *)(v49 + 40) = -112;
      *(void *)(v49 + 48) = -1;
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v75 + 88) = v49;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v51 = *((void *)&v82 + 1);
    uint64_t v50 = v83;
    uint64_t v52 = __swift_project_boxed_opaque_existential_1(&v81, *((uint64_t *)&v82 + 1));
    if (!specialized __PlistEncoderBPlist.wrapGeneric<A, B>(_:for:_:)(v52, v73, v29, v28, 0, 0, v51, v50))
    {
      uint64_t v53 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
      uint64_t v55 = v54;
      uint64_t v57 = v56;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v53;
      *(void *)(v58 + 24) = v55;
      *(void *)(v58 + 32) = v57;
      *(unsigned char *)(v58 + 40) = 96;
      *(void *)(v58 + 48) = -1;
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v74 + 40) & 0xF0) != 0x60) {
      goto LABEL_64;
    }
    unint64_t v79 = *(void *)(v74 + 16);
    long long v80 = *(_OWORD *)(v74 + 24);
    *(void *)(v74 + 16) = 2;
    *uint64_t v72 = 0;
    v72[1] = 0;
    *(unsigned char *)(v74 + 40) = -112;
    swift_retain();
    uint64_t v59 = swift_retain();
    specialized OrderedDictionary.subscript.setter(v59, v48);
    uint64_t v60 = *(void *)(v74 + 16);
    unint64_t v61 = *(void *)(v74 + 24);
    uint64_t v62 = *(void *)(v74 + 32);
    *(void *)(v74 + 16) = v79;
    *(_OWORD *)(v74 + 24) = v80;
    unsigned __int8 v63 = *(unsigned char *)(v74 + 40);
    *(unsigned char *)(v74 + 40) = 96;
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v60, v61, v62, v63);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v81);
    unint64_t v26 = v71;
    unint64_t v25 = v77;
    if (v77 != v71) {
      goto LABEL_13;
    }
LABEL_16:
    uint64_t v84 = 0;
    long long v82 = 0u;
    long long v83 = 0u;
    unint64_t v27 = v26;
    long long v81 = 0u;
  }
  swift_release();
  if (v67 >= *(void *)(*(void *)v68 + 16))
  {
    swift_release();
    swift_release();
    return 0;
  }
  else
  {
    uint64_t v64 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    if (!v64) {
      uint64_t v64 = specialized ContiguousArray.remove(at:)(*(void *)(*(void *)v68 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }
    uint64_t v65 = v64;
    swift_release();
    swift_release();
  }
  return v65;
}

uint64_t __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a1;
  *(void *)(v4 + 104) = a4;
  *(void *)(v4 + 112) = a2;
  *(void *)(v4 + 120) = 0;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = (void *)swift_allocObject();
  v9[5] = &type metadata for _CodingKey;
  v9[6] = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  uint64_t result = swift_allocObject();
  v9[2] = result;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = a2;
  *(unsigned char *)(result + 40) = 2;
  unint64_t v11 = a3 >> 62;
  v9[7] = a3;
  if (a3 >> 62)
  {
    uint64_t v12 = 0;
    if (v11 != 1) {
      goto LABEL_6;
    }
    uint64_t v13 = (uint64_t *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v13 = (uint64_t *)(a3 + 64);
  }
  uint64_t v12 = *v13;
  uint64_t result = swift_retain();
LABEL_6:
  if (!__OFADD__(v12, 1))
  {
    v9[8] = v12 + 1;
    if (v11)
    {
      if (v11 != 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v14 = 0;
        goto LABEL_13;
      }
      uint64_t v14 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    }
    else
    {
      uint64_t v14 = *(void *)(a3 + 64);
    }
    swift_bridgeObjectRetain();
    swift_release();
LABEL_13:
    *(void *)(v4 + 16) = MEMORY[0x1E4FBC860];
    *(void *)(v4 + 24) = v8;
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v9;
    *(void *)(v4 + 48) = v14;
    specialized _BPlistEncodingFormat.init()((uint64_t *)v16);
    long long v15 = v16[1];
    *(_OWORD *)(v4 + 56) = v16[0];
    *(_OWORD *)(v4 + 72) = v15;
    *(void *)(v4 + 88) = v17;
    return v4;
  }
  __break(1u);
  return result;
}

BOOL __PlistReferencingEncoderBPlist.canEncodeNewValue.getter()
{
  uint64_t v1 = *(void *)(v0[2] + 16);
  unint64_t v2 = v0[5];
  swift_retain();
  uint64_t v3 = _CodingPathNode.path.getter(v2);
  swift_release();
  uint64_t v4 = *(void *)(v3 + 16);
  swift_bridgeObjectRelease();
  unint64_t v5 = *(void *)(v0[12] + 40);
  swift_retain();
  uint64_t v6 = _CodingPathNode.path.getter(v5);
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v1 == v4 + ~v7;
}

uint64_t __PlistReferencingEncoderBPlist.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 104);

  return outlined consume of __JSONReferencingEncoder.Reference(v1);
}

uint64_t __PlistReferencingEncoderBPlist.deinit()
{
  uint64_t v1 = v0;
  uint64_t v3 = v0[2];
  unint64_t v2 = v0 + 2;
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4 == 1)
  {
    uint64_t v5 = specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    if (!v5) {
      uint64_t v5 = specialized ContiguousArray.remove(at:)(*(void *)(*v2 + 16) - 1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }
    uint64_t v6 = v5;
  }
  else
  {
    if (v4) {
      goto LABEL_25;
    }
    uint64_t v7 = specialized OrderedDictionary.init<A>(uniqueKeysWithValues:)(MEMORY[0x1E4FBC860]);
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    type metadata accessor for _BPlistEncodingFormat.Reference();
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v7;
    *(void *)(v6 + 24) = v9;
    *(void *)(v6 + 32) = v11;
    *(unsigned char *)(v6 + 40) = 96;
    *(void *)(v6 + 48) = -1;
  }
  uint64_t v12 = v1[13];
  uint64_t v13 = v1[14];
  unint64_t v14 = v1[15];
  if (v12 < 0)
  {
    uint64_t v20 = v12 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v21 = v1[12];
    if (specialized Sequence.allSatisfy(_:)(v1[14], v1[15]))
    {
      swift_retain();
      swift_bridgeObjectRetain_n();
      id v22 = (id)String.hashValue.getter();
      unsigned __int8 v23 = 1;
    }
    else
    {
      unint64_t v24 = (void *)String._bridgeToObjectiveCImpl()();
      swift_retain();
      swift_bridgeObjectRetain_n();
      id v22 = objc_msgSend(v24, sel_hash);
      swift_unknownObjectRelease();
      unsigned __int8 v23 = 0;
    }
    uint64_t v25 = *(void *)(v21 + 88);
    uint64_t v37 = *(void *)(v25 + 16);
    uint64_t v38 = v21;
    unint64_t v26 = *(void *)(v25 + 24);
    uint64_t v27 = *(void *)(v25 + 32);
    *(void *)(v25 + 16) = v13;
    *(void *)(v25 + 24) = v14;
    *(void *)(v25 + 32) = v22;
    unsigned __int8 v28 = *(unsigned char *)(v25 + 40);
    *(unsigned char *)(v25 + 40) = v23;
    outlined copy of _BPlistEncodingFormat.Reference.Backing(v13, v14, (uint64_t)v22, v23);
    outlined consume of _BPlistEncodingFormat.Reference.Backing(v37, v26, v27, v28);
    swift_retain();
    char v29 = specialized Set._Variant.insert(_:)(&v39, v25);
    uint64_t v30 = v39;
    if (v29)
    {
      type metadata accessor for _BPlistEncodingFormat.Reference();
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 24) = 0;
      *(void *)(v31 + 32) = 0;
      *(void *)(v31 + 16) = 2;
      *(unsigned char *)(v31 + 40) = -112;
      *(void *)(v31 + 48) = -1;
      swift_bridgeObjectRelease();
      swift_release();
      *(void *)(v38 + 88) = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(v20 + 40) & 0xF0) == 0x60)
    {
      uint64_t v39 = *(void *)(v20 + 16);
      long long v40 = *(_OWORD *)(v20 + 24);
      *(void *)(v20 + 16) = 2;
      *(void *)(v20 + 24) = 0;
      *(void *)(v20 + 32) = 0;
      *(unsigned char *)(v20 + 40) = -112;
      swift_retain();
      swift_retain();
      specialized OrderedDictionary.subscript.setter(v6, v30);
      uint64_t v32 = *(void *)(v20 + 16);
      unint64_t v33 = *(void *)(v20 + 24);
      uint64_t v34 = *(void *)(v20 + 32);
      *(void *)(v20 + 16) = v39;
      *(_OWORD *)(v20 + 24) = v40;
      unsigned __int8 v35 = *(unsigned char *)(v20 + 40);
      *(unsigned char *)(v20 + 40) = 96;
      outlined consume of _BPlistEncodingFormat.Reference.Backing(v32, v33, v34, v35);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_20;
    }
  }
  else
  {
    if ((*(unsigned char *)(v12 + 40) & 0xF0) == 0x50)
    {
      uint64_t v39 = *(void *)(v12 + 16);
      uint64_t v15 = v39;
      *(void *)(v12 + 16) = 2;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      *(unsigned char *)(v12 + 40) = -112;
      if (*(void *)(v15 + 16) < v13)
      {
        __break(1u);
      }
      else if ((v13 & 0x8000000000000000) == 0)
      {
        outlined copy of __JSONReferencingEncoder.Reference(v12);
        swift_retain();
        specialized ContiguousArray.replaceSubrange<A>(_:with:)(v13, v13, v6);
        uint64_t v16 = *(void *)(v12 + 16);
        unint64_t v17 = *(void *)(v12 + 24);
        uint64_t v18 = *(void *)(v12 + 32);
        *(void *)(v12 + 16) = v39;
        unsigned __int8 v19 = *(unsigned char *)(v12 + 40);
        *(void *)(v12 + 24) = 0;
        *(void *)(v12 + 32) = 0;
        *(unsigned char *)(v12 + 40) = 80;
        outlined consume of _BPlistEncodingFormat.Reference.Backing(v16, v17, v18, v19);
        swift_release();
        outlined consume of __JSONReferencingEncoder.Reference(v12);
LABEL_20:
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        outlined consume of __JSONReferencingEncoder.Reference(v1[13]);
        return (uint64_t)v1;
      }
      __break(1u);
    }
    __break(1u);
  }
  __break(1u);
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __PlistReferencingEncoderBPlist.__deallocating_deinit()
{
  __PlistReferencingEncoderBPlist.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __PlistReferencingEncoderBPlist()
{
  return self;
}

uint64_t destroy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1)
{
  return outlined consume of _BPlistEncodingFormat.Reference.Backing(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _BPlistEncodingFormat.Reference.Backing(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 24);
  outlined copy of _BPlistEncodingFormat.Reference.Backing(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of _BPlistEncodingFormat.Reference.Backing(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _BPlistEncodingFormat.Reference.Backing(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x77 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 119);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 24) >> 4) & 0xFFFFFF8F | (16 * ((*(unsigned __int8 *)(a1 + 24) >> 1) & 7))) ^ 0x7F;
  if (v3 >= 0x76) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _BPlistEncodingFormat.Reference.Backing(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x76)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 119;
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x77) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(unsigned char *)(result + 24) = 2 * (((-a2 >> 4) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for _BPlistEncodingFormat.Reference.Backing(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 24);
  if (v1 <= 0x8F) {
    return v1 >> 4;
  }
  else {
    return (*(_DWORD *)a1 + 9);
  }
}

uint64_t destructiveProjectEnumData for _BPlistEncodingFormat.Reference.Backing(uint64_t result)
{
  *(unsigned char *)(result + 24) &= 0xFu;
  return result;
}

uint64_t destructiveInjectEnumTag for _BPlistEncodingFormat.Reference.Backing(uint64_t result, unsigned int a2)
{
  if (a2 < 9)
  {
    *(unsigned char *)(result + 24) = *(unsigned char *)(result + 24) & 1 | (16 * a2);
  }
  else
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 9;
    *(unsigned char *)(result + 24) = -112;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat.Reference.Backing()
{
  return &type metadata for _BPlistEncodingFormat.Reference.Backing;
}

void *type metadata accessor for __PlistReferencingEncoderBPlist.Reference()
{
  return &unk_1ECA42C20;
}

uint64_t destroy for _BPlistEncodingFormat()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeWithCopy for _BPlistEncodingFormat(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for _BPlistEncodingFormat(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _BPlistEncodingFormat(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _BPlistEncodingFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat()
{
  return &type metadata for _BPlistEncodingFormat;
}

void *type metadata accessor for _PlistEncodingStorageBPlist()
{
  return &unk_1ECA41B58;
}

_UNKNOWN **associated type witness table accessor for PlistEncodingFormat.Writer : PlistWriting in _BPlistEncodingFormat()
{
  return &protocol witness table for _BPlistEncodingFormat.Writer;
}

_UNKNOWN **associated type witness table accessor for PlistWriting.Reference : PlistEncodingReference in _BPlistEncodingFormat.Writer()
{
  return &protocol witness table for _BPlistEncodingFormat.Reference;
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.append(_:)(Swift::UInt64 a1)
{
  v2[1] = *MEMORY[0x1E4F143B8];
  _BPlistEncodingFormat.Writer.write(_:subtype:)(2, 4);
  v2[0] = 0;
  _BPlistEncodingFormat.Writer.write(_:)((char *)v2, 8);
  v2[0] = bswap64(a1);
  _BPlistEncodingFormat.Writer.write(_:)((char *)v2, 8);
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.appendTrue()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == 0x2000)
  {
    uint64_t v2 = *(unsigned char **)(v0 + 16);
    if (v2) {
      uint64_t v3 = v2 + 0x2000;
    }
    else {
      uint64_t v3 = 0;
    }
    Data._Representation.append(contentsOf:)(v2, v3);
    uint64_t v1 = 0;
  }
  *(unsigned char *)(*(void *)(v0 + 16) + v1) = 9;
  BOOL v4 = __OFADD__(v1, 1);
  uint64_t v5 = v1 + 1;
  if (v4) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 32) = v5;
  }
}

Swift::Void __swiftcall _BPlistEncodingFormat.Writer.appendFalse()()
{
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1 == 0x2000)
  {
    uint64_t v2 = *(unsigned char **)(v0 + 16);
    if (v2) {
      uint64_t v3 = v2 + 0x2000;
    }
    else {
      uint64_t v3 = 0;
    }
    Data._Representation.append(contentsOf:)(v2, v3);
    uint64_t v1 = 0;
  }
  *(unsigned char *)(*(void *)(v0 + 16) + v1) = 8;
  BOOL v4 = __OFADD__(v1, 1);
  uint64_t v5 = v1 + 1;
  if (v4) {
    __break(1u);
  }
  else {
    *(void *)(v0 + 32) = v5;
  }
}

void _BPlistEncodingFormat.Writer.append(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  Swift::Int64 v5 = 0;
  switch(v2)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x181D6D340);
      }
      Swift::Int64 v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      _BPlistEncodingFormat.Writer.append(_:count:)(5, v5);
      specialized Data._Representation.withUnsafeBytes<A>(_:)(a1, a2);
      return;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      Swift::Int64 v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_6;
    default:
      Swift::Int64 v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _BPlistEncodingFormat.Reference()
{
  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _BPlistEncodingFormat.Reference(uint64_t a1)
{
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _BPlistEncodingFormat.Reference()
{
  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _BPlistEncodingFormat.Reference(uint64_t *a1, uint64_t *a2)
{
  return specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized OrderedSet._regenerateHashTable()()
{
  Swift::Int v1 = v0[1];
  if (*v0) {
    uint64_t v2 = *(void *)(*v0 + 24) & 0x3FLL;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = static _HashTable.maximumUnhashedCount.getter();
  if (v2 || v4 < v3)
  {
    uint64_t v6 = MEMORY[0x185301200](v3);
    if (v2 <= v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = v2;
    }
    uint64_t v5 = specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(v1, v7, 0, v2);
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = swift_release();
  uint64_t *v0 = v5;
  return result;
}

uint64_t specialized static _HashTable.create<A>(uncheckedUniqueElements:scale:reservedScale:)(Swift::Int a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = MEMORY[0x185301200](*(void *)(a1 + 16));
  if (a3) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = a2;
  }
  if (v9 <= v8) {
    uint64_t v9 = v8;
  }
  if (v9 <= a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = v9;
  }
  uint64_t v11 = 0;
  if (v10 >= static _HashTable.minimumScale.getter())
  {
    uint64_t v11 = MEMORY[0x185301210](v10, a4);
    specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(a1, (void *)(v11 + 16));
  }
  return v11;
}

Swift::Int specialized _HashTable.UnsafeHandle.fill<A>(uncheckedUniqueElements:)(Swift::Int result, void *a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      Hasher.init(_seed:)();
      swift_retain();
      _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v5);
      uint64_t result = Hasher._finalize()();
      if (__OFSUB__(1 << *a2, 1)) {
        break;
      }
      _HashTable.BucketIterator.init(hashTable:startingAt:)();
      swift_release();
      long long v5 = v9;
      long long v6 = v10;
      long long v7 = v11;
      for (i = v12; (_HashTable.BucketIterator.isOccupied.getter() & 1) != 0; char v16 = i)
      {
        _HashTable.BucketIterator.advance()();
        long long v13 = v5;
        long long v14 = v6;
        long long v15 = v7;
      }
      uint64_t result = _HashTable.BucketIterator.currentValue.setter();
      if (++v4 == v2) {
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

Swift::Int specialized _HashTable.UnsafeHandle._find<A>(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Hasher.init(_seed:)();
  _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v10);
  Swift::Int result = Hasher._finalize()();
  if (__OFSUB__(1 << *a4, 1))
  {
    __break(1u);
  }
  else
  {
    _HashTable.UnsafeHandle.startFind(_:)();
    Swift::Int value = v11;
    if ((v12 & 1) == 0)
    {
      do
      {
        uint64_t v8 = swift_retain();
        char v9 = specialized static _BPlistEncodingFormat.Reference.== infix(_:_:)(v8, a1);
        swift_release();
        if (v9) {
          break;
        }
        Swift::Int_optional v13 = _HashTable.BucketIterator.findNext()();
        Swift::Int value = v13.value;
      }
      while (!v13.is_nil);
    }
    return value;
  }
  return result;
}

unint64_t specialized OrderedSet._removeExistingMember(at:in:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2[1] + 16);
  if (!*v2)
  {
    if (!v4) {
      goto LABEL_16;
    }
    return specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
  }
  if ((*(void *)(*v2 + 16) & 0x3FLL) == (*(void *)(*v2 + 24) & 0x3FLL))
  {
    if (!v4) {
      goto LABEL_16;
    }
  }
  else if (v4 <= static _HashTable.minimumCapacity(forScale:)())
  {
LABEL_16:
    uint64_t v9 = specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    specialized OrderedSet._regenerateHashTable()();
    return v9;
  }
  unint64_t result = swift_isUniquelyReferenced_native();
  uint64_t v7 = *v2;
  if ((result & 1) == 0)
  {
    if (!v7) {
      goto LABEL_21;
    }
    uint64_t v7 = _HashTable.copy()();
    unint64_t result = swift_release();
    *uint64_t v2 = v7;
  }
  if (v7)
  {
    swift_retain();
    unint64_t result = specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(a2, (void *)(v7 + 16), v7 + 32, (uint64_t)v2);
    uint64_t v8 = a1 + 1;
    if (__OFADD__(a1, 1))
    {
      __break(1u);
    }
    else if (v8 >= a1)
    {
      specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(a1, v8, v2[1], (void *)(v7 + 16));
      swift_release();
      return specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    }
    __break(1u);
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v5 + 24 * a1;
    long long v9 = *(_OWORD *)(v7 + 32);
    uint64_t v8 = (unsigned char *)(v7 + 32);
    char v10 = v8[16];
    unint64_t v11 = v6 - 1;
    *(_OWORD *)a2 = v9;
    *(unsigned char *)(a2 + 16) = v10;
    uint64_t v12 = v6 - 1 - a1;
    if (v12 >= 0)
    {
      uint64_t result = (uint64_t)memmove(v8, v8 + 24, 24 * v12);
      *(void *)(v5 + 16) = v11;
      *uint64_t v2 = v5;
      return result;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1)
{
  return specialized ContiguousArray.remove(at:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
}

uint64_t specialized ContiguousArray.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = a2(v5);
    *uint64_t v2 = v5;
  }
  unint64_t v7 = *(void *)(v5 + 16);
  if (v7 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = v7 - 1;
    uint64_t v9 = v7 - 1 - a1;
    if (v9 >= 0)
    {
      uint64_t v10 = v5 + 8 * a1;
      uint64_t v11 = *(void *)(v10 + 32);
      memmove((void *)(v10 + 32), (const void *)(v10 + 40), 8 * v9);
      *(void *)(v5 + 16) = v8;
      specialized ContiguousArray._endMutation()();
      return v11;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized _HashTable.UnsafeHandle.delete(bucket:hashValueGenerator:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _HashTable.BucketIterator.init(hashTable:startingAt:)();
  _HashTable.BucketIterator.advance()();
  long long v36 = v22;
  long long v37 = v23;
  long long v38 = v24;
  char v6 = v25;
  char v39 = v25;
  uint64_t v8 = *((void *)&v23 + 1);
  uint64_t v7 = v23;
  uint64_t v10 = *((void *)&v24 + 1);
  uint64_t v9 = v24;
  if (_HashTable.BucketIterator.isOccupied.getter())
  {
    uint64_t v11 = _HashTable.UnsafeHandle.firstOccupiedBucketInChain(with:)();
    if (_HashTable.BucketIterator.isOccupied.getter())
    {
      long long v12 = v22;
      do
      {
        long long v30 = v12;
        uint64_t v31 = v7;
        uint64_t v32 = v8;
        uint64_t v33 = v9;
        uint64_t v34 = v10;
        char v35 = v6 & 1;
        unint64_t result = _HashTable.BucketIterator.currentValue.getter();
        if (v15)
        {
LABEL_22:
          __break(1u);
          return result;
        }
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        if (result >= *(void *)(*(void *)(a4 + 8) + 16)) {
          goto LABEL_20;
        }
        Hasher.init(_seed:)();
        swift_retain();
        _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)v21);
        Swift::Int v16 = Hasher._finalize()();
        unint64_t result = swift_release();
        uint64_t v17 = 1 << *a2;
        if (__OFSUB__(v17, 1)) {
          goto LABEL_21;
        }
        uint64_t v18 = (v17 - 1) & v16;
        if (a1 >= v11)
        {
          if (v18 < v11) {
            goto LABEL_4;
          }
        }
        else if (v18 >= v11)
        {
          goto LABEL_15;
        }
        if (a1 >= v18)
        {
LABEL_15:
          _HashTable.BucketIterator.currentValue.getter();
          _HashTable.UnsafeHandle.subscript.setter();
          goto LABEL_5;
        }
LABEL_4:
        uint64_t v7 = a1;
LABEL_5:
        a1 = v7;
        _HashTable.BucketIterator.advance()();
        long long v20 = v22;
        long long v26 = v22;
        long long v27 = v23;
        long long v28 = v24;
        char v6 = v25;
        char v29 = v25;
        uint64_t v8 = *((void *)&v23 + 1);
        uint64_t v7 = v23;
        uint64_t v10 = *((void *)&v24 + 1);
        uint64_t v9 = v24;
        char v13 = _HashTable.BucketIterator.isOccupied.getter();
        long long v12 = v20;
      }
      while ((v13 & 1) != 0);
    }
  }

  return _HashTable.UnsafeHandle.subscript.setter();
}

void specialized _HashTable.UnsafeHandle.adjustContents<A>(preparingForRemovalOf:in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (v5 >= 1)
  {
    unint64_t v8 = *(void *)(a3 + 16);
    uint64_t v9 = v8 - v5;
    if ((uint64_t)v8 < v5) {
      ++v9;
    }
    uint64_t v36 = a2 - a1;
    if (a1 >= v9 >> 1)
    {
      uint64_t v4 = a2;
      if (__OFSUB__(v8, a2))
      {
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      if ((uint64_t)(v8 - a2) >= MEMORY[0x1853011C0](*a4 & 0x3FLL) / 3)
      {
LABEL_38:
        _HashTable.BucketIterator.init(hashTable:startingAt:)();
        uint64_t v26 = v50;
        long long v46 = v49;
        *(_OWORD *)char v47 = v50;
        *(_OWORD *)&v47[16] = v51;
        char v48 = v52;
        while (1)
        {
          long long v39 = v46;
          *(void *)long long v40 = v26;
          *(_OWORD *)&v40[8] = *(_OWORD *)&v47[8];
          *(void *)&v40[24] = *(void *)&v47[24];
          char v41 = v48;
          uint64_t v27 = _HashTable.BucketIterator.currentValue.getter();
          if ((v28 & 1) == 0 && v27 >= v4)
          {
            if (__OFSUB__(v27, v5)) {
              goto LABEL_59;
            }
            _HashTable.BucketIterator.currentValue.setter();
          }
          _HashTable.BucketIterator.advance()();
          uint64_t v26 = *(void *)v47;
          if (!*(void *)v47) {
            return;
          }
        }
      }
      if ((uint64_t)v8 < v4) {
        goto LABEL_68;
      }
      if (v4 < 0)
      {
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      if (v8 != v4)
      {
        if (v8 <= v4)
        {
LABEL_70:
          __break(1u);
          return;
        }
        swift_retain();
        while (1)
        {
          Hasher.init(_seed:)();
          swift_retain();
          _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v39);
          Hasher._finalize()();
          if (__OFSUB__(1 << *a4, 1)) {
            goto LABEL_60;
          }
          _HashTable.BucketIterator.init(hashTable:startingAt:)();
          uint64_t v29 = *((void *)&v43 + 1);
          uint64_t v30 = v43;
          uint64_t v31 = *((void *)&v44 + 1);
          uint64_t v32 = v44;
          char v33 = v45;
          long long v38 = v42;
          long long v39 = v42;
          *(_OWORD *)long long v40 = v43;
          *(_OWORD *)&v40[16] = v44;
          char v41 = v45;
          while ((_HashTable.BucketIterator.isOccupied.getter() & 1) != 0)
          {
            long long v49 = v38;
            *(void *)&long long v50 = v30;
            *((void *)&v50 + 1) = v29;
            *(void *)&long long v51 = v32;
            *((void *)&v51 + 1) = v31;
            char v52 = v33 & 1;
            uint64_t v34 = _HashTable.BucketIterator.currentValue.getter();
            if ((v35 & 1) == 0 && v34 == v4) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            long long v38 = v39;
            long long v46 = v39;
            *(_OWORD *)char v47 = *(_OWORD *)v40;
            *(_OWORD *)&v47[16] = *(_OWORD *)&v40[16];
            char v33 = v41;
            char v48 = v41;
            uint64_t v29 = *(void *)&v40[8];
            uint64_t v30 = *(void *)v40;
            uint64_t v31 = *(void *)&v40[24];
            uint64_t v32 = *(void *)&v40[16];
          }
          if (__OFSUB__(v4, v36)) {
            goto LABEL_61;
          }
          ++v4;
          _HashTable.BucketIterator.currentValue.setter();
          swift_release();
          if (v4 == v8)
          {
            swift_release();
            return;
          }
        }
      }
    }
    else
    {
      if (MEMORY[0x1853011C0](*a4 & 0x3FLL) / 3 <= a1)
      {
        _HashTable.BucketIterator.init(hashTable:startingAt:)();
        uint64_t v23 = v50;
        long long v46 = v49;
        *(_OWORD *)char v47 = v50;
        *(_OWORD *)&v47[16] = v51;
        char v48 = v52;
        while (1)
        {
          long long v39 = v46;
          *(void *)long long v40 = v23;
          *(_OWORD *)&v40[8] = *(_OWORD *)&v47[8];
          *(void *)&v40[24] = *(void *)&v47[24];
          char v41 = v48;
          uint64_t v24 = _HashTable.BucketIterator.currentValue.getter();
          if ((v25 & 1) == 0 && v24 < a1)
          {
            if (__OFADD__(v24, v5))
            {
              __break(1u);
              goto LABEL_38;
            }
            _HashTable.BucketIterator.currentValue.setter();
          }
          _HashTable.BucketIterator.advance()();
          uint64_t v23 = *(void *)v47;
          if (!*(void *)v47) {
            goto LABEL_20;
          }
        }
      }
      if (a1 < 0) {
        goto LABEL_66;
      }
      if (v8 < a1)
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if (a1)
      {
        swift_retain();
        uint64_t v10 = 0;
        while (1)
        {
          Hasher.init(_seed:)();
          swift_retain();
          _BPlistEncodingFormat.Reference.hash(into:)((uint64_t)&v39);
          Hasher._finalize()();
          if (__OFSUB__(1 << *a4, 1)) {
            break;
          }
          _HashTable.BucketIterator.init(hashTable:startingAt:)();
          uint64_t v11 = *((void *)&v43 + 1);
          uint64_t v12 = v43;
          uint64_t v13 = *((void *)&v44 + 1);
          uint64_t v14 = v44;
          char v15 = v45;
          long long v37 = v42;
          long long v39 = v42;
          *(_OWORD *)long long v40 = v43;
          *(_OWORD *)&v40[16] = v44;
          char v41 = v45;
          while ((_HashTable.BucketIterator.isOccupied.getter() & 1) != 0)
          {
            long long v49 = v37;
            *(void *)&long long v50 = v12;
            *((void *)&v50 + 1) = v11;
            *(void *)&long long v51 = v14;
            *((void *)&v51 + 1) = v13;
            char v52 = v15 & 1;
            uint64_t v16 = _HashTable.BucketIterator.currentValue.getter();
            if ((v17 & 1) == 0 && v16 == v10) {
              break;
            }
            _HashTable.BucketIterator.advance()();
            long long v37 = v39;
            long long v46 = v39;
            *(_OWORD *)char v47 = *(_OWORD *)v40;
            *(_OWORD *)&v47[16] = *(_OWORD *)&v40[16];
            char v15 = v41;
            char v48 = v41;
            uint64_t v11 = *(void *)&v40[8];
            uint64_t v12 = *(void *)v40;
            uint64_t v13 = *(void *)&v40[24];
            uint64_t v14 = *(void *)&v40[16];
          }
          uint64_t v5 = v36;
          if (__OFADD__(v10, v36)) {
            goto LABEL_58;
          }
          ++v10;
          _HashTable.BucketIterator.currentValue.setter();
          swift_release();
          if (v10 == a1)
          {
            swift_release();
            goto LABEL_20;
          }
        }
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
        goto LABEL_62;
      }
LABEL_20:
      uint64_t v18 = a4[1];
      if (__OFSUB__(v18 >> 6, v5))
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      uint64_t v19 = 1 << *a4;
      BOOL v20 = __OFSUB__(v19, 1);
      uint64_t v21 = v19 - 1;
      if (v20)
      {
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v22 = (v21 & (((v18 >> 6) - v5) >> 63)) + (v18 >> 6) - v5;
      if (v22 < v21) {
        uint64_t v21 = 0;
      }
      a4[1] = a4[1] & 0x3FLL | ((v22 - v21) << 6);
    }
  }
}

uint64_t specialized ContiguousArray._customRemoveLast()()
{
  return specialized ContiguousArray._customRemoveLast()((uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
}

uint64_t specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v53 = a6;
  v55[3] = &type metadata for _CodingKey;
  unint64_t v48 = lazy protocol witness table accessor for type _CodingKey and conformance _CodingKey();
  v55[4] = v48;
  uint64_t v15 = swift_allocObject();
  v55[0] = v15;
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = a4;
  *(unsigned char *)(v15 + 40) = a5;
  *(void *)(a8 + 96) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v16 = _CodingKey.stringValue.getter(a2, a3, a4, a5);
  uint64_t v52 = a7;
  *(void *)(a8 + 104) = a7 | 0x8000000000000000;
  *(void *)(a8 + 112) = v16;
  *(void *)(a8 + 120) = v17;
  swift_release();
  uint64_t v49 = *(void *)(a1 + 24);
  uint64_t v54 = a1;
  uint64_t v51 = *(void *)(a1 + 32);
  long long v50 = __swift_project_boxed_opaque_existential_1(v55, (uint64_t)&type metadata for _CodingKey);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  v21.n128_f64[0] = MEMORY[0x1F4188790](v18);
  unint64_t v22 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v24 = off_1ECA30F70;
  ((void (*)(char *, void *, ValueMetadata *, __n128))off_1ECA30F70->initializeWithCopy)((char *)&v47 - v22, v50, &type metadata for _CodingKey, v21);
  uint64_t v25 = ((uint64_t (*)(char *, void, uint64_t, ValueMetadata *))v24->storeEnumTagSinglePayload)((char *)&v47 - v22, 0, 1, &type metadata for _CodingKey);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v29 = MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v47 - v22;
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))((char *)&v47 - v22, (char *)&v47 - v22, v18, v29);
  if (((unsigned int (*)(char *, uint64_t, ValueMetadata *))v24->getEnumTagSinglePayload)((char *)&v47 - v22, 1, &type metadata for _CodingKey) == 1)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v32 = v51;
    swift_bridgeObjectRetain();
    v31((char *)&v47 - v22, v18);
    v31((char *)&v47 - v22, v18);
    unint64_t v33 = v53;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v34 = v33 >> 62;
    char v35 = (uint64_t *)v33;
    if (v33 >> 62)
    {
LABEL_3:
      if (v34 != 1)
      {
        uint64_t v42 = 0;
LABEL_16:
        uint64_t v45 = v49;
        *(void *)(a8 + 16) = MEMORY[0x1E4FBC860];
        *(void *)(a8 + 24) = v45;
        *(void *)(a8 + 32) = v32;
        *(void *)(a8 + 40) = v35;
        *(void *)(a8 + 48) = v42;
        specialized _BPlistEncodingFormat.init()((uint64_t *)v56);
        long long v46 = v56[1];
        *(_OWORD *)(a8 + 56) = v56[0];
        *(_OWORD *)(a8 + 72) = v46;
        *(void *)(a8 + 88) = v57;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
        return a8;
      }
      uint64_t v36 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
      uint64_t v42 = *v36;
      swift_release();
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v36 = (uint64_t *)(v33 + 64);
    goto LABEL_15;
  }
  initializeWithTake = (void (*)(char *, char *, ValueMetadata *))v24->initializeWithTake;
  initializeWithTake(v27, v30, &type metadata for _CodingKey);
  char v35 = (uint64_t *)swift_allocObject();
  unint64_t v38 = v48;
  v35[5] = (uint64_t)&type metadata for _CodingKey;
  v35[6] = v38;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35 + 2);
  initializeWithTake((char *)boxed_opaque_existential_1, v27, &type metadata for _CodingKey);
  long long v40 = *(void (**)(char *, uint64_t))(v19 + 8);
  uint64_t v32 = v51;
  swift_bridgeObjectRetain();
  v40(v23, v18);
  unint64_t v33 = v53;
  v35[7] = v53;
  unint64_t v34 = v33 >> 62;
  if (!(v33 >> 62))
  {
    char v41 = (uint64_t *)(v33 + 64);
    goto LABEL_10;
  }
  if (v34 == 1)
  {
    char v41 = (uint64_t *)((v33 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    uint64_t v43 = *v41;
    swift_retain();
    goto LABEL_12;
  }
  uint64_t v43 = 0;
LABEL_12:
  uint64_t result = v54;
  if (!__OFADD__(v43, 1))
  {
    v35[8] = v43 + 1;
    swift_release();
    swift_release();
    if (v34) {
      goto LABEL_3;
    }
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t specialized __PlistReferencingEncoderBPlist.init(referencing:at:codingPathNode:wrapping:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v48 = a3;
  *(void *)&long long v51 = a6;
  *((void *)&v51 + 1) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v50);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(boxed_opaque_existential_1, a2, a6);
  *(void *)(a5 + 96) = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v13 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v46 = a4;
  *(void *)(a5 + 104) = a4 | 0x8000000000000000;
  *(void *)(a5 + 112) = v13;
  *(void *)(a5 + 120) = v14;
  swift_release();
  uint64_t v44 = *(void *)(a1 + 24);
  uint64_t v49 = a1;
  uint64_t v47 = *(void *)(a1 + 32);
  long long v43 = v51;
  uint64_t v15 = v51;
  uint64_t v16 = __swift_project_boxed_opaque_existential_1(v50, v51);
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v17 - 8);
  uint64_t v18 = *(void *)(v45 + 64);
  v19.n128_f64[0] = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v15 - 8);
  (*(void (**)(char *, void *, uint64_t, __n128))(v21 + 16))(v20, v16, v15, v19);
  uint64_t v22 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, v15);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v27 = v45;
  (*(void (**)(char *, char *, uint64_t, double))(v45 + 16))(v20, v20, v17, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v15) == 1)
  {
    uint64_t v28 = *(void (**)(char *, uint64_t))(v27 + 8);
    uint64_t v29 = v47;
    swift_bridgeObjectRetain();
    v28(v20, v17);
    v28(v20, v17);
    unint64_t v30 = v48;
    swift_retain();
    swift_release();
    swift_release();
    unint64_t v31 = v30 >> 62;
    uint64_t v32 = v30;
    if (v30 >> 62) {
      goto LABEL_3;
    }
LABEL_14:
    unint64_t v33 = (uint64_t *)(v30 + 64);
    goto LABEL_15;
  }
  unint64_t v34 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  v34(v24, v20, v15);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 40) = v43;
  char v35 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v32 + 16));
  v34((char *)v35, v24, v15);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v29 = v47;
  swift_bridgeObjectRetain();
  v36(v20, v17);
  unint64_t v30 = v48;
  *(void *)(v32 + 56) = v48;
  unint64_t v31 = v30 >> 62;
  if (!(v30 >> 62))
  {
    long long v37 = (uint64_t *)(v30 + 64);
    goto LABEL_10;
  }
  if (v31 == 1)
  {
    long long v37 = (uint64_t *)((v30 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_10:
    uint64_t v39 = *v37;
    swift_retain();
    goto LABEL_12;
  }
  uint64_t v39 = 0;
LABEL_12:
  if (__OFADD__(v39, 1))
  {
    __break(1u);
    JUMPOUT(0x181D6F03CLL);
  }
  *(void *)(v32 + 64) = v39 + 1;
  swift_release();
  swift_release();
  if (!v31) {
    goto LABEL_14;
  }
LABEL_3:
  if (v31 == 1)
  {
    unint64_t v33 = (uint64_t *)((v30 & 0x3FFFFFFFFFFFFFFFLL) + 32);
LABEL_15:
    uint64_t v38 = *v33;
    swift_release();
    goto LABEL_16;
  }
  uint64_t v38 = 0;
LABEL_16:
  uint64_t v40 = v44;
  *(void *)(a5 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a5 + 24) = v40;
  *(void *)(a5 + 32) = v29;
  *(void *)(a5 + 40) = v32;
  *(void *)(a5 + 48) = v38;
  specialized _BPlistEncodingFormat.init()((uint64_t *)v52);
  long long v41 = v52[1];
  *(_OWORD *)(a5 + 56) = v52[0];
  *(_OWORD *)(a5 + 72) = v41;
  *(void *)(a5 + 88) = v53;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
  return a5;
}

uint64_t sub_181D6F090()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_181D6F0D4()
{
  outlined consume of _CodingKey(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return MEMORY[0x1F4186498](v0, 41, 7);
}

void *type metadata accessor for _PlistUnkeyedEncodingContainerBPlist()
{
  return &unk_1ECA436B0;
}

uint64_t destroy for _BPlistEncodingFormat.Writer(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 40);
  unint64_t v3 = *(void *)(a1 + 48);

  return outlined consume of Data._Representation(v2, v3);
}

uint64_t initializeWithCopy for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v4 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(v3, v4);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  return a1;
}

uint64_t assignWithCopy for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  unint64_t v4 = *(void *)(a2 + 48);
  outlined copy of Data._Representation(v5, v4);
  uint64_t v6 = *(void *)(a1 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  outlined consume of Data._Representation(v6, v7);
  return a1;
}

uint64_t assignWithTake for _BPlistEncodingFormat.Writer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  long long v7 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v7;
  *(void *)(a1 + 48) = v4;
  outlined consume of Data._Representation(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for _BPlistEncodingFormat.Writer()
{
  return &type metadata for _BPlistEncodingFormat.Writer;
}

uint64_t IntegerFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2)
{
  return IntegerFormatStyle.Currency.format(_:)(a1, a2, (void (*)(void, double))type metadata accessor for ICUCurrencyNumberFormatter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUCurrencyNumberFormatter.create<A>(for:));
}

uint64_t IntegerFormatStyle.Percent.format(_:)(uint64_t a1, uint64_t a2)
{
  return IntegerFormatStyle.Currency.format(_:)(a1, a2, (void (*)(void, double))type metadata accessor for ICUPercentNumberFormatter, (uint64_t (*)(uint64_t, uint64_t, uint64_t))static ICUPercentNumberFormatter.create<A>(for:));
}

uint64_t IntegerFormatStyle.Currency.format(_:)(uint64_t a1, uint64_t a2, void (*a3)(void, double), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v98 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v97 = (char *)&v90 - v11;
  uint64_t v94 = *(void *)(*(void *)(v9 + 24) + 16);
  uint64_t v93 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v93);
  uint64_t v92 = (char *)&v90 - v12;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v95 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  id v96 = (char *)&v90 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v103 = (char *)&v90 - v19;
  MEMORY[0x1F4188790](v20);
  id v102 = (char *)&v90 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v108 = (char *)&v90 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v105 = (char *)&v90 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v90 - v27;
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v90 - v31;
  a3(0, v30);
  uint64_t v106 = a4(v4, v8, v9);
  uint64_t v109 = v9;
  if (!v106)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v108, a1, v8);
    return String.init<A>(_:radix:uppercase:)();
  }
  uint64_t v91 = AssociatedTypeWitness;
  uint64_t v100 = v13;
  uint64_t v101 = a1;
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v33(v32, a1, v8);
  char v34 = dispatch thunk of static BinaryInteger.isSigned.getter();
  unsigned __int8 v104 = v33;
  v33(v28, (uint64_t)v32, v8);
  unint64_t v99 = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  BOOL v35 = (v34 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v100 + 8);
  v36(v28, v8);
  uint64_t v38 = (void (*)(char *, char *, uint64_t))v104;
  long long v37 = v105;
  v104(v105, (uint64_t)v32, v8);
  uint64_t v107 = v32;
  if (!v35)
  {
    v36(v37, v8);
    goto LABEL_11;
  }
  uint64_t v111 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter() & 1) == 0)
  {
    uint64_t v90 = v36;
    char v59 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v60 = dispatch thunk of BinaryInteger.bitWidth.getter();
    if (v59)
    {
      if (v60 <= 64)
      {
        swift_getAssociatedConformanceWitness();
        dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
        uint64_t v74 = v108;
        dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
        char v75 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v76 = v74;
        uint64_t v36 = v90;
        v90(v76, v8);
        unint64_t v77 = v95;
        (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v95, v37, v8);
        if (v75)
        {
          v36(v77, v8);
          uint64_t v58 = v101;
          uint64_t v42 = v106;
          goto LABEL_42;
        }
        uint64_t v88 = v111;
        uint64_t v89 = dispatch thunk of BinaryInteger._lowWord.getter();
        v90(v77, v8);
        BOOL v67 = v89 < v88;
        uint64_t v36 = v90;
        goto LABEL_34;
      }
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      unint64_t v61 = v108;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
      unsigned __int8 v63 = v61;
      uint64_t v36 = v90;
      v90(v63, v8);
      v36(v37, v8);
      goto LABEL_28;
    }
    if (v60 < 64)
    {
      uint64_t v39 = dispatch thunk of BinaryInteger._lowWord.getter();
      uint64_t v40 = v37;
      uint64_t v41 = v8;
      uint64_t v36 = v90;
      goto LABEL_33;
    }
    uint64_t v36 = v90;
    v90(v37, v8);
LABEL_11:
    uint64_t v42 = v106;
    goto LABEL_12;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
  {
    uint64_t v39 = dispatch thunk of BinaryInteger._lowWord.getter();
    uint64_t v40 = v37;
    uint64_t v41 = v8;
LABEL_33:
    v36(v40, v41);
    BOOL v67 = v39 < v111;
LABEL_34:
    uint64_t v58 = v101;
    uint64_t v42 = v106;
    if (v67) {
      goto LABEL_42;
    }
    goto LABEL_12;
  }
  lazy protocol witness table accessor for type Int64 and conformance Int64();
  uint64_t v64 = v36;
  uint64_t v65 = v108;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
  char v62 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v66 = v65;
  uint64_t v36 = v64;
  v64(v66, v8);
  v64(v37, v8);
LABEL_28:
  uint64_t v58 = v101;
  uint64_t v42 = v106;
  if (v62) {
    goto LABEL_42;
  }
LABEL_12:
  uint64_t v43 = v42;
  uint64_t v44 = v107;
  uint64_t v45 = dispatch thunk of BinaryInteger.bitWidth.getter();
  uint64_t v46 = v102;
  v38(v102, v44, v8);
  if (v45 < 65)
  {
    uint64_t v55 = v38;
    uint64_t v56 = dispatch thunk of BinaryInteger.bitWidth.getter();
    v36(v46, v8);
    if (v56 == 64)
    {
      char v57 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v47 = v103;
      v55(v103, v107, v8);
      uint64_t v42 = v43;
      uint64_t v58 = v101;
      if ((v57 & 1) == 0) {
        goto LABEL_14;
      }
    }
    else
    {
      uint64_t v47 = v103;
      v55(v103, v107, v8);
      uint64_t v58 = v101;
    }
    v36(v47, v8);
    goto LABEL_39;
  }
  v36(v46, v8);
  uint64_t v47 = v103;
  v38(v103, v44, v8);
  uint64_t v42 = v43;
LABEL_14:
  unint64_t v48 = v36;
  uint64_t v111 = 0x7FFFFFFFFFFFFFFFLL;
  char v49 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v50 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if (v49)
  {
    if (v50 > 64)
    {
      lazy protocol witness table accessor for type Int64 and conformance Int64();
      long long v51 = v108;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
      char v52 = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v53 = v51;
      uint64_t v36 = v48;
      v48(v53, v8);
      uint64_t v54 = v47;
      goto LABEL_38;
    }
  }
  else if (v50 > 63)
  {
    uint64_t v110 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v68 = v108;
    (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v108, v47, v8);
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v69 = v96;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v52 = dispatch thunk of static Comparable.< infix(_:_:)();
    v48(v69, v8);
    uint64_t v54 = v68;
    uint64_t v36 = v48;
LABEL_38:
    v48(v54, v8);
    uint64_t v58 = v101;
    if ((v52 & 1) == 0) {
      goto LABEL_39;
    }
LABEL_42:
    v36(v107, v8);
    uint64_t v78 = (uint64_t)v97;
    dispatch thunk of BinaryInteger.words.getter();
    char v79 = dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v80 = v91;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unint64_t v82 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(v78, v79 & 1, v80, *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8));
    uint64_t v84 = v83;
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v78, v80);
    uint64_t v85 = *(void *)(v42 + 16);
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    swift_bridgeObjectRetain();
    ICUNumberFormatterBase.FormatResult.init(formatter:value:)(v85, v82, v84);
    uint64_t v87 = swift_retain_n();
    MEMORY[0x1F4188790](v87);
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v90 - 8), &v111);
    uint64_t v72 = v111;
    uint64_t v73 = v112;
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  dispatch thunk of BinaryInteger._lowWord.getter();
  uint64_t v36 = v48;
  v48(v47, v8);
  uint64_t v58 = v101;
LABEL_39:
  uint64_t v70 = v107;
  dispatch thunk of BinaryInteger._lowWord.getter();
  v36(v70, v8);
  type metadata accessor for ICUNumberFormatterBase.FormatResult();
  swift_initStackObject();
  ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
  uint64_t v71 = swift_retain_n();
  MEMORY[0x1F4188790](v71);
  swift_retain();
  specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)(&v90 - 8), &v111);
  uint64_t v72 = v111;
  uint64_t v73 = v112;
  swift_release();
LABEL_45:
  swift_release_n();
  if (v73) {
    return v72;
  }
  v104(v108, v58, v8);
  return String.init<A>(_:radix:uppercase:)();
}

uint64_t IntegerFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 IntegerFormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*IntegerFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerFormatStyle.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

{
  uint64_t v2;
  uint64_t vars8;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
  type metadata accessor for IntegerFormatStyle.Attributed.Style();

  return swift_storeEnumTagMultiPayload();
}

uint64_t static IntegerFormatStyle.== infix(_:_:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle);
}

uint64_t IntegerFormatStyle.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x697463656C6C6F63;
  }
  else {
    return 0x656C61636F6CLL;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IntegerFormatStyle<A>.CodingKeys()
{
  return PredicateExpressions.KeyPath<>.CodingKeys.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))PredicateExpressions.KeyPath<>.CodingKeys.hash(into:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.CodingKeys()
{
  return IntegerFormatStyle.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t IntegerFormatStyle.encode(to:)(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2, (void (*)(uint64_t, void, void))type metadata accessor for IntegerFormatStyle.CodingKeys);
}

Swift::Int IntegerFormatStyle.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.hash(into:));
}

uint64_t IntegerFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntegerFormatStyle.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  unint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for IntegerFormatStyle();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (_OWORD *)((char *)&v22 - v8);
  uint64_t v11 = (char *)&v22 + *(int *)(v10 + 36) - v8;
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0x1FFFFFFFELL;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_DWORD *)v11 + 18) = 131584;
  *((_WORD *)v11 + 38) = 512;
  uint64_t v12 = &v11[v3[9]];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = &v11[v3[10]];
  *(void *)uint64_t v14 = 0;
  unsigned char v14[8] = -1;
  v11[v3[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v26 = v6;
  uint64_t v15 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1((uint64_t)v11, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    uint64_t v29 = v7;
    uint64_t v16 = v24;
    uint64_t v17 = (uint64_t)v25;
    char v31 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v9;
    *uint64_t v9 = v30;
    LOBYTE(v30) = 1;
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v27);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v17, (uint64_t)v11);
    uint64_t v19 = v22;
    uint64_t v20 = v29;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v22 + 16))(v23, v18, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v19 + 8))(v18, v20);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>(long long *a1, long long *a2, uint64_t a3)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*IntegerFormatStyle.Percent.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 IntegerFormatStyle.Percent.init(locale:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v4 = (char *)a2 + *(int *)(type metadata accessor for IntegerFormatStyle.Percent() + 36);
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  unint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  __n128 v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0x3FF0000000000000;
  v4[8] = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  __n128 result = v10;
  *a2 = v10;
  return result;
}

uint64_t IntegerFormatStyle.Percent.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

uint64_t IntegerFormatStyle.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 36) + 73) = v6;
  return result;
}

uint64_t IntegerFormatStyle.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 36) + 77) = v6;
  return result;
}

uint64_t IntegerFormatStyle.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, v5, a4);
  uint64_t v11 = a5 + *(int *)(a4 + 36);
  uint64_t v12 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(unsigned char *)(v17 + 8) = 0;
  }
  return result;
}

uint64_t IntegerFormatStyle.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v4, a1);
  uint64_t v9 = a2 + *(int *)(a1 + 36);
  *(double *)uint64_t v9 = a3;
  *(unsigned char *)(v9 + 8) = 0;
  return result;
}

void IntegerFormatStyle.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  Swift::UInt v50;
  Swift::UInt v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  Swift::UInt8 v54;
  uint64_t v55;
  Swift::UInt64 v56;
  Swift::UInt64 v57;
  int v58;
  Swift::UInt v59;
  int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  Swift::UInt v64;
  int *v65;
  char *v66;
  uint64_t v67;
  int v68;
  Swift::UInt v69;
  Swift::UInt64 v70;
  Swift::UInt v71;
  void *v72;
  id v73;
  uint64_t v74;
  void *v75;
  id v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned char v81[144];
  char v82[8];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  char v98;
  char v99;
  void v100[18];
  unsigned char v101[144];
  unsigned char v102[152];

  uint64_t v3 = v2;
  uint64_t v78 = a2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  char v79 = v5;
  uint64_t v80 = v6;
  MEMORY[0x1F4188790](v5);
  unint64_t v77 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  __n128 v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v100, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v102, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v102) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v82, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v82[0] == 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = v82[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t v19 = v83;
    if (v83)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v84)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v85) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v85)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v22 = v86;
          if (!v86) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = v86;
        if (!v86)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v23 = v87;
          if (!v87)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v23);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v89;
          uint64_t v26 = v90;
          uint64_t v76 = v91;
          uint64_t v27 = v92;
          uint64_t v73 = v88;
          uint64_t v74 = v2;
          uint64_t v72 = v92;
          if (v88)
          {
            uint64_t v28 = v10;
            uint64_t v29 = v88;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            long long v30 = v25;
            char v31 = v26;
            uint64_t v32 = v76;
            unint64_t v33 = v27;
            char v34 = v29;
            _CFObject.hash(into:)();
            if (v25)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              BOOL v35 = v25;
              uint64_t v36 = v26;
              long long v37 = v25;
              _CFObject.hash(into:)();

              uint64_t v26 = v36;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            uint64_t v38 = v27;
            uint64_t v39 = v25;
            uint64_t v40 = v26;
            uint64_t v41 = v76;
            uint64_t v28 = v10;
            if (v25) {
              goto LABEL_27;
            }
          }
          BOOL v35 = v25;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v42 = v72;
          char v75 = v26;
          if (v26)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v43 = v26;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v44 = v35;
          __n128 v10 = v28;
          uint64_t v3 = v74;
          if (v76)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v45 = v76;
            _CFObject.hash(into:)();

            if (v42)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v46 = v42;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v42) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v46 = 0;
LABEL_38:
          uint64_t v47 = v75;

          unint64_t v48 = v93;
          if (v48)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v48);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v16 = v78;
          char v49 = v94;
          if (v94)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v49);
            swift_bridgeObjectRelease();
            if (v95)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              uint64_t v17 = v79;
              if (v96 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v50 = v96 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v50);
              }
              if (v97 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                long long v51 = v97 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v51);
              }
              if (v98 == 2)
              {
                char v52 = 0;
              }
              else
              {
                char v52 = v98 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v52);
              if (v99 == 2)
              {
                uint64_t v53 = 0;
              }
              else
              {
                uint64_t v54 = v99 & 1;
                Hasher._combine(_:)(1u);
                uint64_t v53 = v54;
              }
              Hasher._combine(_:)(v53);
              outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v101, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v95) {
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v22);
        swift_bridgeObjectRelease();
        uint64_t v23 = v87;
        if (!v87) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v101, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v24 = v81;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v82;
    }
    outlined retain of LocalePreferences(v24);
    if (!v84) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  uint64_t v16 = v78;
  uint64_t v17 = v79;
LABEL_59:
  uint64_t v55 = v3 + *(int *)(v16 + 36);
  if (*(unsigned char *)(v55 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v56 = *(void *)v55;
    Hasher._combine(_:)(1u);
    if ((v56 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      char v57 = v56;
    }
    else {
      char v57 = 0;
    }
    Hasher._combine(_:)(v57);
  }
  outlined init with take of LocalePreferences?(v55 + 16, (uint64_t)v102, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v58 = *(unsigned __int8 *)(v55 + 73);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  uint64_t v60 = *(unsigned __int16 *)(v55 + 74);
  unint64_t v61 = v60 | (*(unsigned __int8 *)(v55 + 76) << 16);
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v61 & 1);
    Hasher._combine(_:)((v61 >> 8) & 1);
    Hasher._combine(_:)(HIWORD(v61) & 1);
  }
  char v62 = v80;
  unsigned __int8 v63 = *(unsigned __int8 *)(v55 + 77);
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v64 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v64);
  }
  uint64_t v65 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v55 + v65[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v10, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v66 = v77;
    (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v77, v10, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v66, v17);
  }
  BOOL v67 = v55 + v65[10];
  uint64_t v68 = *(unsigned __int8 *)(v67 + 8);
  if (v68 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v69 = *(void *)v67;
    Hasher._combine(_:)(1u);
    if (v68)
    {
      Hasher._combine(_:)(1uLL);
      if ((v69 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = 0;
      }
      Hasher._combine(_:)(v70);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v69);
    }
  }
  uint64_t v71 = *(unsigned __int8 *)(v55 + v65[11]);
  if (v71 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v71);
  }
}

uint64_t static IntegerFormatStyle.Percent.== infix(_:_:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static IntegerFormatStyle.== infix(_:_:)(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IntegerFormatStyle.Percent);
}

uint64_t static IntegerFormatStyle.== infix(_:_:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  long long v10 = *a1;
  long long v13 = *a2;
  long long v14 = v10;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v14, (uint64_t)&v13) & 1) == 0) {
    return 0;
  }
  uint64_t v11 = *(int *)(a5(0, a3, a4) + 36);

  return static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + v11, (char *)a2 + v11);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Percent.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))IntegerFormatStyle.Percent.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, void, void, void))
{
  Hasher.init(_seed:)();
  a4(v8, *v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Percent.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t IntegerFormatStyle.Percent.encode(to:)(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.encode(to:)(a1, a2, (void (*)(uint64_t, void, void))type metadata accessor for IntegerFormatStyle.Percent.CodingKeys);
}

uint64_t IntegerFormatStyle.encode(to:)(void *a1, uint64_t a2, void (*a3)(uint64_t, void, void))
{
  a3(255, *(void *)(a2 + 16), *(void *)(a2 + 24));
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v11 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v8 = (long long *)v11[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v8;
  char v13 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v9 = v11[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v9)
  {
    LOBYTE(v12) = 1;
    type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int IntegerFormatStyle.Percent.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.Percent.hash(into:));
}

uint64_t IntegerFormatStyle.Percent.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v25 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntegerFormatStyle.Percent.CodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v6 = (char *)&v22 - v5;
  uint64_t v7 = type metadata accessor for IntegerFormatStyle.Percent();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (_OWORD *)((char *)&v22 - v8);
  uint64_t v11 = (char *)&v22 + *(int *)(v10 + 36) - v8;
  long long v12 = &v11[v3[9]];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(void *)uint64_t v11 = 0x3FF0000000000000;
  v11[8] = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0x1FFFFFFFELL;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_DWORD *)v11 + 18) = 131584;
  *((_WORD *)v11 + 38) = 512;
  long long v14 = &v11[v3[10]];
  *(void *)long long v14 = 0;
  unsigned char v14[8] = -1;
  v11[v3[11]] = 3;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v26 = v6;
  uint64_t v15 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1((uint64_t)v11, type metadata accessor for NumberFormatStyleConfiguration.Collection);
  }
  else
  {
    uint64_t v29 = v7;
    uint64_t v16 = v24;
    uint64_t v17 = (uint64_t)v25;
    char v31 = 0;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v18 = v9;
    *uint64_t v9 = v30;
    LOBYTE(v30) = 1;
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4(&lazy protocol witness table cache variable for type NumberFormatStyleConfiguration.Collection and conformance NumberFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for NumberFormatStyleConfiguration.Collection);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v27);
    outlined assign with take of NumberFormatStyleConfiguration.Collection(v17, (uint64_t)v11);
    uint64_t v19 = v22;
    uint64_t v20 = v29;
    (*(void (**)(uint64_t, _OWORD *, uint64_t))(v22 + 16))(v23, v18, v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return (*(uint64_t (**)(_OWORD *, uint64_t))(v19 + 8))(v18, v20);
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Percent@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.Percent.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Percent(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.Percent.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.Percent.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Percent(long long *a1, long long *a2, uint64_t a3)
{
  return static IntegerFormatStyle.Percent.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t (*IntegerFormatStyle.Currency.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t IntegerFormatStyle.Currency.currencyCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IntegerFormatStyle.Currency.init(code:locale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)a4 = *a3;
  *(void *)(a4 + 16) = a1;
  *(void *)(a4 + 24) = a2;
  uint64_t v4 = a4 + *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
  uint64_t v5 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v6 = v4 + v5[9];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 40) = 0x1FFFFFFFELL;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 48) = 0;
  *(_WORD *)(v4 + 72) = 512;
  *(_DWORD *)(v4 + 74) = 2;
  *(unsigned char *)(v4 + 78) = 2;
  uint64_t v9 = v4 + v5[10];
  *(void *)uint64_t v9 = 0;
  *(unsigned char *)(v9 + 8) = -1;
  *(unsigned char *)(v4 + v5[11]) = 1;
  *(unsigned char *)(v4 + v5[12]) = 3;
  return result;
}

uint64_t IntegerFormatStyle.Currency.attributed.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.attributed.getter(a1, a2);
}

uint64_t IntegerFormatStyle.Currency.grouping(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 40) + 73) = v6;
  return result;
}

__n128 IntegerFormatStyle.Currency.precision(_:)@<Q0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v11 = a1[1];
  long long v12 = *a1;
  __n128 v10 = (__n128)a1[2];
  uint64_t v6 = *((void *)a1 + 6);
  char v7 = *((unsigned char *)a1 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v8 = a3 + *(int *)(a2 + 40);
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + 32) = v11;
  __n128 result = v10;
  *(__n128 *)(v8 + 48) = v10;
  *(void *)(v8 + 64) = v6;
  *(unsigned char *)(v8 + 72) = v7;
  return result;
}

uint64_t IntegerFormatStyle.Currency.sign(strategy:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a1;
  int v7 = a1[1];
  int v8 = a1[2];
  int v9 = a1[3];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  if (v7) {
    int v11 = 256;
  }
  else {
    int v11 = 0;
  }
  int v12 = v11 | v6;
  if (v8) {
    int v13 = 0x10000;
  }
  else {
    int v13 = 0;
  }
  if (v9) {
    int v14 = 0x1000000;
  }
  else {
    int v14 = 0;
  }
  *(_DWORD *)(a3 + *(int *)(a2 + 40) + 74) = v12 | v13 | v14;
  return result;
}

uint64_t IntegerFormatStyle.Currency.decimalSeparator(strategy:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 40) + 78) = v6;
  return result;
}

uint64_t IntegerFormatStyle.Currency.rounded(rule:increment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, v5, a4);
  uint64_t v11 = a5 + *(int *)(a4 + 40);
  uint64_t v12 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v13 = v11 + *(int *)(v12 + 36);
  outlined destroy of FloatingPointRoundingRule?(v13);
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a1, v14);
  uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
  if ((a3 & 1) == 0)
  {
    uint64_t v17 = v11 + *(int *)(v12 + 40);
    *(void *)uint64_t v17 = a2;
    *(unsigned char *)(v17 + 8) = 0;
  }
  return result;
}

uint64_t IntegerFormatStyle.Currency.scale(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v4 = v3;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v4, a1);
  uint64_t v9 = a2 + *(int *)(a1 + 40);
  *(double *)uint64_t v9 = a3;
  *(unsigned char *)(v9 + 8) = 0;
  return result;
}

uint64_t IntegerFormatStyle.Currency.presentation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v7 + *(int *)(result + 44)) = v6;
  return result;
}

uint64_t IntegerFormatStyle.Currency.notation(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  uint64_t v7 = a3 + *(int *)(a2 + 40);
  uint64_t result = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  *(unsigned char *)(v7 + *(int *)(result + 48)) = v6;
  return result;
}

void IntegerFormatStyle.Currency.hash(into:)(uint64_t a1, uint64_t a2)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  Swift::UInt8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  Swift::UInt v49;
  Swift::UInt v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  Swift::UInt8 v53;
  uint64_t v54;
  Swift::UInt64 v55;
  Swift::UInt64 v56;
  uint64_t v57;
  int v58;
  Swift::UInt v59;
  unint64_t v60;
  unsigned int v61;
  int v62;
  Swift::UInt v63;
  int *v64;
  char *v65;
  uint64_t v66;
  int v67;
  Swift::UInt v68;
  Swift::UInt64 v69;
  Swift::UInt v70;
  void *v71;
  id v72;
  char *v73;
  void *v74;
  id v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned char v80[144];
  char v81[8];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  char v97;
  char v98;
  void v99[18];
  unsigned char v100[144];
  unsigned char v101[152];

  uint64_t v3 = v2;
  unint64_t v77 = a2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v78 = v5;
  char v79 = v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v76 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  MEMORY[0x1F4188790](v8 - 8);
  __n128 v10 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if ((v13(ObjectType, v11) & 1) == 0)
  {
    Hasher._combine(_:)(0);
    (*(void (**)(uint64_t, uint64_t))(v11 + 64))(ObjectType, v11);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 464);
    swift_unknownObjectRetain();
    v15(v99, ObjectType, v11);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v99, (uint64_t)v100, &demangling cache variable for type metadata for LocalePreferences?);
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v101, &demangling cache variable for type metadata for LocalePreferences?);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v101) == 1)
    {
      Swift::UInt8 v14 = 0;
      goto LABEL_5;
    }
    outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v81, &demangling cache variable for type metadata for LocalePreferences?);
    Hasher._combine(_:)(1u);
    if (v81[0] == 2)
    {
      uint64_t v18 = 0;
    }
    else
    {
      uint64_t v18 = v81[0] & 1;
      Hasher._combine(_:)(1u);
    }
    Hasher._combine(_:)(v18);
    uint64_t v19 = v82;
    if (v82)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v19 + 16));
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
        swift_bridgeObjectRetain();
        uint64_t v21 = v19 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v21 += 16;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        if (!v83)
        {
LABEL_14:
          Hasher._combine(_:)(0);
          if (!v84) {
            goto LABEL_15;
          }
          goto LABEL_22;
        }
LABEL_21:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (!v84)
        {
LABEL_15:
          Hasher._combine(_:)(0);
          uint64_t v22 = v85;
          if (!v85) {
            goto LABEL_16;
          }
          goto LABEL_23;
        }
LABEL_22:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t v22 = v85;
        if (!v85)
        {
LABEL_16:
          Hasher._combine(_:)(0);
          uint64_t v23 = v86;
          if (!v86)
          {
LABEL_17:
            Hasher._combine(_:)(0);
            goto LABEL_25;
          }
LABEL_24:
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          specialized Dictionary<>.hash(into:)(a1, v23);
          swift_bridgeObjectRelease();
LABEL_25:
          uint64_t v25 = v88;
          uint64_t v26 = v89;
          char v75 = v90;
          uint64_t v27 = v91;
          uint64_t v72 = v87;
          uint64_t v73 = v10;
          uint64_t v71 = v91;
          if (v87)
          {
            uint64_t v28 = v87;
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v29 = v25;
            long long v30 = v26;
            char v31 = v75;
            uint64_t v32 = v27;
            unint64_t v33 = v28;
            _CFObject.hash(into:)();
            if (v25)
            {
LABEL_27:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              char v34 = v25;
              BOOL v35 = v26;
              uint64_t v36 = v25;
              _CFObject.hash(into:)();

              uint64_t v26 = v35;
              goto LABEL_30;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            long long v37 = v27;
            uint64_t v38 = v25;
            uint64_t v39 = v26;
            uint64_t v40 = v75;
            if (v25) {
              goto LABEL_27;
            }
          }
          char v34 = v25;
          Hasher._combine(_:)(0);
LABEL_30:
          uint64_t v41 = v71;
          uint64_t v74 = v26;
          if (v26)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v42 = v26;
            _CFObject.hash(into:)();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v43 = v34;
          __n128 v10 = v73;
          if (v75)
          {
            Hasher._combine(_:)(1u);
            type metadata accessor for CFDictionaryRef(0);
            _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
            uint64_t v44 = v75;
            _CFObject.hash(into:)();

            if (v41)
            {
LABEL_35:
              Hasher._combine(_:)(1u);
              type metadata accessor for CFDictionaryRef(0);
              _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type CFDictionaryRef and conformance CFDictionaryRef, type metadata accessor for CFDictionaryRef);
              uint64_t v45 = v41;
              _CFObject.hash(into:)();

              goto LABEL_38;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v41) {
              goto LABEL_35;
            }
          }
          Hasher._combine(_:)(0);
          uint64_t v45 = 0;
LABEL_38:
          uint64_t v46 = v74;

          uint64_t v47 = v92;
          if (v47)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v47);
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          uint64_t v16 = v77;
          unint64_t v48 = v93;
          if (v93)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            specialized Dictionary<>.hash(into:)(a1, v48);
            swift_bridgeObjectRelease();
            if (v94)
            {
LABEL_43:
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
LABEL_46:
              uint64_t v17 = v78;
              if (v95 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                char v49 = v95 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v49);
              }
              if (v96 == 2)
              {
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v50 = v96 & 1;
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v50);
              }
              if (v97 == 2)
              {
                long long v51 = 0;
              }
              else
              {
                long long v51 = v97 & 1;
                Hasher._combine(_:)(1u);
              }
              Hasher._combine(_:)(v51);
              if (v98 == 2)
              {
                char v52 = 0;
              }
              else
              {
                uint64_t v53 = v98 & 1;
                Hasher._combine(_:)(1u);
                char v52 = v53;
              }
              Hasher._combine(_:)(v52);
              outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              outlined retain of LocalePreferences?((uint64_t)v100, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
              swift_unknownObjectRelease();
              goto LABEL_59;
            }
          }
          else
          {
            Hasher._combine(_:)(0);
            if (v94) {
              goto LABEL_43;
            }
          }
          Hasher._combine(_:)(0);
          goto LABEL_46;
        }
LABEL_23:
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Dictionary<>.hash(into:)(a1, v22);
        swift_bridgeObjectRelease();
        uint64_t v23 = v86;
        if (!v86) {
          goto LABEL_17;
        }
        goto LABEL_24;
      }
      outlined init with take of LocalePreferences?((uint64_t)v100, (uint64_t)v80, &demangling cache variable for type metadata for LocalePreferences?);
      uint64_t v24 = v80;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v81;
    }
    outlined retain of LocalePreferences(v24);
    if (!v83) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  Swift::UInt8 v14 = 1;
LABEL_5:
  Hasher._combine(_:)(v14);
  swift_unknownObjectRelease();
  uint64_t v16 = v77;
  uint64_t v17 = v78;
LABEL_59:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v54 = v3 + *(int *)(v16 + 40);
  if (*(unsigned char *)(v54 + 8))
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v55 = *(void *)v54;
    Hasher._combine(_:)(1u);
    if ((v55 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v56 = v55;
    }
    else {
      uint64_t v56 = 0;
    }
    Hasher._combine(_:)(v56);
  }
  char v57 = v79;
  outlined init with take of LocalePreferences?(v54 + 16, (uint64_t)v101, &demangling cache variable for type metadata for NumberFormatStyleConfiguration.Precision?);
  specialized Optional<A>.hash(into:)();
  uint64_t v58 = *(unsigned __int8 *)(v54 + 73);
  if (v58 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    char v59 = v58 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v59);
  }
  uint64_t v60 = *(unsigned int *)(v54 + 74);
  if (*(_DWORD *)(v54 + 74) == 2)
  {
    LOBYTE(v61) = 0;
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v60 & 1);
    Hasher._combine(_:)((v60 >> 8) & 1);
    Hasher._combine(_:)(WORD1(v60) & 1);
    unint64_t v61 = BYTE3(v60) & 1;
  }
  Hasher._combine(_:)(v61);
  char v62 = *(unsigned __int8 *)(v54 + 78);
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unsigned __int8 v63 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v63);
  }
  uint64_t v64 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  outlined init with copy of FloatingPointRoundingRule?(v54 + v64[9], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v10, 1, v17) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v65 = v76;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v76, v10, v17);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v57 + 8))(v65, v17);
  }
  uint64_t v66 = v54 + v64[10];
  BOOL v67 = *(unsigned __int8 *)(v66 + 8);
  if (v67 == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v68 = *(void *)v66;
    Hasher._combine(_:)(1u);
    if (v67)
    {
      Hasher._combine(_:)(1uLL);
      if ((v68 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v69 = v68;
      }
      else {
        uint64_t v69 = 0;
      }
      Hasher._combine(_:)(v69);
    }
    else
    {
      Hasher._combine(_:)(0);
      Hasher._combine(_:)(v68);
    }
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v54 + v64[11]));
  uint64_t v70 = *(unsigned __int8 *)(v54 + v64[12]);
  if (v70 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v70);
  }
}

uint64_t static IntegerFormatStyle.Currency.== infix(_:_:)(long long *a1, long long *a2)
{
  long long v4 = *a1;
  long long v8 = *a2;
  long long v9 = v4;
  if ((specialized static Locale.== infix(_:_:)((uint64_t)&v9, (uint64_t)&v8) & 1) == 0) {
    return 0;
  }
  BOOL v5 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);

  return static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((char *)a1 + v6, (char *)a2 + v6);
}

uint64_t IntegerFormatStyle.Currency.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x656C61636F6CLL;
  }
  if (a1 == 1) {
    return 0x79636E6572727563;
  }
  return 0x697463656C6C6F63;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))IntegerFormatStyle.Currency.CodingKeys.hash(into:));
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys()
{
  return IntegerFormatStyle.Currency.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized NSDecimal.FormatStyle.Currency.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t IntegerFormatStyle.Currency.encode(to:)(void *a1)
{
  type metadata accessor for IntegerFormatStyle.Currency.CodingKeys();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  BOOL v5 = (char *)v10 - v4;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v6 = v2;
  uint64_t v7 = (long long *)v10[0];
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v7;
  char v12 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v8 = v10[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v8)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 2;
    type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v6);
}

Swift::Int IntegerFormatStyle.Currency.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.Currency.hash(into:));
}

uint64_t IntegerFormatStyle.Currency.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v23 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  MEMORY[0x1F4188790](v23);
  uint64_t v22 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntegerFormatStyle.Currency.CodingKeys();
  swift_getWitnessTable();
  uint64_t v25 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v21 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  BOOL v5 = (char *)&v19 - v4;
  uint64_t v6 = type metadata accessor for IntegerFormatStyle.Currency();
  uint64_t v19 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v24 = v5;
  uint64_t v9 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v9) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v26 = v6;
  uint64_t v10 = (uint64_t)a1;
  uint64_t v12 = v21;
  long long v11 = v22;
  char v28 = 0;
  lazy protocol witness table accessor for type Locale and conformance Locale();
  uint64_t v13 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v8 = v27;
  LOBYTE(v27) = 1;
  *((void *)v8 + 2) = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v8 + 3) = v14;
  LOBYTE(v27) = 2;
  _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4(&lazy protocol witness table cache variable for type CurrencyFormatStyleConfiguration.Collection and conformance CurrencyFormatStyleConfiguration.Collection, (void (*)(uint64_t))type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v15 = (uint64_t)v11;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v13, v25);
  uint64_t v16 = v26;
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1(v15, (uint64_t)&v8[*(int *)(v26 + 40)], type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v17 = v19;
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v20, v8, v16);
  __swift_destroy_boxed_opaque_existential_1(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v8, v16);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Currency@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.Currency.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Currency(void *a1)
{
  return IntegerFormatStyle.Currency.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.Currency.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Currency(long long *a1, long long *a2)
{
  return static IntegerFormatStyle.Currency.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Percent.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance IntegerFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Currency.format(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t IntegerFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.parseStrategy.getter(a1, a2);
}

{
  uint64_t v4;
  double v5;
  uint64_t v6;
  _OWORD *v7;
  void (*v8)(_OWORD *, double);
  int *v9;
  uint64_t v11;

  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (_OWORD *)((char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void (**)(_OWORD *, double))(v4 + 16);
  v8(v7, v5);
  ((void (*)(uint64_t, _OWORD *, uint64_t))v8)(a2, v7, a1);
  swift_getWitnessTable();
  uint64_t v9 = (int *)type metadata accessor for IntegerParseStrategy();
  *(unsigned char *)(a2 + v9[11]) = 1;
  *(_OWORD *)(a2 + v9[13]) = *v7;
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1((uint64_t)v7 + *(int *)(a1 + 36), a2 + v9[12], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t IntegerFormatStyle.Currency.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 - 8);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (long long *)((char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void (**)(long long *, uint64_t, uint64_t, double))(v9 + 16);
  v14(v13, v3, a1, v11);
  ((void (*)(uint64_t, long long *, uint64_t))v14)(a2, v13, a1);
  swift_getWitnessTable();
  uint64_t v15 = (int *)type metadata accessor for IntegerParseStrategy();
  *(unsigned char *)(a2 + v15[11]) = 1;
  uint64_t v16 = v15[13];
  long long v19 = *v13;
  *(_OWORD *)(a2 + v16) = v19;
  outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v13 + *(int *)(a1 + 40), (uint64_t)v8, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v17 = *(void (**)(long long *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v17(v13, a1);
  swift_storeEnumTagMultiPayload();
  return _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1((uint64_t)v8, a2 + v15[12], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
}

uint64_t IntegerFormatStyle.Percent.parseStrategy.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.parseStrategy.getter(a1, a2);
}

uint64_t static FormatStyle.currency<A>(code:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = static LocaleCache.cache + 16;
  uint64_t v8 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v8);
  closure #1 in LocaleCache.autoupdatingCurrent.getter(v7, &v17);
  os_unfair_lock_unlock(v8);
  swift_release_n();
  uint64_t v9 = v17;
  uint64_t v10 = _sSo15CFDictionaryRefaAB14CoreFoundation9_CFObjectSCWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type _LocaleAutoupdating and conformance _LocaleAutoupdating, (void (*)(uint64_t))type metadata accessor for _LocaleAutoupdating);
  *a3 = v9;
  a3[1] = v10;
  a3[2] = a1;
  a3[3] = a2;
  double v11 = (char *)a3 + *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
  uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v13 = &v11[v12[9]];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(void *)double v11 = 0;
  v11[8] = 1;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 5) = 0x1FFFFFFFELL;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 6) = 0;
  *((_WORD *)v11 + 36) = 512;
  *(_DWORD *)(v11 + 74) = 2;
  v11[78] = 2;
  uint64_t v16 = &v11[v12[10]];
  *(void *)uint64_t v16 = 0;
  v16[8] = -1;
  v11[v12[11]] = 1;
  v11[v12[12]] = 3;
  return result;
}

uint64_t IntegerFormatStyle.Attributed.Style.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1;
  uint64_t v4 = type metadata accessor for IntegerFormatStyle.Currency();
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v26 - v5;
  uint64_t v7 = type metadata accessor for IntegerFormatStyle.Percent();
  uint64_t v27 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v26 - v8;
  uint64_t v10 = type metadata accessor for IntegerFormatStyle();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v26 - v12;
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v17, v2, a2, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = v27;
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v9, v17, v7);
      uint64_t v21 = v29;
      Hasher._combine(_:)(1uLL);
      IntegerFormatStyle.hash(into:)(v21, v7);
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v7);
    }
    else
    {
      uint64_t v24 = v28;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v6, v17, v4);
      uint64_t v25 = v29;
      Hasher._combine(_:)(2uLL);
      IntegerFormatStyle.Currency.hash(into:)(v25, v4);
      return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, v4);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v17, v10);
    uint64_t v23 = v29;
    Hasher._combine(_:)(0);
    IntegerFormatStyle.hash(into:)(v23, v10);
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

uint64_t static IntegerFormatStyle.Attributed.Style.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v2 = type metadata accessor for IntegerFormatStyle.Currency();
  uint64_t v51 = *(void *)(v2 - 8);
  uint64_t v52 = v2;
  MEMORY[0x1F4188790](v2);
  unint64_t v48 = (char *)&v47 - v3;
  uint64_t v4 = type metadata accessor for IntegerFormatStyle.Percent();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v47 = (char *)&v47 - v5;
  uint64_t v6 = type metadata accessor for IntegerFormatStyle();
  uint64_t v53 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (long long *)((char *)&v47 - v7);
  uint64_t v9 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v54 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (long long *)((char *)&v47 - v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (long long *)((char *)&v47 - v16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v56 = *(void *)(TupleTypeMetadata2 - 8);
  double v19 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v23 = (char *)&v47 + *(int *)(v22 + 48) - v20;
  uint64_t v55 = v10;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v24((char *)&v47 - v20, v57, v9, v19);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v23, v58, v9);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      ((void (*)(long long *, char *, uint64_t))v24)(v14, v21, v9);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v27 = v49;
        uint64_t v26 = v50;
        uint64_t v28 = (long long *)v47;
        (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v47, v23, v50);
        long long v29 = *v14;
        long long v59 = *v28;
        long long v60 = v29;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v60, (uint64_t)&v59) & 1) != 0
          && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v14 + *(int *)(v26 + 36), (char *)v28 + *(int *)(v26 + 36)) & 1) != 0)
        {
          long long v30 = *(void (**)(long long *, uint64_t))(v27 + 8);
          v30(v28, v26);
          v30(v14, v26);
LABEL_25:
          uint64_t v39 = 1;
LABEL_29:
          uint64_t v40 = v55;
          goto LABEL_30;
        }
        uint64_t v42 = *(void (**)(long long *, uint64_t))(v27 + 8);
        v42(v28, v26);
        v42(v14, v26);
        goto LABEL_28;
      }
      (*(void (**)(long long *, uint64_t))(v49 + 8))(v14, v50);
    }
    else
    {
      uint64_t v32 = v54;
      ((void (*)(char *, char *, uint64_t))v24)(v54, v21, v9);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v33 = v51;
        char v34 = v48;
        BOOL v35 = v23;
        uint64_t v36 = v52;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v48, v35, v52);
        long long v37 = *(_OWORD *)v32;
        long long v59 = *(_OWORD *)v34;
        long long v60 = v37;
        if ((specialized static Locale.== infix(_:_:)((uint64_t)&v60, (uint64_t)&v59) & 1) != 0
          && (*((void *)v32 + 2) == *((void *)v34 + 2) && *((void *)v32 + 3) == *((void *)v34 + 3)
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && specialized static CurrencyFormatStyleConfiguration.Collection.== infix(_:_:)((uint64_t)&v32[*(int *)(v36 + 40)], (uint64_t)&v34[*(int *)(v36 + 40)]))
        {
          uint64_t v38 = *(void (**)(char *, uint64_t))(v33 + 8);
          v38(v34, v36);
          v38(v32, v36);
          goto LABEL_25;
        }
        uint64_t v41 = *(void (**)(char *, uint64_t))(v33 + 8);
        v41(v34, v36);
        v41(v32, v36);
LABEL_28:
        uint64_t v39 = 0;
        goto LABEL_29;
      }
      (*(void (**)(char *, uint64_t))(v51 + 8))(v32, v52);
    }
  }
  else
  {
    uint64_t v31 = v53;
    ((void (*)(long long *, char *, uint64_t))v24)(v17, v21, v9);
    if (!swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(long long *, char *, uint64_t))(v31 + 32))(v8, v23, v6);
      long long v43 = *v17;
      long long v59 = *v8;
      long long v60 = v43;
      if ((specialized static Locale.== infix(_:_:)((uint64_t)&v60, (uint64_t)&v59) & 1) != 0
        && (static NumberFormatStyleConfiguration.Collection.== infix(_:_:)((char *)v17 + *(int *)(v6 + 36), (char *)v8 + *(int *)(v6 + 36)) & 1) != 0)
      {
        uint64_t v44 = *(void (**)(long long *, uint64_t))(v31 + 8);
        v44(v8, v6);
        v44(v17, v6);
        goto LABEL_25;
      }
      uint64_t v45 = *(void (**)(long long *, uint64_t))(v31 + 8);
      v45(v8, v6);
      v45(v17, v6);
      goto LABEL_28;
    }
    (*(void (**)(long long *, uint64_t))(v31 + 8))(v17, v6);
  }
  uint64_t v39 = 0;
  uint64_t v40 = v56;
  uint64_t v9 = TupleTypeMetadata2;
LABEL_30:
  (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v9);
  return v39;
}

uint64_t IntegerFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656765746E69 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x79636E6572727563 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t IntegerFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x72656765746E69;
  }
  if (a1 == 1) {
    return 0x746E6563726570;
  }
  return 0x79636E6572727563;
}

uint64_t IntegerFormatStyle.Attributed.Style.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v53 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v57 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v37 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v54 = (char *)&v37 - v4;
  uint64_t v5 = type metadata accessor for IntegerFormatStyle.Currency();
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v52 = (char *)&v37 - v6;
  uint64_t v7 = type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys();
  uint64_t v8 = swift_getWitnessTable();
  uint64_t v45 = v7;
  uint64_t v43 = v8;
  uint64_t v9 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v46 = (char *)&v37 - v10;
  uint64_t v11 = type metadata accessor for IntegerFormatStyle.Percent();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v44 = (char *)&v37 - v12;
  uint64_t v13 = type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys();
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v40 = v13;
  uint64_t v39 = v14;
  uint64_t v42 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v38 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  long long v59 = (char *)&v37 - v15;
  uint64_t v41 = type metadata accessor for IntegerFormatStyle();
  uint64_t v60 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v58 = (char *)&v37 - v16;
  uint64_t v17 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys();
  swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v61 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v37 - v22;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v62, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    uint64_t v25 = v23;
    uint64_t v26 = v21;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v28 = v47;
      uint64_t v27 = v48;
      long long v29 = v44;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v20, v48);
      char v64 = 1;
      long long v30 = v46;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      swift_getWitnessTable();
      uint64_t v31 = v50;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v32 = v49;
    }
    else
    {
      uint64_t v28 = v55;
      uint64_t v27 = v56;
      long long v29 = v52;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v20, v56);
      char v65 = 2;
      long long v30 = v54;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      swift_getWitnessTable();
      uint64_t v31 = v57;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      uint64_t v32 = v37;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v31);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v27);
  }
  else
  {
    uint64_t v33 = v38;
    uint64_t v34 = v41;
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v58, v20, v41);
    char v63 = 0;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    swift_getWitnessTable();
    uint64_t v35 = v42;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v26 = v21;
    uint64_t v25 = v23;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v59, v35);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v58, v34);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v25, v26);
}

Swift::Int IntegerFormatStyle.Attributed.Style.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  IntegerFormatStyle.Attributed.Style.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t IntegerFormatStyle.Attributed.Style.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v68 = a4;
  uint64_t v7 = type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v82 = v7;
  uint64_t v66 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v65 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v70 = (char *)&v56 - v8;
  uint64_t v9 = type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys();
  uint64_t v79 = swift_getWitnessTable();
  uint64_t v80 = v9;
  uint64_t v64 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v63 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v69 = (char *)&v56 - v10;
  uint64_t v11 = type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys();
  uint64_t v77 = swift_getWitnessTable();
  uint64_t v78 = v11;
  uint64_t v62 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v61 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  BOOL v67 = (char *)&v56 - v12;
  type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys();
  swift_getWitnessTable();
  uint64_t v74 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v72 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v14 = (char *)&v56 - v13;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  uint64_t v71 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t v73 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v56 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v56 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v56 - v24;
  uint64_t v26 = a1;
  uint64_t v27 = a1[3];
  uint64_t v83 = v26;
  __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v28 = v84;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v28) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  uint64_t v56 = v22;
  uint64_t v57 = v19;
  uint64_t v58 = v16;
  uint64_t v60 = 0;
  long long v59 = v25;
  uint64_t v30 = v73;
  uint64_t v29 = v74;
  uint64_t v84 = v14;
  uint64_t v31 = KeyedDecodingContainer.allKeys.getter();
  uint64_t v32 = _ArrayBuffer.requestNativeBuffer()();
  uint64_t v33 = v29;
  if (!v32)
  {
    uint64_t v89 = v31;
    type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t v32 = _copyCollectionToContiguousArray<A>(_:)();
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = (2 * *(void *)(v32 + 16)) | 1;
  uint64_t v85 = v32;
  uint64_t v86 = v32 + 32;
  uint64_t v87 = 0;
  unint64_t v88 = v34;
  type metadata accessor for ArraySlice();
  swift_getWitnessTable();
  Collection<>.popFirst()();
  uint64_t v35 = v60;
  if (v89 == 3 || v87 != v88 >> 1)
  {
    uint64_t v41 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v43 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v43 = v71;
    uint64_t v44 = v84;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v41 - 8) + 104))(v43, *MEMORY[0x1E4FBBA70], v41);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v44, v33);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  uint64_t v36 = v84;
  if (!(_BYTE)v89)
  {
    LOBYTE(v89) = 0;
    uint64_t v46 = v67;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    if (!v35)
    {
      type metadata accessor for IntegerFormatStyle();
      swift_getWitnessTable();
      uint64_t v38 = v56;
      uint64_t v47 = v62;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v48 = v72;
      (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v47);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v33);
      uint64_t v53 = v71;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v89 != 1)
  {
    LOBYTE(v89) = 2;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v49 = v68;
    if (!v35)
    {
      type metadata accessor for IntegerFormatStyle.Currency();
      swift_getWitnessTable();
      uint64_t v50 = v58;
      uint64_t v51 = v66;
      uint64_t v52 = v70;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v65 + 8))(v52, v51);
      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v36, v33);
      uint64_t v53 = v71;
      swift_storeEnumTagMultiPayload();
      uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
      uint64_t v55 = v59;
      v54(v59, v50, v53);
LABEL_19:
      v54(v49, v55, v53);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
    }
LABEL_17:
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v36, v29);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
  }
  LOBYTE(v89) = 1;
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  uint64_t v37 = v72;
  if (!v35)
  {
    type metadata accessor for IntegerFormatStyle.Percent();
    swift_getWitnessTable();
    uint64_t v38 = v57;
    uint64_t v39 = v64;
    uint64_t v40 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v63 + 8))(v40, v39);
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v33);
    uint64_t v53 = v71;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
    uint64_t v55 = v59;
    v54(v59, v38, v53);
    uint64_t v49 = v68;
    goto LABEL_19;
  }
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v29);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v83);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(char *a1, char *a2)
{
  return static FloatingPointParseStrategy.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return FloatingPointParseStrategy.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  FloatingPointParseStrategy.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(a1, a2, a3, (void (*)(unsigned char *, void, void, void))FloatingPointParseStrategy.CodingKeys.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Currency.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, void, void, void))
{
  Hasher.init(_seed:)();
  a4(v8, *v4, *(void *)(a2 + 16), *(void *)(a2 + 24));
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return IntegerFormatStyle.Attributed.Style.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Attributed.Style.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized URL.ParseStrategy.ComponentParseStrategy.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = URL.ParseStrategy.ComponentParseStrategy.DefaultValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = default argument 1 of _typeName(_:qualified:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Attributed.Style@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return IntegerFormatStyle.Attributed.Style.init(from:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Attributed.Style(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.Attributed.Style.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.Attributed.Style.hash(into:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed.Style(uint64_t a1, uint64_t a2)
{
  return static IntegerFormatStyle.Attributed.Style.== infix(_:_:)(a1, a2);
}

uint64_t IntegerFormatStyle.Attributed.format(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  void (*v87)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128[18];
  _OWORD v129[9];

  uint64_t v120 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for IntegerFormatStyle.Percent();
  uint64_t v108 = *(void *)(v6 - 8);
  uint64_t v109 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v107 = (char *)&v97 - v7;
  uint64_t v106 = type metadata accessor for IntegerFormatStyle.Currency();
  unsigned __int8 v104 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  id v102 = (char *)&v97 - v8;
  uint64_t v103 = type metadata accessor for ICUNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v103);
  uint64_t v105 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IntegerFormatStyle();
  long long v114 = *(void *)(v10 - 8);
  uint64_t v115 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v97 - v11;
  uint64_t v13 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t v121 = *(void *)(v13 - 8);
  uint64_t v122 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v123 = (char *)&v97 - v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v111 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v112 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v110 = (char *)&v97 - v16;
  uint64_t v101 = *(void *)(*(void *)(v5 + 24) + 16);
  id v97 = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](v97);
  uint64_t v100 = (char *)&v97 - v17;
  uint64_t v18 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v98 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  unint64_t v99 = (char *)&v97 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v117 = (char *)&v97 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v118 = (char *)&v97 - v26;
  MEMORY[0x1F4188790](v27);
  long long v119 = (char *)&v97 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v97 - v30;
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)&v97 - v33;
  double v36 = MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)&v97 - v37;
  uint64_t v125 = v18;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16);
  uint64_t v116 = a1;
  v39((char *)&v97 - v37, a1, v4, v36);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v127 = v18 + 16;
  ((void (*)(char *, char *, uint64_t))v39)(v34, v38, v4);
  uint64_t v40 = (void (*)(char *, char *, uint64_t))v39;
  char v126 = v12;
  BOOL v41 = (a1 & 1) != 0 && dispatch thunk of BinaryInteger.bitWidth.getter() > 64;
  uint64_t v42 = *(void (**)(char *, uint64_t))(v125 + 8);
  v42(v34, v4);
  v40(v31, v38, v4);
  uint64_t v113 = (void (*)(char *, uint64_t, uint64_t))v40;
  if (!v41) {
    goto LABEL_15;
  }
  *(void *)&v129[0] = 0x8000000000000000;
  if (dispatch thunk of static BinaryInteger.isSigned.getter())
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter() < 64)
    {
LABEL_13:
      uint64_t v47 = dispatch thunk of BinaryInteger._lowWord.getter();
      v42(v31, v4);
      if (v47 < *(uint64_t *)&v129[0]) {
        goto LABEL_34;
      }
LABEL_16:
      uint64_t v48 = dispatch thunk of BinaryInteger.bitWidth.getter();
      uint64_t v49 = v118;
      v40(v118, v38, v4);
      if (v48 < 65)
      {
        uint64_t v52 = dispatch thunk of BinaryInteger.bitWidth.getter();
        v42(v49, v4);
        if (v52 != 64)
        {
          uint64_t v51 = v117;
          v40(v117, v38, v4);
          goto LABEL_26;
        }
        char v53 = dispatch thunk of static BinaryInteger.isSigned.getter();
        uint64_t v51 = v117;
        v40(v117, v38, v4);
        if (v53)
        {
LABEL_26:
          v42(v51, v4);
          goto LABEL_27;
        }
      }
      else
      {
        v42(v49, v4);
        uint64_t v50 = v117;
        v40(v117, v38, v4);
        uint64_t v51 = v50;
      }
      *(void *)&v129[0] = 0x7FFFFFFFFFFFFFFFLL;
      char v54 = dispatch thunk of static BinaryInteger.isSigned.getter();
      uint64_t v55 = dispatch thunk of BinaryInteger.bitWidth.getter();
      if (v54)
      {
        if (v55 > 64)
        {
          lazy protocol witness table accessor for type Int64 and conformance Int64();
          uint64_t v56 = v119;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
          char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
          v42(v56, v4);
          uint64_t v58 = v51;
          goto LABEL_29;
        }
      }
      else if (v55 > 63)
      {
        v128[0] = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v61 = v119;
        (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v119, v51, v4);
        lazy protocol witness table accessor for type Int64 and conformance Int64();
        uint64_t v62 = v99;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
        char v57 = dispatch thunk of static Comparable.< infix(_:_:)();
        v42(v62, v4);
        uint64_t v58 = v61;
LABEL_29:
        v42(v58, v4);
        if (v57) {
          goto LABEL_34;
        }
LABEL_27:
        uint64_t v59 = dispatch thunk of BinaryInteger._lowWord.getter();
        v42(v38, v4);
        uint64_t v125 = 0;
        uint64_t v60 = 0;
        goto LABEL_35;
      }
      dispatch thunk of BinaryInteger._lowWord.getter();
      goto LABEL_26;
    }
    goto LABEL_10;
  }
  char v43 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v44 = dispatch thunk of BinaryInteger.bitWidth.getter();
  if ((v43 & 1) == 0)
  {
    if (v44 < 64) {
      goto LABEL_13;
    }
LABEL_15:
    v42(v31, v4);
    goto LABEL_16;
  }
  if (v44 > 64)
  {
LABEL_10:
    lazy protocol witness table accessor for type Int64 and conformance Int64();
    uint64_t v45 = v119;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
    char v46 = dispatch thunk of static Comparable.< infix(_:_:)();
    v42(v45, v4);
    v42(v31, v4);
    if ((v46 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  uint64_t v63 = v119;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  char v64 = dispatch thunk of static Comparable.< infix(_:_:)();
  v42(v63, v4);
  uint64_t v65 = v98;
  (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v98, v31, v4);
  if (v64)
  {
    v42(v65, v4);
  }
  else
  {
    uint64_t v66 = *(void *)&v129[0];
    uint64_t v67 = dispatch thunk of BinaryInteger._lowWord.getter();
    v42(v65, v4);
    if (v67 >= v66) {
      goto LABEL_16;
    }
  }
LABEL_34:
  v42(v38, v4);
  uint64_t v68 = (uint64_t)v110;
  dispatch thunk of BinaryInteger.words.getter();
  char v69 = dispatch thunk of static BinaryInteger.isSigned.getter();
  uint64_t v70 = v112;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v59 = numericStringRepresentationForBinaryInteger<A>(words:isSigned:)(v68, v69 & 1, v70, *(void *)(*(void *)(AssociatedConformanceWitness + 8) + 8));
  uint64_t v125 = v72;
  (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v68, v70);
  uint64_t v60 = 3;
LABEL_35:
  uint64_t v73 = (uint64_t)v123;
  (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v123, v124, v122);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v75 = v126;
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v77 = v107;
      uint64_t v76 = v108;
      uint64_t v78 = v109;
      (*(void (**)(char *, uint64_t, uint64_t))(v108 + 32))(v107, v73, v109);
      type metadata accessor for ICUPercentNumberFormatter();
      if (static ICUPercentNumberFormatter.create<A>(for:)((uint64_t)v77)) {
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v76 = v104;
      uint64_t v77 = v102;
      uint64_t v78 = v106;
      (*(void (**)(char *, uint64_t, uint64_t))(v104 + 32))(v102, v73, v106);
      type metadata accessor for ICUCurrencyNumberFormatter();
      if (static ICUCurrencyNumberFormatter.create<A>(for:)(v77))
      {
LABEL_42:
        id v96 = v125;
        ICUNumberFormatter.attributedFormat(_:)(v59, v125, v60 << 32);
        swift_release();
        outlined consume of ICUNumberFormatterBase.Value(v59, v96, 0, v60);
        return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v77, v78);
      }
    }
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
    outlined consume of ICUNumberFormatterBase.Value(v59, v125, 0, v60);
  }
  else
  {
    uint64_t v122 = v60;
    uint64_t v124 = v59;
    uint64_t v79 = v73;
    uint64_t v80 = v115;
    (*(void (**)(char *, uint64_t, uint64_t))(v114 + 32))(v126, v79, v115);
    uint64_t v123 = &v75[*(int *)(v80 + 36)];
    uint64_t v81 = *((void *)v75 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v83 = *(uint64_t (**)(uint64_t, uint64_t))(v81 + 472);
    swift_unknownObjectRetain();
    uint64_t v84 = v83(ObjectType, v81);
    uint64_t v86 = v85;
    swift_unknownObjectRelease();
    uint64_t v87 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v81 + 464);
    swift_unknownObjectRetain();
    v87(v128, ObjectType, v81);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v128, (uint64_t)v129, &demangling cache variable for type metadata for LocalePreferences?);
    unint64_t v88 = v105;
    outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v123, v105, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    uint64_t v89 = v103;
    uint64_t v90 = (uint64_t *)(v88 + *(int *)(v103 + 20));
    *uint64_t v90 = v84;
    v90[1] = v86;
    outlined init with take of LocalePreferences?((uint64_t)v129, v88 + *(int *)(v89 + 24), &demangling cache variable for type metadata for LocalePreferences?);
    uint64_t v91 = specialized static ICUNumberFormatter._create(with:)(v88);
    _s10Foundation18ICUNumberFormatterC9Signature33_1C58B5D80AA37B9371410D3343C91B53LLVWOhTm_1(v88, type metadata accessor for ICUNumberFormatter.Signature);
    if (v91)
    {
      uint64_t v92 = v122;
      uint64_t v93 = v124;
      uint64_t v94 = v125;
      ICUNumberFormatter.attributedFormat(_:)(v124, v125, v122 << 32);
      swift_release();
      outlined consume of ICUNumberFormatterBase.Value(v93, v94, 0, v92);
      return (*(uint64_t (**)(char *, uint64_t))(v114 + 8))(v126, v115);
    }
    (*(void (**)(char *, uint64_t))(v114 + 8))(v126, v115);
    outlined consume of ICUNumberFormatterBase.Value(v124, v125, 0, v122);
  }
  v113(v119, v116, v4);
  String.init<A>(_:radix:uppercase:)();
  BigString.init(_:)();
  uint64_t result = AttributedString.init(_:attributes:)(v129, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], v128);
  *uint64_t v120 = v128[0];
  return result;
}

uint64_t IntegerFormatStyle.Attributed.locale(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for IntegerFormatStyle.Percent();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (uint64_t *)((char *)&v36 - v7);
  uint64_t v9 = type metadata accessor for IntegerFormatStyle.Currency();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v36 - v10);
  uint64_t v12 = type metadata accessor for IntegerFormatStyle();
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v36 - v13);
  uint64_t v15 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v21 = *a1;
  uint64_t v20 = a1[1];
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16);
  uint64_t v43 = a3;
  uint64_t v23 = a3;
  uint64_t v24 = v42;
  v22(v23, v42, a2, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v24, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v27 = v40;
      uint64_t v26 = v41;
      (*(void (**)(void *, char *, uint64_t))(v40 + 32))(v8, v19, v41);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      void *v8 = v21;
      v8[1] = v20;
      uint64_t v28 = v43;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v43, v15);
      (*(void (**)(uint64_t, void *, uint64_t))(v27 + 16))(v28, v8, v26);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v27 + 8))(v8, v26);
    }
    else
    {
      uint64_t v34 = v38;
      uint64_t v33 = v39;
      (*(void (**)(void *, char *, uint64_t))(v38 + 32))(v11, v19, v39);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *uint64_t v11 = v21;
      v11[1] = v20;
      uint64_t v35 = v43;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v43, v15);
      (*(void (**)(uint64_t, void *, uint64_t))(v34 + 16))(v35, v11, v33);
      swift_storeEnumTagMultiPayload();
      return (*(uint64_t (**)(void *, uint64_t))(v34 + 8))(v11, v33);
    }
  }
  else
  {
    uint64_t v31 = v36;
    uint64_t v30 = v37;
    (*(void (**)(void *, char *, uint64_t))(v36 + 32))(v14, v19, v37);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *uint64_t v14 = v21;
    v14[1] = v20;
    uint64_t v32 = v43;
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v43, v15);
    (*(void (**)(uint64_t, void *, uint64_t))(v31 + 16))(v32, v14, v30);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, uint64_t))(v31 + 8))(v14, v30);
  }
}

uint64_t IntegerFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  uint64_t v27 = a1;
  uint64_t v2 = type metadata accessor for IntegerFormatStyle.Currency();
  uint64_t v26 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v24 - v3;
  uint64_t v5 = type metadata accessor for IntegerFormatStyle.Percent();
  uint64_t v25 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v24 - v6;
  uint64_t v8 = type metadata accessor for IntegerFormatStyle();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v24 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v24 - v14, v1, v12, v13);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = v25;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v7, v15, v5);
      uint64_t v19 = v27;
      Hasher._combine(_:)(1uLL);
      IntegerFormatStyle.hash(into:)(v19, v5);
      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v7, v5);
    }
    else
    {
      uint64_t v22 = v26;
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v4, v15, v2);
      uint64_t v23 = v27;
      Hasher._combine(_:)(2uLL);
      IntegerFormatStyle.Currency.hash(into:)(v23, v2);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v4, v2);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
    uint64_t v21 = v27;
    Hasher._combine(_:)(0);
    IntegerFormatStyle.hash(into:)(v21, v8);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t IntegerFormatStyle.Attributed.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x656C797473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance IntegerFormatStyle<A>.Attributed.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IntegerFormatStyle.Attributed.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance IntegerFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance IntegerFormatStyle<A>.Attributed.CodingKeys(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t IntegerFormatStyle.Attributed.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v8 = *(void *)(a2 + 16);
  type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for KeyedEncodingContainer();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for IntegerFormatStyle.Attributed.Style();
  swift_getWitnessTable();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int IntegerFormatStyle.Attributed.hashValue.getter(uint64_t a1)
{
  return IntegerFormatStyle.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.Attributed.hash(into:));
}

Swift::Int IntegerFormatStyle.hashValue.getter(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a2(v5, a1);
  return Hasher._finalize()();
}

uint64_t IntegerFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v25 = (char *)&v18 - v4;
  type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for KeyedDecodingContainer();
  uint64_t v21 = *(void *)(v5 - 8);
  uint64_t v22 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for IntegerFormatStyle.Attributed();
  uint64_t v19 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v11 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v11)
  {
    uint64_t v18 = v10;
    uint64_t v26 = v8;
    uint64_t v12 = v21;
    uint64_t v14 = v23;
    uint64_t v13 = v24;
    swift_getWitnessTable();
    uint64_t v15 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v15);
    uint64_t v16 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v25, v13);
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v20, v16, v26);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance IntegerFormatStyle<A>.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IntegerFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance IntegerFormatStyle<A>.Attributed(void *a1, uint64_t a2)
{
  return IntegerFormatStyle.Attributed.encode(to:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(a1, a2, a3, (void (*)(unsigned char *, uint64_t))IntegerFormatStyle.Attributed.hash(into:));
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IntegerFormatStyle<A>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a4(v7, a2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance IntegerFormatStyle<A>.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static IntegerFormatStyle.Attributed.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t IntegerFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 0, a7);
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4188350](a1, WitnessTable);
}

uint64_t IntegerFormatStyle.Percent.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, 1, a7);
}

uint64_t IntegerFormatStyle.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t *a8@<X8>)
{
  int v36 = a7;
  uint64_t v34 = a1;
  uint64_t v38 = a4;
  unint64_t v39 = a5;
  unint64_t v37 = a3;
  uint64_t v35 = a2;
  uint64_t v41 = a8;
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (_OWORD *)((char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getWitnessTable();
  uint64_t v12 = (int *)type metadata accessor for IntegerParseStrategy();
  uint64_t v13 = *((void *)v12 - 1);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v30 - v14;
  uint64_t v40 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v17 - 8);
  uint64_t v32 = v17;
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)((char *)&v30 - v19);
  uint64_t v21 = *(void (**)(_OWORD *, uint64_t, uint64_t, double))(v9 + 16);
  v21(v11, v33, a6, v18);
  ((void (*)(char *, _OWORD *, uint64_t))v21)(v15, v11, a6);
  v15[v12[11]] = 0;
  *(_OWORD *)&v15[v12[13]] = *v11;
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1((uint64_t)v11 + *(int *)(a6 + 36), (uint64_t)&v15[v12[12]], type metadata accessor for NumberFormatStyleConfiguration.Collection);
  type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  swift_storeEnumTagMultiPayload();
  IntegerParseStrategy.parse(_:startingAt:in:)(v34, v35, v37, v39, v12, v20);
  (*(void (**)(char *, int *))(v13 + 8))(v15, v12);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v20, v32);
    uint64_t v22 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v41, 1, 1, v22);
  }
  else
  {
    uint64_t v24 = *v20;
    uint64_t v25 = (char *)v20 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v26 = v40;
    uint64_t v27 = swift_getTupleTypeMetadata2();
    uint64_t v28 = v41;
    uint64_t v29 = (char *)v41 + *(int *)(v27 + 48);
    *uint64_t v41 = v24;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v29, v25, v26);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v28, 0, 1, v27);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>.Percent@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.Percent.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>.Percent(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4188350](a1, WitnessTable);
}

uint64_t IntegerFormatStyle.Currency.consuming(_:startingAt:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v50 = a4;
  unint64_t v51 = a5;
  uint64_t v48 = a2;
  unint64_t v49 = a3;
  uint64_t v47 = a1;
  uint64_t v52 = a7;
  uint64_t v45 = type metadata accessor for ICULegacyNumberFormatter.NumberFormatType(0);
  MEMORY[0x1F4188790](v45);
  uint64_t v43 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (long long *)((char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_getWitnessTable();
  uint64_t v13 = (int *)type metadata accessor for IntegerParseStrategy();
  uint64_t v42 = *((void *)v13 - 1);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  double v18 = (char *)&v38 - v17;
  uint64_t v46 = *(void *)(a6 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v39 = *(void *)(v19 - 8);
  uint64_t v40 = v19;
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (uint64_t *)((char *)&v38 - v21);
  uint64_t v23 = *(void (**)(char *, long long *, uint64_t))(v9 + 16);
  ((void (*)(long long *, void, uint64_t, double))v23)(v12, v44, a6, v20);
  v23(v15, v12, a6);
  v15[v13[11]] = 0;
  uint64_t v24 = v13[13];
  long long v44 = *v12;
  *(_OWORD *)&v15[v24] = v44;
  uint64_t v25 = v43;
  outlined init with copy of NumberFormatStyleConfiguration.Collection((uint64_t)v12 + *(int *)(a6 + 40), v43, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v26 = *(void (**)(long long *, uint64_t))(v9 + 8);
  swift_unknownObjectRetain();
  v26(v12, a6);
  swift_storeEnumTagMultiPayload();
  _s10Foundation32CurrencyFormatStyleConfigurationO10CollectionVWObTm_1(v25, (uint64_t)&v15[v13[12]], type metadata accessor for ICULegacyNumberFormatter.NumberFormatType);
  uint64_t v27 = v42;
  uint64_t v28 = v15;
  uint64_t v29 = TupleTypeMetadata2;
  (*(void (**)(char *, char *, int *))(v42 + 32))(v18, v28, v13);
  IntegerParseStrategy.parse(_:startingAt:in:)(v47, v48, v49, v51, v13, v22);
  (*(void (**)(char *, int *))(v27 + 8))(v18, v13);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v22, 1, v29) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v39 + 8))(v22, v40);
    uint64_t v30 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v52, 1, 1, v30);
  }
  else
  {
    uint64_t v32 = *v22;
    uint64_t v33 = (char *)v22 + *(int *)(v29 + 48);
    uint64_t v34 = v46;
    uint64_t v35 = swift_getTupleTypeMetadata2();
    int v36 = v52;
    unint64_t v37 = (char *)v52 + *(int *)(v35 + 48);
    *uint64_t v52 = v32;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v37, v33, v34);
    return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v36, 0, 1, v35);
  }
}

uint64_t protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance IntegerFormatStyle<A>.Currency@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  return IntegerFormatStyle.Currency.consuming(_:startingAt:in:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance IntegerFormatStyle<A>.Currency(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4188350](a1, WitnessTable);
}

uint64_t static RegexComponent<>.localizedInteger(locale:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>)
              + 36);
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  long long v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;

  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedIntegerPercentage(locale:)@<X0>(long long *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = (char *)a2
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent)
              + 36);
  uint64_t v5 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v6 = &v4[v5[9]];
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  long long v10 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)uint64_t v4 = 0x3FF0000000000000;
  v4[8] = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = 0x1FFFFFFFELL;
  *((void *)v4 + 7) = 0;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 6) = 0;
  *((_DWORD *)v4 + 18) = 131584;
  *((_WORD *)v4 + 38) = 512;
  uint64_t v8 = &v4[v5[10]];
  *(void *)uint64_t v8 = 0;
  v8[8] = -1;
  v4[v5[11]] = 3;
  *a2 = v10;

  return swift_unknownObjectRetain();
}

uint64_t static RegexComponent<>.localizedIntegerCurrency(code:locale:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  *(_OWORD *)a3 = *a2;
  *(void *)(a3 + 16) = v4;
  *(void *)(a3 + 24) = v5;
  uint64_t v6 = a3
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency)
              + 40);
  uint64_t v7 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v8 = v6 + v7[9];
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(void *)(v6 + 40) = 0x1FFFFFFFELL;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(void *)(v6 + 48) = 0;
  *(_WORD *)(v6 + 72) = 512;
  *(_DWORD *)(v6 + 74) = 2;
  *(unsigned char *)(v6 + 78) = 2;
  uint64_t v10 = v6 + v7[10];
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = -1;
  *(unsigned char *)(v6 + v7[11]) = 1;
  *(unsigned char *)(v6 + v7[12]) = 3;
  swift_bridgeObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined destroy of FloatingPointRoundingRule?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for IntegerFormatStyle.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Percent.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Currency.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of ICUNumberFormatterBase.Value(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Percent()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Currency()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Percent(void *a1)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Currency(void *a1)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

uint64_t associated type witness table accessor for ParseableFormatStyle.Strategy : ParseStrategy in IntegerFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Currency(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Percent(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for IntegerFormatStyle<A>.Attributed(void *a1)
{
  return instantiation function for generic protocol witness table for IntegerFormatStyle<A>(a1);
}

uint64_t base witness table accessor for RegexComponent in IntegerFormatStyle<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for RegexComponent in IntegerFormatStyle<A>.Percent()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for RegexComponent in IntegerFormatStyle<A>.Currency()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_4);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_4);
}

void *initializeBufferWithCopyOfBuffer for IntegerFormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    uint64_t v3 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 36);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    v8[8] = *((unsigned char *)a2 + v7 + 8);
    *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    long long v10 = *(_OWORD *)((char *)a2 + v7 + 48);
    long long v11 = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 3) = v10;
    *((_OWORD *)v8 + 1) = v11;
    v8[73] = *((unsigned char *)a2 + v7 + 73);
    LOWORD(v7) = *(_WORD *)((char *)a2 + v7 + 74);
    v8[76] = v9[76];
    *((_WORD *)v8 + 37) = v7;
    v8[77] = v9[77];
    uint64_t v12 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v13 = v12[9];
    __dst = &v8[v13];
    uint64_t v14 = &v9[v13];
    uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_unknownObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v19 = v12[10];
    double v20 = &v8[v19];
    uint64_t v21 = &v9[v19];
    *(void *)double v20 = *(void *)v21;
    v20[8] = v21[8];
    v8[v12[11]] = v9[v12[11]];
  }
  return v3;
}

void *assignWithCopy for IntegerFormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  LOBYTE(v7) = *((unsigned char *)a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  v8[8] = v7;
  long long v10 = *((_OWORD *)v9 + 1);
  long long v11 = *((_OWORD *)v9 + 2);
  long long v12 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v11;
  *((_OWORD *)v8 + 3) = v12;
  *((_OWORD *)v8 + 1) = v10;
  v8[73] = v9[73];
  LOWORD(v7) = *((_WORD *)v9 + 37);
  v8[76] = v9[76];
  *((_WORD *)v8 + 37) = v7;
  v8[77] = v9[77];
  uint64_t v27 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v13 = v27[9];
  uint64_t v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  uint64_t v22 = v27[10];
  uint64_t v23 = &v8[v22];
  uint64_t v24 = &v9[v22];
  uint64_t v25 = *(void *)v24;
  v23[8] = v24[8];
  *(void *)uint64_t v23 = v25;
  v8[v27[11]] = v9[v27[11]];
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  v5[8] = *((unsigned char *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 57) = *(_OWORD *)((char *)a2 + v4 + 57);
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  long long v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *((_OWORD *)v5 + 2) = *(_OWORD *)((char *)a2 + v4 + 32);
  *((_OWORD *)v5 + 3) = v7;
  *((_OWORD *)v5 + 1) = v8;
  v5[73] = *((unsigned char *)a2 + v4 + 73);
  LOWORD(v4) = *(_WORD *)((char *)a2 + v4 + 74);
  v5[76] = v6[76];
  *((_WORD *)v5 + 37) = v4;
  v5[77] = v6[77];
  uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  long long v11 = &v5[v10];
  long long v12 = &v6[v10];
  uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = v9[10];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  v5[v9[11]] = v6[v9[11]];
  return a1;
}

void *assignWithTake for IntegerFormatStyle(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  long long v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *(void *)long long v8 = *(void *)((char *)a2 + v7);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
  *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
  *((_OWORD *)v8 + 2) = v10;
  *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
  v8[73] = *((unsigned char *)a2 + v7 + 73);
  v8[76] = *((unsigned char *)a2 + v7 + 76);
  *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v7 + 74);
  v8[77] = *((unsigned char *)a2 + v7 + 77);
  uint64_t v24 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  uint64_t v11 = v24[9];
  long long v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v20 = v24[10];
  uint64_t v21 = &v8[v20];
  uint64_t v22 = &v9[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  v8[v24[11]] = v9[v24[11]];
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_4_0);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Percent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_4_0);
}

void *initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    uint64_t v3 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v8 = a2[3];
    a1[2] = v7;
    a1[3] = v8;
    uint64_t v9 = *(int *)(a3 + 40);
    long long v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *(void *)long long v10 = *(void *)((char *)a2 + v9);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    long long v12 = *(_OWORD *)((char *)a2 + v9 + 32);
    *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
    *((_OWORD *)v10 + 2) = v12;
    *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
    *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
    v10[73] = *((unsigned char *)a2 + v9 + 73);
    *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
    v10[78] = *((unsigned char *)a2 + v9 + 78);
    uint64_t v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v14 = v13[9];
    __dst = &v10[v14];
    uint64_t v15 = &v11[v14];
    uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v17 = *(void *)(v16 - 8);
    int v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v15, 1, v16))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    uint64_t v20 = v13[10];
    uint64_t v21 = &v10[v20];
    uint64_t v22 = &v11[v20];
    *(void *)uint64_t v21 = *(void *)v22;
    v21[8] = v22[8];
    v10[v13[11]] = v11[v13[11]];
    v10[v13[12]] = v11[v13[12]];
  }
  return v3;
}

uint64_t destroy for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0) + 36);
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(void *)uint64_t v6 = *(void *)(a2 + v5);
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(a2 + v5 + 8);
  long long v8 = *(_OWORD *)(a2 + v5 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
  *(unsigned char *)(v6 + 73) = *(unsigned char *)(a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)(a2 + v5 + 74);
  *(unsigned char *)(v6 + 78) = *(unsigned char *)(a2 + v5 + 78);
  uint64_t v9 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v10 = v9[9];
  __dst = (void *)(v6 + v10);
  uint64_t v11 = (const void *)(v7 + v10);
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v16 = v9[10];
  uint64_t v17 = v6 + v16;
  uint64_t v18 = v7 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(unsigned char *)(v6 + v9[11]) = *(unsigned char *)(v7 + v9[11]);
  *(unsigned char *)(v6 + v9[12]) = *(unsigned char *)(v7 + v9[12]);
  return a1;
}

void *assignWithCopy for IntegerFormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v6;
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 40);
  long long v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)((char *)a2 + v7);
  v8[8] = v9[8];
  *(void *)long long v8 = v10;
  long long v11 = *((_OWORD *)v9 + 1);
  long long v12 = *((_OWORD *)v9 + 2);
  long long v13 = *((_OWORD *)v9 + 3);
  *(_OWORD *)(v8 + 57) = *(_OWORD *)(v9 + 57);
  *((_OWORD *)v8 + 2) = v12;
  *((_OWORD *)v8 + 3) = v13;
  *((_OWORD *)v8 + 1) = v11;
  v8[73] = v9[73];
  *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
  v8[78] = v9[78];
  uint64_t v14 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v15 = v14[9];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v18 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v29 = v16;
  LODWORD(v16) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (v16)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v29, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v29, 0, 1, v18);
      goto LABEL_9;
    }
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    uint64_t v23 = v29;
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v29, v17, v18);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v18);
    size_t v22 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    uint64_t v23 = v29;
  }
  memcpy(v23, v17, v22);
LABEL_9:
  uint64_t v24 = v14[10];
  uint64_t v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  uint64_t v27 = *(void *)v26;
  v25[8] = v26[8];
  *(void *)uint64_t v25 = v27;
  v8[v14[11]] = v9[v14[11]];
  v8[v14[12]] = v9[v14[12]];
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Currency(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 40);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  v6[8] = *((unsigned char *)a2 + v5 + 8);
  *(void *)uint64_t v6 = *(void *)((char *)a2 + v5);
  *(_OWORD *)(v6 + 57) = *(_OWORD *)((char *)a2 + v5 + 57);
  long long v8 = *(_OWORD *)((char *)a2 + v5 + 48);
  long long v9 = *(_OWORD *)((char *)a2 + v5 + 16);
  *((_OWORD *)v6 + 2) = *(_OWORD *)((char *)a2 + v5 + 32);
  *((_OWORD *)v6 + 3) = v8;
  *((_OWORD *)v6 + 1) = v9;
  v6[73] = *((unsigned char *)a2 + v5 + 73);
  *(_DWORD *)(v6 + 74) = *(_DWORD *)((char *)a2 + v5 + 74);
  v6[78] = *((unsigned char *)a2 + v5 + 78);
  uint64_t v10 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v11 = v10[9];
  long long v12 = &v6[v11];
  long long v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = v10[10];
  uint64_t v18 = &v6[v17];
  uint64_t v19 = &v7[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  v18[8] = v19[8];
  v6[v10[11]] = v7[v10[11]];
  v6[v10[12]] = v7[v10[12]];
  return a1;
}

void *assignWithTake for IntegerFormatStyle.Currency(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRelease();
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[3];
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 40);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *(void *)uint64_t v10 = *(void *)((char *)a2 + v9);
  v10[8] = *((unsigned char *)a2 + v9 + 8);
  long long v12 = *(_OWORD *)((char *)a2 + v9 + 32);
  *((_OWORD *)v10 + 1) = *(_OWORD *)((char *)a2 + v9 + 16);
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = *(_OWORD *)((char *)a2 + v9 + 48);
  *(_OWORD *)(v10 + 57) = *(_OWORD *)((char *)a2 + v9 + 57);
  v10[73] = *((unsigned char *)a2 + v9 + 73);
  *(_DWORD *)(v10 + 74) = *(_DWORD *)((char *)a2 + v9 + 74);
  v10[78] = *((unsigned char *)a2 + v9 + 78);
  long long v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v14 = v13[9];
  uint64_t v15 = &v10[v14];
  uint64_t v16 = &v11[v14];
  uint64_t v17 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v27 = v15;
  LODWORD(v15) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (v15)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
      goto LABEL_9;
    }
    size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    size_t v22 = v27;
  }
  else
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v27, v16, v17);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?)
                                - 8)
                    + 64);
    size_t v22 = v27;
  }
  memcpy(v22, v16, v21);
LABEL_9:
  uint64_t v23 = v13[10];
  uint64_t v24 = &v10[v23];
  uint64_t v25 = &v11[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  v10[v13[11]] = v11[v13[11]];
  v10[v13[12]] = v11[v13[12]];
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D7A7B4);
}

uint64_t sub_181D7A7B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 40);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Currency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D7A878);
}

void *sub_181D7A878(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 40);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Attributed()
{
  uint64_t result = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Attributed(void *a1, void *a2)
{
  int v4 = *(_DWORD *)(*(void *)(type metadata accessor for IntegerFormatStyle.Attributed.Style() - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v18 = a2[3];
      a1[2] = a2[2];
      a1[3] = v18;
      uint64_t v19 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
      int v20 = (char *)a1 + v19;
      size_t v21 = (char *)a2 + v19;
      *(void *)int v20 = *(void *)((char *)a2 + v19);
      v20[8] = *((unsigned char *)a2 + v19 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *((_OWORD *)v20 + 1) = *(_OWORD *)((char *)a2 + v19 + 16);
      *((_OWORD *)v20 + 2) = v22;
      *((_OWORD *)v20 + 3) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      v20[73] = *((unsigned char *)a2 + v19 + 73);
      *(_DWORD *)(v20 + 74) = *(_DWORD *)((char *)a2 + v19 + 74);
      v20[78] = *((unsigned char *)a2 + v19 + 78);
      uint64_t v23 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v23[9];
      __dsta = &v20[v24];
      uint64_t v25 = &v21[v24];
      uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v28(v25, 1, v26))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v25, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dsta, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dsta, 0, 1, v26);
      }
      uint64_t v38 = v23[10];
      uint64_t v39 = &v20[v38];
      uint64_t v40 = &v21[v38];
      *(void *)uint64_t v39 = *(void *)v40;
      v39[8] = v40[8];
      v20[v23[11]] = v21[v23[11]];
      v20[v23[12]] = v21[v23[12]];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v6 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent() + 36);
        uint64_t v7 = (char *)a1 + v6;
        uint64_t v8 = (char *)a2 + v6;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v6);
        v7[8] = *((unsigned char *)a2 + v6 + 8);
        long long v9 = *(_OWORD *)((char *)a2 + v6 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v6 + 16);
        *((_OWORD *)v7 + 2) = v9;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v6 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v6 + 57);
        v7[73] = *((unsigned char *)a2 + v6 + 73);
        *((_WORD *)v7 + 37) = *(_WORD *)((char *)a2 + v6 + 74);
        v7[76] = *((unsigned char *)a2 + v6 + 76);
        v7[77] = *((unsigned char *)a2 + v6 + 77);
        uint64_t v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v11 = v10[9];
        __dst = &v7[v11];
        long long v12 = &v8[v11];
        uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v14 = *(void *)(v13 - 8);
        uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
        swift_unknownObjectRetain();
        if (v15(v12, 1, v13))
        {
          uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
        }
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v30 = *(int *)(type metadata accessor for IntegerFormatStyle() + 36);
        uint64_t v7 = (char *)a1 + v30;
        uint64_t v8 = (char *)a2 + v30;
        *(void *)uint64_t v7 = *(void *)((char *)a2 + v30);
        v7[8] = *((unsigned char *)a2 + v30 + 8);
        long long v31 = *(_OWORD *)((char *)a2 + v30 + 32);
        *((_OWORD *)v7 + 1) = *(_OWORD *)((char *)a2 + v30 + 16);
        *((_OWORD *)v7 + 2) = v31;
        *((_OWORD *)v7 + 3) = *(_OWORD *)((char *)a2 + v30 + 48);
        *(_OWORD *)(v7 + 57) = *(_OWORD *)((char *)a2 + v30 + 57);
        v7[73] = *((unsigned char *)a2 + v30 + 73);
        *((_WORD *)v7 + 37) = *(_WORD *)((char *)a2 + v30 + 74);
        v7[76] = *((unsigned char *)a2 + v30 + 76);
        v7[77] = *((unsigned char *)a2 + v30 + 77);
        uint64_t v10 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v32 = v10[9];
        uint64_t v45 = &v7[v32];
        uint64_t v33 = &v8[v32];
        uint64_t v34 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v35 = *(void *)(v34 - 8);
        int v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
        swift_unknownObjectRetain();
        if (v36(v33, 1, v34))
        {
          uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v45, v33, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v45, v33, v34);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v45, 0, 1, v34);
        }
      }
      uint64_t v41 = v10[10];
      uint64_t v42 = &v7[v41];
      uint64_t v43 = &v8[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      v42[8] = v43[8];
      v7[v10[11]] = v8[v10[11]];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for IntegerFormatStyle.Attributed(uint64_t a1)
{
  type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
    uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (result == 1)
    {
      swift_unknownObjectRelease();
      uint64_t v3 = type metadata accessor for IntegerFormatStyle.Percent();
    }
    else
    {
      if (result) {
        return result;
      }
      swift_unknownObjectRelease();
      uint64_t v3 = type metadata accessor for IntegerFormatStyle();
    }
    uint64_t v4 = *(int *)(v3 + 36);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  uint64_t v6 = a1 + *(int *)(v5 + 36) + v4;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IntegerFormatStyle.Attributed.Style();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2)
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v5 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent() + 36);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      *(void *)uint64_t v6 = *(void *)(a2 + v5);
      *(unsigned char *)(v6 + 8) = *(unsigned char *)(a2 + v5 + 8);
      long long v8 = *(_OWORD *)(a2 + v5 + 32);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
      *(_OWORD *)(v6 + 32) = v8;
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
      *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
      *(unsigned char *)(v6 + 73) = *(unsigned char *)(a2 + v5 + 73);
      *(_WORD *)(v6 + 74) = *(_WORD *)(a2 + v5 + 74);
      *(unsigned char *)(v6 + 76) = *(unsigned char *)(a2 + v5 + 76);
      *(unsigned char *)(v6 + 77) = *(unsigned char *)(a2 + v5 + 77);
      uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v10 = v9[9];
      uint64_t v11 = (void *)(v6 + v10);
      long long v12 = (const void *)(v7 + v10);
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
      swift_unknownObjectRetain();
      if (v15(v12, 1, v13)) {
        goto LABEL_8;
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v28 = *(int *)(type metadata accessor for IntegerFormatStyle() + 36);
      uint64_t v6 = a1 + v28;
      uint64_t v7 = a2 + v28;
      *(void *)uint64_t v6 = *(void *)(a2 + v28);
      *(unsigned char *)(v6 + 8) = *(unsigned char *)(a2 + v28 + 8);
      long long v29 = *(_OWORD *)(a2 + v28 + 32);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v28 + 16);
      *(_OWORD *)(v6 + 32) = v29;
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v28 + 48);
      *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v28 + 57);
      *(unsigned char *)(v6 + 73) = *(unsigned char *)(a2 + v28 + 73);
      *(_WORD *)(v6 + 74) = *(_WORD *)(a2 + v28 + 74);
      *(unsigned char *)(v6 + 76) = *(unsigned char *)(a2 + v28 + 76);
      *(unsigned char *)(v6 + 77) = *(unsigned char *)(a2 + v28 + 77);
      uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v30 = v9[9];
      uint64_t v11 = (void *)(v6 + v30);
      long long v12 = (const void *)(v7 + v30);
      uint64_t v13 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v14 = *(void *)(v13 - 8);
      long long v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48);
      swift_unknownObjectRetain();
      if (v31(v12, 1, v13))
      {
LABEL_8:
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v11, v12, *(void *)(*(void *)(v32 - 8) + 64));
LABEL_13:
        uint64_t v39 = v9[10];
        uint64_t v40 = v6 + v39;
        uint64_t v41 = v7 + v39;
        *(void *)uint64_t v40 = *(void *)v41;
        *(unsigned char *)(v40 + 8) = *(unsigned char *)(v41 + 8);
        uint64_t v42 = v9[11];
        uint64_t v37 = (unsigned char *)(v6 + v42);
        uint64_t v38 = (unsigned char *)(v7 + v42);
        goto LABEL_14;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    goto LABEL_13;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v16 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v16;
  uint64_t v17 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  *(void *)uint64_t v18 = *(void *)(a2 + v17);
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v17 + 8);
  long long v20 = *(_OWORD *)(a2 + v17 + 32);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v17 + 16);
  *(_OWORD *)(v18 + 32) = v20;
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v17 + 48);
  *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
  *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v17 + 73);
  *(_DWORD *)(v18 + 74) = *(_DWORD *)(a2 + v17 + 74);
  *(unsigned char *)(v18 + 78) = *(unsigned char *)(a2 + v17 + 78);
  size_t v21 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  uint64_t v22 = v21[9];
  __dst = (void *)(v18 + v22);
  uint64_t v23 = (const void *)(v19 + v22);
  uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v26(v23, 1, v24))
  {
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
    memcpy(__dst, v23, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(__dst, v23, v24);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
  }
  uint64_t v33 = v21[10];
  uint64_t v34 = v18 + v33;
  uint64_t v35 = v19 + v33;
  *(void *)uint64_t v34 = *(void *)v35;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
  *(unsigned char *)(v18 + v21[11]) = *(unsigned char *)(v19 + v21[11]);
  uint64_t v36 = v21[12];
  uint64_t v37 = (unsigned char *)(v18 + v36);
  uint64_t v38 = (unsigned char *)(v19 + v36);
LABEL_14:
  *uint64_t v37 = *v38;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v7 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      LOBYTE(v7) = *(unsigned char *)(a2 + v7 + 8);
      *(void *)uint64_t v8 = *(void *)v9;
      *(unsigned char *)(v8 + 8) = v7;
      long long v10 = *(_OWORD *)(v9 + 57);
      long long v12 = *(_OWORD *)(v9 + 32);
      long long v11 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v8 + 32) = v12;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 57) = v10;
      *(unsigned char *)(v8 + 73) = *(unsigned char *)(v9 + 73);
      *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
      *(unsigned char *)(v8 + 78) = *(unsigned char *)(v9 + 78);
      uint64_t v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v14 = v13[9];
      __dst = (void *)(v8 + v14);
      uint64_t v15 = (const void *)(v9 + v14);
      uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v18(v15, 1, v16))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      uint64_t v40 = v13[10];
      uint64_t v41 = v8 + v40;
      uint64_t v42 = (uint64_t *)(v9 + v40);
      uint64_t v43 = *v42;
      *(unsigned char *)(v41 + 8) = *((unsigned char *)v42 + 8);
      *(void *)uint64_t v41 = v43;
      *(unsigned char *)(v8 + v13[11]) = *(unsigned char *)(v9 + v13[11]);
      uint64_t v44 = v13[12];
      uint64_t v38 = (unsigned char *)(v8 + v44);
      uint64_t v39 = (unsigned char *)(v9 + v44);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle.Percent();
      }
      else {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle();
      }
      uint64_t v20 = *(int *)(v6 + 36);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = a2 + v20;
      LOBYTE(v20) = *(unsigned char *)(a2 + v20 + 8);
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v20;
      long long v23 = *(_OWORD *)(v22 + 57);
      long long v25 = *(_OWORD *)(v22 + 32);
      long long v24 = *(_OWORD *)(v22 + 48);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
      *(_OWORD *)(v21 + 32) = v25;
      *(_OWORD *)(v21 + 48) = v24;
      *(_OWORD *)(v21 + 57) = v23;
      *(unsigned char *)(v21 + 73) = *(unsigned char *)(v22 + 73);
      LOWORD(v20) = *(_WORD *)(v22 + 74);
      *(unsigned char *)(v21 + 76) = *(unsigned char *)(v22 + 76);
      *(_WORD *)(v21 + 74) = v20;
      *(unsigned char *)(v21 + 77) = *(unsigned char *)(v22 + 77);
      uint64_t v26 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v27 = v26[9];
      __dsta = (void *)(v21 + v27);
      uint64_t v28 = (const void *)(v22 + v27);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      long long v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1, v29))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v28, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(__dsta, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(__dsta, 0, 1, v29);
      }
      uint64_t v33 = v26[10];
      uint64_t v34 = v21 + v33;
      uint64_t v35 = (uint64_t *)(v22 + v33);
      uint64_t v36 = *v35;
      *(unsigned char *)(v34 + 8) = *((unsigned char *)v35 + 8);
      *(void *)uint64_t v34 = v36;
      uint64_t v37 = v26[11];
      uint64_t v38 = (unsigned char *)(v21 + v37);
      uint64_t v39 = (unsigned char *)(v22 + v37);
    }
    *uint64_t v38 = *v39;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  type metadata accessor for IntegerFormatStyle.Attributed.Style();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
    v8[8] = *((unsigned char *)a2 + v7 + 8);
    long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = v10;
    *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    v8[73] = *((unsigned char *)a2 + v7 + 73);
    *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
    v8[78] = *((unsigned char *)a2 + v7 + 78);
    long long v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v12 = v11[9];
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v35 = v11[10];
    uint64_t v36 = &v8[v35];
    uint64_t v37 = &v9[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    v8[v11[11]] = v9[v11[11]];
    uint64_t v38 = v11[12];
    uint64_t v33 = &v8[v38];
    uint64_t v34 = &v9[v38];
  }
  else
  {
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v5 = type metadata accessor for IntegerFormatStyle.Percent();
    }
    else {
      uint64_t v5 = type metadata accessor for IntegerFormatStyle();
    }
    uint64_t v18 = *(int *)(v5 + 36);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    uint64_t v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    long long v24 = &v19[v23];
    long long v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    long long v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    uint64_t v33 = &v19[v32];
    uint64_t v34 = &v20[v32];
  }
  *uint64_t v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for IntegerFormatStyle.Attributed(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
      uint64_t v9 = (char *)a1 + v8;
      long long v10 = (char *)a2 + v8;
      *(void *)uint64_t v9 = *(void *)((char *)a2 + v8);
      v9[8] = *((unsigned char *)a2 + v8 + 8);
      long long v11 = *(_OWORD *)((char *)a2 + v8 + 32);
      *((_OWORD *)v9 + 1) = *(_OWORD *)((char *)a2 + v8 + 16);
      *((_OWORD *)v9 + 2) = v11;
      *((_OWORD *)v9 + 3) = *(_OWORD *)((char *)a2 + v8 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a2 + v8 + 57);
      v9[73] = *((unsigned char *)a2 + v8 + 73);
      *(_DWORD *)(v9 + 74) = *(_DWORD *)((char *)a2 + v8 + 74);
      v9[78] = *((unsigned char *)a2 + v8 + 78);
      uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v13 = v12[9];
      uint64_t v14 = &v9[v13];
      uint64_t v15 = &v10[v13];
      uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v36 = v12[10];
      uint64_t v37 = &v9[v36];
      uint64_t v38 = &v10[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      v9[v12[11]] = v10[v12[11]];
      uint64_t v39 = v12[12];
      uint64_t v34 = &v9[v39];
      uint64_t v35 = &v10[v39];
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle.Percent();
      }
      else {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle();
      }
      uint64_t v19 = *(int *)(v6 + 36);
      uint64_t v20 = (char *)a1 + v19;
      long long v21 = (char *)a2 + v19;
      *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
      v20[8] = *((unsigned char *)a2 + v19 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *((_OWORD *)v20 + 1) = *(_OWORD *)((char *)a2 + v19 + 16);
      *((_OWORD *)v20 + 2) = v22;
      *((_OWORD *)v20 + 3) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      v20[73] = *((unsigned char *)a2 + v19 + 73);
      *((_WORD *)v20 + 37) = *(_WORD *)((char *)a2 + v19 + 74);
      v20[76] = *((unsigned char *)a2 + v19 + 76);
      v20[77] = *((unsigned char *)a2 + v19 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v23[9];
      long long v25 = &v20[v24];
      uint64_t v26 = &v21[v24];
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v30 = v23[10];
      long long v31 = &v20[v30];
      uint64_t v32 = &v21[v30];
      *(void *)long long v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v23[11];
      uint64_t v34 = &v20[v33];
      uint64_t v35 = &v21[v33];
    }
    *uint64_t v34 = *v35;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_181D7C244);
}

uint64_t sub_181D7C244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for IntegerFormatStyle.Attributed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_181D7C2C8);
}

uint64_t sub_181D7C2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IntegerFormatStyle.Attributed.Style();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

unsigned char *storeEnumTagSinglePayload for IntegerFormatStyle.Percent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D7C414);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata completion function for IntegerFormatStyle.Attributed.Style()
{
  uint64_t result = type metadata accessor for IntegerFormatStyle();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for IntegerFormatStyle.Percent();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for IntegerFormatStyle.Currency();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for IntegerFormatStyle.Attributed.Style(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v19 = a2[3];
      a1[2] = a2[2];
      a1[3] = v19;
      uint64_t v20 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
      long long v21 = (char *)a1 + v20;
      long long v22 = (char *)a2 + v20;
      *(void *)long long v21 = *(void *)((char *)a2 + v20);
      v21[8] = *((unsigned char *)a2 + v20 + 8);
      long long v23 = *(_OWORD *)((char *)a2 + v20 + 32);
      *((_OWORD *)v21 + 1) = *(_OWORD *)((char *)a2 + v20 + 16);
      *((_OWORD *)v21 + 2) = v23;
      *((_OWORD *)v21 + 3) = *(_OWORD *)((char *)a2 + v20 + 48);
      *(_OWORD *)(v21 + 57) = *(_OWORD *)((char *)a2 + v20 + 57);
      v21[73] = *((unsigned char *)a2 + v20 + 73);
      *(_DWORD *)(v21 + 74) = *(_DWORD *)((char *)a2 + v20 + 74);
      v21[78] = *((unsigned char *)a2 + v20 + 78);
      uint64_t v24 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v25 = v24[9];
      __dsta = &v21[v25];
      uint64_t v26 = &v22[v25];
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v29(v26, 1, v27))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v26, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dsta, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(__dsta, 0, 1, v27);
      }
      uint64_t v39 = v24[10];
      uint64_t v40 = &v21[v39];
      uint64_t v41 = &v22[v39];
      *(void *)uint64_t v40 = *(void *)v41;
      v40[8] = v41[8];
      v21[v24[11]] = v22[v24[11]];
      v21[v24[12]] = v22[v24[12]];
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v7 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent() + 36);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
        v8[8] = *((unsigned char *)a2 + v7 + 8);
        long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
        *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
        *((_OWORD *)v8 + 2) = v10;
        *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
        v8[73] = *((unsigned char *)a2 + v7 + 73);
        *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v7 + 74);
        v8[76] = *((unsigned char *)a2 + v7 + 76);
        v8[77] = *((unsigned char *)a2 + v7 + 77);
        long long v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v12 = v11[9];
        __dst = &v8[v12];
        uint64_t v13 = &v9[v12];
        uint64_t v14 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
        swift_unknownObjectRetain();
        if (v16(v13, 1, v14))
        {
          uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
      }
      else
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v31 = *(int *)(type metadata accessor for IntegerFormatStyle() + 36);
        uint64_t v8 = (char *)a1 + v31;
        uint64_t v9 = (char *)a2 + v31;
        *(void *)uint64_t v8 = *(void *)((char *)a2 + v31);
        v8[8] = *((unsigned char *)a2 + v31 + 8);
        long long v32 = *(_OWORD *)((char *)a2 + v31 + 32);
        *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v31 + 16);
        *((_OWORD *)v8 + 2) = v32;
        *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v31 + 48);
        *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v31 + 57);
        v8[73] = *((unsigned char *)a2 + v31 + 73);
        *((_WORD *)v8 + 37) = *(_WORD *)((char *)a2 + v31 + 74);
        v8[76] = *((unsigned char *)a2 + v31 + 76);
        v8[77] = *((unsigned char *)a2 + v31 + 77);
        long long v11 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
        uint64_t v33 = v11[9];
        uint64_t v46 = &v8[v33];
        uint64_t v34 = &v9[v33];
        uint64_t v35 = type metadata accessor for FloatingPointRoundingRule();
        uint64_t v36 = *(void *)(v35 - 8);
        uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
        swift_unknownObjectRetain();
        if (v37(v34, 1, v35))
        {
          uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
          memcpy(v46, v34, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v46, v34, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v46, 0, 1, v35);
        }
      }
      uint64_t v42 = v11[10];
      uint64_t v43 = &v8[v42];
      uint64_t v44 = &v9[v42];
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      v8[v11[11]] = v9[v11[11]];
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for IntegerFormatStyle.Attributed.Style(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
    uint64_t v5 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  }
  else
  {
    if (result == 1)
    {
      swift_unknownObjectRelease();
      uint64_t v3 = type metadata accessor for IntegerFormatStyle.Percent();
    }
    else
    {
      if (result) {
        return result;
      }
      swift_unknownObjectRelease();
      uint64_t v3 = type metadata accessor for IntegerFormatStyle();
    }
    uint64_t v4 = *(int *)(v3 + 36);
    uint64_t v5 = type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
  }
  uint64_t v6 = a1 + *(int *)(v5 + 36) + v4;
  uint64_t v7 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v7);
  }
  return result;
}

uint64_t initializeWithCopy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v16;
    uint64_t v17 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
    uint64_t v18 = a1 + v17;
    uint64_t v19 = a2 + v17;
    *(void *)uint64_t v18 = *(void *)(a2 + v17);
    *(unsigned char *)(v18 + 8) = *(unsigned char *)(a2 + v17 + 8);
    long long v20 = *(_OWORD *)(a2 + v17 + 32);
    *(_OWORD *)(v18 + 16) = *(_OWORD *)(a2 + v17 + 16);
    *(_OWORD *)(v18 + 32) = v20;
    *(_OWORD *)(v18 + 48) = *(_OWORD *)(a2 + v17 + 48);
    *(_OWORD *)(v18 + 57) = *(_OWORD *)(a2 + v17 + 57);
    *(unsigned char *)(v18 + 73) = *(unsigned char *)(a2 + v17 + 73);
    *(_DWORD *)(v18 + 74) = *(_DWORD *)(a2 + v17 + 74);
    *(unsigned char *)(v18 + 78) = *(unsigned char *)(a2 + v17 + 78);
    long long v21 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v22 = v21[9];
    uint64_t v47 = (void *)(v18 + v22);
    long long v23 = (const void *)(v19 + v22);
    uint64_t v24 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48);
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v47, v23, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v25 + 16))(v47, v23, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v47, 0, 1, v24);
    }
    uint64_t v36 = v21[10];
    uint64_t v37 = v18 + v36;
    uint64_t v38 = v19 + v36;
    *(void *)uint64_t v37 = *(void *)v38;
    *(unsigned char *)(v37 + 8) = *(unsigned char *)(v38 + 8);
    *(unsigned char *)(v18 + v21[11]) = *(unsigned char *)(v19 + v21[11]);
    uint64_t v39 = v21[12];
    uint64_t v40 = (unsigned char *)(v18 + v39);
    uint64_t v41 = (unsigned char *)(v19 + v39);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v5 = *(int *)(type metadata accessor for IntegerFormatStyle.Percent() + 36);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      *(void *)uint64_t v6 = *(void *)(a2 + v5);
      *(unsigned char *)(v6 + 8) = *(unsigned char *)(a2 + v5 + 8);
      long long v8 = *(_OWORD *)(a2 + v5 + 32);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v5 + 16);
      *(_OWORD *)(v6 + 32) = v8;
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v5 + 48);
      *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v5 + 57);
      *(unsigned char *)(v6 + 73) = *(unsigned char *)(a2 + v5 + 73);
      *(_WORD *)(v6 + 74) = *(_WORD *)(a2 + v5 + 74);
      *(unsigned char *)(v6 + 76) = *(unsigned char *)(a2 + v5 + 76);
      *(unsigned char *)(v6 + 77) = *(unsigned char *)(a2 + v5 + 77);
      uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v10 = v9[9];
      __dst = (void *)(v6 + v10);
      long long v11 = (const void *)(v7 + v10);
      uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v13 = *(void *)(v12 - 8);
      uint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
      swift_unknownObjectRetain();
      if (v14(v11, 1, v12))
      {
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v28 = *(int *)(type metadata accessor for IntegerFormatStyle() + 36);
      uint64_t v6 = a1 + v28;
      uint64_t v7 = a2 + v28;
      *(void *)uint64_t v6 = *(void *)(a2 + v28);
      *(unsigned char *)(v6 + 8) = *(unsigned char *)(a2 + v28 + 8);
      long long v29 = *(_OWORD *)(a2 + v28 + 32);
      *(_OWORD *)(v6 + 16) = *(_OWORD *)(a2 + v28 + 16);
      *(_OWORD *)(v6 + 32) = v29;
      *(_OWORD *)(v6 + 48) = *(_OWORD *)(a2 + v28 + 48);
      *(_OWORD *)(v6 + 57) = *(_OWORD *)(a2 + v28 + 57);
      *(unsigned char *)(v6 + 73) = *(unsigned char *)(a2 + v28 + 73);
      *(_WORD *)(v6 + 74) = *(_WORD *)(a2 + v28 + 74);
      *(unsigned char *)(v6 + 76) = *(unsigned char *)(a2 + v28 + 76);
      *(unsigned char *)(v6 + 77) = *(unsigned char *)(a2 + v28 + 77);
      uint64_t v9 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v30 = v9[9];
      uint64_t v48 = (void *)(v6 + v30);
      uint64_t v31 = (const void *)(v7 + v30);
      uint64_t v32 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
      swift_unknownObjectRetain();
      if (v34(v31, 1, v32))
      {
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v48, v31, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v48, v31, v32);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v48, 0, 1, v32);
      }
    }
    uint64_t v42 = v9[10];
    uint64_t v43 = v6 + v42;
    uint64_t v44 = v7 + v42;
    *(void *)uint64_t v43 = *(void *)v44;
    *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
    uint64_t v45 = v9[11];
    uint64_t v40 = (unsigned char *)(v6 + v45);
    uint64_t v41 = (unsigned char *)(v7 + v45);
  }
  *uint64_t v40 = *v41;
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for IntegerFormatStyle.Attributed.Style(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v7 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
      uint64_t v8 = a1 + v7;
      uint64_t v9 = a2 + v7;
      LOBYTE(v7) = *(unsigned char *)(a2 + v7 + 8);
      *(void *)uint64_t v8 = *(void *)v9;
      *(unsigned char *)(v8 + 8) = v7;
      long long v10 = *(_OWORD *)(v9 + 57);
      long long v12 = *(_OWORD *)(v9 + 32);
      long long v11 = *(_OWORD *)(v9 + 48);
      *(_OWORD *)(v8 + 16) = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v8 + 32) = v12;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 57) = v10;
      *(unsigned char *)(v8 + 73) = *(unsigned char *)(v9 + 73);
      *(_DWORD *)(v8 + 74) = *(_DWORD *)(v9 + 74);
      *(unsigned char *)(v8 + 78) = *(unsigned char *)(v9 + 78);
      uint64_t v13 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v14 = v13[9];
      __dst = (void *)(v8 + v14);
      uint64_t v15 = (const void *)(v9 + v14);
      uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v17 = *(void *)(v16 - 8);
      uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v18(v15, 1, v16))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dst, v15, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(__dst, v15, v16);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      uint64_t v40 = v13[10];
      uint64_t v41 = v8 + v40;
      uint64_t v42 = (uint64_t *)(v9 + v40);
      uint64_t v43 = *v42;
      *(unsigned char *)(v41 + 8) = *((unsigned char *)v42 + 8);
      *(void *)uint64_t v41 = v43;
      *(unsigned char *)(v8 + v13[11]) = *(unsigned char *)(v9 + v13[11]);
      uint64_t v44 = v13[12];
      uint64_t v38 = (unsigned char *)(v8 + v44);
      uint64_t v39 = (unsigned char *)(v9 + v44);
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle.Percent();
      }
      else {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle();
      }
      uint64_t v20 = *(int *)(v6 + 36);
      uint64_t v21 = a1 + v20;
      uint64_t v22 = a2 + v20;
      LOBYTE(v20) = *(unsigned char *)(a2 + v20 + 8);
      *(void *)uint64_t v21 = *(void *)v22;
      *(unsigned char *)(v21 + 8) = v20;
      long long v23 = *(_OWORD *)(v22 + 57);
      long long v25 = *(_OWORD *)(v22 + 32);
      long long v24 = *(_OWORD *)(v22 + 48);
      *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
      *(_OWORD *)(v21 + 32) = v25;
      *(_OWORD *)(v21 + 48) = v24;
      *(_OWORD *)(v21 + 57) = v23;
      *(unsigned char *)(v21 + 73) = *(unsigned char *)(v22 + 73);
      LOWORD(v20) = *(_WORD *)(v22 + 74);
      *(unsigned char *)(v21 + 76) = *(unsigned char *)(v22 + 76);
      *(_WORD *)(v21 + 74) = v20;
      *(unsigned char *)(v21 + 77) = *(unsigned char *)(v22 + 77);
      uint64_t v26 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v27 = v26[9];
      __dsta = (void *)(v21 + v27);
      uint64_t v28 = (const void *)(v22 + v27);
      uint64_t v29 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v30 = *(void *)(v29 - 8);
      uint64_t v31 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48);
      swift_unknownObjectRetain();
      if (v31(v28, 1, v29))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(__dsta, v28, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v30 + 16))(__dsta, v28, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(__dsta, 0, 1, v29);
      }
      uint64_t v33 = v26[10];
      uint64_t v34 = v21 + v33;
      uint64_t v35 = (uint64_t *)(v22 + v33);
      uint64_t v36 = *v35;
      *(unsigned char *)(v34 + 8) = *((unsigned char *)v35 + 8);
      *(void *)uint64_t v34 = v36;
      uint64_t v37 = v26[11];
      uint64_t v38 = (unsigned char *)(v21 + v37);
      uint64_t v39 = (unsigned char *)(v22 + v37);
    }
    *uint64_t v38 = *v39;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for IntegerFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    long long v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    *(void *)uint64_t v8 = *(void *)((char *)a2 + v7);
    v8[8] = *((unsigned char *)a2 + v7 + 8);
    long long v10 = *(_OWORD *)((char *)a2 + v7 + 32);
    *((_OWORD *)v8 + 1) = *(_OWORD *)((char *)a2 + v7 + 16);
    *((_OWORD *)v8 + 2) = v10;
    *((_OWORD *)v8 + 3) = *(_OWORD *)((char *)a2 + v7 + 48);
    *(_OWORD *)(v8 + 57) = *(_OWORD *)((char *)a2 + v7 + 57);
    v8[73] = *((unsigned char *)a2 + v7 + 73);
    *(_DWORD *)(v8 + 74) = *(_DWORD *)((char *)a2 + v7 + 74);
    v8[78] = *((unsigned char *)a2 + v7 + 78);
    long long v11 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
    uint64_t v12 = v11[9];
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v35 = v11[10];
    uint64_t v36 = &v8[v35];
    uint64_t v37 = &v9[v35];
    *(void *)uint64_t v36 = *(void *)v37;
    v36[8] = v37[8];
    v8[v11[11]] = v9[v11[11]];
    uint64_t v38 = v11[12];
    uint64_t v33 = &v8[v38];
    uint64_t v34 = &v9[v38];
  }
  else
  {
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1) {
      uint64_t v5 = type metadata accessor for IntegerFormatStyle.Percent();
    }
    else {
      uint64_t v5 = type metadata accessor for IntegerFormatStyle();
    }
    uint64_t v18 = *(int *)(v5 + 36);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)((char *)a2 + v18);
    v19[8] = *((unsigned char *)a2 + v18 + 8);
    long long v21 = *(_OWORD *)((char *)a2 + v18 + 32);
    *((_OWORD *)v19 + 1) = *(_OWORD *)((char *)a2 + v18 + 16);
    *((_OWORD *)v19 + 2) = v21;
    *((_OWORD *)v19 + 3) = *(_OWORD *)((char *)a2 + v18 + 48);
    *(_OWORD *)(v19 + 57) = *(_OWORD *)((char *)a2 + v18 + 57);
    v19[73] = *((unsigned char *)a2 + v18 + 73);
    *((_WORD *)v19 + 37) = *(_WORD *)((char *)a2 + v18 + 74);
    v19[76] = *((unsigned char *)a2 + v18 + 76);
    v19[77] = *((unsigned char *)a2 + v18 + 77);
    uint64_t v22 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
    uint64_t v23 = v22[9];
    long long v24 = &v19[v23];
    long long v25 = &v20[v23];
    uint64_t v26 = type metadata accessor for FloatingPointRoundingRule();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    uint64_t v29 = v22[10];
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v22[11];
    uint64_t v33 = &v19[v32];
    uint64_t v34 = &v20[v32];
  }
  *uint64_t v33 = *v34;
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for IntegerFormatStyle.Attributed.Style(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      long long v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = *(int *)(type metadata accessor for IntegerFormatStyle.Currency() + 40);
      uint64_t v9 = (char *)a1 + v8;
      long long v10 = (char *)a2 + v8;
      *(void *)uint64_t v9 = *(void *)((char *)a2 + v8);
      v9[8] = *((unsigned char *)a2 + v8 + 8);
      long long v11 = *(_OWORD *)((char *)a2 + v8 + 32);
      *((_OWORD *)v9 + 1) = *(_OWORD *)((char *)a2 + v8 + 16);
      *((_OWORD *)v9 + 2) = v11;
      *((_OWORD *)v9 + 3) = *(_OWORD *)((char *)a2 + v8 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)((char *)a2 + v8 + 57);
      v9[73] = *((unsigned char *)a2 + v8 + 73);
      *(_DWORD *)(v9 + 74) = *(_DWORD *)((char *)a2 + v8 + 74);
      v9[78] = *((unsigned char *)a2 + v8 + 78);
      uint64_t v12 = (int *)type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
      uint64_t v13 = v12[9];
      uint64_t v14 = &v9[v13];
      uint64_t v15 = &v10[v13];
      uint64_t v16 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      uint64_t v36 = v12[10];
      uint64_t v37 = &v9[v36];
      uint64_t v38 = &v10[v36];
      *(void *)uint64_t v37 = *(void *)v38;
      v37[8] = v38[8];
      v9[v12[11]] = v10[v12[11]];
      uint64_t v39 = v12[12];
      uint64_t v34 = &v9[v39];
      uint64_t v35 = &v10[v39];
    }
    else
    {
      *a1 = *a2;
      if (EnumCaseMultiPayload == 1) {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle.Percent();
      }
      else {
        uint64_t v6 = type metadata accessor for IntegerFormatStyle();
      }
      uint64_t v19 = *(int *)(v6 + 36);
      uint64_t v20 = (char *)a1 + v19;
      long long v21 = (char *)a2 + v19;
      *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
      v20[8] = *((unsigned char *)a2 + v19 + 8);
      long long v22 = *(_OWORD *)((char *)a2 + v19 + 32);
      *((_OWORD *)v20 + 1) = *(_OWORD *)((char *)a2 + v19 + 16);
      *((_OWORD *)v20 + 2) = v22;
      *((_OWORD *)v20 + 3) = *(_OWORD *)((char *)a2 + v19 + 48);
      *(_OWORD *)(v20 + 57) = *(_OWORD *)((char *)a2 + v19 + 57);
      v20[73] = *((unsigned char *)a2 + v19 + 73);
      *((_WORD *)v20 + 37) = *(_WORD *)((char *)a2 + v19 + 74);
      v20[76] = *((unsigned char *)a2 + v19 + 76);
      v20[77] = *((unsigned char *)a2 + v19 + 77);
      uint64_t v23 = (int *)type metadata accessor for NumberFormatStyleConfiguration.Collection(0);
      uint64_t v24 = v23[9];
      long long v25 = &v20[v24];
      uint64_t v26 = &v21[v24];
      uint64_t v27 = type metadata accessor for FloatingPointRoundingRule();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointRoundingRule?);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      uint64_t v30 = v23[10];
      uint64_t v31 = &v20[v30];
      uint64_t v32 = &v21[v30];
      *(void *)uint64_t v31 = *(void *)v32;
      v31[8] = v32[8];
      uint64_t v33 = v23[11];
      uint64_t v34 = &v20[v33];
      uint64_t v35 = &v21[v33];
    }
    *uint64_t v34 = *v35;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Percent.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Currency.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Currency.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Currency.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Percent.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Percent.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.CurrencyCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.PercentCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.IntegerCodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for IntegerFormatStyle.Attributed.Style.CodingKeys()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for IntegerFormatStyle.Currency.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D7DFB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for IntegerFormatStyle.Attributed.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D7E074);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.IntegerCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.PercentCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomDebugStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for CustomStringConvertible in IntegerFormatStyle<A>.Attributed.Style.CurrencyCodingKeys()
{
  return swift_getWitnessTable();
}

uint64_t FormatStyle.locale(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t dispatch thunk of FormatStyle.locale(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance URL.FormatStyle@<X0>(_OWORD *a1@<X8>)
{
  long long v2 = v1[9];
  long long v3 = v1[11];
  long long v29 = v1[10];
  long long v30 = v3;
  long long v4 = v1[11];
  long long v31 = v1[12];
  long long v5 = v1[5];
  long long v6 = v1[7];
  long long v25 = v1[6];
  long long v7 = v25;
  long long v26 = v6;
  long long v8 = v1[7];
  long long v9 = v1[9];
  long long v27 = v1[8];
  long long v10 = v27;
  long long v28 = v9;
  long long v11 = v1[1];
  long long v12 = v1[3];
  long long v21 = v1[2];
  long long v13 = v21;
  long long v22 = v12;
  long long v14 = v1[3];
  long long v15 = v1[5];
  long long v23 = v1[4];
  long long v16 = v23;
  long long v24 = v15;
  long long v17 = v1[1];
  v20[0] = *v1;
  long long v18 = v20[0];
  v20[1] = v17;
  a1[10] = v29;
  a1[11] = v4;
  a1[12] = v1[12];
  a1[6] = v7;
  a1[7] = v8;
  a1[8] = v10;
  a1[9] = v2;
  a1[2] = v13;
  a1[3] = v14;
  a1[4] = v16;
  a1[5] = v5;
  *a1 = v18;
  a1[1] = v11;
  return outlined retain of URL.FormatStyle((uint64_t)v20);
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.ISO8601FormatStyle@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 1);
  char v3 = *(unsigned char *)(v1 + 2);
  char v4 = *(unsigned char *)(v1 + 3);
  char v5 = *(unsigned char *)(v1 + 4);
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v6 = *(void *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(unsigned char *)(a1 + 3) = v4;
  *(unsigned char *)(a1 + 4) = v5;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();

  return swift_unknownObjectRetain();
}

uint64_t URLParseInfo.port.getter()
{
  if (*(unsigned char *)(v0 + 144)) {
    return 0;
  }
  unint64_t v2 = String.subscript.getter();
  uint64_t v6 = v5;
  if (!((v2 ^ v3) >> 14))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v7 = v2;
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SiSg_Tg5061_ss17FixedWidthIntegerPsE_5radixxSgqd___SitcSyRd__lufcADSRys5I15VGXEfU_Si_SsTG5SiTf1cn_n(v2, v3, v4, v5, 10);
  if ((v11 & 0x100) != 0)
  {
    uint64_t v12 = specialized _parseInteger<A, B>(ascii:radix:)(v7, v8, v9, v6, 10);
    char v16 = v15;
    swift_bridgeObjectRelease();
    int v14 = v16 & 1;
  }
  else
  {
    uint64_t v12 = v10;
    char v13 = v11;
    swift_bridgeObjectRelease();
    int v14 = v13 & 1;
  }
  if (v14) {
    return 0;
  }
  else {
    return v12;
  }
}

uint64_t dispatch thunk of static UIDNAHook.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of static UIDNAHook.decode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

unsigned char *storeEnumTagSinglePayload for URLParserKind(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D7E528);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for URLParserKind()
{
  return &type metadata for URLParserKind;
}

unint64_t lazy protocol witness table accessor for type URLParserKind and conformance URLParserKind()
{
  unint64_t result = lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind;
  if (!lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLParserKind and conformance URLParserKind);
  }
  return result;
}

uint64_t specialized static RFC3986Parser.percentEncodeHost<A>(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if (!a4) {
    return 0;
  }
  unint64_t v6 = a1 >> 14;
  unint64_t v7 = a2 >> 14;
  if (a1 >> 14 == a2 >> 14) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = Substring.UTF8View.subscript.getter();
  if (v11 != 91) {
    goto LABEL_15;
  }
  if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
  {
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  uint64_t v11 = Substring.UTF8View.subscript.getter();
  if (v11 != 93)
  {
LABEL_15:
    unint64_t v105 = a1;
    uint64_t v106 = (unsigned __int16 *)a2;
    uint64_t v107 = (unsigned __int16 *)a3;
    unint64_t v108 = a4;
    MEMORY[0x1F4188790](v11);
    id v96 = &v105;
    char v97 = 4;
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)_ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v95, a1, a2, a3, a4);
    uint64_t v29 = v28;
    swift_bridgeObjectRelease();
    if (!v29)
    {
      unint64_t v30 = v105;
      unint64_t v31 = (unint64_t)v106;
      unint64_t v32 = (unint64_t)v107;
      unint64_t v33 = v108;
      swift_bridgeObjectRetain();
      uint64_t v8 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v30, v31, v32, v33, 4u);
      swift_bridgeObjectRelease();
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
LABEL_68:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_69;
  }
  if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1)) {
    goto LABEL_57;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  int v12 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v12 != 93)
  {
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2, a3, a4);
  if ((v14 & 1) == 0)
  {
    unint64_t v15 = v13;
    if (!__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
    {
      unsigned __int8 v104 = (unsigned __int16 *)(v15 >> 14);
      if (v15 >> 14 <= (unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14)
      {
        uint64_t v16 = Substring.subscript.getter();
        unint64_t v18 = v17;
        unint64_t v105 = v16;
        uint64_t v106 = v19;
        uint64_t v107 = v20;
        unint64_t v108 = v17;
        MEMORY[0x1F4188790](v16);
        id v96 = &v105;
        char v97 = 8;
        long long v24 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5SS_Tg5((void *(*)(void *__return_ptr, void, void))closure #1 in StringProtocol.addingPercentEncoding(forURLComponent:)specialized partial apply, (uint64_t)v95, v22, v23, v21, v18);
        if (v25)
        {
          uint64_t v26 = (uint64_t)v24;
          long long v27 = v25;
        }
        else
        {
          unint64_t v68 = v105;
          unint64_t v69 = (unint64_t)v106;
          unint64_t v70 = v108;
          uint64_t v103 = v107;
          swift_bridgeObjectRetain();
          uint64_t v26 = specialized StringProtocol.addingPercentEncoding<A>(utf8Buffer:component:)(v68, v69, (unint64_t)v103, v70, 8u);
          long long v27 = v71;
          swift_bridgeObjectRelease();
        }
        if ((unint64_t)v104 >= v6)
        {
          uint64_t v72 = Substring.subscript.getter();
          uint64_t v73 = MEMORY[0x185301F50](v72);
          uint64_t v75 = v74;
          swift_bridgeObjectRelease();
          unint64_t v105 = v73;
          uint64_t v106 = v75;
          v76._countAndFlagsBits = v26;
          v76._object = v27;
          String.append(_:)(v76);
          swift_bridgeObjectRelease();
          v77._countAndFlagsBits = 93;
          v77._object = (void *)0xE100000000000000;
          String.append(_:)(v77);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return v105;
        }
        goto LABEL_64;
      }
      goto LABEL_61;
    }
    goto LABEL_59;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
    {
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    Substring.UTF8View.index(_:offsetBy:)();
    int v34 = Substring.UTF8View.subscript.getter();
    swift_bridgeObjectRelease();
    if (v34 != 93)
    {
LABEL_62:
      __break(1u);
      goto LABEL_63;
    }
    swift_bridgeObjectRetain();
    unint64_t v35 = Substring.UTF8View.index(after:)();
    if (__OFSUB__(specialized Collection.count.getter(a1, a2, a3, a4), 1))
    {
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
    if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 < v35 >> 14)
    {
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    unint64_t v36 = Substring.subscript.getter();
    unint64_t v38 = v37;
    unint64_t v40 = v39;
    unint64_t v42 = v41;
    uint64_t v43 = specialized Collection<>.firstIndex(of:)(0x25u, a1, a2, a3, a4);
    if (v44)
    {
      char v60 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v36, v38, v40, v42, 2u, 0);
      if (v60 == 2)
      {
        unint64_t v105 = v36;
        uint64_t v106 = (unsigned __int16 *)v38;
        uint64_t v107 = (unsigned __int16 *)v40;
        unint64_t v108 = v42;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        StringProtocol._ephemeralString.getter();
        uint64_t v103 = (unsigned __int16 *)v38;
        unsigned __int8 v104 = (unsigned __int16 *)v40;
        unint64_t v61 = v42;
        uint64_t v62 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v63 = (unsigned __int16 *)objc_msgSend(v62, sel__fastCharacterContents);
        id v64 = v62;
        if (!v63)
        {
          swift_bridgeObjectRetain();
          BOOL v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, (unint64_t)v103, (unint64_t)v104, v61, 2u, 0);
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
        unint64_t v105 = v36;
        uint64_t v106 = v103;
        uint64_t v107 = v104;
        unint64_t v108 = v61;
        StringProtocol._ephemeralString.getter();
        uint64_t v65 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v66 = objc_msgSend(v65, sel_length);
        swift_unknownObjectRelease();
        char v60 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v63, (uint64_t)v66, 2u, 0);
      }
      BOOL v67 = v60;
      swift_bridgeObjectRelease();
      goto LABEL_38;
    }
    unint64_t v45 = v43;
    unsigned __int8 v104 = (unsigned __int16 *)v40;
    if (v7 == (unint64_t)Substring.UTF8View.index(after:)() >> 14) {
      goto LABEL_33;
    }
    if (Substring.UTF8View.subscript.getter() != 50) {
      goto LABEL_33;
    }
    unint64_t v46 = Substring.UTF8View.index(after:)();
    if (v7 == v46 >> 14) {
      goto LABEL_33;
    }
    unint64_t v47 = v46;
    if (Substring.UTF8View.subscript.getter() != 53) {
      goto LABEL_33;
    }
    unint64_t v100 = v47;
    if (v45 >> 14 < v36 >> 14)
    {
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    unint64_t v48 = Substring.subscript.getter();
    unint64_t v50 = v49;
    unint64_t v101 = v48;
    id v102 = v51;
    uint64_t v103 = v52;
    char v53 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v48, (unint64_t)v51, (unint64_t)v52, v49, 2u, 0);
    uint64_t v99 = 0;
    if (v53 == 2)
    {
      unint64_t v105 = v101;
      uint64_t v106 = v102;
      uint64_t v107 = v103;
      unint64_t v108 = v50;
      unint64_t v98 = v50;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      char v54 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v55 = (unsigned __int16 *)objc_msgSend(v54, sel__fastCharacterContents);
      id v56 = v54;
      if (!v55)
      {
        swift_bridgeObjectRetain();
        BOOL v80 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v101, (unint64_t)v102, (unint64_t)v103, v98, 2u, 0);
        swift_bridgeObjectRelease_n();
        if (!v80) {
          goto LABEL_33;
        }
LABEL_49:
        swift_bridgeObjectRetain();
        if (v38 >> 14 < (unint64_t)Substring.index(after:)() >> 14)
        {
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
        uint64_t v81 = (unsigned __int16 *)v42;
        unint64_t v82 = Substring.subscript.getter();
        unint64_t v84 = v83;
        unint64_t v86 = v85;
        unsigned __int8 v104 = (unsigned __int16 *)v87;
        char v88 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v82, v83, v85, v87, 8u, 1);
        if (v88 != 2)
        {
          char v94 = v88;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          if (v94) {
            goto LABEL_39;
          }
          goto LABEL_45;
        }
        uint64_t v103 = v81;
        unint64_t v105 = v82;
        uint64_t v106 = (unsigned __int16 *)v84;
        uint64_t v107 = (unsigned __int16 *)v86;
        unint64_t v108 = (unint64_t)v104;
        lazy protocol witness table accessor for type Substring and conformance Substring();
        StringProtocol._ephemeralString.getter();
        uint64_t v89 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        uint64_t v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
        id v91 = v89;
        id v102 = v90;
        if (v90)
        {
          unint64_t v105 = v82;
          uint64_t v106 = (unsigned __int16 *)v84;
          uint64_t v107 = (unsigned __int16 *)v86;
          unint64_t v108 = (unint64_t)v104;
          StringProtocol._ephemeralString.getter();
          uint64_t v92 = (void *)String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v93 = objc_msgSend(v92, sel_length);
          swift_unknownObjectRelease();
          BOOL v67 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v102, (uint64_t)v93, 8u, 1);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_38:
          swift_bridgeObjectRelease();
          if (v67)
          {
LABEL_39:
            unint64_t v105 = a1;
            uint64_t v106 = (unsigned __int16 *)a2;
            uint64_t v107 = (unsigned __int16 *)a3;
            unint64_t v108 = a4;
            lazy protocol witness table accessor for type Substring and conformance Substring();
            uint64_t v8 = String.init<A>(_:)();
LABEL_17:
            swift_bridgeObjectRelease();
            return v8;
          }
LABEL_45:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        swift_bridgeObjectRetain();
        BOOL v78 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v82, v84, v86, (unint64_t)v104, 8u, 1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_44:
        swift_bridgeObjectRelease_n();
        if (v78) {
          goto LABEL_39;
        }
        goto LABEL_45;
      }
      unint64_t v105 = v101;
      uint64_t v106 = v102;
      uint64_t v107 = v103;
      unint64_t v108 = v98;
      uint64_t v103 = v55;
      StringProtocol._ephemeralString.getter();
      char v57 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v58 = objc_msgSend(v57, sel_length);
      swift_unknownObjectRelease();
      char v53 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v103, (uint64_t)v58, 2u, 0);
    }
    char v59 = v53;
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
    {
LABEL_33:
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      return 0;
    }
    goto LABEL_49;
  }
LABEL_69:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t one-time initialization function for schemesToPercentEncodeHost()
{
  uint64_t v0 = 0;
  uint64_t v5 = Set.init(minimumCapacity:)();
  do
  {
    unint64_t v1 = *(void *)((char *)&outlined read-only object #0 of one-time initialization function for schemesToPercentEncodeHost
                   + v0
                   + 32);
    unint64_t v2 = *(void *)((char *)&outlined read-only object #0 of one-time initialization function for schemesToPercentEncodeHost
                   + v0
                   + 40);
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v4, v1, v2);
    swift_bridgeObjectRelease();
    v0 += 16;
  }
  while (v0 != 208);
  uint64_t result = swift_arrayDestroy();
  static RFC3986Parser.schemesToPercentEncodeHost = v5;
  return result;
}

unint64_t UInt8.allowedURLComponents.getter(char a1)
{
  char v1 = a1 - 33;
  if (a1 - 33) < 0xFu && ((0x7FE9u >> v1)) {
    return byte_1821A7F16[v1];
  }
  char v2 = a1 - 58;
  unsigned int v3 = (a1 - 58);
  if (v3 > 0xF5) {
    return 255;
  }
  if (v3 < 7 && ((0x6Bu >> v2) & 1) != 0) {
    return 0xF0C0D276D2F6D2uLL >> (8 * v2);
  }
  if (a1 == 126) {
    int v4 = -2;
  }
  else {
    int v4 = 0;
  }
  if ((a1 - 123) <= 0xE5u) {
    int v5 = v4;
  }
  else {
    int v5 = 255;
  }
  if (a1 == 95) {
    unsigned int v6 = 254;
  }
  else {
    unsigned int v6 = v5;
  }
  if ((a1 - 91) <= 0xE5u) {
    return v6;
  }
  else {
    return 255;
  }
}

uint64_t specialized static RFC3986Parser.validate(parseInfo:)(unsigned char *a1)
{
  if (a1[72]) {
    goto LABEL_6;
  }
  unint64_t v2 = String.subscript.getter();
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  unint64_t v8 = v7;
  char v9 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v2, v3, v5, v7, 2u, 1);
  if (v9 == 2)
  {
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    uint64_t v10 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (unsigned __int16 *)objc_msgSend(v10, sel__fastCharacterContents);
    id v12 = v10;
    if (!v11)
    {
      swift_bridgeObjectRetain();
      BOOL v97 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v2, v4, v6, v8, 2u, 1);
      swift_bridgeObjectRelease_n();
      if (!v97) {
        return 0;
      }
      goto LABEL_6;
    }
    StringProtocol._ephemeralString.getter();
    uint64_t v13 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v14 = objc_msgSend(v13, sel_length);
    swift_unknownObjectRelease();
    char v9 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v11, (uint64_t)v14, 2u, 1);
  }
  char v15 = v9;
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0) {
    return 0;
  }
LABEL_6:
  if ((a1[96] & 1) == 0)
  {
    unint64_t v16 = String.subscript.getter();
    unint64_t v18 = v17;
    unint64_t v20 = v19;
    unint64_t v22 = v21;
    char v23 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v16, v17, v19, v21, 2u, 1);
    if (v23 != 2) {
      goto LABEL_10;
    }
    lazy protocol witness table accessor for type Substring and conformance Substring();
    StringProtocol._ephemeralString.getter();
    long long v24 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    long long v25 = (unsigned __int16 *)objc_msgSend(v24, sel__fastCharacterContents);
    id v26 = v24;
    if (v25)
    {
      StringProtocol._ephemeralString.getter();
      long long v27 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v28 = objc_msgSend(v27, sel_length);
      swift_unknownObjectRelease();
      char v23 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v25, (uint64_t)v28, 2u, 1);
LABEL_10:
      char v29 = v23;
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0) {
        return 0;
      }
      goto LABEL_11;
    }
    swift_bridgeObjectRetain();
    BOOL v120 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v16, v18, v20, v22, 2u, 1);
    swift_bridgeObjectRelease_n();
    if (!v120) {
      return 0;
    }
  }
LABEL_11:
  if (a1[120]) {
    goto LABEL_12;
  }
  uint64_t v34 = String.subscript.getter();
  unint64_t v36 = v34;
  unint64_t v37 = v35;
  unint64_t v39 = v38;
  unint64_t v41 = v40;
  if (a1[217]) {
    goto LABEL_15;
  }
  if ((v34 ^ v35) < 0x4000) {
    goto LABEL_66;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() != 91)
  {
    swift_bridgeObjectRelease();
    goto LABEL_66;
  }
  if (__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
  {
LABEL_98:
    __break(1u);
    goto LABEL_99;
  }
  Substring.UTF8View.index(_:offsetBy:)();
  int v96 = Substring.UTF8View.subscript.getter();
  swift_bridgeObjectRelease();
  if (v96 != 93)
  {
LABEL_66:
    char v123 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v36, v37, v39, v41, 4u, 1);
    if (v123 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      unint64_t v124 = v41;
      uint64_t v125 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      char v126 = (unsigned __int16 *)objc_msgSend(v125, sel__fastCharacterContents);
      id v127 = v125;
      if (!v126)
      {
        swift_bridgeObjectRetain();
        char v131 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v36, v37, v39, v124, 4u, 1);
        goto LABEL_74;
      }
      StringProtocol._ephemeralString.getter();
      uint64_t v128 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v129 = objc_msgSend(v128, sel_length);
      swift_unknownObjectRelease();
      BOOL v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v126, (uint64_t)v129, 4u, 1);
    }
    else
    {
      BOOL v121 = v123;
    }
LABEL_70:
    swift_bridgeObjectRelease();
    if (!v121) {
      return 0;
    }
LABEL_12:
    if (a1[168]) {
      unint64_t v30 = MEMORY[0x185302C80](0, 0xE000000000000000);
    }
    else {
      unint64_t v30 = String.subscript.getter();
    }
    unint64_t v70 = v30;
    unint64_t v71 = v31;
    unint64_t v72 = v32;
    unint64_t v73 = v33;
    char v74 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v30, v31, v32, v33, 0x10u, 1);
    if (v74 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      uint64_t v75 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      Swift::String v76 = (unsigned __int16 *)objc_msgSend(v75, sel__fastCharacterContents);
      id v77 = v75;
      if (!v76)
      {
        swift_bridgeObjectRetain();
        BOOL v105 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v70, v71, v72, v73, 0x10u, 1);
        swift_bridgeObjectRelease_n();
        if (!v105) {
          return 0;
        }
        goto LABEL_35;
      }
      StringProtocol._ephemeralString.getter();
      BOOL v78 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      id v79 = objc_msgSend(v78, sel_length);
      swift_unknownObjectRelease();
      char v74 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v76, (uint64_t)v79, 0x10u, 1);
    }
    char v80 = v74;
    swift_bridgeObjectRelease();
    if ((v80 & 1) == 0) {
      return 0;
    }
LABEL_35:
    if ((a1[192] & 1) == 0)
    {
      unint64_t v81 = String.subscript.getter();
      unint64_t v83 = v82;
      unint64_t v85 = v84;
      unint64_t v87 = v86;
      char v88 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v81, v82, v84, v86, 0x40u, 1);
      if (v88 != 2) {
        goto LABEL_39;
      }
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      uint64_t v89 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v90 = (unsigned __int16 *)objc_msgSend(v89, sel__fastCharacterContents);
      id v91 = v89;
      if (v90)
      {
        StringProtocol._ephemeralString.getter();
        uint64_t v92 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v93 = objc_msgSend(v92, sel_length);
        swift_unknownObjectRelease();
        char v88 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v90, (uint64_t)v93, 0x40u, 1);
LABEL_39:
        char v94 = v88;
        swift_bridgeObjectRelease();
        if ((v94 & 1) == 0) {
          return 0;
        }
        goto LABEL_40;
      }
      swift_bridgeObjectRetain();
      BOOL v132 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v81, v83, v85, v87, 0x40u, 1);
      swift_bridgeObjectRelease_n();
      if (!v132) {
        return 0;
      }
    }
LABEL_40:
    if (a1[216]) {
      return 1;
    }
    unint64_t v106 = String.subscript.getter();
    unint64_t v108 = v107;
    unint64_t v110 = v109;
    unint64_t v112 = v111;
    char v113 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v106, v107, v109, v111, 0x40u, 1);
    if (v113 == 2)
    {
      lazy protocol witness table accessor for type Substring and conformance Substring();
      StringProtocol._ephemeralString.getter();
      long long v114 = (void *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRelease();
      uint64_t v115 = (unsigned __int16 *)objc_msgSend(v114, sel__fastCharacterContents);
      id v116 = v114;
      if (v115)
      {
        StringProtocol._ephemeralString.getter();
        uint64_t v117 = (void *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v118 = objc_msgSend(v117, sel_length);
        swift_unknownObjectRelease();
        uint64_t v95 = 1;
        BOOL v119 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v115, (uint64_t)v118, 0x40u, 1);
        swift_bridgeObjectRelease();
        if (v119) {
          return v95;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v95 = 1;
        BOOL v133 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v106, v108, v110, v112, 0x40u, 1);
        swift_bridgeObjectRelease_n();
        if (v133) {
          return v95;
        }
      }
    }
    else
    {
      char v122 = v113;
      swift_bridgeObjectRelease();
      if (v122) {
        return 1;
      }
    }
    return 0;
  }
LABEL_15:
  unint64_t v150 = v37 >> 14;
  if (v37 >> 14 == v36 >> 14)
  {
    __break(1u);
    goto LABEL_94;
  }
  swift_bridgeObjectRetain();
  if (Substring.UTF8View.subscript.getter() == 91)
  {
    if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
    {
      Substring.UTF8View.index(_:offsetBy:)();
      int v42 = Substring.UTF8View.subscript.getter();
      swift_bridgeObjectRelease();
      if (v42 == 93)
      {
        swift_bridgeObjectRetain();
        unint64_t v43 = Substring.UTF8View.index(after:)();
        if (!__OFSUB__(specialized Collection.count.getter(v36, v37, v39, v41), 1))
        {
          if ((unint64_t)Substring.UTF8View.index(_:offsetBy:)() >> 14 >= v43 >> 14)
          {
            unint64_t v44 = Substring.subscript.getter();
            unint64_t v46 = v45;
            unint64_t v48 = v47;
            unint64_t v50 = v49;
            uint64_t v51 = specialized Collection<>.firstIndex(of:)(0x25u, v36, v37, v39, v41);
            if (v52)
            {
              char v98 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v44, v46, v48, v50, 2u, 0);
              if (v98 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                uint64_t v99 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                unint64_t v100 = (unsigned __int16 *)objc_msgSend(v99, sel__fastCharacterContents);
                id v101 = v99;
                if (v100)
                {
                  StringProtocol._ephemeralString.getter();
                  id v102 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  id v103 = objc_msgSend(v102, sel_length);
                  swift_unknownObjectRelease();
                  BOOL v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v100, (uint64_t)v103, 2u, 0);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  BOOL v104 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v44, v46, v48, v50, 2u, 0);
                  swift_bridgeObjectRelease_n();
                  swift_bridgeObjectRelease_n();
                }
                uint64_t v95 = 0;
                if (!v104) {
                  return v95;
                }
                goto LABEL_12;
              }
              BOOL v121 = v98;
              goto LABEL_62;
            }
            unint64_t v53 = v51;
            if (v150 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 50
              || v150 == (unint64_t)Substring.UTF8View.index(after:)() >> 14
              || Substring.UTF8View.subscript.getter() != 53)
            {
              goto LABEL_52;
            }
            if (v53 >> 14 >= v44 >> 14)
            {
              unint64_t v149 = v46;
              unint64_t v54 = Substring.subscript.getter();
              unint64_t v56 = v55;
              unint64_t v58 = v57;
              unint64_t v60 = v59;
              char v61 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v54, v55, v57, v59, 2u, 0);
              if (v61 == 2)
              {
                lazy protocol witness table accessor for type Substring and conformance Substring();
                StringProtocol._ephemeralString.getter();
                uint64_t v62 = (void *)String._bridgeToObjectiveCImpl()();
                swift_bridgeObjectRelease();
                uint64_t v63 = (unsigned __int16 *)objc_msgSend(v62, sel__fastCharacterContents);
                id v64 = v62;
                uint64_t v65 = v63;
                id v66 = v64;
                if (v65)
                {
                  StringProtocol._ephemeralString.getter();
                  BOOL v67 = (void *)String._bridgeToObjectiveCImpl()();
                  swift_bridgeObjectRelease();
                  id v68 = objc_msgSend(v67, sel_length);
                  swift_unknownObjectRelease();
                  BOOL v69 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v65, (uint64_t)v68, 2u, 0);
                  swift_bridgeObjectRelease();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  BOOL v69 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v54, v56, v58, v60, 2u, 0);
                  swift_bridgeObjectRelease_n();
                }
                if (v69)
                {
LABEL_87:
                  swift_bridgeObjectRetain();
                  if (v149 >> 14 >= (unint64_t)Substring.index(after:)() >> 14)
                  {
                    unint64_t v135 = Substring.subscript.getter();
                    unint64_t v137 = v136;
                    unint64_t v139 = v138;
                    unint64_t v141 = v140;
                    char v142 = _ss5SliceV32withContiguousStorageIfAvailableyqd__Sgqd__SRy7ElementQzGKXEKlFSRyxGq_s5Error_pRi_zRi0_zRi__Ri0__r0_lys5UInt8Vqd__Isgyrzo_ABySS8UTF8ViewVGADsAI_pAMRszr__lIetMggrzo_Tpq5Sb_Tg50162_s10Foundation13RFC3986ParserV8validate33_A90579D1FA072CB135F95EF00BA464506string9component22percentEncodingAllowedSbx_AA15URLComponentSetAELLVSbtSyRzlFZSbSRys5I7VGXEfU_10Foundation0nO0VXMtAP15URLComponentSet01_qrstuvW0LLVSbTf1cn_nTf4ndnn_n(v135, v136, v138, v140, 8u, 1);
                    if (v142 == 2)
                    {
                      lazy protocol witness table accessor for type Substring and conformance Substring();
                      StringProtocol._ephemeralString.getter();
                      uint64_t v143 = (void *)String._bridgeToObjectiveCImpl()();
                      swift_bridgeObjectRelease();
                      int v144 = (unsigned __int16 *)objc_msgSend(v143, sel__fastCharacterContents);
                      id v145 = v143;
                      if (v144)
                      {
                        StringProtocol._ephemeralString.getter();
                        unint64_t v146 = (void *)String._bridgeToObjectiveCImpl()();
                        swift_bridgeObjectRelease();
                        id v147 = objc_msgSend(v146, sel_length);
                        swift_unknownObjectRelease();
                        BOOL v121 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v144, (uint64_t)v147, 8u, 1);
                        swift_bridgeObjectRelease_n();
LABEL_62:
                        swift_bridgeObjectRelease_n();
                        goto LABEL_70;
                      }
                      swift_bridgeObjectRetain();
                      char v131 = specialized static RFC3986Parser.validate<A>(buffer:component:percentEncodingAllowed:)(v135, v137, v139, v141, 8u, 1);
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease_n();
                    }
                    else
                    {
                      char v148 = v142;
                      swift_bridgeObjectRelease_n();
                      swift_bridgeObjectRelease();
                      char v131 = v148 & 1;
                    }
LABEL_74:
                    swift_bridgeObjectRelease_n();
                    if ((v131 & 1) == 0) {
                      return 0;
                    }
                    goto LABEL_12;
                  }
                  goto LABEL_100;
                }
              }
              else
              {
                char v134 = v61;
                swift_bridgeObjectRelease();
                if (v134) {
                  goto LABEL_87;
                }
              }
LABEL_52:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              return 0;
            }
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
            goto LABEL_101;
          }
          goto LABEL_97;
        }
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
        goto LABEL_98;
      }
LABEL_95:
      __break(1u);
      goto LABEL_96;
    }
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
LABEL_101:
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_181D80204()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

__n128 __swift_memcpy188_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 172) = *(long long *)((char *)a2 + 172);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for URLBufferParseInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 188)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 185);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for URLBufferParseInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 184) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 188) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 188) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 185) = a2 + 1;
    }
  }
  return result;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(uint64_t isStackAllocationSafe)
{
  return specialized _withResizingUCharBuffer(initialSize:_:)(isStackAllocationSafe);
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x1E4F143B8];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  if ((int)isStackAllocationSafe < 513
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v5[-1] - v1, v5);
    return v5[0];
  }
  else
  {
    unsigned int v3 = swift_slowAlloc();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v3, v5);
    MEMORY[0x185309510](v3, -1, -1);
    return v5[0];
  }
}

char *specialized withVaList<A>(_:_:)(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  type metadata accessor for __VaListBuilder();
  BOOL v4 = (void *)swift_allocObject();
  v4[2] = 8;
  v4[3] = 0;
  int v5 = v4 + 3;
  v4[4] = 0;
  v4[5] = 0;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a1 + 32;
    while (1)
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(v8 + 40 * v7, (uint64_t)v24);
      __swift_project_boxed_opaque_existential_1(v24, v24[3]);
      __n128 result = (char *)dispatch thunk of CVarArg._cVarArgEncoding.getter();
      uint64_t v10 = *v5;
      uint64_t v11 = *((void *)result + 2);
      BOOL v12 = __OFADD__(*v5, v11);
      uint64_t v13 = *v5 + v11;
      if (v12)
      {
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return result;
      }
      id v14 = result;
      uint64_t v15 = v4[4];
      if (v15 >= v13) {
        goto LABEL_18;
      }
      if (v15 + 0x4000000000000000 < 0) {
        goto LABEL_29;
      }
      unint64_t v16 = (char *)v4[5];
      if (2 * v15 > v13) {
        uint64_t v13 = 2 * v15;
      }
      v4[4] = v13;
      if ((unint64_t)(v13 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_30;
      }
      __n128 result = (char *)swift_slowAlloc();
      v4[5] = result;
      if (v16) {
        break;
      }
LABEL_19:
      if (!result) {
        goto LABEL_32;
      }
      uint64_t v18 = *((void *)v14 + 2);
      if (v18)
      {
        unint64_t v19 = (uint64_t *)(v14 + 32);
        uint64_t v20 = *v5;
        while (1)
        {
          uint64_t v21 = *v19++;
          *(void *)&result[8 * v20] = v21;
          uint64_t v20 = *v5 + 1;
          if (__OFADD__(*v5, 1)) {
            break;
          }
          *int v5 = v20;
          if (!--v18) {
            goto LABEL_3;
          }
        }
        __break(1u);
        goto LABEL_28;
      }
LABEL_3:
      ++v7;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
      if (v7 == v6) {
        goto LABEL_25;
      }
    }
    if (result != v16 || result >= &v16[8 * v10]) {
      memmove(result, v16, 8 * v10);
    }
    __VaListBuilder.deallocStorage(wordCount:storage:)();
LABEL_18:
    __n128 result = (char *)v4[5];
    goto LABEL_19;
  }
LABEL_25:
  __n128 result = (char *)__VaListBuilder.va_list()();
  if (*(void *)(a3 + 16) >> 31) {
    goto LABEL_31;
  }
  *a2 = u_vformatMessage();
  swift_bridgeObjectRelease();
  return (char *)swift_release();
}

uint64_t _withFixedUCharBuffer(size:defaultIsError:_:)(uint64_t isStackAllocationSafe, unsigned __int8 a2, uint64_t (*a3)(uint64_t, uint64_t, int *))
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  uint64_t v5 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe <= 512
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    double v6 = MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v8 = &v16[-v7];
    int v17 = 0;
    uint64_t v9 = ((uint64_t (*)(unsigned char *, uint64_t, int *, double))a3)(&v16[-v7], v5, &v17, v6);
    if ((v9 & 0x100000000) != 0 || v17 > 0) {
      return 0;
    }
    BOOL v10 = (int)v9 <= (int)v5 && ((v17 == -127) & a2) == 0;
    if (!v10 || (int)v9 <= 0) {
      return 0;
    }
    else {
      return specialized String.init(_utf16:)((uint64_t)v8, v9);
    }
  }
  else
  {
    uint64_t v12 = swift_slowAlloc();
    int v17 = 0;
    uint64_t v13 = a3(v12, v5, &v17);
    if ((v13 & 0x100000000) != 0 || v17 > 0)
    {
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      if ((int)v13 <= (int)v5 && ((v17 == -127) & a2) == 0 && (int)v13 > 0) {
        uint64_t v15 = specialized String.init(_utf16:)(v12, v13);
      }
    }
    MEMORY[0x185309510](v12, -1, -1);
  }
  return v15;
}

const char *ICUError.debugDescription.getter(UErrorCode a1)
{
  __n128 result = u_errorName(a1);
  if (result)
  {
    __n128 result = (const char *)MEMORY[0x185301F80]();
    if (!v2)
    {
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v3);
      swift_bridgeObjectRelease();
      return (const char *)0xD000000000000012;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t one-time initialization function for logger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static ICUError.logger);
  __swift_project_value_buffer(v0, (uint64_t)static ICUError.logger);
  return Logger.init(subsystem:category:)();
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static _CalendarGregorian.logger);
  __swift_project_value_buffer(v0, (uint64_t)static _CalendarGregorian.logger);
  return Logger.init(subsystem:category:)();
}

const char *protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ICUError()
{
  return ICUError.debugDescription.getter(*v0);
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  return specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(a1, a2, a3, a4, a5, MEMORY[0x1E4FBA6B0], a6);
}

{
  return specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(a1, a2, a3, a4, a5, MEMORY[0x1E4FBA6A8], a6);
}

uint64_t specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t, int *, double)@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v29 = 0;
  if (!a1) {
LABEL_24:
  }
    __break(1u);
  double v12 = (double)a4;
  uint64_t isStackAllocationSafe = a6(*(void *)(a3 + 16), a5, a1, a2, &v29, (double)a4);
  if (v29 != 15)
  {
    if (v29 > 0 || (int)isStackAllocationSafe <= 0)
    {
      uint64_t result = swift_release();
      *a7 = 0;
      a7[1] = 0;
      return result;
    }
    uint64_t v18 = specialized String.init(_utf16:)(a1, isStackAllocationSafe);
    uint64_t v19 = v23;
    goto LABEL_17;
  }
  uint64_t v14 = (isStackAllocationSafe + 1);
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
    goto LABEL_23;
  }
  if ((v14 & 0x80000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if ((int)v14 < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v16 = (char *)&v28 - v15;
    int v28 = 0;
    int v17 = a6(*(void *)(a3 + 16), a5, (uint64_t)&v28 - v15, v14, &v28, v12);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    if (v28 <= 0 && v17 > 0)
    {
      uint64_t v18 = specialized String.init(_utf16:)((uint64_t)v16, v17);
      uint64_t v19 = v20;
    }
LABEL_17:
    uint64_t result = swift_release();
    *a7 = v18;
    a7[1] = v19;
    return result;
  }
  uint64_t v24 = swift_slowAlloc();
  int v28 = 0;
  int v25 = a6(*(void *)(a3 + 16), a5, v24, v14, &v28, v12);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (v28 <= 0 && v25 > 0) {
    uint64_t v26 = specialized String.init(_utf16:)(v24, v25);
  }
  *a7 = v26;
  a7[1] = v27;
  MEMORY[0x185309510](v24, -1, -1);
  return swift_release();
}

uint64_t specialized closure #1 in _withResizingCharBuffer(initialSize:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int v11 = 0;
  if (!a1) {
    goto LABEL_10;
  }
  if (!a2) {
    goto LABEL_11;
  }
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    __break(1u);
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
  }
  int v6 = ucasemap_utf8ToTitle();
  if (v6 <= 0)
  {
    uint64_t result = swift_release();
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    *(unsigned char *)(a1 + v6) = 0;
    uint64_t v7 = MEMORY[0x185301F80](a1);
    uint64_t v9 = v8;
    uint64_t result = swift_release();
    *a4 = v7;
    a4[1] = v9;
  }
  return result;
}

uint64_t specialized _withResizingUCharBuffer(initialSize:_:)(int a1)
{
  v9[2] = *MEMORY[0x1E4F143B8];
  if (a1 < 0) {
    __break(1u);
  }
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    BOOL v4 = (char *)&v9[-1] - v3;
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    uint64_t v5 = v9[0];
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_slowAlloc();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x185309510](v6, -1, -1);
    swift_release_n();
    return v9[0];
  }
  return v5;
}

{
  uint64_t isStackAllocationSafe;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E4F143B8];
  if (a1 < 0) {
    __break(1u);
  }
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    BOOL v4 = (char *)&v9[-1] - v3;
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    uint64_t v5 = v9[0];
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_slowAlloc();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x185309510](v6, -1, -1);
    swift_release_n();
    return v9[0];
  }
  return v5;
}

{
  uint64_t isStackAllocationSafe;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x1E4F143B8];
  if (a1 < 0) {
    __break(1u);
  }
  swift_retain_n();
  uint64_t isStackAllocationSafe = swift_retain_n();
  if (a1 < 513 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    BOOL v4 = (char *)&v9[-1] - v3;
    swift_retain();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)v4, v9);
    uint64_t v5 = v9[0];
    swift_release_n();
    swift_release_n();
  }
  else
  {
    uint64_t v6 = swift_slowAlloc();
    swift_retain();
    swift_retain();
    specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)(v6, v9);
    MEMORY[0x185309510](v6, -1, -1);
    swift_release_n();
    swift_release_n();
    return v9[0];
  }
  return v5;
}

uint64_t specialized _withFixedUCharBuffer(size:defaultIsError:_:)(uint64_t isStackAllocationSafe, unsigned __int8 a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  int v3 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (char *)&v11 - v4;
    HIDWORD(v11) = 0;
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    int DisplayKeywordValue = uloc_getDisplayKeywordValue();
    swift_release();
    swift_release();
    swift_release();
    if (SHIDWORD(v11) <= 0)
    {
      uint64_t v7 = 0;
      if (((HIDWORD(v11) == -127) & a2) != 1 && DisplayKeywordValue <= v3 && DisplayKeywordValue > 0) {
        return specialized String.init(_utf16:)((uint64_t)v5, DisplayKeywordValue);
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = swift_slowAlloc();
    String.utf8CString.getter();
    String.utf8CString.getter();
    String.utf8CString.getter();
    int v9 = uloc_getDisplayKeywordValue();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v7 = 0;
    if (v9 <= v3 && v9 > 0) {
      uint64_t v7 = specialized String.init(_utf16:)(v8, v9);
    }
    MEMORY[0x185309510](v8, -1, -1);
  }
  return v7;
}

{
  int v3;
  uint64_t v4;
  char *v5;
  int v6;
  BOOL v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  int v3 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (char *)&v13 - v4;
    HIDWORD(v13) = 0;
    String.utf8CString.getter();
    uint64_t v6 = ucurr_forLocale();
    swift_release();
    if (SHIDWORD(v13) > 0) {
      return 0;
    }
    uint64_t v7 = ((HIDWORD(v13) == -127) & a2) != 1 && v6 <= v3;
    if (!v7 || v6 <= 0) {
      return 0;
    }
    else {
      return specialized String.init(_utf16:)((uint64_t)v5, v6);
    }
  }
  else
  {
    int v9 = swift_slowAlloc();
    String.utf8CString.getter();
    BOOL v10 = ucurr_forLocale();
    swift_release();
    uint64_t v11 = 0;
    if (v10 <= v3 && v10 > 0) {
      uint64_t v11 = specialized String.init(_utf16:)(v9, v10);
    }
    MEMORY[0x185309510](v9, -1, -1);
  }
  return v11;
}

uint64_t specialized _withFixedCharBuffer(size:_:)(uint64_t isStackAllocationSafe, long long *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v2 = isStackAllocationSafe + 1;
  if (__OFADD__(isStackAllocationSafe, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
  }
  if (v2 < 0) {
    goto LABEL_15;
  }
  if (v2 < 1025 || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v5 = (char *)&v17 - v4;
    int v18 = 0;
    long long v6 = a2[3];
    long long v21 = a2[2];
    long long v22 = v6;
    long long v7 = a2[5];
    long long v23 = a2[4];
    long long v24 = v7;
    long long v8 = a2[1];
    long long v19 = *a2;
    long long v20 = v8;
    Locale.Language.maximalIdentifier.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int Script = uloc_getScript();
    swift_release();
    uint64_t v10 = 0;
    if (v18 <= 0 && Script > 0)
    {
      v5[Script] = 0;
      return MEMORY[0x185301F80](v5);
    }
  }
  else
  {
    uint64_t v11 = swift_slowAlloc();
    int v18 = 0;
    long long v12 = a2[3];
    long long v21 = a2[2];
    long long v22 = v12;
    long long v13 = a2[5];
    long long v23 = a2[4];
    long long v24 = v13;
    long long v14 = a2[1];
    long long v19 = *a2;
    long long v20 = v14;
    Locale.Language.maximalIdentifier.getter();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v15 = uloc_getScript();
    swift_release();
    uint64_t v10 = 0;
    if (v15 > 0)
    {
      *(unsigned char *)(v11 + v15) = 0;
      uint64_t v10 = MEMORY[0x185301F80](v11);
    }
    MEMORY[0x185309510](v11, -1, -1);
  }
  return v10;
}

uint64_t specialized _withFixedUCharBuffer(size:defaultIsError:_:)(uint64_t isStackAllocationSafe, unsigned __int8 a2, uint64_t a3)
{
  v15[19] = *MEMORY[0x1E4F143B8];
  if ((isStackAllocationSafe & 0x80000000) != 0) {
    __break(1u);
  }
  int v5 = isStackAllocationSafe;
  if ((int)isStackAllocationSafe < 513
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    long long v7 = (char *)v15 - v6;
    v15[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    uint64_t v9 = MEMORY[0x1E4FBB460];
    *(void *)(inited + 56) = MEMORY[0x1E4FBB3D0];
    *(void *)(inited + 64) = v9;
    *(void *)(inited + 32) = 0x4024000000000000;
    swift_bridgeObjectRetain();
    specialized withVaList<A>(_:_:)(inited, v15, a3);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayDestroy();
    if (SHIDWORD(v15[0]) <= 0)
    {
      uint64_t v10 = 0;
      if (((HIDWORD(v15[0]) == -127) & a2) != 1 && SLODWORD(v15[0]) <= v5 && SLODWORD(v15[0]) > 0) {
        return specialized String.init(_utf16:)((uint64_t)v7, LODWORD(v15[0]));
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v11 = swift_slowAlloc();
    v15[0] = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    uint64_t v12 = swift_initStackObject();
    *(_OWORD *)(v12 + 16) = xmmword_1821037E0;
    uint64_t v13 = MEMORY[0x1E4FBB460];
    *(void *)(v12 + 56) = MEMORY[0x1E4FBB3D0];
    *(void *)(v12 + 64) = v13;
    *(void *)(v12 + 32) = 0x4024000000000000;
    swift_bridgeObjectRetain();
    specialized withVaList<A>(_:_:)(v12, v15, a3);
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    swift_arrayDestroy();
    if (SHIDWORD(v15[0]) <= 0)
    {
      uint64_t v10 = 0;
      if (((HIDWORD(v15[0]) == -127) & a2) != 1 && SLODWORD(v15[0]) <= v5 && SLODWORD(v15[0]) > 0) {
        uint64_t v10 = specialized String.init(_utf16:)(v11, LODWORD(v15[0]));
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    MEMORY[0x185309510](v11, -1, -1);
  }
  return v10;
}

ValueMetadata *type metadata accessor for ICUError()
{
  return &type metadata for ICUError;
}

ValueMetadata *type metadata accessor for ICU()
{
  return &type metadata for ICU;
}

id @objc static NSTimeZone._abbreviationDictionary()()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = static TimeZoneCache.cache + 16;
  char v1 = (os_unfair_lock_s *)(static TimeZoneCache.cache + 144);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in TimeZoneCache.timeZoneAbbreviations()(v0, &v4);
  os_unfair_lock_unlock(v1);
  swift_release_n();
  int v2 = (void *)_NativeDictionary.bridged()();

  return v2;
}

uint64_t @objc static NSTimeZone._setAbbreviationDictionary(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = specialized static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3);
  if (one-time initialization token for cache != -1) {
    uint64_t v3 = swift_once();
  }
  uint64_t v4 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 36);
  partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)((uint64_t)&v4[4]);
  os_unfair_lock_unlock(v4 + 36);
  swift_bridgeObjectRelease();
  return swift_release_n();
}

id @objc static NSTimeZone._knownTimeZoneIdentifiers()()
{
  if (one-time initialization token for icuTZIdentifiers != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v0 = (void *)_ContiguousArrayBuffer._asCocoaArray()();

  return v0;
}

id @objc static NSTimeZone._timeZoneDataVersion()()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v3 = 0;
  uint64_t v0 = MEMORY[0x1853099C0](&v3);
  if (v0 && v3 <= 0) {
    MEMORY[0x185301F80](v0);
  }
  char v1 = (void *)String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();

  return v1;
}

uint64_t _NSSwiftTimeZone.nextDaylightSavingTimeTransition.getter()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____NSSwiftTimeZone_timeZone + 8);
  uint64_t ObjectType = swift_getObjectType();
  __tp.tv_sec = 0;
  __tp.tv_nsec = 0;
  swift_unknownObjectRetain();
  clock_gettime(_CLOCK_REALTIME, &__tp);
  *(double *)&__tp.tv_sec = (double)__tp.tv_sec + -978307200.0 + (double)__tp.tv_nsec * 0.000000001;
  (*(void (**)(timespec *, uint64_t, uint64_t))(v1 + 80))(&__tp, ObjectType, v1);
  return swift_unknownObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for _NSSwiftTimeZone.State(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[1];
  if (v3 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v4 = *a2;
    outlined copy of Data._Representation(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for _NSSwiftTimeZone.State(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *(void *)a2;
      outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      outlined consume of Data._Representation(v7, v8);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  uint64_t v5 = *(void *)a2;
  outlined copy of Data._Representation(*(void *)a2, *(void *)(a2 + 8));
  *a1 = v5;
  a1[1] = v4;
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

uint64_t *assignWithTake for _NSSwiftTimeZone.State(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      outlined consume of Data._Representation(v6, v4);
      return a1;
    }
    outlined destroy of Data((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for _NSSwiftTimeZone.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _NSSwiftTimeZone.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(void *)uint64_t result = a2 - 12;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(uint64_t a1)
{
  return closure #1 in TimeZoneCache.setTimeZoneAbbreviations(_:)(a1, *(void *)(v1 + 16));
}

uint64_t _AsyncBytesBuffer.init(capacity:)()
{
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(unsigned char *)(result + 32) = 0;
  return result;
}

uint64_t type metadata accessor for _AsyncBytesBuffer.Storage()
{
  uint64_t result = type metadata singleton initialization cache for _AsyncBytesBuffer.Storage;
  if (!type metadata singleton initialization cache for _AsyncBytesBuffer.Storage) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t _AsyncBytesBuffer.next()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](_AsyncBytesBuffer.next(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  void *v6;
  uint64_t v7;

  uint64_t v1 = v0[2];
  int v2 = *(unsigned __int8 **)(v1 + 8);
  if (v2 == *(unsigned __int8 **)(v1 + 16))
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[3] = v6;
    *uint64_t v6 = v0;
    v6[1] = NSURLSession.AsyncBytes.Iterator.next();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    uint64_t v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    int v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
}

uint64_t IOActor.read(from:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[3] = a2;
  v4[4] = a3;
  v4[2] = a1;
  return MEMORY[0x1F4188298](IOActor.read(from:into:), v3, 0);
}

uint64_t IOActor.read(from:into:)()
{
  uint64_t v1 = v0[3];
  if (v1) {
    uint64_t v2 = v0[4] - v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = (uint64_t)NSFileHandle.read(upToCount:)(v2);
  unint64_t v5 = v4;
  if (v4 >> 60 != 15)
  {
    uint64_t v6 = v3;
    switch(v4 >> 62)
    {
      case 1uLL:
        if (v3 >> 32 < (int)v3) {
          goto LABEL_19;
        }
        specialized DataProtocol.copyBytes<A>(to:from:)(v0[3], v0[4], (int)v3, v3 >> 32, v3, v4);
        outlined consume of Data?(v6, v5);
        if (__OFSUB__(HIDWORD(v6), v6)) {
          goto LABEL_20;
        }
        uint64_t v7 = HIDWORD(v6) - (int)v6;
        goto LABEL_16;
      case 2uLL:
        uint64_t v8 = *(void *)(v3 + 16);
        uint64_t v9 = *(void *)(v3 + 24);
        if (v9 < v8)
        {
LABEL_19:
          __break(1u);
LABEL_20:
          __break(1u);
          JUMPOUT(0x181D83D74);
        }
        specialized DataProtocol.copyBytes<A>(to:from:)(v0[3], v0[4], v8, v9, v3, v4);
        uint64_t v11 = *(void *)(v6 + 16);
        uint64_t v10 = *(void *)(v6 + 24);
        outlined consume of Data?(v6, v5);
        BOOL v12 = __OFSUB__(v10, v11);
        uint64_t v7 = v10 - v11;
        if (!v12) {
          goto LABEL_16;
        }
        __break(1u);
LABEL_14:
        specialized DataProtocol.copyBytes<A>(to:from:)(v0[3], v0[4], 0, 0, v6, v5);
        outlined consume of Data?(v6, v5);
        break;
      case 3uLL:
        goto LABEL_14;
      default:
        uint64_t v7 = BYTE6(v4);
        specialized DataProtocol.copyBytes<A>(to:from:)(v0[3], v0[4], 0, BYTE6(v4), v3, v4);
        outlined consume of Data?(v6, v5);
        goto LABEL_16;
    }
  }
  uint64_t v7 = 0;
LABEL_16:
  uint64_t v13 = (uint64_t (*)(uint64_t))v0[1];
  return v13(v7);
}

uint64_t one-time initialization function for default()
{
  type metadata accessor for IOActor();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  static IOActor.default = v0;
  return result;
}

{
  uint64_t result;

  type metadata accessor for URL.UnicodeLookalikeTable();
  uint64_t result = swift_initStaticObject();
  static URL.UnicodeLookalikeTable.default = result;
  return result;
}

uint64_t IOActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance IOActor()
{
  return v0;
}

uint64_t _AsyncBytesBuffer.Storage.__deallocating_deinit()
{
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(void *)(v0 + 16));

  return swift_deallocClassInstance();
}

uint64_t _AsyncBytesBuffer.nextPointer.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _AsyncBytesBuffer.nextPointer.setter(uint64_t result)
{
  *(void *)(v1 + 8) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.nextPointer.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t _AsyncBytesBuffer.endPointer.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _AsyncBytesBuffer.endPointer.setter(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t (*_AsyncBytesBuffer.endPointer.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](_AsyncBytesBuffer.reloadBufferAndNext(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 64);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(*(void *)(v0 + 32));
  if (!v1) {
    *(unsigned char *)(*(void *)(v0 + 24) + 32) = 1;
  }
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(unsigned __int8 **)(v2 + 8);
  if (v3 == *(unsigned __int8 **)(v2 + 16))
  {
    unint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v5;
    *unint64_t v5 = v0;
    v5[1] = _AsyncBytesBuffer.reloadBufferAndNext();
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    unint64_t v4 = *v3;
    *(void *)(v2 + 8) = v3 + 1;
    *(_WORD *)(v0 + 88) = v4;
    return MEMORY[0x1F4188298](_AsyncBytesBuffer.reloadBufferAndNext(), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 88) | (*(unsigned __int8 *)(v0 + 89) << 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[3];
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v0[4]);
  *(unsigned char *)(v1 + 32) = 1;
  swift_willThrow();
  swift_release();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

void _AsyncBytesBuffer.reloadBufferAndNext()()
{
  if (!**(void **)(v0 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  type metadata accessor for _AsyncBytesBuffer.Storage();
  swift_unknownObjectRetain();
  uint64_t v1 = swift_dynamicCastClassUnconditional();
  *(void *)(v0 + 24) = v1;
  if (*(unsigned char *)(v1 + 32) == 1)
  {
    swift_release();
    uint64_t v2 = *(void (**)(uint64_t))(v0 + 8);
    v2(256);
    return;
  }
  static Task<>.checkCancellation()();
  *(void *)(*(void *)(v0 + 16) + 8) = v1 + 33;
  uint64_t v3 = swift_dynamicCastClassUnconditional();
  unint64_t v4 = *(int **)(v3 + 16);
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = *(void *)(v3 + 24);
  if (!v4)
  {
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v7 = (void (*)(uint64_t))((char *)v4 + *v4);
  swift_retain();
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v5;
  *unint64_t v5 = v0;
  v5[1] = _AsyncBytesBuffer.reloadBufferAndNext();
  uint64_t v6 = *(void *)(v0 + 16);
  v7(v6);
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = _AsyncBytesBuffer.reloadBufferAndNext();
  }
  else
  {
    *(void *)(v4 + 64) = a1;
    unint64_t v5 = _AsyncBytesBuffer.reloadBufferAndNext();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t _AsyncBytesBuffer.reloadBufferAndNext()(__int16 a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = _AsyncBytesBuffer.reloadBufferAndNext();
  }
  else
  {
    *(unsigned char *)(v4 + 89) = HIBYTE(a1) & 1;
    *(unsigned char *)(v4 + 88) = a1;
    unint64_t v5 = _AsyncBytesBuffer.reloadBufferAndNext();
  }
  return MEMORY[0x1F4188298](v5, 0, 0);
}

uint64_t NSFileHandle.AsyncBytes.makeAsyncIterator()()
{
  uint64_t v1 = *v0;
  type metadata accessor for _AsyncBytesBuffer.Storage();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  id v3 = v1;
  unsigned int v4 = objc_msgSend(v3, sel_fileDescriptor);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  id v6 = v3;
  uint64_t v7 = swift_dynamicCastClassUnconditional();
  uint64_t v8 = *(void *)(v7 + 16);
  *(void *)(v7 + 16) = &async function pointer to partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
  *(void *)(v7 + 24) = v5;
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(v8);

  return v2;
}

uint64_t NSFileHandle.AsyncBytes.Iterator.buffer.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NSFileHandle.AsyncBytes.Iterator.buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_unknownObjectRelease();
  *id v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t (*NSFileHandle.AsyncBytes.Iterator.buffer.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1, int a2, uint64_t a3)
{
  *(_DWORD *)(v3 + 200) = a2;
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = a3;
  return MEMORY[0x1F4188298](closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:), 0, 0);
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(void **)(v3 + 144);
  if (*v4)
  {
    int v5 = *(_DWORD *)(v3 + 200);
    type metadata accessor for _AsyncBytesBuffer.Storage();
    uint64_t v6 = swift_dynamicCastClassUnconditional();
    *(void *)(v3 + 160) = v6;
    uint64_t v7 = v6 + 33;
    v4[1] = v6 + 33;
    uint64_t v8 = (const void *)swift_dynamicCastClassUnconditional();
    size_t v9 = _swift_stdlib_malloc_size(v8);
    *(void *)(v3 + 168) = v9;
    if (v5 < 0)
    {
      size_t v10 = v9;
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      size_t v11 = v6 + v10;
      uint64_t v12 = static IOActor.default;
      uint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v3 + 184) = v13;
      *uint64_t v13 = v3;
      v13[1] = closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
      uint64_t v14 = *(void *)(v3 + 152);
      v13[3] = v7;
      v13[4] = v11;
      v13[2] = v14;
      a1 = IOActor.read(from:into:);
      a2 = v12;
    }
    else
    {
      if (one-time initialization token for default != -1) {
        swift_once();
      }
      a2 = static IOActor.default;
      a1 = closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
    }
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F4188298](a1, a2, a3);
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)()
{
  do
  {
    ssize_t v1 = read(*(_DWORD *)(v0 + 200), (void *)(*(void *)(v0 + 160) + 33), *(void *)(v0 + 168) - 33);
    if ((v1 & 0x8000000000000000) == 0)
    {
      *(void *)(v0 + 176) = v1;
      unint64_t v13 = (unint64_t)closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      return MEMORY[0x1F4188298](v13, v14, v15);
    }
    int v2 = MEMORY[0x185301870]();
  }
  while (MEMORY[0x185301870]() == 4);
  uint64_t v3 = *(unsigned int *)(v0 + 200);
  uint64_t v4 = swift_slowAlloc();
  if (MEMORY[0x1853018A0](v3, 50, v4) == -1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
    uint64_t v23 = v2;
    id v24 = objc_allocWithZone((Class)NSError);
    uint64_t v25 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, v23, _NativeDictionary.bridged()());
    goto LABEL_11;
  }
  uint64_t v5 = static String._fromUTF8Repairing(_:)();
  uint64_t v7 = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSFilePath");
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  size_t v10 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, v0 + 96);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 104);
  swift_retain();
  unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12);
  if (v14)
  {
    __break(1u);
    goto LABEL_15;
  }
  v10[(v13 >> 6) + 8] |= 1 << v13;
  uint64_t v16 = (uint64_t *)(v10[6] + 16 * v13);
  *uint64_t v16 = v11;
  v16[1] = v12;
  unint64_t v13 = (unint64_t)outlined init with take of Any((_OWORD *)(v0 + 112), (_OWORD *)(v10[7] + 32 * v13));
  uint64_t v17 = v10[2];
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18)
  {
LABEL_15:
    __break(1u);
    return MEMORY[0x1F4188298](v13, v14, v15);
  }
  uint64_t v20 = v2;
  void v10[2] = v19;
  swift_bridgeObjectRelease();
  swift_release();
  id v21 = objc_allocWithZone((Class)NSError);
  uint64_t v22 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_initWithDomain_code_userInfo_, v22, v20, _NativeDictionary.bridged()());
LABEL_11:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_willThrow();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

{
  uint64_t v0;

  *(void *)(*(void *)(v0 + 144) + 16) = *(void *)(*(void *)(v0 + 144) + 8) + *(void *)(v0 + 176);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  *(void *)(*(void *)(v0 + 144) + 16) = *(void *)(*(void *)(v0 + 144) + 8) + *(void *)(v0 + 192);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 192) = a1;
    return MEMORY[0x1F4188298](closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:), 0, 0);
  }
}

uint64_t sub_181D84DBC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:)(uint64_t a1)
{
  int v4 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = closure #1 in NSURLSession.AsyncBytes.Iterator.init(storage:)partial apply;
  *(_DWORD *)(v6 + 200) = v4;
  *(void *)(v6 + 144) = a1;
  *(void *)(v6 + 152) = v5;
  return MEMORY[0x1F4188298](closure #1 in NSFileHandle.AsyncBytes.Iterator.init(file:), 0, 0);
}

uint64_t NSFileHandle.AsyncBytes.Iterator.next()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](_AsyncBytesBuffer.next(), 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSFileHandle.AsyncBytes.Iterator(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance NSFileHandle.AsyncBytes.Iterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance NSFileHandle.AsyncBytes.Iterator()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = *(char **)(v1 + 8);
  if (v2 == *(char **)(v1 + 16))
  {
    uint64_t v7 = (void *)swift_task_alloc();
    v0[4] = v7;
    *uint64_t v7 = v0;
    v7[1] = protocol witness for AsyncIteratorProtocol.next() in conformance NSURLSession.AsyncBytes.Iterator;
    return _AsyncBytesBuffer.reloadBufferAndNext()();
  }
  else
  {
    char v3 = *v2;
    *(void *)(v1 + 8) = v2 + 1;
    int v4 = (unsigned char *)v0[2];
    *int v4 = v3;
    v4[1] = 0;
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t _sSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTW(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu
                                                + _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFSo12NSFileHandleC10FoundationE10AsyncBytesV8IteratorV_Tgq5Tu);
  uint64_t v7 = (void *)swift_task_alloc();
  v4[4] = v7;
  *uint64_t v7 = v4;
  v7[1] = _sSo12NSURLSessionC10FoundationE10AsyncBytesV8IteratorVScIACScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTWTQ0_;
  return v9(a2, a3);
}

void protocol witness for AsyncSequence.makeAsyncIterator() in conformance NSFileHandle.AsyncBytes(uint64_t *a1@<X8>)
{
  uint64_t v3 = NSFileHandle.AsyncBytes.makeAsyncIterator()();
  uint64_t v5 = v4;
  uint64_t v7 = v6;

  *a1 = v3;
  a1[1] = v5;
  a1[2] = v7;
}

id NSFileHandle.bytes.getter@<X0>(void *a1@<X8>)
{
  *a1 = v1;
  return v1;
}

unint64_t lazy protocol witness table accessor for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator;
  if (!lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSFileHandle.AsyncBytes.Iterator and conformance NSFileHandle.AsyncBytes.Iterator);
  }
  return result;
}

uint64_t type metadata accessor for IOActor()
{
  return self;
}

ValueMetadata *type metadata accessor for _AsyncBytesBuffer()
{
  return &type metadata for _AsyncBytesBuffer;
}

uint64_t type metadata completion function for _AsyncBytesBuffer.Storage()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for _AsyncBytesBuffer.Storage()
{
  return type metadata accessor for _AsyncBytesBuffer.Storage();
}

ValueMetadata *type metadata accessor for NSFileHandle.AsyncBytes()
{
  return &type metadata for NSFileHandle.AsyncBytes;
}

ValueMetadata *type metadata accessor for NSFileHandle.AsyncBytes.Iterator()
{
  return &type metadata for NSFileHandle.AsyncBytes.Iterator;
}

void *destroy for _AsyncBytesBuffer.Header(void *result)
{
  if (*result) {
    return (void *)swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2)
  {
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  return a1;
}

uint64_t assignWithTake for _AsyncBytesBuffer.Header(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  if (!*(void *)a1)
  {
    if (v4)
    {
      uint64_t v6 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for _AsyncBytesBuffer.Header(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _AsyncBytesBuffer.Header(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _AsyncBytesBuffer.Header()
{
  return &type metadata for _AsyncBytesBuffer.Header;
}

void __swiftcall parseError(_:exampleFormattedString:)(Foundation::CocoaError *__return_ptr retstr, Swift::String _, Swift::String_optional exampleFormattedString)
{
  object = _._object;
  uint64_t countAndFlagsBits = _._countAndFlagsBits;
  if (exampleFormattedString.value._object)
  {
    uint64_t v6 = exampleFormattedString.value._object;
    uint64_t v7 = exampleFormattedString.value._countAndFlagsBits;
    v36[0] = 0;
    v36[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(88);
    v8._uint64_t countAndFlagsBits = 0x7020746F6E6E6143;
    v8._object = (void *)0xED00002065737261;
    String.append(_:)(v8);
    v9._uint64_t countAndFlagsBits = countAndFlagsBits;
    v9._object = object;
    String.append(_:)(v9);
    v10._object = (void *)0x80000001823AB110;
    v10._uint64_t countAndFlagsBits = 0xD000000000000046;
    String.append(_:)(v10);
    uint64_t v11 = v7;
    uint64_t v12 = v6;
  }
  else
  {
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v36, "Cannot parse ");
    HIWORD(v36[1]) = -4864;
    uint64_t v11 = countAndFlagsBits;
    uint64_t v12 = object;
  }
  String.append(_:)(*(Swift::String *)&v11);
  v13._uint64_t countAndFlagsBits = 46;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  uint64_t v14 = v36[0];
  uint64_t v15 = v36[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1821037E0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 40) = v17;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  BOOL v18 = (void *)static _DictionaryStorage.allocate(capacity:)();
  outlined init with copy of (String, Any)(inited + 32, (uint64_t)v36);
  uint64_t v19 = v36[0];
  uint64_t v20 = v36[1];
  swift_retain();
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
  if (v22)
  {
    __break(1u);
    goto LABEL_12;
  }
  v18[(v21 >> 6) + 8] |= 1 << v21;
  uint64_t v23 = (uint64_t *)(v18[6] + 16 * v21);
  uint64_t *v23 = v19;
  v23[1] = v20;
  outlined init with take of Any(&v37, (_OWORD *)(v18[7] + 32 * v21));
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v18[2] = v26;
  swift_release();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v27 = objc_allocWithZone((Class)NSError);
  uint64_t v28 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v29 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 2048, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v30 = objc_msgSend(v29, sel_domain);
  id v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  if (v31 != static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") || v33 != v34)
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v35) {
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
    JUMPOUT(0x181D85784);
  }
  swift_bridgeObjectRelease_n();
LABEL_10:
  retstr->_nsError.super.Class isa = (Class)v29;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSEnumerator()
{
  uint64_t v1 = *v0;
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

uint64_t initializeWithCopy for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  return a1;
}

__n128 __swift_memcpy217_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for NSFastEnumerationIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for NSFastEnumerationIterator(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 217)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NSFastEnumerationIterator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 216) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 217) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 217) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t StringProtocol.localizedCapitalized.getter(uint64_t a1)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1, v3);
  uint64_t v6 = String.init<A>(_:)();
  uint64_t v8 = v7;
  if (one-time initialization token for cache != -1) {
LABEL_30:
  }
    swift_once();
  *(void *)&long long v85 = static LocaleCache.cache;
  uint64_t v9 = LocaleCache.current.getter();
  uint64_t v11 = v10;
  uint64_t ObjectType = swift_getObjectType();
  Swift::String v13 = *(void (**)(uint64_t, uint64_t))(v11 + 64);
  swift_unknownObjectRetain();
  v13(ObjectType, v11);
  swift_unknownObjectRelease();
  uint64_t v14 = specialized static ICU.CaseMap.caseMappingForLocale(_:)();
  swift_bridgeObjectRelease();
  uint64_t v83 = v14;
  if (!v14)
  {
    *(void *)&long long v85 = v6;
    *((void *)&v85 + 1) = v8;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    uint64_t countAndFlagsBits = String._capitalized()()._countAndFlagsBits;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return countAndFlagsBits;
  }
  uint64_t v88 = 0;
  unint64_t v89 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  unint64_t v15 = String.subscript.getter();
  unint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v6 = v20;
  swift_bridgeObjectRelease();
  uint64_t result = MEMORY[0x185302C80](46, 0xE100000000000000);
  unint64_t v73 = v22;
  unint64_t v74 = result;
  v71[2] = v8;
  uint64_t v72 = v23;
  uint64_t v78 = v24;
  unint64_t v79 = v17;
  unint64_t v25 = v15 >> 14;
  unint64_t v76 = v17 >> 14;
  uint64_t v82 = v6;
  v71[1] = v9;
  uint64_t v84 = 0;
  if (v15 >> 14 < v17 >> 14)
  {
    swift_bridgeObjectRetain();
    uint64_t v81 = v19;
    unint64_t v26 = Substring.subscript.getter();
    unint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    swift_bridgeObjectRelease();
    unint64_t v80 = v15;
    if ((v26 ^ v28) < 0x4000 || (v74 ^ v73) < 0x4000)
    {
      unint64_t v53 = v15 >> 14;
LABEL_19:
      uint64_t result = swift_bridgeObjectRelease();
LABEL_20:
      unint64_t v25 = v53;
    }
    else
    {
      uint64_t v8 = v82;
      while (1)
      {
        unint64_t v33 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v74, v73, v72, v78, 0, 0, 0, 0, 0, v26, v28, v30, v32);
        unint64_t v35 = v34;
        char v37 = v36;
        uint64_t result = swift_bridgeObjectRelease();
        if (v37) {
          break;
        }
        uint64_t v77 = v35;
        if (v33 >> 14 == v35 >> 14) {
          break;
        }
        if (v33 >> 14 < v25)
        {
          __break(1u);
          goto LABEL_30;
        }
        unint64_t v75 = v35 >> 14;
        uint64_t v38 = Substring.subscript.getter();
        uint64_t v40 = v39;
        uint64_t v42 = v41;
        uint64_t v44 = v43;
        unint64_t v45 = *(os_unfair_lock_s **)(v83 + 24);
        MEMORY[0x1F4188790](v38);
        MEMORY[0x1F4188790](v46);
        swift_retain();
        os_unfair_lock_lock(v45 + 4);
        uint64_t v47 = v84;
        partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v85);
        os_unfair_lock_unlock(v45 + 4);
        swift_release();
        object = (void *)*((void *)&v85 + 1);
        if (*((void *)&v85 + 1))
        {
          uint64_t v49 = v85;
        }
        else
        {
          *(void *)&long long v85 = v38;
          *((void *)&v85 + 1) = v40;
          uint64_t v86 = v42;
          uint64_t v87 = v44;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          swift_bridgeObjectRetain_n();
          String.init<A>(_:)();
          Swift::String v50 = String._capitalized()();
          uint64_t v49 = v50._countAndFlagsBits;
          object = v50._object;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        uint64_t v84 = v47;
        v51._uint64_t countAndFlagsBits = v49;
        v51._object = object;
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        v52._uint64_t countAndFlagsBits = 46;
        v52._object = (void *)0xE100000000000000;
        String.append(_:)(v52);
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v53 = v75;
        if (v75 >= v76) {
          goto LABEL_20;
        }
        uint64_t v8 = v82;
        swift_bridgeObjectRetain();
        uint64_t v6 = v77;
        unint64_t v26 = Substring.subscript.getter();
        unint64_t v28 = v54;
        uint64_t v30 = v55;
        uint64_t v32 = v56;
        swift_bridgeObjectRelease();
        unint64_t v25 = v53;
        if ((v26 ^ v28) < 0x4000) {
          goto LABEL_19;
        }
      }
    }
  }
  if (v76 >= v25)
  {
    uint64_t v58 = Substring.subscript.getter();
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    uint64_t v64 = v63;
    uint64_t v65 = *(os_unfair_lock_s **)(v83 + 24);
    MEMORY[0x1F4188790](v58);
    MEMORY[0x1F4188790](v66);
    swift_retain();
    os_unfair_lock_lock(v65 + 4);
    partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v85);
    os_unfair_lock_unlock(v65 + 4);
    swift_release();
    BOOL v67 = (void *)*((void *)&v85 + 1);
    if (*((void *)&v85 + 1))
    {
      uint64_t v68 = v85;
    }
    else
    {
      *(void *)&long long v85 = v58;
      *((void *)&v85 + 1) = v60;
      uint64_t v86 = v62;
      uint64_t v87 = v64;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v69 = String._capitalized()();
      uint64_t v68 = v69._countAndFlagsBits;
      BOOL v67 = v69._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v70._uint64_t countAndFlagsBits = v68;
    v70._object = v67;
    String.append(_:)(v70);
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v88;
  }
  __break(1u);
  return result;
}

uint64_t StringProtocol.capitalized(with:)(uint64_t a1, uint64_t a2)
{
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9, a2, v3);
  uint64_t v10 = String.init<A>(_:)();
  uint64_t v12 = v11;
  if (v7)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v6 + 64);
    swift_unknownObjectRetain();
    v14(ObjectType, v6);
    swift_unknownObjectRelease();
  }
  uint64_t v15 = specialized static ICU.CaseMap.caseMappingForLocale(_:)();
  swift_bridgeObjectRelease();
  uint64_t v86 = v15;
  if (!v15)
  {
    *(void *)&long long v88 = v10;
    *((void *)&v88 + 1) = v12;
    swift_bridgeObjectRetain_n();
    String.init<A>(_:)();
    uint64_t countAndFlagsBits = String._capitalized()()._countAndFlagsBits;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return countAndFlagsBits;
  }
  uint64_t v91 = 0;
  unint64_t v92 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  unint64_t v16 = String.subscript.getter();
  unint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t result = MEMORY[0x185302C80](46, 0xE100000000000000);
  unint64_t v76 = v24;
  unint64_t v77 = result;
  uint64_t v74 = v12;
  uint64_t v75 = v25;
  uint64_t v82 = v26;
  unint64_t v83 = v18;
  unint64_t v27 = v16 >> 14;
  uint64_t v79 = v22;
  unint64_t v80 = v18 >> 14;
  if (v16 >> 14 >= v18 >> 14)
  {
    uint64_t v87 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v85 = v20;
    unint64_t v28 = Substring.subscript.getter();
    unint64_t v30 = v29;
    uint64_t v32 = v31;
    uint64_t v34 = v33;
    swift_bridgeObjectRelease();
    unint64_t v84 = v16;
    if ((v28 ^ v30) < 0x4000 || (v77 ^ v76) < 0x4000)
    {
      uint64_t v87 = 0;
      unint64_t v54 = v16 >> 14;
LABEL_20:
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v27 = v54;
    }
    else
    {
      uint64_t v87 = 0;
      while (1)
      {
        unint64_t v35 = specialized _StringCompareOptionsIterable._range<A>(of:toHalfWidth:diacriticsInsensitive:caseFold:anchored:backwards:)(v77, v76, v75, v82, 0, 0, 0, 0, 0, v28, v30, v32, v34);
        unint64_t v37 = v36;
        char v39 = v38;
        uint64_t result = swift_bridgeObjectRelease();
        if (v39) {
          break;
        }
        unint64_t v81 = v37;
        if (v35 >> 14 == v37 >> 14) {
          break;
        }
        if (v35 >> 14 < v27)
        {
          __break(1u);
          goto LABEL_30;
        }
        unint64_t v40 = v37 >> 14;
        uint64_t v41 = Substring.subscript.getter();
        uint64_t v43 = v42;
        uint64_t v45 = v44;
        uint64_t v47 = v46;
        uint64_t v78 = &v74;
        unint64_t v48 = *(os_unfair_lock_s **)(v86 + 24);
        MEMORY[0x1F4188790](v41);
        MEMORY[0x1F4188790](v49);
        swift_retain();
        os_unfair_lock_lock(v48 + 4);
        uint64_t v50 = v87;
        partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v88);
        uint64_t v87 = v50;
        os_unfair_lock_unlock(v48 + 4);
        swift_release();
        object = (void *)*((void *)&v88 + 1);
        if (*((void *)&v88 + 1))
        {
          uint64_t v52 = v88;
        }
        else
        {
          *(void *)&long long v88 = v41;
          *((void *)&v88 + 1) = v43;
          uint64_t v89 = v45;
          uint64_t v90 = v47;
          lazy protocol witness table accessor for type Substring and conformance Substring();
          swift_bridgeObjectRetain_n();
          String.init<A>(_:)();
          Swift::String v53 = String._capitalized()();
          uint64_t v52 = v53._countAndFlagsBits;
          object = v53._object;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        unint64_t v54 = v40;
        v55._uint64_t countAndFlagsBits = v52;
        v55._object = object;
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._uint64_t countAndFlagsBits = 46;
        v56._object = (void *)0xE100000000000000;
        String.append(_:)(v56);
        uint64_t result = swift_bridgeObjectRelease();
        if (v40 >= v80)
        {
          unint64_t v27 = v40;
          break;
        }
        swift_bridgeObjectRetain();
        unint64_t v28 = Substring.subscript.getter();
        unint64_t v30 = v57;
        uint64_t v32 = v58;
        uint64_t v34 = v59;
        swift_bridgeObjectRelease();
        unint64_t v27 = v40;
        if ((v28 ^ v30) < 0x4000) {
          goto LABEL_20;
        }
      }
    }
  }
  if (v80 >= v27)
  {
    uint64_t v61 = Substring.subscript.getter();
    uint64_t v63 = v62;
    uint64_t v65 = v64;
    uint64_t v67 = v66;
    uint64_t v68 = *(os_unfair_lock_s **)(v86 + 24);
    MEMORY[0x1F4188790](v61);
    MEMORY[0x1F4188790](v69);
    swift_retain();
    os_unfair_lock_lock(v68 + 4);
    partial apply for specialized closure #1 in LockedState<A>.withLock<A>(_:)(&v88);
    os_unfair_lock_unlock(v68 + 4);
    swift_release();
    Swift::String v70 = (void *)*((void *)&v88 + 1);
    if (*((void *)&v88 + 1))
    {
      uint64_t v71 = v88;
    }
    else
    {
      *(void *)&long long v88 = v61;
      *((void *)&v88 + 1) = v63;
      uint64_t v89 = v65;
      uint64_t v90 = v67;
      lazy protocol witness table accessor for type Substring and conformance Substring();
      swift_bridgeObjectRetain_n();
      String.init<A>(_:)();
      Swift::String v72 = String._capitalized()();
      uint64_t v71 = v72._countAndFlagsBits;
      Swift::String v70 = v72._object;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v73._uint64_t countAndFlagsBits = v71;
    v73._object = v70;
    String.append(_:)(v73);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v91;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t StringProtocol.localizedLowercase.getter(uint64_t a1, uint64_t a2)
{
  return StringProtocol.localizedLowercase.getter(a1, a2, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.lowercase(_:), MEMORY[0x1E4FBB0F0]);
}

uint64_t StringProtocol.lowercased(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return StringProtocol.lowercased(with:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t))ICU.CaseMap.lowercase(_:), MEMORY[0x1E4FBB0F0]);
}

uint64_t partial apply for closure #1 in ICU.CaseMap.titlecase(_:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in ICU.CaseMap.titlecase(_:)(a1);
}

{
  uint64_t *v1;

  return closure #1 in ICU.CaseMap.titlecase(_:)(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t _LocaleAutoupdating.firstDayOfWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v7);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v7[0])
  {
    uint64_t v2 = *((void *)&v7[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v2 + 328))(ObjectType, v2);
    return swift_unknownObjectRelease();
  }
  LocaleCache.preferences()(v7);
  MEMORY[0x1F4188790](v3);
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getterpartial apply(v0, v6);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v6[0])
  {
    uint64_t v2 = v6[1];
    outlined release of LocalePreferences(v7);
    goto LABEL_7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleAutoupdating()
{
}

void protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleAutoupdating()
{
}

void protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleAutoupdating()
{
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 72))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 80))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.countryCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 88))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 96))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 104))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.calendarIdentifierDisplayName(for:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 112))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 120))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 128))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 136))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifierDisplayName(for:) in conformance _LocaleAutoupdating(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v5 = v4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 144))(a1, a2, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t protocol witness for _LocaleProtocol.languageCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 152))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.scriptCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 160))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.variantCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 168))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.regionCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 176))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.exemplarCharacterSet.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 184))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.calendar.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 192))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 208))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.usesMetricSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 216))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t protocol witness for _LocaleProtocol.groupingSeparator.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 232))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbol.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 240))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencyCode.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 248))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collatorIdentifier.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 256))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 264))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 272))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 280))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 288))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currency.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 304))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 312))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 320))(ObjectType, v1);
  swift_unknownObjectRelease();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.firstDayOfWeek.getter in conformance _LocaleAutoupdating()
{
  return _LocaleAutoupdating.firstDayOfWeek.getter();
}

uint64_t protocol witness for _LocaleProtocol.weekendRange.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 336))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 368))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 384))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 392))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.variant.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 400))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.temperatureUnit.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 408))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceHourCycle.getter in conformance _LocaleAutoupdating()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  LocaleCache.current.getter();
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v1 + 424))(ObjectType, v1);

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for _LocaleProtocol.forceMinDaysInFirstWeek(_:) in conformance _LocaleAutoupdating(char *a1)
{
  char v1 = *a1;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v8 = static LocaleCache.cache;
  LocaleCache.current.getter();
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  char v7 = v1;
  uint64_t v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 440))(&v7, ObjectType, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t specialized _LocaleAutoupdating.minimumDaysInFirstWeek.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  char v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v8);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v8[0])
  {
    uint64_t v2 = *((void *)&v8[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 344))(ObjectType, v2);
    swift_unknownObjectRelease();
    return v5;
  }
  LocaleCache.preferences()(v8);
  MEMORY[0x1F4188790](v3);
  swift_retain();
  os_unfair_lock_lock(v1);
  partial apply for closure #2 in LocaleCache.current.getter(v0, v7);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v7[0])
  {
    uint64_t v2 = v7[1];
    outlined release of LocalePreferences(v8);
    goto LABEL_7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _LocaleAutoupdating.debugDescription.getter()
{
  strcpy((char *)v11, "autoupdating ");
  HIWORD(v11[1]) = -4864;
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (uint64_t *)(static LocaleCache.cache + 16);
  char v1 = (os_unfair_lock_s *)(static LocaleCache.cache + 124);
  swift_retain_n();
  os_unfair_lock_lock(v1);
  closure #1 in LocaleCache.current.getter(v0, v12);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (*(void *)&v12[0])
  {
    uint64_t v2 = *((void *)&v12[0] + 1);
LABEL_7:
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
    char v7 = v6;
    swift_unknownObjectRelease();
    v8._uint64_t countAndFlagsBits = v5;
    v8._object = v7;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return v11[0];
  }
  LocaleCache.preferences()(v12);
  MEMORY[0x1F4188790](v3);
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #2 in LocaleCache.current.getterpartial apply(v0, v10);
  os_unfair_lock_unlock(v1);
  swift_release();
  if (v10[0])
  {
    uint64_t v2 = v10[1];
    outlined release of LocalePreferences(v12);
    goto LABEL_7;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *closure #2 in LocaleCache.current.getterpartial apply@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #2 in LocaleCache.current.getter(a1, a2);
}

void LockedState.withLock<A>(_:)(void (*a1)(char *))
{
  uint64_t v3 = *v1;
  uint64_t v4 = **v1;
  uint64_t v5 = (char *)*v1 + *(void *)(*MEMORY[0x1E4FBBAB0] + v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)((char *)v3 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a1(v5);
  os_unfair_lock_unlock(v6);
}

uint64_t LockedState.withLockExtendingLifetimeOfState<A>(_:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  Swift::String v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v3;
  uint64_t v10 = **v3;
  uint64_t v11 = (char *)*v3 + *(void *)(*MEMORY[0x1E4FBBAB0] + v10 + 16);
  uint64_t v12 = (os_unfair_lock_s *)((char *)v9 + ((*(unsigned int *)(v10 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v12);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v11, v5);
  a1(v11);
  os_unfair_lock_unlock(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LockedState.init(initialState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  type metadata accessor for LockedState._Buffer();
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + ((*(unsigned int *)(*(void *)v6 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6 + *(void *)(*MEMORY[0x1E4FBBAB0] + *(void *)v6 + 16), a1, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  *a3 = v6;
  return result;
}

void LockedState<A>.lock()()
{
  os_unfair_lock_lock(*v0 + 4);
}

uint64_t LockedState<A>.init()@<X0>(uint64_t *a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LockedState<()>._Buffer);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

void LockedState.withLockUnchecked<A>(_:)(void (*a1)(char *))
{
  uint64_t v3 = *v1;
  uint64_t v4 = **v1;
  uint64_t v5 = (char *)*v1 + *(void *)(*MEMORY[0x1E4FBBAB0] + v4 + 16);
  uint64_t v6 = (os_unfair_lock_s *)((char *)v3 + ((*(unsigned int *)(v4 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  a1(v5);
  os_unfair_lock_unlock(v6);
}

void LockedState<A>.unlock()()
{
  os_unfair_lock_unlock(*v0 + 4);
}

void LockedState<A>.withLock<A>(_:)()
{
  char v1 = *v0 + 4;
  os_unfair_lock_lock(v1);
  partial apply for closure #1 in LockedState<A>.withLock<A>(_:)();
  os_unfair_lock_unlock(v1);
}

uint64_t partial apply for closure #1 in LockedState<A>.withLock<A>(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t type metadata accessor for LockedState()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RegexPatternCache.Key()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance RegexPatternCache.Key()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RegexPatternCache.Key()
{
  Swift::UInt8 v1 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RegexPatternCache.Key(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return v2 ^ v3 ^ 1u;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if (v5) {
    return v2 ^ v3 ^ 1u;
  }
  return result;
}

uint64_t closure #1 in RegexPatternCache.regex(for:caseInsensitive:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void (*a6)(char *, uint64_t, uint64_t, uint64_t)@<X5>, int a7@<W6>, char *a8@<X8>)
{
  int v57 = a7;
  uint64_t v62 = a5;
  uint64_t v63 = (void (*)(char *, uint64_t, uint64_t, uint64_t))a6;
  uint64_t v61 = a8;
  uint64_t v12 = type metadata accessor for RegexWordBoundaryKind();
  uint64_t v55 = *(void *)(v12 - 8);
  uint64_t v56 = v12;
  MEMORY[0x1F4188790](v12);
  unint64_t v54 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v58 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v50 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  Swift::String v51 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  unint64_t v24 = (char *)&v50 - v23;
  MEMORY[0x1F4188790](v25);
  Swift::String v53 = (char *)&v50 - v26;
  double v28 = MEMORY[0x1F4188790](v27);
  unint64_t v30 = (char *)&v50 - v29;
  unint64_t v59 = a2;
  uint64_t v60 = a1;
  uint64_t v31 = *a1;
  if (*(void *)(v31 + 16))
  {
    swift_bridgeObjectRetain();
    int v52 = a4;
    unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 & 1);
    if (v33)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v18, *(void *)(v31 + 56) + *(void *)(v20 + 72) * v32, v19);
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
      v34(v18, 0, 1, v19);
    }
    else
    {
      uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
      v34(v18, 1, 1, v19);
    }
    swift_bridgeObjectRelease();
    int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19);
    char v35 = v52;
    if (v36 != 1)
    {
      unint64_t v48 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      v48(v30, v18, v19);
      uint64_t v49 = v61;
      v48(v61, v30, v19);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v34)(v49, 0, 1, v19);
    }
  }
  else
  {
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, double))v34)(v18, 1, 1, v19, v28);
    char v35 = a4;
  }
  outlined destroy of Regex<AnyRegexOutput>?((uint64_t)v18);
  swift_bridgeObjectRetain();
  unint64_t v37 = v24;
  uint64_t v38 = v64;
  uint64_t result = Regex<A>.init(_:)();
  if (!v38)
  {
    uint64_t v63 = v34;
    uint64_t v64 = a3;
    unint64_t v40 = v54;
    MEMORY[0x185301040](result);
    uint64_t v41 = v53;
    Regex.wordBoundaryKind(_:)();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v56);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v20 + 8);
    v42(v37, v19);
    if (v57)
    {
      uint64_t v43 = v51;
      Regex.ignoresCase(_:)();
      v42(v41, v19);
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v41, v43, v19);
    }
    uint64_t v44 = (uint64_t)v58;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v58, v41, v19);
    uint64_t v45 = (uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v63;
    v63((char *)v44, 0, 1, v19);
    uint64_t v46 = v64;
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter(v44, v59, v46, v35 & 1);
    uint64_t v47 = v61;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v61, v41, v19);
    return v45((uint64_t)v47, 0, 1, v19);
  }
  return result;
}

uint64_t outlined destroy of Regex<AnyRegexOutput>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<AnyRegexOutput>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for RegexPatternCache()
{
  return &type metadata for RegexPatternCache;
}

ValueMetadata *type metadata accessor for RegexPatternCache.Key()
{
  return &type metadata for RegexPatternCache.Key;
}

unint64_t lazy protocol witness table accessor for type RegexPatternCache.Key and conformance RegexPatternCache.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key;
  if (!lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RegexPatternCache.Key and conformance RegexPatternCache.Key);
  }
  return result;
}

__n128 protocol witness for DataProtocol.regions.getter in conformance UnsafeRawBufferPointer@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in UnsafeRawBufferPointer()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<UnsafeRawBufferPointer> and conformance CollectionOfOne<A>, (uint64_t *)&demangling cache variable for type metadata for CollectionOfOne<UnsafeRawBufferPointer>);
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
    lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in UnsafeRawBufferPointer()
{
  return &protocol witness table for UnsafeRawBufferPointer;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in UnsafeRawBufferPointer()
{
  return lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<UnsafeRawBufferPointer>);
}

unint64_t instantiation function for generic protocol witness table for UnsafeRawBufferPointer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type UnsafeRawBufferPointer and conformance UnsafeRawBufferPointer();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<UnsafeBufferPointer<UInt8>> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<UnsafeBufferPointer<UInt8>>);
}

unint64_t lazy protocol witness table accessor for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>);
    lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in <A> UnsafeBufferPointer<A>()
{
  return &protocol witness table for <A> UnsafeBufferPointer<A>;
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element : DataProtocol in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance <A> UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
}

uint64_t associated type witness table accessor for DataProtocol.Regions.Sequence.Element.Collection.SubSequence : ContiguousBytes in <A> UnsafeBufferPointer<A>()
{
  return lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<UnsafeBufferPointer<UInt8>> and conformance <> Slice<A>, &demangling cache variable for type metadata for Slice<UnsafeBufferPointer<UInt8>>);
}

uint64_t lazy protocol witness table accessor for type Slice<UnsafeRawBufferPointer> and conformance <> Slice<A>(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for <A> UnsafeBufferPointer<A>(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type UnsafeBufferPointer<UInt8> and conformance UnsafeBufferPointer<A>, &demangling cache variable for type metadata for UnsafeBufferPointer<UInt8>);
  *(void *)(a1 + 8) = result;
  return result;
}

id specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result = objc_msgSend(v3, sel_length);
  if (a1 < 0 || (uint64_t)result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id result = objc_msgSend(v3, sel_length);
  if (a3 < 0 || (uint64_t)result < a3) {
    goto LABEL_17;
  }
  uint64_t v8 = a3 - a1;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= a2) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v8 <= 0 && v8 > a2) {
    return 0;
  }
LABEL_12:
  BOOL v10 = __OFADD__(a1, a2);
  uint64_t v9 = a1 + a2;
  if (v10)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  id result = objc_msgSend(v3, sel_length);
  if ((v9 & 0x8000000000000000) == 0 && (uint64_t)result >= v9) {
    return (id)v9;
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6 + a5;
  if (__OFADD__(a6, a5))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v6 < a3 || a3 < a6 || result < a6 || v6 < result) {
    goto LABEL_19;
  }
  uint64_t v7 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= (unint64_t)a2) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v7 <= 0 && v7 > a2) {
    return 0;
  }
LABEL_14:
  BOOL v8 = __OFADD__(result, a2);
  result += a2;
  if (v8)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  if (result < a6 || v6 < result) {
    goto LABEL_22;
  }
  return result;
}

__n128 DispatchData.Region.regions.getter@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t DispatchData.Region.subscript.getter(uint64_t result)
{
  uint64_t v3 = v1[1];
  uint64_t v2 = v1[2];
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 > result || v5 < result) {
    goto LABEL_9;
  }
  BOOL v4 = __OFSUB__(result, v2);
  uint64_t v7 = result - v2;
  if (!v4) {
    return *(unsigned __int8 *)(*v1 + v7);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t DispatchData.Region.startIndex.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t DispatchData.Region.endIndex.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t result = v2 + v1;
  if (__OFADD__(v2, v1)) {
    __break(1u);
  }
  return result;
}

uint64_t DispatchData.Region.withUnsafeBytes<A>(_:)(uint64_t (*a1)(void))
{
  return a1();
}

__n128 protocol witness for DataProtocol.regions.getter in conformance DispatchData.Region@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  return result;
}

uint64_t protocol witness for ContiguousBytes.withUnsafeBytes<A>(_:) in conformance DispatchData.Region(uint64_t (*a1)(void))
{
  return DispatchData.Region.withUnsafeBytes<A>(_:)(a1);
}

void *protocol witness for BidirectionalCollection.index(before:) in conformance DispatchData.Region@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  BOOL v6 = __OFADD__(v4, v5);
  uint64_t v7 = v4 + v5;
  if (v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= v4 && v3 < v7)
  {
    *a2 = v3;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *protocol witness for BidirectionalCollection.formIndex(before:) in conformance DispatchData.Region(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v3, v4);
  uint64_t v6 = v3 + v4;
  if (v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v2 >= v3 && v2 < v6)
  {
    *__n128 result = v2;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void protocol witness for Collection.startIndex.getter in conformance DispatchData.Region(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
}

void protocol witness for Collection.endIndex.getter in conformance DispatchData.Region(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  BOOL v4 = __OFADD__(v3, v2);
  uint64_t v5 = v3 + v2;
  if (v4) {
    __break(1u);
  }
  else {
    *a1 = v5;
  }
}

unsigned char *protocol witness for Collection.subscript.read in conformance DispatchData.Region(unsigned char *result, uint64_t *a2)
{
  uint64_t v4 = v2[1];
  uint64_t v3 = v2[2];
  uint64_t v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = *a2;
  if (*a2 < v3 || v5 < v6) {
    goto LABEL_9;
  }
  BOOL v8 = __OFSUB__(v6, v3);
  uint64_t v9 = v6 - v3;
  if (!v8)
  {
    *__n128 result = *(unsigned char *)(*v2 + v9);
    return destructiveProjectEnumData for PredicateCodableError;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.subscript.getter in conformance DispatchData.Region@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[1];
  uint64_t v4 = v2[2];
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < v4)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v6 = *result;
  if (*result < v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v7 = result[1];
  if (v5 >= v7)
  {
    a2[2] = *v2;
    a2[3] = v3;
    a2[4] = v4;
    *a2 = v6;
    a2[1] = v7;
    return result;
  }
LABEL_9:
  __break(1u);
  return result;
}

void protocol witness for Collection.indices.getter in conformance DispatchData.Region(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  BOOL v4 = __OFADD__(v2, v3);
  uint64_t v5 = v2 + v3;
  if (v4)
  {
    __break(1u);
  }
  else if (v5 >= v2)
  {
    *a1 = v2;
    a1[1] = v5;
    return;
  }
  __break(1u);
}

BOOL protocol witness for Collection.isEmpty.getter in conformance DispatchData.Region()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v3 = __OFADD__(v1, v2);
  uint64_t v4 = v1 + v2;
  if (!v3) {
    return v1 == v4;
  }
  __break(1u);
  return result;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance DispatchData.Region@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v3 + 8);
  uint64_t v5 = *(void *)(v3 + 16);
  BOOL v7 = __OFADD__(v5, v6);
  uint64_t v8 = v5 + v6;
  if (v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v4 >= v5 && v8 >= v4)
  {
    *a3 = v4;
    return result;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance DispatchData.Region@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *v4, v4[1], v4[2]);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance DispatchData.Region(uint64_t *result, uint64_t *a2)
{
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  BOOL v5 = __OFADD__(v4, v3);
  uint64_t v6 = v4 + v3;
  if (v5)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = *result;
  uint64_t v8 = *a2;
  if (v6 < *a2 || v8 < v4 || v7 < v4 || v6 < v7) {
    goto LABEL_15;
  }
  uint64_t result = (uint64_t *)(v8 - v7);
  if (__OFSUB__(v8, v7)) {
LABEL_16:
  }
    __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.index(after:) in conformance DispatchData.Region@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *result;
    if (*result >= v4 && v6 < v5)
    {
      *a2 = v6 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t *protocol witness for Collection.formIndex(after:) in conformance DispatchData.Region(uint64_t *result)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v4 = v2 + v3;
  if (__OFADD__(v2, v3))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *result;
    if (*result >= v2 && v5 < v4)
    {
      *uint64_t result = v5 + 1;
      return result;
    }
  }
  __break(1u);
  return result;
}

__n128 protocol witness for Sequence.makeIterator() in conformance DispatchData.Region@<Q0>(__n128 *a1@<X8>)
{
  unint64_t v2 = v1[1].n128_u64[0];
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v2;
  a1[1].n128_u64[1] = v2;
  return result;
}

uint64_t protocol witness for Collection.count.getter in conformance DispatchData.Region()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v3 = __OFADD__(v1, v2);
  uint64_t v4 = v1 + v2;
  if (v3)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t result = v4 - v1;
  if (v4 < v1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (__OFSUB__(v4, v1)) {
LABEL_7:
  }
    __break(1u);
  return result;
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance DispatchData.Region()
{
  return specialized _copyCollectionToContiguousArray<A>(_:)(*(void **)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void *protocol witness for Sequence._copyContents(initializing:) in conformance DispatchData.Region(void *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t DispatchData.regions.getter()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  DispatchData.enumerateBytes(_:)();
  return v1;
}

uint64_t closure #1 in DispatchData.regions.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = (void *)*a5;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a5 = (uint64_t)v9;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    uint64_t v9 = (void *)result;
    *a5 = result;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    uint64_t v9 = (void *)result;
  }
  v9[2] = v12 + 1;
  uint64_t v13 = &v9[3 * v12];
  v13[4] = a1;
  v13[5] = a2;
  v13[6] = a3;
  *a5 = (uint64_t)v9;
  return result;
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type CollectionOfOne<DispatchData.Region> and conformance CollectionOfOne<A>, &demangling cache variable for type metadata for CollectionOfOne<DispatchData.Region>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : DataProtocol in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region);
}

_UNKNOWN **associated type witness table accessor for DataProtocol.Regions.Sequence.Element : ContiguousBytes in DispatchData.Region()
{
  return &protocol witness table for DispatchData.Region;
}

unint64_t lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData.Region>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for DispatchData.Region(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region);
}

uint64_t lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData.Region>);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type Slice<DispatchData.Region> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type DispatchData.Region and conformance DispatchData.Region);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type Slice<DispatchData.Region> and conformance Slice<A>, &demangling cache variable for type metadata for Slice<DispatchData.Region>);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in DispatchData.Region()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type IndexingIterator<DispatchData.Region> and conformance IndexingIterator<A>, &demangling cache variable for type metadata for IndexingIterator<DispatchData.Region>);
}

uint64_t associated type witness table accessor for DataProtocol.Regions : BidirectionalCollection in DispatchData()
{
  return lazy protocol witness table accessor for type [String] and conformance [A](&lazy protocol witness table cache variable for type [DispatchData.Region] and conformance [A], &demangling cache variable for type metadata for [DispatchData.Region]);
}

unint64_t lazy protocol witness table accessor for type Slice<DispatchData> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Slice<DispatchData>);
    lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<DispatchData> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t protocol witness for DataProtocol.regions.getter in conformance DispatchData@<X0>(void *a1@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t result = DispatchData.enumerateBytes(_:)();
  *a1 = v3;
  return result;
}

uint64_t instantiation function for generic protocol witness table for DispatchData(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type DispatchData and conformance DispatchData(&lazy protocol witness table cache variable for type DispatchData and conformance DispatchData);
  *(void *)(a1 + 8) = result;
  return result;
}

ValueMetadata *type metadata accessor for DispatchData.Region()
{
  return &type metadata for DispatchData.Region;
}

ValueMetadata *type metadata accessor for DispatchData.Region.Storage()
{
  return &type metadata for DispatchData.Region.Storage;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - result;
  if (a3 > result)
  {
    while ((unint64_t)(~result + a3) <= 0x7FFFFFFFFFFFFFFELL)
    {
      if (v4 == ++v3) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  if (a3 < result)
  {
    unint64_t v5 = ~a3 + result;
    if (v5 >= (result ^ 0x8000000000000000)) {
      unint64_t v5 = result ^ 0x8000000000000000;
    }
    unint64_t v6 = 0x8000000000000000;
    if (v5 < 0x8000000000000000) {
      unint64_t v6 = v5;
    }
    while ((v5 & 0x8000000000000000) == 0)
    {
      if ((result ^ 0x8000000000000000) == v6) {
        goto LABEL_34;
      }
      if (v4 == --v3)
      {
LABEL_13:
        if (a2 > 0)
        {
          if ((v3 & 0x8000000000000000) == 0) {
            goto LABEL_19;
          }
          goto LABEL_20;
        }
        if (v3 >= 1) {
          goto LABEL_26;
        }
        goto LABEL_24;
      }
    }
    goto LABEL_33;
  }
  if (a2 > 0)
  {
LABEL_19:
    if (v3 >= (unint64_t)a2)
    {
LABEL_20:
      unint64_t v7 = result ^ 0x7FFFFFFFFFFFFFFFLL;
      unint64_t v8 = a2 - 1;
      while (v7 > v8)
      {
        ++result;
        if (!--a2) {
          return result;
        }
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    return 0;
  }
LABEL_24:
  if (v3 > a2) {
    return 0;
  }
LABEL_26:
  if ((a2 & 0x8000000000000000) == 0) {
    return result;
  }
  uint64_t v9 = 0;
  while ((result ^ 0x8000000000000000) > ~a2)
  {
    if (--v9 <= a2)
    {
      result += v9;
      return result;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t _CalendarProtocol.localeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 32))(v6);
  if (!v6[0]) {
    return 0;
  }
  uint64_t v2 = v6[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(ObjectType, v2);
  swift_unknownObjectRelease();
  return v4;
}

void _CalendarProtocol.gregorianStartDate.getter(uint64_t a1@<X8>)
{
}

uint64_t _CalendarProtocol.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  unint64_t v5 = 0xE000000000000000;
  (*(void (**)(char *__return_ptr))(a2 + 24))(&v3);
  _print_unlocked<A, B>(_:_:)();
  return v4;
}

uint64_t dispatch thunk of _CalendarProtocol.init(identifier:timeZone:locale:firstWeekday:minimumDaysInFirstWeek:gregorianStartDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void))(a10 + 16))(a1, a2, a3, a4, a5 & 1, a6, a7 & 1);
}

uint64_t dispatch thunk of _CalendarProtocol.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _CalendarProtocol.locale.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _CalendarProtocol.localeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _CalendarProtocol.timeZone.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of _CalendarProtocol.firstWeekday.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _CalendarProtocol.preferredFirstWeekday.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of _CalendarProtocol.minimumDaysInFirstWeek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of _CalendarProtocol.preferredMinimumDaysInFirstweek.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of _CalendarProtocol.gregorianStartDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of _CalendarProtocol.isAutoupdating.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of _CalendarProtocol.isBridged.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of _CalendarProtocol.copy(changingLocale:changingTimeZone:changingFirstWeekday:changingMinimumDaysInFirstWeek:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(a8 + 112))(a1, a2, a3, a4 & 1, a5, a6 & 1);
}

uint64_t dispatch thunk of _CalendarProtocol.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of _CalendarProtocol.minimumRange(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of _CalendarProtocol.maximumRange(of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of _CalendarProtocol.range(of:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of _CalendarProtocol.ordinality(of:in:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 152))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateInterval(of:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of _CalendarProtocol.isDateInWeekend(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of _CalendarProtocol.date(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 184))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 192))();
}

uint64_t dispatch thunk of _CalendarProtocol.date(byAdding:to:wrappingComponents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 200))();
}

uint64_t dispatch thunk of _CalendarProtocol.dateComponents(_:from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 208))();
}

uint64_t dispatch thunk of _CalendarProtocol.bridgeToNSCalendar()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 216))();
}

uint64_t protocol witness for _CalendarProtocol.localeIdentifier.getter in conformance _CalendarICU()
{
  if (!*(void *)(v0 + 104)) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t ObjectType = swift_getObjectType();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 64);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t specialized _CalendarProtocol.localeIdentifier.getter()
{
  if (one-time initialization token for cache != -1) {
    swift_once();
  }
  uint64_t v0 = (os_unfair_lock_s *)(static CalendarCache.cache + 60);
  swift_retain_n();
  os_unfair_lock_lock(v0);
  closure #1 in CalendarCache.current.getter(v7);
  os_unfair_lock_unlock(v0);
  swift_release_n();
  uint64_t v1 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v1 + 32))(v8, ObjectType, v1);
  swift_unknownObjectRelease();
  if (!v8[0]) {
    return 0;
  }
  uint64_t v3 = v8[1];
  uint64_t v4 = swift_getObjectType();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 64))(v4, v3);
  swift_unknownObjectRelease();
  return v5;
}

uint64_t NSUUID._toCustomAnyHashable()()
{
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v0, (uint64_t)&v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSUUID()
{
  uint64_t v1 = *v0;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v1, (uint64_t)&v2);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  AnyHashable.init<A>(_:)();
}

uint64_t closure #1 in __NSConcreteUUID.debugDescription.getter@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  v4._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafePointer<__NSConcreteUUID>);
  lazy protocol witness table accessor for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>();
  v6._uint64_t countAndFlagsBits = _Pointer.debugDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8254;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  id v8 = objc_msgSend(a1, sel_UUIDString);
  id v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  unint64_t v11 = v10;

  v12._uint64_t countAndFlagsBits = (uint64_t)v9;
  v12._object = v11;
  String.append(_:)(v12);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = 60;
  a2[1] = 0xE100000000000000;
  return result;
}

id __NSConcreteUUID.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __NSConcreteUUID();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t instantiation function for generic protocol witness table for UUID(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[2] = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[3] = lazy protocol witness table accessor for type UUID and conformance UUID();
  unint64_t result = lazy protocol witness table accessor for type UUID and conformance UUID();
  a1[4] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>;
  if (!lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UnsafePointer<__NSConcreteUUID>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsafePointer<__NSConcreteUUID> and conformance UnsafePointer<A>);
  }
  return result;
}

uint64_t NSComparisonResult.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

uint64_t NSComparisonResult.init(from:)(void *a1)
{
  uint64_t v3 = (uint64_t)__swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v5, v5[3]);
    uint64_t v3 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v3;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NSComparisonResult@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __swift_project_boxed_opaque_existential_1(v7, v7[3]);
  uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v5;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NSComparisonResult(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

void static CocoaError.fileNoSuchFileError.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static CocoaError.fileLockingError.getter(void *a1@<X8>)
{
  *a1 = 255;
}

void static CocoaError.fileReadUnknownError.getter(void *a1@<X8>)
{
  *a1 = 256;
}

void static CocoaError.fileReadNoPermissionError.getter(void *a1@<X8>)
{
  *a1 = 257;
}

void static CocoaError.fileReadInvalidFileNameError.getter(void *a1@<X8>)
{
  *a1 = 258;
}

void static CocoaError.fileReadCorruptFileError.getter(void *a1@<X8>)
{
  *a1 = 259;
}

void static CocoaError.fileReadNoSuchFileError.getter(void *a1@<X8>)
{
  *a1 = 260;
}

void static CocoaError.fileReadInapplicableStringEncodingError.getter(void *a1@<X8>)
{
  *a1 = 261;
}

void static CocoaError.fileReadUnsupportedSchemeError.getter(void *a1@<X8>)
{
  *a1 = 262;
}

void static CocoaError.fileReadTooLargeError.getter(void *a1@<X8>)
{
  *a1 = 263;
}

void static CocoaError.fileReadUnknownStringEncodingError.getter(void *a1@<X8>)
{
  *a1 = 264;
}

void static CocoaError.fileWriteUnknownError.getter(void *a1@<X8>)
{
  *a1 = 512;
}

void static CocoaError.fileWriteNoPermissionError.getter(void *a1@<X8>)
{
  *a1 = 513;
}

void static CocoaError.fileWriteInvalidFileNameError.getter(void *a1@<X8>)
{
  *a1 = 514;
}

void static CocoaError.fileWriteFileExistsError.getter(void *a1@<X8>)
{
  *a1 = 516;
}

void static CocoaError.fileWriteInapplicableStringEncodingError.getter(void *a1@<X8>)
{
  *a1 = 517;
}

void static CocoaError.fileWriteUnsupportedSchemeError.getter(void *a1@<X8>)
{
  *a1 = 518;
}

void static CocoaError.fileWriteOutOfSpaceError.getter(void *a1@<X8>)
{
  *a1 = 640;
}

void static CocoaError.fileWriteVolumeReadOnlyError.getter(void *a1@<X8>)
{
  *a1 = 642;
}

void static CocoaError.fileManagerUnmountUnknownError.getter(void *a1@<X8>)
{
  *a1 = 768;
}

void static CocoaError.fileManagerUnmountBusyError.getter(void *a1@<X8>)
{
  *a1 = 769;
}

void static CocoaError.keyValueValidationError.getter(void *a1@<X8>)
{
  *a1 = 1024;
}

void static CocoaError.formattingError.getter(void *a1@<X8>)
{
  *a1 = 2048;
}

void static CocoaError.userCancelledError.getter(void *a1@<X8>)
{
  *a1 = 3072;
}

void static CocoaError.featureUnsupportedError.getter(void *a1@<X8>)
{
  *a1 = 3328;
}

void static CocoaError.executableNotLoadableError.getter(void *a1@<X8>)
{
  *a1 = 3584;
}

void static CocoaError.executableArchitectureMismatchError.getter(void *a1@<X8>)
{
  *a1 = 3585;
}

void static CocoaError.executableRuntimeMismatchError.getter(void *a1@<X8>)
{
  *a1 = 3586;
}

void static CocoaError.executableLoadError.getter(void *a1@<X8>)
{
  *a1 = 3587;
}

void static CocoaError.executableLinkError.getter(void *a1@<X8>)
{
  *a1 = 3588;
}

void static CocoaError.propertyListReadCorruptError.getter(void *a1@<X8>)
{
  *a1 = 3840;
}

void static CocoaError.propertyListReadUnknownVersionError.getter(void *a1@<X8>)
{
  *a1 = 3841;
}

void static CocoaError.propertyListReadStreamError.getter(void *a1@<X8>)
{
  *a1 = 3842;
}

void static CocoaError.propertyListWriteStreamError.getter(void *a1@<X8>)
{
  *a1 = 3851;
}

void static CocoaError.propertyListWriteInvalidError.getter(void *a1@<X8>)
{
  *a1 = 3852;
}

void static CocoaError.ubiquitousFileUnavailableError.getter(void *a1@<X8>)
{
  *a1 = 4353;
}

void static CocoaError.ubiquitousFileNotUploadedDueToQuotaError.getter(void *a1@<X8>)
{
  *a1 = 4354;
}

void static CocoaError.userActivityHandoffFailedError.getter(void *a1@<X8>)
{
  *a1 = 4608;
}

void static CocoaError.userActivityConnectionUnavailableError.getter(void *a1@<X8>)
{
  *a1 = 4609;
}

void static CocoaError.userActivityRemoteApplicationTimedOutError.getter(void *a1@<X8>)
{
  *a1 = 4610;
}

void static CocoaError.userActivityHandoffUserInfoTooLargeError.getter(void *a1@<X8>)
{
  *a1 = 4611;
}

void static CocoaError.coderReadCorruptError.getter(void *a1@<X8>)
{
  *a1 = 4864;
}

void static CocoaError.coderValueNotFoundError.getter(void *a1@<X8>)
{
  *a1 = 4865;
}

uint64_t static TimeZone.tryParseGMTName(_:)()
{
  return specialized static TimeZone.tryParseGMTName(_:)();
}

void _TimeZoneGMT.__allocating_init(identifier:)()
{
}

void *_TimeZoneGMT.init(secondsFromGMT:)(uint64_t a1)
{
  uint64_t v3 = specialized static TimeZone.nameForSecondsFromGMT(_:)(a1);
  if (v4)
  {
    v1[3] = v3;
    v1[4] = v4;
    uid_t v1[2] = a1;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v1;
}

Swift::tuple_rawOffset_Int_daylightSavingOffset_Double __swiftcall _TimeZoneGMT.rawAndDaylightSavingTimeOffset(for:repeatedTimePolicy:skippedTimePolicy:)(Foundation::Date a1, Foundation::TimeZone::DaylightSavingTimePolicy repeatedTimePolicy, Foundation::TimeZone::DaylightSavingTimePolicy skippedTimePolicy)
{
  Swift::Int v4 = *(void *)(v3 + 16);
  double v5 = 0.0;
  result.daylightSavingOffset = v5;
  result.rawOffset = v4;
  return result;
}

uint64_t _TimeZoneGMT.debugDescription.getter()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x7366666F20746D67;
}

uint64_t _TimeZoneGMT.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _TimeZoneGMT()
{
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0x7366666F20746D67;
}

uint64_t specialized static _TimeZoneGMT.abbreviation(for:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 64801) < 0xFFFFFFFFFFFE05BFLL) {
    return 0;
  }
  uint64_t result = 5524807;
  if (a1 >= 0) {
    unint64_t v3 = a1;
  }
  else {
    unint64_t v3 = -a1;
  }
  if (v3 > 0xDF1 || (unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
  {
    if (a1 >= 0) {
      uint64_t v4 = 43;
    }
    else {
      uint64_t v4 = 45;
    }
    unint64_t v5 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v4);
    if (v3 >= 0x8C82) {
      String.UnicodeScalarView.append(_:)();
    }
    String.UnicodeScalarView.append(_:)();
    uint64_t result = 5524807;
    if ((unsigned __int16)(v3 + 30) % 0xE10u >= 0x3C)
    {
      String.UnicodeScalarView.append(_:)();
      String.UnicodeScalarView.append(_:)();
      String.UnicodeScalarView.append(_:)();
      return 5524807;
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for _TimeZoneGMT(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _TimeZoneGMT and conformance _TimeZoneGMT();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _TimeZoneGMT and conformance _TimeZoneGMT()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT;
  if (!lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT)
  {
    type metadata accessor for _TimeZoneGMT();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimeZoneGMT and conformance _TimeZoneGMT);
  }
  return result;
}

uint64_t type metadata accessor for _TimeZoneGMT()
{
  return self;
}

uint64_t method lookup function for _TimeZoneGMT(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _TimeZoneGMT);
}

uint64_t dispatch thunk of _TimeZoneGMT.__allocating_init(identifier:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of _TimeZoneGMT.__allocating_init(secondsFromGMT:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t assignWithCopy for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for _FileManagerImpl(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for _FileManagerImpl()
{
  return &type metadata for _FileManagerImpl;
}

Swift::Bool __swiftcall _FileManagerImpl.contentsEqual(atPath:andPath:)(Swift::String atPath, Swift::String andPath)
{
  uint64_t v4 = v2;
  Swift::String v89 = andPath;
  unint64_t object = (unint64_t)atPath._object;
  id countAndFlagsBits = (id)atPath._countAndFlagsBits;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = MEMORY[0x185309640]();
  if (!v7) {
    goto LABEL_71;
  }
  id v8 = (void *)v7;
  v9._id countAndFlagsBits = (uint64_t)countAndFlagsBits;
  v9._unint64_t object = (void *)object;
  NSFileManager._fileStat(_:)(&v92, v9);

  outlined init with take of stat?((uint64_t)&v92, (uint64_t)&v99);
  if (_sSo4statVSgWOg((uint64_t)&v99) == 1) {
    goto LABEL_5;
  }
  int v10 = v99;
  LODWORD(v3) = v100;
  uint64_t v11 = v101;
  int v12 = v102;
  uint64_t v13 = v103;
  uint64_t v14 = MEMORY[0x185309640](v4);
  if (!v14) {
    goto LABEL_71;
  }
  uint64_t v15 = (void *)v14;
  NSFileManager._fileStat(_:)(&v93, v89);

  outlined init with take of stat?((uint64_t)&v93, (uint64_t)&v94);
  if (_sSo4statVSgWOg((uint64_t)&v94) == 1) {
    goto LABEL_5;
  }
  id v88 = countAndFlagsBits;
  id countAndFlagsBits = (id)object;
  unint64_t object = v97;
  uint64_t v18 = v98;
  if (v10 == v94 && v11 == v96)
  {
    char v16 = 1;
    return v16 & 1;
  }
  int v19 = v95;
  int v20 = S_IFMT.getter() & v3;
  if (v20 != (S_IFMT.getter() & v19)) {
    goto LABEL_5;
  }
  int v21 = S_IFMT.getter() & v3;
  if (v21 == (unsigned __int16)S_IFBLK.getter() || v21 == (unsigned __int16)S_IFCHR.getter())
  {
    char v16 = v12 == object;
    return v16 & 1;
  }
  int v22 = S_IFMT.getter() & v3;
  if (v22 == (unsigned __int16)S_IFREG.getter())
  {
    if (v13 == v18)
    {
      uint64_t v23 = MEMORY[0x185309640](v4);
      if (v23)
      {
        unint64_t v24 = (void *)v23;
        MEMORY[0x1F4188790](v23);
        v82[2] = v4;
        Swift::String v83 = v89;
        char v16 = specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)((uint64_t)v88, (unint64_t)countAndFlagsBits, (void (*)(unsigned char *))partial apply for closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:), (uint64_t)v82);

        return v16 & 1;
      }
LABEL_71:
      int v84 = 0;
      for (v83._unint64_t object = (void *)48; ; v83._unint64_t object = (void *)294)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
LABEL_73:
        v91._id countAndFlagsBits = 0;
        v91._unint64_t object = (void *)0xE000000000000000;
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease();
        v91._id countAndFlagsBits = 0xD000000000000014;
        v91._unint64_t object = (void *)0x80000001823AF650;
        LOWORD(v90) = v3;
        lazy protocol witness table accessor for type UInt16 and conformance UInt16();
        v79._id countAndFlagsBits = String.init<A>(_:radix:uppercase:)();
        String.append(_:)(v79);
        swift_bridgeObjectRelease();
        v80._id countAndFlagsBits = 0x6C696620726F6620;
        v80._unint64_t object = (void *)0xEA00000000002065;
        String.append(_:)(v80);
        v81._id countAndFlagsBits = (uint64_t)countAndFlagsBits;
        v81._unint64_t object = (void *)object;
        String.append(_:)(v81);
        int v84 = 0;
      }
    }
    goto LABEL_5;
  }
  int v25 = S_IFMT.getter() & v3;
  unint64_t object = (unint64_t)countAndFlagsBits;
  if (v25 != (unsigned __int16)S_IFLNK.getter())
  {
    int v40 = S_IFMT.getter() & v3;
    id countAndFlagsBits = v88;
    if (v40 != (unsigned __int16)S_IFDIR.getter()) {
      goto LABEL_73;
    }
    uint64_t v41 = (void *)MEMORY[0x185309640](v4);
    if (!v41) {
      goto LABEL_71;
    }
    uint64_t v42 = v41;
    v91._id countAndFlagsBits = 0;
    id v43 = objc_msgSend(v41, sel_contentsOfDirectoryAtPath_error_, String._bridgeToObjectiveCImpl()(), &v91);

    swift_unknownObjectRelease();
    uint64_t v3 = v91._countAndFlagsBits;
    if (v43)
    {
      uint64_t v44 = type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      uint64_t v87 = v44;
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      id countAndFlagsBits = (id)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v45 = (void *)swift_dynamicCastClass();
      if (!v45)
      {
        swift_unknownObjectRelease();
        objc_msgSend(v43, sel_copy);
        unint64_t v46 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        uint64_t v45 = (void *)specialized _arrayForceCast<A, B>(_:)(v46);
        swift_bridgeObjectRelease();
      }
      id v47 = (id)v3;

      uint64_t v48 = MEMORY[0x185309640](v4);
      if (!v48) {
        goto LABEL_71;
      }
      uint64_t v49 = (void *)v48;
      uint64_t v50 = String._bridgeToObjectiveCImpl()();
      v91._id countAndFlagsBits = 0;
      id v51 = objc_msgSend(v49, sel_contentsOfDirectoryAtPath_error_, v50, &v91);

      swift_unknownObjectRelease();
      int v52 = (void *)v91._countAndFlagsBits;
      if (v51)
      {
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        uint64_t v53 = swift_dynamicCastClass();
        if (!v53)
        {
          swift_unknownObjectRelease();
          objc_msgSend(v51, sel_copy);
          unint64_t v54 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v53 = specialized _arrayForceCast<A, B>(_:)(v54);
          swift_bridgeObjectRelease();
        }
        id v55 = v52;

        uint64_t v56 = Set.init(minimumCapacity:)();
        uint64_t v90 = v56;
        uint64_t v57 = *(void *)(v53 + 16);
        if (v57)
        {
          uint64_t v58 = v45;
          unint64_t v59 = (unint64_t *)(v53 + 40);
          do
          {
            unint64_t v60 = *(v59 - 1);
            unint64_t v61 = *v59;
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)((unint64_t *)&v91, v60, v61);
            swift_bridgeObjectRelease();
            v59 += 2;
            --v57;
          }
          while (v57);
          swift_bridgeObjectRelease();
          uint64_t v62 = v90;
          uint64_t v45 = v58;
        }
        else
        {
          uint64_t v65 = v56;
          swift_bridgeObjectRelease();
          uint64_t v62 = v65;
        }
        uint64_t v66 = v45[2];
        if (v66 == *(void *)(v62 + 16))
        {
          if (!v66)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            char v16 = 1;
            return v16 & 1;
          }
          uint64_t v67 = v45[4];
          uint64_t v68 = (void *)v45[5];
          swift_bridgeObjectRetain();
          if (specialized Set.contains(_:)(v67, (uint64_t)v68, v62))
          {
            uint64_t v69 = 0;
            Swift::String v70 = (void **)(v45 + 7);
            uint64_t v85 = v66 - 1;
            uint64_t v86 = v45;
            while (1)
            {
              uint64_t v71 = v62;
              v91._id countAndFlagsBits = (uint64_t)v88;
              v91._unint64_t object = (void *)object;
              swift_bridgeObjectRetain();
              v72._id countAndFlagsBits = 47;
              v72._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v72);
              v73._id countAndFlagsBits = v67;
              v73._unint64_t object = v68;
              String.append(_:)(v73);
              uint64_t v74 = v91._object;
              uint64_t v87 = v91._countAndFlagsBits;
              Swift::String v91 = v89;
              swift_bridgeObjectRetain();
              v75._id countAndFlagsBits = 47;
              v75._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v75);
              v76._id countAndFlagsBits = v67;
              v76._unint64_t object = v68;
              String.append(_:)(v76);
              swift_bridgeObjectRelease();
              v77._id countAndFlagsBits = v87;
              v77._unint64_t object = v74;
              Swift::Bool v78 = _FileManagerImpl.contentsEqual(atPath:andPath:)(v77, v91);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (!v78) {
                break;
              }
              if (v85 == v69) {
                goto LABEL_69;
              }
              if ((unint64_t)++v69 >= v86[2]) {
                __break(1u);
              }
              uint64_t v62 = v71;
              uint64_t v67 = (uint64_t)*(v70 - 1);
              uint64_t v68 = *v70;
              swift_bridgeObjectRetain();
              v70 += 2;
              if ((specialized Set.contains(_:)(v67, (uint64_t)v68, v71) & 1) == 0) {
                goto LABEL_67;
              }
            }
          }
          else
          {
LABEL_67:
            swift_bridgeObjectRelease();
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
      id v63 = (id)v91._countAndFlagsBits;
      swift_bridgeObjectRelease();
      if (!v63) {
        goto LABEL_51;
      }
LABEL_50:
      swift_willThrow();

      goto LABEL_5;
    }
    if (!v91._countAndFlagsBits) {
      goto LABEL_51;
    }
LABEL_44:
    id v63 = (id)v91._countAndFlagsBits;
    goto LABEL_50;
  }
  uint64_t v26 = (void *)MEMORY[0x185309640](v4);
  if (!v26) {
    goto LABEL_71;
  }
  v91._id countAndFlagsBits = 0;
  id countAndFlagsBits = objc_msgSend(v26, sel_destinationOfSymbolicLinkAtPath_error_, String._bridgeToObjectiveCImpl()(), &v91);

  swift_unknownObjectRelease();
  uint64_t v27 = (void *)v91._countAndFlagsBits;
  if (!countAndFlagsBits)
  {
    if (!v91._countAndFlagsBits) {
      goto LABEL_51;
    }
    goto LABEL_44;
  }
  uint64_t v3 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(countAndFlagsBits);
  uint64_t v29 = v28;
  id v30 = v27;

  uint64_t v31 = MEMORY[0x185309640](v4);
  if (!v31) {
    goto LABEL_71;
  }
  unint64_t v32 = (void *)v31;
  uint64_t v33 = String._bridgeToObjectiveCImpl()();
  v91._id countAndFlagsBits = 0;
  id v34 = objc_msgSend(v32, sel_destinationOfSymbolicLinkAtPath_error_, v33, &v91);

  swift_unknownObjectRelease();
  char v35 = (void *)v91._countAndFlagsBits;
  if (!v34)
  {
    id v64 = (id)v91._countAndFlagsBits;
    swift_bridgeObjectRelease();
    if (v64)
    {
      swift_willThrow();

LABEL_5:
      char v16 = 0;
      return v16 & 1;
    }
LABEL_51:
    if (one-time initialization token for _nilObjCError != -1) {
      swift_once();
    }
    swift_willThrow();
    goto LABEL_5;
  }
  id v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  uint64_t v38 = v37;
  id v39 = v35;

  if ((id)v3 == v36 && v29 == v38)
  {
    swift_bridgeObjectRelease_n();
    char v16 = 1;
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v16 & 1;
}

void __swiftcall NSFileManager._fileStat(_:)(stat_optional *__return_ptr retstr, Swift::String a2)
{
  uint64_t v3 = v2;
  unint64_t object = (unint64_t)a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t ObjectType = swift_getObjectType();
  if (ObjectType == type metadata accessor for NSFileManager())
  {
    if ((object & 0x1000000000000000) != 0)
    {
      Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
    }
    else if ((object & 0x2000000000000000) != 0)
    {
      Swift::Int isStackAllocationSafe = HIBYTE(object) & 0xF;
    }
    else
    {
      Swift::Int isStackAllocationSafe = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v12 = 3 * isStackAllocationSafe;
    if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 == (3 * isStackAllocationSafe) >> 63)
    {
      if (v12 >= -1)
      {
        uint64_t v13 = v12 + 1;
        if (v12 < 1024
          || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
        {
          MEMORY[0x1F4188790](isStackAllocationSafe);
          Swift::String v9 = (char *)&v22 - v14;
          swift_bridgeObjectRetain();
          String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v9, v13, 1, countAndFlagsBits, object);
          char v16 = v15;
          swift_bridgeObjectRelease();
          if (v16) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
        uint64_t v17 = (const char *)swift_slowAlloc();
        swift_bridgeObjectRetain();
        String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v17, v13, 1, countAndFlagsBits, object);
        char v20 = v19;
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_22;
        }
LABEL_21:
        memset(&v23, 0, 28);
        memset(&v23.st_atimespec, 0, 112);
        if (!lstat(v17, &v23))
        {
          stat v25 = v23;
          _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v25);
          goto LABEL_23;
        }
LABEL_22:
        _sSo4statVSgWOi0_((uint64_t)&v25);
LABEL_23:
        outlined init with take of stat?((uint64_t)&v25, (uint64_t)v24);
        MEMORY[0x185309510](v17, -1, -1);
        goto LABEL_24;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  uint64_t v8 = swift_stdlib_isStackAllocationSafe();
  if ((v8 & 1) == 0)
  {
    uint64_t v17 = (const char *)swift_slowAlloc();
    unsigned __int8 v18 = objc_msgSend(v3, sel_getFileSystemRepresentation_maxLength_withPath_, v17, 1026, String._bridgeToObjectiveCImpl()());
    swift_unknownObjectRelease();
    if ((v18 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  MEMORY[0x1F4188790](v8);
  Swift::String v9 = v21;
  unsigned __int8 v10 = objc_msgSend(v3, sel_getFileSystemRepresentation_maxLength_withPath_, v21, 1026, String._bridgeToObjectiveCImpl()());
  swift_unknownObjectRelease();
  if ((v10 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_14:
  memset(&v23, 0, 28);
  memset(&v23.st_atimespec, 0, 112);
  if (!lstat(v9, &v23))
  {
    stat v25 = v23;
    _ss6ResultOySo4statV10Foundation10CocoaErrorVGWOi_((uint64_t)&v25);
    goto LABEL_16;
  }
LABEL_15:
  _sSo4statVSgWOi0_((uint64_t)&v25);
LABEL_16:
  outlined init with take of stat?((uint64_t)&v25, (uint64_t)v24);
LABEL_24:
  outlined init with take of stat?((uint64_t)v24, (uint64_t)&v25);
  outlined init with take of stat?((uint64_t)&v25, (uint64_t)retstr);
}

unint64_t _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  memset(&v6, 0, 28);
  memset(&v6.st_atimespec, 0, 112);
  int v0 = open(_:_:_:)();
  if ((v0 & 0x80000000) == 0)
  {
    unsigned int v1 = v0;
    if ((fstat(v0, &v6) & 0x80000000) == 0)
    {
      int st_mode = v6.st_mode;
      int v3 = S_IFMT.getter() & st_mode;
      if (v3 != (unsigned __int16)S_IFDIR.getter())
      {
        unsigned __int8 v4 = 0;
        goto LABEL_6;
      }
    }
    close(v1);
  }
  unsigned int v1 = 0;
  unsigned __int8 v4 = 1;
LABEL_6:
  LOBYTE(v6.st_dev) = v4;
  return v1 | ((unint64_t)v4 << 32);
}

unint64_t closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  if (!result
    || (unint64_t result = _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)(), (result & 0x100000000) != 0))
  {
    *a5 = 0;
  }
  else
  {
    int v9 = result;
    uint64_t v10 = MEMORY[0x185309640](a2);
    if (v10)
    {
      uint64_t v11 = (void *)v10;
      MEMORY[0x1F4188790](v10);
      v13[4] = v9;
      char v12 = specialized NSFileManager.withFileSystemRepresentation<A>(for:_:)(a3, a4, (void (*)(unsigned char *))partial apply for closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:), (uint64_t)v13);

      *a5 = v12 & 1;
      return close(v9);
    }
    else
    {
      unint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
  }
  return result;
}

unint64_t closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (!result
    || (unint64_t result = _openFD #1 (_:) in _FileManagerImpl.contentsEqual(atPath:andPath:)(), (result & 0x100000000) != 0))
  {
    *a3 = 0;
    return result;
  }
  unint64_t v6 = result;
  MEMORY[0x185301890](a2, 48, 1);
  MEMORY[0x185301890](v6, 48, 1);
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    uint64_t v8 = &v10;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(&v9, 0x2000uLL, 0x2000, a2, v6, (BOOL *)&v10 + 7);
    if (!v3)
    {
      *a3 = HIBYTE(v10);
      return close(v6);
    }
    swift_willThrow();

    __break(1u);
  }
  else
  {
    uint64_t v8 = (uint64_t *)swift_slowAlloc();
    closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(v8, 0x2000uLL, 0x2000, a2, v6, a3);
    if (!v3)
    {
      MEMORY[0x185309510](v8, -1, -1);
      return close(v6);
    }
  }

  unint64_t result = MEMORY[0x185309510](v8, -1, -1);
  __break(1u);
  return result;
}

void closure #1 in closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, BOOL *a6@<X8>)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    if ((a2 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
    }
    if (a2) {
      bzero(a1, a2);
    }
  }
  if (a3 < 0) {
    goto LABEL_29;
  }
  if (a3 <= 1024)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v13 = (char *)v20 - v14;
    if (!a3)
    {
LABEL_12:
      if (a1)
      {
        while (1)
        {
          ssize_t v15 = read(a4, a1, a3);
          if (v15 <= 0) {
            break;
          }
          if (read(a5, v13, a3) != v15
            || (specialized Sequence<>.elementsEqual<A>(_:)((unsigned __int8 *)v13, a3, (unsigned __int8 *)a1, a2) & 1) == 0)
          {
            BOOL v16 = 0;
            goto LABEL_18;
          }
        }
        BOOL v16 = v15 > -2;
LABEL_18:
        *a6 = v16;
        return;
      }
      __break(1u);
LABEL_31:
      __break(1u);
      return;
    }
    if (a3 >= 1)
    {
LABEL_11:
      bzero(v13, a3);
      goto LABEL_12;
    }
    goto LABEL_28;
  }
  uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
  if (isStackAllocationSafe)
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v13 = (char *)v20 - ((a3 + 15) & 0xFFFFFFFFFFFFFFF0);
    goto LABEL_11;
  }
  uint64_t v17 = (void *)swift_slowAlloc();
  bzero(v17, a3);
  if (!a1) {
    goto LABEL_31;
  }
  while (1)
  {
    ssize_t v18 = read(a4, a1, a3);
    if (v18 <= 0) {
      break;
    }
    if (read(a5, v17, a3) != v18
      || (specialized Sequence<>.elementsEqual<A>(_:)((unsigned __int8 *)v17, a3, (unsigned __int8 *)a1, a2) & 1) == 0)
    {
      BOOL v19 = 0;
      goto LABEL_25;
    }
  }
  BOOL v19 = v18 > -2;
LABEL_25:
  *a6 = v19;
  MEMORY[0x185309510](v17, -1, -1);
}

uint64_t outlined init with take of stat?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for stat?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UInt16 and conformance UInt16()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt16 and conformance UInt16;
  if (!lazy protocol witness table cache variable for type UInt16 and conformance UInt16)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt16 and conformance UInt16);
  }
  return result;
}

unint64_t partial apply for closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

unint64_t partial apply for closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)@<X0>(unint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in _FileManagerImpl.contentsEqual(atPath:andPath:)(a1, *(unsigned int *)(v2 + 16), a2);
}

double _sSo4statVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

uint64_t UUID.debugDescription.getter()
{
  return UUID.uuidString.getter();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UUID()
{
  return Hasher._finalize()();
}

uint64_t UUID.customMirror.getter()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = *v0;
  v12[1] = MEMORY[0x1E4FBC860];
  uint64_t v8 = *MEMORY[0x1E4FBC410];
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t protocol witness for CustomReflectable.customMirror.getter in conformance UUID()
{
  uint64_t v1 = type metadata accessor for Mirror.AncestorRepresentation();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror.DisplayStyle?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = *v0;
  v12[1] = MEMORY[0x1E4FBC860];
  uint64_t v8 = *MEMORY[0x1E4FBC410];
  uint64_t v9 = type metadata accessor for Mirror.DisplayStyle();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBC430], v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(label: String?, value: Any)]);
  lazy protocol witness table accessor for type [(label: String?, value: Any)] and conformance [A]();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)();
}

uint64_t UUID.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  UUID.uuidString.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance UUID(long long *a1, long long *a2)
{
  long long v2 = *a1;
  long long v4 = *a2;
  long long v5 = v2;
  return (specialized static UUID.< infix(_:_:)(&v4, &v5) & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance UUID(long long *a1, long long *a2)
{
  long long v2 = *a1;
  long long v4 = *a2;
  long long v5 = v2;
  return (specialized static UUID.< infix(_:_:)(&v5, &v4) & 1) == 0;
}

unint64_t protocol witness for static Comparable.> infix(_:_:) in conformance UUID(long long *a1, long long *a2)
{
  long long v2 = *a1;
  long long v4 = *a2;
  long long v5 = v2;
  return specialized static UUID.< infix(_:_:)(&v4, &v5) & 1;
}

unint64_t specialized static UUID.< infix(_:_:)(long long *a1, long long *a2)
{
  unint64_t v2 = 0;
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v3 = *a1;
  long long v7 = *a2;
  long long v8 = v3;
  for (uint64_t i = 15; i != -1; --i)
  {
    unint64_t v5 = *((unsigned __int8 *)&v8 + i) - (unint64_t)*((unsigned __int8 *)&v7 + i);
    unint64_t v2 = v2 & ((uint64_t)((v5 - 1) & ~v5) >> 8) | v5;
  }
  return v2 >> 63;
}

Swift::String_optional __swiftcall ICU.CaseMap.lowercase(_:)(Swift::String a1)
{
  uint64_t v1 = (uint64_t (*)(uint64_t, unsigned char *, uint64_t, uint64_t, unint64_t, int *))MEMORY[0x1E4FBA5F0];

  uint64_t v2 = ICU.CaseMap.lowercase(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, v1);
  result.value._unint64_t object = v3;
  result.value._uint64_t countAndFlagsBits = v2;
  return result;
}

uint64_t ICU.CaseMap.__deallocating_deinit()
{
  ucasemap_close();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in ICU.CaseMap.titlecase(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10[3] = a4;
  v10[0] = a1;
  v10[1] = a2;
  void v10[2] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized Substring.withUTF8<A>(_:)(v10);
  uint64_t v8 = v7;
  swift_release();
  *a5 = v6;
  a5[1] = v8;
  return swift_bridgeObjectRelease();
}

uint64_t specialized Substring.withUTF8<A>(_:)(void *a1)
{
  uint64_t v2 = v1;
  v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1[3];
  if ((v4 & 0x1000000000000000) != 0)
  {
    Substring._slowMakeContiguousUTF8()();
    uint64_t v4 = a1[3];
  }
  unint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = *a1 >> 16;
  unint64_t v8 = v6 >> 16;
  if ((v4 & 0x2000000000000000) != 0)
  {
    v17[0] = v5;
    v17[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    swift_retain_n();
    uint64_t v13 = swift_bridgeObjectRetain();
    MEMORY[0x1F4188790](v13);
    specialized closure #1 in _withResizingCharBuffer(initialSize:_:)((uint64_t)v15, (uint64_t)v17 + v7, v8 - v7, &v16);
    if (!v1)
    {
      uint64_t v12 = v16;
      goto LABEL_10;
    }
  }
  else
  {
    if ((v5 & 0x1000000000000000) != 0)
    {
      uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      uint64_t v9 = _StringObject.sharedUTF8.getter();
      if (!v9)
      {
        swift_retain_n();
        swift_bridgeObjectRetain();
        __break(1u);
      }
    }
    uint64_t v10 = v9 + v7;
    swift_retain_n();
    uint64_t v11 = swift_bridgeObjectRetain();
    MEMORY[0x1F4188790](v11);
    specialized closure #1 in _withResizingCharBuffer(initialSize:_:)((uint64_t)v15, v10, v8 - v7, v17);
    if (!v2)
    {
      uint64_t v12 = v17[0];
LABEL_10:
      swift_bridgeObjectRelease();
      swift_release();
      return v12;
    }
  }
  uint64_t result = swift_willThrow();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4DateV21ComponentsFormatStyleV5FieldVG_AL6OptionOs5NeverOTg5015_s10Foundation4e19V27AnchoredRelativegh75V12usableFields33_C066C46DD7A4458BFE9B19CA47B7E7FELLSayAC010ComponentseF0V5i2V6J59OGyFAmKcfu_33_7a8e0f6e267ccb9df6f8247fecae9d92AkMTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v15 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t v2 = v15;
  uint64_t result = specialized Set.startIndex.getter(a1);
  uint64_t v5 = result;
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(unsigned char *)(a1 + 32))
  {
    if (((*(void *)(a1 + 56 + (((unint64_t)v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      goto LABEL_13;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_14;
    }
    char v10 = *(unsigned char *)(*(void *)(a1 + 48) + v5);
    unint64_t v12 = *(void *)(v15 + 16);
    unint64_t v11 = *(void *)(v15 + 24);
    if (v12 >= v11 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    }
    *(void *)(v15 + 16) = v12 + 1;
    *(unsigned char *)(v15 + v12 + 32) = v10;
    uint64_t result = specialized _NativeSet.index(after:)(v5, v7, v9 & 1, a1);
    uint64_t v5 = result;
    uint64_t v7 = v13;
    char v9 = v14 & 1;
    if (!--v1)
    {
      outlined consume of Set<Calendar.Component>.Index._Variant(result, v13, v14 & 1);
      return v2;
    }
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

double specialized BinaryFloatingPoint.rounded<A>(increment:rule:)(uint64_t a1, double a2, double a3)
{
  uint64_t v6 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  char v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 != 0.0)
  {
    double v11 = a3 / a2;
    double v16 = v11;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, a1, v6, v8);
    int v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v10, v6);
    if (v12 == *MEMORY[0x1E4FBBEA0])
    {
      double v13 = round(v11);
    }
    else if (v12 == *MEMORY[0x1E4FBBE98])
    {
      double v13 = rint(v11);
    }
    else
    {
      if (v12 == *MEMORY[0x1E4FBBEA8]) {
        goto LABEL_7;
      }
      if (v12 == *MEMORY[0x1E4FBBEB0]) {
        goto LABEL_9;
      }
      if (v12 == *MEMORY[0x1E4FBBE88])
      {
        double v13 = trunc(v11);
        return v13 * a2;
      }
      if (v12 != *MEMORY[0x1E4FBBE90])
      {
        Double._roundSlowPath(_:)();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        double v13 = v16;
        return v13 * a2;
      }
      if ((*(void *)&v11 & 0x8000000000000000) != 0) {
LABEL_9:
      }
        double v13 = floor(v11);
      else {
LABEL_7:
      }
        double v13 = ceil(v11);
    }
    return v13 * a2;
  }
  return a3;
}

double Date.AnchoredRelativeFormatStyle.anchor.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 48);
  *a1 = result;
  return result;
}

double Date.AnchoredRelativeFormatStyle.anchor.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 48) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.anchor.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void Date.AnchoredRelativeFormatStyle.presentation.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *Date.AnchoredRelativeFormatStyle.presentation.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.presentation.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1;
  return Measurement<>.AttributedStyle<>.ByteCount.style.modify;
}

void Date.AnchoredRelativeFormatStyle.unitsStyle.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

unsigned char *Date.AnchoredRelativeFormatStyle.unitsStyle.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 1) = *result;
  return result;
}

unsigned char *(*Date.AnchoredRelativeFormatStyle.unitsStyle.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 1);
  return Date.AnchoredRelativeFormatStyle.unitsStyle.modify;
}

unsigned char *Date.AnchoredRelativeFormatStyle.unitsStyle.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 1) = result[8];
  return result;
}

void Date.AnchoredRelativeFormatStyle.capitalizationContext.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

unsigned char *Date.AnchoredRelativeFormatStyle.capitalizationContext.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 2) = *result;
  return result;
}

unsigned char *(*Date.AnchoredRelativeFormatStyle.capitalizationContext.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 2);
  return Date.AnchoredRelativeFormatStyle.capitalizationContext.modify;
}

unsigned char *Date.AnchoredRelativeFormatStyle.capitalizationContext.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 2) = result[8];
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 8);
  return swift_unknownObjectRetain();
}

__n128 Date.AnchoredRelativeFormatStyle.locale.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.locale.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  swift_unknownObjectRetain();
  return Date.AnchoredRelativeFormatStyle.locale.modify;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  uint64_t v4 = *a1;
  if (a2)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(v2 + 8) = v4;
    *(void *)(v2 + 16) = v3;
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v2 + 8) = v4;
    *(void *)(v2 + 16) = v3;
  }
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 24);
  return swift_unknownObjectRetain();
}

__n128 Date.AnchoredRelativeFormatStyle.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  *(__n128 *)(v1 + 24) = *a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.calendar.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 24);
  swift_unknownObjectRetain();
  return Measurement<>.AttributedStyle<>.ByteCount.locale.modify;
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Date.AnchoredRelativeFormatStyle.allowedFields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*Date.AnchoredRelativeFormatStyle.allowedFields.modify(void *a1))(uint64_t *a1, char a2)
{
  *a1 = *(void *)(v1 + 40);
  a1[1] = v1;
  swift_bridgeObjectRetain();
  return Date.RelativeFormatStyle.allowedFields.modify;
}

__n128 Date.AnchoredRelativeFormatStyle.init(anchor:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<Q0>(uint64_t *a1@<X0>, char *a2@<X1>, char *a3@<X2>, long long *a4@<X3>, __n128 *a5@<X4>, char *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = *a1;
  char v9 = *a2;
  char v10 = *a3;
  __n128 v28 = *a5;
  long long v29 = *a4;
  char v11 = *a6;
  uint64_t v12 = qword_1ECA48D18;
  if (qword_1ECA48D18)
  {
    char v27 = *a6;
    char v13 = *a3;
    char v14 = *a2;
    uint64_t v31 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, qword_1ECA48D18, 0);
    uint64_t v15 = v31;
    unint64_t v16 = *(void *)(v31 + 16);
    uint64_t v17 = &byte_1ECA48D28;
    do
    {
      char v19 = *v17++;
      char v18 = v19;
      uint64_t v31 = v15;
      unint64_t v20 = *(void *)(v15 + 24);
      if (v16 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v16 + 1, 1);
        uint64_t v15 = v31;
      }
      *(void *)(v15 + 16) = v16 + 1;
      *(unsigned char *)(v15 + v16++ + 32) = v18;
      --v12;
    }
    while (v12);
    char v9 = v14;
    char v10 = v13;
    char v11 = v27;
  }
  else
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
  }
  lazy protocol witness table accessor for type Date.ComponentsFormatStyle.Field and conformance Date.ComponentsFormatStyle.Field();
  uint64_t v21 = Set.init(minimumCapacity:)();
  uint64_t v31 = v21;
  uint64_t v22 = *(void *)(v15 + 16);
  if (v22)
  {
    for (uint64_t i = 0; i != v22; ++i)
    {
      uint64_t v24 = v15 + i;
      specialized Set._Variant.insert(_:)(&v30, *(unsigned __int8 *)(v24 + 32));
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = v31;
  }
  else
  {
    uint64_t v25 = v21;
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)a7 = v9;
  *(unsigned char *)(a7 + 1) = v10;
  *(unsigned char *)(a7 + 2) = v11;
  *(_OWORD *)(a7 + 8) = v29;
  __n128 result = v28;
  *(__n128 *)(a7 + 24) = v28;
  *(void *)(a7 + 40) = v25;
  *(void *)(a7 + 48) = v8;
  return result;
}

double Date.AnchoredRelativeFormatStyle.init(anchor:allowedFields:presentation:unitsStyle:locale:calendar:capitalizationContext:)@<D0>(double *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, char *a4@<X3>, _OWORD *a5@<X4>, _OWORD *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  double result = *a1;
  char v9 = *a4;
  char v10 = *a7;
  *(unsigned char *)a8 = *a3;
  *(unsigned char *)(a8 + 1) = v9;
  *(unsigned char *)(a8 + 2) = v10;
  *(_OWORD *)(a8 + 8) = *a5;
  *(_OWORD *)(a8 + 24) = *a6;
  *(void *)(a8 + 40) = a2;
  *(double *)(a8 + 48) = result;
  return result;
}

Swift::String __swiftcall Date.AnchoredRelativeFormatStyle.format(_:)(Foundation::Date a1)
{
  Swift::String v5 = Date.RelativeFormatStyle._format(_:refDate:)(*(Foundation::Date *)&v1->_time, v2[6]);
  unint64_t object = v5._object;
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  result._unint64_t object = object;
  result._uint64_t countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();

  return swift_unknownObjectRetain();
}

void Date.AnchoredRelativeFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v11)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v12;
  Swift::UInt8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  Swift::UInt64 v49;
  void *v50;
  void *v51;
  void *v52;
  Swift::UInt64 v53;
  uint64_t v54;
  unsigned char v55[144];
  char v56[8];
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  char v72;
  char v73;
  void v74[18];
  unsigned char v75[144];
  unsigned char v76[152];

  Swift::UInt v3 = v1[1];
  Swift::UInt v4 = v1[2];
  uint64_t v5 = *((void *)v1 + 2);
  unint64_t v54 = *((void *)v1 + 4);
  uint64_t v6 = *((void *)v1 + 5);
  Swift::UInt64 v7 = *((void *)v1 + 6);
  Hasher._combine(_:)(*v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  uint64_t ObjectType = swift_getObjectType();
  char v9 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v9(ObjectType, v5))
  {
    Swift::UInt8 v10 = 1;
LABEL_5:
    Hasher._combine(_:)(v10);
    swift_unknownObjectRelease();
    uint64_t v12 = v54;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v5 + 64))(ObjectType, v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v11 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v5 + 464);
  swift_unknownObjectRetain();
  v11(v74, ObjectType, v5);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v74, (uint64_t)v75);
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v76);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v76) == 1)
  {
    Swift::UInt8 v10 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v56);
  Hasher._combine(_:)(1u);
  if (v56[0] == 2)
  {
    char v13 = 0;
  }
  else
  {
    char v13 = v56[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  char v14 = v57;
  if (!v57)
  {
    Hasher._combine(_:)(0);
    char v18 = v56;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v14 + 16));
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15)
  {
    outlined init with take of LocalePreferences?((uint64_t)v75, (uint64_t)v55);
    char v18 = v55;
LABEL_19:
    outlined retain of LocalePreferences(v18);
    if (!v58) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v16 = v14 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v16 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  if (!v58)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v59) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = v60;
    if (!v60) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v59) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v17 = v60;
  if (!v60)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v17);
  swift_bridgeObjectRelease();
LABEL_23:
  char v19 = v61;
  uint64_t v53 = v7;
  if (v61)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v19);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  unint64_t v20 = v62;
  uint64_t v21 = v63;
  uint64_t v22 = v64;
  stat v23 = v65;
  uint64_t v24 = v66;
  uint64_t v50 = v64;
  id v51 = v66;
  if (v62)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v25 = v21;
    uint64_t v26 = v22;
    char v27 = v23;
    __n128 v28 = v23;
    long long v29 = v24;
    char v30 = v20;
    _CFObject.hash(into:)();
    int v52 = v20;
    if (v21)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v31 = v21;
      _CFObject.hash(into:)();

      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    unint64_t v32 = v24;
    uint64_t v33 = v21;
    id v34 = v22;
    char v27 = v23;
    char v35 = v23;
    int v52 = 0;
    if (v21) {
      goto LABEL_28;
    }
  }
  Hasher._combine(_:)(0);
LABEL_31:
  if (v50)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v36 = v50;
    _CFObject.hash(into:)();

    if (v27) {
      goto LABEL_33;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    uint64_t v38 = v51;
    if (v51) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }
  Hasher._combine(_:)(0);
  if (!v27) {
    goto LABEL_36;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v37 = v27;
  _CFObject.hash(into:)();

  uint64_t v38 = v51;
  if (v51)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v39 = v38;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  id v39 = 0;
LABEL_38:

  int v40 = v67;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::UInt64 v7 = v53;
  uint64_t v12 = v54;
  uint64_t v41 = v68;
  if (!v68)
  {
    Hasher._combine(_:)(0);
    if (v69) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  if (!v69) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v70 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v42 = v70 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v71 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    id v43 = v71 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v72 == 2)
  {
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v44 = v72 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v44);
  if (v73 == 2)
  {
    uint64_t v45 = 0;
  }
  else
  {
    unint64_t v46 = v73 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v45 = v46;
  }
  Hasher._combine(_:)(v45);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v75, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  id v47 = swift_getObjectType();
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 120);
  swift_unknownObjectRetain();
  v48(a1, v47, v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(a1, v6);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v49 = v7;
  }
  else {
    uint64_t v49 = 0;
  }
  Hasher._combine(_:)(v49);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  if (*v0) {
    return 0x726F68636E61;
  }
  else {
    return 0x79745372656E6E69;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.AnchoredRelativeFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.AnchoredRelativeFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.AnchoredRelativeFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.AnchoredRelativeFormatStyle.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.AnchoredRelativeFormatStyle.CodingKeys>);
  uint64_t v14 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v7 = *v2;
  __int16 v8 = *(_WORD *)(v2 + 1);
  uint64_t v9 = *((void *)v2 + 5);
  uint64_t v10 = *((void *)v2 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v16) = v7;
  *(_WORD *)((char *)&v16 + 1) = v8;
  long long v17 = *(_OWORD *)(v2 + 8);
  long long v18 = *(_OWORD *)(v2 + 24);
  uint64_t v19 = v9;
  char v15 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  uint64_t v11 = v13[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v11)
  {
    uint64_t v16 = v10;
    char v15 = 1;
    lazy protocol witness table accessor for type Date and conformance Date();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v6, v4);
}

Swift::Int Date.AnchoredRelativeFormatStyle.hashValue.getter()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::UInt v39;
  Swift::UInt v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  uint64_t v44;
  void (*v45)(unsigned char *, uint64_t, uint64_t);
  Swift::UInt64 v46;
  void *v48;
  Swift::UInt64 v49;
  uint64_t v50;
  unsigned char v51[144];
  char v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  void v70[18];
  unsigned char v71[144];
  unsigned char v72[144];
  unsigned char v73[80];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v50 = *((void *)v0 + 4);
  uint64_t v5 = *((void *)v0 + 5);
  Swift::UInt64 v6 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  __int16 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v8(ObjectType, v4))
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    uint64_t v11 = v50;
    goto LABEL_59;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v70, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71);
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v72) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v52);
  Hasher._combine(_:)(1u);
  if (v52[0] == 2)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = v52[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  char v13 = v53;
  if (!v53)
  {
    Hasher._combine(_:)(0);
    long long v17 = v52;
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v51);
    long long v17 = v51;
LABEL_19:
    outlined retain of LocalePreferences(v17);
    if (!v54) {
      goto LABEL_14;
    }
    goto LABEL_20;
  }
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  char v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v55) {
      goto LABEL_15;
    }
LABEL_21:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = v56;
    if (!v56) {
      goto LABEL_16;
    }
    goto LABEL_22;
  }
LABEL_20:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_21;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  uint64_t v16 = v56;
  if (!v56)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v16);
  swift_bridgeObjectRelease();
LABEL_23:
  long long v18 = v57;
  uint64_t v49 = v6;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v19 = v58;
  unint64_t v20 = v59;
  uint64_t v22 = v60;
  uint64_t v21 = v61;
  stat v23 = v62;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v24 = v20;
    uint64_t v25 = v22;
    uint64_t v26 = v21;
    char v27 = v23;
    __n128 v28 = v19;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    long long v29 = v23;
    char v30 = v20;
    uint64_t v31 = v22;
    unint64_t v32 = v21;
  }
  uint64_t v48 = v19;
  if (v20)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v33 = v20;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v22)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      id v34 = v22;
      _CFObject.hash(into:)();

      if (v21) {
        goto LABEL_32;
      }
LABEL_36:
      Hasher._combine(_:)(0);
      if (v23) {
        goto LABEL_33;
      }
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (!v21) {
    goto LABEL_36;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  char v35 = v21;
  _CFObject.hash(into:)();

  if (v23)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    id v36 = v23;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  id v36 = 0;
LABEL_38:

  uint64_t v37 = v63;
  if (v37)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v73, v37);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::UInt64 v6 = v49;
  uint64_t v11 = v50;
  uint64_t v38 = v64;
  if (!v64)
  {
    Hasher._combine(_:)(0);
    if (v65) {
      goto LABEL_43;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v73, v38);
  swift_bridgeObjectRelease();
  if (!v65) {
    goto LABEL_45;
  }
LABEL_43:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    id v39 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v40 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v68 == 2)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = v68 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v41);
  if (v69 == 2)
  {
    uint64_t v42 = 0;
  }
  else
  {
    id v43 = v69 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v42 = v43;
  }
  Hasher._combine(_:)(v42);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_59:
  uint64_t v44 = swift_getObjectType();
  uint64_t v45 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v45(v73, v44, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v73, v5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v46 = v6;
  }
  else {
    unint64_t v46 = 0;
  }
  Hasher._combine(_:)(v46);
  return Hasher._finalize()();
}

uint64_t Date.AnchoredRelativeFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.AnchoredRelativeFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  __int16 v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v22 = 0;
  lazy protocol witness table accessor for type Date.RelativeFormatStyle and conformance Date.RelativeFormatStyle();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v21 = v17;
  int v12 = BYTE2(v17);
  int v13 = BYTE1(v17);
  long long v15 = v19;
  long long v16 = v18;
  uint64_t v9 = v20;
  char v22 = 1;
  lazy protocol witness table accessor for type Date and conformance Date();
  uint64_t v14 = v16;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = v17;
  *(unsigned char *)a2 = v21;
  *(unsigned char *)(a2 + 1) = v13;
  *(unsigned char *)(a2 + 2) = v12;
  *(_OWORD *)(a2 + 8) = v16;
  *(_OWORD *)(a2 + 24) = v15;
  *(void *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.AnchoredRelativeFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.AnchoredRelativeFormatStyle(void *a1)
{
  return Date.AnchoredRelativeFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.AnchoredRelativeFormatStyle()
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v11;
  Swift::UInt8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt v38;
  Swift::UInt v39;
  Swift::UInt8 v40;
  Swift::UInt8 v41;
  Swift::UInt8 v42;
  uint64_t v43;
  void (*v44)(unsigned char *, uint64_t, uint64_t);
  Swift::UInt64 v45;
  void *v47;
  Swift::UInt64 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;
  char v67;
  void v68[18];
  unsigned char v69[144];
  unsigned char v70[144];
  unsigned char v71[80];

  Swift::UInt v1 = *v0;
  Swift::UInt v2 = v0[1];
  Swift::UInt v3 = v0[2];
  uint64_t v4 = *((void *)v0 + 2);
  uint64_t v49 = *((void *)v0 + 4);
  uint64_t v5 = *((void *)v0 + 5);
  Swift::UInt64 v6 = *((void *)v0 + 6);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  uint64_t ObjectType = swift_getObjectType();
  __int16 v8 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  if (v8(ObjectType, v4))
  {
    Swift::UInt8 v9 = 1;
LABEL_5:
    Hasher._combine(_:)(v9);
    swift_unknownObjectRelease();
    uint64_t v11 = v49;
    goto LABEL_58;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(ObjectType, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v10(v68, ObjectType, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)v70);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v70) == 1)
  {
    Swift::UInt8 v9 = 0;
    goto LABEL_5;
  }
  outlined init with take of LocalePreferences?((uint64_t)v69, (uint64_t)&v50);
  Hasher._combine(_:)(1u);
  if (v50 == 2)
  {
    int v12 = 0;
  }
  else
  {
    int v12 = v50 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v12);
  int v13 = v51;
  if (!v51)
  {
    Hasher._combine(_:)(0);
LABEL_18:
    outlined retain of LocalePreferences(&v50);
    if (!v52) {
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v13 + 16));
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    goto LABEL_18;
  }
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v15 = v13 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v15 += 16;
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  if (!v52)
  {
LABEL_14:
    Hasher._combine(_:)(0);
    if (!v53) {
      goto LABEL_15;
    }
LABEL_20:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v16 = v54;
    if (!v54) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v53) {
    goto LABEL_20;
  }
LABEL_15:
  Hasher._combine(_:)(0);
  long long v16 = v54;
  if (!v54)
  {
LABEL_16:
    Hasher._combine(_:)(0);
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v16);
  swift_bridgeObjectRelease();
LABEL_22:
  uint64_t v17 = v55;
  uint64_t v48 = v6;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v18 = v56;
  long long v19 = v57;
  int v21 = v58;
  uint64_t v20 = v59;
  char v22 = v60;
  if (v56)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    stat v23 = v19;
    uint64_t v24 = v21;
    uint64_t v25 = v20;
    uint64_t v26 = v22;
    char v27 = v18;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    __n128 v28 = v22;
    long long v29 = v19;
    char v30 = v21;
    uint64_t v31 = v20;
  }
  id v47 = v18;
  if (v19)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    unint64_t v32 = v19;
    _CFObject.hash(into:)();

    if (v21) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v21)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v33 = v21;
      _CFObject.hash(into:)();

      if (v20) {
        goto LABEL_31;
      }
LABEL_35:
      Hasher._combine(_:)(0);
      if (v22) {
        goto LABEL_32;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (!v20) {
    goto LABEL_35;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  id v34 = v20;
  _CFObject.hash(into:)();

  if (v22)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    char v35 = v22;
    _CFObject.hash(into:)();

    goto LABEL_37;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  char v35 = 0;
LABEL_37:

  id v36 = v61;
  if (v36)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v71, v36);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Swift::UInt64 v6 = v48;
  uint64_t v11 = v49;
  uint64_t v37 = v62;
  if (!v62)
  {
    Hasher._combine(_:)(0);
    if (v63) {
      goto LABEL_42;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v71, v37);
  swift_bridgeObjectRelease();
  if (!v63) {
    goto LABEL_44;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v38 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }
  if (v65 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    id v39 = v65 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v39);
  }
  if (v66 == 2)
  {
    int v40 = 0;
  }
  else
  {
    int v40 = v66 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v40);
  if (v67 == 2)
  {
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v42 = v67 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v41 = v42;
  }
  Hasher._combine(_:)(v41);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v69, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease();
LABEL_58:
  id v43 = swift_getObjectType();
  uint64_t v44 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 120);
  swift_unknownObjectRetain();
  v44(v71, v43, v11);
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  specialized Set.hash(into:)(v71, v5);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v45 = v6;
  }
  else {
    uint64_t v45 = 0;
  }
  Hasher._combine(_:)(v45);
  return Hasher._finalize()();
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.discreteInput(before:)(Foundation::Date before)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  __int16 v6 = *(_WORD *)(v3 + 1);
  uint64_t v7 = *((void *)v3 + 5);
  double v8 = *((double *)v3 + 6);
  char v16 = *v3;
  __int16 v17 = v6;
  long long v9 = *(_OWORD *)(v3 + 24);
  long long v18 = *(_OWORD *)(v3 + 8);
  long long v19 = v9;
  uint64_t v20 = v7;
  double v21 = v8;
  double v14 = v8;
  double v15 = v5;
  char v10 = Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(&v15, &v14, 1, v8 < v5, (uint64_t)&v22);
  int v11 = v23;
  if (v23 == 2)
  {
    double v12 = 0.0;
  }
  else
  {
    double v12 = v22;
    if (v23)
    {
      double v13 = 0.0 - v22;
      if (0.0 - v22 < INFINITY) {
        *(void *)&v13 += (*(uint64_t *)&v13 >> 63) | 1;
      }
      double v12 = -v13;
    }
  }
  *(double *)uint64_t v4 = v12;
  *(unsigned char *)(v4 + 8) = v11 == 2;
  result.Swift::Int value = *(Foundation::Date *)&v12;
  result.is_nil = v10;
  return result;
}

uint64_t Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)@<X0>(double *a1@<X0>, double *a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void (*v82)(uint64_t *__return_ptr, double *, double *, uint64_t, uint64_t);
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(double *, double *, uint64_t *, uint64_t, uint64_t);
  uint64_t v90;
  double v91;
  double v92;
  unsigned __int8 *v93;
  BOOL v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  double v102;
  void (*v103)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t);
  double *v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  uint64_t v108;
  BOOL v109;
  uint64_t v110;
  char v111;
  double v112;
  uint64_t v113;
  Swift::Int_optional v114;
  uint64_t *v115;
  void (*v116)(Foundation::Date *__return_ptr, double *, double *, void, uint64_t, void);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  double *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t (*v132)(double *, double *, uint64_t *, uint64_t, uint64_t);
  unint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  double v139;
  double v140;
  char v141;
  double v142;
  double v143[36];
  double v144[36];
  double v145;
  char v146;
  Foundation::Date v147;
  char v148;
  uint64_t v149[38];
  void v150[36];
  char v151;
  __int16 v152;
  long long v153;
  double v154;
  double v155;
  uint64_t v156;
  Swift::Int_optional v157;

  unint64_t v135 = a4;
  LODWORD(v134) = a3;
  uint64_t v9 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  double v12 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = *a1;
  double v14 = *a2;
  __int16 v15 = *(_WORD *)(v5 + 1);
  double v17 = *((double *)v5 + 3);
  double v16 = *((double *)v5 + 4);
  uint64_t v18 = *((void *)v5 + 5);
  uint64_t v151 = *v5;
  char v152 = v15;
  uint64_t v153 = *(_OWORD *)(v5 + 8);
  uint64_t v154 = v17;
  uint64_t v155 = v16;
  unint64_t v139 = v16;
  uint64_t v156 = v18;
  uint64_t v19 = one-time initialization token for sortedAllowedComponents;
  unint64_t v137 = v153;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  unint64_t v138 = v18;
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    goto LABEL_151;
  }
  while (2)
  {
    Swift::Int v20 = swift_bridgeObjectRetain();
    Swift::Int v21 = specialized _ArrayProtocol.filter(_:)(v20, (uint64_t)&v151);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void *)(v21 + 16);
    if (!v22)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a5 = 0;
      *(unsigned char *)(a5 + 8) = 2;
      return result;
    }
    uint64_t v128 = (double *)a5;
    unsigned int v23 = *(unsigned __int8 *)(v22 + v21 + 31);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBBEA0], v9);
    double v24 = specialized BinaryFloatingPoint.rounded<A>(increment:rule:)((uint64_t)v12, 1.0, v13 - v14);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    double v25 = v14 + v24;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    Swift::Int v26 = swift_bridgeObjectRetain();
    Swift::Int v27 = specialized _ArrayProtocol.filter(_:)(v26, (uint64_t)&v151);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
    uint64_t v28 = Set.init(minimumCapacity:)();
    v150[0] = v28;
    uint64_t v29 = *(void *)(v27 + 16);
    if (v29)
    {
      for (uint64_t i = 0; i != v29; ++i)
      {
        Swift::Int v31 = v27 + i;
        specialized Set._Variant.insert(_:)(v149, *(unsigned __int8 *)(v31 + 32));
      }
      swift_bridgeObjectRelease();
      uint64_t v32 = v150[0];
    }
    else
    {
      uint64_t v32 = v28;
      swift_bridgeObjectRelease();
    }
    *(double *)unint64_t v150 = v17;
    *(double *)&v150[1] = v139;
    v144[0] = v25;
    v143[0] = v14;
    swift_unknownObjectRetain();
    Calendar.dateComponents(_:from:to:)(v32, v144, v143, v149);
    swift_unknownObjectRelease();
    memcpy(v150, v149, 0x11AuLL);
    outlined retain of DateComponents((uint64_t)v150);
    uint64_t v34 = swift_bridgeObjectRetain();
    char v35 = specialized Sequence.compactMap<A>(_:)(v34, v150);
    outlined release of DateComponents((uint64_t)v150);
    swift_bridgeObjectRelease();
    if (v35[2])
    {
      uint64_t v36 = *((unsigned __int8 *)v35 + 32);
      uint64_t v37 = v35[5];
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = 0;
      uint64_t v36 = 18;
    }
    if (v36 == 18)
    {
      uint64_t v37 = 0;
      unsigned int v38 = v23;
    }
    else
    {
      unsigned int v38 = v36;
    }
    if ((v38 - 4) > 2u)
    {
      LOBYTE(v145) = v38;
      v143[0] = v14;
      v147._double time = v25;
      v144[0] = v17;
      v144[1] = v139;
      swift_unknownObjectRetain();
      static Date.RelativeFormatStyle._alignedComponentValue(component:for:reference:calendar:allowedComponents:)(&v145, v143, &v147._time, (uint64_t *)v144, v32, (uint64_t)v149);
    }
    else
    {
      v143[0] = v25;
      v147._double time = v14;
      v144[0] = v17;
      v144[1] = v139;
      LOBYTE(v145) = v38;
      swift_unknownObjectRetain();
      static Date.RelativeFormatStyle._roundedLargestComponentValue(refDate:for:calendar:allowedComponents:largestAllowedComponent:)(v143, &v147._time, v144, v32, (unsigned __int8 *)&v145, (uint64_t)v149);
    }
    swift_bridgeObjectRelease();
    outlined release of DateComponents((uint64_t)v150);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    uint64_t v40 = v149[1];
    if (LOBYTE(v149[0]) == 18)
    {
      uint64_t v40 = v37;
      unint64_t v41 = v38;
    }
    else
    {
      unint64_t v41 = LODWORD(v149[0]);
    }
    uint64_t v42 = v128;
    LOBYTE(v43) = v134;
    unsigned __int8 v44 = 0;
    int v45 = 1;
    switch((char)v41)
    {
      case 1:
        goto LABEL_26;
      case 2:
        unsigned __int8 v44 = 1;
        goto LABEL_26;
      case 3:
        unsigned __int8 v44 = v41;
        goto LABEL_26;
      case 4:
      case 5:
      case 6:
        int v45 = 0;
        unsigned __int8 v44 = v41;
        goto LABEL_26;
      case 10:
      case 11:
        unsigned __int8 v44 = 2;
LABEL_26:
        unint64_t v136 = &v149[33];
        unint64_t v140 = v17;
        uint64_t v46 = *(void *)&v139;
        if ((v135 & 1) == 0) {
          goto LABEL_53;
        }
        uint64_t v47 = v40;
        if (v40 < 0)
        {
          uint64_t v47 = -v40;
          if (__OFSUB__(0, v40)) {
            goto LABEL_157;
          }
        }
        if (v47 != 1) {
          goto LABEL_53;
        }
        LODWORD(v132) = v45;
        char v131 = v40;
        uint64_t v48 = swift_bridgeObjectRetain();
        uint64_t v49 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFShy10Foundation4DateV21ComponentsFormatStyleV5FieldVG_AL6OptionOs5NeverOTg5015_s10Foundation4e19V27AnchoredRelativegh75V12usableFields33_C066C46DD7A4458BFE9B19CA47B7E7FELLSayAC010ComponentseF0V5i2V6J59OGyFAmKcfu_33_7a8e0f6e267ccb9df6f8247fecae9d92AkMTf3nnnpk_nTf1cn_n(v48);
        swift_bridgeObjectRelease();
        v149[0] = v49;
        swift_bridgeObjectRetain();
        specialized MutableCollection<>.sort(by:)(v149);
        uint64_t v130 = 0;
        swift_bridgeObjectRelease();
        uint64_t v50 = *(void *)(v149[0] + 16);
        if (v50)
        {
          id v51 = (unsigned __int8 *)(v149[0] + 32);
          uint64_t v52 = MEMORY[0x1E4FBC860];
          do
          {
            unsigned int v56 = *v51++;
            char v55 = v56;
            if (v56 > v44)
            {
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v149[0] = v52;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v52 + 16) + 1, 1);
                uint64_t v52 = v149[0];
              }
              unint64_t v54 = *(void *)(v52 + 16);
              unint64_t v53 = *(void *)(v52 + 24);
              if (v54 >= v53 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
                uint64_t v52 = v149[0];
              }
              *(void *)(v52 + 16) = v54 + 1;
              *(unsigned char *)(v52 + v54 + 32) = v55;
              double v17 = v140;
            }
            --v50;
          }
          while (v50);
        }
        else
        {
          uint64_t v52 = MEMORY[0x1E4FBC860];
        }
        swift_release();
        if (!*(void *)(v52 + 16))
        {
          swift_release();
          uint64_t v42 = v128;
          uint64_t v46 = *(void *)&v139;
          LOBYTE(v43) = v134;
          goto LABEL_52;
        }
        uint64_t v58 = *(unsigned __int8 *)(v52 + 32);
        swift_release();
        LODWORD(v132) = v58 < 4;
        uint64_t v42 = v128;
        uint64_t v46 = *(void *)&v139;
        LOBYTE(v43) = v134;
        if (v58 == v44) {
          goto LABEL_52;
        }
        LOBYTE(v144[0]) = 0x60504030A0201uLL >> (8 * v58);
        LOBYTE(v143[0]) = v41;
        double v59 = 1.59271755e13;
        if (v14 <= 1.59271755e13) {
          double v59 = v14;
        }
        double v60 = fmax(v59, -2.11845067e11);
        uint64_t ObjectType = swift_getObjectType();
        *(double *)unint64_t v149 = v60;
        BOOL v133 = v41;
        uint64_t v62 = v58;
        id v63 = *(uint64_t (**)(double *, double *, uint64_t *, uint64_t, uint64_t))(v46 + 144);
        swift_unknownObjectRetain();
        id v129 = ObjectType;
        uint64_t v64 = v63(v144, v143, v149, ObjectType, v46);
        uint64_t v66 = v65;
        char v68 = v67;
        swift_unknownObjectRelease();
        if (v68)
        {
          unsigned __int8 v44 = v62;
          unint64_t v41 = v133;
          goto LABEL_52;
        }
        uint64_t v125 = v62;
        *(double *)unint64_t v149 = v17;
        v149[1] = v46;
        unint64_t v41 = v133;
        LOBYTE(v147._time) = v133;
        if (v43) {
          Swift::Int v69 = 1;
        }
        else {
          Swift::Int v69 = -1;
        }
        v143[0] = v14;
        unint64_t v39 = (unint64_t)Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v147, v69, (Foundation::Date)v39, (Swift::Bool)v143);
        if (LOBYTE(v144[1]))
        {
          unsigned __int8 v44 = v125;
LABEL_52:
          uint64_t v40 = v131;
          int v45 = (int)v132;
          goto LABEL_53;
        }
        BOOL v105 = v66 - v64;
        if (__OFSUB__(v66, v64)) {
          goto LABEL_159;
        }
        unint64_t v106 = v105 + 1;
        if (__OFADD__(v105, 1)) {
          goto LABEL_160;
        }
        char v123 = v105 + 1;
        unint64_t v124 = v66 - v64;
        if (v106 < 0) {
          goto LABEL_161;
        }
        unint64_t v107 = v144[0];
        unint64_t v108 = -v131;
        unint64_t v109 = __OFSUB__(0, v131);
        LODWORD(v133) = v109;
        id v127 = v46 + 200;
        swift_unknownObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v110 = 0;
        char v126 = 0x60504030A0201uLL >> (8 * v125);
        unint64_t v111 = 1;
        unint64_t v112 = v139;
        char v113 = v106;
        break;
      default:
        goto LABEL_165;
    }
    while (1)
    {
      if (v133) {
        goto LABEL_153;
      }
      v114.Swift::Int value = v108 * v113;
      if ((unsigned __int128)(v108 * (__int128)v113) >> 64 != (v108 * v113) >> 63) {
        goto LABEL_154;
      }
      memset(v149, 0, 40);
      LOBYTE(v149[5]) = 1;
      v149[6] = 0;
      LOBYTE(v149[7]) = 1;
      v149[8] = 0;
      LOBYTE(v149[9]) = 1;
      v149[10] = 0;
      LOBYTE(v149[11]) = 1;
      v149[12] = 0;
      LOBYTE(v149[13]) = 1;
      v149[14] = 0;
      LOBYTE(v149[15]) = 1;
      v149[16] = 0;
      LOBYTE(v149[17]) = 1;
      v149[18] = 0;
      LOBYTE(v149[19]) = 1;
      v149[20] = 0;
      LOBYTE(v149[21]) = 1;
      v149[22] = 0;
      LOBYTE(v149[23]) = 1;
      v149[24] = 0;
      LOBYTE(v149[25]) = 1;
      v149[26] = 0;
      LOBYTE(v149[27]) = 1;
      v149[28] = 0;
      LOBYTE(v149[29]) = 1;
      v149[30] = 0;
      LOBYTE(v149[31]) = 1;
      uint64_t v115 = v136;
      *(unsigned char *)unint64_t v136 = 1;
      v149[32] = 0;
      v149[34] = 0;
      *((unsigned char *)v115 + 16) = 1;
      BYTE1(v149[35]) = 2;
      LOBYTE(v143[0]) = v126;
      v114.is_nil = 0;
      DateComponents.setValue(_:for:)(v114, (Foundation::Calendar::Component)v143);
      memcpy(v144, v149, 0x11AuLL);
      memcpy(v143, v149, 0x11AuLL);
      id v145 = v60;
      id v116 = *(void (**)(Foundation::Date *__return_ptr, double *, double *, void, uint64_t, void))(*(void *)&v112 + 200);
      swift_unknownObjectRetain();
      v116(&v147, v143, &v145, 0, v129, *(void *)&v112);
      double v17 = v140;
      outlined release of DateComponents((uint64_t)v144);
      swift_unknownObjectRelease();
      if ((v148 & 1) == 0) {
        break;
      }
LABEL_129:
      uint64_t v117 = v106;
      if ((v111 & 1) == 0)
      {
        uint64_t v117 = v110 - 1;
        if (v110 < 1) {
          goto LABEL_156;
        }
      }
      if (!v117) {
        goto LABEL_132;
      }
      unint64_t v111 = 0;
      unint64_t v110 = v117;
      char v113 = v117 - 1;
      if (v110 < 1) {
        goto LABEL_155;
      }
    }
    if (v134)
    {
      if (v107 >= v147._time) {
        goto LABEL_133;
      }
      goto LABEL_129;
    }
    if (v147._time < v107 || v13 >= v147._time) {
      goto LABEL_129;
    }
LABEL_133:
    if (v111) {
      goto LABEL_136;
    }
    if (!v110)
    {
LABEL_132:
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v42 = v128;
      uint64_t v46 = *(void *)&v139;
      LOBYTE(v43) = v134;
      id v118 = v131;
      int v45 = (int)v132;
      BOOL v119 = v124;
      goto LABEL_147;
    }
    unint64_t v106 = v110 - 1;
LABEL_136:
    uint64_t v46 = *(void *)&v139;
    v143[0] = v17;
    v143[1] = v139;
    unint64_t v141 = 0x60504030A0201uLL >> (8 * v125);
    if ((unsigned __int128)(v108 * (__int128)v106) >> 64 != (v108 * v106) >> 63) {
      goto LABEL_163;
    }
    char v142 = v14;
    Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)&v141, v108 * v106, v147, (Swift::Bool)&v142);
    int v43 = v134;
    if (v146) {
      goto LABEL_166;
    }
    BOOL v120 = v145;
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v42 = v128;
    int v45 = (int)v132;
    if ((v43 & 1) == 0)
    {
LABEL_141:
      id v118 = v131;
      if (v120 >= v107 && v13 < v120) {
        goto LABEL_143;
      }
      goto LABEL_164;
    }
    id v118 = v131;
    if (v107 < v120)
    {
      __break(1u);
      goto LABEL_141;
    }
LABEL_143:
    LODWORD(v121) = (v106 < v123) & ~v43;
    if (v107 < v120) {
      BOOL v121 = v121;
    }
    else {
      BOOL v121 = 0;
    }
    BOOL v119 = v106 + v121;
LABEL_147:
    if ((unsigned __int128)(v118 * (__int128)v119) >> 64 != (v118 * v119) >> 63) {
      goto LABEL_162;
    }
    unint64_t v41 = 0x60504030A0201uLL >> (8 * v125);
    unsigned __int8 v44 = v125;
    uint64_t v40 = v118 * v119;
LABEL_53:
    *(double *)unint64_t v149 = v17;
    v149[1] = v46;
    LOBYTE(v143[0]) = v41;
    if (__OFSUB__(0, v40))
    {
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
LABEL_162:
      __break(1u);
LABEL_163:
      __break(1u);
LABEL_164:
      __break(1u);
      __break(1u);
LABEL_165:
      __break(1u);
LABEL_166:
      __break(1u);
      swift_release();
      __break(1u);
      JUMPOUT(0x181D91310);
    }
    v144[0] = v14;
    *(Foundation::Date_optional *)(&result - 1) = Calendar.date(byAdding:value:to:wrappingComponents:)((Foundation::Calendar::Component)v143, -v40, (Foundation::Date)v39, (Swift::Bool)v144);
    if (!v45)
    {
      if ((v148 & 1) == 0)
      {
        double time = v147._time;
        uint64_t v73 = *(void *)(static ICURelativeDateFormatter.sortedAllowedComponents + 16);
        if (!v73) {
          goto LABEL_78;
        }
        uint64_t v74 = (unsigned __int8 *)(static ICURelativeDateFormatter.sortedAllowedComponents + 32);
        do
        {
          int v77 = *v74++;
          int v76 = v77;
          if (v77 == 6)
          {
            if (v44 < 6u) {
              goto LABEL_68;
            }
          }
          else if (v76 == 5 && v44 < 5u)
          {
LABEL_68:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Calendar.Component>);
            Swift::Bool v78 = (unsigned __int8 *)swift_allocObject();
            *((_OWORD *)v78 + 1) = xmmword_182106040;
            v78[32] = v76;
            v78[33] = 13;
            goto LABEL_84;
          }
          --v73;
        }
        while (v73);
        Swift::Bool v78 = (unsigned __int8 *)&outlined read-only object #0 of Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:);
        goto LABEL_84;
      }
      goto LABEL_82;
    }
    double time = v147._time;
    char v71 = 1;
    if (v148)
    {
      unint64_t v72 = v41;
    }
    else
    {
      v143[0] = v147._time;
      unint64_t v72 = v41;
      LOBYTE(v145) = v41;
      *(double *)unint64_t v149 = v17;
      v149[1] = v46;
      Date.aligned(to:of:in:)((v43 & 1) == 0, (char *)&v145, (uint64_t)v149, (uint64_t)v144);
      double time = v144[0];
      char v71 = LOBYTE(v144[1]);
    }
    *(void *)&v144[0] = 0x2000;
    double v79 = 1.59271755e13;
    if (v14 <= 1.59271755e13) {
      double v79 = v14;
    }
    double v80 = fmax(v79, -2.11845067e11);
    uint64_t v81 = swift_getObjectType();
    v143[0] = v80;
    uint64_t v82 = *(void (**)(uint64_t *__return_ptr, double *, double *, uint64_t, uint64_t))(v46 + 192);
    swift_unknownObjectRetain();
    v82(v149, v144, v143, v81, v46);
    double v17 = v140;
    outlined release of DateComponents((uint64_t)v149);
    uint64_t result = swift_unknownObjectRelease();
    if ((v149[21] & 1) == 0)
    {
      Swift::String v83 = v149[20];
      if (v43) {
        goto LABEL_80;
      }
LABEL_74:
      uint64_t v46 = *(void *)&v139;
      unint64_t v41 = v72;
      if (v71)
      {
LABEL_77:
        if ((v71 & 1) == 0) {
          goto LABEL_78;
        }
LABEL_82:
        *uint64_t v42 = 0.0;
        uint64_t v86 = 2;
        goto LABEL_111;
      }
      int v84 = __OFADD__(v83, -1000000000);
      uint64_t v85 = v83 - 1000000000;
      if (!v84)
      {
        double time = (double)v85 * 0.000000001 + time;
        goto LABEL_77;
      }
      goto LABEL_158;
    }
    Swift::String v83 = 0;
    if ((v43 & 1) == 0) {
      goto LABEL_74;
    }
LABEL_80:
    uint64_t v46 = *(void *)&v139;
    unint64_t v41 = v72;
    if (v71) {
      goto LABEL_82;
    }
    double time = (double)v83 * 0.000000001 + time;
LABEL_78:
    Swift::Bool v78 = (unsigned __int8 *)&outlined read-only object #0 of Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:);
LABEL_84:
    uint64_t v87 = -1;
    if ((v43 & 1) == 0) {
      uint64_t v87 = 1;
    }
    unint64_t v137 = v87;
    id v88 = *((void *)v78 + 2);
    if (v88)
    {
      BOOL v133 = v41;
      unint64_t v138 = swift_getObjectType();
      Swift::String v89 = *(uint64_t (**)(double *, double *, uint64_t *, uint64_t, uint64_t))(v46 + 144);
      if ((v43 ^ v135)) {
        uint64_t v90 = 1;
      }
      else {
        uint64_t v90 = -1;
      }
      char v131 = v90;
      BOOL v132 = v89;
      if (v14 <= 1.59271755e13) {
        Swift::String v91 = v14;
      }
      else {
        Swift::String v91 = 1.59271755e13;
      }
      stat_optional v92 = fmax(v91, -2.11845067e11);
      char v134 = v46 + 144;
      uint64_t v130 = v46 + 200;
      swift_bridgeObjectRetain();
      a5 = 0;
      id v129 = v88;
      while (1)
      {
        stat_optional v93 = v78;
        uint64_t v10 = v78[a5 + 32];
        int v94 = v10 != 13 || v88 == 1;
        LOBYTE(v144[0]) = v78[a5 + 32];
        if (v94) {
          unsigned __int16 v95 = v137;
        }
        else {
          unsigned __int16 v95 = v131;
        }
        LOBYTE(v143[0]) = v133;
        *(double *)unint64_t v149 = v92;
        swift_unknownObjectRetain();
        uint64_t v96 = v132(v144, v143, v149, v138, v46);
        double v12 = v97;
        uint64_t v9 = v98;
        swift_unknownObjectRelease();
        if (v9)
        {
LABEL_112:
          uint64_t result = swift_bridgeObjectRelease_n();
          uint64_t v104 = v128;
          *uint64_t v128 = time;
          *((unsigned char *)v104 + 8) = 1;
          return result;
        }
        int v99 = (uint64_t)&v12[-v96];
        if (__OFSUB__(v12, v96)) {
          break;
        }
        unsigned __int16 v100 = v95 * v99;
        if ((unsigned __int128)(v95 * (__int128)v99) >> 64 != (v95 * v99) >> 63) {
          goto LABEL_150;
        }
        memset(v149, 0, 40);
        LOBYTE(v149[5]) = 1;
        v149[6] = 0;
        LOBYTE(v149[7]) = 1;
        v149[8] = 0;
        LOBYTE(v149[9]) = 1;
        v149[10] = 0;
        LOBYTE(v149[11]) = 1;
        v149[12] = 0;
        LOBYTE(v149[13]) = 1;
        v149[14] = 0;
        LOBYTE(v149[15]) = 1;
        v149[16] = 0;
        LOBYTE(v149[17]) = 1;
        v149[18] = 0;
        LOBYTE(v149[19]) = 1;
        v149[20] = 0;
        LOBYTE(v149[21]) = 1;
        v149[22] = 0;
        LOBYTE(v149[23]) = 1;
        v149[24] = 0;
        LOBYTE(v149[25]) = 1;
        v149[26] = 0;
        LOBYTE(v149[27]) = 1;
        v149[28] = 0;
        LOBYTE(v149[29]) = 1;
        v149[30] = 0;
        LOBYTE(v149[31]) = 1;
        uint64_t v101 = v136;
        *(unsigned char *)unint64_t v136 = 1;
        v149[32] = 0;
        v149[34] = 0;
        *((unsigned char *)v101 + 16) = 1;
        BYTE1(v149[35]) = 2;
        if ((v10 - 14) <= 2) {
          goto LABEL_112;
        }
        v157.Swift::Int value = v100 / 2;
        LOBYTE(v144[0]) = v10;
        v157.is_nil = 0;
        DateComponents.setValue(_:for:)(v157, (Foundation::Calendar::Component)v144);
        memcpy(v144, v149, 0x11AuLL);
        int v102 = time <= 1.59271755e13 ? time : 1.59271755e13;
        memcpy(v143, v149, 0x11AuLL);
        char v142 = fmax(v102, -2.11845067e11);
        uint64_t v46 = *(void *)&v139;
        double v17 = v140;
        uint64_t v103 = *(void (**)(double *__return_ptr, double *, double *, void, uint64_t, uint64_t))(*(void *)&v139 + 200);
        swift_unknownObjectRetain();
        v103(&v145, v143, &v142, 0, v138, v46);
        outlined release of DateComponents((uint64_t)v144);
        swift_unknownObjectRelease();
        Swift::Bool v78 = v93;
        if (v146) {
          goto LABEL_112;
        }
        ++a5;
        double time = v145;
        id v88 = v129;
        if (v129 == a5)
        {
          swift_bridgeObjectRelease();
          uint64_t v42 = v128;
          goto LABEL_110;
        }
      }
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      swift_once();
      continue;
    }
    break;
  }
LABEL_110:
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v86 = v135 & ((v13 >= v14) ^ (time < v14));
  *uint64_t v42 = time;
LABEL_111:
  *((unsigned char *)v42 + 8) = v86;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.discreteInput(after:)(Foundation::Date after)
{
  uint64_t v4 = v2;
  double v5 = *v1;
  __int16 v6 = *(_WORD *)(v3 + 1);
  uint64_t v7 = *((void *)v3 + 5);
  double v8 = *((double *)v3 + 6);
  char v15 = *v3;
  __int16 v16 = v6;
  long long v9 = *(_OWORD *)(v3 + 24);
  long long v17 = *(_OWORD *)(v3 + 8);
  long long v18 = v9;
  uint64_t v19 = v7;
  double v20 = v8;
  double v13 = v8;
  double v14 = v5;
  char v10 = Date.AnchoredRelativeFormatStyle.bound(for:relativeTo:movingDown:countingTowardZero:)(&v14, &v13, 0, v5 < v8, (uint64_t)&v21);
  int v11 = v22;
  if (v22 == 2)
  {
    double v12 = 0.0;
  }
  else
  {
    double v12 = v21;
    if (v22)
    {
      double v12 = v21 + 0.0;
      if (v21 + 0.0 < INFINITY) {
        *(void *)&v12 += (*(uint64_t *)&v12 >> 63) | 1;
      }
    }
  }
  *(double *)uint64_t v4 = v12;
  *(unsigned char *)(v4 + 8) = v11 == 2;
  result.Swift::Int value = *(Foundation::Date *)&v12;
  result.is_nil = v10;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.input(before:)(Foundation::Date before)
{
  double v4 = *v1;
  double v5 = *(double *)(v3 + 48);
  double v6 = 0.0 - *v1;
  if (v6 < INFINITY) {
    *(void *)&double v6 = ((COERCE__INT64(0.0 - *v1) >> 63) | 1) + COERCE__INT64(0.0 - *v1);
  }
  double v7 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = 0.0 - v5;
  if (0.0 - v5 < INFINITY) {
    *(void *)&double v8 = ((COERCE__INT64(0.0 - v5) >> 63) | 1) + COERCE__INT64(0.0 - v5);
  }
  double v9 = (v5 + 978307200.0) * -1000.0 + 0.0;
  if (v9 < INFINITY) {
    *(void *)&v9 += (*(uint64_t *)&v9 >> 63) | 1;
  }
  double v10 = fabs(v5 + v8);
  double v11 = vabdd_f64(v4, -978307200.0 - v7 / 1000.0);
  double v12 = fabs(v4 + v6);
  double v13 = vabdd_f64(v5, -978307200.0 - v9 / 1000.0);
  double v14 = v4 - (v12 + v11 + v10 + v13 + v12 + v11 + v10 + v13);
  double v15 = v14;
  if (v14 >= v4) {
    double v15 = 0.0;
  }
  *(double *)uint64_t v2 = v15;
  *(unsigned char *)(v2 + 8) = v14 >= v4;
  result.Swift::Int value = *(Foundation::Date *)&v4;
  result.is_nil = (char)v1;
  return result;
}

Foundation::Date_optional __swiftcall Date.AnchoredRelativeFormatStyle.input(after:)(Foundation::Date after)
{
  double v4 = *v1;
  double v5 = *(double *)(v3 + 48);
  double v6 = 0.0 - *v1;
  if (v6 < INFINITY) {
    *(void *)&double v6 = ((COERCE__INT64(0.0 - *v1) >> 63) | 1) + COERCE__INT64(0.0 - *v1);
  }
  double v7 = (v4 + 978307200.0) * -1000.0 + 0.0;
  if (v7 < INFINITY) {
    *(void *)&v7 += (*(uint64_t *)&v7 >> 63) | 1;
  }
  double v8 = 0.0 - v5;
  if (0.0 - v5 < INFINITY) {
    *(void *)&double v8 = ((COERCE__INT64(0.0 - v5) >> 63) | 1) + COERCE__INT64(0.0 - v5);
  }
  double v9 = (v5 + 978307200.0) * -1000.0 + 0.0;
  if (v9 < INFINITY) {
    *(void *)&v9 += (*(uint64_t *)&v9 >> 63) | 1;
  }
  double v10 = fabs(v5 + v8);
  double v11 = vabdd_f64(v4, -978307200.0 - v7 / 1000.0);
  double v12 = fabs(v4 + v6);
  double v13 = vabdd_f64(v5, -978307200.0 - v9 / 1000.0);
  double v14 = v4 + v12 + v11 + v10 + v13 + v12 + v11 + v10 + v13;
  double v15 = v14;
  if (v4 >= v14) {
    double v15 = 0.0;
  }
  *(double *)uint64_t v2 = v15;
  *(unsigned char *)(v2 + 8) = v4 >= v14;
  result.Swift::Int value = *(Foundation::Date *)&v4;
  result.is_nil = (char)v1;
  return result;
}

void *Date.aligned(to:of:in:)@<X0>(char a1@<W0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 + 8);
  double v8 = *v4;
  if (*v4 > 1.59271755e13) {
    double v8 = 1.59271755e13;
  }
  char v15 = *a2;
  double v9 = fmax(v8, -2.11845067e11);
  uint64_t ObjectType = swift_getObjectType();
  double v14 = v9;
  Foundation::Date_optional result = (*(void *(**)(double *__return_ptr, char *, double *, uint64_t, uint64_t))(v7 + 160))(&v16, &v15, &v14, ObjectType, v7);
  char v12 = v18;
  if (v18)
  {
    *(void *)a4 = 0;
  }
  else if (a1)
  {
    double v13 = 0.0 - v17;
    if (0.0 - v17 < INFINITY) {
      *(void *)&v13 += (*(uint64_t *)&v13 >> 63) | 1;
    }
    *(double *)a4 = v16 - v13;
  }
  else
  {
    *(double *)a4 = v16;
  }
  *(unsigned char *)(a4 + 8) = v12;
  return result;
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(Foundation::Date *a1@<X0>, Swift::String *a2@<X8>)
{
  Swift::String v5 = Date.RelativeFormatStyle._format(_:refDate:)(*(Foundation::Date *)&a1->_time, v2[6]);
  uint64_t result = v5._countAndFlagsBits;
  *a2 = v5;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.AnchoredRelativeFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int16 v3 = *(_WORD *)(v2 + 1);
  uint64_t v4 = *(void *)(v2 + 40);
  uint64_t v5 = *(void *)(v2 + 48);
  *(unsigned char *)a2 = *(unsigned char *)v2;
  *(_WORD *)(a2 + 1) = v3;
  *(_OWORD *)(a2 + 8) = *a1;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t specialized static Date.AnchoredRelativeFormatStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result = 0;
  if (((*a1 ^ *a2) & 1) == 0 && a1[1] == a2[1] && a1[2] == a2[2])
  {
    uint64_t v4 = *((void *)a1 + 5);
    double v5 = *((double *)a1 + 6);
    long long v13 = *(_OWORD *)(a2 + 24);
    long long v14 = *(_OWORD *)(a1 + 24);
    uint64_t v6 = *((void *)a2 + 5);
    double v7 = *((double *)a2 + 6);
    uint64_t v9 = *((void *)a2 + 1);
    uint64_t v8 = *((void *)a2 + 2);
    uint64_t v11 = *((void *)a1 + 1);
    uint64_t v10 = *((void *)a1 + 2);
    *(void *)&long long v16 = v11;
    *((void *)&v16 + 1) = v10;
    *(void *)&long long v15 = v9;
    *((void *)&v15 + 1) = v8;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    if ((specialized static Locale.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) != 0
      && (long long v15 = v13, v16 = v14, (specialized static Calendar.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) != 0))
    {
      unsigned __int8 v12 = specialized static Set.== infix(_:_:)(v4, v6);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return v12 & (v5 == v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle.CodingKeys and conformance Date.AnchoredRelativeFormatStyle.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle;
  if (!lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.AnchoredRelativeFormatStyle(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  a1[2] = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  unint64_t result = lazy protocol witness table accessor for type Date.AnchoredRelativeFormatStyle and conformance Date.AnchoredRelativeFormatStyle();
  a1[3] = result;
  return result;
}

unsigned char *sub_181D92384@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_181D92390(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181D9239C@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

unsigned char *sub_181D923A8(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 1) = *result;
  return result;
}

uint64_t sub_181D923B4@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 2);
  return result;
}

unsigned char *sub_181D923C0(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 2) = *result;
  return result;
}

uint64_t sub_181D923CC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 8);
  return swift_unknownObjectRetain();
}

__n128 sub_181D923DC(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_181D92428@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = *(_OWORD *)(a1 + 24);
  return swift_unknownObjectRetain();
}

__n128 sub_181D92438(__n128 *a1, uint64_t a2)
{
  __n128 v4 = *a1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  __n128 result = v4;
  *(__n128 *)(a2 + 24) = v4;
  return result;
}

uint64_t sub_181D92484@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 40);
  return swift_bridgeObjectRetain();
}

uint64_t sub_181D92490(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a2 + 40) = v3;
  return result;
}

uint64_t initializeWithCopy for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for Date.AnchoredRelativeFormatStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.AnchoredRelativeFormatStyle()
{
  return &type metadata for Date.AnchoredRelativeFormatStyle;
}

unsigned char *storeEnumTagSinglePayload for Date.AnchoredRelativeFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D927C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.AnchoredRelativeFormatStyle.CodingKeys()
{
  return &unk_1ECA49058;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v42 = a2 + 104;
  int v43 = (uint64_t *)(a2 + 96);
  uint64_t v40 = a2 + 168;
  unint64_t v41 = (uint64_t *)(a2 + 160);
  unsigned int v38 = a2 + 280;
  unint64_t v39 = (uint64_t *)(a2 + 272);
  uint64_t v36 = a2 + 264;
  uint64_t v37 = (uint64_t *)(a2 + 256);
  uint64_t v34 = a2 + 248;
  char v35 = (uint64_t *)(a2 + 240);
  uint64_t v32 = a2 + 216;
  uint64_t v33 = (uint64_t *)(a2 + 208);
  char v30 = a2 + 200;
  Swift::Int v31 = (uint64_t *)(a2 + 192);
  uint64_t v28 = a2 + 184;
  uint64_t v29 = (uint64_t *)(a2 + 176);
  Swift::Int v26 = a2 + 152;
  Swift::Int v27 = (uint64_t *)(a2 + 144);
  double v24 = a2 + 136;
  double v25 = (uint64_t *)(a2 + 128);
  unsigned __int8 v22 = a2 + 120;
  unsigned int v23 = (uint64_t *)(a2 + 112);
  double v20 = a2 + 88;
  double v21 = (uint64_t *)(a2 + 80);
  char v18 = a2 + 72;
  uint64_t v19 = (uint64_t *)(a2 + 64);
  long long v16 = a2 + 56;
  double v17 = (uint64_t *)(a2 + 48);
  unsigned int v4 = (uint64_t *)(a2 + 32);
  uint64_t v5 = a2 + 40;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  double v7 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v44 = v2;
  while (2)
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + v6++ + 32);
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    switch(v9)
    {
      case 1:
        uint64_t v10 = v17;
        if ((*v16 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 2:
        uint64_t v10 = v19;
        if ((*v18 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 3:
        uint64_t v10 = v21;
        if ((*v20 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 4:
        uint64_t v10 = v23;
        if ((*v22 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 5:
        uint64_t v10 = v25;
        if ((*v24 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 6:
        uint64_t v10 = v27;
        if ((*v26 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 7:
        uint64_t v10 = v29;
        if ((*v28 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 8:
        uint64_t v10 = v31;
        if ((*v30 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 9:
        uint64_t v10 = v33;
        if ((*v32 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 10:
        uint64_t v10 = v35;
        if ((*v34 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 11:
        uint64_t v10 = v37;
        if ((*v36 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 12:
        uint64_t v10 = v39;
        if ((*v38 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_4;
      case 13:
        uint64_t v11 = v40;
        uint64_t v10 = v41;
        goto LABEL_31;
      case 14:
      case 15:
      case 16:
        goto LABEL_4;
      case 17:
        uint64_t v10 = v43;
        if (*v42) {
          goto LABEL_4;
        }
        goto LABEL_32;
      default:
LABEL_31:
        if ((*v11 & 1) == 0)
        {
LABEL_32:
          uint64_t v12 = *v10;
          if (*v10)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              double v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
            }
            unint64_t v14 = v7[2];
            unint64_t v13 = v7[3];
            if (v14 >= v13 >> 1) {
              double v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v7);
            }
            uint64_t v7[2] = v14 + 1;
            uint64_t v8 = &v7[2 * v14];
            *((unsigned char *)v8 + 32) = v9;
            v8[5] = v12;
            uint64_t v2 = v44;
          }
        }
LABEL_4:
        if (v2 != v6) {
          continue;
        }
        swift_bridgeObjectRelease();
        break;
    }
    return v7;
  }
}

uint64_t specialized Date.AnchoredRelativeFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x79745372656E6E69 && a2 == 0xEA0000000000656CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F68636E61 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a4;
  uint64_t v9[3] = a2;
  v9[4] = a3;
  v11[4] = partial apply for closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:);
  v11[5] = v9;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  void v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> ();
  v11[3] = &block_descriptor_14;
  uint64_t v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_registerUndoWithTarget_handler_, a1, v10);
  _Block_release(v10);
}

uint64_t closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1, void (*a2)())
{
  outlined init with copy of Any(a1, (uint64_t)v4);
  swift_dynamicCast();
  a2();
  return swift_unknownObjectRelease();
}

uint64_t sub_181D93058()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(uint64_t a1)
{
  return closure #1 in NSUndoManager.registerUndo<A>(withTarget:handler:)(a1, *(void (**)())(v1 + 24));
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Any) -> ()(uint64_t a1, uint64_t a2)
{
  int v3 = *(void (**)(void *))(a1 + 32);
  v5[3] = swift_getObjectType();
  v5[0] = a2;
  swift_retain();
  swift_unknownObjectRetain();
  v3(v5);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t getEnumTagSinglePayload for NSDecimal.DecimalParseResult(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NSDecimal.DecimalParseResult(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

uint64_t getEnumTag for NSDecimal.DecimalParseResult(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for NSDecimal.DecimalParseResult(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 32) = 1;
  }
  else
  {
    *(unsigned char *)(result + 32) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for NSDecimal.DecimalParseResult()
{
  return &type metadata for NSDecimal.DecimalParseResult;
}

uint64_t dispatch thunk of ParseableFormatStyle.parseStrategy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t __DataStorage.__allocating_init(immutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_bytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a2;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(mutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_mutableBytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a2;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(customReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_bytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a2;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

uint64_t __DataStorage.__allocating_init(customMutableReference:offset:)(void *a1, uint64_t a2)
{
  id v3 = a1;
  id v4 = objc_msgSend(v3, sel_mutableBytes);
  id v5 = objc_msgSend(v3, sel_length);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = a2;
  *(unsigned char *)(result + 64) = 0;
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v5;
  *(void *)(result + 48) = destructiveProjectEnumData for PredicateCodableError;
  *(void *)(result + 56) = v6;
  return result;
}

id __NSSwiftData.init(base64Encoded:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v9, sel_initWithBase64EncodedString_options_, v6, a3);
  swift_unknownObjectRelease();
  if (v7) {

  }
  return v7;
}

id __NSSwiftData.init(base64Encoded:options:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  id v4 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  id v5 = v3;
  uint64_t v8 = a1;
  switch(a2 >> 62)
  {
    case 1uLL:
      a1 = (int)a1;
      if (v8 >> 32 < (int)v8) {
        __break(1u);
      }
      objc_super v9 = __DataStorage.bridgedReference(_:)(a1, v8 >> 32);
      goto LABEL_7;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      uint64_t v12 = __DataStorage.bridgedReference(_:)(v10, v11);
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      objc_super v9 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_init);
      goto LABEL_7;
    default:
      uint64_t v17 = a1;
      __int16 v18 = a2;
      char v19 = BYTE2(a2);
      char v20 = BYTE3(a2);
      char v21 = BYTE4(a2);
      char v22 = BYTE5(a2);
      objc_super v9 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9B8]), sel_initWithBytes_length_, &v17, BYTE6(a2));
LABEL_7:
      uint64_t v12 = v9;
LABEL_8:
      unint64_t v13 = (objc_class *)type metadata accessor for __NSSwiftData();
      v23.receiver = v5;
      v23.super_class = v13;
      id v14 = objc_msgSendSuper2(&v23, sel_initWithBase64EncodedData_options_, v12, a3);
      outlined consume of Data._Representation(v8, a2);
      id v15 = v14;

      if (v15) {
      return v15;
      }
  }
}

id @objc __NSSwiftData.init(bytes:length:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  *(void *)&a1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  uint64_t v8 = &a1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  unsigned char v8[16] = 1;
  v10.receiver = a1;
  v10.super_class = (Class)type metadata accessor for __NSSwiftData();
  return objc_msgSendSuper2(&v10, *a5, a3, a4);
}

id __NSSwiftData.init(bytesNoCopy:length:deallocator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  uint64_t v8 = &v4[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)uint64_t v8 = 0;
  *((void *)v8 + 1) = 0;
  unsigned char v8[16] = 1;
  if (a3)
  {
    v13[4] = a3;
    v13[5] = a4;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1107296256;
    void v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ();
    v13[3] = &block_descriptor_15;
    objc_super v9 = _Block_copy(v13);
    swift_retain();
    swift_release();
  }
  else
  {
    objc_super v9 = 0;
  }
  objc_super v10 = (objc_class *)type metadata accessor for __NSSwiftData();
  v14.receiver = v4;
  v14.super_class = v10;
  id v11 = objc_msgSendSuper2(&v14, sel_initWithBytesNoCopy_length_deallocator_, a1, a2, v9);
  outlined consume of (@escaping @callee_guaranteed (@in_guaranteed URL, @guaranteed Error) -> (@unowned Bool))?(a3);
  _Block_release(v9);
  return v11;
}

id __NSSwiftData.init(contentsOfFile:options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v12[0] = 0;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v11, sel_initWithContentsOfFile_options_error_, v6, a3, v12);
  swift_unknownObjectRelease();
  if (v7)
  {
    id v8 = v12[0];
  }
  else
  {
    if (v12[0])
    {
      v12[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v9 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v7;
}

id __NSSwiftData.init(contentsOf:options:)(void **a1, uint64_t a2)
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  id v4 = *a1;
  *(void *)&v2[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  id v5 = &v2[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  swift_release();
  swift_release();
  v11[0] = 0;
  v10.receiver = v2;
  v10.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v6 = objc_msgSendSuper2(&v10, sel_initWithContentsOfURL_options_error_, v4, a2, v11);

  if (v6)
  {
    id v7 = v11[0];
  }
  else
  {
    if (v11[0])
    {
      v11[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v8 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v6;
}

id __NSSwiftData.init(contentsOfMappedFile:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v6 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v9, *a3, v6);
  swift_unknownObjectRelease();
  if (v7) {

  }
  return v7;
}

id @objc __NSSwiftData.init(contentsOfMappedFile:)(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  return __NSSwiftData.init(contentsOfMappedFile:)((uint64_t)v5, v6, a4);
}

id __NSSwiftData.init(contentsOf:)(void **a1)
{
  BOOL v2 = *a1;
  *(void *)&v1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  id v3 = &v1[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  swift_release();
  swift_release();
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v4 = objc_msgSendSuper2(&v6, sel_initWithContentsOfURL_, v2);

  if (v4) {
  return v4;
  }
}

id __NSSwiftData.init(contentsOfFile:error:)(uint64_t a1, uint64_t a2, SEL *a3)
{
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  *(void *)&v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__backing] = 0;
  id v5 = &v3[OBJC_IVAR____TtC10Foundation13__NSSwiftData__range];
  *(void *)id v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  if (a2)
  {
    objc_super v6 = (void *)String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
  }
  else
  {
    objc_super v6 = 0;
  }
  v12[0] = 0;
  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for __NSSwiftData();
  id v7 = objc_msgSendSuper2(&v11, *a3, v6, v12);

  if (v7)
  {
    id v8 = v12[0];
  }
  else
  {
    if (v12[0])
    {
      v12[0];
    }
    else
    {
      if (one-time initialization token for _nilObjCError != -1) {
        swift_once();
      }
      id v9 = (id)_nilObjCError;
    }
    swift_willThrow();
  }
  return v7;
}

id @objc __NSSwiftData.init(contentsOfFile:error:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, SEL *a5)
{
  if (a3)
  {
    id v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  }
  else
  {
    id v6 = 0;
    uint64_t v7 = 0;
  }
  return __NSSwiftData.init(contentsOfFile:error:)((uint64_t)v6, v7, a5);
}

id __NSSwiftData.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for __NSSwiftData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static Data._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t a2)
{
  outlined consume of Data?(*(void *)a2, *(void *)(a2 + 8));
  id result = specialized Data.init(referencing:)(a1);
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  return result;
}

void protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance Data(void *a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    id v3 = a1;
    id v4 = specialized Data.init(referencing:)(v3);
    unint64_t v6 = v5;
  }
  else
  {
    id v4 = 0;
    unint64_t v6 = 0xC000000000000000;
  }
  *a2 = v4;
  a2[1] = v6;
}

NSData __swiftcall Data.InlineSlice.bridgedReference()()
{
  Class isa = result.super.isa;
  result.super.Class isa = (Class)SLODWORD(result.super.isa);
  if ((uint64_t)isa >> 32 >= SLODWORD(result.super.isa)) {
    return (NSData)__DataStorage.bridgedReference(_:)(SLODWORD(result.super.isa), (uint64_t)isa >> 32);
  }
  __break(1u);
  return result;
}

NSData __swiftcall Data.LargeSlice.bridgedReference()()
{
  return (NSData)__DataStorage.bridgedReference(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t NSData._toCustomAnyHashable()()
{
  id v1 = v0;
  specialized Data.init(referencing:)(v1);

  lazy protocol witness table accessor for type Data and conformance Data();
  return AnyHashable.init<A>(_:)();
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSData()
{
  id v1 = *v0;
  specialized Data.init(referencing:)(v1);

  lazy protocol witness table accessor for type Data and conformance Data();
  AnyHashable.init<A>(_:)();
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

uint64_t sub_181D945E8()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t instantiation function for generic protocol witness table for Data(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[2] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[3] = lazy protocol witness table accessor for type Data and conformance Data();
  unint64_t result = lazy protocol witness table accessor for type Data and conformance Data();
  a1[4] = result;
  return result;
}

{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type Data and conformance Data();
  a1[2] = lazy protocol witness table accessor for type Data and conformance Data();
  unint64_t result = lazy protocol witness table accessor for type Data and conformance Data();
  a1[3] = result;
  return result;
}

uint64_t sub_181D947B0()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned UnsafeMutableRawPointer, @unowned Int) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t AsyncCharacterSequence.AsyncIterator.remaining.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t AsyncCharacterSequence.AsyncIterator.remaining.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator();
  id v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*AsyncCharacterSequence.AsyncIterator.remaining.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncCharacterSequence.AsyncIterator.accumulator.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 36));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AsyncCharacterSequence.AsyncIterator.accumulator.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)(v3 + *(int *)(a3 + 36));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*AsyncCharacterSequence.AsyncIterator.accumulator.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()(uint64_t a1)
{
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = v1;
  return MEMORY[0x1F4188298](AsyncCharacterSequence.AsyncIterator.next(), 0, 0);
}

uint64_t AsyncCharacterSequence.AsyncIterator.next()()
{
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v0 + 64) = *(void *)(v1 + 16);
  *(void *)(v0 + 72) = *(void *)(v1 + 24);
  *(_DWORD *)(v0 + 176) = *(_DWORD *)(type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator() + 36);
  uint64_t v2 = 1;
  do
  {
    id v8 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if (v8[1])
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      *(void *)(v0 + 112) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(void *)(v0 + 120) = AssociatedConformanceWitness;
      id v15 = (void *)swift_task_alloc();
      *(void *)(v0 + 128) = v15;
      *id v15 = v0;
      v15[1] = AsyncCharacterSequence.AsyncIterator.next();
      uint64_t v16 = v0 + 190;
      goto LABEL_25;
    }
    char v9 = *v8;
    *(_WORD *)id v8 = 256;
    if ((v9 & 0xE0) == 0xC0) {
      goto LABEL_24;
    }
    if ((v9 & 0xF0) == 0xE0)
    {
      uint64_t v2 = 2;
LABEL_24:
      *(unsigned char *)(v0 + 184) = v9;
      *(_WORD *)(v0 + 185) = 0;
      *(unsigned char *)(v0 + 187) = 0;
      *(void *)(v0 + 80) = v2;
      *(void *)(v0 + 88) = 0;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v17 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v17;
      *uint64_t v17 = v0;
      v17[1] = AsyncCharacterSequence.AsyncIterator.next();
      uint64_t v16 = v0 + 192;
LABEL_25:
      uint64_t v18 = AssociatedTypeWitness;
      uint64_t v19 = AssociatedConformanceWitness;
      return MEMORY[0x1F4187C78](v16, v18, v19);
    }
    if ((v9 & 0xF8) == 0xF0)
    {
      uint64_t v2 = 3;
      goto LABEL_24;
    }
    if ((v9 & 0x80) == 0)
    {
      *(unsigned char *)(v0 + 184) = v9;
      *(_WORD *)(v0 + 185) = 0;
      *(unsigned char *)(v0 + 187) = 0;
      uint64_t v10 = static String._fromUTF8Repairing(_:)();
      if ((v11 & 0x2000000000000000) != 0) {
        uint64_t v12 = HIBYTE(v11) & 0xF;
      }
      else {
        uint64_t v12 = v10 & 0xFFFFFFFFFFFFLL;
      }
      if (!v12) {
        goto LABEL_33;
      }
      if ((v11 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v11 & 0x2000000000000000) != 0)
        {
          *(void *)(v0 + 16) = v10;
          *(void *)(v0 + 24) = v11 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v10 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v3 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
    uint64_t v4 = v3[1];
    *(void *)(v0 + 32) = *v3;
    *(void *)(v0 + 40) = v4;
    String.UnicodeScalarView.append(_:)();
    uint64_t v5 = *(void *)(v0 + 32);
    unint64_t v6 = *(void *)(v0 + 40);
    *uint64_t v3 = v5;
    v3[1] = v6;
    swift_bridgeObjectRetain();
    uint64_t v7 = String.count.getter();
    swift_bridgeObjectRelease();
  }
  while (v7 < 2);
  uint64_t v20 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0) {
    uint64_t v20 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v20)
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v16 = specialized Collection.first.getter(v5, v6);
  if (v18) {
    goto LABEL_38;
  }
  __break(1u);
LABEL_33:
  swift_bridgeObjectRelease();
  char v21 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
  uint64_t v23 = *v21;
  unint64_t v22 = v21[1];
  swift_bridgeObjectRetain();
  uint64_t v24 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v24 <= 0)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
LABEL_39:
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v28(v26, v27);
  }
  uint64_t v25 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v25 = v23 & 0xFFFFFFFFFFFFLL;
  }
  if (!v25) {
LABEL_44:
  }
    __break(1u);
  uint64_t v16 = specialized Collection.first.getter(v23, v22);
  if (v18)
  {
LABEL_38:
    uint64_t v26 = v16;
    uint64_t v27 = v18;
    specialized RangeReplaceableCollection.removeFirst(_:)(1);
    goto LABEL_39;
  }
  __break(1u);
  return MEMORY[0x1F4187C78](v16, v18, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncCharacterSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncCharacterSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;

  uint64_t v1 = *(unsigned char *)(v0 + 192);
  if ((*(unsigned char *)(v0 + 193) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      uint64_t v2 = *(void *)(v0 + 80);
      uint64_t v3 = *(void *)(v0 + 88) + 1;
      *(unsigned char *)(v0 + 184 + v3) = v1;
      if (v3 != v2) {
        goto LABEL_57;
      }
    }
    else
    {
      uint64_t v4 = (unsigned char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
      *uint64_t v4 = v1;
      v4[1] = 0;
    }
  }
  uint64_t v5 = static String._fromUTF8Repairing(_:)();
  uint64_t v7 = v6;
  id v8 = (v6 & 0x2000000000000000) == 0;
  if ((v6 & 0x2000000000000000) != 0) {
    char v9 = HIBYTE(v6) & 0xF;
  }
  else {
    char v9 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v25 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
    uint64_t v27 = *v25;
    uint64_t v26 = v25[1];
    swift_bridgeObjectRetain();
    uint64_t v28 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v28 > 0)
    {
      uint64_t v29 = HIBYTE(v26) & 0xF;
      if ((v26 & 0x2000000000000000) == 0) {
        uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
      }
      if (!v29)
      {
        __break(1u);
        goto LABEL_62;
      }
      uint64_t v30 = specialized Collection.first.getter(v27, v26);
      if (v31) {
        goto LABEL_48;
      }
      __break(1u);
    }
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    goto LABEL_49;
  }
  uint64_t v10 = v5;
  while (1)
  {
    if ((v7 & 0x1000000000000000) != 0)
    {
      _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if (v8)
      {
        if ((v10 & 0x1000000000000000) == 0) {
          _StringObject.sharedUTF8.getter();
        }
      }
      else
      {
        *(void *)(v0 + 16) = v10;
        *(void *)(v0 + 24) = v7 & 0xFFFFFFFFFFFFFFLL;
      }
      _decodeScalar(_:startingAt:)();
    }
    swift_bridgeObjectRelease();
    unint64_t v11 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
    uint64_t v12 = v11[1];
    *(void *)(v0 + 32) = *v11;
    *(void *)(v0 + 40) = v12;
    String.UnicodeScalarView.append(_:)();
    unint64_t v13 = *(void *)(v0 + 32);
    objc_super v14 = *(void *)(v0 + 40);
    *unint64_t v11 = v13;
    v11[1] = v14;
    swift_bridgeObjectRetain();
    id v15 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v15 > 1) {
      goto LABEL_44;
    }
    uint64_t v16 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if (v16[1])
    {
LABEL_52:
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      *(void *)(v0 + 112) = AssociatedTypeWitness;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      *(void *)(v0 + 120) = AssociatedConformanceWitness;
      uint64_t v40 = (void *)swift_task_alloc();
      *(void *)(v0 + 128) = v40;
      *uint64_t v40 = v0;
      v40[1] = AsyncCharacterSequence.AsyncIterator.next();
      uint64_t v30 = v0 + 190;
      Swift::Int v31 = AssociatedTypeWitness;
      char v35 = AssociatedConformanceWitness;
      goto LABEL_58;
    }
    uint64_t v17 = *v16;
    *(_WORD *)uint64_t v16 = 256;
    if ((v17 & 0xE0) == 0xC0)
    {
LABEL_53:
      unint64_t v41 = 1;
LABEL_56:
      uint64_t v3 = 0;
      *(void *)(v0 + 80) = v41;
      *(unsigned char *)(v0 + 184) = v17;
      *(_WORD *)(v0 + 185) = 0;
      *(unsigned char *)(v0 + 187) = 0;
LABEL_57:
      *(void *)(v0 + 88) = v3;
      uint64_t v42 = swift_getAssociatedTypeWitness();
      int v43 = swift_getAssociatedConformanceWitness();
      uint64_t v44 = (void *)swift_task_alloc();
      *(void *)(v0 + 96) = v44;
      *uint64_t v44 = v0;
      v44[1] = AsyncCharacterSequence.AsyncIterator.next();
      uint64_t v30 = v0 + 192;
      Swift::Int v31 = v42;
      char v35 = v43;
LABEL_58:
      return MEMORY[0x1F4187C78](v30, v31, v35);
    }
    if ((v17 & 0xF0) == 0xE0)
    {
LABEL_54:
      unint64_t v41 = 2;
      goto LABEL_56;
    }
    if ((v17 & 0xF8) == 0xF0)
    {
LABEL_55:
      unint64_t v41 = 3;
      goto LABEL_56;
    }
    if (v17 < 0) {
      break;
    }
LABEL_23:
    *(unsigned char *)(v0 + 184) = v17;
    *(_WORD *)(v0 + 185) = 0;
    *(unsigned char *)(v0 + 187) = 0;
    uint64_t v18 = static String._fromUTF8Repairing(_:)();
    uint64_t v10 = v18;
    uint64_t v7 = v19;
    id v8 = (v19 & 0x2000000000000000) == 0;
    if ((v19 & 0x2000000000000000) != 0) {
      uint64_t v20 = HIBYTE(v19) & 0xF;
    }
    else {
      uint64_t v20 = v18 & 0xFFFFFFFFFFFFLL;
    }
    if (!v20) {
      goto LABEL_37;
    }
  }
  while (1)
  {
    char v21 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
    unint64_t v22 = v21[1];
    *(void *)(v0 + 32) = *v21;
    *(void *)(v0 + 40) = v22;
    String.UnicodeScalarView.append(_:)();
    unint64_t v13 = *(void *)(v0 + 32);
    objc_super v14 = *(void *)(v0 + 40);
    *char v21 = v13;
    v21[1] = v14;
    swift_bridgeObjectRetain();
    uint64_t v23 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v23 >= 2) {
      break;
    }
    uint64_t v24 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if (v24[1]) {
      goto LABEL_52;
    }
    uint64_t v17 = *v24;
    *(_WORD *)uint64_t v24 = 256;
    if ((v17 & 0xE0) == 0xC0) {
      goto LABEL_53;
    }
    if ((v17 & 0xF0) == 0xE0) {
      goto LABEL_54;
    }
    if ((v17 & 0xF8) == 0xF0) {
      goto LABEL_55;
    }
    if ((v17 & 0x80) == 0) {
      goto LABEL_23;
    }
  }
LABEL_44:
  uint64_t v34 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v34 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (!v34) {
LABEL_62:
  }
    __break(1u);
  uint64_t v30 = specialized Collection.first.getter(v13, v14);
  if (!v31)
  {
    __break(1u);
    return MEMORY[0x1F4187C78](v30, v31, v35);
  }
LABEL_48:
  uint64_t v32 = v30;
  uint64_t v33 = v31;
  specialized RangeReplaceableCollection.removeFirst(_:)(1);
LABEL_49:
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v36(v32, v33);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncCharacterSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncCharacterSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  uint64_t v34;

  uint64_t v1 = *(unsigned char *)(v0 + 190);
  if (*(unsigned char *)(v0 + 191)) {
    goto LABEL_2;
  }
  if ((*(unsigned char *)(v0 + 190) & 0x80) == 0) {
    goto LABEL_9;
  }
  if ((v1 & 0xE0) == 0xC0)
  {
    uint64_t v24 = 1;
LABEL_48:
    *(unsigned char *)(v0 + 180) = v1;
    *(_WORD *)(v0 + 181) = 0;
    *(unsigned char *)(v0 + 183) = 0;
    *(void *)(v0 + 144) = v24;
    *(void *)(v0 + 152) = 0;
    uint64_t v33 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v33;
    *uint64_t v33 = v0;
    v33[1] = AsyncCharacterSequence.AsyncIterator.next();
    id v8 = *(void *)(v0 + 112);
    char v9 = *(void *)(v0 + 120);
    uint64_t v7 = v0 + 188;
    goto LABEL_49;
  }
  if ((v1 & 0xF0) == 0xE0)
  {
    uint64_t v24 = 2;
    goto LABEL_48;
  }
  if ((v1 & 0xF8) == 0xF0)
  {
    uint64_t v24 = 3;
    goto LABEL_48;
  }
  while (1)
  {
LABEL_9:
    uint64_t v12 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
    unint64_t v13 = v12[1];
    *(void *)(v0 + 32) = *v12;
    *(void *)(v0 + 40) = v13;
    String.UnicodeScalarView.append(_:)();
    objc_super v14 = *(void *)(v0 + 32);
    id v15 = *(void *)(v0 + 40);
    *uint64_t v12 = v14;
    v12[1] = v15;
    swift_bridgeObjectRetain();
    uint64_t v16 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v16 >= 2)
    {
      uint64_t v25 = HIBYTE(v15) & 0xF;
      if ((v15 & 0x2000000000000000) == 0) {
        uint64_t v25 = v14 & 0xFFFFFFFFFFFFLL;
      }
      if (v25)
      {
        uint64_t v7 = specialized Collection.first.getter(v14, v15);
        if (!v8)
        {
          __break(1u);
LABEL_41:
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          *(void *)(v0 + 112) = AssociatedTypeWitness;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          *(void *)(v0 + 120) = AssociatedConformanceWitness;
          uint64_t v28 = (void *)swift_task_alloc();
          *(void *)(v0 + 128) = v28;
          unsigned char *v28 = v0;
          v28[1] = AsyncCharacterSequence.AsyncIterator.next();
          uint64_t v7 = v0 + 190;
          id v8 = AssociatedTypeWitness;
          char v9 = AssociatedConformanceWitness;
          goto LABEL_49;
        }
LABEL_7:
        uint64_t v10 = v7;
        unint64_t v11 = v8;
        specialized RangeReplaceableCollection.removeFirst(_:)(1);
LABEL_29:
        unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v22(v10, v11);
      }
LABEL_55:
      __break(1u);
    }
    uint64_t v17 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if (v17[1]) {
      goto LABEL_41;
    }
    uint64_t v18 = *v17;
    *(_WORD *)uint64_t v17 = 256;
    if ((v18 & 0xE0) == 0xC0)
    {
      uint64_t v29 = 1;
      goto LABEL_45;
    }
    if ((v18 & 0xF0) == 0xE0)
    {
      uint64_t v29 = 2;
      goto LABEL_45;
    }
    if ((v18 & 0xF8) == 0xF0) {
      break;
    }
    if ((v18 & 0x80) == 0)
    {
      *(unsigned char *)(v0 + 184) = v18;
      *(_WORD *)(v0 + 185) = 0;
      *(unsigned char *)(v0 + 187) = 0;
      uint64_t v19 = static String._fromUTF8Repairing(_:)();
      if ((v20 & 0x2000000000000000) != 0) {
        char v21 = HIBYTE(v20) & 0xF;
      }
      else {
        char v21 = v19 & 0xFFFFFFFFFFFFLL;
      }
      if (!v21)
      {
        swift_bridgeObjectRelease();
LABEL_2:
        uint64_t v2 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
        uint64_t v4 = *v2;
        uint64_t v3 = v2[1];
        swift_bridgeObjectRetain();
        uint64_t v5 = String.count.getter();
        swift_bridgeObjectRelease();
        if (v5 < 1)
        {
          uint64_t v10 = 0;
          unint64_t v11 = 0;
          goto LABEL_29;
        }
        unint64_t v6 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000) == 0) {
          unint64_t v6 = v4 & 0xFFFFFFFFFFFFLL;
        }
        if (v6)
        {
          uint64_t v7 = specialized Collection.first.getter(v4, v3);
          if (!v8)
          {
            __break(1u);
            return MEMORY[0x1F4187C78](v7, v8, v9);
          }
          goto LABEL_7;
        }
        __break(1u);
        goto LABEL_55;
      }
      if ((v20 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v20 & 0x2000000000000000) != 0)
        {
          *(void *)(v0 + 16) = v19;
          *(void *)(v0 + 24) = v20 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v19 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v29 = 3;
LABEL_45:
  *(unsigned char *)(v0 + 184) = v18;
  *(_WORD *)(v0 + 185) = 0;
  *(unsigned char *)(v0 + 187) = 0;
  *(void *)(v0 + 80) = v29;
  *(void *)(v0 + 88) = 0;
  uint64_t v30 = swift_getAssociatedTypeWitness();
  Swift::Int v31 = swift_getAssociatedConformanceWitness();
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v32;
  *uint64_t v32 = v0;
  v32[1] = AsyncCharacterSequence.AsyncIterator.next();
  uint64_t v7 = v0 + 192;
  id v8 = v30;
  char v9 = v31;
LABEL_49:
  return MEMORY[0x1F4187C78](v7, v8, v9);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncCharacterSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = AsyncCharacterSequence.AsyncIterator.next();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void *v26;
  void *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v37;

  uint64_t v1 = *(unsigned char *)(v0 + 188);
  if ((*(unsigned char *)(v0 + 189) & 1) == 0)
  {
    if ((v1 & 0xC0) == 0x80)
    {
      uint64_t v2 = *(void *)(v0 + 144);
      uint64_t v3 = *(void *)(v0 + 152) + 1;
      *(unsigned char *)(v0 + 180 + v3) = v1;
      if (v3 != v2)
      {
        *(void *)(v0 + 152) = v3;
        uint64_t v4 = (void *)swift_task_alloc();
        *(void *)(v0 + 160) = v4;
        *uint64_t v4 = v0;
        v4[1] = AsyncCharacterSequence.AsyncIterator.next();
        uint64_t v5 = *(void *)(v0 + 112);
        unint64_t v6 = *(void *)(v0 + 120);
        uint64_t v7 = v0 + 188;
        goto LABEL_37;
      }
    }
    else
    {
      id v8 = (unsigned char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
      char *v8 = v1;
      v8[1] = 0;
    }
  }
  char v9 = static String._fromUTF8Repairing(_:)();
  unint64_t v11 = specialized Collection.first.getter(v9, v10);
  swift_bridgeObjectRelease();
  if ((v11 & 0x100000000) != 0) {
    goto LABEL_41;
  }
  uint64_t v12 = 1;
  while (1)
  {
    unint64_t v13 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
    objc_super v14 = v13[1];
    *(void *)(v0 + 32) = *v13;
    *(void *)(v0 + 40) = v14;
    String.UnicodeScalarView.append(_:)();
    id v15 = *(void *)(v0 + 32);
    uint64_t v16 = *(void *)(v0 + 40);
    *unint64_t v13 = v15;
    v13[1] = v16;
    swift_bridgeObjectRetain();
    uint64_t v17 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v17 >= 2)
    {
      uint64_t v23 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000) == 0) {
        uint64_t v23 = v15 & 0xFFFFFFFFFFFFLL;
      }
      if (v23)
      {
        uint64_t v7 = specialized Collection.first.getter(v15, v16);
        if (!v5)
        {
          __break(1u);
LABEL_32:
          uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
          *(void *)(v0 + 112) = AssociatedTypeWitness;
          uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
          *(void *)(v0 + 120) = AssociatedConformanceWitness;
          uint64_t v26 = (void *)swift_task_alloc();
          *(void *)(v0 + 128) = v26;
          *uint64_t v26 = v0;
          v26[1] = AsyncCharacterSequence.AsyncIterator.next();
          uint64_t v7 = v0 + 190;
          goto LABEL_36;
        }
LABEL_46:
        uint64_t v33 = v7;
        uint64_t v34 = v5;
        specialized RangeReplaceableCollection.removeFirst(_:)(1);
LABEL_48:
        char v35 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
        return v35(v33, v34);
      }
LABEL_52:
      __break(1u);
    }
    uint64_t v18 = (char *)(*(void *)(v0 + 56) + *(int *)(v0 + 176));
    if (v18[1]) {
      goto LABEL_32;
    }
    uint64_t v19 = *v18;
    *(_WORD *)uint64_t v18 = 256;
    if ((v19 & 0xE0) == 0xC0) {
      goto LABEL_35;
    }
    if ((v19 & 0xF0) == 0xE0)
    {
      uint64_t v12 = 2;
      goto LABEL_35;
    }
    if ((v19 & 0xF8) == 0xF0) {
      break;
    }
    if ((v19 & 0x80) == 0)
    {
      *(unsigned char *)(v0 + 184) = v19;
      *(_WORD *)(v0 + 185) = 0;
      *(unsigned char *)(v0 + 187) = 0;
      uint64_t v20 = static String._fromUTF8Repairing(_:)();
      if ((v21 & 0x2000000000000000) != 0) {
        unint64_t v22 = HIBYTE(v21) & 0xF;
      }
      else {
        unint64_t v22 = v20 & 0xFFFFFFFFFFFFLL;
      }
      if (!v22)
      {
        swift_bridgeObjectRelease();
LABEL_41:
        uint64_t v28 = (uint64_t *)(*(void *)(v0 + 56) + *(int *)(*(void *)(v0 + 48) + 36));
        uint64_t v30 = *v28;
        uint64_t v29 = v28[1];
        swift_bridgeObjectRetain();
        Swift::Int v31 = String.count.getter();
        swift_bridgeObjectRelease();
        if (v31 < 1)
        {
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          goto LABEL_48;
        }
        uint64_t v32 = HIBYTE(v29) & 0xF;
        if ((v29 & 0x2000000000000000) == 0) {
          uint64_t v32 = v30 & 0xFFFFFFFFFFFFLL;
        }
        if (v32)
        {
          uint64_t v7 = specialized Collection.first.getter(v30, v29);
          if (!v5)
          {
            __break(1u);
            return MEMORY[0x1F4187C78](v7, v5, v6);
          }
          goto LABEL_46;
        }
        __break(1u);
        goto LABEL_52;
      }
      if ((v21 & 0x1000000000000000) != 0)
      {
        _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((v21 & 0x2000000000000000) != 0)
        {
          *(void *)(v0 + 16) = v20;
          *(void *)(v0 + 24) = v21 & 0xFFFFFFFFFFFFFFLL;
        }
        else if ((v20 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        _decodeScalar(_:startingAt:)();
      }
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = 3;
LABEL_35:
  *(unsigned char *)(v0 + 184) = v19;
  *(_WORD *)(v0 + 185) = 0;
  *(unsigned char *)(v0 + 187) = 0;
  *(void *)(v0 + 80) = v12;
  *(void *)(v0 + 88) = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v27;
  *uint64_t v27 = v0;
  v27[1] = AsyncCharacterSequence.AsyncIterator.next();
  uint64_t v7 = v0 + 192;
LABEL_36:
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = AssociatedConformanceWitness;
LABEL_37:
  return MEMORY[0x1F4187C78](v7, v5, v6);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator(uint64_t a1, uint64_t a2)
{
  v3[5] = v2;
  v3[6] = a2;
  v3[4] = a1;
  return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator, 0, 0);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v0 + 56) = *(void *)(v1 + 16);
  *(void *)(v0 + 64) = *(void *)(v1 + 24);
  uint64_t v3 = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator();
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = *(int *)(v3 + 36);
  *(_DWORD *)(v0 + 120) = v4;
  uint64_t v5 = (char *)(v2 + v4);
  if (v5[1])
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    id v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v8;
    void *v8 = v0;
    v8[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    return MEMORY[0x1F4187C78](v0 + 124, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else
  {
    char v9 = *v5;
    *(_WORD *)uint64_t v5 = 256;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v10;
    *uint64_t v10 = v0;
    v10[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    uint64_t v11 = *(void *)(v0 + 72);
    return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v9, v11);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = AsyncLineSequence.AsyncIterator.next();
  }
  else {
    uint64_t v2 = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void *v20;
  uint64_t *v21;
  uint64_t (*v22)(void);
  char v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  if ((*(void *)(v0 + 104) & 0x100000000) != 0) {
    goto LABEL_8;
  }
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36));
  uint64_t v2 = v1[1];
  *(void *)(v0 + 16) = *v1;
  *(void *)(v0 + 24) = v2;
  String.UnicodeScalarView.append(_:)();
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char *v1 = v4;
  v1[1] = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.count.getter();
  unint64_t v6 = swift_bridgeObjectRelease();
  if (v5 >= 2)
  {
    char v9 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      char v9 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (!v9) {
      goto LABEL_26;
    }
    unint64_t v6 = specialized Collection.first.getter(v4, v3);
    if (v7)
    {
LABEL_13:
      id v15 = v6;
      uint64_t v16 = v7;
      specialized RangeReplaceableCollection.removeFirst(_:)(1);
LABEL_19:
      char v21 = *(uint64_t **)(v0 + 32);
      *char v21 = v15;
      v21[1] = v16;
      unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
      return v22();
    }
    __break(1u);
LABEL_8:
    uint64_t v10 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36));
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    swift_bridgeObjectRetain();
    uint64_t v13 = String.count.getter();
    unint64_t v6 = swift_bridgeObjectRelease();
    if (v13 < 1)
    {
      id v15 = 0;
      uint64_t v16 = 0;
      goto LABEL_19;
    }
    objc_super v14 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      objc_super v14 = v11 & 0xFFFFFFFFFFFFLL;
    }
    if (v14)
    {
      unint64_t v6 = specialized Collection.first.getter(v11, v12);
      if (v7) {
        goto LABEL_13;
      }
      goto LABEL_27;
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return MEMORY[0x1F4187C78](v6, v7, v8);
  }
  uint64_t v17 = (char *)(*(void *)(v0 + 40) + *(int *)(v0 + 120));
  if (v17[1])
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v20;
    *uint64_t v20 = v0;
    v20[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    unint64_t v6 = v0 + 124;
    uint64_t v7 = AssociatedTypeWitness;
    id v8 = AssociatedConformanceWitness;
    return MEMORY[0x1F4187C78](v6, v7, v8);
  }
  uint64_t v24 = *v17;
  *(_WORD *)uint64_t v17 = 256;
  uint64_t v25 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v25;
  *uint64_t v25 = v0;
  v25[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
  uint64_t v26 = *(void *)(v0 + 72);
  return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v24, v26);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t (*v18)(void);
  void *v20;
  uint64_t v21;
  char v22;
  char *v23;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void *v26;
  char v27;
  void *v28;
  uint64_t v29;

  uint64_t v1 = v0 + 124;
  LOBYTE(v2) = *(unsigned char *)(v0 + 124);
  if (*(unsigned char *)(v0 + 125))
  {
    uint64_t v3 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36));
    uint64_t v4 = *v3;
    uint64_t v1 = v3[1];
    swift_bridgeObjectRetain();
    uint64_t v2 = String.count.getter();
    uint64_t v5 = swift_bridgeObjectRelease();
    if (v2 <= 0)
    {
      id v15 = 0;
      uint64_t v16 = 0;
      goto LABEL_16;
    }
    id v8 = HIBYTE(v1) & 0xF;
    if ((v1 & 0x2000000000000000) == 0) {
      id v8 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (!v8)
    {
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v5 = specialized Collection.first.getter(v4, v1);
    if (v6)
    {
LABEL_14:
      id v15 = v5;
      uint64_t v16 = v6;
      specialized RangeReplaceableCollection.removeFirst(_:)(1);
LABEL_16:
      uint64_t v17 = *(uint64_t **)(v0 + 32);
      *uint64_t v17 = v15;
      v17[1] = v16;
      uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
      return v18();
    }
    __break(1u);
  }
  if ((v2 & 0x80) != 0)
  {
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v20;
    *uint64_t v20 = v0;
    v20[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    char v21 = *(void *)(v0 + 72);
    unint64_t v22 = v2;
  }
  else
  {
    char v9 = (uint64_t *)(*(void *)(v0 + 40) + *(int *)(*(void *)(v0 + 48) + 36));
    uint64_t v10 = v9[1];
    *(void *)(v0 + 16) = *v9;
    *(void *)(v0 + 24) = v10;
    String.UnicodeScalarView.append(_:)();
    uint64_t v11 = *(void *)(v0 + 16);
    uint64_t v12 = *(void *)(v0 + 24);
    *char v9 = v11;
    v9[1] = v12;
    swift_bridgeObjectRetain();
    uint64_t v13 = String.count.getter();
    uint64_t v5 = swift_bridgeObjectRelease();
    if (v13 > 1)
    {
      objc_super v14 = HIBYTE(v12) & 0xF;
      if ((v12 & 0x2000000000000000) == 0) {
        objc_super v14 = v11 & 0xFFFFFFFFFFFFLL;
      }
      if (v14)
      {
        uint64_t v5 = specialized Collection.first.getter(v11, v12);
        if (v6) {
          goto LABEL_14;
        }
        goto LABEL_30;
      }
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
      return MEMORY[0x1F4187C78](v5, v6, v7);
    }
    uint64_t v23 = (char *)(*(void *)(v0 + 40) + *(int *)(v0 + 120));
    if (v23[1])
    {
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 88) = v26;
      *uint64_t v26 = v0;
      v26[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
      uint64_t v5 = v1;
      unint64_t v6 = AssociatedTypeWitness;
      uint64_t v7 = AssociatedConformanceWitness;
      return MEMORY[0x1F4187C78](v5, v6, v7);
    }
    uint64_t v27 = *v23;
    *(_WORD *)uint64_t v23 = 256;
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 80) = v28;
    unsigned char *v28 = v0;
    v28[1] = protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator;
    char v21 = *(void *)(v0 + 72);
    unint64_t v22 = v27;
  }
  return AsyncUnicodeScalarSequence.AsyncIterator._nextComplexScalar(_:)(v22, v21);
}

uint64_t protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator, 0, 0);
  }
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 104) = a1;
    return MEMORY[0x1F4188298](protocol witness for AsyncIteratorProtocol.next() in conformance AsyncCharacterSequence<A>.AsyncIterator, 0, 0);
  }
}

uint64_t AsyncCharacterSequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  *(_WORD *)(a2 + *(int *)(type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator() + 36)) = 256;
  uint64_t result = type metadata accessor for AsyncCharacterSequence.AsyncIterator();
  uint64_t v7 = (void *)(a2 + *(int *)(result + 36));
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  return result;
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncCharacterSequence<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AsyncCharacterSequence.makeAsyncIterator()(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t AsyncSequence<>.characters.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t specialized RangeReplaceableCollection.removeFirst(_:)(uint64_t result)
{
  if (!result) {
    return result;
  }
  if (result < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = String.index(_:offsetBy:limitedBy:)();
  if (v1)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  return String.removeSubrange(_:)();
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  void v37[8];
  _OWORD v38[3];
  _OWORD v39[3];
  _OWORD v40[3];
  long long v41[3];
  unsigned char v42[40];
  long long v43[3];
  unsigned char v44[40];
  long long v45[3];
  unsigned char v46[48];

  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v2 = v1[2];
      double v3 = v1[3];
      uint64_t v4 = v1[4];
      uint64_t v5 = v1[1];
      uint64_t v36 = (_OWORD *)*v1;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if ((result & 1) == 0)
            {
              unint64_t v6 = v36[1];
              uint64_t v7 = v36[3];
              v40[1] = v36[2];
              v40[2] = v7;
              v40[0] = v6;
              uint64_t v8 = v36[1];
              v41[1] = v36[2];
              v41[2] = v7;
              v41[0] = v8;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v41, (uint64_t)v42);
              outlined retain of Locale((uint64_t)v42);
              char v9 = BigString.index(_:offsetBy:limitedBy:)();
              uint64_t v11 = v10;
              uint64_t v13 = v12;
              id v15 = v14;
              uint64_t result = outlined release of Locale((uint64_t)v40);
              if (v15 == 2)
              {
LABEL_25:
                __break(1u);
                return result;
              }
              uint64_t result = static BigString.Index.< infix(_:_:)();
              if ((result & 1) == 0)
              {
                uint64_t result = static BigString.Index.< infix(_:_:)();
                if ((result & 1) == 0)
                {
                  uint64_t result = static BigString.Index.< infix(_:_:)();
                  if ((result & 1) == 0)
                  {
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if ((result & 1) == 0)
                    {
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      if ((result & 1) == 0)
                      {
                        uint64_t v16 = v36[1];
                        uint64_t v17 = v36[3];
                        v39[1] = v36[2];
                        v39[2] = v17;
                        v39[0] = v16;
                        uint64_t v18 = v36[1];
                        v43[1] = v36[2];
                        v43[2] = v17;
                        v43[0] = v18;
                        outlined init with take of any PredicateExpression<Self.Output == B1>(v43, (uint64_t)v44);
                        outlined retain of Locale((uint64_t)v44);
                        uint64_t v19 = MEMORY[0x185301530](v5, v2, v3, v4);
                        char v21 = v20;
                        uint64_t v23 = v22;
                        uint64_t v25 = v24;
                        outlined release of Locale((uint64_t)v39);
                        uint64_t v26 = v36[1];
                        uint64_t v27 = v36[3];
                        v38[1] = v36[2];
                        v38[2] = v27;
                        v38[0] = v26;
                        uint64_t v28 = v36[1];
                        v45[1] = v36[2];
                        v45[2] = v27;
                        v45[0] = v28;
                        outlined init with take of any PredicateExpression<Self.Output == B1>(v45, (uint64_t)v46);
                        outlined retain of Locale((uint64_t)v46);
                        uint64_t v29 = MEMORY[0x185301530](v9, v11, v13, v15);
                        Swift::Int v31 = v30;
                        uint64_t v33 = v32;
                        char v35 = v34;
                        outlined release of Locale((uint64_t)v38);
                        v37[0] = v19;
                        v37[1] = v21;
                        v37[2] = v23;
                        v37[3] = v25;
                        v37[4] = v29;
                        v37[5] = v31;
                        v37[6] = v33;
                        v37[7] = v35;
                        return specialized AttributedString.CharacterView._replaceSubrange<A>(_:with:)((uint64_t)v37);
                      }
                      goto LABEL_24;
                    }
LABEL_23:
                    __break(1u);
LABEL_24:
                    __break(1u);
                    goto LABEL_25;
                  }
LABEL_22:
                  __break(1u);
                  goto LABEL_23;
                }
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

{
  void *v1;
  long long v2;
  uint64_t v3;
  uint64_t v4;
  long long v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  unsigned char v22[48];
  unsigned char v23[48];
  unsigned char v24[48];
  void v25[8];
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;

  if (result)
  {
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      char v21 = (_OWORD *)*v1;
      uint64_t result = static BigString.Index.< infix(_:_:)();
      if ((result & 1) == 0)
      {
        uint64_t result = static BigString.Index.< infix(_:_:)();
        if ((result & 1) == 0)
        {
          uint64_t result = static BigString.Index.< infix(_:_:)();
          if ((result & 1) == 0)
          {
            uint64_t result = static BigString.Index.< infix(_:_:)();
            if ((result & 1) == 0)
            {
              uint64_t v2 = v21[2];
              uint64_t v32 = v21[1];
              uint64_t v33 = v2;
              uint64_t v34 = v21[3];
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.index(_:offsetBy:limitedBy:)();
              uint64_t v4 = v3;
              uint64_t result = outlined release of Locale((uint64_t)v22);
              if (v4 == 2)
              {
LABEL_25:
                __break(1u);
                return result;
              }
              uint64_t result = static BigString.Index.< infix(_:_:)();
              if ((result & 1) == 0)
              {
                uint64_t result = static BigString.Index.< infix(_:_:)();
                if ((result & 1) == 0)
                {
                  uint64_t result = static BigString.Index.< infix(_:_:)();
                  if ((result & 1) == 0)
                  {
                    uint64_t result = static BigString.Index.< infix(_:_:)();
                    if ((result & 1) == 0)
                    {
                      uint64_t result = static BigString.Index.< infix(_:_:)();
                      if ((result & 1) == 0)
                      {
                        uint64_t v5 = v21[2];
                        uint64_t v29 = v21[1];
                        uint64_t v30 = v5;
                        Swift::Int v31 = v21[3];
                        BigString.unicodeScalars.getter();
                        unint64_t v6 = BigString.UnicodeScalarView.index(roundingDown:)();
                        uint64_t v8 = v7;
                        uint64_t v10 = v9;
                        uint64_t v12 = v11;
                        outlined release of Locale((uint64_t)v23);
                        uint64_t v13 = v21[2];
                        uint64_t v26 = v21[1];
                        uint64_t v27 = v13;
                        uint64_t v28 = v21[3];
                        BigString.unicodeScalars.getter();
                        objc_super v14 = BigString.UnicodeScalarView.index(roundingDown:)();
                        uint64_t v16 = v15;
                        uint64_t v18 = v17;
                        uint64_t v20 = v19;
                        outlined release of Locale((uint64_t)v24);
                        v25[0] = v6;
                        v25[1] = v8;
                        v25[2] = v10;
                        v25[3] = v12;
                        v25[4] = v14;
                        v25[5] = v16;
                        v25[6] = v18;
                        v25[7] = v20;
                        return specialized AttributedString.UnicodeScalarView._replaceSubrange<A>(_:with:)((uint64_t)v25);
                      }
                      goto LABEL_24;
                    }
LABEL_23:
                    __break(1u);
LABEL_24:
                    __break(1u);
                    goto LABEL_25;
                  }
LABEL_22:
                  __break(1u);
                  goto LABEL_23;
                }
LABEL_21:
                __break(1u);
                goto LABEL_22;
              }
LABEL_20:
              __break(1u);
              goto LABEL_21;
            }
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
LABEL_18:
          __break(1u);
          goto LABEL_19;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  return result;
}

uint64_t type metadata accessor for AsyncCharacterSequence.AsyncIterator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncCharacterSequence<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for AsyncCharacterSequence(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AsyncCharacterSequence(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x181D97610);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AsyncCharacterSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AsyncCharacterSequence.AsyncIterator()
{
  uint64_t result = type metadata accessor for AsyncUnicodeScalarSequence.AsyncIterator();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncCharacterSequence.AsyncIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = v6 + 9;
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v6 + 9) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *(_WORD *)((char *)a1 + v6) = *(_WORD *)((char *)a2 + v6);
    int v11 = (void *)(((unint64_t)a1 + v7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v12 = (void *)(((unint64_t)a2 + v7) & 0xFFFFFFFFFFFFFFF8);
    *int v11 = *v12;
    v11[1] = v12[1];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AsyncCharacterSequence.AsyncIterator(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  *(_OWORD *)((v6 + 9 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v6 + 9 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AsyncCharacterSequence.AsyncIterator(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24);
  *(_WORD *)(v6 + a1) = *(_WORD *)(v6 + a2);
  v6 += 9;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncCharacterSequence.AsyncIterator(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 9) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x181D97D10);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)((((unint64_t)a1 + v8 + 9) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    uint64_t v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for AsyncCharacterSequence.AsyncIterator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  unint64_t v10 = ((v8 + 9) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v8 + 9) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v9 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v9 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v9)
  {
    if (((v8 + 9) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v9;
    }
    else {
      int v15 = 1;
    }
    if (((v8 + 9) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v9 + a2;
      bzero(a1, ((v8 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  size_t v17 = v8 + 2;
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x181D97FB8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          char v21 = (void *)((unint64_t)&a1[v17 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *char v21 = a2 ^ 0x80000000;
            v21[1] = 0;
          }
          else
          {
            v21[1] = (a2 - 1);
          }
        }
        else if (v7 >= a2)
        {
          unint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
          v22(a1, a2);
        }
        else
        {
          if (v17 <= 3) {
            int v18 = ~(-1 << (8 * v17));
          }
          else {
            int v18 = -1;
          }
          if (v8 != -2)
          {
            int v19 = v18 & (~v7 + a2);
            if (v17 <= 3) {
              int v20 = v8 + 2;
            }
            else {
              int v20 = 4;
            }
            bzero(a1, v17);
            switch(v20)
            {
              case 2:
                *(_WORD *)a1 = v19;
                break;
              case 3:
                *(_WORD *)a1 = v19;
                a1[2] = BYTE2(v19);
                break;
              case 4:
                *(_DWORD *)a1 = v19;
                break;
              default:
                *a1 = v19;
                break;
            }
          }
        }
      }
      return;
  }
}

Swift::String_optional __swiftcall ICU.Enumerator.Elements.Iterator.next()()
{
  if (uenum_next())
  {
    uint64_t v0 = String.init(cString:)();
  }
  else
  {
    uint64_t v0 = 0;
    unint64_t v1 = 0;
  }
  result.value._unint64_t object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t ICU.Enumerator.__deallocating_deinit()
{
  uenum_close();

  return swift_deallocClassInstance();
}

Swift::String __swiftcall Date.VerbatimFormatStyle.format(_:)(Foundation::Date a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  double v3 = *v1;
  uint64_t v4 = *((void *)v2 + 6);
  uint64_t v5 = *((void *)v2 + 7);
  long long v6 = v2[1];
  long long v19 = *v2;
  long long v20 = v6;
  long long v21 = v19;
  long long v7 = v2[2];
  long long v22 = v6;
  *(_OWORD *)uint64_t v23 = v7;
  *(void *)&v23[16] = v4;
  uint64_t v24 = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v21, (uint64_t)v29);
  long long v21 = v29[0];
  long long v22 = v29[1];
  v23[0] = v30;
  *(_OWORD *)&v23[8] = v31;
  LOBYTE(v24) = v32;
  uint64_t v25 = v33;
  uint64_t v26 = v34;
  char v27 = v35;
  uint64_t v28 = v36;
  uint64_t v8 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v8
    || (uint64_t v9 = swift_retain_n(),
        MEMORY[0x1F4188790](v9),
        swift_retain(),
        specialized closure #1 in _withResizingUCharBuffer(initialSize:_:)((uint64_t)&v18, (uint64_t *)v29),
        unsigned int v11 = (void *)*((void *)&v29[0] + 1),
        id v10 = *(id *)&v29[0],
        swift_release_n(),
        !v11))
  {
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v3);
    id v13 = objc_msgSend(v12, sel_description);

    id v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unsigned int v11 = v14;
  }
  uint64_t v15 = (uint64_t)v10;
  int v16 = v11;
  result._unint64_t object = v16;
  result._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t Date.VerbatimFormatStyle.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.timeZone.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *v1;
  return swift_unknownObjectRetain();
}

__n128 Date.VerbatimFormatStyle.timeZone.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  __n128 *v1 = *a1;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.timeZone.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.VerbatimFormatStyle.calendar.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 16);
  return swift_unknownObjectRetain();
}

__n128 Date.VerbatimFormatStyle.calendar.setter(__n128 *a1)
{
  swift_unknownObjectRelease();
  __n128 result = *a1;
  v1[1] = *a1;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.calendar.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t Date.VerbatimFormatStyle.locale.getter@<X0>(_OWORD *a1@<X8>)
{
  *a1 = *(_OWORD *)(v1 + 32);
  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.locale.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v3;
  return result;
}

uint64_t (*Date.VerbatimFormatStyle.locale.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

__n128 Date.VerbatimFormatStyle.init(format:locale:timeZone:calendar:)@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X1>, _OWORD *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  long long v7 = *a4;
  *(_OWORD *)a5 = *a3;
  *(_OWORD *)(a5 + 16) = v7;
  __n128 result = *a2;
  *(__n128 *)(a5 + 32) = *a2;
  *(void *)(a5 + 48) = v5;
  *(void *)(a5 + 56) = v6;
  return result;
}

uint64_t Date.VerbatimFormatStyle.attributed.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  long long v6 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v6;
  uint64_t v7[2] = *(_OWORD *)(v1 + 32);
  uint64_t v8 = v3;
  uint64_t v9 = v4;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)v7);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v7, a1);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance Date.VerbatimFormatStyle.CodingKeys()
{
  uint64_t result = 0x656E6F5A656D6974;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7261646E656C6163;
      break;
    case 2:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 3:
      uint64_t result = 0x615074616D726F66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance Date.VerbatimFormatStyle.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized Date.VerbatimFormatStyle.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.VerbatimFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.VerbatimFormatStyle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.VerbatimFormatStyle.hash(into:)(uint64_t a1)
{
  void (*v13)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  Swift::UInt v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  Swift::UInt8 v46;
  uint64_t v47;
  unsigned char v48[144];
  unsigned char v49[8];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  void v67[18];
  unsigned char v68[144];
  unsigned char v69[152];

  uint64_t v3 = v1[1];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v47 = v1[5];
  uint64_t ObjectType = swift_getObjectType();
  long long v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  v7(a1, ObjectType, v3);
  swift_unknownObjectRelease();
  uint64_t v8 = swift_getObjectType();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v9(a1, v8, v4);
  swift_unknownObjectRelease();
  if (!v5)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  uint64_t v10 = swift_getObjectType();
  unsigned int v11 = *(uint64_t (**)(uint64_t, uint64_t))(v47 + 48);
  swift_unknownObjectRetain_n();
  if (v11(v10, v47))
  {
    Swift::UInt8 v12 = 1;
LABEL_7:
    Hasher._combine(_:)(v12);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v47 + 64))(v10, v47);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  id v13 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v47 + 464);
  swift_unknownObjectRetain();
  v13(v67, v10, v47);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v69);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v69) == 1)
  {
    Swift::UInt8 v12 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v49);
  Hasher._combine(_:)(1u);
  if (v49[0] == 2)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = v49[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v15);
  int v16 = v50;
  if (!v50)
  {
    Hasher._combine(_:)(0);
    long long v20 = v49;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v16 + 16));
  size_t v17 = *(void *)(v16 + 16);
  if (!v17)
  {
    outlined init with take of LocalePreferences?((uint64_t)v68, (uint64_t)v48);
    long long v20 = v48;
LABEL_22:
    outlined retain of LocalePreferences(v20);
    if (!v51) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v18 = v16 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v18 += 16;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v52) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    long long v19 = v53;
    if (!v53) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v52) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  long long v19 = v53;
  if (!v53)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v19);
  swift_bridgeObjectRelease();
LABEL_26:
  long long v21 = v54;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v22 = v55;
  uint64_t v23 = v56;
  uint64_t v25 = v57;
  uint64_t v24 = v58;
  uint64_t v26 = v59;
  if (v55)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    char v27 = v23;
    uint64_t v28 = v25;
    uint64_t v29 = v24;
    char v30 = v26;
    long long v31 = v22;
    _CFObject.hash(into:)();
    if (v23) {
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v36 = v26;
    uint64_t v37 = v23;
    unsigned int v38 = v25;
    unint64_t v39 = v24;
    if (v23)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      char v32 = v23;
      _CFObject.hash(into:)();

      if (v25) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (v25)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v33 = v25;
    _CFObject.hash(into:)();

    if (v24) {
      goto LABEL_33;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    if (v26) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  if (!v24) {
    goto LABEL_38;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v34 = v24;
  _CFObject.hash(into:)();

  if (v26)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    char v35 = v26;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  char v35 = 0;
LABEL_40:

  uint64_t v40 = v60;
  if (v40)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  unint64_t v41 = v61;
  if (!v61)
  {
    Hasher._combine(_:)(0);
    if (v62) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v41);
  swift_bridgeObjectRelease();
  if (!v62) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v42 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v64 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    int v43 = v64 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v43);
  }
  if (v65 == 2)
  {
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v44 = v65 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v44);
  if (v66 == 2)
  {
    int v45 = 0;
  }
  else
  {
    uint64_t v46 = v66 & 1;
    Hasher._combine(_:)(1u);
    int v45 = v46;
  }
  Hasher._combine(_:)(v45);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v68, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

uint64_t Date.VerbatimFormatStyle.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.VerbatimFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v16 = v3[1];
  uint64_t v9 = *((void *)v3 + 4);
  uint64_t v14 = *((void *)v3 + 5);
  uint64_t v15 = v9;
  v13[1] = *((void *)v3 + 6);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v17 = *v3;
  char v18 = 0;
  lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    long long v17 = v16;
    char v18 = 1;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v17 = v11;
    *((void *)&v17 + 1) = v10;
    char v18 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v17) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Date.VerbatimFormatStyle.hashValue.getter()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  unsigned char v46[144];
  unsigned char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  char v64;
  void v65[18];
  unsigned char v66[144];
  unsigned char v67[144];
  unsigned char v68[80];

  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  v6(v68, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v68, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if (v10(v9, v4))
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::UInt8 v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v65, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66);
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v67) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v47);
  Hasher._combine(_:)(1u);
  if (v47[0] == 2)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v47[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  uint64_t v15 = v48;
  if (!v48)
  {
    Hasher._combine(_:)(0);
    long long v20 = v47;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  long long v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v46);
    long long v20 = v46;
LABEL_23:
    outlined retain of LocalePreferences(v20);
    if (!v49) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  long long v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v50) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    char v18 = v51;
    if (!v51) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v18);
    swift_bridgeObjectRelease();
    long long v19 = v52;
    if (!v52) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  char v18 = v51;
  if (v51) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  long long v19 = v52;
  if (!v52)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v19);
  swift_bridgeObjectRelease();
LABEL_28:
  long long v22 = v53;
  long long v21 = v54;
  uint64_t v24 = v55;
  uint64_t v23 = v56;
  uint64_t v25 = v57;
  if (v53)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v26 = v21;
    char v27 = v24;
    uint64_t v28 = v23;
    uint64_t v29 = v25;
    char v30 = v22;
    _CFObject.hash(into:)();
    if (v21) {
      goto LABEL_30;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    char v35 = v25;
    uint64_t v36 = v21;
    uint64_t v37 = v24;
    unsigned int v38 = v23;
    if (v21)
    {
LABEL_30:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      long long v31 = v21;
      _CFObject.hash(into:)();

      if (v24) {
        goto LABEL_31;
      }
      goto LABEL_36;
    }
  }
  Hasher._combine(_:)(0);
  if (v24)
  {
LABEL_31:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    char v32 = v24;
    _CFObject.hash(into:)();

    if (v23) {
      goto LABEL_32;
    }
LABEL_37:
    Hasher._combine(_:)(0);
    if (v25) {
      goto LABEL_33;
    }
    goto LABEL_38;
  }
LABEL_36:
  Hasher._combine(_:)(0);
  if (!v23) {
    goto LABEL_37;
  }
LABEL_32:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v33 = v23;
  _CFObject.hash(into:)();

  if (v25)
  {
LABEL_33:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v34 = v25;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  uint64_t v34 = 0;
LABEL_39:

  unint64_t v39 = v58;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v68, v39);
    swift_bridgeObjectRelease();
    uint64_t v40 = v59;
    if (v59) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    if (v60) {
      goto LABEL_42;
    }
LABEL_45:
    Hasher._combine(_:)(0);
    goto LABEL_46;
  }
  Hasher._combine(_:)(0);
  uint64_t v40 = v59;
  if (!v59) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v68, v40);
  swift_bridgeObjectRelease();
  if (!v60) {
    goto LABEL_45;
  }
LABEL_42:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_46:
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v42 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v63 == 2)
  {
    int v43 = 0;
  }
  else
  {
    int v43 = v63 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  if (v64 == 2)
  {
    uint64_t v44 = 0;
  }
  else
  {
    int v45 = v64 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v44 = v45;
  }
  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v66, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t Date.VerbatimFormatStyle.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.VerbatimFormatStyle.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v25 = 0;
    lazy protocol witness table accessor for type TimeZone and conformance TimeZone();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v23 = v24;
    char v25 = 1;
    lazy protocol witness table accessor for type Calendar and conformance Calendar();
    swift_unknownObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    long long v22 = v24;
    char v25 = 2;
    lazy protocol witness table accessor for type Locale and conformance Locale();
    uint64_t v10 = v22;
    swift_unknownObjectRetain();
    uint64_t v21 = 0;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v20 = v10;
    uint64_t v19 = *((void *)&v24 + 1);
    uint64_t v11 = v24;
    LOBYTE(v24) = 3;
    swift_unknownObjectRetain();
    uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v14 = v13;
    uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v21 = v12;
    v15(v8, v5);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    long long v16 = v22;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v16;
    uint64_t v17 = v19;
    *(void *)(a2 + 32) = v11;
    *(void *)(a2 + 40) = v17;
    *(void *)(a2 + 48) = v21;
    *(void *)(a2 + 56) = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for FormatStyle.format(_:) in conformance Date.VerbatimFormatStyle@<X0>(Swift::String *a1@<X8>, Foundation::Date a2@<D0>)
{
  Swift::String v4 = Date.VerbatimFormatStyle.format(_:)(a2);
  uint64_t result = v4._countAndFlagsBits;
  *a1 = v4;
  return result;
}

uint64_t protocol witness for FormatStyle.locale(_:) in conformance Date.VerbatimFormatStyle@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.VerbatimFormatStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.VerbatimFormatStyle.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.VerbatimFormatStyle(void *a1)
{
  return Date.VerbatimFormatStyle.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.VerbatimFormatStyle()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  void v63[18];
  unsigned char v64[144];
  unsigned char v65[144];
  unsigned char v66[80];

  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  long long v6 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  v6(v66, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v66, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if (v10(v9, v4))
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v63, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v63, (uint64_t)v64);
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v65) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)&v45);
  Hasher._combine(_:)(1u);
  if (v45 == 2)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v45 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  uint64_t v15 = v46;
  if (!v46)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v45);
    if (!v47) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  long long v16 = *(void *)(v15 + 16);
  if (!v16) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  uint64_t v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v47)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v48) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    uint64_t v18 = v49;
    if (!v49) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v66, v18);
    swift_bridgeObjectRelease();
    uint64_t v19 = v50;
    if (!v50) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = v49;
  if (v49) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  uint64_t v19 = v50;
  if (!v50)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v66, v19);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v20 = v51;
  uint64_t v21 = v52;
  long long v23 = v53;
  long long v22 = v54;
  long long v24 = v55;
  if (v51)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    char v25 = v21;
    uint64_t v26 = v23;
    char v27 = v22;
    uint64_t v28 = v24;
    uint64_t v29 = v20;
    _CFObject.hash(into:)();
    if (v21) {
      goto LABEL_29;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v34 = v24;
    char v35 = v21;
    uint64_t v36 = v23;
    uint64_t v37 = v22;
    if (v21)
    {
LABEL_29:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      char v30 = v21;
      _CFObject.hash(into:)();

      if (v23) {
        goto LABEL_30;
      }
      goto LABEL_35;
    }
  }
  Hasher._combine(_:)(0);
  if (v23)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    long long v31 = v23;
    _CFObject.hash(into:)();

    if (v22) {
      goto LABEL_31;
    }
LABEL_36:
    Hasher._combine(_:)(0);
    if (v24) {
      goto LABEL_32;
    }
    goto LABEL_37;
  }
LABEL_35:
  Hasher._combine(_:)(0);
  if (!v22) {
    goto LABEL_36;
  }
LABEL_31:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  char v32 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v33 = v24;
    _CFObject.hash(into:)();

    goto LABEL_38;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  uint64_t v33 = 0;
LABEL_38:

  unsigned int v38 = v56;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v66, v38);
    swift_bridgeObjectRelease();
    unint64_t v39 = v57;
    if (v57) {
      goto LABEL_40;
    }
LABEL_43:
    Hasher._combine(_:)(0);
    if (v58) {
      goto LABEL_41;
    }
LABEL_44:
    Hasher._combine(_:)(0);
    goto LABEL_45;
  }
  Hasher._combine(_:)(0);
  unint64_t v39 = v57;
  if (!v57) {
    goto LABEL_43;
  }
LABEL_40:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v66, v39);
  swift_bridgeObjectRelease();
  if (!v58) {
    goto LABEL_44;
  }
LABEL_41:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_45:
  if (v59 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v40 = v59 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    unint64_t v41 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v61 == 2)
  {
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = v61 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v42);
  if (v62 == 2)
  {
    int v43 = 0;
  }
  else
  {
    uint64_t v44 = v62 & 1;
    Hasher._combine(_:)(1u);
    int v43 = v44;
  }
  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t static FormatStyle<>.verbatim(_:locale:timeZone:calendar:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, _OWORD *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  long long v8 = *a4;
  *(_OWORD *)a5 = *a3;
  *(_OWORD *)(a5 + 16) = v8;
  *(_OWORD *)(a5 + 32) = *a2;
  *(void *)(a5 + 48) = v5;
  *(void *)(a5 + 56) = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.parseStrategy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 6);
  uint64_t v3 = *((void *)v1 + 7);
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0xC1CD27E440000000;
  long long v4 = *v1;
  long long v6 = v1[1];
  *(_OWORD *)(a1 + 16) = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 72) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ParseableFormatStyle.parseStrategy.getter in conformance Date.VerbatimFormatStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *((void *)v1 + 6);
  uint64_t v3 = *((void *)v1 + 7);
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0xC1CD27E440000000;
  long long v4 = *v1;
  long long v6 = v1[1];
  *(_OWORD *)(a1 + 16) = v1[2];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v2;
  *(void *)(a1 + 72) = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.Attributed.subscript.getter()
{
  return swift_unknownObjectRelease();
}

uint64_t key path getter for Date.VerbatimFormatStyle.Attributed.subscript<A>(dynamicMember:) : <A>Date.VerbatimFormatStyle.AttributedA(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  Date.VerbatimFormatStyle.Attributed.subscript.getter(v2);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t Date.VerbatimFormatStyle.Attributed.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  specialized Date.VerbatimFormatStyle.Attributed.subscript.setter(a1);
  swift_release();
  long long v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + v3 + 8) - 8) + 8);

  return v4(a1);
}

void (*Date.VerbatimFormatStyle.Attributed.subscript.modify(void *a1, void *a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x78uLL);
  *a1 = v5;
  v5[8] = a2;
  v5[9] = v2;
  uint64_t v6 = *(void *)(*MEMORY[0x1E4FBBC10] + *a2 + 8);
  v5[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[11] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[12] = malloc(v8);
  v5[13] = malloc(v8);
  v5[14] = malloc(v8);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  long long v12 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v2;
  *((_OWORD *)v5 + 1) = v12;
  *((_OWORD *)v5 + 2) = *(_OWORD *)(v2 + 32);
  v5[6] = v9;
  v5[7] = v10;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_getAtKeyPath();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return Date.VerbatimFormatStyle.Attributed.subscript.modify;
}

void Date.VerbatimFormatStyle.Attributed.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  long long v4 = *(void (**)(void, void *, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), (void *)v3[14], v3[10]);
  uint64_t v5 = (void *)v3[13];
  Swift::UInt8 v11 = (void *)v3[14];
  uint64_t v7 = v3[11];
  uint64_t v6 = (void *)v3[12];
  uint64_t v8 = v3[10];
  if (a2)
  {
    v4(v3[12], v5, v3[10]);
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    uint64_t v9 = *(void (**)(void *, uint64_t))(v7 + 8);
    v9(v5, v8);
    uint64_t v10 = v11;
    v9(v11, v8);
  }
  else
  {
    swift_retain();
    swift_setAtWritableKeyPath();
    swift_release();
    uint64_t v10 = v11;
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v8);
  }
  free(v10);
  free(v5);
  free(v6);

  free(v3);
}

uint64_t Date.VerbatimFormatStyle.Attributed.format(_:)@<X0>(double *a1@<X0>, uint64_t *a2@<X8>)
{
  double v4 = *a1;
  uint64_t v5 = *((void *)v2 + 6);
  uint64_t v6 = *((void *)v2 + 7);
  long long v77 = v2[1];
  long long v83 = *v2;
  long long v84 = v77;
  *(_OWORD *)uint64_t v85 = v2[2];
  *(void *)&v85[16] = v5;
  uint64_t v86 = v6;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain_n();
  ICUDateFormatter.DateFormatInfo.init(_:)(&v83, (uint64_t)v93);
  long long v83 = v93[0];
  long long v84 = v93[1];
  v85[0] = v94;
  *(_OWORD *)&v85[8] = v95;
  LOBYTE(v86) = v96;
  uint64_t v87 = v97;
  uint64_t v88 = v98;
  char v89 = v99;
  uint64_t v90 = v100;
  uint64_t v7 = specialized static ICUDateFormatter.cachedFormatter(for:)((uint64_t)&v83);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v68 = a2;
  if (!v7) {
    goto LABEL_20;
  }
  *(double *)stat_optional v93 = v4;
  Swift::tuple_String_OpaquePointer_optional v120 = ICUDateFormatter.attributedFormat(_:)(v8);
  if (!v120.value._0._object)
  {
    swift_release();
LABEL_20:
    id v66 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, v4);
    id v67 = objc_msgSend(v66, sel_description);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    BigString.init(_:)();
    uint64_t result = AttributedString.init(_:attributes:)(v93, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v83);
    uint64_t v12 = v83;
    goto LABEL_21;
  }
  uint64_t countAndFlagsBits = v120.value._0._countAndFlagsBits;
  unint64_t object = v120.value._0._object;
  rawValue = v120.value._1._rawValue;
  swift_bridgeObjectRetain();
  BigString.init(_:)();
  AttributedString.init(_:attributes:)(v91, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v93);
  uint64_t v12 = *(void *)&v93[0];
  uint64_t v13 = rawValue[2];
  if (!v13)
  {
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_21:
    *char v68 = v12;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v71 = countAndFlagsBits;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v14 = 0;
  uint64_t v15 = (char *)(rawValue + 6);
  Swift::String v70 = object;
  while (1)
  {
    uint64_t v78 = v14;
    uint64_t v16 = *((unsigned int *)v15 - 4);
    *(void *)&long long v83 = countAndFlagsBits;
    *((void *)&v83 + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v17 = String.Index.init<A>(utf16Offset:in:)();
    *(void *)&long long v83 = countAndFlagsBits;
    *((void *)&v83 + 1) = object;
    swift_bridgeObjectRetain();
    unint64_t v18 = String.Index.init<A>(utf16Offset:in:)();
    if (v18 >> 14 < v17 >> 14) {
      break;
    }
    unint64_t v19 = v18;
    Swift::String v75 = v15;
    uint64_t v76 = v13;
    swift_retain();
    specialized Range<>.init<A>(_range:in:)(v17, v19, (_OWORD *)v12, (uint64_t *)&v83);
    uint64_t v20 = *((void *)&v84 + 1);
    if (*((void *)&v84 + 1) == 2) {
      goto LABEL_24;
    }
    uint64_t v73 = *((void *)&v83 + 1);
    uint64_t v74 = v83;
    uint64_t v72 = v84;
    uint64_t v21 = *(void *)&v85[8];
    uint64_t v22 = *(void *)v85;
    uint64_t v23 = *(void *)&v85[16];
    uint64_t v24 = v86;
    uint64_t v25 = MEMORY[0x1E4FBC868];
    uint64_t v81 = MEMORY[0x1E4FBC868];
    uint64_t v26 = MEMORY[0x1E4FBC870];
    uint64_t v82 = MEMORY[0x1E4FBC870];
    AttributeScopes.FoundationAttributes.DateFieldAttribute.Field.init(udateFormatField:)(v16, (char *)&v83);
    if (v83 == 17)
    {
      uint64_t v27 = v26;
      uint64_t v28 = v25;
    }
    else
    {
      specialized AttributeContainer.subscript.setter(v83);
      uint64_t v28 = v81;
      uint64_t v27 = v82;
    }
    v80[0] = v28;
    v80[1] = v27;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      long long v29 = *(_OWORD *)(v12 + 32);
      v117[0] = *(_OWORD *)(v12 + 16);
      v117[1] = v29;
      v117[2] = *(_OWORD *)(v12 + 48);
      uint64_t v30 = *(void *)(v12 + 64);
      uint64_t v31 = *(void *)(v12 + 72);
      uint64_t v69 = v24;
      uint64_t v32 = v23;
      uint64_t v33 = v21;
      uint64_t v34 = v22;
      uint64_t v35 = *(void *)(v12 + 80);
      uint64_t v36 = *(void *)(v12 + 88);
      type metadata accessor for AttributedString.Guts();
      swift_allocObject();
      outlined retain of Locale((uint64_t)v117);
      swift_unknownObjectRetain();
      uint64_t v37 = v36;
      uint64_t v22 = v34;
      uint64_t v21 = v33;
      uint64_t v23 = v32;
      uint64_t v24 = v69;
      uint64_t v38 = AttributedString.Guts.init(string:runs:)(v117, v30, v31, v35, v37);
      swift_release();
      uint64_t v12 = v38;
    }
    long long v39 = *(_OWORD *)(v12 + 32);
    v116[0] = *(_OWORD *)(v12 + 16);
    v116[1] = v39;
    v116[2] = *(_OWORD *)(v12 + 48);
    swift_retain();
    outlined retain of Locale((uint64_t)v116);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v116);
    long long v40 = *(_OWORD *)(v12 + 16);
    long long v41 = *(_OWORD *)(v12 + 48);
    v115[1] = *(_OWORD *)(v12 + 32);
    v115[2] = v41;
    v115[0] = v40;
    long long v42 = *(_OWORD *)(v12 + 16);
    v118[1] = *(_OWORD *)(v12 + 32);
    v118[2] = v41;
    v118[0] = v42;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v118, (uint64_t)v119);
    outlined retain of Locale((uint64_t)v119);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v115);
    swift_release();
    uint64_t v104 = v74;
    uint64_t v105 = v73;
    uint64_t v106 = v72;
    uint64_t v107 = v20;
    uint64_t v108 = v22;
    uint64_t v109 = v21;
    uint64_t v110 = v23;
    uint64_t v111 = v24;
    long long v43 = *(_OWORD *)(v12 + 16);
    long long v44 = *(_OWORD *)(v12 + 48);
    long long v113 = *(_OWORD *)(v12 + 32);
    long long v114 = v44;
    long long v112 = v43;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)v92);
    uint64_t v45 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    uint64_t v52 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v54 = v53;
    uint64_t v56 = v55;
    uint64_t v58 = v57;
    outlined release of Locale((uint64_t)v93);
    swift_release();
    *(void *)&long long v83 = v12;
    *((void *)&v83 + 1) = v45;
    *(void *)&long long v84 = v47;
    *((void *)&v84 + 1) = v49;
    *(void *)uint64_t v85 = v51;
    *(void *)&v85[8] = v52;
    *(void *)&v85[16] = v54;
    uint64_t v86 = v56;
    uint64_t v87 = v58;
    if (one-time initialization token for currentIdentity != -1) {
      swift_once();
    }
    double v59 = (uint64_t *)(static AttributedString.currentIdentity + 16);
    double v60 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
    swift_retain();
    os_unfair_lock_lock(v60);
    uint64_t v14 = v78;
    closure #1 in static AttributedString._nextModifyIdentity.getter(v59, &v79);
    os_unfair_lock_unlock(v60);
    swift_release();
    uint64_t v61 = v79;
    uint64_t v88 = v79;
    BigString.init()();
    uint64_t v79 = 0;
    MEMORY[0x185309530](&v79, 8);
    uint64_t v62 = v79;
    type metadata accessor for AttributedString.Guts();
    uint64_t v63 = swift_allocObject();
    uint64_t countAndFlagsBits = v71;
    if ((BigString.isEmpty.getter() & 1) == 0) {
      goto LABEL_23;
    }
    long long v64 = v102;
    *(_OWORD *)(v63 + 16) = v101;
    *(_OWORD *)(v63 + 32) = v64;
    *(_OWORD *)(v63 + 48) = v103;
    *(void *)(v63 + 64) = 0;
    *(void *)(v63 + 72) = 0;
    *(void *)(v63 + 80) = 0;
    *(void *)(v63 + 88) = v62;
    swift_release();
    LOBYTE(v79) = 0;
    AttributedSubstring.mergeAttributes(_:mergePolicy:)(v80, (char *)&v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v88 != v61) {
      goto LABEL_25;
    }
    uint64_t v15 = v75 + 24;
    uint64_t v12 = v83;
    swift_release();
    uint64_t v13 = v76 - 1;
    unint64_t object = v70;
    if (v76 == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Date.VerbatimFormatStyle.Attributed.locale(_:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v3 = *(void *)(v2 + 56);
  long long v6 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = *a1;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v3;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

uint64_t Date.VerbatimFormatStyle.Attributed.hash(into:)(uint64_t a1)
{
  void (*v14)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  Swift::UInt v44;
  Swift::UInt v45;
  Swift::UInt8 v46;
  Swift::UInt8 v47;
  Swift::UInt8 v48;
  uint64_t v49;
  void *v50;
  unsigned char v51[144];
  unsigned char v52[8];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char v67;
  char v68;
  char v69;
  void v70[18];
  unsigned char v71[144];
  unsigned char v72[152];

  uint64_t v3 = v1[1];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v49 = v1[5];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v7(a1, ObjectType, v3);
  uint64_t v8 = a1;
  swift_unknownObjectRelease();
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 120);
  swift_unknownObjectRetain();
  v10(a1, v9, v4);
  swift_unknownObjectRelease();
  if (!v5)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  uint64_t v11 = swift_getObjectType();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 48);
  swift_unknownObjectRetain_n();
  if (v12(v11, v49))
  {
    Swift::UInt8 v13 = 1;
LABEL_7:
    Hasher._combine(_:)(v13);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v49 + 64))(v11, v49);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v49 + 464);
  swift_unknownObjectRetain();
  v14(v70, v11, v49);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)v71);
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v72);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v72) == 1)
  {
    Swift::UInt8 v13 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v52);
  Hasher._combine(_:)(1u);
  if (v52[0] == 2)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v16 = v52[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v16);
  unint64_t v17 = v53;
  if (!v53)
  {
    Hasher._combine(_:)(0);
    uint64_t v21 = v52;
    goto LABEL_22;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v17 + 16));
  unint64_t v18 = *(void *)(v17 + 16);
  if (!v18)
  {
    outlined init with take of LocalePreferences?((uint64_t)v71, (uint64_t)v51);
    uint64_t v21 = v51;
LABEL_22:
    outlined retain of LocalePreferences(v21);
    if (!v54) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v19 = v17 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v19 += 16;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  if (!v54)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v55) {
      goto LABEL_18;
    }
LABEL_24:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = v56;
    if (!v56) {
      goto LABEL_19;
    }
    goto LABEL_25;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v55) {
    goto LABEL_24;
  }
LABEL_18:
  Hasher._combine(_:)(0);
  uint64_t v20 = v56;
  if (!v56)
  {
LABEL_19:
    Hasher._combine(_:)(0);
    goto LABEL_26;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v8, v20);
  swift_bridgeObjectRelease();
LABEL_26:
  uint64_t v22 = v57;
  if (v57)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v8, v22);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v23 = v58;
  uint64_t v24 = v59;
  uint64_t v26 = v60;
  uint64_t v25 = v61;
  uint64_t v27 = v62;
  if (v58)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v28 = v24;
    long long v29 = v26;
    uint64_t v30 = v25;
    uint64_t v31 = v27;
    uint64_t v32 = v23;
    _CFObject.hash(into:)();
    uint64_t v50 = v27;
    if (v24) {
      goto LABEL_31;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v38 = v27;
    long long v39 = v24;
    long long v40 = v26;
    long long v41 = v25;
    uint64_t v50 = v27;
    if (v24)
    {
LABEL_31:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v33 = v24;
      _CFObject.hash(into:)();

      if (v26) {
        goto LABEL_32;
      }
      goto LABEL_37;
    }
  }
  Hasher._combine(_:)(0);
  if (v26)
  {
LABEL_32:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v34 = v26;
    _CFObject.hash(into:)();

    if (v25) {
      goto LABEL_33;
    }
LABEL_38:
    Hasher._combine(_:)(0);
    uint64_t v36 = v50;
    if (v50) {
      goto LABEL_34;
    }
    goto LABEL_39;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  if (!v25) {
    goto LABEL_38;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v35 = v25;
  _CFObject.hash(into:)();

  uint64_t v36 = v50;
  if (v50)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v37 = v36;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  uint64_t v37 = 0;
LABEL_40:

  long long v42 = v63;
  if (v42)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(v8, v42);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v43 = v64;
  if (!v64)
  {
    Hasher._combine(_:)(0);
    if (v65) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(v8, v43);
  swift_bridgeObjectRelease();
  if (!v65) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v66 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v44 = v66 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v44);
  }
  if (v67 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v45 = v67 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v45);
  }
  if (v68 == 2)
  {
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = v68 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v46);
  if (v69 == 2)
  {
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v48 = v69 & 1;
    Hasher._combine(_:)(1u);
    uint64_t v47 = v48;
  }
  Hasher._combine(_:)(v47);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v71, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease_n();
}

uint64_t static Date.VerbatimFormatStyle.Attributed.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  id v12[2] = *(_OWORD *)(a1 + 32);
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a2 + 32);
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  return specialized static Date.VerbatimFormatStyle.== infix(_:_:)(v12, v9) & 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance Date.VerbatimFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Date.VerbatimFormatStyle.Attributed.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t Date.VerbatimFormatStyle.Attributed.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<Date.VerbatimFormatStyle.Attributed.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = *(_OWORD *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = *(_OWORD *)(v2 + 16);
  v12[1] = *(_OWORD *)v2;
  id v12[2] = v10;
  long long v12[3] = v12[0];
  uint64_t v13 = v9;
  uint64_t v14 = v8;
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int Date.VerbatimFormatStyle.Attributed.hashValue.getter()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned char *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  Swift::UInt v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  void *v46;
  unsigned char v47[144];
  unsigned char v48[8];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  void v66[18];
  unsigned char v67[144];
  unsigned char v68[144];
  unsigned char v69[80];

  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v6(v69, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v69, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  long long v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if (v10(v9, v4))
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v66, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v66, (uint64_t)v67);
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v68);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v68) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v48);
  Hasher._combine(_:)(1u);
  if (v48[0] == 2)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v48[0] & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  uint64_t v15 = v49;
  if (!v49)
  {
    Hasher._combine(_:)(0);
    uint64_t v20 = v48;
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16)
  {
    outlined init with take of LocalePreferences?((uint64_t)v67, (uint64_t)v47);
    uint64_t v20 = v47;
LABEL_23:
    outlined retain of LocalePreferences(v20);
    if (!v50) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v50)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v51) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    unint64_t v18 = v52;
    if (!v52) {
      goto LABEL_19;
    }
LABEL_26:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = v53;
    if (!v53) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
LABEL_25:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v18 = v52;
  if (v52) {
    goto LABEL_26;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  unint64_t v19 = v53;
  if (!v53)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_28;
  }
LABEL_27:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v19);
  swift_bridgeObjectRelease();
LABEL_28:
  uint64_t v22 = v54;
  uint64_t v21 = v55;
  uint64_t v24 = v56;
  uint64_t v23 = v57;
  uint64_t v25 = v58;
  if (v54)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v26 = v21;
    uint64_t v27 = v24;
    uint64_t v28 = v23;
    long long v29 = v25;
    uint64_t v30 = v22;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v31 = v25;
    uint64_t v32 = v21;
    uint64_t v33 = v24;
    uint64_t v34 = v23;
  }
  uint64_t v46 = v22;
  if (v21)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v35 = v21;
    _CFObject.hash(into:)();

    if (v24) {
      goto LABEL_33;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v24)
    {
LABEL_33:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v36 = v24;
      _CFObject.hash(into:)();

      if (v23) {
        goto LABEL_34;
      }
LABEL_38:
      Hasher._combine(_:)(0);
      if (v25) {
        goto LABEL_35;
      }
      goto LABEL_39;
    }
  }
  Hasher._combine(_:)(0);
  if (!v23) {
    goto LABEL_38;
  }
LABEL_34:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v37 = v23;
  _CFObject.hash(into:)();

  if (v25)
  {
LABEL_35:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v38 = v25;
    _CFObject.hash(into:)();

    goto LABEL_40;
  }
LABEL_39:
  Hasher._combine(_:)(0);
  uint64_t v38 = 0;
LABEL_40:

  long long v39 = v59;
  if (v39)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v69, v39);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v40 = v60;
  if (!v60)
  {
    Hasher._combine(_:)(0);
    if (v61) {
      goto LABEL_45;
    }
LABEL_47:
    Hasher._combine(_:)(0);
    goto LABEL_48;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v69, v40);
  swift_bridgeObjectRelease();
  if (!v61) {
    goto LABEL_47;
  }
LABEL_45:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_48:
  if (v62 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v41 = v62 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v63 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v42 = v63 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
  }
  if (v64 == 2)
  {
    long long v43 = 0;
  }
  else
  {
    long long v43 = v64 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  if (v65 == 2)
  {
    long long v44 = 0;
  }
  else
  {
    uint64_t v45 = v65 & 1;
    Hasher._combine(_:)(1u);
    long long v44 = v45;
  }
  Hasher._combine(_:)(v44);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t Date.VerbatimFormatStyle.Attributed.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<Date.VerbatimFormatStyle.Attributed.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v9 = v15;
    uint64_t v10 = v16;
    long long v12 = v14[1];
    long long v11 = v14[2];
    *(_OWORD *)a2 = v14[0];
    *(_OWORD *)(a2 + 16) = v12;
    *(_OWORD *)(a2 + 32) = v11;
    *(void *)(a2 + 48) = v9;
    *(void *)(a2 + 56) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance Date.VerbatimFormatStyle.Attributed@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Date.VerbatimFormatStyle.Attributed.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance Date.VerbatimFormatStyle.Attributed(void *a1)
{
  return Date.VerbatimFormatStyle.Attributed.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Date.VerbatimFormatStyle.Attributed()
{
  void (*v12)(void *__return_ptr, uint64_t, uint64_t);
  Swift::UInt8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  Swift::UInt v40;
  Swift::UInt v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  void v64[18];
  unsigned char v65[144];
  unsigned char v66[144];
  unsigned char v67[80];

  uint64_t v1 = v0[1];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  Hasher.init(_seed:)();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 112);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  swift_unknownObjectRetain();
  v6(v67, ObjectType, v1);
  swift_unknownObjectRelease();
  uint64_t v7 = swift_getObjectType();
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v2 + 120);
  swift_unknownObjectRetain();
  v8(v67, v7, v2);
  swift_unknownObjectRelease();
  if (!v3)
  {
    Hasher._combine(_:)(0);
    goto LABEL_8;
  }
  Hasher._combine(_:)(1u);
  uint64_t v9 = swift_getObjectType();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 48);
  swift_unknownObjectRetain_n();
  if (v10(v9, v4))
  {
    Swift::UInt8 v11 = 1;
LABEL_7:
    Hasher._combine(_:)(v11);
    swift_unknownObjectRelease_n();
    goto LABEL_8;
  }
  Hasher._combine(_:)(0);
  (*(void (**)(uint64_t, uint64_t))(v4 + 64))(v9, v4);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  long long v12 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 464);
  swift_unknownObjectRetain();
  v12(v64, v9, v4);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v64, (uint64_t)v65);
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)v66);
  if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v66) == 1)
  {
    Swift::UInt8 v11 = 0;
    goto LABEL_7;
  }
  outlined init with take of LocalePreferences?((uint64_t)v65, (uint64_t)&v46);
  Hasher._combine(_:)(1u);
  if (v46 == 2)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = v46 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  uint64_t v15 = v47;
  if (!v47)
  {
    Hasher._combine(_:)(0);
LABEL_22:
    outlined retain of LocalePreferences(&v46);
    if (!v48) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v15 + 16));
  uint64_t v16 = *(void *)(v15 + 16);
  if (!v16) {
    goto LABEL_22;
  }
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined copy of LocalePreferences?);
  swift_bridgeObjectRetain();
  unint64_t v17 = v15 + 40;
  do
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v17 += 16;
    --v16;
  }
  while (v16);
  swift_bridgeObjectRelease();
  if (!v48)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    if (!v49) {
      goto LABEL_18;
    }
    goto LABEL_24;
  }
LABEL_23:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (!v49)
  {
LABEL_18:
    Hasher._combine(_:)(0);
    unint64_t v18 = v50;
    if (!v50) {
      goto LABEL_19;
    }
LABEL_25:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v18);
    swift_bridgeObjectRelease();
    unint64_t v19 = v51;
    if (!v51) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
LABEL_24:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v18 = v50;
  if (v50) {
    goto LABEL_25;
  }
LABEL_19:
  Hasher._combine(_:)(0);
  unint64_t v19 = v51;
  if (!v51)
  {
LABEL_20:
    Hasher._combine(_:)(0);
    goto LABEL_27;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v19);
  swift_bridgeObjectRelease();
LABEL_27:
  uint64_t v21 = v52;
  uint64_t v20 = v53;
  uint64_t v23 = v54;
  uint64_t v22 = v55;
  uint64_t v24 = v56;
  if (v52)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v25 = v20;
    uint64_t v26 = v23;
    uint64_t v27 = v22;
    uint64_t v28 = v24;
    long long v29 = v21;
    _CFObject.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v30 = v24;
    uint64_t v31 = v20;
    uint64_t v32 = v23;
    uint64_t v33 = v22;
  }
  uint64_t v45 = v21;
  if (v20)
  {
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v34 = v20;
    _CFObject.hash(into:)();

    if (v23) {
      goto LABEL_32;
    }
  }
  else
  {
    Hasher._combine(_:)(0);
    if (v23)
    {
LABEL_32:
      Hasher._combine(_:)(1u);
      type metadata accessor for CFDictionaryRef(0);
      lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
      uint64_t v35 = v23;
      _CFObject.hash(into:)();

      if (v22) {
        goto LABEL_33;
      }
LABEL_37:
      Hasher._combine(_:)(0);
      if (v24) {
        goto LABEL_34;
      }
      goto LABEL_38;
    }
  }
  Hasher._combine(_:)(0);
  if (!v22) {
    goto LABEL_37;
  }
LABEL_33:
  Hasher._combine(_:)(1u);
  type metadata accessor for CFDictionaryRef(0);
  lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
  uint64_t v36 = v22;
  _CFObject.hash(into:)();

  if (v24)
  {
LABEL_34:
    Hasher._combine(_:)(1u);
    type metadata accessor for CFDictionaryRef(0);
    lazy protocol witness table accessor for type CFDictionaryRef and conformance CFDictionaryRef();
    uint64_t v37 = v24;
    _CFObject.hash(into:)();

    goto LABEL_39;
  }
LABEL_38:
  Hasher._combine(_:)(0);
  uint64_t v37 = 0;
LABEL_39:

  uint64_t v38 = v57;
  if (v38)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)((uint64_t)v67, v38);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  long long v39 = v58;
  if (!v58)
  {
    Hasher._combine(_:)(0);
    if (v59) {
      goto LABEL_44;
    }
LABEL_46:
    Hasher._combine(_:)(0);
    goto LABEL_47;
  }
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v67, v39);
  swift_bridgeObjectRelease();
  if (!v59) {
    goto LABEL_46;
  }
LABEL_44:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_47:
  if (v60 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v40 = v60 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v40);
  }
  if (v61 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    long long v41 = v61 & 1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v41);
  }
  if (v62 == 2)
  {
    long long v42 = 0;
  }
  else
  {
    long long v42 = v62 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v42);
  if (v63 == 2)
  {
    long long v43 = 0;
  }
  else
  {
    long long v44 = v63 & 1;
    Hasher._combine(_:)(1u);
    long long v43 = v44;
  }
  Hasher._combine(_:)(v43);
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  outlined retain of LocalePreferences?((uint64_t)v65, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, _DWORD))outlined consume of LocalePreferences?);
  swift_unknownObjectRelease_n();
LABEL_8:
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 56);
  long long v6 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v6;
  id v12[2] = *(_OWORD *)(a1 + 32);
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  long long v7 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v7;
  v9[2] = *(_OWORD *)(a2 + 32);
  uint64_t v10 = v4;
  uint64_t v11 = v5;
  return specialized static Date.VerbatimFormatStyle.== infix(_:_:)(v12, v9) & 1;
}

uint64_t Date.VerbatimFormatStyle.attributedStyle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v1 + 56);
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 56) = v3;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();

  return swift_unknownObjectRetain();
}

void Date.VerbatimFormatStyle.consuming(_:startingAt:in:)(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
  if (a1 >> 14 >= a2 >> 14)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(unsigned char *)(a3 + 16) = 1;
    return;
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = Date.ParseStrategy.formatter.getter();
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = String.subscript.getter();
    if ((v5 ^ v6) < 0x4000
      || (*(unsigned char *)(v4 + 24) & 1) == 0
      && (Substring.subscript.getter(), char v7 = Character.isWhitespace.getter(), swift_bridgeObjectRelease(), (v7 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
LABEL_15:
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    lazy protocol witness table accessor for type Substring and conformance Substring();
    swift_bridgeObjectRetain();
    uint64_t v8 = String.init<A>(_:)();
    unint64_t v10 = v9;
    udat_getCalendar();
    ucal_clone();
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _copyCollectionToContiguousArray<A>(_:)(v8, v10);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v12 = String.Index.utf16Offset<A>(in:)();
    if (v12 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else
    {
      uint64_t v13 = v12;
      if (v12 <= 0x7FFFFFFF)
      {
        int v18 = v12;
        if (!(v11[2] >> 31))
        {
          udat_parseCalendar();
          swift_release();
          if (v13 != v18)
          {
            ucal_getMillis();
            double v15 = v14 / 1000.0 + -978307200.0;
            ucal_close();
            swift_bridgeObjectRelease();
            lazy protocol witness table accessor for type Substring and conformance Substring();
            uint64_t v16 = String.Index.init<A>(utf16Offset:in:)();
            swift_bridgeObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_release();
            *(void *)a3 = v16;
            *(double *)(a3 + 8) = v15;
            *(unsigned char *)(a3 + 16) = 0;
            return;
          }
          ucal_close();
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
LABEL_19:
        __break(1u);
      }
    }
    __break(1u);
    goto LABEL_19;
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
LABEL_16:
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void protocol witness for CustomConsumingRegexComponent.consuming(_:startingAt:in:) in conformance Date.VerbatimFormatStyle(unint64_t a1@<X2>, unint64_t a2@<X4>, uint64_t a3@<X8>)
{
}

uint64_t protocol witness for RegexComponent.regex.getter in conformance Date.VerbatimFormatStyle(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();

  return MEMORY[0x1F4188350](a1, v2);
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.discreteInput(before:)(Foundation::Date before)
{
  uint64_t v4 = v2;
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*v1;
  uint64_t v6 = *((void *)v3 + 6);
  uint64_t v7 = *((void *)v3 + 7);
  long long v8 = v3[1];
  long long v13 = *v3;
  long long v14 = v8;
  long long v15 = v3[2];
  uint64_t v16 = v6;
  uint64_t v17 = v7;
  Swift::Double time = v5._time;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.VerbatimFormatStyle.bound(for:isLower:)(v5, (Swift::Bool)&time);
  int v9 = v19;
  if (v19 == 2)
  {
    double v10 = 0.0;
  }
  else
  {
    double v10 = v18;
    if (v19)
    {
      double v11 = 0.0 - v18;
      if (0.0 - v18 < INFINITY) {
        *(void *)&v11 += (*(uint64_t *)&v11 >> 63) | 1;
      }
      double v10 = -v11;
    }
  }
  *(double *)uint64_t v4 = v10;
  *(unsigned char *)(v4 + 8) = v9 == 2;
  result.Swift::Int value = *(Foundation::Date *)&v10;
  return result;
}

Swift::tuple_bound_Foundation_Date_includedInRangeOfInput_Bool_optional __swiftcall Date.VerbatimFormatStyle.bound(for:isLower:)(Foundation::Date a1, Swift::Bool isLower)
{
  char v5 = v2;
  uint64_t v6 = v3;
  uint64_t v7 = *(void *)isLower;
  long long v8 = v4[3];
  long long v24 = v4[2];
  long long v25 = v8;
  long long v9 = v4[1];
  long long v22 = *v4;
  long long v23 = v9;
  long long v20 = v22;
  long long v21 = v9;
  long long v26 = *v4;
  long long v27 = v9;
  outlined retain of Locale((uint64_t)&v27);
  outlined retain of Locale((uint64_t)&v26);
  Calendar.timeZone.setter((uint64_t *)&v20);
  long long v20 = v21;
  uint64_t v19 = v7;
  uint64_t v10 = one-time initialization token for updateScheduleCache;
  uint64_t v11 = swift_unknownObjectRetain();
  if (v10 != -1) {
    uint64_t v11 = swift_once();
  }
  uint64_t v12 = static ICUDateFormatter.DateFormatInfo.updateScheduleCache;
  MEMORY[0x1F4188790](v11);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  partial apply for closure #1 in static ICUDateFormatter.DateFormatInfo.cachedUpdateSchedule(for:)((uint64_t *)(v12 + 16), (uint64_t)&v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
  swift_release();
  uint64_t v15 = v17;
  char v16 = v18;
  Calendar.bound(for:isLower:updateSchedule:)((double *)&v19, v5 & 1, &v15, v6);
  swift_unknownObjectRelease();
  char v13 = swift_unknownObjectRelease();
  result.value.bound._Swift::Double time = v14;
  result.value.includedInRangeOfInput = v13;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.discreteInput(after:)(Foundation::Date after)
{
  uint64_t v4 = v2;
  *(Foundation::Date *)&v5._Swift::Double time = (Foundation::Date)*v1;
  uint64_t v6 = *((void *)v3 + 6);
  uint64_t v7 = *((void *)v3 + 7);
  long long v8 = v3[1];
  long long v12 = *v3;
  long long v13 = v8;
  long long v14 = v3[2];
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  Swift::Double time = v5._time;
  Foundation::Date_optional result = (Foundation::Date_optional)Date.VerbatimFormatStyle.bound(for:isLower:)(v5, (Swift::Bool)&time);
  int v9 = v18;
  if (v18 == 2)
  {
    double v10 = 0.0;
  }
  else
  {
    double v10 = v17;
    if (v18)
    {
      double v10 = v17 + 0.0;
      if (v17 + 0.0 < INFINITY) {
        *(void *)&v10 += (*(uint64_t *)&v10 >> 63) | 1;
      }
    }
  }
  *(double *)uint64_t v4 = v10;
  *(unsigned char *)(v4 + 8) = v9 == 2;
  result.Swift::Int value = *(Foundation::Date *)&v10;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.Swift::Int value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.Swift::Int value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.VerbatimFormatStyle(double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.VerbatimFormatStyle(double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(Foundation::Date before)
{
  char v2 = Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(v1, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(before:));
  result.Swift::Int value = *(Foundation::Date *)&v3;
  result.is_nil = v2;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.discreteInput(after:)(Foundation::Date after)
{
  char v2 = Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(v1, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(after:));
  result.Swift::Int value = *(Foundation::Date *)&v3;
  result.is_nil = v2;
  return result;
}

uint64_t Date.VerbatimFormatStyle.Attributed.discreteInput(before:)(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((void *)v2 + 6);
  uint64_t v5 = *((void *)v2 + 7);
  long long v6 = v2[1];
  long long v9 = *v2;
  long long v10 = v6;
  long long v11 = v2[2];
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  uint64_t v8 = v3;
  return a2(&v8);
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.input(before:)(Foundation::Date before)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 1;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v11 >= v4;
  double v8 = v11;
  if (v11 >= v4) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.Swift::Int value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

Foundation::Date_optional __swiftcall Date.VerbatimFormatStyle.Attributed.input(after:)(Foundation::Date after)
{
  uint64_t v3 = v2;
  double v10 = *v1;
  double v4 = v10;
  char v9 = 0;
  static Calendar.nextAccuracyStep(for:direction:)(&v10, &v9, &v11);
  Swift::Double v6 = v11;
  BOOL v7 = v4 >= v11;
  double v8 = v11;
  if (v4 >= v11) {
    double v8 = 0.0;
  }
  *(double *)uint64_t v3 = v8;
  *(unsigned char *)(v3 + 8) = v7;
  result.Swift::Int value = *(Foundation::Date *)&v6;
  result.is_nil = v5;
  return result;
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(a1, a2, a3, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(before:));
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(after:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(a1, a2, a3, (uint64_t (*)(uint64_t *))Date.VerbatimFormatStyle.discreteInput(after:));
}

uint64_t protocol witness for DiscreteFormatStyle.discreteInput(before:) in conformance Date.VerbatimFormatStyle.Attributed(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t *))
{
  uint64_t v5 = *a1;
  uint64_t v6 = *((void *)v4 + 6);
  uint64_t v7 = *((void *)v4 + 7);
  long long v8 = v4[1];
  long long v11 = *v4;
  long long v12 = v8;
  long long v13 = v4[2];
  uint64_t v14 = v6;
  uint64_t v15 = v7;
  uint64_t v10 = v5;
  return a4(&v10);
}

double protocol witness for DiscreteFormatStyle.input(before:) in conformance Date.VerbatimFormatStyle.Attributed(double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.Attributed.input(before:)(*(Foundation::Date *)&a1);
  return result;
}

double protocol witness for DiscreteFormatStyle.input(after:) in conformance Date.VerbatimFormatStyle.Attributed(double a1)
{
  *(void *)&double result = (unint64_t)Date.VerbatimFormatStyle.Attributed.input(after:)(*(Foundation::Date *)&a1);
  return result;
}

uint64_t specialized static Date.VerbatimFormatStyle.== infix(_:_:)(long long *a1, long long *a2)
{
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  uint64_t v4 = *((void *)a1 + 6);
  uint64_t v5 = *((void *)a1 + 7);
  uint64_t v6 = *((void *)a2 + 4);
  uint64_t v7 = *((void *)a2 + 5);
  uint64_t v8 = *((void *)a2 + 6);
  uint64_t v9 = *((void *)a2 + 7);
  long long v10 = *a1;
  long long v13 = a2[1];
  long long v14 = a1[1];
  long long v15 = *a2;
  long long v16 = v10;
  if ((specialized static TimeZone.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) == 0) {
    return 0;
  }
  long long v15 = v13;
  long long v16 = v14;
  if ((specialized static Calendar.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15) & 1) == 0) {
    return 0;
  }
  if (v2)
  {
    *(void *)&long long v16 = v2;
    *((void *)&v16 + 1) = v3;
    if (v6)
    {
      *(void *)&long long v15 = v6;
      *((void *)&v15 + 1) = v7;
      swift_unknownObjectRetain_n();
      char v11 = specialized static Locale.== infix(_:_:)((uint64_t)&v16, (uint64_t)&v15);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_8;
      }
      return 0;
    }
    swift_unknownObjectRetain();
LABEL_12:
    swift_unknownObjectRelease();
    return 0;
  }
  if (v6) {
    goto LABEL_12;
  }
LABEL_8:
  if (v4 == v8 && v5 == v9) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.CodingKeys and conformance Date.VerbatimFormatStyle.CodingKeys);
  }
  return result;
}

uint64_t specialized Date.VerbatimFormatStyle.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656E6F5A656D6974 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7261646E656C6163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x615074616D726F66 && a2 == 0xED00006E72657474)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t specialized Date.VerbatimFormatStyle.Attributed.subscript.setter(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - v2, v1);
  return swift_setAtWritableKeyPath();
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed.CodingKeys and conformance Date.VerbatimFormatStyle.Attributed.CodingKeys);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle);
}

unint64_t lazy protocol witness table accessor for type Date.ParseStrategy and conformance Date.ParseStrategy()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy;
  if (!lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.ParseStrategy and conformance Date.ParseStrategy);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed(void *a1, uint64_t a2, uint64_t a3)
{
  return instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(a1, a2, a3, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed, (uint64_t (*)(void))lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
}

uint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed()
{
  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed;
  if (!lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.VerbatimFormatStyle and conformance Date.VerbatimFormatStyle();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for Date.VerbatimFormatStyle.Attributed(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Date.VerbatimFormatStyle.Attributed and conformance Date.VerbatimFormatStyle.Attributed();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_181D9E2D8(uint64_t a1)
{
  swift_retain();
  specialized Date.VerbatimFormatStyle.Attributed.subscript.setter(a1);

  return swift_release();
}

uint64_t sub_181D9E330()
{
  return 8;
}

void *sub_181D9E33C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

ValueMetadata *type metadata accessor for Date.VerbatimFormatStyle()
{
  return &type metadata for Date.VerbatimFormatStyle;
}

uint64_t destroy for Date.VerbatimFormatStyle()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Date.VerbatimFormatStyle(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = v5;
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = v6;
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Date.VerbatimFormatStyle(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Date.VerbatimFormatStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Date.VerbatimFormatStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Date.VerbatimFormatStyle.Attributed()
{
  return &type metadata for Date.VerbatimFormatStyle.Attributed;
}

unsigned char *storeEnumTagSinglePayload for Date.VerbatimFormatStyle.Attributed.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x181D9E680);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for Date.VerbatimFormatStyle.Attributed.CodingKeys()
{
  return &unk_1ECA487D0;
}

unsigned char *storeEnumTagSinglePayload for Date.VerbatimFormatStyle.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181D9E784);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Date.VerbatimFormatStyle.CodingKeys()
{
  return &unk_1ECA48910;
}

uint64_t specialized closure #1 in Data.init(capacity:initializingWith:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  if (!a1)
  {
    uint64_t v15 = 0;
    uint64_t v16 = a3;
    uint64_t v17 = 0;
    closure #1 in String.data(using:allowLossyConversion:)((uint64_t)&v15, a4, a5, a6);
    if (!v7)
    {
      uint64_t result = swift_bridgeObjectRelease();
      if (!v17)
      {
        *a7 = 0;
        return result;
      }
      goto LABEL_13;
    }
LABEL_9:
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  uint64_t v15 = a1;
  uint64_t v16 = a3;
  uint64_t v17 = 0;
  uint64_t result = closure #1 in String.data(using:allowLossyConversion:)((uint64_t)&v15, a4, a5, a6);
  if (v7) {
    goto LABEL_9;
  }
  uint64_t v12 = a2 - a1;
  uint64_t v13 = v17;
  int64_t v14 = v12 - v17;
  if (v12 >= v17)
  {
    if (v12 == v17)
    {
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      *a7 = v13;
      return result;
    }
    if (v14 >= 1)
    {
      bzero((void *)(a1 + v17), v14);
      goto LABEL_7;
    }
    goto LABEL_14;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t specialized Data.init(capacity:initializingWith:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain_n();
  uint64_t v9 = specialized Data.init(count:)(a1);
  uint64_t v52 = v9;
  unint64_t v53 = v10;
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  switch(v10 >> 62)
  {
    case 1uLL:
      uint64_t v49 = v4;
      uint64_t v14 = v10 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v15 = (int)v9;
      int64_t v16 = v9 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_36;
      }
      if (v16 < (int)v11) {
        goto LABEL_53;
      }
      uint64_t v17 = *(void *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v48 = v16 - (int)v11;
      if (!v17) {
        goto LABEL_34;
      }
      uint64_t v18 = *(void *)((v12 & 0x3FFFFFFFFFFFFFFFLL) + 0x28);
      BOOL v19 = __OFSUB__((int)v11, v18);
      uint64_t v20 = (int)v11 - v18;
      if (v19) {
        goto LABEL_56;
      }
      unint64_t v21 = v17 + v20;
      goto LABEL_35;
    case 2uLL:
      uint64_t v49 = v4;
      uint64_t v22 = v10 & 0x3FFFFFFFFFFFFFFFLL;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_14;
      }
      uint64_t v24 = *(void *)(v11 + 16);
      uint64_t v23 = *(void *)(v11 + 24);
      uint64_t v25 = *(void *)(v22 + 16);
      if (!v25) {
        goto LABEL_31;
      }
      uint64_t v26 = *(void *)(v22 + 40);
      BOOL v19 = __OFSUB__(v24, v26);
      uint64_t v27 = v24 - v26;
      if (v19) {
        goto LABEL_55;
      }
      int64_t v16 = v25 + v27;
      uint64_t v15 = v23 - v24;
      if (__OFSUB__(v23, v24)) {
        goto LABEL_33;
      }
      break;
    case 3uLL:
      memset(v50, 0, 15);
      swift_bridgeObjectRetain();
      specialized closure #1 in Data.init(capacity:initializingWith:)((uint64_t)v50, (uint64_t)v50, a1, a2, a3, a4, &v51);
      if (v4)
      {
        outlined consume of Data._Representation(v11, v12);
        return swift_bridgeObjectRelease_n();
      }
      uint64_t v13 = 0;
LABEL_27:
      uint64_t v39 = v51;
      goto LABEL_46;
    default:
      *(void *)uint64_t v50 = v9;
      LOWORD(v50[2]) = v10;
      BYTE2(v50[2]) = BYTE2(v10);
      HIBYTE(v50[2]) = BYTE3(v10);
      LOBYTE(v50[3]) = BYTE4(v10);
      BYTE1(v50[3]) = BYTE5(v10);
      BYTE2(v50[3]) = BYTE6(v10);
      swift_bridgeObjectRetain();
      specialized closure #1 in Data.init(capacity:initializingWith:)((uint64_t)v50, (uint64_t)v50 + BYTE6(v12), a1, a2, a3, a4, &v51);
      if (v4) {
        return swift_bridgeObjectRelease_n();
      }
      uint64_t v13 = BYTE2(v50[3]);
      uint64_t v52 = *(void *)v50;
      unint64_t v53 = v50[2] | ((unint64_t)LOBYTE(v50[3]) << 32) | ((unint64_t)BYTE1(v50[3]) << 40) | ((unint64_t)BYTE2(v50[3]) << 48);
      goto LABEL_27;
  }
  do
  {
    type metadata accessor for __DataStorage();
    swift_allocObject();
    vm_address_t v28 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v16, v15, 1, 0, 0, v24);
    swift_release();
    uint64_t v22 = v28;
LABEL_14:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v30 = *(void *)(v11 + 16);
    uint64_t v31 = *(void *)(v11 + 24);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for Data.RangeReference();
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v30;
      *(void *)(v32 + 24) = v31;
      swift_release();
      uint64_t v11 = v32;
    }
    uint64_t v33 = *(void *)(v22 + 16);
    if (!v33)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v34 = *(void *)(v22 + 40);
    BOOL v19 = __OFSUB__(v30, v34);
    uint64_t v35 = v30 - v34;
    if (v19) {
      goto LABEL_49;
    }
    uint64_t v36 = v31 - v30;
    if (__OFSUB__(v31, v30)) {
      goto LABEL_51;
    }
    if (*(void *)(v22 + 24) < v36) {
      uint64_t v36 = *(void *)(v22 + 24);
    }
    uint64_t v37 = v33 + v35;
    uint64_t v24 = v33 + v35 + v36;
    swift_bridgeObjectRetain();
    specialized closure #1 in Data.init(capacity:initializingWith:)(v37, v24, a1, a2, a3, a4, v50);
    if (v49)
    {
      swift_bridgeObjectRelease_n();
      swift_release();
      return swift_release();
    }
    uint64_t v39 = *(void *)v50;
    uint64_t v52 = v11;
    unint64_t v53 = v22 | 0x8000000000000000;
    uint64_t v40 = *(void *)(v11 + 16);
    uint64_t v23 = *(void *)(v11 + 24);
    uint64_t v13 = v23 - v40;
    if (!__OFSUB__(v23, v40)) {
      goto LABEL_46;
    }
    __break(1u);
LABEL_31:
    int64_t v16 = 0;
    uint64_t v15 = v23 - v24;
  }
  while (!__OFSUB__(v23, v24));
LABEL_33:
  __break(1u);
LABEL_34:
  unint64_t v21 = 0;
LABEL_35:
  type metadata accessor for __DataStorage();
  swift_allocObject();
  vm_address_t v41 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v21, v48, 1, 0, 0, v15);
  swift_release();
  uint64_t v14 = v41;
LABEL_36:
  int64_t v42 = v16 - v15;
  if (v16 < v15)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v43 = *(void *)(v14 + 16);
  if (!v43)
  {
LABEL_58:
    swift_bridgeObjectRelease_n();
    __break(1u);
    JUMPOUT(0x181D9F038);
  }
  uint64_t v44 = *(void *)(v14 + 40);
  BOOL v19 = __OFSUB__(v15, v44);
  uint64_t v45 = v15 - v44;
  if (v19)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
  }
  if (*(void *)(v14 + 24) < v42) {
    int64_t v42 = *(void *)(v14 + 24);
  }
  uint64_t v46 = v43 + v45;
  uint64_t v47 = v43 + v45 + v42;
  swift_bridgeObjectRetain();
  specialized closure #1 in Data.init(capacity:initializingWith:)(v46, v47, a1, a2, a3, a4, v50);
  if (!v49)
  {
    uint64_t v39 = *(void *)v50;
    uint64_t v52 = v11;
    unint64_t v53 = v14 | 0x4000000000000000;
    if (__OFSUB__(HIDWORD(v11), v11)) {
      goto LABEL_54;
    }
    uint64_t v13 = HIDWORD(v11) - (int)v11;
LABEL_46:
    if (v13 >= v39)
    {
      Data._Representation.replaceSubrange(_:with:count:)(v39, v13, 0, 0);
      swift_bridgeObjectRelease_n();
      return v52;
    }
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  swift_bridgeObjectRelease_n();
  return swift_release();
}

uint64_t PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.CollectionIndexSubscript, a8);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v5 = a2[5];
  uint64_t v69 = a2[3];
  uint64_t v70 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  id v67 = *(void (**)(char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v68 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v62 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v72 = (char *)v62 - v11;
  uint64_t v12 = a2[4];
  uint64_t v13 = a2[2];
  uint64_t v14 = swift_getAssociatedTypeWitness();
  uint64_t v73 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int64_t v16 = (char *)v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v62 - v19;
  uint64_t v21 = *a1;
  uint64_t v74 = v21;
  uint64_t v22 = v76;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v12 + 16))(&v74, v13, v12, v18);
  if (!v22)
  {
    long long v64 = v16;
    uint64_t v65 = v9;
    uint64_t v76 = v20;
    uint64_t v24 = v14;
    uint64_t v25 = AssociatedTypeWitness;
    uint64_t v74 = v21;
    uint64_t v26 = v72;
    (*(void (**)(uint64_t *, uint64_t))(v70 + 16))(&v74, v69);
    uint64_t v27 = a2[6];
    vm_address_t v28 = v65;
    long long v29 = v76;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v70 = v27;
    uint64_t v30 = v25;
    v62[1] = swift_getAssociatedConformanceWitness();
    int v63 = dispatch thunk of static Comparable.>= infix(_:_:)();
    uint64_t v31 = v67;
    uint64_t v32 = v26;
    uint64_t v33 = (void (*)(char *, uint64_t))*((void *)v67 + 1);
    v62[2] = (char *)v67 + 8;
    v33(v28, v30);
    uint64_t v34 = v68;
    (*((void (**)(char *, char *, uint64_t))v31 + 2))(v68, v32, v30);
    uint64_t v35 = v73;
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    uint64_t v37 = v64;
    uint64_t v69 = v24;
    v36(v64, v29, v24);
    if (v63)
    {
      uint64_t v38 = v69;
      dispatch thunk of Collection.endIndex.getter();
      int v63 = dispatch thunk of static Comparable.< infix(_:_:)();
      v33(v28, v30);
      uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
      uint64_t v39 = v35 + 8;
      v40(v37, v38);
      v33(v34, v30);
      id v67 = v40;
      if (v63)
      {
        uint64_t v73 = v39;
        vm_address_t v41 = v72;
        int64_t v42 = v76;
        uint64_t v43 = v69;
        uint64_t v44 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v46 = v45;
        uint64_t v47 = swift_getAssociatedTypeWitness();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v66, v46, v47);
        v44(&v74, 0);
        v33(v41, AssociatedTypeWitness);
        return ((uint64_t (*)(char *, uint64_t))v67)(v42, v43);
      }
      uint64_t v73 = v39 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v50 = v30;
      uint64_t v51 = v69;
    }
    else
    {
      uint64_t v48 = v37;
      uint64_t v49 = v69;
      id v67 = *(void (**)(char *, uint64_t))(v35 + 8);
      v67(v48, v69);
      v33(v34, v30);
      uint64_t v73 = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v50 = v30;
      uint64_t v51 = v49;
    }
    char v68 = (char *)v33;
    uint64_t v74 = 0;
    unint64_t v75 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v52._uint64_t countAndFlagsBits = 0x207865646E49;
    v52._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v52);
    _print_unlocked<A, B>(_:_:)();
    v53._unint64_t object = (void *)0x80000001823AF800;
    v53._uint64_t countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v53);
    uint64_t v54 = v65;
    uint64_t v55 = v76;
    dispatch thunk of Collection.startIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v56 = v68;
    ((void (*)(char *, uint64_t))v68)(v54, v50);
    v57._uint64_t countAndFlagsBits = 0x203C2E2E20;
    v57._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v57);
    dispatch thunk of Collection.endIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    ((void (*)(char *, uint64_t))v56)(v54, v50);
    v58._uint64_t countAndFlagsBits = 41;
    v58._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    uint64_t v59 = v74;
    unint64_t v60 = v75;
    lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
    swift_allocError();
    *(void *)uint64_t v61 = v59;
    *(void *)(v61 + 8) = v60;
    *(unsigned char *)(v61 + 16) = 2;
    swift_willThrow();
    ((void (*)(char *, uint64_t))v56)(v72, v50);
    return ((uint64_t (*)(char *, uint64_t))v67)(v55, v51);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionIndexSubscript<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_subscript<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.CollectionIndexSubscript, a8);
}

{
  return static PredicateExpressions.build_subscript<A, B>(_:_:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.CollectionRangeSubscript, a8);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.description.getter(uint64_t a1)
{
  return PredicateExpressions.CollectionIndexSubscript.description.getter(a1, (void *)0x80000001823AF840, 0x3A7865646E69202CLL);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

{
  uint64_t v1;
  unsigned char v3[24];
  uint64_t v4;

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.CollectionIndexSubscript<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void, void *, double);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  uint64_t v36 = a4;
  uint64_t v38 = a3;
  uint64_t v34 = a5;
  uint64_t v33 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v37 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v42 = v14;
  v39[0] = v14;
  v39[1] = v15;
  v39[2] = v16;
  uint64_t v40 = v17;
  vm_address_t v41 = v18;
  uint64_t v20 = v19(0, v39, v12);
  uint64_t v32 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v28 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v30 = v22;
  uint64_t v31 = a1;
  long long v29 = v20;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  uint64_t v23 = v37;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v30;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v30, v23, v42);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v25 = v29;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v24[*(int *)(v29 + 60)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  uint64_t v26 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v34, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v24, v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.CollectionIndexSubscript<>.init(from:), a5, a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.index.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 60));
}

uint64_t PredicateExpressions.CollectionRangeSubscript.init(wrapped:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.CollectionRangeSubscript, a8);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.init(wrapped:index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a9, a1);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a7;
  uint64_t v17 = a8(0, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9 + *(int *)(v17 + 60), a2, a4);
}

uint64_t PredicateExpressions.CollectionRangeSubscript.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v94 = a3;
  uint64_t v4 = *((void *)a2 + 6);
  uint64_t v5 = *((void *)a2 + 4);
  char v99 = a2;
  uint64_t v105 = (void (*)(void, void))*((void *)a2 + 2);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v102 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v96 = (char *)v86 - v7;
  uint64_t v98 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = type metadata accessor for Range();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v100 = v8;
  uint64_t v101 = v9;
  MEMORY[0x1F4188790](v8);
  long long v95 = (char *)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v86 - v12;
  MEMORY[0x1F4188790](v14);
  long long v103 = (char *)v86 - v15;
  uint64_t v16 = swift_checkMetadataState();
  uint64_t v104 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  double v18 = (char *)v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v86 - v20;
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v86 - v24;
  uint64_t v26 = *a1;
  uint64_t v106 = v26;
  uint64_t v27 = v108;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void (*)(void, void), uint64_t, double))(v5 + 16))(&v106, v105, v5, v23);
  if (v27) {
    return result;
  }
  uint64_t v105 = (void (*)(void, void))v21;
  uint64_t v106 = v26;
  stat_optional v92 = v18;
  uint64_t v93 = AssociatedTypeWitness;
  uint64_t v108 = v25;
  uint64_t v30 = v103;
  uint64_t v29 = v104;
  (*(void (**)(uint64_t *, void))(*((void *)v99 + 5) + 16))(&v106, *((void *)v99 + 3));
  uint64_t v89 = 0;
  uint64_t v31 = v96;
  uint64_t v32 = v108;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v33 = v93;
  LODWORD(v91) = dispatch thunk of static Comparable.>= infix(_:_:)();
  uint64_t v34 = *(void (**)(char *, uint64_t))(v102 + 8);
  v102 += 8;
  char v99 = v34;
  v34(v31, v33);
  uint64_t v35 = v101;
  uint64_t v37 = v101 + 16;
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
  uint64_t v90 = v13;
  v36(v13, v30, v100);
  uint64_t v38 = *(void (**)(void (*)(void, void), char *, uint64_t))(v29 + 16);
  uint64_t v39 = v105;
  v38(v105, v32, v16);
  if ((v91 & 1) == 0)
  {
    Swift::String v91 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
    v91((char *)v39, v16);
    uint64_t v105 = *(void (**)(void, void))(v35 + 8);
    v105(v90, v100);
    uint64_t v104 = (v29 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v101 = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v63 = v16;
    long long v64 = v108;
    uint64_t v65 = v93;
LABEL_9:
    uint64_t v106 = 0;
    unint64_t v107 = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v66._uint64_t countAndFlagsBits = 0x207865646E49;
    v66._unint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v66);
    _print_unlocked<A, B>(_:_:)();
    v67._unint64_t object = (void *)0x80000001823AF800;
    v67._uint64_t countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v67);
    char v68 = v96;
    dispatch thunk of Collection.startIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    uint64_t v69 = v99;
    v99(v68, v65);
    v70._uint64_t countAndFlagsBits = 0x202E2E2E20;
    v70._unint64_t object = (void *)0xE500000000000000;
    String.append(_:)(v70);
    dispatch thunk of Collection.endIndex.getter();
    _print_unlocked<A, B>(_:_:)();
    v69(v68, v65);
    v71._uint64_t countAndFlagsBits = 41;
    v71._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v71);
    uint64_t v73 = v106;
    unint64_t v72 = v107;
    lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
    swift_allocError();
    *(void *)uint64_t v74 = v73;
    *(void *)(v74 + 8) = v72;
    *(unsigned char *)(v74 + 16) = 2;
    swift_willThrow();
    v105(v103, v100);
    return v91(v64, v63);
  }
  v86[0] = v38;
  v86[1] = v29 + 16;
  uint64_t v87 = v36;
  uint64_t v88 = v37;
  dispatch thunk of Collection.endIndex.getter();
  uint64_t v40 = v90;
  uint64_t v41 = v93;
  char v42 = dispatch thunk of static Comparable.<= infix(_:_:)();
  v99(v31, v41);
  uint64_t v44 = *(void (**)(void, uint64_t))(v29 + 8);
  uint64_t v43 = v29 + 8;
  Swift::String v91 = (uint64_t (*)(char *, uint64_t))v44;
  v44((char *)v39, v16);
  uint64_t v46 = *(void (**)(void, void))(v35 + 8);
  uint64_t v45 = v35 + 8;
  uint64_t v47 = v40;
  uint64_t v48 = v100;
  uint64_t v105 = v46;
  v46(v47, v100);
  if ((v42 & 1) == 0)
  {
    uint64_t v104 = v43 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v101 = v45 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    long long v64 = v108;
    uint64_t v65 = v93;
    uint64_t v63 = v16;
    goto LABEL_9;
  }
  uint64_t v104 = v43;
  uint64_t v101 = v45;
  uint64_t v49 = v103;
  uint64_t v50 = &v103[*(int *)(v48 + 36)];
  uint64_t v51 = v108;
  uint64_t v52 = v48;
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v90 = v50;
  uint64_t v53 = v93;
  LOBYTE(v50) = dispatch thunk of static Comparable.>= infix(_:_:)();
  v99(v31, v53);
  uint64_t v54 = v95;
  v87(v95, v49, v48);
  uint64_t v55 = v92;
  ((void (*)(char *, char *, uint64_t))v86[0])(v92, v51, v16);
  if (v50)
  {
    uint64_t v56 = v54;
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v57 = v93;
    char v58 = dispatch thunk of static Comparable.<= infix(_:_:)();
    v99(v31, v57);
    uint64_t v59 = v55;
    unint64_t v60 = v91;
    v91(v59, v16);
    v105(v56, v52);
    if (v58)
    {
      uint64_t v61 = v103;
      uint64_t v62 = v108;
      dispatch thunk of Collection.subscript.getter();
      v105(v61, v52);
      return v60(v62, v16);
    }
  }
  else
  {
    v91(v55, v16);
    v105(v54, v52);
  }
  uint64_t v106 = 0;
  unint64_t v107 = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  v75._uint64_t countAndFlagsBits = 0x207865646E49;
  v75._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v75);
  uint64_t v76 = v31;
  uint64_t v77 = v93;
  _print_unlocked<A, B>(_:_:)();
  v78._unint64_t object = (void *)0x80000001823AF800;
  v78._uint64_t countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v78);
  uint64_t v79 = v108;
  dispatch thunk of Collection.startIndex.getter();
  _print_unlocked<A, B>(_:_:)();
  double v80 = v99;
  v99(v76, v77);
  v81._uint64_t countAndFlagsBits = 0x202E2E2E20;
  v81._unint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v81);
  dispatch thunk of Collection.endIndex.getter();
  _print_unlocked<A, B>(_:_:)();
  v80(v76, v77);
  v82._uint64_t countAndFlagsBits = 41;
  v82._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v82);
  uint64_t v84 = v106;
  unint64_t v83 = v107;
  lazy protocol witness table accessor for type PredicateError and conformance PredicateError();
  swift_allocError();
  *(void *)uint64_t v85 = v84;
  *(void *)(v85 + 8) = v83;
  *(unsigned char *)(v85 + 16) = 2;
  swift_willThrow();
  v105(v103, v100);
  return v91(v79, v16);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionRangeSubscript<A, B>@<X0>(uint64_t *a1@<X0>, void (*a2)(char *, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.CollectionRangeSubscript.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_subscript<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a9, a1);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a7;
  uint64_t v17 = a8(0, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a9 + *(int *)(v17 + 60), a2, a4);
}

uint64_t PredicateExpressions.CollectionRangeSubscript.description.getter(uint64_t a1)
{
  return PredicateExpressions.CollectionIndexSubscript.description.getter(a1, (void *)0x80000001823AF870, 0x3A65676E6172202CLL);
}

uint64_t PredicateExpressions.CollectionIndexSubscript.description.getter(uint64_t a1, void *a2, uint64_t a3)
{
  _StringGuts.grow(_:)(48);
  v5._uint64_t countAndFlagsBits = 0xD000000000000022;
  v5._unint64_t object = a2;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 41;
  v7._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t PredicateExpressions.CollectionRangeSubscript<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.CollectionRangeSubscript<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.CollectionIndexSubscript<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionRangeSubscript<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.CollectionRangeSubscript<>.init(from:), a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, uint64_t, void, void), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a6, a2[5], *(void *)(a3 - 24));
}

uint64_t PredicateExpressions.CollectionContainsCollection.other.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 76));
}

uint64_t PredicateExpressions.CollectionContainsCollection.init(base:other:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for PredicateExpressions.CollectionContainsCollection();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 76), a2, a4);
}

uint64_t PredicateExpressions.CollectionContainsCollection.evaluate(_:)(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[5];
  uint64_t v23 = a2[3];
  uint64_t v24 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v21 - v7;
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[2];
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = *a1;
  uint64_t v27 = v15;
  uint64_t v16 = v26;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, double))(v8 + 16))(&v27, v9, v8, v12);
  if (!v16)
  {
    uint64_t v17 = v10;
    uint64_t v26 = v11;
    uint64_t v18 = v22;
    uint64_t v27 = v15;
    (*(void (**)(uint64_t *, uint64_t))(v24 + 16))(&v27, v23);
    uint64_t v20 = v25;
    char v2 = Collection<>.contains<A>(_:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v17);
  }
  return v2 & 1;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.CollectionContainsCollection<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = PredicateExpressions.CollectionContainsCollection.evaluate(_:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

uint64_t PredicateExpressions.CollectionContainsCollection.description.getter()
{
  _StringGuts.grow(_:)(49);
  v0._unint64_t object = (void *)0x80000001823AF8A0;
  v0._uint64_t countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._uint64_t countAndFlagsBits = 0x3A726568746F202CLL;
  v1._unint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._uint64_t countAndFlagsBits = 41;
  v2._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t PredicateExpressions.CollectionContainsCollection<>.encode(to:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  if (!v1)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v3, v4);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
}

uint64_t PredicateExpressions.CollectionContainsCollection<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  uint64_t v35 = a4;
  uint64_t v37 = a3;
  uint64_t v33 = a5;
  uint64_t v32 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void *)(v10 - 8);
  *(double *)&long long v12 = MEMORY[0x1F4188790](v11);
  uint64_t v36 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v14;
  v38[0] = v14;
  v38[1] = v15;
  v38[2] = v16;
  uint64_t v39 = v17;
  long long v40 = v12;
  uint64_t v41 = v18;
  uint64_t v19 = type metadata accessor for PredicateExpressions.CollectionContainsCollection();
  uint64_t v31 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v27 - v20;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v29 = v21;
  uint64_t v30 = a1;
  uint64_t v28 = v19;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  uint64_t v22 = v36;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v23 = v29;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v29, v22, v42);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v38, v39);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v28;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v23[*(int *)(v28 + 76)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  uint64_t v25 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v33, v23, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v23, v24);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionIndexSubscript<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.CollectionRangeSubscript<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return PredicateExpressions.CollectionContainsCollection<>.init(from:)(a1, *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 24), a4);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionContainsCollection<A, B>(void *a1)
{
  return PredicateExpressions.CollectionContainsCollection<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.CollectionIndexSubscript(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.CollectionIndexSubscript(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181DA1B2CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionRangeSubscript<A, B>(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.CollectionIndexSubscript<A, B>(a1);
}

BOOL closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(int a1, char a2)
{
  if (a2) {
    int v2 = -1;
  }
  else {
    int v2 = -64;
  }
  return (v2 & a1) == 0;
}

uint64_t closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)(uint64_t result, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  if (a2 != a4) {
    return specialized String.init(_utf16:)(result, a2);
  }
  if (!a2)
  {
LABEL_10:
    uint64_t result = (uint64_t)a3;
    return specialized String.init(_utf16:)(result, a2);
  }
  uint64_t v4 = (unsigned __int16 *)result;
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v7 = a2 & ~(a2 >> 63);
  while (v7)
  {
    unsigned int v8 = *v5;
    int v9 = *v4;
    if (v8 != v9 && (v8 > 0x7F || v9 != (((0x3FFE000000000uLL >> ((v8 - 1) >> 1)) & 0x20) + v8))) {
      return specialized String.init(_utf16:)(result, a2);
    }
    --v7;
    ++v5;
    ++v4;
    if (!--v6) {
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

id NSProgress.estimatedTimeRemaining.getter()
{
  id result = objc_msgSend(v0, sel_estimatedTimeRemaining);
  int v2 = result;
  if (result)
  {
    objc_msgSend(result, sel_doubleValue);
    uint64_t v4 = v3;

    return (id)v4;
  }
  return result;
}

void key path getter for NSProgress.estimatedTimeRemaining : NSProgress(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_estimatedTimeRemaining);
  uint64_t v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel_doubleValue);
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)a2 = v6;
  *(unsigned char *)(a2 + 8) = v4 == 0;
}

void key path setter for NSProgress.estimatedTimeRemaining : NSProgress(uint64_t a1, void **a2)
{
  int v2 = *a2;
  if (*(unsigned char *)(a1 + 8))
  {
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, 0);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)a1);
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, v3);
  }
}

void NSProgress.estimatedTimeRemaining.setter(uint64_t a1, char a2)
{
  if (a2)
  {
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, 0);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)&a1);
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, v3);
  }
}

void (*NSProgress.estimatedTimeRemaining.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_estimatedTimeRemaining);
  uint64_t v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel_doubleValue);
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v4 == 0;
  return NSProgress.estimatedTimeRemaining.modify;
}

void NSProgress.estimatedTimeRemaining.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    int v2 = *(void **)(a1 + 16);
    objc_msgSend(v2, sel_setEstimatedTimeRemaining_, 0);
  }
  else
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, *(double *)a1);
    objc_msgSend(v1, sel_setEstimatedTimeRemaining_, v3);
  }
}

id NSProgress.throughput.getter()
{
  return NSProgress.throughput.getter((SEL *)&selRef_throughput);
}

void NSProgress.throughput.setter(uint64_t a1, char a2)
{
}

void (*NSProgress.throughput.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_throughput);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = objc_msgSend(v3, sel_integerValue);
  }
  else
  {
    id v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4 == 0;
  return NSProgress.throughput.modify;
}

void NSProgress.throughput.modify(uint64_t a1, uint64_t a2)
{
}

void (*NSProgress.fileTotalCount.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_fileTotalCount);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = objc_msgSend(v3, sel_integerValue);
  }
  else
  {
    id v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4 == 0;
  return NSProgress.fileTotalCount.modify;
}

void NSProgress.fileTotalCount.modify(uint64_t a1, uint64_t a2)
{
}

void key path getter for NSProgress.throughput : NSProgress(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  id v5 = v4;
  if (v4)
  {
    id v6 = objc_msgSend(v4, sel_integerValue);
  }
  else
  {
    id v6 = 0;
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = v5 == 0;
}

void key path setter for NSProgress.throughput : NSProgress(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  id v6 = *a2;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v7 = *a5;
    objc_msgSend(v6, v7, 0);
  }
  else
  {
    id v8 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, *(void *)a1);
    objc_msgSend(v6, *a5, v8);
  }
}

void (*NSProgress.fileCompletedCount.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = v1;
  id v3 = objc_msgSend(v1, sel_fileCompletedCount);
  id v4 = v3;
  if (v3)
  {
    id v5 = objc_msgSend(v3, sel_integerValue);
  }
  else
  {
    id v5 = 0;
  }
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v4 == 0;
  return NSProgress.fileCompletedCount.modify;
}

void NSProgress.fileCompletedCount.modify(uint64_t a1, uint64_t a2)
{
}

void NSProgress.throughput.modify(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = *(void **)(a1 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    id v5 = *a3;
    id v6 = *(void **)(a1 + 16);
    objc_msgSend(v6, v5, 0);
  }
  else
  {
    id v7 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithInteger_, *(void *)a1);
    objc_msgSend(v4, *a3, v7);
  }
}

id NSProgress.performAsCurrent<A>(withPendingUnitCount:using:)(uint64_t a1, void (*a2)(id))
{
  a2(objc_msgSend(v2, sel_becomeCurrentWithPendingUnitCount_, a1));
  return objc_msgSend(v2, sel_resignCurrent);
}

void sub_181DA23F4(id *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_181DA2414(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_181DA2434(id *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_181DA2454(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

void sub_181DA2474(id *a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_181DA2494(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    id v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  id v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (Hashable & Sendable)?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id protocol witness for ExpressibleByDictionaryLiteral.init(dictionaryLiteral:) in conformance NSDictionary@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = NSDictionary.init(dictionaryLiteral:)(a1);
  *a2 = result;
  return result;
}

uint64_t specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(void *a1, uint64_t *a2)
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  uint64_t result = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  uint64_t v5 = result;
  if (result) {
    goto LABEL_25;
  }
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_count);
  if (!result)
  {
    uint64_t v5 = MEMORY[0x1E4FBC868];
LABEL_25:
    *a2 = v5;
    return result;
  }
  uint64_t v6 = result;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, AnyHashable>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v7 = *(char **)(v5 + 48);
  uint64_t v8 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, a1, v6);
  if ((result & 0x8000000000000000) == 0 && v6 >= result)
  {
    *(void *)(v5 + 16) = result;
    if (result)
    {
      uint64_t v9 = result - 1;
      uint64_t v10 = v5 + 64;
      while (1)
      {
        if ((*(void *)(v10 + (((unint64_t)v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9)) {
          goto LABEL_8;
        }
        outlined init with copy of AnyHashable(*(void *)(v5 + 48) + 40 * v9, (uint64_t)v48);
        Swift::Int v22 = AnyHashable._rawHashValue(seed:)(*(void *)(v5 + 40));
        uint64_t result = outlined destroy of AnyHashable((uint64_t)v48);
        uint64_t v23 = -1 << *(unsigned char *)(v5 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        if (((-1 << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
        {
          unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v27 = 0;
          unint64_t v28 = (unint64_t)(63 - v23) >> 6;
          do
          {
            if (++v25 == v28 && (v27 & 1) != 0)
            {
              __break(1u);
              goto LABEL_26;
            }
            BOOL v29 = v25 == v28;
            if (v25 == v28) {
              unint64_t v25 = 0;
            }
            v27 |= v29;
            uint64_t v30 = *(void *)(v10 + 8 * v25);
          }
          while (v30 == -1);
          unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
        }
        *(void *)(v10 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
        if (v9 < (uint64_t)v26)
        {
          uint64_t v11 = *(void *)(v5 + 48);
          uint64_t v12 = 40 * v26;
          uint64_t v13 = v11 + v12;
          uint64_t v14 = (long long *)(v11 + 40 * v9);
          long long v15 = *v14;
          long long v16 = v14[1];
          *(void *)(v13 + 32) = *((void *)v14 + 4);
          *(_OWORD *)uint64_t v13 = v15;
          *(_OWORD *)(v13 + 16) = v16;
          uint64_t v17 = *(void *)(v5 + 56);
          uint64_t v18 = v17 + v12;
          int v19 = (long long *)(v17 + 40 * v9);
          long long v20 = *v19;
          long long v21 = v19[1];
          *(void *)(v18 + 32) = *((void *)v19 + 4);
          *(_OWORD *)uint64_t v18 = v20;
          *(_OWORD *)(v18 + 16) = v21;
LABEL_8:
          if (--v9 < 0) {
            break;
          }
        }
        else
        {
          if (v26 == v9) {
            goto LABEL_8;
          }
          uint64_t v31 = *(void *)(v5 + 48);
          uint64_t v32 = 40 * v26;
          uint64_t v33 = (long long *)(v31 + v32);
          uint64_t v34 = (long long *)(v31 + 40 * v9);
          long long v35 = *v33;
          long long v36 = v33[1];
          uint64_t v37 = *((void *)v33 + 4);
          uint64_t v38 = *((void *)v34 + 4);
          long long v39 = v34[1];
          *uint64_t v33 = *v34;
          v33[1] = v39;
          *((void *)v33 + 4) = v38;
          *((void *)v34 + 4) = v37;
          *uint64_t v34 = v35;
          v34[1] = v36;
          uint64_t v40 = *(void *)(v5 + 56);
          uint64_t v41 = (long long *)(v40 + v32);
          uint64_t v42 = (long long *)(v40 + 40 * v9);
          long long v43 = *v41;
          long long v44 = v41[1];
          uint64_t v45 = *((void *)v41 + 4);
          uint64_t v46 = *((void *)v42 + 4);
          long long v47 = v42[1];
          *uint64_t v41 = *v42;
          v41[1] = v47;
          *((void *)v41 + 4) = v46;
          *((void *)v42 + 4) = v45;
          *uint64_t v42 = v43;
          v42[1] = v44;
          if (v9 < 0) {
            break;
          }
        }
      }
    }
    uint64_t result = swift_release();
    goto LABEL_25;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a7;
  char v27 = a4;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  long long v15 = (char *)&v26 - v14;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v26 - v22;
  outlined init with copy of Any(v24, (uint64_t)v29);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v28);
  uint64_t result = swift_dynamicCast();
  if (*(void *)(*v27 + 16) >= v27[1])
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v23, a5);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, a6);
    _NativeDictionary._unsafeInsertNew(key:value:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, a6);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v23, a5);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(void *, void *, uint64_t))(a1 + 32);
  uint64_t v10[3] = swift_getObjectType();
  v10[0] = a2;
  long long v9[3] = swift_getObjectType();
  v9[0] = a3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v7(v10, v9, a4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t NSDictionary._toCustomAnyHashable()()
{
  uint64_t v2 = 0;
  uint64_t result = specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(v0, &v2);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : AnyHashable]);
    lazy protocol witness table accessor for type [AnyHashable : AnyHashable] and conformance <> [A : B]();
    return AnyHashable.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSDictionary()
{
  uint64_t v1 = *v0;
  uint64_t v2 = 0;
  specialized static Dictionary._forceBridgeFromObjectiveC(_:result:)(v1, &v2);
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : AnyHashable]);
    lazy protocol witness table accessor for type [AnyHashable : AnyHashable] and conformance <> [A : B]();
    AnyHashable.init<A>(_:)();
  }
  else
  {
    __break(1u);
  }
}

_OWORD *NSDictionary.Iterator.deinit()
{
  long long v1 = v0[12];
  v8[10] = v0[11];
  v8[11] = v1;
  v9[0] = v0[13];
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v0 + 217);
  long long v2 = v0[8];
  v8[6] = v0[7];
  v8[7] = v2;
  long long v3 = v0[10];
  v8[8] = v0[9];
  _OWORD v8[9] = v3;
  long long v4 = v0[4];
  void v8[2] = v0[3];
  v8[3] = v4;
  long long v5 = v0[6];
  v8[4] = v0[5];
  v8[5] = v5;
  long long v6 = v0[2];
  v8[0] = v0[1];
  v8[1] = v6;
  outlined release of Locale((uint64_t)v8);
  return v0;
}

void protocol witness for Sequence.makeIterator() in conformance NSDictionary(void *a1@<X8>)
{
  long long v3 = *v1;
  type metadata accessor for NSDictionary.Iterator();
  long long v4 = (_OWORD *)swift_allocObject();
  uint64_t v5 = swift_unknownObjectRetain();
  NSFastEnumerationIterator.init(_:)(v5, (uint64_t)v12);
  long long v6 = v12[11];
  v4[11] = v12[10];
  v4[12] = v6;
  v4[13] = v13[0];
  *(_OWORD *)((char *)v4 + 217) = *(_OWORD *)((char *)v13 + 9);
  long long v7 = v12[7];
  v4[7] = v12[6];
  v4[8] = v7;
  long long v8 = v12[9];
  v4[9] = v12[8];
  v4[10] = v8;
  long long v9 = v12[3];
  v4[3] = v12[2];
  v4[4] = v9;
  long long v10 = v12[5];
  v4[5] = v12[4];
  v4[6] = v10;
  long long v11 = v12[1];
  v4[1] = v12[0];
  v4[2] = v11;

  *a1 = v4;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NSDictionary()
{
  long long v1 = *v0;
  uint64_t v2 = specialized _copySequenceToContiguousArray<A>(_:)(*v0);

  return v2;
}

void protocol witness for Sequence._copyContents(initializing:) in conformance NSDictionary(void *a1, _OWORD *a2, uint64_t a3)
{
}

double NSDictionary.subscript.getter@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  id v4 = objc_msgSend(v2, sel_objectForKey_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

id NSDictionary.init(dictionary:)(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v2, sel___swiftInitWithDictionary_NSDictionary_, a1);
}

int64_t NSDictionary.init(dictionary:)(void *a1)
{
  int64_t result = (int64_t)objc_msgSend(a1, sel_count);
  if ((unint64_t)(result - 0x1000000000000000) >> 61 == 7)
  {
    int64_t v4 = result;
    uint64_t v5 = 8 * result;
    if (8 * result + 0x4000000000000000 >= 0)
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = v6 + v5;
      objc_msgSend(a1, sel__getObjects_andKeys_count_, v6, v7, v4);
      id v8 = objc_msgSend(v1, sel_initWithObjects_forKeys_count_, v6, v7, v4);
      MEMORY[0x185309510](v6, -1, -1);
      return (int64_t)v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

int64_t @objc NSDictionary.init(dictionary:)(uint64_t a1, uint64_t a2, void *a3)
{
  return NSDictionary.init(dictionary:)(a3);
}

uint64_t sub_181DA303C()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(a1, a2, a3, *(void **)(v3 + 40), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_181DA3058()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed Any, @in_guaranteed Any, @unowned UnsafeMutablePointer<ObjCBool>) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_181DA3090()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_181DA30A0()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

unint64_t lazy protocol witness table accessor for type NSDictionary.Iterator and conformance NSDictionary.Iterator()
{
  unint64_t result = lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator;
  if (!lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator)
  {
    type metadata accessor for NSDictionary.Iterator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSDictionary.Iterator and conformance NSDictionary.Iterator);
  }
  return result;
}

uint64_t method lookup function for NSDictionary.Iterator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NSDictionary.Iterator);
}

uint64_t PredicateCodableConfiguration.allowType(_:identifier:)(uint64_t a1, uint64_t a2, void *a3)
{
  return PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(a1, a2, a3, 1);
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(void *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v26 = a2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a2 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v30 = (v5 - 1) & v5;
  int64_t v31 = v7;
  for (unint64_t i = __clz(__rbit64(v5)) | (v7 << 6); ; unint64_t i = __clz(__rbit64(v11)) + (v10 << 6))
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v14 = v13[1];
    uint64_t v15 = *(void *)(a2 + 56) + 48 * i;
    uint64_t v16 = *(void *)v15;
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t v19 = *(void *)(v15 + 16);
    uint64_t v18 = *(void *)(v15 + 24);
    uint64_t v20 = *(void *)(v15 + 32);
    char v21 = *(unsigned char *)(v15 + 40);
    uint64_t v22 = *v13;
    v32[0] = *v13;
    v32[1] = v14;
    v32[2] = v16;
    v32[3] = v17;
    v32[4] = v19;
    v32[5] = v18;
    v32[6] = v20;
    char v33 = v21;
    swift_bridgeObjectRetain();
    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
    uint64_t v23 = v34;
    char v24 = a1(v32);
    if (v23)
    {
      swift_bridgeObjectRelease();
      outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
      return swift_release();
    }
    uint64_t v34 = 0;
    if (v24)
    {
      uint64_t result = swift_release();
      goto LABEL_29;
    }
    swift_bridgeObjectRelease();
    uint64_t result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v16, v17, v19, v18, v20, v21);
    unint64_t v5 = v30;
    int64_t v7 = v31;
    if (v30) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v9 = __OFADD__(v7, 1);
    int64_t v10 = v7 + 1;
    if (v9) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v26 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v10 + 1;
      if (v10 + 1 >= v27) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v12);
      if (v11) {
        goto LABEL_16;
      }
      int64_t v12 = v10 + 2;
      if (v10 + 2 >= v27) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v12);
      if (v11) {
        goto LABEL_16;
      }
      int64_t v12 = v10 + 3;
      if (v10 + 3 >= v27) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v26 + 8 * v12);
      if (v11)
      {
LABEL_16:
        int64_t v10 = v12;
        goto LABEL_17;
      }
      int64_t v12 = v10 + 4;
      if (v10 + 4 < v27)
      {
        unint64_t v11 = *(void *)(v26 + 8 * v12);
        if (!v11)
        {
          while (1)
          {
            int64_t v10 = v12 + 1;
            if (__OFADD__(v12, 1)) {
              goto LABEL_31;
            }
            if (v10 >= v27) {
              goto LABEL_28;
            }
            unint64_t v11 = *(void *)(v26 + 8 * v10);
            ++v12;
            if (v11) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      uint64_t result = swift_release();
      uint64_t v22 = 0;
      uint64_t v14 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      uint64_t v19 = 0;
      uint64_t v18 = 0;
      uint64_t v20 = 0;
      char v21 = 0;
LABEL_29:
      *(void *)a3 = v22;
      *(void *)(a3 + 8) = v14;
      *(void *)(a3 + 16) = v16;
      *(void *)(a3 + 24) = v17;
      *(void *)(a3 + 32) = v19;
      *(void *)(a3 + 40) = v18;
      *(void *)(a3 + 48) = v20;
      *(unsigned char *)(a3 + 56) = v21;
      return result;
    }
LABEL_17:
    uint64_t v30 = (v11 - 1) & v11;
    int64_t v31 = v10;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t PredicateCodableConfiguration._keyPath(for:rootType:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *v3;
  if (!*(void *)(v4 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = *(void *)(v4 + 56) + 48 * v8;
  uint64_t v11 = *(void *)v10;
  int64_t v12 = *(uint64_t (**)(uint64_t))(v10 + 8);
  uint64_t v14 = *(void *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 24);
  uint64_t v15 = *(void *)(v10 + 32);
  int v16 = *(unsigned __int8 *)(v10 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(void *)v10, (uint64_t)v12, v14, v13, v15, *(unsigned char *)(v10 + 40));
  swift_bridgeObjectRelease();
  if (v16 == 1)
  {
    uint64_t v17 = *a3;
    if ((unint64_t)*a3 >= 0x800 || (unint64_t)(v17 - 512) < 3 || !v17)
    {
      swift_retain();
      if (TypeMetadata.descriptor.getter() == v11)
      {
        uint64_t v19 = Type.genericArguments.getter();
        uint64_t v20 = v12(v19);
        if (v20)
        {
          uint64_t v21 = v20;
          swift_retain();
          AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
          swift_release();
          swift_release();
          outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v11, (uint64_t)v12, v14, v13, v15, 1);
          return v21;
        }
      }
      swift_release();
    }
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v11, (uint64_t)v12, v14, v13, v15, 1);
    return 0;
  }
  return v11;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PredicateCodableConfiguration.AllowListType(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)a1 == *(void *)a2;
  if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
    BOOL v2 = 0;
  }
  BOOL v3 = *(void *)a1 == *(void *)a2;
  if (*(unsigned char *)(a2 + 8)) {
    BOOL v3 = 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    return v2;
  }
  else {
    return v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a1, (uint64_t)v4);
  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v5);
  return specialized static PredicateCodableConfiguration.AllowListKeyPath.== infix(_:_:)((uint64_t)v4, (uint64_t)v5) & 1;
}

Foundation::PredicateCodableConfiguration __swiftcall PredicateCodableConfiguration.init()()
{
  uint64_t v1 = MEMORY[0x1E4FBC868];
  *(void *)uint64_t v0 = MEMORY[0x1E4FBC868];
  *(void *)(v0 + 8) = v1;
  *(unsigned char *)(v0 + 16) = 1;
  return result;
}

uint64_t PredicateCodableConfiguration.debugDescription.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v93 = *v0;
  if (v3)
  {
    uint64_t v105 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v4 = v105;
    uint64_t result = specialized Dictionary.startIndex.getter(v2);
    uint64_t v7 = result;
    uint64_t v8 = 0;
    uint64_t v9 = v2 + 64;
    char v10 = *(unsigned char *)(v2 + 32);
    int64_t v95 = v3;
    int v97 = v6;
    uint64_t v99 = v2 + 64;
    while (1)
    {
      if (v7 < 0 || v7 >= 1 << v10)
      {
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        return result;
      }
      unint64_t v13 = (unint64_t)v7 >> 6;
      if ((*(void *)(v9 + 8 * ((unint64_t)v7 >> 6)) & (1 << v7)) == 0) {
        goto LABEL_52;
      }
      if (*(_DWORD *)(v2 + 36) != v6) {
        goto LABEL_53;
      }
      uint64_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v7);
      uint64_t v15 = *v14;
      int v16 = (void *)v14[1];
      uint64_t v17 = *(void *)(v2 + 56) + 16 * v7;
      uint64_t v103 = 0;
      unint64_t v104 = 0xE000000000000000;
      if (*(unsigned char *)(v17 + 8))
      {
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(17);
        swift_bridgeObjectRelease();
        strcpy((char *)v102, "partial type '");
        HIBYTE(v102[1]) = -18;
        swift_getKeyPath();
        dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        swift_getAtKeyPath();
        swift_release();
        v18._uint64_t countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 39;
        v19._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v19);
        uint64_t v20 = v102[0];
        unint64_t v21 = v102[1];
      }
      else
      {
        swift_bridgeObjectRetain();
        v22._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        v23._uint64_t countAndFlagsBits = 39;
        v23._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v23);
        unint64_t v21 = 0xE600000000000000;
        uint64_t v20 = 0x272065707974;
      }
      unint64_t v24 = v21;
      String.append(_:)(*(Swift::String *)&v20);
      swift_bridgeObjectRelease();
      v25._uint64_t countAndFlagsBits = 10272;
      v25._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v25);
      v26._uint64_t countAndFlagsBits = v15;
      v26._unint64_t object = v16;
      String.append(_:)(v26);
      v27._uint64_t countAndFlagsBits = 41;
      v27._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v28 = v103;
      unint64_t v29 = v104;
      uint64_t v105 = v4;
      unint64_t v31 = *(void *)(v4 + 16);
      unint64_t v30 = *(void *)(v4 + 24);
      if (v31 >= v30 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
        uint64_t v4 = v105;
      }
      *(void *)(v4 + 16) = v31 + 1;
      uint64_t v32 = v4 + 16 * v31;
      *(void *)(v32 + 32) = v28;
      *(void *)(v32 + 40) = v29;
      char v10 = *(unsigned char *)(v2 + 32);
      unint64_t v11 = 1 << v10;
      if (v7 >= 1 << v10) {
        goto LABEL_54;
      }
      uint64_t v9 = v2 + 64;
      uint64_t v33 = *(void *)(v99 + 8 * v13);
      if ((v33 & (1 << v7)) == 0) {
        goto LABEL_55;
      }
      int v6 = v97;
      if (*(_DWORD *)(v2 + 36) != v97) {
        goto LABEL_56;
      }
      unint64_t v34 = v33 & (-2 << (v7 & 0x3F));
      if (v34)
      {
        unint64_t v11 = __clz(__rbit64(v34)) | v7 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v35 = v13 + 1;
        unint64_t v36 = (v11 + 63) >> 6;
        if (v13 + 1 < v36)
        {
          unint64_t v37 = *(void *)(v99 + 8 * v35);
          int64_t v12 = v95;
          if (v37)
          {
LABEL_24:
            unint64_t v11 = __clz(__rbit64(v37)) + (v35 << 6);
          }
          else
          {
            while (v36 - 2 != v13)
            {
              unint64_t v37 = *(void *)(v2 + 80 + 8 * v13++);
              if (v37)
              {
                unint64_t v35 = v13 + 1;
                goto LABEL_24;
              }
            }
          }
          goto LABEL_5;
        }
      }
      int64_t v12 = v95;
LABEL_5:
      ++v8;
      uint64_t v7 = v11;
      if (v8 == v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v93;
        break;
      }
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v89 = BidirectionalCollection<>.joined(separator:)();
  long long v39 = v38;
  swift_bridgeObjectRelease();
  int64_t v40 = *(void *)(v1 + 16);
  if (v40)
  {
    uint64_t v87 = v39;
    uint64_t v105 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40, 0);
    uint64_t v41 = v105;
    uint64_t result = specialized Dictionary.startIndex.getter(v1);
    uint64_t v43 = result;
    uint64_t v44 = 0;
    uint64_t v45 = v1 + 64;
    char v46 = *(unsigned char *)(v1 + 32);
    uint64_t v88 = v1 + 80;
    int64_t v90 = v40;
    int v91 = v42;
    uint64_t v92 = v1 + 64;
    while ((v43 & 0x8000000000000000) == 0 && v43 < 1 << v46)
    {
      unint64_t v49 = (unint64_t)v43 >> 6;
      if ((*(void *)(v45 + 8 * ((unint64_t)v43 >> 6)) & (1 << v43)) == 0) {
        goto LABEL_58;
      }
      if (*(_DWORD *)(v1 + 36) != v42) {
        goto LABEL_59;
      }
      uint64_t v94 = v44;
      uint64_t v50 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v43);
      uint64_t v51 = *v50;
      uint64_t v52 = (void *)v50[1];
      uint64_t v53 = *(void *)(v1 + 56) + 48 * v43;
      uint64_t v54 = *(void *)v53;
      uint64_t v55 = *(void *)(v53 + 8);
      uint64_t v56 = *(void *)(v53 + 24);
      uint64_t v100 = v41;
      uint64_t v101 = *(void *)(v53 + 16);
      uint64_t v57 = *(void **)(v53 + 32);
      char v58 = *(unsigned char *)(v53 + 40);
      uint64_t v103 = 0;
      unint64_t v104 = 0xE000000000000000;
      uint64_t v96 = v51;
      uint64_t v98 = v55;
      if (v58)
      {
        v102[0] = 92;
        v102[1] = 0xE100000000000000;
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v101, v56, (uint64_t)v57, 1);
        dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        swift_getAtKeyPath();
        swift_release();
        v59._uint64_t countAndFlagsBits = String.init(cString:)();
        String.append(_:)(v59);
        swift_bridgeObjectRelease();
        v60._uint64_t countAndFlagsBits = 46;
        v60._unint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        v61._uint64_t countAndFlagsBits = v56;
        v61._unint64_t object = v57;
        String.append(_:)(v61);
        uint64_t v62 = 92;
        unint64_t v63 = 0xE100000000000000;
      }
      else
      {
        swift_bridgeObjectRetain();
        outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v54, v55, v101, v56, (uint64_t)v57, 0);
        uint64_t v62 = AnyKeyPath.debugDescription.getter();
        unint64_t v63 = v64;
      }
      unint64_t v65 = v63;
      String.append(_:)(*(Swift::String *)&v62);
      swift_bridgeObjectRelease();
      v66._uint64_t countAndFlagsBits = 10272;
      v66._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v66);
      v67._uint64_t countAndFlagsBits = v96;
      v67._unint64_t object = v52;
      String.append(_:)(v67);
      v68._uint64_t countAndFlagsBits = 41;
      v68._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v68);
      swift_bridgeObjectRelease();
      uint64_t result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v54, v98, v101, v56, (uint64_t)v57, v58);
      uint64_t v69 = v103;
      unint64_t v70 = v104;
      uint64_t v41 = v100;
      uint64_t v105 = v100;
      unint64_t v72 = *(void *)(v100 + 16);
      unint64_t v71 = *(void *)(v100 + 24);
      if (v72 >= v71 >> 1)
      {
        uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v71 > 1, v72 + 1, 1);
        uint64_t v41 = v105;
      }
      *(void *)(v41 + 16) = v72 + 1;
      uint64_t v73 = v41 + 16 * v72;
      *(void *)(v73 + 32) = v69;
      *(void *)(v73 + 40) = v70;
      uint64_t v1 = v93;
      char v46 = *(unsigned char *)(v93 + 32);
      unint64_t v47 = 1 << v46;
      if (v43 >= 1 << v46) {
        goto LABEL_60;
      }
      uint64_t v45 = v92;
      uint64_t v74 = *(void *)(v92 + 8 * v49);
      if ((v74 & (1 << v43)) == 0) {
        goto LABEL_61;
      }
      int v42 = v91;
      if (*(_DWORD *)(v93 + 36) != v91) {
        goto LABEL_62;
      }
      unint64_t v75 = v74 & (-2 << (v43 & 0x3F));
      if (v75)
      {
        unint64_t v47 = __clz(__rbit64(v75)) | v43 & 0xFFFFFFFFFFFFFFC0;
        int64_t v48 = v90;
      }
      else
      {
        unint64_t v76 = v49 + 1;
        unint64_t v77 = (v47 + 63) >> 6;
        int64_t v48 = v90;
        if (v49 + 1 < v77)
        {
          unint64_t v78 = *(void *)(v92 + 8 * v76);
          if (v78)
          {
LABEL_48:
            unint64_t v47 = __clz(__rbit64(v78)) + (v76 << 6);
          }
          else
          {
            while (v77 - 2 != v49)
            {
              unint64_t v78 = *(void *)(v88 + 8 * v49++);
              if (v78)
              {
                unint64_t v76 = v49 + 1;
                goto LABEL_48;
              }
            }
          }
        }
      }
      uint64_t v44 = v94 + 1;
      uint64_t v43 = v47;
      if (v94 + 1 == v48)
      {
        swift_bridgeObjectRelease();
        long long v39 = v87;
        goto LABEL_50;
      }
    }
    goto LABEL_57;
  }
LABEL_50:
  uint64_t v79 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v81 = v80;
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(72);
  v82._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v82._unint64_t object = (void *)0x80000001823AF940;
  String.append(_:)(v82);
  v83._uint64_t countAndFlagsBits = v89;
  v83._unint64_t object = v39;
  String.append(_:)(v83);
  swift_bridgeObjectRelease();
  v84._unint64_t object = (void *)0x80000001823AF970;
  v84._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v84);
  v85._uint64_t countAndFlagsBits = v79;
  v85._unint64_t object = v81;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  v86._uint64_t countAndFlagsBits = 10589;
  v86._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v86);
  return 0;
}

uint64_t PredicateCodableConfiguration.disallowType(_:)(uint64_t *a1)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3, a1);
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)(v1 + 8) = v4;
  return result;
}

uint64_t *PredicateCodableConfiguration.disallowPartialType(_:)(uint64_t *result)
{
  uint64_t v2 = *result;
  if ((unint64_t)*result > 0x7FF || ((unint64_t)(v2 - 512) >= 3 ? (BOOL v3 = v2 == 0) : (BOOL v3 = 1), v3))
  {
    uint64_t v4 = TypeMetadata.descriptor.getter();
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized _NativeDictionary.filter(_:)(v5, v4);
    uint64_t result = (uint64_t *)swift_bridgeObjectRelease_n();
    *(void *)(v1 + 8) = v6;
  }
  return result;
}

uint64_t PredicateCodableConfiguration.disallowKeyPath(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
  swift_retain();
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = specialized _NativeDictionary.filter(_:)(v4, a1);
  swift_bridgeObjectRelease_n();
  uint64_t result = swift_release();
  *uint64_t v2 = v5;
  return result;
}

uint64_t PredicateCodableConfiguration.allowKeyPathsForPropertiesProvided<A>(by:recursive:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v6 = result;
  int64_t v7 = 0;
  uint64_t v8 = result + 64;
  uint64_t v9 = 1 << *(unsigned char *)(result + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(result + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v7 << 6);
      goto LABEL_21;
    }
    int64_t v15 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v15 >= v12) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v8 + 8 * v15);
    ++v7;
    if (!v16)
    {
      int64_t v7 = v15 + 1;
      if (v15 + 1 >= v12) {
        goto LABEL_30;
      }
      unint64_t v16 = *(void *)(v8 + 8 * v7);
      if (!v16)
      {
        int64_t v7 = v15 + 2;
        if (v15 + 2 >= v12) {
          goto LABEL_30;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v7 << 6);
LABEL_21:
    Swift::String v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v14);
    uint64_t v19 = *v18;
    uint64_t v20 = (void *)v18[1];
    uint64_t v21 = *(void *)(*(void *)(v6 + 56) + 8 * v14);
    swift_retain();
    swift_bridgeObjectRetain();
    PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v21, v19, v20);
    swift_bridgeObjectRelease();
    if (a2)
    {
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      uint64_t v23 = v22;
      uint64_t v24 = swift_conformsToProtocol2();
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v24) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v26) {
        PredicateCodableConfiguration.allowKeyPathsForPropertiesProvided<A>(by:recursive:)(v26, 1, v26, v25);
      }
    }
    uint64_t result = swift_release();
  }
  int64_t v17 = v15 + 3;
  if (v17 < v12)
  {
    unint64_t v16 = *(void *)(v8 + 8 * v17);
    if (!v16)
    {
      while (1)
      {
        int64_t v7 = v17 + 1;
        if (__OFADD__(v17, 1)) {
          goto LABEL_34;
        }
        if (v7 >= v12) {
          goto LABEL_30;
        }
        unint64_t v16 = *(void *)(v8 + 8 * v7);
        ++v17;
        if (v16) {
          goto LABEL_20;
        }
      }
    }
    int64_t v7 = v17;
    goto LABEL_20;
  }
LABEL_30:

  return swift_release();
}

uint64_t PredicateCodableConfiguration.disallowKeyPathsForPropertiesProvided<A>(by:recursive:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  uint64_t v8 = result;
  int64_t v9 = 0;
  uint64_t v10 = 1 << *(unsigned char *)(result + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  uint64_t v27 = result + 64;
  unint64_t v12 = v11 & *(void *)(result + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_18;
    }
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v9 >= v13) {
      goto LABEL_31;
    }
    unint64_t v17 = *(void *)(v27 + 8 * v9);
    if (!v17) {
      break;
    }
LABEL_17:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_18:
    uint64_t v19 = *(void *)(*(void *)(v8 + 56) + 8 * v15);
    swift_retain();
    AnyKeyPath._validateForPredicateUsage(restrictArguments:)(0);
    swift_retain();
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v21 = specialized _NativeDictionary.filter(_:)(v20, v19);
    swift_bridgeObjectRelease_n();
    swift_release();
    *uint64_t v5 = v21;
    if (a2)
    {
      dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
      uint64_t v23 = v22;
      uint64_t v24 = swift_conformsToProtocol2();
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v24) {
        uint64_t v26 = v23;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v26) {
        PredicateCodableConfiguration.disallowKeyPathsForPropertiesProvided<A>(by:recursive:)(v26, 1, v26, v25);
      }
    }
    uint64_t result = swift_release();
  }
  int64_t v18 = v9 + 1;
  if (v9 + 1 >= v13) {
    goto LABEL_31;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v9 + 2;
  if (v9 + 2 >= v13) {
    goto LABEL_31;
  }
  unint64_t v17 = *(void *)(v27 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v9 = v18;
    goto LABEL_17;
  }
  int64_t v18 = v9 + 3;
  if (v9 + 3 < v13)
  {
    unint64_t v17 = *(void *)(v27 + 8 * v18);
    if (!v17)
    {
      while (1)
      {
        int64_t v9 = v18 + 1;
        if (__OFADD__(v18, 1)) {
          goto LABEL_35;
        }
        if (v9 >= v13) {
          goto LABEL_31;
        }
        unint64_t v17 = *(void *)(v27 + 8 * v9);
        ++v18;
        if (v17) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_16;
  }
LABEL_31:

  return swift_release();
}

Swift::Void __swiftcall PredicateCodableConfiguration.allow(_:)(Foundation::PredicateCodableConfiguration a1)
{
  uint64_t v1 = *((void *)a1.allowedKeyPaths._rawValue + 1);
  uint64_t v39 = *(void *)a1.allowedKeyPaths._rawValue;
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v10 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (v11) {
      goto LABEL_21;
    }
    int64_t v7 = v10 + 1;
    if (v10 + 1 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    if (v11) {
      goto LABEL_21;
    }
    int64_t v7 = v10 + 2;
    if (v10 + 2 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    if (v11) {
      goto LABEL_21;
    }
    int64_t v12 = v10 + 3;
    if (v12 >= v6)
    {
LABEL_24:
      swift_release();
      uint64_t v37 = v39 + 64;
      uint64_t v19 = 1 << *(unsigned char *)(v39 + 32);
      uint64_t v20 = -1;
      if (v19 < 64) {
        uint64_t v20 = ~(-1 << v19);
      }
      unint64_t v21 = v20 & *(void *)(v39 + 64);
      int64_t v38 = (unint64_t)(v19 + 63) >> 6;
      swift_bridgeObjectRetain();
      int64_t v22 = 0;
      if (v21) {
        goto LABEL_29;
      }
LABEL_30:
      int64_t v25 = v22 + 1;
      if (!__OFADD__(v22, 1))
      {
        if (v25 < v38)
        {
          unint64_t v26 = *(void *)(v37 + 8 * v25);
          ++v22;
          if (v26) {
            goto LABEL_43;
          }
          int64_t v22 = v25 + 1;
          if (v25 + 1 < v38)
          {
            unint64_t v26 = *(void *)(v37 + 8 * v22);
            if (v26) {
              goto LABEL_43;
            }
            int64_t v22 = v25 + 2;
            if (v25 + 2 < v38)
            {
              unint64_t v26 = *(void *)(v37 + 8 * v22);
              if (v26) {
                goto LABEL_43;
              }
              int64_t v27 = v25 + 3;
              if (v27 < v38)
              {
                unint64_t v26 = *(void *)(v37 + 8 * v27);
                if (!v26)
                {
                  while (1)
                  {
                    int64_t v22 = v27 + 1;
                    if (__OFADD__(v27, 1)) {
                      goto LABEL_53;
                    }
                    if (v22 >= v38) {
                      goto LABEL_47;
                    }
                    unint64_t v26 = *(void *)(v37 + 8 * v22);
                    ++v27;
                    if (v26) {
                      goto LABEL_43;
                    }
                  }
                }
                int64_t v22 = v27;
LABEL_43:
                unint64_t v21 = (v26 - 1) & v26;
                for (unint64_t i = __clz(__rbit64(v26)) + (v22 << 6); ; unint64_t i = v23 | (v22 << 6))
                {
                  uint64_t v28 = (uint64_t *)(*(void *)(v39 + 48) + 16 * i);
                  uint64_t v30 = *v28;
                  unint64_t v29 = (void *)v28[1];
                  uint64_t v31 = *(void *)(v39 + 56) + 48 * i;
                  uint64_t v33 = *(void *)v31;
                  uint64_t v32 = *(void *)(v31 + 8);
                  uint64_t v34 = *(void *)(v31 + 16);
                  uint64_t v35 = *(void *)(v31 + 24);
                  uint64_t v36 = *(void *)(v31 + 32);
                  if (*(unsigned char *)(v31 + 40))
                  {
                    swift_bridgeObjectRetain();
                    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 1);
                    swift_retain();
                    swift_bridgeObjectRetain();
                    PredicateCodableConfiguration._allowPartialKeyPath(_:identifier:name:constructor:)(v33, v30, (unint64_t)v29, v35, v36, v32, v34);
                    swift_bridgeObjectRelease();
                    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 1);
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (!v21) {
                      goto LABEL_30;
                    }
                  }
                  else
                  {
                    swift_bridgeObjectRetain();
                    outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 0);
                    PredicateCodableConfiguration.allowKeyPath(_:identifier:)(v33, v30, v29);
                    swift_bridgeObjectRelease();
                    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v33, v32, v34, v35, v36, 0);
                    if (!v21) {
                      goto LABEL_30;
                    }
                  }
LABEL_29:
                  unint64_t v23 = __clz(__rbit64(v21));
                  v21 &= v21 - 1;
                }
              }
            }
          }
        }
LABEL_47:
        swift_release();
        return;
      }
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v12);
    if (!v11) {
      break;
    }
    int64_t v7 = v12;
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    uint64_t v13 = 16 * v9;
    unint64_t v14 = (uint64_t *)(*(void *)(v1 + 48) + v13);
    uint64_t v16 = *v14;
    unint64_t v15 = (void *)v14[1];
    uint64_t v17 = *(void *)(v1 + 56) + v13;
    uint64_t v18 = *(void *)v17;
    if (*(unsigned char *)(v17 + 8))
    {
      swift_bridgeObjectRetain();
      PredicateCodableConfiguration._allowPartialType(_:identifier:)(v18, v16, v15);
    }
    else
    {
      swift_bridgeObjectRetain();
      PredicateCodableConfiguration._allowType(_:identifier:preferNewIdentifier:)(v18, v16, v15, 1);
    }
    swift_bridgeObjectRelease();
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_24;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
}

uint64_t closure #1 in PredicateCodableConfiguration._identifier(for:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 56)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 16);
  type metadata accessor for AnyKeyPath();
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v8, v7, v6, v5, v4, 0);
  swift_retain();
  char v9 = MEMORY[0x185302EC0](v8, a2);
  swift_release();
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v8, v7, v6, v5, v4, 0);
  return v9 & 1;
}

void *key path getter for Collection.first : Substring@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  if ((result[1] ^ *result) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = Substring.subscript.getter();
    uint64_t v4 = v5;
    uint64_t result = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t key path getter for Collection.first : String@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t v7 = a2(v5, v6);
  uint64_t v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v7;
  a3[1] = v9;
  return result;
}

void *key path getter for BidirectionalCollection.last : Substring@<X0>(void *result@<X0>, uint64_t *a2@<X8>)
{
  if ((result[1] ^ *result) >= 0x4000)
  {
    swift_bridgeObjectRetain();
    Substring.index(before:)();
    uint64_t v3 = Substring.subscript.getter();
    uint64_t v4 = v5;
    uint64_t result = (void *)swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  *a2 = v3;
  a2[1] = v4;
  return result;
}

uint64_t closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

{
  if (!a2) {
    return 0;
  }
  if (a2 < 1)
  {
    __break(1u);
  }
  else
  {
    MEMORY[0x1F4188790](result);
    return swift_getKeyPath();
  }
  return result;
}

uint64_t closure #2 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t key path getter for Collection.isEmpty : <A>[A]@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = Collection.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t closure #3 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t closure #4 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t result, uint64_t a2)
{
  return closure #1 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t key path getter for Collection.first : <A>[A](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  return a5(v6, WitnessTable);
}

uint64_t *closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    if (a2 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v2 = *result;
    uint64_t v3 = swift_conformsToProtocol2();
    if (v3) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      MEMORY[0x1F4188790](v3);
      return (uint64_t *)swift_getKeyPath();
    }
  }
  return 0;
}

uint64_t *closure #6 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #5 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t *closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2 < 0)
  {
    __break(1u);
  }
  else if (a2 == 2)
  {
    uint64_t v2 = *result;
    uint64_t v3 = swift_conformsToProtocol2();
    if (v3) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4)
    {
      MEMORY[0x1F4188790](v3);
      return (uint64_t *)swift_getKeyPath();
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t *closure #8 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(uint64_t *result, uint64_t a2)
{
  return closure #7 in closure #1 in variable initialization expression of static PredicateCodableConfiguration.standardConfiguration(result, a2);
}

uint64_t static PredicateCodableConfiguration.standardConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for standardConfiguration != -1) {
    swift_once();
  }
  uint64_t v2 = qword_1E8ED4730;
  char v3 = byte_1E8ED4738;
  *(void *)a1 = static PredicateCodableConfiguration.standardConfiguration;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v39 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v39;
    if ((*(void *)(v39 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v37 = (v11 + 1) & v10;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v36 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v38 = v13;
      uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v9;
        v36(v7, *(void *)(a2 + 48) + v15 * v9, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v7, v4);
        unint64_t v19 = v18 & v10;
        if (a1 >= (uint64_t)v37)
        {
          if (v19 >= v37 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t v23 = v22 + v15 * a1;
            unint64_t v24 = v22 + v17 + v15;
            if (v15 * a1 < v17 || v23 >= v24)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v26 = *(void *)(a2 + 56);
            int64_t v27 = (_OWORD *)(v26 + 32 * a1);
            uint64_t v28 = (_OWORD *)(v26 + 32 * v9);
            uint64_t v12 = v39;
            if (a1 != v9 || (a1 = v9, v27 >= v28 + 2))
            {
              long long v29 = v28[1];
              *int64_t v27 = *v28;
              v27[1] = v29;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v37 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v39;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (**v16)(char *, uint64_t);
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v4 = type metadata accessor for CombineIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v38 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v38;
    if ((*(void *)(v38 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      uint64_t v36 = (v11 + 1) & v10;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v35 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      unint64_t v37 = v13;
      uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v9;
        v35(v7, *(void *)(a2 + 48) + v15 * v9, v4);
        lazy protocol witness table accessor for type CombineIdentifier and conformance CombineIdentifier();
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v7, v4);
        unint64_t v19 = v18 & v10;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t v23 = v22 + v15 * a1;
            unint64_t v24 = v22 + v17 + v15;
            if (v15 * a1 < v17 || v23 >= v24)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v26 = *(void *)(a2 + 56);
            int64_t v27 = (_OWORD *)(v26 + 16 * a1);
            uint64_t v28 = (_OWORD *)(v26 + 16 * v9);
            uint64_t v12 = v38;
            if (a1 != v9 || (a1 = v9, v27 >= v28 + 1))
            {
              *int64_t v27 = *v28;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v38;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    long long v29 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    long long v29 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *long long v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  uint64_t v33 = __OFSUB__(v32, 1);
  BOOL v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t *a2)
{
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v113 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v5 = 8 * v113;
  uint64_t v117 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      long long v114 = (unint64_t *)swift_slowAlloc();
      bzero(v114, v5);
      int64_t v28 = 0;
      uint64_t v29 = v3 + 64;
      uint64_t v30 = 1 << *(unsigned char *)(v3 + 32);
      if (v30 < 64) {
        uint64_t v31 = ~(-1 << v30);
      }
      else {
        uint64_t v31 = -1;
      }
      unint64_t v32 = v31 & *(void *)(v3 + 64);
      uint64_t v115 = 0;
      int64_t v116 = (unint64_t)(v30 + 63) >> 6;
      while (1)
      {
        while (1)
        {
          if (v32)
          {
            unint64_t v33 = __clz(__rbit64(v32));
            v32 &= v32 - 1;
            unint64_t v34 = v33 | (v28 << 6);
          }
          else
          {
            int64_t v35 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_154;
            }
            if (v35 >= v116) {
              goto LABEL_80;
            }
            unint64_t v36 = *(void *)(v29 + 8 * v35);
            ++v28;
            if (!v36)
            {
              int64_t v28 = v35 + 1;
              if (v35 + 1 >= v116) {
                goto LABEL_80;
              }
              unint64_t v36 = *(void *)(v29 + 8 * v28);
              if (!v36)
              {
                int64_t v28 = v35 + 2;
                if (v35 + 2 >= v116) {
                  goto LABEL_80;
                }
                unint64_t v36 = *(void *)(v29 + 8 * v28);
                if (!v36)
                {
                  int64_t v28 = v35 + 3;
                  if (v35 + 3 >= v116) {
                    goto LABEL_80;
                  }
                  unint64_t v36 = *(void *)(v29 + 8 * v28);
                  if (!v36)
                  {
                    int64_t v37 = v35 + 4;
                    if (v37 >= v116) {
                      goto LABEL_80;
                    }
                    unint64_t v36 = *(void *)(v29 + 8 * v37);
                    if (!v36)
                    {
                      while (1)
                      {
                        int64_t v28 = v37 + 1;
                        if (__OFADD__(v37, 1)) {
                          goto LABEL_158;
                        }
                        if (v28 >= v116) {
                          break;
                        }
                        unint64_t v36 = *(void *)(v29 + 8 * v28);
                        ++v37;
                        if (v36) {
                          goto LABEL_65;
                        }
                      }
LABEL_80:
                      uint64_t v49 = v115;
                      if (!v115)
                      {
                        uint64_t v3 = MEMORY[0x1E4FBC868];
                        goto LABEL_150;
                      }
                      if (v115 == *(void *)(v3 + 16))
                      {
                        swift_retain();
                        goto LABEL_150;
                      }
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
                      uint64_t v81 = static _DictionaryStorage.allocate(capacity:)();
                      int64_t v82 = 0;
                      unint64_t v83 = *v114;
                      uint64_t v84 = v81 + 64;
                      while (1)
                      {
                        uint64_t v115 = v49;
                        if (v83)
                        {
                          unint64_t v89 = __clz(__rbit64(v83));
                          v83 &= v83 - 1;
                          int64_t v90 = v82;
                          unint64_t v91 = v89 | (v82 << 6);
                        }
                        else
                        {
                          int64_t v92 = v82 + 1;
                          if (__OFADD__(v82, 1)) {
                            goto LABEL_157;
                          }
                          if (v92 >= v113) {
                            goto LABEL_149;
                          }
                          unint64_t v93 = v114[v92];
                          int64_t v94 = v82 + 1;
                          if (!v93)
                          {
                            int64_t v94 = v82 + 2;
                            if (v82 + 2 >= v113) {
                              goto LABEL_149;
                            }
                            unint64_t v93 = v114[v94];
                            if (!v93)
                            {
                              int64_t v94 = v82 + 3;
                              if (v82 + 3 >= v113) {
                                goto LABEL_149;
                              }
                              unint64_t v93 = v114[v94];
                              if (!v93)
                              {
                                int64_t v94 = v82 + 4;
                                if (v82 + 4 >= v113) {
                                  goto LABEL_149;
                                }
                                unint64_t v93 = v114[v94];
                                if (!v93)
                                {
                                  int64_t v94 = v82 + 5;
                                  if (v82 + 5 >= v113) {
                                    goto LABEL_149;
                                  }
                                  unint64_t v93 = v114[v94];
                                  if (!v93)
                                  {
                                    uint64_t v95 = v82 + 6;
                                    if (v82 + 6 >= v113) {
                                      goto LABEL_149;
                                    }
                                    unint64_t v93 = v114[v95];
                                    if (!v93)
                                    {
                                      while (1)
                                      {
                                        int64_t v94 = v95 + 1;
                                        if (__OFADD__(v95, 1)) {
                                          goto LABEL_161;
                                        }
                                        if (v94 >= v113) {
                                          break;
                                        }
                                        unint64_t v93 = v114[v94];
                                        ++v95;
                                        if (v93) {
                                          goto LABEL_139;
                                        }
                                      }
LABEL_149:
                                      uint64_t v3 = v81;
LABEL_150:
                                      MEMORY[0x185309510](v114, -1, -1);
                                      return v3;
                                    }
                                    int64_t v94 = v82 + 6;
                                  }
                                }
                              }
                            }
                          }
LABEL_139:
                          unint64_t v83 = (v93 - 1) & v93;
                          int64_t v90 = v94;
                          unint64_t v91 = __clz(__rbit64(v93)) + (v94 << 6);
                        }
                        uint64_t v96 = 16 * v91;
                        uint64_t v97 = *(void *)(v3 + 56);
                        uint64_t v98 = (uint64_t *)(*(void *)(v3 + 48) + v96);
                        uint64_t v100 = *v98;
                        uint64_t v99 = v98[1];
                        uint64_t v101 = (uint64_t *)(v97 + v96);
                        uint64_t v102 = *v101;
                        char v103 = *((unsigned char *)v101 + 8);
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        Swift::Int v104 = Hasher._finalize()();
                        uint64_t v105 = -1 << *(unsigned char *)(v81 + 32);
                        unint64_t v106 = v104 & ~v105;
                        unint64_t v107 = v106 >> 6;
                        if (((-1 << v106) & ~*(void *)(v84 + 8 * (v106 >> 6))) != 0)
                        {
                          unint64_t v85 = __clz(__rbit64((-1 << v106) & ~*(void *)(v84 + 8 * (v106 >> 6)))) | v106 & 0x7FFFFFFFFFFFFFC0;
                        }
                        else
                        {
                          char v108 = 0;
                          unint64_t v109 = (unint64_t)(63 - v105) >> 6;
                          do
                          {
                            if (++v107 == v109 && (v108 & 1) != 0) {
                              goto LABEL_153;
                            }
                            BOOL v110 = v107 == v109;
                            if (v107 == v109) {
                              unint64_t v107 = 0;
                            }
                            v108 |= v110;
                            uint64_t v111 = *(void *)(v84 + 8 * v107);
                          }
                          while (v111 == -1);
                          unint64_t v85 = __clz(__rbit64(~v111)) + (v107 << 6);
                        }
                        *(void *)(v84 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v85;
                        uint64_t v86 = 16 * v85;
                        uint64_t v87 = (void *)(*(void *)(v81 + 48) + v86);
                        *uint64_t v87 = v100;
                        v87[1] = v99;
                        uint64_t v88 = *(void *)(v81 + 56) + v86;
                        *(void *)uint64_t v88 = v102;
                        *(unsigned char *)(v88 + 8) = v103;
                        ++*(void *)(v81 + 16);
                        uint64_t v49 = v115 - 1;
                        uint64_t v3 = v117;
                        int64_t v82 = v90;
                        if (v115 == 1) {
                          goto LABEL_149;
                        }
                      }
                    }
                    int64_t v28 = v37;
                  }
                }
              }
            }
LABEL_65:
            unint64_t v32 = (v36 - 1) & v36;
            unint64_t v34 = __clz(__rbit64(v36)) + (v28 << 6);
          }
          uint64_t v38 = *(void *)(v3 + 56) + 16 * v34;
          uint64_t v39 = *(uint64_t **)v38;
          if (*(unsigned char *)(v38 + 8) == 1) {
            break;
          }
          if (v39 != a2) {
            goto LABEL_77;
          }
        }
        uint64_t v40 = *a2;
        if ((unint64_t)*a2 >= 0x800) {
          goto LABEL_73;
        }
        if ((unint64_t)(v40 - 513) < 2)
        {
          swift_getKeyPath();
          uint64_t v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          char v48 = v47;
          swift_release();
          if (v48) {
            goto LABEL_165;
          }
          goto LABEL_76;
        }
        if (v40)
        {
          if (v40 == 512)
          {
            swift_getKeyPath();
            uint64_t v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            char v43 = v42;
            uint64_t result = swift_release();
            if (v43)
            {
              __break(1u);
              return result;
            }
            goto LABEL_76;
          }
LABEL_77:
          *(unint64_t *)((char *)v114 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
          BOOL v26 = __OFADD__(v115++, 1);
          if (v26)
          {
            __break(1u);
            goto LABEL_80;
          }
        }
        else
        {
LABEL_73:
          swift_getKeyPath();
          uint64_t v41 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          char v46 = v45;
          swift_release();
          if (v46) {
            goto LABEL_163;
          }
LABEL_76:
          uint64_t v3 = v117;
          if (*(uint64_t **)((char *)a2 + v41) != v39) {
            goto LABEL_77;
          }
        }
      }
    }
  }
  v112[1] = v112;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  long long v114 = (void *)((char *)v112 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v114, v5);
  int64_t v6 = 0;
  uint64_t v7 = v3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(v3 + 64);
  uint64_t v115 = 0;
  int64_t v116 = (unint64_t)(v8 + 63) >> 6;
  do
  {
    do
    {
      while (1)
      {
        if (v10)
        {
          unint64_t v11 = __clz(__rbit64(v10));
          v10 &= v10 - 1;
          unint64_t v12 = v11 | (v6 << 6);
        }
        else
        {
          int64_t v13 = v6 + 1;
          if (__OFADD__(v6, 1)) {
            goto LABEL_152;
          }
          if (v13 >= v116) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v7 + 8 * v13);
          ++v6;
          if (!v14)
          {
            int64_t v6 = v13 + 1;
            if (v13 + 1 >= v116) {
              goto LABEL_39;
            }
            unint64_t v14 = *(void *)(v7 + 8 * v6);
            if (!v14)
            {
              int64_t v6 = v13 + 2;
              if (v13 + 2 >= v116) {
                goto LABEL_39;
              }
              unint64_t v14 = *(void *)(v7 + 8 * v6);
              if (!v14)
              {
                int64_t v6 = v13 + 3;
                if (v13 + 3 >= v116) {
                  goto LABEL_39;
                }
                unint64_t v14 = *(void *)(v7 + 8 * v6);
                if (!v14)
                {
                  int64_t v15 = v13 + 4;
                  if (v15 >= v116) {
                    goto LABEL_39;
                  }
                  unint64_t v14 = *(void *)(v7 + 8 * v15);
                  if (!v14)
                  {
                    while (1)
                    {
                      int64_t v6 = v15 + 1;
                      if (__OFADD__(v15, 1)) {
                        break;
                      }
                      if (v6 >= v116) {
                        goto LABEL_39;
                      }
                      unint64_t v14 = *(void *)(v7 + 8 * v6);
                      ++v15;
                      if (v14) {
                        goto LABEL_24;
                      }
                    }
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
                    goto LABEL_159;
                  }
                  int64_t v6 = v15;
                }
              }
            }
          }
LABEL_24:
          unint64_t v10 = (v14 - 1) & v14;
          unint64_t v12 = __clz(__rbit64(v14)) + (v6 << 6);
        }
        uint64_t v16 = *(void *)(v3 + 56) + 16 * v12;
        int64_t v17 = *(uint64_t **)v16;
        if (*(unsigned char *)(v16 + 8) == 1) {
          break;
        }
        if (v17 != a2) {
          goto LABEL_36;
        }
      }
      uint64_t v18 = *a2;
      if ((unint64_t)*a2 >= 0x800)
      {
LABEL_32:
        swift_getKeyPath();
        uint64_t v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        char v23 = v22;
        swift_release();
        if (v23) {
          goto LABEL_160;
        }
        goto LABEL_35;
      }
      if ((unint64_t)(v18 - 513) < 2)
      {
        swift_getKeyPath();
        uint64_t v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        char v25 = v24;
        swift_release();
        if (v25) {
          goto LABEL_162;
        }
      }
      else
      {
        if (!v18) {
          goto LABEL_32;
        }
        if (v18 != 512) {
          break;
        }
        swift_getKeyPath();
        uint64_t v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        char v21 = v20;
        swift_release();
        if (v21) {
          goto LABEL_164;
        }
      }
LABEL_35:
      uint64_t v3 = v117;
    }
    while (*(uint64_t **)((char *)a2 + v19) == v17);
LABEL_36:
    *(unint64_t *)((char *)v114 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    BOOL v26 = __OFADD__(v115++, 1);
  }
  while (!v26);
  __break(1u);
LABEL_39:
  uint64_t v27 = v115;
  if (!v115) {
    return MEMORY[0x1E4FBC868];
  }
  if (v115 == *(void *)(v3 + 16))
  {
    swift_retain();
    return v3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  uint64_t v50 = static _DictionaryStorage.allocate(capacity:)();
  int64_t v51 = 0;
  unint64_t v52 = *v114;
  uint64_t v53 = v50 + 64;
LABEL_86:
  uint64_t v115 = v27;
  if (v52)
  {
    unint64_t v58 = __clz(__rbit64(v52));
    v52 &= v52 - 1;
    int64_t v59 = v51;
    unint64_t v60 = v58 | (v51 << 6);
    goto LABEL_106;
  }
  int64_t v61 = v51 + 1;
  if (__OFADD__(v51, 1)) {
    goto LABEL_155;
  }
  if (v61 < v113)
  {
    unint64_t v62 = v114[v61];
    int64_t v63 = v51 + 1;
    if (!v62)
    {
      int64_t v63 = v51 + 2;
      if (v51 + 2 >= v113) {
        return v50;
      }
      unint64_t v62 = v114[v63];
      if (!v62)
      {
        int64_t v63 = v51 + 3;
        if (v51 + 3 >= v113) {
          return v50;
        }
        unint64_t v62 = v114[v63];
        if (!v62)
        {
          int64_t v63 = v51 + 4;
          if (v51 + 4 >= v113) {
            return v50;
          }
          unint64_t v62 = v114[v63];
          if (!v62)
          {
            int64_t v63 = v51 + 5;
            if (v51 + 5 >= v113) {
              return v50;
            }
            unint64_t v62 = v114[v63];
            if (!v62)
            {
              uint64_t v64 = v51 + 6;
              if (v51 + 6 >= v113) {
                return v50;
              }
              unint64_t v62 = v114[v64];
              if (!v62)
              {
                while (1)
                {
                  int64_t v63 = v64 + 1;
                  if (__OFADD__(v64, 1)) {
                    break;
                  }
                  if (v63 >= v113) {
                    return v50;
                  }
                  unint64_t v62 = v114[v63];
                  ++v64;
                  if (v62) {
                    goto LABEL_105;
                  }
                }
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
              }
              int64_t v63 = v51 + 6;
            }
          }
        }
      }
    }
LABEL_105:
    unint64_t v52 = (v62 - 1) & v62;
    int64_t v59 = v63;
    unint64_t v60 = __clz(__rbit64(v62)) + (v63 << 6);
LABEL_106:
    uint64_t v65 = 16 * v60;
    uint64_t v66 = *(void *)(v3 + 56);
    Swift::String v67 = (uint64_t *)(*(void *)(v3 + 48) + v65);
    uint64_t v69 = *v67;
    uint64_t v68 = v67[1];
    unint64_t v70 = (uint64_t *)(v66 + v65);
    uint64_t v71 = *v70;
    char v72 = *((unsigned char *)v70 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v73 = Hasher._finalize()();
    uint64_t v74 = -1 << *(unsigned char *)(v50 + 32);
    unint64_t v75 = v73 & ~v74;
    unint64_t v76 = v75 >> 6;
    if (((-1 << v75) & ~*(void *)(v53 + 8 * (v75 >> 6))) != 0)
    {
      unint64_t v54 = __clz(__rbit64((-1 << v75) & ~*(void *)(v53 + 8 * (v75 >> 6)))) | v75 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_85;
    }
    char v77 = 0;
    unint64_t v78 = (unint64_t)(63 - v74) >> 6;
    while (++v76 != v78 || (v77 & 1) == 0)
    {
      BOOL v79 = v76 == v78;
      if (v76 == v78) {
        unint64_t v76 = 0;
      }
      v77 |= v79;
      uint64_t v80 = *(void *)(v53 + 8 * v76);
      if (v80 != -1)
      {
        unint64_t v54 = __clz(__rbit64(~v80)) + (v76 << 6);
LABEL_85:
        *(void *)(v53 + ((v54 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v54;
        uint64_t v55 = 16 * v54;
        uint64_t v56 = (void *)(*(void *)(v50 + 48) + v55);
        *uint64_t v56 = v69;
        v56[1] = v68;
        uint64_t v57 = *(void *)(v50 + 56) + v55;
        *(void *)uint64_t v57 = v71;
        *(unsigned char *)(v57 + 8) = v72;
        ++*(void *)(v50 + 16);
        uint64_t v27 = v115 - 1;
        uint64_t v3 = v117;
        int64_t v51 = v59;
        if (v115 == 1) {
          return v50;
        }
        goto LABEL_86;
      }
    }
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
    goto LABEL_156;
  }
  return v50;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = isStackAllocationSafe;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  char v4 = *(unsigned char *)(isStackAllocationSafe + 32);
  int64_t v117 = (unint64_t)((1 << v4) + 63) >> 6;
  size_t v5 = 8 * v117;
  uint64_t v122 = a2;
  uint64_t v123 = isStackAllocationSafe;
  if ((v4 & 0x3Fu) > 0xD)
  {
    uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe();
    if ((isStackAllocationSafe & 1) == 0)
    {
      uint64_t v118 = (unint64_t *)swift_slowAlloc();
      bzero(v118, v5);
      int64_t v31 = 0;
      uint64_t v32 = *(void *)(v3 + 64);
      uint64_t v119 = 0;
      uint64_t v120 = v3 + 64;
      uint64_t v33 = 1 << *(unsigned char *)(v3 + 32);
      if (v33 < 64) {
        uint64_t v34 = ~(-1 << v33);
      }
      else {
        uint64_t v34 = -1;
      }
      unint64_t v35 = v34 & v32;
      int64_t v121 = (unint64_t)(v33 + 63) >> 6;
      uint64_t v36 = MEMORY[0x1E4F948E0];
      while (1)
      {
        while (1)
        {
          if (v35)
          {
            unint64_t v37 = __clz(__rbit64(v35));
            v35 &= v35 - 1;
            unint64_t v38 = v37 | (v31 << 6);
          }
          else
          {
            int64_t v39 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_156;
            }
            if (v39 >= v121) {
              goto LABEL_82;
            }
            unint64_t v40 = *(void *)(v120 + 8 * v39);
            ++v31;
            if (!v40)
            {
              int64_t v31 = v39 + 1;
              if (v39 + 1 >= v121) {
                goto LABEL_82;
              }
              unint64_t v40 = *(void *)(v120 + 8 * v31);
              if (!v40)
              {
                int64_t v31 = v39 + 2;
                if (v39 + 2 >= v121) {
                  goto LABEL_82;
                }
                unint64_t v40 = *(void *)(v120 + 8 * v31);
                if (!v40)
                {
                  int64_t v31 = v39 + 3;
                  if (v39 + 3 >= v121) {
                    goto LABEL_82;
                  }
                  unint64_t v40 = *(void *)(v120 + 8 * v31);
                  if (!v40)
                  {
                    int64_t v41 = v39 + 4;
                    if (v41 >= v121) {
                      goto LABEL_82;
                    }
                    unint64_t v40 = *(void *)(v120 + 8 * v41);
                    if (!v40)
                    {
                      while (1)
                      {
                        int64_t v31 = v41 + 1;
                        if (__OFADD__(v41, 1)) {
                          goto LABEL_161;
                        }
                        if (v31 >= v121) {
                          break;
                        }
                        unint64_t v40 = *(void *)(v120 + 8 * v31);
                        ++v41;
                        if (v40) {
                          goto LABEL_66;
                        }
                      }
LABEL_82:
                      uint64_t v55 = v119;
                      if (!v119)
                      {
                        uint64_t v3 = MEMORY[0x1E4FBC868];
                        goto LABEL_152;
                      }
                      if (v119 == *(void *)(v3 + 16))
                      {
                        swift_retain();
                        goto LABEL_152;
                      }
                      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
                      uint64_t v86 = static _DictionaryStorage.allocate(capacity:)();
                      int64_t v87 = 0;
                      unint64_t v88 = *v118;
                      uint64_t v89 = v86 + 64;
                      while (1)
                      {
                        uint64_t v119 = v55;
                        if (v88)
                        {
                          unint64_t v94 = __clz(__rbit64(v88));
                          v88 &= v88 - 1;
                          int64_t v95 = v87;
                          unint64_t v96 = v94 | (v87 << 6);
                        }
                        else
                        {
                          int64_t v97 = v87 + 1;
                          if (__OFADD__(v87, 1)) {
                            goto LABEL_160;
                          }
                          if (v97 >= v117) {
                            goto LABEL_151;
                          }
                          unint64_t v98 = v118[v97];
                          int64_t v99 = v87 + 1;
                          if (!v98)
                          {
                            int64_t v99 = v87 + 2;
                            if (v87 + 2 >= v117) {
                              goto LABEL_151;
                            }
                            unint64_t v98 = v118[v99];
                            if (!v98)
                            {
                              int64_t v99 = v87 + 3;
                              if (v87 + 3 >= v117) {
                                goto LABEL_151;
                              }
                              unint64_t v98 = v118[v99];
                              if (!v98)
                              {
                                int64_t v99 = v87 + 4;
                                if (v87 + 4 >= v117) {
                                  goto LABEL_151;
                                }
                                unint64_t v98 = v118[v99];
                                if (!v98)
                                {
                                  int64_t v99 = v87 + 5;
                                  if (v87 + 5 >= v117) {
                                    goto LABEL_151;
                                  }
                                  unint64_t v98 = v118[v99];
                                  if (!v98)
                                  {
                                    uint64_t v100 = v87 + 6;
                                    if (v87 + 6 >= v117) {
                                      goto LABEL_151;
                                    }
                                    unint64_t v98 = v118[v100];
                                    if (!v98)
                                    {
                                      while (1)
                                      {
                                        int64_t v99 = v100 + 1;
                                        if (__OFADD__(v100, 1)) {
                                          goto LABEL_165;
                                        }
                                        if (v99 >= v117) {
                                          break;
                                        }
                                        unint64_t v98 = v118[v99];
                                        ++v100;
                                        if (v98) {
                                          goto LABEL_141;
                                        }
                                      }
LABEL_151:
                                      uint64_t v3 = v86;
LABEL_152:
                                      MEMORY[0x185309510](v118, -1, -1);
                                      return v3;
                                    }
                                    int64_t v99 = v87 + 6;
                                  }
                                }
                              }
                            }
                          }
LABEL_141:
                          unint64_t v88 = (v98 - 1) & v98;
                          int64_t v95 = v99;
                          unint64_t v96 = __clz(__rbit64(v98)) + (v99 << 6);
                        }
                        uint64_t v101 = 16 * v96;
                        uint64_t v102 = (uint64_t *)(*(void *)(v3 + 48) + v101);
                        uint64_t v104 = *v102;
                        uint64_t v103 = v102[1];
                        uint64_t v105 = *(void *)(v3 + 56) + v101;
                        uint64_t v106 = *(void *)v105;
                        char v107 = *(unsigned char *)(v105 + 8);
                        Hasher.init(_seed:)();
                        swift_bridgeObjectRetain();
                        String.hash(into:)();
                        Swift::Int v108 = Hasher._finalize()();
                        uint64_t v109 = -1 << *(unsigned char *)(v86 + 32);
                        unint64_t v110 = v108 & ~v109;
                        unint64_t v111 = v110 >> 6;
                        if (((-1 << v110) & ~*(void *)(v89 + 8 * (v110 >> 6))) != 0)
                        {
                          unint64_t v90 = __clz(__rbit64((-1 << v110) & ~*(void *)(v89 + 8 * (v110 >> 6)))) | v110 & 0x7FFFFFFFFFFFFFC0;
                        }
                        else
                        {
                          char v112 = 0;
                          unint64_t v113 = (unint64_t)(63 - v109) >> 6;
                          do
                          {
                            if (++v111 == v113 && (v112 & 1) != 0) {
                              goto LABEL_155;
                            }
                            BOOL v114 = v111 == v113;
                            if (v111 == v113) {
                              unint64_t v111 = 0;
                            }
                            v112 |= v114;
                            uint64_t v115 = *(void *)(v89 + 8 * v111);
                          }
                          while (v115 == -1);
                          unint64_t v90 = __clz(__rbit64(~v115)) + (v111 << 6);
                        }
                        *(void *)(v89 + ((v90 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v90;
                        uint64_t v91 = 16 * v90;
                        int64_t v92 = (void *)(*(void *)(v86 + 48) + v91);
                        *int64_t v92 = v104;
                        v92[1] = v103;
                        uint64_t v93 = *(void *)(v86 + 56) + v91;
                        *(void *)uint64_t v93 = v106;
                        *(unsigned char *)(v93 + 8) = v107;
                        ++*(void *)(v86 + 16);
                        uint64_t v55 = v119 - 1;
                        uint64_t v3 = v123;
                        int64_t v87 = v95;
                        if (v119 == 1) {
                          goto LABEL_151;
                        }
                      }
                    }
                    int64_t v31 = v41;
                  }
                }
              }
            }
LABEL_66:
            unint64_t v35 = (v40 - 1) & v40;
            unint64_t v38 = __clz(__rbit64(v40)) + (v31 << 6);
          }
          uint64_t v42 = *(void *)(v3 + 56) + 16 * v38;
          uint64_t v43 = *(void *)v42;
          if ((*(unsigned char *)(v42 + 8) & 1) == 0) {
            break;
          }
          if (v43 != v2)
          {
LABEL_78:
            *(unint64_t *)((char *)v118 + ((v38 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v38;
            BOOL v29 = __OFADD__(v119++, 1);
            if (v29) {
              goto LABEL_162;
            }
          }
        }
        uint64_t v125 = v36;
        v124[0] = v43;
        __swift_project_boxed_opaque_existential_1(v124, v36);
        DynamicType = (uint64_t *)swift_getDynamicType();
        swift_bridgeObjectRetain();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
        uint64_t v45 = *DynamicType;
        if ((unint64_t)*DynamicType < 0x800)
        {
          if ((unint64_t)(v45 - 513) < 2)
          {
            swift_getKeyPath();
            uint64_t v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            char v53 = v52;
            swift_release();
            if (v53) {
              goto LABEL_169;
            }
            goto LABEL_77;
          }
          if (v45)
          {
            if (v45 != 512)
            {
              swift_bridgeObjectRelease();
              uint64_t v2 = v122;
              goto LABEL_78;
            }
            swift_getKeyPath();
            uint64_t v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
            char v48 = v47;
            uint64_t result = swift_release();
            if (v48)
            {
              __break(1u);
              return result;
            }
            goto LABEL_77;
          }
        }
        swift_getKeyPath();
        uint64_t v46 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
        char v51 = v50;
        swift_release();
        if (v51) {
          goto LABEL_167;
        }
LABEL_77:
        uint64_t v54 = *(uint64_t *)((char *)DynamicType + v46);
        swift_bridgeObjectRelease();
        uint64_t v2 = v122;
        uint64_t v3 = v123;
        if (v54 != v122) {
          goto LABEL_78;
        }
      }
    }
  }
  v116[1] = v116;
  MEMORY[0x1F4188790](isStackAllocationSafe);
  uint64_t v118 = (void *)((char *)v116 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0));
  bzero(v118, v5);
  int64_t v6 = 0;
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v119 = 0;
  uint64_t v120 = v3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v121 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = MEMORY[0x1E4F948E0];
  while (v10)
  {
    unint64_t v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v13 = v12 | (v6 << 6);
LABEL_25:
    uint64_t v17 = *(void *)(v3 + 56) + 16 * v13;
    uint64_t v18 = *(void *)v17;
    if (*(unsigned char *)(v17 + 8))
    {
      if (v18 != v2)
      {
LABEL_36:
        *(unint64_t *)((char *)v118 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
        BOOL v29 = __OFADD__(v119++, 1);
        if (v29) {
          goto LABEL_159;
        }
      }
    }
    else
    {
      uint64_t v125 = v11;
      v124[0] = v18;
      __swift_project_boxed_opaque_existential_1(v124, v11);
      uint64_t v19 = (uint64_t *)swift_getDynamicType();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v124);
      uint64_t v20 = *v19;
      if ((unint64_t)*v19 < 0x800)
      {
        if ((unint64_t)(v20 - 513) < 2)
        {
          swift_getKeyPath();
          uint64_t v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          char v27 = v26;
          swift_release();
          if (v27) {
            goto LABEL_166;
          }
          goto LABEL_35;
        }
        if (v20)
        {
          if (v20 != 512)
          {
            swift_bridgeObjectRelease();
            uint64_t v2 = v122;
            goto LABEL_36;
          }
          swift_getKeyPath();
          uint64_t v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
          char v23 = v22;
          swift_release();
          if (v23) {
            goto LABEL_168;
          }
          goto LABEL_35;
        }
      }
      swift_getKeyPath();
      uint64_t v21 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      char v25 = v24;
      swift_release();
      if (v25) {
        goto LABEL_164;
      }
LABEL_35:
      uint64_t v28 = *(uint64_t *)((char *)v19 + v21);
      swift_bridgeObjectRelease();
      uint64_t v2 = v122;
      uint64_t v3 = v123;
      if (v28 != v122) {
        goto LABEL_36;
      }
    }
  }
  int64_t v14 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_154;
  }
  if (v14 < v121)
  {
    unint64_t v15 = *(void *)(v120 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v121) {
        goto LABEL_40;
      }
      unint64_t v15 = *(void *)(v120 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v121) {
          goto LABEL_40;
        }
        unint64_t v15 = *(void *)(v120 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v121) {
            goto LABEL_40;
          }
          unint64_t v15 = *(void *)(v120 + 8 * v6);
          if (!v15)
          {
            int64_t v16 = v14 + 4;
            if (v16 >= v121) {
              goto LABEL_40;
            }
            unint64_t v15 = *(void *)(v120 + 8 * v16);
            if (!v15)
            {
              while (1)
              {
                int64_t v6 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_158;
                }
                if (v6 >= v121) {
                  goto LABEL_40;
                }
                unint64_t v15 = *(void *)(v120 + 8 * v6);
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }
            int64_t v6 = v16;
          }
        }
      }
    }
LABEL_24:
    unint64_t v10 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_25;
  }
LABEL_40:
  uint64_t v30 = v119;
  if (!v119) {
    return MEMORY[0x1E4FBC868];
  }
  if (v119 == *(void *)(v3 + 16))
  {
    swift_retain();
    return v3;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PredicateCodableConfiguration.AllowListType>);
  uint64_t v56 = static _DictionaryStorage.allocate(capacity:)();
  int64_t v57 = 0;
  unint64_t v58 = *v118;
  uint64_t v59 = v56 + 64;
LABEL_88:
  uint64_t v119 = v30;
  if (v58)
  {
    unint64_t v64 = __clz(__rbit64(v58));
    v58 &= v58 - 1;
    int64_t v65 = v57;
    unint64_t v66 = v64 | (v57 << 6);
    goto LABEL_108;
  }
  int64_t v67 = v57 + 1;
  if (__OFADD__(v57, 1)) {
    goto LABEL_157;
  }
  if (v67 < v117)
  {
    unint64_t v68 = v118[v67];
    int64_t v69 = v57 + 1;
    if (!v68)
    {
      int64_t v69 = v57 + 2;
      if (v57 + 2 >= v117) {
        return v56;
      }
      unint64_t v68 = v118[v69];
      if (!v68)
      {
        int64_t v69 = v57 + 3;
        if (v57 + 3 >= v117) {
          return v56;
        }
        unint64_t v68 = v118[v69];
        if (!v68)
        {
          int64_t v69 = v57 + 4;
          if (v57 + 4 >= v117) {
            return v56;
          }
          unint64_t v68 = v118[v69];
          if (!v68)
          {
            int64_t v69 = v57 + 5;
            if (v57 + 5 >= v117) {
              return v56;
            }
            unint64_t v68 = v118[v69];
            if (!v68)
            {
              uint64_t v70 = v57 + 6;
              if (v57 + 6 >= v117) {
                return v56;
              }
              unint64_t v68 = v118[v70];
              if (!v68)
              {
                while (1)
                {
                  int64_t v69 = v70 + 1;
                  if (__OFADD__(v70, 1)) {
                    break;
                  }
                  if (v69 >= v117) {
                    return v56;
                  }
                  unint64_t v68 = v118[v69];
                  ++v70;
                  if (v68) {
                    goto LABEL_107;
                  }
                }
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
LABEL_168:
                __break(1u);
LABEL_169:
                __break(1u);
              }
              int64_t v69 = v57 + 6;
            }
          }
        }
      }
    }
LABEL_107:
    unint64_t v58 = (v68 - 1) & v68;
    int64_t v65 = v69;
    unint64_t v66 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_108:
    uint64_t v71 = 16 * v66;
    char v72 = (uint64_t *)(*(void *)(v3 + 48) + v71);
    uint64_t v74 = *v72;
    uint64_t v73 = v72[1];
    uint64_t v75 = *(void *)(v3 + 56) + v71;
    uint64_t v76 = *(void *)v75;
    char v77 = *(unsigned char *)(v75 + 8);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v78 = Hasher._finalize()();
    uint64_t v79 = -1 << *(unsigned char *)(v56 + 32);
    unint64_t v80 = v78 & ~v79;
    unint64_t v81 = v80 >> 6;
    if (((-1 << v80) & ~*(void *)(v59 + 8 * (v80 >> 6))) != 0)
    {
      unint64_t v60 = __clz(__rbit64((-1 << v80) & ~*(void *)(v59 + 8 * (v80 >> 6)))) | v80 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_87;
    }
    char v82 = 0;
    unint64_t v83 = (unint64_t)(63 - v79) >> 6;
    while (++v81 != v83 || (v82 & 1) == 0)
    {
      BOOL v84 = v81 == v83;
      if (v81 == v83) {
        unint64_t v81 = 0;
      }
      v82 |= v84;
      uint64_t v85 = *(void *)(v59 + 8 * v81);
      if (v85 != -1)
      {
        unint64_t v60 = __clz(__rbit64(~v85)) + (v81 << 6);
LABEL_87:
        *(void *)(v59 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
        uint64_t v61 = 16 * v60;
        unint64_t v62 = (void *)(*(void *)(v56 + 48) + v61);
        *unint64_t v62 = v74;
        v62[1] = v73;
        uint64_t v63 = *(void *)(v56 + 56) + v61;
        *(void *)uint64_t v63 = v76;
        *(unsigned char *)(v63 + 8) = v77;
        ++*(void *)(v56 + 16);
        uint64_t v30 = v119 - 1;
        uint64_t v3 = v123;
        int64_t v57 = v65;
        if (v119 == 1) {
          return v56;
        }
        goto LABEL_88;
      }
    }
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
    goto LABEL_163;
  }
  return v56;
}

uint64_t outlined assign with take of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t specialized PredicateCodableConfiguration._identifier(for:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  specialized Sequence.first(where:)((uint64_t (*)(void *))partial apply for closure #1 in PredicateCodableConfiguration._identifier(for:), v3, (uint64_t)v34);
  swift_bridgeObjectRelease();
  outlined init with take of (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?((uint64_t)v34, (uint64_t)v35);
  if (v35[1])
  {
    uint64_t v4 = v35[0];
    outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v35[2], v35[3], v35[4], v35[5], v35[6], v36);
    return v4;
  }
  unint64_t v5 = *(void *)dispatch thunk of static AnyKeyPath._rootAndValueType.getter();
  if (v5 < 0x800 && v5 - 512 >= 3 && v5 != 0) {
    return 0;
  }
  uint64_t v28 = a1;
  uint64_t v31 = TypeMetadata.descriptor.getter();
  uint64_t v32 = v3 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v3 + 64);
  int64_t v33 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v11 = 0;
  uint64_t v30 = v3;
  while (v9)
  {
    unint64_t v18 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v19 = v18 | (v11 << 6);
LABEL_41:
    uint64_t v27 = *(void *)(v3 + 56) + 48 * v19;
    if (*(unsigned char *)(v27 + 40) == 1)
    {
      uint64_t v12 = *(void *)(*(void *)(v3 + 48) + 16 * v19);
      uint64_t v13 = *(void *)v27;
      int64_t v14 = *(uint64_t (**)(uint64_t))(v27 + 8);
      uint64_t v16 = *(void *)(v27 + 16);
      uint64_t v15 = *(void *)(v27 + 24);
      uint64_t v17 = *(void *)(v27 + 32);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(void *)v27, (uint64_t)v14, v16, v15, v17, 1);
      outlined copy of PredicateCodableConfiguration.AllowListKeyPath(v13, (uint64_t)v14, v16, v15, v17, 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v31 == v13)
      {
        uint64_t v29 = v12;
        uint64_t v23 = Type.genericArguments.getter();
        uint64_t v24 = v14(v23);
        if (v24)
        {
          uint64_t v25 = v24;
          type metadata accessor for AnyKeyPath();
          char v26 = MEMORY[0x185302EC0](v25, v28);
          swift_release();
          swift_release();
          if (v26)
          {
            swift_release();
            swift_bridgeObjectRelease();
            outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v13, (uint64_t)v14, v16, v15, v17, 1);
            return v29;
          }
          swift_bridgeObjectRelease();
          uint64_t v3 = v30;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v3 = v30;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
      }
      uint64_t result = outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v13, (uint64_t)v14, v16, v15, v17, 1);
    }
  }
  int64_t v20 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v20 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  ++v11;
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 1;
  if (v20 + 1 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 2;
  if (v20 + 2 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 3;
  if (v20 + 3 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 4;
  if (v20 + 4 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21) {
    goto LABEL_40;
  }
  int64_t v11 = v20 + 5;
  if (v20 + 5 >= v33) {
    goto LABEL_43;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v11);
  if (v21)
  {
LABEL_40:
    unint64_t v9 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v11 << 6);
    goto LABEL_41;
  }
  int64_t v22 = v20 + 6;
  if (v22 >= v33)
  {
LABEL_43:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v22);
  if (v21)
  {
    int64_t v11 = v22;
    goto LABEL_40;
  }
  while (1)
  {
    int64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_43;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_40;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t specialized static PredicateCodableConfiguration.AllowListKeyPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a1, (uint64_t)v12);
  uint64_t v4 = v12[0];
  if ((v13 & 1) == 0)
  {
    outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v10);
    if ((v11 & 1) == 0)
    {
      uint64_t v8 = v10[0];
      type metadata accessor for AnyKeyPath();
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a1, (void (*)(void, void, void, void, void, void))outlined copy of PredicateCodableConfiguration.AllowListKeyPath);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a2, (void (*)(void, void, void, void, void, void))outlined copy of PredicateCodableConfiguration.AllowListKeyPath);
      char v7 = MEMORY[0x185302EC0](v4, v8);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a2, (void (*)(void, void, void, void, void, void))outlined consume of PredicateCodableConfiguration.AllowListKeyPath);
      outlined retain of PredicateCodableConfiguration.AllowListKeyPath(a1, (void (*)(void, void, void, void, void, void))outlined consume of PredicateCodableConfiguration.AllowListKeyPath);
      return v7 & 1;
    }
    goto LABEL_8;
  }
  uint64_t v5 = v12[3];
  uint64_t v6 = v12[4];
  outlined init with take of PredicateCodableConfiguration.AllowListKeyPath(a2, (uint64_t)v10);
  if (v11 != 1 || v4 != v10[0])
  {
LABEL_8:
    char v7 = 0;
    return v7 & 1;
  }
  if (v5 == v10[3] && v6 == v10[4]) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return v7 & 1;
}

uint64_t dispatch thunk of static PredicateCodableKeyPathProviding.predicateCodableKeyPaths.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t initializeBufferWithCopyOfBuffer for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for PredicateCodableConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableConfiguration(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1)
{
  return outlined consume of PredicateCodableConfiguration.AllowListKeyPath(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t initializeWithCopy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  outlined copy of PredicateCodableConfiguration.AllowListKeyPath(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  char v14 = *(unsigned char *)(a1 + 40);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of PredicateCodableConfiguration.AllowListKeyPath(v5, v7, v6, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PredicateCodableConfiguration.AllowListKeyPath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t destructiveInjectEnumTag for PredicateCodableConfiguration.AllowListKeyPath(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2 & 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type CombineIdentifier and conformance CombineIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier;
  if (!lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier)
  {
    type metadata accessor for CombineIdentifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CombineIdentifier and conformance CombineIdentifier);
  }
  return result;
}

uint64_t outlined retain of PredicateCodableConfiguration.AllowListKeyPath(uint64_t a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t partial apply for closure #1 in PredicateCodableConfiguration._identifier(for:)(uint64_t a1)
{
  return closure #1 in PredicateCodableConfiguration._identifier(for:)(a1, v1) & 1;
}

uint64_t outlined init with take of (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: PredicateCodableConfiguration.AllowListKeyPath)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_181DA930C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for Collection.first : String(a1, (uint64_t (*)(uint64_t, uint64_t))specialized Collection.first.getter, a2);
}

uint64_t sub_181DA9394@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return key path getter for Collection.first : String(a1, (uint64_t (*)(uint64_t, uint64_t))specialized BidirectionalCollection.last.getter, a2);
}

uint64_t sub_181DA93C8(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_181DA93D0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = MEMORY[0x185301BE0](*a1, *(void *)(a3 + a2 - 24), *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  *a4 = result & 1;
  return result;
}

uint64_t sub_181DA940C()
{
  return 24;
}

__n128 sub_181DA9418(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_181DA942C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = MEMORY[0x185301BD0](*a1, *(void *)(a3 + a2 - 24), *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_181DA9464()
{
  return 24;
}

__n128 sub_181DA9470(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_181DA9484(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_181DA948C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Set.isEmpty.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_181DA94C4()
{
  return 16;
}

__n128 sub_181DA94D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181DA94DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Set.count.getter();
  *a1 = result;
  return result;
}

uint64_t sub_181DA9510()
{
  return 16;
}

__n128 sub_181DA951C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_181DA9528()
{
  type metadata accessor for Array();

  return swift_getWitnessTable();
}

uint64_t sub_181DA9570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A>[A](a1, a2, a3, MEMORY[0x1E4FBB338], MEMORY[0x1E4FBAFB0]);
}

uint64_t sub_181DA95B0()
{
  return 8;
}

void *sub_181DA95BC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_181DA95C8()
{
  type metadata accessor for Array();

  return swift_getWitnessTable();
}

uint64_t sub_181DA9610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for Collection.first : <A>[A](a1, a2, a3, MEMORY[0x1E4FBB368], MEMORY[0x1E4FBB688]);
}

uint64_t sub_181DA9650()
{
  return 8;
}

uint64_t sub_181DA9660()
{
  return 8;
}

uint64_t sub_181DA966C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = MEMORY[0x185302610](*a1, *(void *)(a3 + a2 - 8));
  *a4 = result;
  return result;
}

uint64_t sub_181DA96A0()
{
  return 8;
}

uint64_t BinaryInteger.formatted<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 48))(v5, a3, a5);
}

uint64_t BinaryInteger.init<A>(_:strategy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v25[2] = a7;
  v25[3] = a5;
  v25[0] = a8;
  v25[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  int64_t v20 = (char *)v25 - v19;
  unint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(a6 + 48);
  uint64_t v26 = a1;
  v21(a1, a4, a6, v18);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
    uint64_t v22 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v26, v22);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v16, v20, AssociatedTypeWitness);
    dispatch thunk of BinaryInteger.init<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
    uint64_t v24 = swift_getAssociatedTypeWitness();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v26, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v20, AssociatedTypeWitness);
  }
}

uint64_t BinaryInteger.init<A>(_:strategy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a6 + 48))(a1, a4, a6);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
}

uint64_t outlined init with copy of CurrencyFormatStyleConfiguration.Collection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CurrencyFormatStyleConfiguration.Collection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PredicateExpressions.IntDivision.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.IntDivision.init(lhs:rhs:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.IntDivision, a8);
}

uint64_t PredicateExpressions.IntDivision.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x1E4FBB8C8], a3);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.IntDivision<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.IntRemainder.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.IntDivision.init(lhs:rhs:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.IntRemainder, a8);
}

uint64_t PredicateExpressions.IntRemainder.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x1E4FBB8D0], a3);
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.IntRemainder<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntRemainder.evaluate(_:)(a1, a2, a3);
}

uint64_t PredicateExpressions.FloatDivision.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return PredicateExpressions.IntDivision.init(lhs:rhs:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.FloatDivision, a8);
}

uint64_t PredicateExpressions.IntDivision.init(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a9, a1);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a7;
  uint64_t v17 = a8(0, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a9 + *(int *)(v17 + 60), a2, a4);
}

uint64_t PredicateExpressions.FloatDivision.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.IntDivision.evaluate(_:)(a1, a2, MEMORY[0x1E4FBAEE8], a3);
}

uint64_t PredicateExpressions.IntDivision.evaluate(_:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void (*a3)(char *, char *, uint64_t, void)@<X2>, uint64_t a4@<X8>)
{
  unint64_t v21 = a3;
  uint64_t v23 = a4;
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t v16 = *a1;
  uint64_t v24 = v16;
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, double))(v7 + 16))(&v24, v8, v7, v13);
  if (!v4)
  {
    uint64_t v18 = v22;
    uint64_t v24 = v16;
    (*(void (**)(uint64_t *, void))(a2[5] + 16))(&v24, a2[3]);
    v21(v15, v11, AssociatedTypeWitness, a2[6]);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v18 + 8);
    v19(v11, AssociatedTypeWitness);
    return ((uint64_t (*)(char *, uint64_t))v19)(v15, AssociatedTypeWitness);
  }
  return result;
}

uint64_t protocol witness for PredicateExpression.evaluate(_:) in conformance PredicateExpressions.FloatDivision<A, B>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return PredicateExpressions.FloatDivision.evaluate(_:)(a1, a2, a3);
}

uint64_t static PredicateExpressions.build_Division<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return static PredicateExpressions.build_Division<A, B>(lhs:rhs:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.IntDivision, a8);
}

{
  return static PredicateExpressions.build_Division<A, B>(lhs:rhs:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.FloatDivision, a8);
}

uint64_t static PredicateExpressions.build_Remainder<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  return static PredicateExpressions.build_Division<A, B>(lhs:rhs:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void, void *))type metadata accessor for PredicateExpressions.IntRemainder, a8);
}

uint64_t static PredicateExpressions.build_Division<A, B>(lhs:rhs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void, void *)@<X7>, uint64_t a9@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(a9, a1);
  v19[0] = a3;
  v19[1] = a4;
  v19[2] = a5;
  v19[3] = a6;
  v19[4] = a7;
  uint64_t v17 = a8(0, v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a9 + *(int *)(v17 + 60), a2, a4);
}

uint64_t PredicateExpressions.FloatDivision.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter(a1, 31, 0xD000000000000013, (void *)0x80000001823B03F0);
}

uint64_t PredicateExpressions.IntDivision.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter(a1, 29, 0xD000000000000011, (void *)0x80000001823B0410);
}

uint64_t PredicateExpressions.IntRemainder.description.getter(int a1)
{
  return PredicateExpressions.FloatDivision.description.getter(a1, 30, 0xD000000000000012, (void *)0x80000001823B0430);
}

uint64_t PredicateExpressions.FloatDivision.description.getter(int a1, Swift::Int a2, uint64_t a3, void *a4)
{
  _StringGuts.grow(_:)(a2);
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._uint64_t countAndFlagsBits = 0x203A736872202CLL;
  v7._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 41;
  v8._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t PredicateExpressions.FloatDivision<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.FloatDivision<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.FloatDivision<>.init(from:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void, void *, double);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  char v36 = a4;
  unint64_t v38 = a3;
  uint64_t v34 = a5;
  int64_t v33 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v35 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  unint64_t v37 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v14;
  v39[0] = v14;
  v39[1] = v15;
  v39[2] = v16;
  unint64_t v40 = v17;
  int64_t v41 = v18;
  uint64_t v20 = v19(0, v39, v12);
  uint64_t v32 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v28 - v21;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (v5) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v30 = v22;
  uint64_t v31 = a1;
  uint64_t v29 = v20;
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  uint64_t v23 = v37;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v24 = v30;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v30, v23, v42);
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v39, v40);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
  uint64_t v25 = v29;
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(&v24[*(int *)(v29 + 60)], v9, a2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  uint64_t v26 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 16))(v34, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v24, v25);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.FloatDivision<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.FloatDivision<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.FloatDivision<>.init(from:), a5, a6);
}

uint64_t PredicateExpressions.IntRemainder<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.IntRemainder<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.FloatDivision<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.IntRemainder<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.FloatDivision<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.IntRemainder<>.init(from:), a5, a6);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.FloatDivision<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, uint64_t, void, void), uint64_t a5, uint64_t a6)
{
  return a4(a1, a2[2], a2[3], a2[4], *(void *)(a3 - 8), a6, a2[5], *(void *)(a3 - 24));
}

uint64_t PredicateExpressions.IntDivision<>.encode(to:)(void *a1)
{
  return PredicateExpressions.CollectionIndexSubscript<>.encode(to:)(a1);
}

uint64_t PredicateExpressions.IntDivision<>.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  return PredicateExpressions.FloatDivision<>.init(from:)(a1, a2, a3, a4, a5);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.FloatDivision<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntRemainder<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t instantiation function for generic protocol witness table for <> PredicateExpressions.IntDivision<A, B>(void *a1)
{
  return instantiation function for generic protocol witness table for <> PredicateExpressions.OptionalFlatMap<A, B, C, D>(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.IntDivision<A, B>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for Decodable.init(from:) in conformance <> PredicateExpressions.FloatDivision<A, B>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, uint64_t, void, void))PredicateExpressions.IntDivision<>.init(from:), a5, a6);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.IntDivision<A, B>(void *a1)
{
  return PredicateExpressions.IntDivision<>.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for PredicateExpressions.IntDivision(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for PredicateExpressions.IntDivision(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x181DAB0DCLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.FloatDivision<A, B>(void *a1)
{
  return protocol witness for Encodable.encode(to:) in conformance <> PredicateExpressions.IntDivision<A, B>(a1);
}

uint64_t AttributeScopes.FoundationAttributes.MeasurementAttribute.Component.init(unumberFormatField:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result > 0xB) {
    *a2 = 2;
  }
  else {
    *a2 = byte_1821AA260[(int)result];
  }
  return result;
}

uint64_t _sSS10FoundationE28withFileSystemRepresentationyxxSPys4Int8VGSgKXEKlFyt_Tg5031_s10Foundation3URLV34withUnsafecd22RepresentationyxxSPys4F25VGSgKXEKlFxAHKXEfU_yt_Tg5AFxs5Error_pRi_zRi0_zlyytIsgyrzo_Tf1ncn_n(uint64_t a1, unint64_t a2, uint64_t (*a3)(char *))
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v8 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v8 < -1) {
    goto LABEL_21;
  }
  uint64_t v9 = v8 + 1;
  if (v8 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v11 = (char *)v20 - v10;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v11, v9, 1, a1, a2);
    char v13 = v12;
    swift_bridgeObjectRelease();
    if (v13) {
      size_t v14 = 0;
    }
    else {
      size_t v14 = v11;
    }
    uint64_t result = a3(v14);
    if (v3) {
      return swift_willThrow();
    }
  }
  else
  {
    uint64_t v16 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v16, v9, 1, a1, a2);
    char v18 = v17;
    swift_bridgeObjectRelease();
    if (v18) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v16;
    }
    a3((char *)v19);
    return MEMORY[0x185309510](v16, -1, -1);
  }
  return result;
}

size_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2)
{
  return specialized String.withFileSystemRepresentation<A>(_:)(a1, a2, 0x100uLL);
}

{
  return specialized String.withFileSystemRepresentation<A>(_:)(a1, a2, 0x401uLL);
}

size_t specialized String.withFileSystemRepresentation<A>(_:)(uint64_t a1, unint64_t a2, size_t a3)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a2) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a1 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v7 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_19:
    __break(1u);
  }
  if (v7 < -1) {
    goto LABEL_19;
  }
  uint64_t v8 = v7 + 1;
  if (v7 < 1024 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    uint64_t v10 = (char *)v18 - v9;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v10, v8, 1, a1, a2);
    char v12 = v11;
    swift_bridgeObjectRelease();
    if (v12) {
      return 0;
    }
    else {
      return strnlen(v10, a3);
    }
  }
  else
  {
    size_t v14 = (const char *)swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v14, v8, 1, a1, a2);
    char v16 = v15;
    swift_bridgeObjectRelease();
    if (v16) {
      size_t v13 = 0;
    }
    else {
      size_t v13 = strnlen(v14, a3);
    }
    MEMORY[0x185309510](v14, -1, -1);
  }
  return v13;
}

uint64_t String.withFileSystemRepresentation<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)&v33 - v14;
  if ((v16 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a3 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a3) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v18 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v18 < -1) {
    goto LABEL_21;
  }
  uint64_t v35 = a4;
  uint64_t v19 = a1;
  uint64_t v20 = v18 + 1;
  if (v18 <= 1023 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    uint64_t v34 = a5;
    unint64_t v37 = &v33;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v22 = (char *)&v33 - v21;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v22, v20, 1, a2, a3);
    char v24 = v23;
    swift_bridgeObjectRelease();
    if (v24) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v22;
    }
    v19(v25);
    if (v5)
    {
      return swift_willThrow();
    }
    else
    {
      uint64_t v27 = v35;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v28(v15, v12, v35);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v15, v27);
    }
  }
  else
  {
    uint64_t v29 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v29, v20, 1, a2, a3);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if (v31) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    v19((char *)v32);
    return MEMORY[0x185309510](v29, -1, -1);
  }
}

Swift::String __swiftcall String._trimmingWhitespace()()
{
  unint64_t v2 = v1;
  unint64_t v3 = v0;
  swift_bridgeObjectRetain();
  specialized BidirectionalCollection._trimmingCharacters(while:)(v3, v2);
  swift_bridgeObjectRelease();

  uint64_t v4 = String.init(_:)();
  result._unint64_t object = v5;
  result._uint64_t countAndFlagsBits = v4;
  return result;
}

uint64_t String.init(_utf16:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0) {
    return specialized String.init(_utf16:)(result, a3);
  }
  __break(1u);
  return result;
}

uint64_t String.withMutableFileSystemRepresentation<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v15 = (char *)&v33 - v14;
  if ((v16 & 0x1000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = String.UTF8View._foreignCount()();
  }
  else if ((a3 & 0x2000000000000000) != 0)
  {
    Swift::Int isStackAllocationSafe = HIBYTE(a3) & 0xF;
  }
  else
  {
    Swift::Int isStackAllocationSafe = a2 & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v18 = 3 * isStackAllocationSafe;
  if ((unsigned __int128)(isStackAllocationSafe * (__int128)3) >> 64 != (3 * isStackAllocationSafe) >> 63)
  {
    __break(1u);
LABEL_21:
    __break(1u);
  }
  if (v18 < -1) {
    goto LABEL_21;
  }
  uint64_t v35 = a4;
  uint64_t v19 = a1;
  uint64_t v20 = v18 + 1;
  if (v18 <= 1023 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
  {
    uint64_t v34 = a5;
    unint64_t v37 = &v33;
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v22 = (char *)&v33 - v21;
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, (uint64_t)v22, v20, 1, a2, a3);
    char v24 = v23;
    swift_bridgeObjectRelease();
    if (v24) {
      uint64_t v25 = 0;
    }
    else {
      uint64_t v25 = v22;
    }
    v19(v25);
    if (v5)
    {
      return swift_willThrow();
    }
    else
    {
      uint64_t v27 = v35;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      v28(v15, v12, v35);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v28)(v34, v15, v27);
    }
  }
  else
  {
    uint64_t v29 = swift_slowAlloc();
    swift_bridgeObjectRetain();
    String._decomposed(_:into:nullTerminated:)(1, v29, v20, 1, a2, a3);
    char v31 = v30;
    swift_bridgeObjectRelease();
    if (v31) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = v29;
    }
    v19((char *)v32);
    return MEMORY[0x185309510](v29, -1, -1);
  }
}

Swift::Int specialized MutableCollection<>.sort(by:)(char **a1)
{
  unint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
  }
  uint64_t v3 = *((void *)v2 + 2);
  v5[0] = (uint64_t)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v2;
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v32 = a1;
  uint64_t v41 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v7 = *(void *)(v41 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v41);
  unint64_t v40 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int64_t v39 = (char *)&v30 - v10;
  uint64_t v38 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v11 = MEMORY[0x1F4188790](v38);
  unint64_t v37 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v11);
  uint64_t v36 = (char *)&v30 - v15;
  uint64_t v31 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *a4;
    uint64_t v34 = v7 + 8;
    uint64_t v35 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v42 = v16;
    char v17 = (_DWORD *)(v16 + 4 * a3 - 4);
    uint64_t v18 = v38;
    uint64_t v19 = (void (**)(char *, uint64_t))(v7 + 8);
LABEL_5:
    uint64_t v20 = v32;
    uint64_t v33 = v17;
    uint64_t v43 = a3;
    while (1)
    {
      uint64_t v21 = v36;
      Unicode.Scalar.properties.getter();
      unint64_t v22 = v39;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      uint64_t v44 = *v35;
      v44(v21, v18);
      LOBYTE(v45) = Unicode.CanonicalCombiningClass.rawValue.getter();
      unsigned int v45 = v45;
      char v23 = *v19;
      char v24 = v22;
      uint64_t v25 = v41;
      (*v19)(v24, v41);
      uint64_t v26 = v37;
      Unicode.Scalar.properties.getter();
      uint64_t v27 = v40;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      v44(v26, v18);
      LOBYTE(v26) = Unicode.CanonicalCombiningClass.rawValue.getter();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v27, v25);
      uint64_t v28 = v43;
      if (v45 >= v26)
      {
LABEL_4:
        a3 = v28 + 1;
        char v17 = v33 + 1;
        if (a3 == v31) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v42) {
        break;
      }
      int v29 = *v17;
      uint64_t result = v17[1];
      *char v17 = result;
      v17[1] = v29;
      --v17;
      if (v28 == ++v20) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, char *a3, char *a4)
{
  uint64_t v69 = type metadata accessor for Unicode.CanonicalCombiningClass();
  uint64_t v63 = *(char **)(v69 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v69);
  unint64_t v68 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  int64_t v67 = (char *)v56 - v10;
  uint64_t v66 = type metadata accessor for Unicode.Scalar.Properties();
  uint64_t v11 = MEMORY[0x1F4188790](v66);
  int64_t v65 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v64 = (char *)v56 - v14;
  uint64_t v15 = a2 - a1;
  uint64_t v16 = a2 - a1 + 3;
  if (a2 - a1 >= 0) {
    uint64_t v16 = a2 - a1;
  }
  uint64_t v17 = v16 >> 2;
  unint64_t v62 = a3;
  uint64_t v18 = a3 - a2;
  uint64_t v19 = a3 - a2 + 3;
  if (a3 - a2 >= 0) {
    uint64_t v19 = a3 - a2;
  }
  uint64_t v20 = v19 >> 2;
  uint64_t v74 = a1;
  uint64_t v70 = a1;
  uint64_t v71 = a4;
  uint64_t v73 = a4;
  if (v17 >= v19 >> 2)
  {
    if (v18 < -3) {
      goto LABEL_46;
    }
    int64_t v39 = v71;
    if (v71 != a2 || &a2[4 * v20] <= v71)
    {
      uint64_t v40 = v13;
      memmove(v71, a2, 4 * v20);
      uint64_t v13 = v40;
    }
    uint64_t v41 = &v39[4 * v20];
    char v72 = v41;
    uint64_t v74 = a2;
    if (v18 < 4 || v70 >= a2) {
      goto LABEL_45;
    }
    _OWORD v56[2] = v63 + 8;
    int64_t v57 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v42 = v62 - 4;
    uint64_t v43 = a2;
    uint64_t v44 = v66;
    unsigned int v45 = (void (**)(char *, uint64_t))(v63 + 8);
    while (1)
    {
      uint64_t v63 = a2;
      uint64_t v61 = v41;
      unint64_t v62 = v42 + 4;
      unint64_t v58 = v41 - 4;
      uint64_t v59 = v43 - 4;
      uint64_t v46 = v64;
      Unicode.Scalar.properties.getter();
      char v47 = v67;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      char v48 = *v57;
      (*v57)(v46, v44);
      LOBYTE(v60) = Unicode.CanonicalCombiningClass.rawValue.getter();
      LODWORD(v60) = v60;
      uint64_t v49 = *v45;
      char v50 = v47;
      uint64_t v51 = v69;
      (*v45)(v50, v69);
      char v52 = v65;
      Unicode.Scalar.properties.getter();
      char v53 = v68;
      Unicode.Scalar.Properties.canonicalCombiningClass.getter();
      v48(v52, v44);
      LOBYTE(v52) = Unicode.CanonicalCombiningClass.rawValue.getter();
      v49(v53, v51);
      if (v60 >= v52)
      {
        uint64_t v41 = v58;
        char v72 = v58;
        uint64_t v43 = v63;
        if (v62 >= v61 && v42 < v61)
        {
          uint64_t v54 = v71;
          if (v62 != v61) {
            *(_DWORD *)uint64_t v42 = *(_DWORD *)v58;
          }
          goto LABEL_43;
        }
        *(_DWORD *)uint64_t v42 = *(_DWORD *)v58;
      }
      else
      {
        uint64_t v41 = v61;
        uint64_t v43 = v59;
        if (v62 != v63 || v42 >= v63) {
          *(_DWORD *)uint64_t v42 = *(_DWORD *)v59;
        }
        uint64_t v74 = v43;
      }
      uint64_t v54 = v71;
LABEL_43:
      if (v41 > v54)
      {
        v42 -= 4;
        a2 = v43;
        if (v43 > v70) {
          continue;
        }
      }
      goto LABEL_45;
    }
  }
  if (v15 >= -3)
  {
    uint64_t v21 = v71;
    if (v71 != a1 || &a1[4 * v17] <= v71)
    {
      uint64_t v22 = v13;
      memmove(v71, a1, 4 * v17);
      uint64_t v13 = v22;
    }
    uint64_t v61 = &v21[4 * v17];
    char v72 = v61;
    if (v15 >= 4 && a2 < v62)
    {
      uint64_t v59 = v63 + 8;
      uint64_t v60 = v13 + 8;
      char v23 = (void (**)(char *, uint64_t))(v13 + 8);
      do
      {
        uint64_t v71 = v21;
        char v24 = v64;
        Unicode.Scalar.properties.getter();
        uint64_t v25 = v67;
        Unicode.Scalar.Properties.canonicalCombiningClass.getter();
        uint64_t v26 = *v23;
        uint64_t v27 = a2;
        uint64_t v28 = v66;
        (*v23)(v24, v66);
        LOBYTE(v63) = Unicode.CanonicalCombiningClass.rawValue.getter();
        LODWORD(v63) = v63;
        int v29 = *(void (**)(char *, uint64_t))v59;
        uint64_t v30 = v25;
        uint64_t v31 = v69;
        (*(void (**)(char *, uint64_t))v59)(v30, v69);
        uint64_t v32 = v65;
        Unicode.Scalar.properties.getter();
        uint64_t v33 = v68;
        Unicode.Scalar.Properties.canonicalCombiningClass.getter();
        v26(v32, v28);
        LOBYTE(v32) = Unicode.CanonicalCombiningClass.rawValue.getter();
        v29(v33, v31);
        if (v63 >= v32)
        {
          unint64_t v37 = v27;
          uint64_t v34 = v70;
          uint64_t v38 = v71;
          if (v70 != v71) {
            *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
          }
          uint64_t v21 = v38 + 4;
          uint64_t v73 = v21;
          uint64_t v36 = v37;
        }
        else
        {
          uint64_t v34 = v70;
          uint64_t v35 = v71;
          uint64_t v36 = v27 + 4;
          if (v70 < v27 || v70 >= v36 || v70 != v27) {
            *(_DWORD *)uint64_t v70 = *(_DWORD *)v27;
          }
          uint64_t v21 = v35;
        }
        uint64_t v70 = v34 + 4;
        uint64_t v74 = v34 + 4;
        if (v21 >= v61) {
          break;
        }
        a2 = v36;
      }
      while (v36 < v62);
    }
LABEL_45:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v74, (const void **)&v73, &v72);
    return 1;
  }
LABEL_46:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection.remove(at:)(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 4);
  if (v2)
  {
    if (result <= 0xEFu)
    {
      uint64_t v3 = (*(_DWORD *)v1 >> result);
      *(_DWORD *)uint64_t v1 = (*(_DWORD *)v1 >> (((result + 16) >> 1) & 0x18) >> (((result + 16) >> 1) & 0x18) << ((result + 16 - ((((((result + 16) - result) & 0xF000u) >> 12) + 16) & 0x10)) & 0x10)) | *(_DWORD *)v1 & ((1 << ((result >> 1) & 0x18) << ((result >> 1) & 0x18)) - 1);
      *(unsigned char *)(v1 + 4) = v2
                         - ((((((result + 16) - result) & 0xF000u) >> 12) + 16) & 0xF0);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  char v2;
  uint64_t v3;

  char v2 = *(unsigned char *)(v1 + 4);
  if (v2)
  {
    if (result <= 0xF7u)
    {
      uint64_t v3 = (*(_DWORD *)v1 >> result);
      *(_DWORD *)uint64_t v1 = (*(_DWORD *)v1 >> (((result + 8) >> 1) & 0x1C) >> (((result + 8) >> 1) & 0x1C) << ((result + 8 - ((((((result + 8) - result) & 0xE000u) >> 13) + 8) & 0x18)) & 0x18)) | *(_DWORD *)v1 & ((1 << ((result >> 1) & 0x1C) << ((result >> 1) & 0x1C)) - 1);
      *(unsigned char *)(v1 + 4) = v2
                         - ((((((result + 8) - result) & 0xE000u) >> 13) + 8) & 0xF8);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser;
  if (!lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF16.ForwardParser and conformance Unicode.UTF16.ForwardParser);
  }
  return result;
}

uint64_t sub_181DAD59C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_181DAD5AC()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t outlined consume of SubpathElement()
{
  return swift_bridgeObjectRelease();
}

uint64_t lazy protocol witness table accessor for type UnsafeBufferPointer<UInt16>.DecompositionError and conformance UnsafeBufferPointer<A>.DecompositionError(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser()
{
  unint64_t result = lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser;
  if (!lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Unicode.UTF8.ForwardParser and conformance Unicode.UTF8.ForwardParser);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UnsafeBufferPointer.DecompositionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181DAD760);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for UnsafeBufferPointer.DecompositionError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in UnsafeBufferPointer<A>.DecompositionError()
{
  return swift_getWitnessTable();
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, unsigned __int8 *a2)
{
  if (*(void *)(*(void *)a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a2), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 1;
  }
}

uint64_t specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  if (*(void *)(*(void *)a1 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4 | ((HIDWORD(a4) & 1) << 32), a5),
        (v5 & 1) != 0))
  {
    return swift_retain();
  }
  else
  {
    return 1;
  }
}

void *specialized closure #1 in FormatterCache.formatter(for:creator:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  if (!*(void *)(*a1 + 16)) {
    return 0;
  }
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v4 & 1) == 0) {
    return 0;
  }
  char v5 = *(void **)(*(void *)(v2 + 56) + 8 * v3);
  id v6 = v5;
  return v5;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance _LocaleICU.State.NumberFormattersBox()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance _LocaleICU.State.NumberFormattersBox(uint64_t a1)
{
  specialized Dictionary<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _LocaleICU.State.NumberFormattersBox()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  specialized Dictionary<>.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance _LocaleICU.State.NumberFormattersBox(unint64_t *a1, uint64_t *a2)
{
  return specialized static Dictionary<>.== infix(_:_:)(*a1, *a2);
}

uint64_t _LocaleICU.State.hash(into:)(uint64_t a1)
{
  Swift::UInt v3 = *(unsigned __int8 *)(v1 + 96);
  uint64_t v4 = *(void *)(v1 + 112);
  uint64_t v24 = *(void *)(v1 + 136);
  uint64_t v33 = *(void *)(v1 + 144);
  uint64_t v31 = *(void *)(v1 + 168);
  uint64_t v34 = *(void *)(v1 + 176);
  uint64_t v30 = *(void *)(v1 + 104);
  uint64_t v54 = *(void *)(v1 + 200);
  int v35 = *(char *)(v1 + 208);
  int v41 = *(unsigned __int8 *)(v1 + 265);
  Swift::UInt v25 = *(void *)(v1 + 272);
  int v42 = *(unsigned __int8 *)(v1 + 280);
  int v52 = *(char *)(v1 + 281);
  uint64_t v32 = *(void *)(v1 + 288);
  uint64_t v55 = *(void *)(v1 + 296);
  int v36 = *(unsigned __int8 *)(v1 + 320);
  uint64_t v26 = *(void *)(v1 + 328);
  uint64_t v27 = *(void *)(v1 + 360);
  uint64_t v43 = *(void *)(v1 + 336);
  uint64_t v44 = *(void *)(v1 + 368);
  uint64_t v37 = *(void *)(v1 + 392);
  uint64_t v28 = *(void *)(v1 + 400);
  uint64_t v29 = *(void *)(v1 + 408);
  uint64_t v56 = *(void *)(v1 + 416);
  uint64_t v53 = *(void *)(v1 + 448);
  uint64_t v46 = *(void *)(v1 + 456);
  uint64_t v47 = *(void *)(v1 + 464);
  uint64_t v48 = *(void *)(v1 + 472);
  uint64_t v49 = *(void *)(v1 + 480);
  uint64_t v50 = *(void *)(v1 + 488);
  uint64_t v5 = *(void *)(v1 + 504);
  uint64_t v51 = *(void *)(v1 + 496);
  uint64_t v6 = *(void *)(v1 + 520);
  uint64_t v7 = *(void *)(v1 + 528);
  uint64_t v38 = *(void *)(v1 + 512);
  uint64_t v39 = *(void *)(v1 + 536);
  if (*(void *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if (v3 != 16)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v3);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
    if (v3 != 16) {
      goto LABEL_3;
    }
  }
  Hasher._combine(_:)(0);
LABEL_6:
  uint64_t v45 = v7;
  uint64_t v40 = v5;
  if (v4)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v30, v4);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v30, v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v8 = v55;
  int v9 = v52;
  int v10 = v35;
  if (v33 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v33)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v24, v33);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      int v9 = v52;
      int v10 = v35;
      uint64_t v8 = v55;
      outlined consume of Locale.Subdivision??(v24, v33);
      if (!v34) {
        goto LABEL_20;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      outlined consume of Locale.Subdivision??(v24, 0);
      if (!v34) {
        goto LABEL_20;
      }
    }
LABEL_11:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v31, v34);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v31, v34);
    uint64_t v11 = v37;
    if (v54) {
      goto LABEL_12;
    }
    goto LABEL_21;
  }
  Hasher._combine(_:)(0);
  if (v34) {
    goto LABEL_11;
  }
LABEL_20:
  Hasher._combine(_:)(0);
  uint64_t v11 = v37;
  if (v54)
  {
LABEL_12:
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(*(void *)(v54 + 16));
    uint64_t v12 = *(void *)(v54 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = v54 + 56;
      do
      {
        v13 += 32;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      uint64_t v8 = v55;
    }
    if (v10 == 7) {
      goto LABEL_17;
    }
    goto LABEL_22;
  }
LABEL_21:
  Hasher._combine(_:)(0);
  if (v10 == 7)
  {
LABEL_17:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_22:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
LABEL_23:
  if (v41)
  {
    Hasher._combine(_:)(0);
    if (!v42) {
      goto LABEL_25;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v42)
    {
LABEL_25:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v25);
      if (v9 != 4) {
        goto LABEL_26;
      }
LABEL_30:
      Hasher._combine(_:)(0);
      if (v8) {
        goto LABEL_27;
      }
      goto LABEL_31;
    }
  }
  Hasher._combine(_:)(0);
  if (v9 == 4) {
    goto LABEL_30;
  }
LABEL_26:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_27:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v32, v8);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v32, v8);
    goto LABEL_32;
  }
LABEL_31:
  Hasher._combine(_:)(0);
LABEL_32:
  if (v36 == 2)
  {
    Swift::UInt8 v14 = 0;
  }
  else
  {
    Swift::UInt8 v14 = v36 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  if (v43 == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v15 = v53;
    if (v44 == 1) {
      goto LABEL_37;
    }
LABEL_47:
    Hasher._combine(_:)(1u);
    if (v44)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v27, v44);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v21 = v27;
      uint64_t v22 = v44;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v21 = v27;
      uint64_t v22 = 0;
    }
    outlined consume of Locale.Subdivision??(v21, v22);
    if (v11 != 1) {
      goto LABEL_38;
    }
LABEL_51:
    Hasher._combine(_:)(0);
    goto LABEL_52;
  }
  Hasher._combine(_:)(1u);
  uint64_t v15 = v53;
  if (v43)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t v19 = v26;
    uint64_t v20 = v43;
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v19 = v26;
    uint64_t v20 = 0;
  }
  outlined consume of Locale.Subdivision??(v19, v20);
  if (v44 != 1) {
    goto LABEL_47;
  }
LABEL_37:
  Hasher._combine(_:)(0);
  if (v11 == 1) {
    goto LABEL_51;
  }
LABEL_38:
  Hasher._combine(_:)(1u);
  if (v11)
  {
    Hasher._combine(_:)(1u);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 112);
    swift_unknownObjectRetain();
    uint64_t v18 = ObjectType;
    uint64_t v15 = v53;
    v17(a1, v18, v28);
    outlined consume of TimeZone??(v11);
  }
  else
  {
    Hasher._combine(_:)(0);
    outlined consume of TimeZone??(0);
  }
LABEL_52:
  if (v56 == 1)
  {
    Hasher._combine(_:)(0);
    if (v15)
    {
LABEL_54:
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v56)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v29, v56);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      outlined consume of Locale.Subdivision??(v29, v56);
      if (v15) {
        goto LABEL_54;
      }
    }
    else
    {
      Hasher._combine(_:)(0);
      outlined consume of Locale.Subdivision??(v29, 0);
      if (v15) {
        goto LABEL_54;
      }
    }
  }
  Hasher._combine(_:)(0);
LABEL_58:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v39);

  return swift_bridgeObjectRelease();
}

Swift::Int _LocaleICU.State.hashValue.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v40 = *(void *)(v0 + 144);
  uint64_t v27 = *(void *)(v0 + 136);
  uint64_t v34 = *(void *)(v0 + 168);
  uint64_t v41 = *(void *)(v0 + 176);
  uint64_t v33 = *(void *)(v0 + 104);
  uint64_t v56 = *(void *)(v0 + 200);
  int v42 = *(char *)(v0 + 208);
  int v44 = *(unsigned __int8 *)(v0 + 280);
  int v43 = *(unsigned __int8 *)(v0 + 265);
  int v4 = *(char *)(v0 + 281);
  uint64_t v45 = *(void *)(v0 + 296);
  uint64_t v35 = *(void *)(v0 + 288);
  int v36 = *(unsigned __int8 *)(v0 + 320);
  Swift::UInt v28 = *(void *)(v0 + 272);
  uint64_t v29 = *(void *)(v0 + 328);
  uint64_t v37 = *(void *)(v0 + 336);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 400);
  uint64_t v57 = *(void *)(v0 + 368);
  uint64_t v58 = *(void *)(v0 + 416);
  uint64_t v32 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 448);
  uint64_t v46 = *(void *)(v0 + 392);
  uint64_t v47 = *(void *)(v0 + 456);
  uint64_t v48 = *(void *)(v0 + 464);
  uint64_t v49 = *(void *)(v0 + 472);
  uint64_t v50 = *(void *)(v0 + 480);
  uint64_t v51 = *(void *)(v0 + 488);
  uint64_t v52 = *(void *)(v0 + 504);
  uint64_t v53 = *(void *)(v0 + 512);
  uint64_t v54 = *(void *)(v0 + 520);
  uint64_t v55 = *(void *)(v0 + 496);
  uint64_t v38 = *(void *)(v0 + 528);
  uint64_t v39 = *(void *)(v0 + 536);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
  }
  uint64_t v6 = v58;
  if (v2 == 16)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  uint64_t v7 = v57;
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v33, v3);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v33, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  uint64_t v8 = v55;
  if (v40 == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v9 = v41;
    if (!v41) {
      goto LABEL_12;
    }
LABEL_18:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v34, v9);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v34, v9);
    if (!v56) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  if (v40)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.Subdivision??(v27, v40);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v10 = v27;
    uint64_t v11 = v40;
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v10 = v27;
    uint64_t v11 = 0;
  }
  outlined consume of Locale.Subdivision??(v10, v11);
  uint64_t v9 = v41;
  if (v41) {
    goto LABEL_18;
  }
LABEL_12:
  Hasher._combine(_:)(0);
  if (!v56)
  {
LABEL_13:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v56 + 16));
  uint64_t v12 = *(void *)(v56 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = v56 + 56;
    do
    {
      v13 += 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    uint64_t v7 = v57;
    uint64_t v6 = v58;
  }
LABEL_23:
  if (v42 == 7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v43)
  {
    Hasher._combine(_:)(0);
    if (!v44) {
      goto LABEL_28;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v44)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v28);
      if (v4 != 4) {
        goto LABEL_29;
      }
LABEL_33:
      Hasher._combine(_:)(0);
      if (v45) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }
  Hasher._combine(_:)(0);
  if (v4 == 4) {
    goto LABEL_33;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v45)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v35, v45);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v35, v45);
    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
LABEL_35:
  if (v36 == 2)
  {
    Swift::UInt8 v14 = 0;
  }
  else
  {
    Swift::UInt8 v14 = v36 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v14);
  if (v37 == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v15 = v46;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v15 = v46;
    if (v37)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v16 = v29;
      uint64_t v17 = v37;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v16 = v29;
      uint64_t v17 = 0;
    }
    outlined consume of Locale.Subdivision??(v16, v17);
  }
  if (v7 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v7)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v30, v7);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v18 = v30;
      uint64_t v19 = v7;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v18 = v30;
      uint64_t v19 = 0;
    }
    outlined consume of Locale.Subdivision??(v18, v19);
  }
  if (v15 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v15)
    {
      Hasher._combine(_:)(1u);
      uint64_t v20 = v15;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v22 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v31 + 112);
      swift_unknownObjectRetain();
      v22(v59, ObjectType, v31);
      uint64_t v23 = v20;
      uint64_t v8 = v55;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v23 = 0;
    }
    outlined consume of TimeZone??(v23);
  }
  if (v6 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v32, v6);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v24 = v32;
      uint64_t v25 = v6;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v24 = v32;
      uint64_t v25 = 0;
    }
    outlined consume of Locale.Subdivision??(v24, v25);
    if (!v5) {
      goto LABEL_58;
    }
LABEL_63:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  Hasher._combine(_:)(0);
  if (v5) {
    goto LABEL_63;
  }
LABEL_58:
  Hasher._combine(_:)(0);
LABEL_64:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v59, v39);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _LocaleICU.State()
{
  uint64_t v1 = *(void *)(v0 + 8);
  Swift::UInt v2 = *(unsigned __int8 *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v39 = *(void *)(v0 + 144);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v33 = *(void *)(v0 + 168);
  uint64_t v32 = *(void *)(v0 + 104);
  uint64_t v54 = *(void *)(v0 + 200);
  int v40 = *(char *)(v0 + 208);
  int v42 = *(unsigned __int8 *)(v0 + 280);
  int v41 = *(unsigned __int8 *)(v0 + 265);
  int v5 = *(char *)(v0 + 281);
  uint64_t v43 = *(void *)(v0 + 296);
  uint64_t v34 = *(void *)(v0 + 288);
  int v35 = *(unsigned __int8 *)(v0 + 320);
  Swift::UInt v27 = *(void *)(v0 + 272);
  uint64_t v28 = *(void *)(v0 + 328);
  uint64_t v36 = *(void *)(v0 + 336);
  uint64_t v29 = *(void *)(v0 + 360);
  uint64_t v30 = *(void *)(v0 + 400);
  uint64_t v55 = *(void *)(v0 + 368);
  uint64_t v56 = *(void *)(v0 + 416);
  uint64_t v31 = *(void *)(v0 + 408);
  uint64_t v6 = *(void *)(v0 + 448);
  uint64_t v44 = *(void *)(v0 + 392);
  uint64_t v45 = *(void *)(v0 + 456);
  uint64_t v46 = *(void *)(v0 + 464);
  uint64_t v47 = *(void *)(v0 + 472);
  uint64_t v48 = *(void *)(v0 + 480);
  uint64_t v49 = *(void *)(v0 + 488);
  uint64_t v50 = *(void *)(v0 + 496);
  uint64_t v51 = *(void *)(v0 + 504);
  uint64_t v52 = *(void *)(v0 + 512);
  uint64_t v53 = *(void *)(v0 + 520);
  uint64_t v37 = *(void *)(v0 + 528);
  uint64_t v38 = *(void *)(v0 + 536);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Locale.Language.Components.hash(into:)();
  }
  uint64_t v57 = v6;
  uint64_t v8 = v55;
  uint64_t v7 = v56;
  if (v2 == 16)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
  }
  if (v3)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v32, v3);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v32, v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v39 == 1)
  {
    Hasher._combine(_:)(0);
    if (!v4) {
      goto LABEL_12;
    }
LABEL_18:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v33, v4);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v33, v4);
    if (!v54) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }
  Hasher._combine(_:)(1u);
  if (v39)
  {
    Hasher._combine(_:)(1u);
    outlined copy of Locale.Subdivision??(v26, v39);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = v26;
    uint64_t v10 = v39;
  }
  else
  {
    Hasher._combine(_:)(0);
    uint64_t v9 = v26;
    uint64_t v10 = 0;
  }
  outlined consume of Locale.Subdivision??(v9, v10);
  if (v4) {
    goto LABEL_18;
  }
LABEL_12:
  Hasher._combine(_:)(0);
  if (!v54)
  {
LABEL_13:
    Hasher._combine(_:)(0);
    goto LABEL_23;
  }
LABEL_19:
  Hasher._combine(_:)(1u);
  Swift::UInt v11 = *(void *)(v54 + 16);
  Hasher._combine(_:)(v11);
  if (v11)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = v54 + 56;
    do
    {
      v12 += 32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v8 = v55;
    uint64_t v7 = v56;
  }
LABEL_23:
  if (v40 == 7)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  if (v41)
  {
    Hasher._combine(_:)(0);
    if (!v42) {
      goto LABEL_28;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    specialized Optional<A>.hash(into:)();
    if (!v42)
    {
LABEL_28:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v27);
      if (v5 != 4) {
        goto LABEL_29;
      }
LABEL_33:
      Hasher._combine(_:)(0);
      if (v43) {
        goto LABEL_30;
      }
      goto LABEL_34;
    }
  }
  Hasher._combine(_:)(0);
  if (v5 == 4) {
    goto LABEL_33;
  }
LABEL_29:
  Hasher._combine(_:)(1u);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  if (v43)
  {
LABEL_30:
    Hasher._combine(_:)(1u);
    outlined copy of Locale.LanguageCode?(v34, v43);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v34, v43);
    goto LABEL_35;
  }
LABEL_34:
  Hasher._combine(_:)(0);
LABEL_35:
  if (v35 == 2)
  {
    Swift::UInt8 v13 = 0;
  }
  else
  {
    Swift::UInt8 v13 = v35 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  if (v36 == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v14 = v44;
  }
  else
  {
    Hasher._combine(_:)(1u);
    uint64_t v14 = v44;
    if (v36)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      uint64_t v15 = v28;
      uint64_t v16 = v36;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v15 = v28;
      uint64_t v16 = 0;
    }
    outlined consume of Locale.Subdivision??(v15, v16);
  }
  if (v8 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v8)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v29, v8);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = v29;
      uint64_t v18 = v8;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v17 = v29;
      uint64_t v18 = 0;
    }
    outlined consume of Locale.Subdivision??(v17, v18);
  }
  if (v14 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if (v14)
    {
      Hasher._combine(_:)(1u);
      uint64_t v19 = v14;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v21 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v30 + 112);
      swift_unknownObjectRetain();
      v21(v58, ObjectType, v30);
      uint64_t v22 = v19;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v22 = 0;
    }
    outlined consume of TimeZone??(v22);
  }
  if (v7 != 1)
  {
    Hasher._combine(_:)(1u);
    if (v7)
    {
      Hasher._combine(_:)(1u);
      outlined copy of Locale.Subdivision??(v31, v7);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      uint64_t v23 = v31;
      uint64_t v24 = v7;
    }
    else
    {
      Hasher._combine(_:)(0);
      uint64_t v23 = v31;
      uint64_t v24 = 0;
    }
    outlined consume of Locale.Subdivision??(v23, v24);
    if (!v57) {
      goto LABEL_58;
    }
LABEL_63:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_64;
  }
  Hasher._combine(_:)(0);
  if (v57) {
    goto LABEL_63;
  }
LABEL_58:
  Hasher._combine(_:)(0);
LABEL_64:
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v46);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v49);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)((uint64_t)v58, v38);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t closure #1 in _LocaleICU.identifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 456);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v11)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3, MEMORY[0x1E4FBA670]);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = 0x8000000000000000;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      void *v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 456) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v25 = v54;
      if (v20) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31) {
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  }
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0;
  *(void *)(v25 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v35 = (v45 - 1) & v45;
    int64_t v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    uint64_t v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    int v42 = (void *)(*(void *)(v25 + 48) + v38);
    long long v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    *int v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v32 = v52;
  }
  uint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  unint64_t v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    int64_t v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.subdivision.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = a1[45];
  uint64_t v3 = a1[46];
  uint64_t v5 = a1[47];
  uint64_t v6 = (void *)a1[48];
  if (v3 == 1)
  {
    uint64_t v8 = specialized static Locale.keywordValue(identifier:key:)();
    if (v9)
    {
      uint64_t v10 = v8;
      char v11 = v9;
      Swift::String v12 = String.lowercased()();
      a1[45] = v10;
      a1[46] = v11;
      *(Swift::String *)(a1 + 47) = v12;
      a2->_uint64_t countAndFlagsBits = v10;
      a2->_unint64_t object = v11;
      a2[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 45) = 0u;
      *(_OWORD *)(a1 + 47) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
  }
  else
  {
    a2->_uint64_t countAndFlagsBits = v4;
    a2->_unint64_t object = (void *)v3;
    a2[1]._uint64_t countAndFlagsBits = v5;
    a2[1]._unint64_t object = v6;
  }
  return outlined copy of Locale.Subdivision??(v4, v3);
}

uint64_t closure #1 in _LocaleICU.variant.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = a1[51];
  uint64_t v3 = a1[52];
  uint64_t v5 = a1[53];
  uint64_t v6 = (void *)a1[54];
  if (v3 == 1)
  {
    swift_retain();
    uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257);
    uint64_t v10 = v9;
    swift_release();
    if (v10)
    {
      Swift::String v11 = String.lowercased()();
      a1[51] = v8;
      a1[52] = v10;
      *(Swift::String *)(a1 + 53) = v11;
      a2->_uint64_t countAndFlagsBits = v8;
      a2->_unint64_t object = v10;
      a2[1] = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)(a1 + 51) = 0u;
      *(_OWORD *)(a1 + 53) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
  }
  else
  {
    a2->_uint64_t countAndFlagsBits = v4;
    a2->_unint64_t object = (void *)v3;
    a2[1]._uint64_t countAndFlagsBits = v5;
    a2[1]._unint64_t object = v6;
  }
  return outlined copy of Locale.Subdivision??(v4, v3);
}

uint64_t closure #1 in _LocaleICU.scriptCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 488);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if (v11)
    {
      Swift::String v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v13 = v17;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = 0x8000000000000000;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      char v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *char v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 488) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v24 = v53;
      if (v19) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  uint64_t v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30) {
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  }
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0;
  *(void *)(v24 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1 << *(unsigned char *)(v53 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v34 = (v44 - 1) & v44;
    int64_t v51 = v45;
    unint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    uint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = (void *)(*(void *)(v24 + 48) + v37);
    long long v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *uint64_t v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v31 = v51;
  }
  uint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    int64_t v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _LocaleICU.variantCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.variant.getter((void *)(v1 + 16), &v5);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  unint64_t object = v5._object;
  if (!v5._object) {
    return 0;
  }
  uint64_t countAndFlagsBits = v5._countAndFlagsBits;
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(countAndFlagsBits, (uint64_t)object);
  return countAndFlagsBits;
}

uint64_t closure #1 in _LocaleICU.variantCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 496);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if (v11)
    {
      Swift::String v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v53 = v17;
  uint64_t v13 = v18;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = *(void *)(a1 + 496);
  *(void *)(a1 + 496) = 0x8000000000000000;
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v22 = *(void *)(v54 + 16);
  BOOL v23 = (v20 & 1) == 0;
  uint64_t v24 = v22 + v23;
  if (__OFADD__(v22, v23))
  {
    __break(1u);
  }
  else
  {
    char v4 = v20;
    if (*(void *)(v54 + 24) < v24)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v25 = v54;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v27 & 1)) {
        goto LABEL_52;
      }
      unint64_t v21 = v26;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v21);
      swift_bridgeObjectRelease();
      uint64_t v14 = v53;
      void *v28 = v53;
      v28[1] = v13;
LABEL_48:
      *(void *)(a1 + 496) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v25 = v54;
      if (v20) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v48 = a2;
      uint64_t v14 = v53;
      specialized _NativeDictionary._insert(at:key:value:)(v21, v48, a3, v53, v13, v25);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v49 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v29 = static _DictionaryStorage.copy(original:)();
  uint64_t v25 = v29;
  if (!*(void *)(v54 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v21 = v49;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  unint64_t v30 = (void *)(v29 + 64);
  unint64_t v31 = (unint64_t)((1 << *(unsigned char *)(v25 + 32)) + 63) >> 6;
  if (v25 != v54 || (unint64_t)v30 >= v54 + 64 + 8 * v31) {
    memmove(v30, (const void *)(v54 + 64), 8 * v31);
  }
  uint64_t v50 = v54 + 64;
  int64_t v32 = 0;
  *(void *)(v25 + 16) = *(void *)(v54 + 16);
  uint64_t v33 = 1 << *(unsigned char *)(v54 + 32);
  uint64_t v34 = -1;
  if (v33 < 64) {
    uint64_t v34 = ~(-1 << v33);
  }
  unint64_t v35 = v34 & *(void *)(v54 + 64);
  int64_t v51 = (unint64_t)(v33 + 63) >> 6;
  while (1)
  {
    if (v35)
    {
      unint64_t v36 = __clz(__rbit64(v35));
      v35 &= v35 - 1;
      int64_t v52 = v32;
      unint64_t v37 = v36 | (v32 << 6);
      goto LABEL_22;
    }
    int64_t v44 = v32 + 1;
    if (__OFADD__(v32, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v44 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v44);
    int64_t v46 = v32 + 1;
    if (!v45)
    {
      int64_t v46 = v32 + 2;
      if (v32 + 2 >= v51) {
        goto LABEL_46;
      }
      unint64_t v45 = *(void *)(v50 + 8 * v46);
      if (!v45)
      {
        int64_t v46 = v32 + 3;
        if (v32 + 3 >= v51) {
          goto LABEL_46;
        }
        unint64_t v45 = *(void *)(v50 + 8 * v46);
        if (!v45)
        {
          int64_t v46 = v32 + 4;
          if (v32 + 4 >= v51) {
            goto LABEL_46;
          }
          unint64_t v45 = *(void *)(v50 + 8 * v46);
          if (!v45)
          {
            int64_t v46 = v32 + 5;
            if (v32 + 5 >= v51) {
              goto LABEL_46;
            }
            unint64_t v45 = *(void *)(v50 + 8 * v46);
            if (!v45)
            {
              int64_t v46 = v32 + 6;
              if (v32 + 6 >= v51) {
                goto LABEL_46;
              }
              unint64_t v45 = *(void *)(v50 + 8 * v46);
              if (!v45)
              {
                int64_t v46 = v32 + 7;
                if (v32 + 7 >= v51) {
                  goto LABEL_46;
                }
                unint64_t v45 = *(void *)(v50 + 8 * v46);
                if (!v45) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v35 = (v45 - 1) & v45;
    int64_t v52 = v46;
    unint64_t v37 = __clz(__rbit64(v45)) + (v46 << 6);
LABEL_22:
    uint64_t v38 = 16 * v37;
    uint64_t v39 = (uint64_t *)(*(void *)(v54 + 48) + v38);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    long long v42 = (void *)(*(void *)(v25 + 48) + v38);
    long long v43 = *(_OWORD *)(*(void *)(v54 + 56) + v38);
    *long long v42 = v40;
    v42[1] = v41;
    *(_OWORD *)(*(void *)(v25 + 56) + v38) = v43;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v32 = v52;
  }
  uint64_t v47 = v32 + 8;
  if (v32 + 8 >= v51) {
    goto LABEL_46;
  }
  unint64_t v45 = *(void *)(v50 + 8 * v47);
  if (v45)
  {
    int64_t v46 = v32 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v46 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v46 >= v51) {
      goto LABEL_46;
    }
    unint64_t v45 = *(void *)(v50 + 8 * v46);
    ++v47;
    if (v45) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

CFMutableCharacterSetRef _LocaleICU.exemplarCharacterSet.getter@<X0>(uint64_t *a1@<X8>)
{
  String.utf8CString.getter();
  ulocdata_open();
  swift_release();
  ulocdata_getExemplarSet();
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutable(0);
  if (!result) {
    goto LABEL_36;
  }
  CFMutableCharacterSetRef v3 = result;
  type metadata accessor for __CharacterSetStorage();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  *(unsigned char *)(v4 + 24) = 1;
  uint64_t v5 = swift_slowAlloc();
  int ItemCount = uset_getItemCount();
  if (ItemCount < 0) {
LABEL_31:
  }
    __break(1u);
  int v7 = ItemCount;
  int64_t v32 = a1;
  if (!ItemCount)
  {
LABEL_29:
    *int64_t v32 = v4;
    swift_retain();
    MEMORY[0x185309510](v5, -1, -1);
    swift_release();
    uset_close();
    return (CFMutableCharacterSetRef)ulocdata_close();
  }
  int v8 = 0;
  int v33 = ItemCount;
  while (1)
  {
    if (v7 == v8)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      __break(1u);
      goto LABEL_31;
    }
    int Item = uset_getItem();
    if (Item > 0) {
      break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      char v16 = *(unsigned char *)(v4 + 24);
      CFCharacterSetRef v17 = (const __CFCharacterSet *)*(id *)(v4 + 16);
      CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0, v17);
      CFMutableCharacterSetRef v18 = result;
      if (v16)
      {
        if (!result) {
          goto LABEL_37;
        }
      }
      else if (!result)
      {
        goto LABEL_38;
      }

      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v18;
      *(unsigned char *)(v26 + 24) = 1;
      swift_release();
      uint64_t v4 = v26;
      int v7 = v33;
    }
    char v27 = *(__CFCharacterSet **)(v4 + 16);
    if (*(unsigned char *)(v4 + 24))
    {
      v34.location = 0;
      v34.length = 1;
      CFCharacterSetAddCharactersInRange(v27, v34);
      goto LABEL_7;
    }
    CFCharacterSetRef v28 = v27;
    CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0, v28);
    if (!result) {
      goto LABEL_33;
    }
    CFMutableCharacterSetRef v29 = result;
    unint64_t v30 = result;
    v35.location = 0;
    v35.length = 1;
    CFCharacterSetAddCharactersInRange(v30, v35);

    unint64_t v31 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v29;
    *(unsigned char *)(v4 + 24) = 1;

LABEL_6:
    int v7 = v33;
LABEL_7:
    if (v7 == ++v8) {
      goto LABEL_29;
    }
  }
  id v12 = objc_msgSend(objc_allocWithZone((Class)NSString), sel_initWithCharacters_length_, v5, Item);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);

  String.init<A>(_:)();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    char v13 = *(unsigned char *)(v4 + 24);
    CFCharacterSetRef v14 = (const __CFCharacterSet *)*(id *)(v4 + 16);
    CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0, v14);
    CFMutableCharacterSetRef v15 = result;
    if (v13)
    {
      if (!result) {
        goto LABEL_34;
      }
    }
    else if (!result)
    {
      goto LABEL_35;
    }

    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v15;
    *(unsigned char *)(v19 + 24) = 1;
    swift_release();
    uint64_t v4 = v19;
  }
  char v20 = *(void **)(v4 + 16);
  if (*(unsigned char *)(v4 + 24))
  {
    CFStringRef v9 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    unint64_t v10 = v20;
    CFCharacterSetAddCharactersInString(v10, v9);
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    goto LABEL_6;
  }
  CFCharacterSetRef v21 = v20;
  CFMutableCharacterSetRef result = CFCharacterSetCreateMutableCopy(0, v21);
  if (result)
  {
    CFMutableCharacterSetRef v22 = result;
    CFStringRef v23 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    uint64_t v24 = v22;
    CFCharacterSetAddCharactersInString(v24, v23);

    swift_unknownObjectRelease();
    uint64_t v25 = *(void **)(v4 + 16);
    *(void *)(v4 + 16) = v22;
    *(unsigned char *)(v4 + 24) = 1;
    swift_bridgeObjectRelease();

    goto LABEL_6;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

void closure #1 in _LocaleICU.timeZone.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 392);
  uint64_t v4 = *(void *)(a1 + 400);
  if (v5 != 1)
  {
    *a2 = v5;
    a2[1] = v4;
LABEL_11:
    outlined copy of TimeZone??(v5);
    return;
  }
  int v7 = (void *)(a1 + 392);
  uint64_t v8 = specialized static Locale.keywordValue(identifier:key:)();
  if (!v9)
  {
    *int v7 = 0;
    v7[1] = 0;
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_11;
  }
  v15[0] = v7;
  v16[3] = v4;
  if (one-time initialization token for cache != -1) {
    uint64_t v8 = swift_once();
  }
  v15[1] = v15;
  unint64_t v10 = (os_unfair_lock_s *)static TimeZoneCache.cache;
  MEMORY[0x1F4188790](v8);
  swift_retain_n();
  os_unfair_lock_lock(v10 + 36);
  partial apply for closure #1 in TimeZoneCache.fixed(_:)(v16);
  if (!v2)
  {
    os_unfair_lock_unlock(v10 + 36);
    swift_release_n();
    uint64_t v11 = v16[0];
    uint64_t v12 = v16[1];
    swift_bridgeObjectRelease();
    if (v11)
    {
      uint64_t v13 = *(void *)(a1 + 392);
      swift_unknownObjectRetain();
      outlined consume of TimeZone??(v13);
      *(void *)(a1 + 392) = v11;
      *(void *)(a1 + 400) = v12;
      *a2 = v11;
      a2[1] = v12;
    }
    else
    {
      outlined consume of TimeZone??(*(void *)(a1 + 392));
      uint64_t v14 = v15[0];
      *(void *)v15[0] = 0;
      *(void *)(v14 + 8) = 0;
      *a2 = 0;
      a2[1] = 0;
    }
    goto LABEL_11;
  }
  os_unfair_lock_unlock(v10 + 36);
  __break(1u);
}

uint64_t closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 512);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
    if (v11)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  v54._uint64_t countAndFlagsBits = a2;
  v54._unint64_t object = a3;
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, v54);
  uint64_t v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 512);
  *(void *)(a1 + 512) = 0x8000000000000000;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, (uint64_t)a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      char v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *char v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 512) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v24 = v53;
      if (v19) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  CFMutableCharacterSetRef v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30) {
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  }
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0;
  *(void *)(v24 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1 << *(unsigned char *)(v53 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v34 = (v44 - 1) & v44;
    int64_t v51 = v45;
    unint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    uint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = (void *)(*(void *)(v24 + 48) + v37);
    long long v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *uint64_t v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v31 = v51;
  }
  uint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    int64_t v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.collation.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4 = a1[13];
  uint64_t v3 = a1[14];
  uint64_t v5 = a1[15];
  uint64_t v6 = (void *)a1[16];
  if (v3)
  {
    a2->_uint64_t countAndFlagsBits = v4;
    a2->_unint64_t object = (void *)v3;
    a2[1]._uint64_t countAndFlagsBits = v5;
    a2[1]._unint64_t object = v6;
  }
  else
  {
    uint64_t v8 = specialized static Locale.keywordValue(identifier:key:)();
    if (v9)
    {
      uint64_t v10 = v8;
      char v11 = v9;
      Swift::String v12 = String.lowercased()();
      a1[13] = v10;
      a1[14] = v11;
      *(Swift::String *)(a1 + 15) = v12;
      a2->_uint64_t countAndFlagsBits = v10;
      a2->_unint64_t object = v11;
      a2[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      if (one-time initialization token for standard != -1) {
        swift_once();
      }
      uint64_t v14 = static Locale.Collation.standard;
      uint64_t v13 = *(void **)algn_1E8EDDC18;
      long long v15 = xmmword_1E8EDDC20;
      a1[13] = static Locale.Collation.standard;
      a1[14] = v13;
      *(_OWORD *)(a1 + 15) = v15;
      a2->_uint64_t countAndFlagsBits = v14;
      a2->_unint64_t object = v13;
      a2[1] = (Swift::String)v15;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
    }
  }
  return outlined copy of Locale.LanguageCode?(v4, v3);
}

uint64_t closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)@<X0>(UChar *a1@<X0>, uint64_t *a2@<X8>)
{
  if (!a1) {
    __break(1u);
  }
  uint64_t v4 = String.utf8CString.getter();
  u_charsToUChars((const char *)(v4 + 32), a1, 3);
  swift_release();
  a1[3] = 0;
  String.utf8CString.getter();
  uint64_t Name = ucurr_getName();
  uint64_t result = swift_release();
  if (Name)
  {
    uint64_t result = specialized String.init(_utf16:)(Name, 0);
    *a2 = result;
    if (v7) {
      a2[1] = v7;
    }
    else {
      a2[1] = 0;
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t closure #1 in _LocaleICU.currencySymbolDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 520);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v11)
    {
      Swift::String v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = 0x8000000000000000;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      char v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *char v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 520) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v24 = v53;
      if (v19) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  CFMutableCharacterSetRef v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30) {
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  }
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0;
  *(void *)(v24 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1 << *(unsigned char *)(v53 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v34 = (v44 - 1) & v44;
    int64_t v51 = v45;
    unint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    uint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = (void *)(*(void *)(v24 + 48) + v37);
    long long v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *uint64_t v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v31 = v51;
  }
  uint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    int64_t v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.currencyCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 528);
  if (*(void *)(v9 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v11)
    {
      Swift::String v12 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
LABEL_49:
      *a4 = v14;
      a4[1] = v13;
      return result;
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_retain();
  uint64_t v52 = specialized _LocaleICU.displayNameIncludingFallbacks(_:)(v16, a2, a3);
  uint64_t v13 = v17;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v53 = *(void *)(a1 + 528);
  *(void *)(a1 + 528) = 0x8000000000000000;
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v21 = *(void *)(v53 + 16);
  BOOL v22 = (v19 & 1) == 0;
  uint64_t v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
    __break(1u);
  }
  else
  {
    char v4 = v19;
    if (*(void *)(v53 + 24) < v23)
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native);
      uint64_t v24 = v53;
      unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v4 & 1) != (v26 & 1)) {
        goto LABEL_52;
      }
      unint64_t v20 = v25;
      if ((v4 & 1) == 0) {
        goto LABEL_47;
      }
LABEL_12:
      char v27 = (uint64_t *)(*(void *)(v24 + 56) + 16 * v20);
      swift_bridgeObjectRelease();
      uint64_t v14 = v52;
      *char v27 = v52;
      v27[1] = v13;
LABEL_48:
      *(void *)(a1 + 528) = v24;
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_49;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v24 = v53;
      if (v19) {
        goto LABEL_12;
      }
LABEL_47:
      uint64_t v47 = a2;
      uint64_t v14 = v52;
      specialized _NativeDictionary._insert(at:key:value:)(v20, v47, a3, v52, v13, v24);
      swift_bridgeObjectRetain();
      goto LABEL_48;
    }
  }
  unint64_t v48 = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String?>);
  uint64_t v28 = static _DictionaryStorage.copy(original:)();
  uint64_t v24 = v28;
  if (!*(void *)(v53 + 16))
  {
LABEL_46:
    swift_bridgeObjectRelease();
    unint64_t v20 = v48;
    if (v4) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
  CFMutableCharacterSetRef v29 = (void *)(v28 + 64);
  unint64_t v30 = (unint64_t)((1 << *(unsigned char *)(v24 + 32)) + 63) >> 6;
  if (v24 != v53 || (unint64_t)v29 >= v53 + 64 + 8 * v30) {
    memmove(v29, (const void *)(v53 + 64), 8 * v30);
  }
  uint64_t v49 = v53 + 64;
  int64_t v31 = 0;
  *(void *)(v24 + 16) = *(void *)(v53 + 16);
  uint64_t v32 = 1 << *(unsigned char *)(v53 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & *(void *)(v53 + 64);
  int64_t v50 = (unint64_t)(v32 + 63) >> 6;
  while (1)
  {
    if (v34)
    {
      unint64_t v35 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v51 = v31;
      unint64_t v36 = v35 | (v31 << 6);
      goto LABEL_22;
    }
    int64_t v43 = v31 + 1;
    if (__OFADD__(v31, 1))
    {
      __break(1u);
      goto LABEL_51;
    }
    if (v43 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v43);
    int64_t v45 = v31 + 1;
    if (!v44)
    {
      int64_t v45 = v31 + 2;
      if (v31 + 2 >= v50) {
        goto LABEL_46;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (!v44)
      {
        int64_t v45 = v31 + 3;
        if (v31 + 3 >= v50) {
          goto LABEL_46;
        }
        unint64_t v44 = *(void *)(v49 + 8 * v45);
        if (!v44)
        {
          int64_t v45 = v31 + 4;
          if (v31 + 4 >= v50) {
            goto LABEL_46;
          }
          unint64_t v44 = *(void *)(v49 + 8 * v45);
          if (!v44)
          {
            int64_t v45 = v31 + 5;
            if (v31 + 5 >= v50) {
              goto LABEL_46;
            }
            unint64_t v44 = *(void *)(v49 + 8 * v45);
            if (!v44)
            {
              int64_t v45 = v31 + 6;
              if (v31 + 6 >= v50) {
                goto LABEL_46;
              }
              unint64_t v44 = *(void *)(v49 + 8 * v45);
              if (!v44)
              {
                int64_t v45 = v31 + 7;
                if (v31 + 7 >= v50) {
                  goto LABEL_46;
                }
                unint64_t v44 = *(void *)(v49 + 8 * v45);
                if (!v44) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_45:
    unint64_t v34 = (v44 - 1) & v44;
    int64_t v51 = v45;
    unint64_t v36 = __clz(__rbit64(v44)) + (v45 << 6);
LABEL_22:
    uint64_t v37 = 16 * v36;
    uint64_t v38 = (uint64_t *)(*(void *)(v53 + 48) + v37);
    uint64_t v39 = *v38;
    uint64_t v40 = v38[1];
    uint64_t v41 = (void *)(*(void *)(v24 + 48) + v37);
    long long v42 = *(_OWORD *)(*(void *)(v53 + 56) + v37);
    *uint64_t v41 = v39;
    v41[1] = v40;
    *(_OWORD *)(*(void *)(v24 + 56) + v37) = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v31 = v51;
  }
  uint64_t v46 = v31 + 8;
  if (v31 + 8 >= v50) {
    goto LABEL_46;
  }
  unint64_t v44 = *(void *)(v49 + 8 * v46);
  if (v44)
  {
    int64_t v45 = v31 + 8;
    goto LABEL_45;
  }
  while (1)
  {
    int64_t v45 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      break;
    }
    if (v45 >= v50) {
      goto LABEL_46;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    ++v46;
    if (v44) {
      goto LABEL_45;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _LocaleICU.currency.getter@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = a1 + 136;
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void **)(v7 + 24);
  if (v6 == 1)
  {
    uint64_t v15 = v5;
    swift_retain();
    uint64_t v10 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 0);
    Swift::String v12 = v11;
    swift_release();
    if (v12)
    {
      Swift::String v13 = String.lowercased()();
      *(void *)(a1 + 136) = v10;
      *(void *)(a1 + 144) = v12;
      *(Swift::String *)(a1 + 152) = v13;
      a2->_uint64_t countAndFlagsBits = v10;
      a2->_unint64_t object = v12;
      a2[1] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *a2 = 0u;
      a2[1] = 0u;
    }
    uint64_t v5 = v15;
  }
  else
  {
    a2->_uint64_t countAndFlagsBits = v5;
    a2->_unint64_t object = (void *)v6;
    a2[1]._uint64_t countAndFlagsBits = v8;
    a2[1]._unint64_t object = v9;
  }
  return outlined copy of Locale.Subdivision??(v5, v6);
}

uint64_t _LocaleICU.delimiterString(_:)()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v5[69] = 0;
  String.utf8CString.getter();
  ulocdata_open();
  uint64_t v0 = swift_release();
  MEMORY[0x1F4188790](v0);
  v5[68] = 0;
  int Delimiter = ulocdata_getDelimiter();
  uint64_t v2 = 0;
  if (Delimiter <= 130 && Delimiter > 0) {
    uint64_t v2 = specialized String.init(_utf16:)((uint64_t)v5, Delimiter);
  }
  ulocdata_close();
  return v2;
}

uint64_t _LocaleICU._lockedNumberingSystem(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[21];
  uint64_t v4 = a1[22];
  uint64_t v6 = a1[23];
  uint64_t v7 = a1[24];
  if (v4)
  {
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    a2[3] = v7;
  }
  else
  {
    uint64_t v9 = *(void *)(v2 + 16);
    uint64_t v10 = *(void *)(v2 + 24);
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v9, v10, v16);
    uint64_t v11 = v17;
    if (v17)
    {
      uint64_t v13 = v18;
      uint64_t v12 = v19;
      uint64_t v14 = v16[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of Locale.Components(v16);
      a1[21] = v14;
      a1[22] = v11;
      a1[23] = v13;
      a1[24] = v12;
      *a2 = v14;
      a2[1] = v11;
      a2[2] = v13;
      a2[3] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      Locale.NumberingSystem.init(localeIdentifier:)(a2);
      outlined release of Locale.Components(v16);
    }
  }
  return outlined copy of Locale.LanguageCode?(v5, v4);
}

uint64_t closure #1 in _LocaleICU.numberingSystem.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a1[21];
  uint64_t v5 = a1[22];
  uint64_t v7 = a1[23];
  uint64_t v8 = a1[24];
  if (v5)
  {
    *a3 = v6;
    a3[1] = v5;
    a3[2] = v7;
    a3[3] = v8;
  }
  else
  {
    uint64_t v21 = v3;
    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v11, v10, v17);
    uint64_t v12 = v18;
    if (v18)
    {
      uint64_t v13 = v20;
      uint64_t v16 = v19;
      uint64_t v14 = v17[21];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined release of Locale.Components(v17);
      a1[21] = v14;
      a1[22] = v12;
      a1[23] = v16;
      a1[24] = v13;
      *a3 = v14;
      a3[1] = v12;
      a3[2] = v16;
      a3[3] = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      Locale.NumberingSystem.init(localeIdentifier:)(a3);
      outlined release of Locale.Components(v17);
    }
  }
  return outlined copy of Locale.LanguageCode?(v6, v5);
}

void closure #1 in _LocaleICU.availableNumberingSystems.getter(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1[25];
  if (v5)
  {
    *a3 = v5;
    swift_bridgeObjectRetain();
    return;
  }
  uint64_t v64 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Locale.NumberingSystem>);
  unint64_t v7 = swift_allocObject();
  uint64_t v59 = v7 + 32;
  if (one-time initialization token for latn != -1) {
LABEL_36:
  }
    swift_once();
  uint64_t v8 = qword_1E8EDDC38;
  unint64_t v10 = *((void *)&xmmword_1E8EDDC40 + 1);
  unint64_t v9 = xmmword_1E8EDDC40;
  *(void *)(v7 + 32) = static Locale.NumberingSystem.latn;
  *(void *)(v7 + 40) = v8;
  *(_OWORD *)(v7 + 48) = __PAIR128__(v10, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v56 = v4;
  uint64_t v58 = a2;
  _LocaleICU._lockedNumberingSystem(_:)(v4, (uint64_t *)(v7 + 64));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Locale.NumberingSystem>);
  a2 = static _SetStorage.allocate(capacity:)();
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v62 = a2 + 56;
  do
  {
    char v13 = v11;
    uint64_t v14 = (uint64_t *)(v59 + 32 * v12);
    uint64_t v15 = v14[1];
    uint64_t v60 = *v14;
    uint64_t v17 = v14[2];
    uint64_t v16 = v14[3];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v7 = v18 & ~v19;
    unint64_t v20 = v7 >> 6;
    uint64_t v21 = *(void *)(v62 + 8 * (v7 >> 6));
    uint64_t v22 = 1 << v7;
    if (((1 << v7) & v21) != 0)
    {
      uint64_t v4 = *(void **)(a2 + 48);
      uint64_t v23 = &v4[4 * v7];
      BOOL v24 = v23[2] == v17 && v23[3] == v16;
      if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_5:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
      uint64_t v25 = ~v19;
      while (1)
      {
        unint64_t v7 = (v7 + 1) & v25;
        unint64_t v20 = v7 >> 6;
        uint64_t v21 = *(void *)(v62 + 8 * (v7 >> 6));
        uint64_t v22 = 1 << v7;
        if ((v21 & (1 << v7)) == 0) {
          break;
        }
        char v26 = &v4[4 * v7];
        BOOL v27 = v26[2] == v17 && v26[3] == v16;
        if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_5;
        }
      }
    }
    *(void *)(v62 + 8 * v20) = v22 | v21;
    uint64_t v28 = (void *)(*(void *)(a2 + 48) + 32 * v7);
    void *v28 = v60;
    v28[1] = v15;
    v28[2] = v17;
    v28[3] = v16;
    uint64_t v29 = *(void *)(a2 + 16);
    BOOL v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30)
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    *(void *)(a2 + 16) = v31;
LABEL_6:
    char v11 = 1;
    uint64_t v12 = 1;
  }
  while ((v13 & 1) == 0);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  uint64_t v66 = a2;
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_18210C6A0;
  Swift::String v33 = String.lowercased()();
  *(void *)(v32 + 32) = 0x746C7561666564;
  *(void *)(v32 + 40) = 0xE700000000000000;
  *(Swift::String *)(v32 + 48) = v33;
  unint64_t v34 = (uint64_t *)(v32 + 56);
  Swift::String v35 = String.lowercased()();
  *(void *)(v32 + 64) = 0x65766974616ELL;
  *(void *)(v32 + 72) = 0xE600000000000000;
  *(Swift::String *)(v32 + 80) = v35;
  Swift::String v36 = String.lowercased()();
  *(void *)(v32 + 96) = 0x6F69746964617274;
  *(void *)(v32 + 104) = 0xEB000000006C616ELL;
  *(Swift::String *)(v32 + 112) = v36;
  Swift::String v37 = String.lowercased()();
  uint64_t v4 = 0;
  *(void *)(v32 + 128) = 0x65636E616E6966;
  *(void *)(v32 + 136) = 0xE700000000000000;
  *(Swift::String *)(v32 + 144) = v37;
  uint64_t v63 = *(void *)(v58 + 16);
  uint64_t v59 = v32;
  uint64_t v61 = *(void *)(v58 + 24);
  while (1)
  {
    uint64_t v39 = *(v34 - 1);
    uint64_t v38 = *v34;
    uint64_t v41 = *(v34 - 3);
    uint64_t v40 = *(v34 - 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Locale.Components.init(identifier:)(v63, v61, v68);
    outlined consume of Locale.LanguageCode?(*((uint64_t *)&v68[10] + 1), *(uint64_t *)&v68[11]);
    *((void *)&v68[10] + 1) = v41;
    *(void *)&v68[11] = v40;
    *((void *)&v68[11] + 1) = v39;
    *(void *)&v68[12] = v38;
    v69[0] = v68[0];
    v69[1] = v68[1];
    v69[2] = v68[2];
    v69[3] = v68[3];
    v69[4] = v68[4];
    v69[5] = v68[5];
    LOBYTE(v69[6]) = v68[6];
    *(_OWORD *)((char *)&v69[6] + 8) = *(_OWORD *)((char *)&v68[6] + 8);
    *(_OWORD *)((char *)&v69[7] + 8) = *(_OWORD *)((char *)&v68[7] + 8);
    *(_OWORD *)((char *)&v69[8] + 8) = *(_OWORD *)((char *)&v68[8] + 8);
    *(_OWORD *)((char *)&v69[9] + 8) = *(_OWORD *)((char *)&v68[9] + 8);
    *((void *)&v69[10] + 1) = v41;
    *(void *)&v69[11] = v40;
    *((void *)&v69[11] + 1) = v39;
    *(void *)&v69[12] = v38;
    WORD4(v69[12]) = WORD4(v68[12]);
    v69[13] = v68[13];
    v69[14] = v68[14];
    v69[15] = v68[15];
    v69[16] = v68[16];
    v69[17] = v68[17];
    v69[18] = v68[18];
    v69[19] = v68[19];
    v69[20] = v68[20];
    v69[21] = v68[21];
    memcpy(v70, v69, sizeof(v70));
    uint64_t v42 = (uint64_t)outlined retain of Locale.Components((uint64_t *)v69);
    if (one-time initialization token for cache != -1) {
      uint64_t v42 = swift_once();
    }
    int64_t v43 = (os_unfair_lock_s *)static LocaleCache.cache;
    MEMORY[0x1F4188790](v42);
    swift_retain_n();
    os_unfair_lock_lock(v43 + 31);
    partial apply for closure #1 in LocaleCache.fixedComponents(_:)((uint64_t)&v43[4], v67);
    unint64_t v44 = v43 + 31;
    if (v64) {
      break;
    }
    os_unfair_lock_unlock(v44);
    swift_release_n();
    outlined release of Locale.Components((uint64_t *)v69);
    uint64_t v45 = v67[1];
    a2 = v67[0];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v45 + 64);
    swift_unknownObjectRetain();
    v47(ObjectType, v45);
    swift_unknownObjectRelease();
    String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v48 = unumsys_open();
    swift_release();
    if (v48)
    {
      unint64_t v44 = (os_unfair_lock_s *)MEMORY[0x18530A100](v48);
      if (!v44)
      {
        __break(1u);
        break;
      }
      unint64_t v49 = String.init(cString:)();
      unint64_t v51 = v50;
      Swift::String v52 = String.lowercased()();
      unint64_t countAndFlagsBits = v52._countAndFlagsBits;
      unint64_t object = v52._object;
    }
    else
    {
      unint64_t v49 = static Locale.NumberingSystem.latn;
      unint64_t v51 = qword_1E8EDDC38;
      unint64_t object = (void *)*((void *)&xmmword_1E8EDDC40 + 1);
      unint64_t countAndFlagsBits = xmmword_1E8EDDC40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    unumsys_close();
    specialized Set._Variant.insert(_:)(v65, v49, v51, countAndFlagsBits, (unint64_t)object);
    swift_unknownObjectRelease();
    unint64_t v7 = v65[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    memcpy(v67, v68, sizeof(v67));
    outlined release of Locale.Components(v67);
    if (v4 == (void *)3)
    {
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      uint64_t v55 = specialized _copyCollectionToContiguousArray<A>(_:)(v66);
      swift_bridgeObjectRelease();
      swift_retain();
      swift_bridgeObjectRelease();
      v56[25] = v55;
      *a3 = v55;
      return;
    }
    uint64_t v4 = (void *)((char *)v4 + 1);
    v34 += 4;
    if ((unint64_t)v4 >= *(void *)(v59 + 16))
    {
      __break(1u);
      goto LABEL_35;
    }
  }
  os_unfair_lock_unlock(v44);
  __break(1u);
}

void *protocol witness for _LocaleProtocol.init(identifier:prefs:) in conformance _LocaleICU(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  uint64_t v6 = specialized _LocaleICU.init(identifier:prefs:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t protocol witness for _LocaleProtocol.init(name:prefs:disableBundleMatching:) in conformance _LocaleICU(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned __int8 a4)
{
  uint64_t v8 = swift_allocObject();
  _LocaleICU.init(name:prefs:disableBundleMatching:)(a1, a2, a3, a4);
  return v8;
}

uint64_t protocol witness for _LocaleProtocol.init(components:) in conformance _LocaleICU(void *a1)
{
  uint64_t v2 = swift_allocObject();
  _LocaleICU.init(components:)(a1);
  return v2;
}

uint64_t protocol witness for _LocaleProtocol.identifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.identifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.scriptCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.scriptCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.variantCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.variantCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencyCodeDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencyCodeDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.currencySymbolDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.currencySymbolDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifierDisplayName(for:) in conformance _LocaleICU()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock(v1 + 140);
  partial apply for closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)((uint64_t)&v1[4], &v3);
  os_unfair_lock_unlock(v1 + 140);
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collationIdentifier.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.collation.getter((void *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  uint64_t countAndFlagsBits = v4._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t protocol witness for _LocaleProtocol.quotationBeginDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.quotationEndDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationBeginDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.alternateQuotationEndDelimiter.getter in conformance _LocaleICU()
{
  return _LocaleICU.delimiterString(_:)();
}

uint64_t protocol witness for _LocaleProtocol.currency.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.currency.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);

  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.numberingSystem.getter in conformance _LocaleICU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.numberingSystem.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));

  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.availableNumberingSystems.getter in conformance _LocaleICU()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 560));
  partial apply for closure #1 in _LocaleICU.availableNumberingSystems.getter((void *)(v1 + 16), &v3);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 560));
  swift_release();
  return v3;
}

uint64_t protocol witness for _LocaleProtocol.collation.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.collation.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));

  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.timeZone.getter in conformance _LocaleICU@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock(v3 + 140);
  partial apply for closure #1 in _LocaleICU.timeZone.getter((uint64_t)&v3[4], a1);
  os_unfair_lock_unlock(v3 + 140);

  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.subdivision.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.subdivision.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));

  return swift_release();
}

uint64_t protocol witness for _LocaleProtocol.variant.getter in conformance _LocaleICU@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 176);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 560));
  partial apply for closure #1 in _LocaleICU.variant.getter((void *)(v3 + 16), a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 560));

  return swift_release();
}

unint64_t protocol witness for _LocaleProtocol.forceMinDaysInFirstWeek(_:) in conformance _LocaleICU(Foundation::Calendar::Identifier a1)
{
  return (unint64_t)_LocaleICU.forceMinDaysInFirstWeek(_:)(a1);
}

uint64_t static Locale.windowsLocaleCode(fromIdentifier:)()
{
  String.utf8CString.getter();
  unsigned int LCID = uloc_getLCID();
  swift_release();
  return LCID;
}

uint64_t static Locale.identifier(_:from:)(char *a1)
{
  char v1 = *a1;
  uint64_t v2 = one-time initialization token for cache;
  uint64_t v3 = swift_bridgeObjectRetain();
  if (v2 != -1) {
    uint64_t v3 = swift_once();
  }
  Swift::String v4 = (os_unfair_lock_s *)static LocaleCache.cache;
  MEMORY[0x1F4188790](v3);
  swift_retain_n();
  os_unfair_lock_lock(v4 + 31);
  partial apply for closure #1 in LocaleCache.fixed(_:)((uint64_t)&v4[4], &v9);
  os_unfair_lock_unlock(v4 + 31);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v5 = *((void *)&v9 + 1);
  uint64_t ObjectType = swift_getObjectType();
  LOBYTE(v9) = v1;
  uint64_t v7 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(v5 + 416))(&v9, ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

uint64_t closure #1 in static Locale.identifierWithKeywordValue(_:key:value:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  if (result)
  {
    long long v9 = (char *)result;
    uint64_t v10 = String.utf8CString.getter();
    strlcpy(v9, (const char *)(v10 + 32), 0x9DuLL);
    swift_release();
    String.utf8CString.getter();
    String.utf8CString.getter();
    int v11 = uloc_setKeywordValue();
    swift_release();
    uint64_t result = swift_release();
    if (v11 >= 1)
    {
      v9[v11] = 0;
      *a9 = String.init(cString:)();
      a9[1] = v12;
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t specialized static _LocaleICU.State.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v350 = *(void *)(a1 + 32);
  uint64_t v352 = *(void *)(a1 + 40);
  uint64_t v354 = *(void *)(a1 + 48);
  uint64_t v351 = *(void *)(a1 + 56);
  uint64_t v349 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v355 = *(void *)(a1 + 72);
  uint64_t v353 = *(void *)(a1 + 88);
  int v281 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v273 = *(void *)(a1 + 104);
  uint64_t v279 = *(void *)(a1 + 112);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v277 = *(void *)(a1 + 120);
  uint64_t v267 = *(void *)(a1 + 136);
  uint64_t v274 = *(void *)(a1 + 144);
  uint64_t v271 = *(void *)(a1 + 152);
  uint64_t v269 = *(void *)(a1 + 160);
  uint64_t v259 = *(void *)(a1 + 168);
  uint64_t v265 = *(void *)(a1 + 176);
  uint64_t v262 = *(void *)(a1 + 184);
  uint64_t v263 = *(void *)(a1 + 192);
  uint64_t v261 = *(void *)(a1 + 200);
  int v257 = *(unsigned __int8 *)(a1 + 208);
  long long v8 = *(_OWORD *)(a1 + 216);
  long long v9 = *(_OWORD *)(a1 + 232);
  long long v10 = *(_OWORD *)(a1 + 248);
  char v251 = *(unsigned char *)(a1 + 264);
  char v252 = *(unsigned char *)(a1 + 280);
  char v255 = *(unsigned char *)(a1 + 265);
  uint64_t v247 = *(void *)(a1 + 272);
  int v249 = *(unsigned __int8 *)(a1 + 281);
  uint64_t v233 = *(void *)(a1 + 288);
  uint64_t v245 = *(void *)(a1 + 296);
  uint64_t v242 = *(void *)(a1 + 304);
  uint64_t v243 = *(void *)(a1 + 312);
  int v235 = *(unsigned __int8 *)(a1 + 320);
  uint64_t v224 = *(void *)(a1 + 328);
  uint64_t v227 = *(void *)(a1 + 352);
  uint64_t v228 = *(void *)(a1 + 344);
  uint64_t v215 = *(void *)(a1 + 360);
  uint64_t v222 = *(void *)(a1 + 368);
  uint64_t v218 = *(void *)(a1 + 384);
  uint64_t v219 = *(void *)(a1 + 392);
  uint64_t v220 = *(void *)(a1 + 376);
  uint64_t v11 = *(void *)(a1 + 408);
  uint64_t v212 = *(void *)(a1 + 400);
  uint64_t v12 = *(void *)(a1 + 424);
  uint64_t v230 = *(void *)(a1 + 336);
  uint64_t v231 = *(void *)(a1 + 416);
  uint64_t v13 = *(void *)(a1 + 432);
  uint64_t v204 = *(void *)(a1 + 440);
  uint64_t v207 = *(void *)(a1 + 448);
  uint64_t v201 = *(void *)(a1 + 456);
  uint64_t v202 = *(void *)(a1 + 464);
  uint64_t v14 = *(void *)(a1 + 472);
  uint64_t v15 = *(void *)(a1 + 480);
  uint64_t v17 = *(void *)(a1 + 488);
  uint64_t v16 = *(void *)(a1 + 496);
  uint64_t v19 = *(void *)(a1 + 504);
  uint64_t v18 = *(void *)(a1 + 512);
  uint64_t v20 = *(void *)(a1 + 520);
  uint64_t v21 = *(void *)(a1 + 528);
  unint64_t v22 = *(void *)(a1 + 536);
  long long v23 = *(_OWORD *)(a2 + 248);
  int v253 = *(unsigned __int8 *)(a2 + 280);
  uint64_t v24 = *(void *)(a2 + 8);
  uint64_t v309 = *(void *)a2;
  uint64_t v316 = *(void *)(a2 + 16);
  uint64_t v302 = *(void *)(a2 + 24);
  uint64_t v296 = *(void *)(a2 + 32);
  uint64_t v324 = *(void *)(a2 + 40);
  uint64_t v332 = *(void *)(a2 + 48);
  uint64_t v340 = *(void *)(a2 + 56);
  uint64_t v282 = *(void *)(a2 + 64);
  uint64_t v288 = *(void *)(a2 + 72);
  uint64_t v291 = *(void *)(a2 + 80);
  uint64_t v285 = *(void *)(a2 + 88);
  int v280 = *(unsigned __int8 *)(a2 + 96);
  uint64_t v272 = *(void *)(a2 + 104);
  uint64_t v278 = *(void *)(a2 + 112);
  uint64_t v276 = *(void *)(a2 + 120);
  uint64_t v275 = *(void *)(a2 + 128);
  uint64_t v25 = *(void *)(a2 + 144);
  uint64_t v266 = *(void *)(a2 + 136);
  uint64_t v270 = *(void *)(a2 + 152);
  uint64_t v268 = *(void *)(a2 + 160);
  uint64_t v258 = *(void *)(a2 + 168);
  uint64_t v26 = *(void *)(a2 + 184);
  uint64_t v264 = *(void *)(a2 + 176);
  uint64_t v27 = *(void *)(a2 + 192);
  uint64_t v260 = *(void *)(a2 + 200);
  int v256 = *(unsigned __int8 *)(a2 + 208);
  uint64_t v237 = *(void *)(a2 + 216);
  uint64_t v238 = *(void *)(a2 + 224);
  uint64_t v239 = *(void *)(a2 + 232);
  uint64_t v240 = *(void *)(a2 + 240);
  char v250 = *(unsigned char *)(a2 + 264);
  char v254 = *(unsigned char *)(a2 + 265);
  uint64_t v246 = *(void *)(a2 + 272);
  int v248 = *(unsigned __int8 *)(a2 + 281);
  uint64_t v232 = *(void *)(a2 + 288);
  uint64_t v244 = *(void *)(a2 + 296);
  uint64_t v241 = *(void *)(a2 + 304);
  uint64_t v236 = *(void *)(a2 + 312);
  int v234 = *(unsigned __int8 *)(a2 + 320);
  uint64_t v223 = *(void *)(a2 + 328);
  uint64_t v229 = *(void *)(a2 + 336);
  uint64_t v226 = *(void *)(a2 + 344);
  uint64_t v225 = *(void *)(a2 + 352);
  uint64_t v214 = *(void *)(a2 + 360);
  uint64_t v221 = *(void *)(a2 + 368);
  uint64_t v217 = *(void *)(a2 + 376);
  uint64_t v216 = *(void *)(a2 + 384);
  uint64_t v213 = *(void *)(a2 + 392);
  uint64_t v211 = *(void *)(a2 + 400);
  uint64_t v206 = *(void *)(a2 + 408);
  uint64_t v210 = *(void *)(a2 + 416);
  uint64_t v208 = *(void *)(a2 + 424);
  uint64_t v209 = *(void *)(a2 + 432);
  uint64_t v203 = *(void *)(a2 + 440);
  uint64_t v205 = *(void *)(a2 + 448);
  uint64_t v199 = *(void *)(a2 + 456);
  uint64_t v200 = *(void *)(a2 + 464);
  uint64_t v194 = *(void *)(a2 + 472);
  uint64_t v195 = *(void *)(a2 + 480);
  uint64_t v196 = *(void *)(a2 + 488);
  uint64_t v197 = *(void *)(a2 + 496);
  uint64_t v28 = *(void *)(a2 + 512);
  uint64_t v198 = *(void *)(a2 + 504);
  uint64_t v29 = *(void *)(a2 + 520);
  uint64_t v30 = *(void *)(a2 + 528);
  uint64_t v31 = *(void *)(a2 + 536);
  uint64_t v348 = v3;
  if (v3 == 1)
  {
    uint64_t v189 = v11;
    uint64_t v190 = *(void *)(a2 + 192);
    uint64_t v192 = *(void *)(a2 + 144);
    uint64_t v193 = v7;
    uint64_t v32 = v353;
    uint64_t v33 = v6;
    uint64_t v34 = v349;
    uint64_t v35 = v2;
    uint64_t v36 = v4;
    uint64_t v37 = v5;
    uint64_t v38 = v350;
    uint64_t v191 = *(void *)(a2 + 184);
    uint64_t v39 = v352;
    uint64_t v40 = v354;
    uint64_t v41 = v351;
    uint64_t v187 = *(void *)(a2 + 512);
    uint64_t v188 = *(void *)(a2 + 520);
    uint64_t v42 = *(void *)(a2 + 8);
    if (v24 == 1) {
      goto LABEL_9;
    }
LABEL_6:
    *(void *)&long long v368 = v35;
    *((void *)&v368 + 1) = v348;
    *(void *)&long long v369 = v36;
    *((void *)&v369 + 1) = v37;
    *(void *)&long long v370 = v38;
    *((void *)&v370 + 1) = v39;
    uint64_t v371 = v40;
    uint64_t v372 = v41;
    uint64_t v373 = v34;
    uint64_t v374 = v355;
    uint64_t v375 = v33;
    uint64_t v376 = v32;
    uint64_t v377 = v309;
    uint64_t v378 = v42;
    uint64_t v379 = v316;
    uint64_t v380 = v302;
    uint64_t v381 = v296;
    uint64_t v382 = v324;
    uint64_t v383 = v332;
    uint64_t v384 = v340;
    uint64_t v385 = v282;
    uint64_t v386 = v288;
    uint64_t v387 = v291;
    uint64_t v388 = v285;
    outlined consume of Locale.Language.Components?(v309, v42, v316, v302, v296, v324, v332, v340, v282, v288, v291, v285, (void (*)(void))outlined copy of Locale.LanguageCode?);
    outlined release of (Locale.Language.Components?, Locale.Language.Components?)((uint64_t)&v368);
    return 0;
  }
  *(void *)&long long v368 = v2;
  *((void *)&v368 + 1) = v3;
  *(void *)&long long v369 = v4;
  *((void *)&v369 + 1) = v5;
  *(void *)&long long v370 = v350;
  *((void *)&v370 + 1) = v352;
  uint64_t v371 = v354;
  uint64_t v372 = v351;
  uint64_t v373 = v349;
  uint64_t v374 = v355;
  uint64_t v375 = v6;
  uint64_t v376 = v353;
  if (v24 == 1)
  {
    uint64_t v43 = v4;
    uint64_t v44 = v5;
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v350, v352);
    uint64_t v45 = v6;
    outlined copy of Locale.LanguageCode?(v349, v355);
    outlined copy of Locale.LanguageCode?(v2, v3);
    outlined copy of Locale.LanguageCode?(v350, v352);
    outlined copy of Locale.LanguageCode?(v349, v355);
    uint64_t v35 = v2;
    uint64_t v46 = v3;
    uint64_t v36 = v43;
    uint64_t v37 = v44;
    outlined consume of Locale.LanguageCode?(v2, v46);
    uint64_t v38 = v350;
    uint64_t v39 = v352;
    uint64_t v40 = v354;
    uint64_t v41 = v351;
    outlined consume of Locale.LanguageCode?(v350, v352);
    uint64_t v34 = v349;
    uint64_t v33 = v45;
    uint64_t v32 = v353;
    outlined consume of Locale.LanguageCode?(v349, v355);
    uint64_t v42 = 1;
    goto LABEL_6;
  }
  uint64_t v192 = v25;
  uint64_t v193 = v7;
  uint64_t v190 = v27;
  uint64_t v191 = v26;
  uint64_t v187 = v28;
  uint64_t v188 = v29;
  uint64_t v357 = v309;
  uint64_t v358 = v24;
  uint64_t v359 = v316;
  uint64_t v360 = v302;
  *(void *)&long long v361 = v296;
  *((void *)&v361 + 1) = v324;
  uint64_t v362 = v332;
  uint64_t v363 = v340;
  uint64_t v364 = v282;
  uint64_t v365 = v288;
  uint64_t v366 = v291;
  uint64_t v367 = v285;
  uint64_t v286 = v15;
  uint64_t v170 = v31;
  uint64_t v162 = v2;
  uint64_t v163 = v4;
  uint64_t v303 = v12;
  uint64_t v310 = v13;
  uint64_t v165 = v5;
  uint64_t v166 = v16;
  uint64_t v176 = v14;
  uint64_t v181 = v30;
  uint64_t v189 = v11;
  uint64_t v167 = v21;
  uint64_t v297 = v20;
  uint64_t v289 = v18;
  uint64_t v292 = v19;
  uint64_t v283 = v17;
  long long v333 = v9;
  long long v341 = v8;
  long long v317 = v23;
  long long v325 = v10;
  outlined consume of Locale.Language.Components?(v2, v3, v4, v5, v350, v352, v354, v351, v349, v355, v6, v353, (void (*)(void))outlined copy of Locale.LanguageCode?);
  outlined copy of Locale.LanguageCode?(v2, v3);
  outlined copy of Locale.LanguageCode?(v350, v352);
  outlined copy of Locale.LanguageCode?(v349, v355);
  BOOL v164 = specialized static Locale.Language.Components.== infix(_:_:)((uint64_t *)&v368, &v357);
  uint64_t v48 = v6;
  long long v49 = v370;
  uint64_t v50 = v373;
  uint64_t v51 = v374;
  uint64_t v52 = v48;
  outlined consume of Locale.LanguageCode?(v368, *((uint64_t *)&v368 + 1));
  outlined consume of Locale.LanguageCode?(v49, *((uint64_t *)&v49 + 1));
  outlined consume of Locale.LanguageCode?(v50, v51);
  outlined consume of Locale.Language.Components?(v162, v348, v163, v165, v350, v352, v354, v351, v349, v355, v52, v353, (void (*)(void))outlined consume of Locale.LanguageCode?);
  long long v23 = v317;
  long long v10 = v325;
  long long v9 = v333;
  long long v8 = v341;
  uint64_t v14 = v176;
  uint64_t v30 = v181;
  uint64_t v21 = v167;
  uint64_t v31 = v170;
  uint64_t v15 = v286;
  uint64_t v12 = v303;
  uint64_t v13 = v310;
  uint64_t v17 = v283;
  uint64_t v16 = v166;
  uint64_t v19 = v292;
  uint64_t v18 = v289;
  uint64_t v20 = v297;
  if (!v164) {
    return 0;
  }
LABEL_9:
  if (v281 == 16)
  {
    if (v280 != 16) {
      return 0;
    }
  }
  else if (v280 == 16 || v281 != v280)
  {
    return 0;
  }
  if (!v279)
  {
    if (!v278) {
      goto LABEL_21;
    }
LABEL_30:
    uint64_t v71 = v272;
    uint64_t v72 = v278;
    outlined copy of Locale.LanguageCode?(v272, v278);
    uint64_t v73 = v273;
    uint64_t v74 = v279;
LABEL_31:
    outlined consume of Locale.LanguageCode?(v73, v74);
    outlined consume of Locale.LanguageCode?(v71, v72);
    return 0;
  }
  if (!v278)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_30;
  }
  if (v277 != v276 || v193 != v275)
  {
    uint64_t v304 = v12;
    uint64_t v311 = v13;
    uint64_t v182 = v30;
    uint64_t v53 = v21;
    uint64_t v54 = v20;
    uint64_t v55 = v18;
    uint64_t v56 = v19;
    uint64_t v57 = v16;
    uint64_t v58 = v17;
    uint64_t v59 = v15;
    uint64_t v60 = v31;
    uint64_t v177 = v14;
    long long v334 = v9;
    long long v342 = v8;
    long long v318 = v23;
    long long v326 = v10;
    char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
    long long v23 = v318;
    long long v10 = v326;
    long long v9 = v334;
    long long v8 = v342;
    uint64_t v14 = v177;
    uint64_t v30 = v182;
    uint64_t v31 = v60;
    uint64_t v15 = v59;
    uint64_t v12 = v304;
    uint64_t v13 = v311;
    uint64_t v17 = v58;
    uint64_t v16 = v57;
    uint64_t v19 = v56;
    uint64_t v18 = v55;
    uint64_t v20 = v54;
    uint64_t v21 = v53;
    if ((v61 & 1) == 0) {
      return 0;
    }
  }
LABEL_21:
  if (v274 == 1)
  {
    if (v192 == 1) {
      goto LABEL_23;
    }
LABEL_33:
    uint64_t v75 = v267;
    uint64_t v76 = v274;
    outlined copy of Locale.Subdivision??(v267, v274);
    uint64_t v77 = v266;
    uint64_t v78 = v266;
    uint64_t v79 = v192;
    uint64_t v80 = v192;
LABEL_34:
    outlined copy of Locale.Subdivision??(v78, v80);
    outlined consume of Locale.Subdivision??(v75, v76);
    outlined consume of Locale.Subdivision??(v77, v79);
    return 0;
  }
  if (v192 == 1) {
    goto LABEL_33;
  }
  uint64_t v81 = v274;
  if (!v274)
  {
    uint64_t v82 = v267;
    uint64_t v83 = v266;
    if (!v192)
    {
      uint64_t v307 = v12;
      uint64_t v314 = v13;
      uint64_t v168 = v21;
      uint64_t v299 = v20;
      uint64_t v290 = v18;
      uint64_t v106 = v19;
      uint64_t v107 = v16;
      uint64_t v108 = v17;
      uint64_t v109 = v15;
      uint64_t v110 = v31;
      uint64_t v111 = v30;
      uint64_t v112 = v14;
      long long v338 = v9;
      long long v346 = v8;
      long long v322 = v23;
      long long v330 = v10;
      outlined copy of Locale.Subdivision??(v267, 0);
      outlined copy of Locale.Subdivision??(v266, 0);
      long long v23 = v322;
      long long v10 = v330;
      long long v9 = v338;
      long long v8 = v346;
      uint64_t v14 = v112;
      uint64_t v30 = v111;
      uint64_t v31 = v110;
      uint64_t v15 = v109;
      uint64_t v12 = v307;
      uint64_t v13 = v314;
      uint64_t v17 = v108;
      uint64_t v16 = v107;
      uint64_t v19 = v106;
      uint64_t v18 = v290;
      uint64_t v20 = v299;
      uint64_t v21 = v168;
      goto LABEL_23;
    }
    outlined copy of Locale.LanguageCode?(v267, 0);
LABEL_51:
    uint64_t v103 = v192;
    outlined copy of Locale.LanguageCode?(v83, v192);
    uint64_t v104 = v82;
    uint64_t v105 = v274;
LABEL_52:
    outlined consume of Locale.LanguageCode?(v104, v105);
    outlined consume of Locale.LanguageCode?(v83, v103);
    outlined consume of Locale.Subdivision??(v82, v81);
    return 0;
  }
  uint64_t v82 = v267;
  uint64_t v83 = v266;
  if (!v192)
  {
    outlined copy of Locale.Subdivision??(v267, v274);
    outlined copy of Locale.Subdivision??(v267, v274);
    outlined copy of Locale.Subdivision??(v267, v274);
    outlined copy of Locale.Subdivision??(v266, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  if (v271 != v270 || v269 != v268)
  {
    uint64_t v306 = v12;
    uint64_t v313 = v13;
    uint64_t v184 = v30;
    uint64_t v84 = v21;
    uint64_t v85 = v20;
    uint64_t v86 = v18;
    uint64_t v87 = v19;
    uint64_t v88 = v16;
    uint64_t v89 = v17;
    uint64_t v90 = v15;
    uint64_t v91 = v31;
    uint64_t v179 = v14;
    long long v336 = v9;
    long long v344 = v8;
    long long v320 = v23;
    long long v328 = v10;
    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
    long long v23 = v320;
    long long v10 = v328;
    long long v9 = v336;
    long long v8 = v344;
    uint64_t v14 = v179;
    uint64_t v30 = v184;
    uint64_t v31 = v91;
    uint64_t v15 = v90;
    uint64_t v12 = v306;
    uint64_t v13 = v313;
    uint64_t v17 = v89;
    uint64_t v16 = v88;
    uint64_t v19 = v87;
    uint64_t v18 = v86;
    uint64_t v20 = v85;
    uint64_t v21 = v84;
    if ((v92 & 1) == 0) {
      return 0;
    }
  }
LABEL_23:
  if (!v265)
  {
    if (!v264) {
      goto LABEL_42;
    }
    goto LABEL_49;
  }
  if (!v264)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_49:
    uint64_t v71 = v258;
    uint64_t v72 = v264;
    outlined copy of Locale.LanguageCode?(v258, v264);
    uint64_t v73 = v259;
    uint64_t v74 = v265;
    goto LABEL_31;
  }
  if (v262 != v191 || v263 != v190)
  {
    uint64_t v305 = v12;
    uint64_t v312 = v13;
    uint64_t v183 = v30;
    uint64_t v62 = v21;
    uint64_t v63 = v20;
    uint64_t v64 = v18;
    uint64_t v65 = v19;
    uint64_t v66 = v16;
    uint64_t v67 = v17;
    uint64_t v68 = v15;
    uint64_t v69 = v31;
    uint64_t v178 = v14;
    long long v335 = v9;
    long long v343 = v8;
    long long v319 = v23;
    long long v327 = v10;
    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
    long long v23 = v319;
    long long v10 = v327;
    long long v9 = v335;
    long long v8 = v343;
    uint64_t v14 = v178;
    uint64_t v30 = v183;
    uint64_t v31 = v69;
    uint64_t v15 = v68;
    uint64_t v12 = v305;
    uint64_t v13 = v312;
    uint64_t v17 = v67;
    uint64_t v16 = v66;
    uint64_t v19 = v65;
    uint64_t v18 = v64;
    uint64_t v20 = v63;
    uint64_t v21 = v62;
    if ((v70 & 1) == 0) {
      return 0;
    }
  }
LABEL_42:
  if (v261)
  {
    if (!v260) {
      return 0;
    }
    uint64_t v93 = v21;
    uint64_t v298 = v20;
    uint64_t v94 = v18;
    uint64_t v293 = v19;
    uint64_t v95 = v16;
    uint64_t v96 = v17;
    uint64_t v97 = v13;
    uint64_t v98 = v12;
    uint64_t v99 = v15;
    uint64_t v171 = v31;
    uint64_t v100 = v30;
    uint64_t v101 = v14;
    long long v337 = v9;
    long long v345 = v8;
    long long v321 = v23;
    long long v329 = v10;
    char v102 = specialized static Array<A>.== infix(_:_:)(v261, v260);
    long long v23 = v321;
    long long v10 = v329;
    long long v9 = v337;
    long long v8 = v345;
    uint64_t v14 = v101;
    uint64_t v30 = v100;
    uint64_t v31 = v171;
    uint64_t v15 = v99;
    uint64_t v12 = v98;
    uint64_t v13 = v97;
    uint64_t v17 = v96;
    uint64_t v16 = v95;
    uint64_t v19 = v293;
    uint64_t v18 = v94;
    uint64_t v20 = v298;
    uint64_t v21 = v93;
    if ((v102 & 1) == 0) {
      return 0;
    }
  }
  else if (v260)
  {
    return 0;
  }
  if (v257 == 7)
  {
    if (v256 != 7) {
      return 0;
    }
  }
  else
  {
    if (v256 == 7) {
      return 0;
    }
    uint64_t v113 = v21;
    uint64_t v300 = v20;
    uint64_t v114 = v18;
    uint64_t v294 = v19;
    uint64_t v115 = v16;
    uint64_t v116 = v17;
    uint64_t v117 = v13;
    uint64_t v118 = v12;
    uint64_t v119 = v15;
    uint64_t v172 = v31;
    uint64_t v120 = v30;
    uint64_t v121 = v14;
    long long v339 = v9;
    long long v347 = v8;
    long long v323 = v23;
    long long v331 = v10;
    char v122 = specialized == infix<A>(_:_:)(v257, v256);
    long long v23 = v323;
    long long v10 = v331;
    long long v9 = v339;
    long long v8 = v347;
    uint64_t v14 = v121;
    uint64_t v30 = v120;
    uint64_t v31 = v172;
    uint64_t v15 = v119;
    uint64_t v12 = v118;
    uint64_t v13 = v117;
    uint64_t v17 = v116;
    uint64_t v16 = v115;
    uint64_t v19 = v294;
    uint64_t v18 = v114;
    uint64_t v20 = v300;
    uint64_t v21 = v113;
    if ((v122 & 1) == 0) {
      return 0;
    }
  }
  if (v255)
  {
    if ((v254 & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (v254) {
      return 0;
    }
    if (v251)
    {
      if ((v250 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t v185 = v30;
      uint64_t v173 = v31;
      uint64_t v287 = v15;
      uint64_t v308 = v12;
      uint64_t v315 = v13;
      uint64_t v284 = v17;
      long long v368 = v8;
      long long v369 = v9;
      long long v370 = v10;
      LOBYTE(v371) = 0;
      if (v250) {
        return 0;
      }
      uint64_t v123 = v14;
      uint64_t v124 = v16;
      uint64_t v125 = v19;
      uint64_t v126 = v18;
      uint64_t v127 = v20;
      uint64_t v128 = v21;
      uint64_t v357 = v237;
      LOBYTE(v358) = v238 & 1;
      uint64_t v359 = v239;
      LOBYTE(v360) = v240 & 1;
      long long v361 = v23;
      BOOL v129 = specialized static WeekendRange.== infix(_:_:)((uint64_t)&v368, (uint64_t)&v357);
      uint64_t v21 = v128;
      uint64_t v20 = v127;
      uint64_t v18 = v126;
      uint64_t v19 = v125;
      uint64_t v16 = v124;
      uint64_t v17 = v284;
      uint64_t v13 = v315;
      uint64_t v12 = v308;
      uint64_t v15 = v287;
      uint64_t v31 = v173;
      uint64_t v30 = v185;
      uint64_t v14 = v123;
      if (!v129) {
        return 0;
      }
    }
  }
  if (v252)
  {
    if (!v253) {
      return 0;
    }
  }
  else
  {
    char v130 = v253;
    if (v247 != v246) {
      char v130 = 1;
    }
    if (v130) {
      return 0;
    }
  }
  if (v249 == 4)
  {
    if (v248 != 4) {
      return 0;
    }
  }
  else
  {
    if (v248 == 4) {
      return 0;
    }
    uint64_t v131 = v21;
    uint64_t v301 = v20;
    uint64_t v132 = v18;
    uint64_t v295 = v19;
    uint64_t v133 = v16;
    uint64_t v134 = v17;
    uint64_t v135 = v13;
    uint64_t v136 = v12;
    uint64_t v137 = v15;
    uint64_t v174 = v31;
    uint64_t v138 = v30;
    uint64_t v139 = v14;
    char v140 = specialized == infix<A>(_:_:)(v249, v248);
    uint64_t v14 = v139;
    uint64_t v30 = v138;
    uint64_t v31 = v174;
    uint64_t v15 = v137;
    uint64_t v12 = v136;
    uint64_t v13 = v135;
    uint64_t v17 = v134;
    uint64_t v16 = v133;
    uint64_t v19 = v295;
    uint64_t v18 = v132;
    uint64_t v20 = v301;
    uint64_t v21 = v131;
    if ((v140 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v175 = v31;
  uint64_t v180 = v14;
  uint64_t v186 = v30;
  if (!v245)
  {
    if (!v244) {
      goto LABEL_87;
    }
    goto LABEL_91;
  }
  if (!v244)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
LABEL_91:
    uint64_t v71 = v232;
    uint64_t v72 = v244;
    outlined copy of Locale.LanguageCode?(v232, v244);
    uint64_t v73 = v233;
    uint64_t v74 = v245;
    goto LABEL_31;
  }
  uint64_t v141 = v15;
  uint64_t v142 = v12;
  uint64_t v143 = v13;
  uint64_t v144 = v17;
  uint64_t v145 = v16;
  uint64_t v146 = v19;
  uint64_t v147 = v18;
  uint64_t v148 = v20;
  uint64_t v149 = v21;
  if (v242 != v241 || v243 != v236)
  {
    char v150 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v15 = v141;
    uint64_t v12 = v142;
    uint64_t v13 = v143;
    uint64_t v17 = v144;
    uint64_t v16 = v145;
    uint64_t v19 = v146;
    uint64_t v18 = v147;
    uint64_t v20 = v148;
    uint64_t v21 = v149;
    if ((v150 & 1) == 0) {
      return 0;
    }
  }
LABEL_87:
  uint64_t v169 = v21;
  uint64_t v151 = v15;
  uint64_t v152 = v12;
  uint64_t v153 = v13;
  uint64_t v154 = v17;
  uint64_t v155 = v16;
  uint64_t v156 = v19;
  uint64_t v157 = v18;
  uint64_t v158 = v20;
  if (v235 == 2)
  {
    if (v234 != 2) {
      return 0;
    }
  }
  else if (v234 == 2 || ((((v235 & 1) == 0) ^ v234) & 1) == 0)
  {
    return 0;
  }
  if (v230 == 1)
  {
    if (v229 == 1) {
      goto LABEL_96;
    }
    goto LABEL_109;
  }
  if (v229 == 1)
  {
LABEL_109:
    uint64_t v75 = v224;
    uint64_t v76 = v230;
    outlined copy of Locale.Subdivision??(v224, v230);
    uint64_t v77 = v223;
    uint64_t v78 = v223;
    uint64_t v79 = v229;
    uint64_t v80 = v229;
    goto LABEL_34;
  }
  if (!v230)
  {
    if (!v229)
    {
      outlined copy of Locale.Subdivision??(v224, 0);
      outlined copy of Locale.Subdivision??(v223, 0);
      goto LABEL_96;
    }
    outlined copy of Locale.LanguageCode?(v224, 0);
    goto LABEL_129;
  }
  if (!v229)
  {
    outlined copy of Locale.Subdivision??(v224, v230);
    outlined copy of Locale.Subdivision??(v224, v230);
    outlined copy of Locale.Subdivision??(v224, v230);
    outlined copy of Locale.Subdivision??(v223, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_129:
    uint64_t v83 = v223;
    uint64_t v103 = v229;
    outlined copy of Locale.LanguageCode?(v223, v229);
    uint64_t v82 = v224;
    uint64_t v104 = v224;
    uint64_t v81 = v230;
    uint64_t v105 = v230;
    goto LABEL_52;
  }
  if ((v228 != v226 || v227 != v225) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
LABEL_96:
  if (v222 == 1)
  {
    if (v221 == 1) {
      goto LABEL_98;
    }
    goto LABEL_117;
  }
  if (v221 == 1)
  {
LABEL_117:
    uint64_t v75 = v215;
    uint64_t v76 = v222;
    outlined copy of Locale.Subdivision??(v215, v222);
    uint64_t v77 = v214;
    uint64_t v78 = v214;
    uint64_t v79 = v221;
    uint64_t v80 = v221;
    goto LABEL_34;
  }
  if (!v222)
  {
    if (!v221)
    {
      outlined copy of Locale.Subdivision??(v215, 0);
      outlined copy of Locale.Subdivision??(v214, 0);
      goto LABEL_98;
    }
    outlined copy of Locale.LanguageCode?(v215, 0);
    goto LABEL_140;
  }
  if (!v221)
  {
    outlined copy of Locale.Subdivision??(v215, v222);
    outlined copy of Locale.Subdivision??(v215, v222);
    outlined copy of Locale.Subdivision??(v215, v222);
    outlined copy of Locale.Subdivision??(v214, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_140:
    uint64_t v83 = v214;
    uint64_t v103 = v221;
    outlined copy of Locale.LanguageCode?(v214, v221);
    uint64_t v82 = v215;
    uint64_t v104 = v215;
    uint64_t v81 = v222;
    uint64_t v105 = v222;
    goto LABEL_52;
  }
  if ((v220 != v217 || v218 != v216) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
LABEL_98:
  if (v219 == 1)
  {
    uint64_t v159 = v231;
    if (v213 == 1) {
      goto LABEL_100;
    }
LABEL_127:
    outlined copy of TimeZone??(v219);
    outlined copy of TimeZone??(v213);
    outlined consume of TimeZone??(v219);
    outlined consume of TimeZone??(v213);
    return 0;
  }
  if (v213 == 1) {
    goto LABEL_127;
  }
  if (!v219)
  {
    if (!v213)
    {
      outlined copy of TimeZone??(0);
      outlined copy of TimeZone??(0);
      uint64_t v159 = v231;
      goto LABEL_100;
    }
LABEL_151:
    swift_unknownObjectRelease();
    outlined consume of TimeZone??(v219);
    return 0;
  }
  *(void *)&long long v368 = v219;
  *((void *)&v368 + 1) = v212;
  if (!v213)
  {
    outlined copy of TimeZone??(v219);
    outlined copy of TimeZone??(v219);
    outlined copy of TimeZone??(v219);
    outlined copy of TimeZone??(0);
    swift_unknownObjectRelease();
    goto LABEL_151;
  }
  uint64_t v357 = v213;
  uint64_t v358 = v211;
  outlined copy of TimeZone??(v219);
  outlined copy of TimeZone??(v219);
  swift_unknownObjectRetain();
  char v356 = specialized static TimeZone.== infix(_:_:)((uint64_t)&v368, (uint64_t)&v357);
  swift_unknownObjectRelease();
  outlined consume of TimeZone??(v219);
  outlined consume of TimeZone??(v219);
  uint64_t v159 = v231;
  if ((v356 & 1) == 0) {
    return 0;
  }
LABEL_100:
  if (v159 == 1)
  {
    uint64_t v160 = v189;
    uint64_t v161 = v231;
    if (v210 == 1) {
      goto LABEL_102;
    }
    goto LABEL_138;
  }
  uint64_t v160 = v189;
  uint64_t v161 = v231;
  if (v210 == 1)
  {
LABEL_138:
    uint64_t v75 = v160;
    uint64_t v76 = v161;
    outlined copy of Locale.Subdivision??(v160, v161);
    uint64_t v77 = v206;
    uint64_t v78 = v206;
    uint64_t v79 = v210;
    uint64_t v80 = v210;
    goto LABEL_34;
  }
  if (!v231)
  {
    if (!v210)
    {
      outlined copy of Locale.Subdivision??(v189, 0);
      outlined copy of Locale.Subdivision??(v206, 0);
      goto LABEL_102;
    }
    outlined copy of Locale.LanguageCode?(v189, 0);
LABEL_170:
    outlined copy of Locale.LanguageCode?(v206, v210);
    outlined consume of Locale.LanguageCode?(v189, v231);
    outlined consume of Locale.LanguageCode?(v206, v210);
    outlined consume of Locale.Subdivision??(v189, v231);
    return 0;
  }
  if (!v210)
  {
    outlined copy of Locale.Subdivision??(v189, v231);
    outlined copy of Locale.Subdivision??(v189, v231);
    outlined copy of Locale.Subdivision??(v189, v231);
    outlined copy of Locale.Subdivision??(v206, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_170;
  }
  if ((v152 != v208 || v153 != v209) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
LABEL_102:
  if (!v207)
  {
    if (!v205) {
      goto LABEL_153;
    }
    return 0;
  }
  if (!v205 || (v204 != v203 || v207 != v205) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
LABEL_153:
  if ((specialized static Dictionary<>.== infix(_:_:)(v201, v199) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v202, v200) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v180, v194) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v151, v195) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v154, v196) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v155, v197) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v156, v198) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v157, v187) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v158, v188) & 1) == 0
    || (specialized static Dictionary<>.== infix(_:_:)(v169, v186) & 1) == 0)
  {
    return 0;
  }

  return specialized static Dictionary<>.== infix(_:_:)(v22, v175);
}

uint64_t specialized static Locale.localeIdentifierByReplacingLanguageCodeAndScriptCode(localeIDWithDesiredLangCode:localeIDWithDesiredComponents:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __dst[44] = *MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257, a1, a2);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (!v10) {
    return v8;
  }
  Locale.Components.init(identifier:)(v8, v10, __src);
  memcpy(__dst, __src, 0x160uLL);
  if (!__dst[1] || (uint64_t v11 = (void *)__dst[5]) == 0)
  {
    uint64_t v30 = (Swift::String *)__dst;
LABEL_12:
    outlined release of Locale.Components(&v30->_countAndFlagsBits);
    return 0;
  }
  uint64_t v12 = __dst[4];
  __src[0] = __dst[0];
  __src[1] = __dst[1];
  swift_bridgeObjectRetain();
  outlined copy of Locale.LanguageCode?(v12, (uint64_t)v11);
  v13._uint64_t countAndFlagsBits = 45;
  v13._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  outlined consume of Locale.LanguageCode?(v12, (uint64_t)v11);
  v14._uint64_t countAndFlagsBits = v12;
  v14._unint64_t object = v11;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  outlined release of Locale.Components(__dst);
  uint64_t v15 = __src[0];
  uint64_t v16 = __src[1];
  swift_bridgeObjectRetain();
  uint64_t v8 = specialized _withFixedCharBuffer(size:_:)(257, a3, a4);
  uint64_t v18 = v17;
  swift_bridgeObjectRelease();
  if (!v18)
  {
    swift_bridgeObjectRelease();
    return v8;
  }
  Locale.Components.init(identifier:)(v8, v18, v45);
  Locale.Components.init(identifier:)(v15, v16, __src);
  if (!__src[1])
  {
    outlined release of Locale.Components(__src);
    memcpy(v44, v45, sizeof(v44));
    uint64_t v30 = v44;
    goto LABEL_12;
  }
  uint64_t v8 = __src[5];
  if (!__src[5])
  {
    outlined release of Locale.Components(__src);
    memcpy(v44, v45, sizeof(v44));
    outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
    return v8;
  }
  uint64_t v19 = __src[4];
  uint64_t v20 = __src[6];
  uint64_t v21 = __src[7];
  uint64_t v22 = v45[0];
  uint64_t v23 = v45[1];
  v45[0] = __src[0];
  v45[1] = __src[1];
  v45[2] = __src[2];
  v45[3] = __src[3];
  outlined copy of Locale.LanguageCode?(__src[0], __src[1]);
  outlined copy of Locale.LanguageCode?(v19, v8);
  outlined consume of Locale.LanguageCode?(v22, v23);
  outlined consume of Locale.LanguageCode?(v45[4], v45[5]);
  v45[4] = v19;
  v45[5] = v8;
  v45[6] = v20;
  v45[7] = v21;
  swift_bridgeObjectRetain();
  specialized static Locale.keywordValue(identifier:key:)();
  if (!v24)
  {
    swift_bridgeObjectRelease();
    static Locale.NumberingSystem.defaultNumberingSystem(for:)(a3, a4, v44);
    if (v44[0]._object)
    {
      uint64_t countAndFlagsBits = v44[1]._countAndFlagsBits;
      unint64_t object = v44[1]._object;
    }
    else
    {
      if (one-time initialization token for latn != -1) {
        swift_once();
      }
      unint64_t object = (void *)*((void *)&xmmword_1E8EDDC40 + 1);
      uint64_t countAndFlagsBits = xmmword_1E8EDDC40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
LABEL_23:
    uint64_t v31 = specialized static Locale.NumberingSystem.validNumberingSystems(for:)(a1, a2);
    uint64_t v32 = v31[2];
    if (v32)
    {
      uint64_t v33 = 0;
      while (1)
      {
        uint64_t v34 = &v31[v33];
        BOOL v35 = v31[v33 + 6] == countAndFlagsBits && v31[v33 + 7] == (void)object;
        if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
        v33 += 4;
        if (!--v32) {
          goto LABEL_31;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v33 * 8)
      {
        uint64_t v37 = v31[v33 + 4];
        uint64_t v36 = v31[v33 + 5];
        uint64_t v39 = v34[6];
        uint64_t v38 = v34[7];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        outlined consume of Locale.LanguageCode?(v45[21], v45[22]);
        v45[21] = v37;
        v45[22] = v36;
        v45[23] = v39;
        v45[24] = v38;
        goto LABEL_35;
      }
    }
    else
    {
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    outlined consume of Locale.LanguageCode?(v45[21], v45[22]);
    memset(&v45[21], 0, 32);
LABEL_35:
    memcpy(v44, v45, sizeof(v44));
    memcpy(v43, v45, sizeof(v43));
    Locale.Components.icuIdentifier.getter();
    CFAllocatorRef v40 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    CFStringRef v41 = (const __CFString *)String._bridgeToObjectiveCImpl()();
    CanonicalLocaleIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLocaleIdentifierFromString(v40, v41);
    swift_unknownObjectRelease();
    if (CanonicalLocaleIdentifierFromString)
    {
      uint64_t v8 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLocaleIdentifierFromString);
      swift_bridgeObjectRelease();

      outlined release of Locale.Components(__src);
      outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined release of Locale.Components(__src);
      outlined release of Locale.Components(&v44[0]._countAndFlagsBits);
      return 0;
    }
    return v8;
  }
  swift_bridgeObjectRelease();
  LODWORD(v44[0]._countAndFlagsBits) = 0;
  String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v25 = unumsys_open();
  swift_release();
  if (!v25)
  {
    if (one-time initialization token for latn != -1) {
      swift_once();
    }
    unint64_t object = (void *)*((void *)&xmmword_1E8EDDC40 + 1);
    uint64_t countAndFlagsBits = xmmword_1E8EDDC40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_22;
  }
  uint64_t result = MEMORY[0x18530A100](v25);
  if (result)
  {
    String.init(cString:)();
    Swift::String v27 = String.lowercased()();
    uint64_t countAndFlagsBits = v27._countAndFlagsBits;
    unint64_t object = v27._object;
LABEL_22:
    unumsys_close();
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, char a2)
{
  v4._uint64_t countAndFlagsBits = Calendar.Identifier.cfCalendarIdentifier.getter();
  uint64_t v21 = 0x61634053555F6E65;
  unint64_t v22 = 0xEF3D7261646E656CLL;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 1u);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v20);
    outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)&v21);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v21) == 1 || !v22)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v8 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      uint64_t v8 = swift_bridgeObjectRetain();
    }
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
      uint64_t v11 = v8 + 40;
      while (1)
      {
        CFStringRef v12 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v10, v12);
        swift_unknownObjectRelease();
        if (CanonicalLanguageIdentifierFromString)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v11 += 16;
        unint64_t v14 = 0xE800000000000000;
        unint64_t v15 = 0x7473696864647562;
        switch(a2)
        {
          case 1:
            break;
          case 2:
            unint64_t v14 = 0xE700000000000000;
            unint64_t v15 = 0x6573656E696863;
            break;
          case 3:
            unint64_t v14 = 0xE600000000000000;
            unint64_t v15 = 0x636974706F63;
            break;
          case 4:
            unint64_t v15 = 0x6369706F69687465;
            break;
          case 5:
            unint64_t v15 = 0xD000000000000013;
            unint64_t v14 = 0x80000001823ADD30;
            break;
          case 6:
            unint64_t v14 = 0xE600000000000000;
            unint64_t v15 = 0x776572626568;
            break;
          case 7:
            unint64_t v14 = 0xE700000000000000;
            unint64_t v15 = 0x313036386F7369;
            break;
          case 8:
            unint64_t v14 = 0xE600000000000000;
            unint64_t v15 = 0x6E6169646E69;
            break;
          case 9:
            unint64_t v14 = 0xE700000000000000;
            unint64_t v15 = 0x63696D616C7369;
            break;
          case 10:
            unint64_t v14 = 0xED00006C69766963;
            goto LABEL_28;
          case 11:
            unint64_t v15 = 0x6573656E6170616ALL;
            break;
          case 12:
            unint64_t v14 = 0xE700000000000000;
            unint64_t v15 = 0x6E616973726570;
            break;
          case 13:
            unint64_t v14 = 0xE300000000000000;
            unint64_t v15 = 6516594;
            break;
          case 14:
            unint64_t v14 = 0xEC000000616C6274;
LABEL_28:
            unint64_t v15 = 0x2D63696D616C7369;
            break;
          case 15:
            unint64_t v14 = 0x80000001823ADD50;
            unint64_t v15 = 0xD000000000000010;
            break;
          default:
            unint64_t v14 = 0xE90000000000006ELL;
            unint64_t v15 = 0x6169726F67657267;
            break;
        }
        unint64_t v16 = v14;
        String.append(_:)(*(Swift::String *)&v15);
        swift_bridgeObjectRetain();
        uint64_t v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 1u);
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v18) {
          break;
        }
        if (!--v9) {
          goto LABEL_32;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_32:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v5;
}

uint64_t specialized closure #1 in closure #1 in _LocaleICU.scriptCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v12[69] = *MEMORY[0x1E4F143B8];
  if (String.count.getter() != 4) {
    return 0;
  }
  v12[68] = 0xE300000000000000;
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 5461343;
  v7._unint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = swift_bridgeObjectRetain();
  MEMORY[0x1F4188790](v8);
  v12[67] = 0;
  String.utf8CString.getter();
  String.utf8CString.getter();
  Displayint Script = uloc_getDisplayScript();
  swift_release();
  swift_release();
  uint64_t v10 = 0;
  if (DisplayScript <= 257 && DisplayScript > 0) {
    uint64_t v10 = specialized String.init(_utf16:)((uint64_t)v12, DisplayScript);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  v31[18] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = specialized closure #1 in closure #1 in _LocaleICU.scriptCodeDisplayName(for:)(*(void *)(a1 + 16), *(void *)(a1 + 24), a2, a3);
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v30);
    outlined init with take of LocalePreferences?((uint64_t)v30, (uint64_t)v31);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)v31) == 1 || !v31[1])
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v9 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      uint64_t v9 = swift_bridgeObjectRetain();
    }
    uint64_t v23 = v9;
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return 0;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    uint64_t v12 = v23 + 40;
    uint64_t v25 = v4;
    uint64_t v26 = v3;
    CFAllocatorRef v24 = v11;
    while (1)
    {
      CFStringRef v13 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v11, v13);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() != 4) {
        goto LABEL_12;
      }
      uint64_t v28 = 6254181;
      unint64_t v29 = 0xE300000000000000;
      v15._uint64_t countAndFlagsBits = v4;
      v15._unint64_t object = v3;
      String.append(_:)(v15);
      swift_bridgeObjectRetain();
      v16._uint64_t countAndFlagsBits = 5461343;
      v16._unint64_t object = (void *)0xE300000000000000;
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      uint64_t v17 = swift_bridgeObjectRetain();
      Swift::String v27 = &v22;
      MEMORY[0x1F4188790](v17);
      LODWORD(v28) = 0;
      String.utf8CString.getter();
      String.utf8CString.getter();
      Displayint Script = uloc_getDisplayScript();
      swift_release();
      swift_release();
      if ((int)v28 > 0 || v28 == -127 || DisplayScript > 257 || DisplayScript <= 0) {
        break;
      }
      uint64_t v8 = specialized String.init(_utf16:)((uint64_t)(&v22 - 66), DisplayScript);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v4 = v25;
      uint64_t v3 = v26;
      CFAllocatorRef v11 = v24;
      if (v20)
      {
        swift_bridgeObjectRelease();
        return v8;
      }
LABEL_13:
      v12 += 16;
      if (!--v10) {
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = v25;
    uint64_t v3 = v26;
    CFAllocatorRef v11 = v24;
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  return v6;
}

uint64_t specialized closure #1 in closure #1 in _LocaleICU.variantCodeDisplayName(for:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  v11[69] = *MEMORY[0x1E4F143B8];
  if (String.count.getter() > 250) {
    return 0;
  }
  v11[68] = 0xE600000000000000;
  v6._uint64_t countAndFlagsBits = a3;
  v6._unint64_t object = a4;
  String.append(_:)(v6);
  uint64_t v7 = swift_bridgeObjectRetain();
  MEMORY[0x1F4188790](v7);
  v11[67] = 0x5F5300000000;
  String.utf8CString.getter();
  String.utf8CString.getter();
  int DisplayVariant = uloc_getDisplayVariant();
  swift_release();
  swift_release();
  uint64_t v9 = 0;
  if (DisplayVariant <= 257 && DisplayVariant > 0) {
    uint64_t v9 = specialized String.init(_utf16:)((uint64_t)v11, DisplayVariant);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, Swift::String a2)
{
  unint64_t object = a2._object;
  uint64_t countAndFlagsBits = a2._countAndFlagsBits;
  unint64_t v19 = 0xD000000000000010;
  unint64_t v20 = 0x80000001823B0650;
  String.append(_:)(a2);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 1u);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v7)
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v18);
    outlined init with take of LocalePreferences?((uint64_t)v18, (uint64_t)&v19);
    if (_s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v19) == 1 || !v20)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v8 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      uint64_t v8 = swift_bridgeObjectRetain();
    }
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
      uint64_t v11 = v8 + 40;
      while (1)
      {
        CFStringRef v12 = (const __CFString *)String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRetain();
        CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v10, v12);
        swift_unknownObjectRelease();
        if (CanonicalLanguageIdentifierFromString)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v14._uint64_t countAndFlagsBits = countAndFlagsBits;
        v14._unint64_t object = object;
        String.append(_:)(v14);
        swift_bridgeObjectRetain();
        uint64_t v5 = specialized _withFixedUCharBuffer(size:defaultIsError:_:)(257, 1u);
        uint64_t v16 = v15;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        if (v16) {
          break;
        }
        v11 += 16;
        if (!--v9) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_15:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v5;
}

uint64_t specialized _LocaleICU.displayNameIncludingFallbacks(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (String.count.getter() != 3
    || (MEMORY[0x1F4188790](3),
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, &v20),
        !v21))
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v19);
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20);
    int v6 = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v20);
    uint64_t v17 = a3;
    if (v6 == 1 || !v21)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }
    uint64_t v16 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return 0;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    uint64_t v10 = v16 + 40;
    while (1)
    {
      CFStringRef v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() == 3)
      {
        MEMORY[0x1F4188790](3);
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, v18);
        uint64_t v5 = v18[0];
        uint64_t v13 = v18[1];
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v10 += 16;
      if (!--v8) {
        goto LABEL_20;
      }
    }
  }
  return v20;
}

{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  CFAllocatorRef v9;
  uint64_t v10;
  CFStringRef v11;
  __CFString *CanonicalLanguageIdentifierFromString;
  uint64_t v13;
  UChar v15[12];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  unsigned char v19[144];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (String.count.getter() != 3
    || (MEMORY[0x1F4188790](3),
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, &v20),
        !v21))
  {
    outlined init with take of LocalePreferences?(a1 + 32, (uint64_t)v19);
    outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)&v20);
    int v6 = _s10Foundation17LocalePreferencesVSgWOg((uint64_t)&v20);
    uint64_t v17 = a3;
    if (v6 == 1 || !v21)
    {
      if (one-time initialization token for cache != -1) {
        swift_once();
      }
      uint64_t v7 = (uint64_t)LocaleCache.preferredLanguages(forCurrentUser:)(0);
    }
    else
    {
      uint64_t v7 = swift_bridgeObjectRetain();
    }
    uint64_t v16 = v7;
    uint64_t v8 = *(void *)(v7 + 16);
    if (!v8)
    {
LABEL_20:
      swift_bridgeObjectRelease();
      return 0;
    }
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CFB0];
    uint64_t v10 = v16 + 40;
    while (1)
    {
      CFStringRef v11 = (const __CFString *)String._bridgeToObjectiveCImpl()();
      swift_bridgeObjectRetain();
      CanonicalLanguageIdentifierFromString = (__CFString *)CFLocaleCreateCanonicalLanguageIdentifierFromString(v9, v11);
      swift_unknownObjectRelease();
      if (CanonicalLanguageIdentifierFromString)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(CanonicalLanguageIdentifierFromString);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      if (String.count.getter() == 3)
      {
        MEMORY[0x1F4188790](3);
        closure #1 in _LocaleICU.icuCurrencyName(localeIdentifier:value:style:)(v15, v18);
        uint64_t v5 = v18[0];
        uint64_t v13 = v18[1];
        swift_bridgeObjectRelease();
        if (v13)
        {
          swift_bridgeObjectRelease();
          return v5;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v10 += 16;
      if (!--v8) {
        goto LABEL_20;
      }
    }
  }
  return v20;
}

uint64_t specialized static Locale.availableIdentifiers.getter()
{
  uint64_t v8 = MEMORY[0x1E4FBC870];
  uint64_t result = uloc_countAvailable();
  if ((result & 0x80000000) != 0)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  int v1 = result;
  if (result)
  {
    int v2 = 0;
    while (v1 != v2)
    {
      uint64_t result = uloc_getAvailable();
      if (!result) {
        goto LABEL_12;
      }
      ++v2;
      unint64_t v3 = String.init(cString:)();
      specialized Set._Variant.insert(_:)(&v7, v3, v4);
      uint64_t result = swift_bridgeObjectRelease();
      if (v1 == v2)
      {
        uint64_t v5 = v8;
        goto LABEL_9;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = MEMORY[0x1E4FBC870];
LABEL_9:
  int v6 = specialized _copyCollectionToContiguousArray<A>(_:)(v5);
  swift_bridgeObjectRelease();
  return (uint64_t)v6;
}

uint64_t initializeWithCopy for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    if (v4 == 1)
    {
      long long v5 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v5;
      long long v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      goto LABEL_10;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v13 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = *(void *)(a2 + 40);
    if (!v9)
    {
LABEL_8:
      long long v14 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v14;
      uint64_t v11 = *(void *)(a2 + 72);
      if (!v11) {
        goto LABEL_9;
      }
LABEL_6:
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v11;
      uint64_t v12 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    uint64_t v9 = *(void *)(a2 + 40);
    if (!v9) {
      goto LABEL_8;
    }
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = *(void *)(a2 + 72);
  if (v11) {
    goto LABEL_6;
  }
LABEL_9:
  long long v15 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v15;
LABEL_10:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v16 = *(void *)(a2 + 112);
  if (v16)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v16;
    uint64_t v17 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v17;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v18;
  }
  unint64_t v19 = *(void *)(a2 + 144);
  if (v19 > 1)
  {
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v19;
    uint64_t v23 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v21 = *(void *)(a2 + 176);
    if (v21) {
      goto LABEL_15;
    }
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v20;
    uint64_t v21 = *(void *)(a2 + 176);
    if (v21)
    {
LABEL_15:
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v21;
      uint64_t v22 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v22;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_18;
    }
  }
  long long v24 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v24;
LABEL_18:
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  uint64_t v25 = *(void *)(a2 + 296);
  swift_bridgeObjectRetain();
  if (v25)
  {
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v25;
    uint64_t v26 = *(void *)(a2 + 312);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v27;
  }
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  unint64_t v28 = *(void *)(a2 + 336);
  if (v28 > 1)
  {
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = v28;
    uint64_t v30 = *(void *)(a2 + 352);
    *(void *)(a1 + 344) = *(void *)(a2 + 344);
    *(void *)(a1 + 352) = v30;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v29;
  }
  unint64_t v31 = *(void *)(a2 + 368);
  if (v31 > 1)
  {
    *(void *)(a1 + 360) = *(void *)(a2 + 360);
    *(void *)(a1 + 368) = v31;
    uint64_t v33 = *(void *)(a2 + 384);
    *(void *)(a1 + 376) = *(void *)(a2 + 376);
    *(void *)(a1 + 384) = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v32 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v32;
  }
  uint64_t v34 = *(void *)(a2 + 392);
  if (v34 == 1)
  {
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
  }
  else
  {
    uint64_t v35 = *(void *)(a2 + 400);
    *(void *)(a1 + 392) = v34;
    *(void *)(a1 + 400) = v35;
    swift_unknownObjectRetain();
  }
  unint64_t v36 = *(void *)(a2 + 416);
  if (v36 > 1)
  {
    *(void *)(a1 + 408) = *(void *)(a2 + 408);
    *(void *)(a1 + 416) = v36;
    uint64_t v38 = *(void *)(a2 + 432);
    *(void *)(a1 + 424) = *(void *)(a2 + 424);
    *(void *)(a1 + 432) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v37 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v37;
  }
  uint64_t v39 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = v39;
  uint64_t v40 = *(void *)(a2 + 464);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a1 + 464) = v40;
  uint64_t v41 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v41;
  uint64_t v42 = *(void *)(a2 + 496);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(void *)(a1 + 496) = v42;
  uint64_t v43 = *(void *)(a2 + 512);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = v43;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      long long v7 = *(_OWORD *)(a2 + 32);
      long long v8 = *(_OWORD *)(a2 + 48);
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)(a1 + 48) = v8;
      goto LABEL_34;
    }
    if (v5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (*(void *)(a2 + 40)) {
        goto LABEL_8;
      }
    }
    else
    {
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
      if (*(void *)(a2 + 40))
      {
LABEL_8:
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (!*(void *)(a2 + 72)) {
          goto LABEL_15;
        }
        goto LABEL_31;
      }
    }
    long long v15 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v15;
    if (!*(void *)(a2 + 72))
    {
LABEL_15:
      long long v16 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v16;
      goto LABEL_34;
    }
    goto LABEL_31;
  }
  if (v5 == 1)
  {
    outlined destroy of Locale.Language.Components(a1);
    long long v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
    long long v11 = *(_OWORD *)(a2 + 80);
    long long v13 = *(_OWORD *)(a2 + 32);
    long long v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v11;
    *(_OWORD *)(a1 + 32) = v13;
    *(_OWORD *)(a1 + 48) = v12;
    goto LABEL_34;
  }
  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.LanguageCode(a1);
      long long v17 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v17;
    }
  }
  else if (v5)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v18;
  }
  unint64_t v19 = (_OWORD *)(a1 + 32);
  long long v20 = (_OWORD *)(a2 + 32);
  uint64_t v21 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v21)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Script(a1 + 32);
      long long v22 = *(_OWORD *)(a2 + 48);
      *unint64_t v19 = *v20;
      *(_OWORD *)(a1 + 48) = v22;
    }
  }
  else if (v21)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 48);
    *unint64_t v19 = *v20;
    *(_OWORD *)(a1 + 48) = v23;
  }
  long long v24 = (_OWORD *)(a1 + 64);
  uint64_t v25 = (_OWORD *)(a2 + 64);
  uint64_t v26 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v26)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Region(a1 + 64);
      long long v27 = *(_OWORD *)(a2 + 80);
      *long long v24 = *v25;
      *(_OWORD *)(a1 + 80) = v27;
    }
    goto LABEL_34;
  }
  if (v26)
  {
LABEL_31:
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    goto LABEL_34;
  }
  long long v28 = *(_OWORD *)(a2 + 80);
  *long long v24 = *v25;
  *(_OWORD *)(a1 + 80) = v28;
LABEL_34:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  long long v29 = (_OWORD *)(a1 + 104);
  uint64_t v30 = (_OWORD *)(a2 + 104);
  uint64_t v31 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112))
  {
    if (v31)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.Collation(a1 + 104);
      long long v32 = *(_OWORD *)(a2 + 120);
      *long long v29 = *v30;
      *(_OWORD *)(a1 + 120) = v32;
    }
  }
  else if (v31)
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v33 = *(_OWORD *)(a2 + 120);
    *long long v29 = *v30;
    *(_OWORD *)(a1 + 120) = v33;
  }
  uint64_t v34 = (_OWORD *)(a1 + 136);
  uint64_t v35 = (_OWORD *)(a2 + 136);
  uint64_t v36 = *(void *)(a1 + 144);
  unint64_t v37 = *(void *)(a2 + 144);
  if (v36 == 1)
  {
    if (v37 <= 1)
    {
LABEL_43:
      long long v38 = *(_OWORD *)(a2 + 152);
      *uint64_t v34 = *v35;
      *(_OWORD *)(a1 + 152) = v38;
      goto LABEL_52;
    }
    goto LABEL_51;
  }
  if (v37 == 1)
  {
    outlined destroy of Any?(a1 + 136, &demangling cache variable for type metadata for Locale.Currency?);
    goto LABEL_46;
  }
  if (v36)
  {
    if (v37)
    {
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_52;
    }
    outlined destroy of Locale.Currency(a1 + 136);
LABEL_46:
    long long v39 = *(_OWORD *)(a2 + 152);
    *uint64_t v34 = *v35;
    *(_OWORD *)(a1 + 152) = v39;
    goto LABEL_52;
  }
  if (!v37) {
    goto LABEL_43;
  }
LABEL_51:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_52:
  uint64_t v40 = (_OWORD *)(a1 + 168);
  uint64_t v41 = (_OWORD *)(a2 + 168);
  uint64_t v42 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v42)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.NumberingSystem(a1 + 168);
      long long v43 = *(_OWORD *)(a2 + 184);
      *uint64_t v40 = *v41;
      *(_OWORD *)(a1 + 184) = v43;
    }
  }
  else if (v42)
  {
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v44 = *(_OWORD *)(a2 + 184);
    *uint64_t v40 = *v41;
    *(_OWORD *)(a1 + 184) = v44;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  long long v45 = *(_OWORD *)(a2 + 216);
  long long v46 = *(_OWORD *)(a2 + 232);
  long long v47 = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v47;
  *(_OWORD *)(a1 + 232) = v46;
  *(_OWORD *)(a1 + 216) = v45;
  uint64_t v48 = *(void *)(a2 + 272);
  *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
  *(void *)(a1 + 272) = v48;
  *(unsigned char *)(a1 + 281) = *(unsigned char *)(a2 + 281);
  long long v49 = (_OWORD *)(a1 + 288);
  uint64_t v50 = (_OWORD *)(a2 + 288);
  uint64_t v51 = *(void *)(a2 + 296);
  if (*(void *)(a1 + 296))
  {
    if (v51)
    {
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = *(void *)(a2 + 312);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Locale.MeasurementSystem(a1 + 288);
      long long v52 = *(_OWORD *)(a2 + 304);
      *long long v49 = *v50;
      *(_OWORD *)(a1 + 304) = v52;
    }
  }
  else if (v51)
  {
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = *(void *)(a2 + 312);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v53 = *(_OWORD *)(a2 + 304);
    *long long v49 = *v50;
    *(_OWORD *)(a1 + 304) = v53;
  }
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  uint64_t v54 = (_OWORD *)(a1 + 328);
  uint64_t v55 = (_OWORD *)(a2 + 328);
  uint64_t v56 = *(void *)(a1 + 336);
  unint64_t v57 = *(void *)(a2 + 336);
  if (v56 == 1)
  {
    if (v57 <= 1)
    {
LABEL_68:
      long long v58 = *(_OWORD *)(a2 + 344);
      *uint64_t v54 = *v55;
      *(_OWORD *)(a1 + 344) = v58;
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  if (v57 == 1)
  {
    outlined destroy of Any?(a1 + 328, &demangling cache variable for type metadata for Locale.Region?);
    goto LABEL_71;
  }
  if (v56)
  {
    if (v57)
    {
      *(void *)(a1 + 328) = *(void *)(a2 + 328);
      *(void *)(a1 + 336) = *(void *)(a2 + 336);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 344) = *(void *)(a2 + 344);
      *(void *)(a1 + 352) = *(void *)(a2 + 352);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_77;
    }
    outlined destroy of Locale.Region(a1 + 328);
LABEL_71:
    long long v59 = *(_OWORD *)(a2 + 344);
    *uint64_t v54 = *v55;
    *(_OWORD *)(a1 + 344) = v59;
    goto LABEL_77;
  }
  if (!v57) {
    goto LABEL_68;
  }
LABEL_76:
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_77:
  uint64_t v60 = (_OWORD *)(a1 + 360);
  char v61 = (_OWORD *)(a2 + 360);
  uint64_t v62 = *(void *)(a1 + 368);
  unint64_t v63 = *(void *)(a2 + 368);
  if (v62 == 1)
  {
    if (v63 <= 1)
    {
LABEL_79:
      long long v64 = *(_OWORD *)(a2 + 376);
      *uint64_t v60 = *v61;
      *(_OWORD *)(a1 + 376) = v64;
      goto LABEL_88;
    }
    goto LABEL_87;
  }
  if (v63 == 1)
  {
    outlined destroy of Any?(a1 + 360, &demangling cache variable for type metadata for Locale.Subdivision?);
    goto LABEL_82;
  }
  if (v62)
  {
    if (v63)
    {
      *(void *)(a1 + 360) = *(void *)(a2 + 360);
      *(void *)(a1 + 368) = *(void *)(a2 + 368);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 376) = *(void *)(a2 + 376);
      *(void *)(a1 + 384) = *(void *)(a2 + 384);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_88;
    }
    outlined destroy of Locale.Subdivision(a1 + 360);
LABEL_82:
    long long v65 = *(_OWORD *)(a2 + 376);
    *uint64_t v60 = *v61;
    *(_OWORD *)(a1 + 376) = v65;
    goto LABEL_88;
  }
  if (!v63) {
    goto LABEL_79;
  }
LABEL_87:
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_88:
  uint64_t v66 = *(void *)(a2 + 392);
  if (*(void *)(a1 + 392) == 1)
  {
    if (v66 != 1)
    {
      uint64_t v67 = *(void *)(a2 + 400);
      *(void *)(a1 + 392) = v66;
      *(void *)(a1 + 400) = v67;
      swift_unknownObjectRetain();
      goto LABEL_95;
    }
    goto LABEL_93;
  }
  if (v66 == 1)
  {
    outlined destroy of Any?(a1 + 392, &demangling cache variable for type metadata for TimeZone?);
LABEL_93:
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    goto LABEL_95;
  }
  uint64_t v68 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = v66;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 400) = v68;
LABEL_95:
  uint64_t v69 = (_OWORD *)(a1 + 408);
  char v70 = (_OWORD *)(a2 + 408);
  uint64_t v71 = *(void *)(a1 + 416);
  unint64_t v72 = *(void *)(a2 + 416);
  if (v71 != 1)
  {
    if (v72 == 1)
    {
      outlined destroy of Any?(a1 + 408, &demangling cache variable for type metadata for Locale.Variant?);
    }
    else
    {
      if (!v71)
      {
        if (!v72) {
          goto LABEL_97;
        }
LABEL_105:
        *(void *)(a1 + 408) = *(void *)(a2 + 408);
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
        *(void *)(a1 + 424) = *(void *)(a2 + 424);
        *(void *)(a1 + 432) = *(void *)(a2 + 432);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_106;
      }
      if (v72)
      {
        *(void *)(a1 + 408) = *(void *)(a2 + 408);
        *(void *)(a1 + 416) = *(void *)(a2 + 416);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 424) = *(void *)(a2 + 424);
        *(void *)(a1 + 432) = *(void *)(a2 + 432);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_106;
      }
      outlined destroy of Locale.Variant(a1 + 408);
    }
    long long v74 = *(_OWORD *)(a2 + 424);
    *uint64_t v69 = *v70;
    *(_OWORD *)(a1 + 424) = v74;
    goto LABEL_106;
  }
  if (v72 > 1) {
    goto LABEL_105;
  }
LABEL_97:
  long long v73 = *(_OWORD *)(a2 + 424);
  *uint64_t v69 = *v70;
  *(_OWORD *)(a1 + 424) = v73;
LABEL_106:
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of Locale.Language.Components(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy544_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x220uLL);
}

uint64_t assignWithTake for _LocaleICU.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4 == 1) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5 == 1)
  {
    outlined destroy of Locale.Language.Components(a1);
LABEL_4:
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    long long v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    goto LABEL_5;
  }
  if (v4)
  {
    if (v5)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v11;
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Locale.LanguageCode(a1);
  }
  long long v16 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v16;
LABEL_21:
  if (*(void *)(a1 + 40))
  {
    uint64_t v17 = *(void *)(a2 + 40);
    if (v17)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v17;
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v18;
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
    outlined destroy of Locale.Script(a1 + 32);
  }
  long long v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v29;
LABEL_44:
  if (*(void *)(a1 + 72))
  {
    uint64_t v30 = *(void *)(a2 + 72);
    if (v30)
    {
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v30;
      swift_bridgeObjectRelease();
      uint64_t v31 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v31;
      swift_bridgeObjectRelease();
      goto LABEL_5;
    }
    outlined destroy of Locale.Region(a1 + 64);
  }
  long long v36 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v36;
LABEL_5:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  if (*(void *)(a1 + 112))
  {
    uint64_t v9 = *(void *)(a2 + 112);
    if (v9)
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = v9;
      swift_bridgeObjectRelease();
      uint64_t v10 = *(void *)(a2 + 128);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = v10;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of Locale.Collation(a1 + 104);
  }
  long long v12 = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = v12;
LABEL_13:
  uint64_t v13 = *(void *)(a1 + 144);
  uint64_t v14 = *(void *)(a2 + 144);
  if (v13 != 1)
  {
    if (v14 == 1)
    {
      outlined destroy of Any?(a1 + 136, &demangling cache variable for type metadata for Locale.Currency?);
    }
    else if (v13)
    {
      if (v14)
      {
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = v14;
        swift_bridgeObjectRelease();
        uint64_t v15 = *(void *)(a2 + 160);
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        *(void *)(a1 + 160) = v15;
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      outlined destroy of Locale.Currency(a1 + 136);
    }
  }
  long long v19 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = v19;
LABEL_26:
  if (*(void *)(a1 + 176))
  {
    uint64_t v20 = *(void *)(a2 + 176);
    if (v20)
    {
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = v20;
      swift_bridgeObjectRelease();
      uint64_t v21 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v21;
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
    outlined destroy of Locale.NumberingSystem(a1 + 168);
  }
  long long v22 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v22;
LABEL_31:
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_WORD *)(a1 + 280) = *(_WORD *)(a2 + 280);
  if (*(void *)(a1 + 296))
  {
    uint64_t v23 = *(void *)(a2 + 296);
    if (v23)
    {
      *(void *)(a1 + 288) = *(void *)(a2 + 288);
      *(void *)(a1 + 296) = v23;
      swift_bridgeObjectRelease();
      uint64_t v24 = *(void *)(a2 + 312);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      *(void *)(a1 + 312) = v24;
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    outlined destroy of Locale.MeasurementSystem(a1 + 288);
  }
  long long v25 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v25;
LABEL_36:
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  uint64_t v26 = *(void *)(a1 + 336);
  uint64_t v27 = *(void *)(a2 + 336);
  if (v26 != 1)
  {
    if (v27 == 1)
    {
      outlined destroy of Any?(a1 + 328, &demangling cache variable for type metadata for Locale.Region?);
    }
    else if (v26)
    {
      if (v27)
      {
        *(void *)(a1 + 328) = *(void *)(a2 + 328);
        *(void *)(a1 + 336) = v27;
        swift_bridgeObjectRelease();
        uint64_t v28 = *(void *)(a2 + 352);
        *(void *)(a1 + 344) = *(void *)(a2 + 344);
        *(void *)(a1 + 352) = v28;
        swift_bridgeObjectRelease();
        goto LABEL_49;
      }
      outlined destroy of Locale.Region(a1 + 328);
    }
  }
  long long v32 = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = v32;
LABEL_49:
  uint64_t v33 = *(void *)(a1 + 368);
  uint64_t v34 = *(void *)(a2 + 368);
  if (v33 != 1)
  {
    if (v34 == 1)
    {
      outlined destroy of Any?(a1 + 360, &demangling cache variable for type metadata for Locale.Subdivision?);
    }
    else if (v33)
    {
      if (v34)
      {
        *(void *)(a1 + 360) = *(void *)(a2 + 360);
        *(void *)(a1 + 368) = v34;
        swift_bridgeObjectRelease();
        uint64_t v35 = *(void *)(a2 + 384);
        *(void *)(a1 + 376) = *(void *)(a2 + 376);
        *(void *)(a1 + 384) = v35;
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
      outlined destroy of Locale.Subdivision(a1 + 360);
    }
  }
  long long v37 = *(_OWORD *)(a2 + 376);
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  *(_OWORD *)(a1 + 376) = v37;
LABEL_59:
  if (*(void *)(a1 + 392) == 1)
  {
LABEL_62:
    *(_OWORD *)(a1 + 392) = *(_OWORD *)(a2 + 392);
    goto LABEL_64;
  }
  uint64_t v38 = *(void *)(a2 + 392);
  if (v38 == 1)
  {
    outlined destroy of Any?(a1 + 392, &demangling cache variable for type metadata for TimeZone?);
    goto LABEL_62;
  }
  uint64_t v39 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = v38;
  swift_unknownObjectRelease();
  *(void *)(a1 + 400) = v39;
LABEL_64:
  uint64_t v40 = *(void *)(a1 + 416);
  uint64_t v41 = *(void *)(a2 + 416);
  if (v40 == 1)
  {
LABEL_71:
    long long v43 = *(_OWORD *)(a2 + 424);
    *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
    *(_OWORD *)(a1 + 424) = v43;
    goto LABEL_72;
  }
  if (v41 == 1)
  {
    outlined destroy of Any?(a1 + 408, &demangling cache variable for type metadata for Locale.Variant?);
    goto LABEL_71;
  }
  if (!v40) {
    goto LABEL_71;
  }
  if (!v41)
  {
    outlined destroy of Locale.Variant(a1 + 408);
    goto LABEL_71;
  }
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v41;
  swift_bridgeObjectRelease();
  uint64_t v42 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v42;
  swift_bridgeObjectRelease();
LABEL_72:
  uint64_t v44 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 448) = v44;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _LocaleICU.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 544)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 456);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LocaleICU.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 536) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 544) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 456) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 544) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LocaleICU.State and conformance _LocaleICU.State()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State;
  if (!lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleICU.State and conformance _LocaleICU.State);
  }
  return result;
}

uint64_t partial apply for closure #1 in _LocaleICU.variant.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.variant.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.subdivision.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.subdivision.getter(a1, a2);
}

void partial apply for closure #1 in _LocaleICU.timeZone.getter(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t outlined copy of TimeZone??(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t outlined consume of TimeZone??(uint64_t result)
{
  if (result != 1) {
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in _LocaleICU.collation.getter@<X0>(void *a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.collation.getter(a1, a2);
}

void partial apply for closure #1 in _LocaleICU.availableNumberingSystems.getter(void *a1@<X0>, void *a2@<X8>)
{
  closure #1 in _LocaleICU.availableNumberingSystems.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.numberingSystem.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.numberingSystem.getter(a1, v2, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currency.getter@<X0>(uint64_t a1@<X0>, Swift::String *a2@<X8>)
{
  return closure #1 in _LocaleICU.currency.getter(a1, a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.collationIdentifierDisplayName(for:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencySymbolDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.currencySymbolDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.currencyCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.currencyCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.variantCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.variantCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.scriptCodeDisplayName(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in _LocaleICU.scriptCodeDisplayName(for:)(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in _LocaleICU.identifierDisplayName(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in _LocaleICU.identifierDisplayName(for:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t outlined release of (Locale.Language.Components?, Locale.Language.Components?)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 120);
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 152);
  long long v11 = *(_OWORD *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 184);
  outlined consume of Locale.Language.Components?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), (void (*)(void))outlined consume of Locale.LanguageCode?);
  outlined consume of Locale.Language.Components?(v13, v12, v2, v3, v4, v5, v6, v7, v11, *((uint64_t *)&v11 + 1), v8, v9, (void (*)(void))outlined consume of Locale.LanguageCode?);
  return a1;
}

ValueMetadata *type metadata accessor for _LocaleICU.State.NumberFormattersBox()
{
  return &type metadata for _LocaleICU.State.NumberFormattersBox;
}

unint64_t lazy protocol witness table accessor for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox()
{
  unint64_t result = lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox;
  if (!lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LocaleICU.State.NumberFormattersBox and conformance _LocaleICU.State.NumberFormattersBox);
  }
  return result;
}

id @nonobjc NSProgress.__allocating_init(totalUnitCount:)(uint64_t a1)
{
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_progressWithTotalUnitCount_, a1);

  return v1;
}

uint64_t specialized _BridgedStoredNSError.errorUserInfo.getter(void *a1)
{
  uint64_t v1 = MEMORY[0x1E4FBC868];
  uint64_t v55 = MEMORY[0x1E4FBC868];
  id v2 = objc_msgSend(a1, sel_userInfo);
  if (v2)
  {
    uint64_t v3 = v2;
    swift_unknownObjectRetain();
    uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
    if (v4)
    {
      uint64_t v1 = v4;
LABEL_19:

      goto LABEL_20;
    }
    id v5 = objc_msgSend(v3, sel_count);
    if (!v5) {
      goto LABEL_19;
    }
    uint64_t v6 = (uint64_t)v5;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v1 = static _DictionaryStorage.allocate(capacity:)();
    uint64_t v7 = *(void **)(v1 + 48);
    uint64_t v8 = *(void *)(v1 + 56);
    swift_retain();
    uint64_t v9 = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v7, v8, v3, v6);
    if (v9 < 0 || v6 < v9) {
      goto LABEL_52;
    }
    *(void *)(v1 + 16) = v9;
    if (!v9)
    {
LABEL_18:
      swift_release();
      goto LABEL_19;
    }
    int64_t v10 = v9 - 1;
    uint64_t v11 = v1 + 64;
    while (1)
    {
      if ((*(void *)(v11 + (((unint64_t)v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10)) {
        goto LABEL_10;
      }
      long long v16 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v10);
      uint64_t v17 = *v16;
      uint64_t v18 = v16[1];
      swift_bridgeObjectRetain();
      unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18);
      char v21 = v20;
      swift_bridgeObjectRelease();
      if (v21)
      {
        swift_arrayDestroy();
        swift_arrayDestroy();
        uint64_t v22 = *(void *)(v1 + 16);
        BOOL v23 = __OFSUB__(v22, 1);
        uint64_t v24 = v22 - 1;
        if (v23) {
          goto LABEL_51;
        }
        *(void *)(v1 + 16) = v24;
        goto LABEL_10;
      }
      *(void *)(v11 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      if (v10 < (uint64_t)v19)
      {
        *(_OWORD *)(*(void *)(v1 + 48) + 16 * v19) = *(_OWORD *)(*(void *)(v1 + 48) + 16 * v10);
        uint64_t v12 = *(void *)(v1 + 56);
        uint64_t v13 = (_OWORD *)(v12 + 32 * v10);
        long long v14 = v13[1];
        uint64_t v15 = (_OWORD *)(v12 + 32 * v19);
        *uint64_t v15 = *v13;
        v15[1] = v14;
LABEL_10:
        if (--v10 < 0) {
          goto LABEL_18;
        }
      }
      else
      {
        if (v19 == v10) {
          goto LABEL_10;
        }
        uint64_t v25 = *(void *)(v1 + 48);
        uint64_t v26 = (uint64_t *)(v25 + 16 * v19);
        uint64_t v27 = (uint64_t *)(v25 + 16 * v10);
        uint64_t v28 = *v26;
        uint64_t v29 = v26[1];
        uint64_t v30 = v27[1];
        *uint64_t v26 = *v27;
        v26[1] = v30;
        *uint64_t v27 = v28;
        v27[1] = v29;
        uint64_t v31 = *(void *)(v1 + 56);
        long long v32 = (_OWORD *)(v31 + 32 * v19);
        uint64_t v33 = (_OWORD *)(v31 + 32 * v10);
        outlined init with take of Any(v32, &v53);
        outlined init with take of Any(v33, v32);
        outlined init with take of Any(&v53, v33);
        if (v10 < 0) {
          goto LABEL_18;
        }
      }
    }
  }
LABEL_20:
  int64_t v34 = 0;
  uint64_t v35 = v1 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  unint64_t v38 = v37 & *(void *)(v1 + 64);
  int64_t v39 = (unint64_t)(v36 + 63) >> 6;
  if (!v38) {
    goto LABEL_27;
  }
LABEL_25:
  unint64_t v41 = __clz(__rbit64(v38));
  v38 &= v38 - 1;
  unint64_t v42 = v41 | (v34 << 6);
LABEL_26:
  uint64_t v43 = *(void *)(v1 + 56);
  uint64_t v44 = (void *)(*(void *)(v1 + 48) + 16 * v42);
  uint64_t v45 = v44[1];
  *(void *)&long long v51 = *v44;
  *((void *)&v51 + 1) = v45;
  outlined init with copy of Any(v43 + 32 * v42, (uint64_t)v52);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with take of (key: String, value: Any)?((uint64_t)&v51, (uint64_t)&v53);
    uint64_t v49 = *((void *)&v53 + 1);
    if (!*((void *)&v53 + 1)) {
      break;
    }
    uint64_t v40 = v53;
    outlined init with take of Any(&v54, &v51);
    specialized Dictionary.subscript.setter((uint64_t)&v51, v40, v49);
    if (v38) {
      goto LABEL_25;
    }
LABEL_27:
    int64_t v46 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x181DB8AD0);
    }
    if (v46 < v39)
    {
      unint64_t v47 = *(void *)(v35 + 8 * v46);
      if (v47) {
        goto LABEL_30;
      }
      int64_t v48 = v34 + 2;
      ++v34;
      if (v46 + 1 < v39)
      {
        unint64_t v47 = *(void *)(v35 + 8 * v48);
        if (v47) {
          goto LABEL_33;
        }
        int64_t v34 = v46 + 1;
        if (v46 + 2 < v39)
        {
          unint64_t v47 = *(void *)(v35 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2;
            goto LABEL_30;
          }
          int64_t v34 = v46 + 2;
          if (v46 + 3 < v39)
          {
            unint64_t v47 = *(void *)(v35 + 8 * (v46 + 3));
            if (v47)
            {
              v46 += 3;
              goto LABEL_30;
            }
            int64_t v48 = v46 + 4;
            int64_t v34 = v46 + 3;
            if (v46 + 4 < v39)
            {
              unint64_t v47 = *(void *)(v35 + 8 * v48);
              if (v47)
              {
LABEL_33:
                int64_t v46 = v48;
LABEL_30:
                unint64_t v38 = (v47 - 1) & v47;
                unint64_t v42 = __clz(__rbit64(v47)) + (v46 << 6);
                int64_t v34 = v46;
                goto LABEL_26;
              }
              while (1)
              {
                int64_t v46 = v48 + 1;
                if (__OFADD__(v48, 1)) {
                  goto LABEL_53;
                }
                if (v46 >= v39) {
                  break;
                }
                unint64_t v47 = *(void *)(v35 + 8 * v46);
                ++v48;
                if (v47) {
                  goto LABEL_30;
                }
              }
              int64_t v34 = v39 - 1;
            }
          }
        }
      }
    }
    unint64_t v38 = 0;
    memset(v52, 0, sizeof(v52));
    long long v51 = 0u;
  }
  swift_release();
  return v55;
}

uint64_t @objc static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, int a7)
{
  id v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v13 = v12;
  id v14 = a4;
  id v15 = a6;
  id v16 = specialized Data.init(referencing:)(v15);
  unint64_t v18 = v17;

  specialized static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)((uint64_t)v11, v13, v14, a5, (uint64_t)v16, v18, a7);
  outlined consume of Data._Representation((uint64_t)v16, v18);
  swift_bridgeObjectRelease();
  return 1;
}

void closure #1 in closure #1 in closure #3 in closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, const std::__fs::filesystem::path *a3, uint64_t *a4, uint64_t a5, unint64_t a6, void *a7, unint64_t a8, uint64_t a9, char a10)
{
  if (a1)
  {
    unint64_t v12 = v10;
    unlink((const char *)a1);
    rename(a2, a1, v21);
    if (!v23)
    {
      rename(a3, a2, v22);
      if (!v24)
      {
        unlink((const char *)a1);
        cleanupTemporaryDirectory(at:)(a5, a6);
        return;
      }
    }
    uint64_t v103 = a7;
    LODWORD(v11) = MEMORY[0x185301870]();
    unlink((const char *)a1);
    unlink((const char *)a3);
    uint64_t v25 = *a4;
    unint64_t v26 = a4[1];
    swift_bridgeObjectRetain();
    cleanupTemporaryDirectory(at:)(v25, v26);
    swift_bridgeObjectRelease();
    cleanupTemporaryDirectory(at:)(a5, a6);
    if ((a10 & 1) == 0)
    {
      uint64_t v27 = 4;
      uint64_t v28 = (uint64_t)v103;
      switch((int)v11)
      {
        case 1:
        case 13:
          uint64_t v27 = 513;
          goto LABEL_28;
        case 2:
          goto LABEL_28;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 14:
        case 15:
        case 16:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 29:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
          goto LABEL_23;
        case 17:
          uint64_t v27 = 516;
          goto LABEL_28;
        case 28:
        case 69:
          uint64_t v27 = 640;
          goto LABEL_28;
        case 30:
          uint64_t v27 = 642;
          goto LABEL_28;
        case 63:
          uint64_t v27 = 514;
          goto LABEL_28;
        default:
          uint64_t v28 = (uint64_t)v103;
          if (v11 == 102)
          {
            id v42 = 0;
            uint64_t v27 = 512;
LABEL_33:
            swift_bridgeObjectRetain();
            specialized CocoaError.init<A>(_:path:underlying:variant:source:destination:)((uint64_t (*)(void))v27, v28, a8, v42, 0, 0, 0, 0, &v106, 0, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type POSIXError and conformance POSIXError, (uint64_t)&type metadata for POSIXError, (uint64_t (*)(void *))closure #1 in Sequence<>.contains(_:)specialized partial apply, (uint64_t (*)(void *))partial apply for specialized closure #1 in Sequence<>.contains(_:), (void *(*)(void *__return_ptr, void *, uint64_t))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_SS_TG5TA_0, (void *(*)(void *__return_ptr, void, void))_sSy10FoundationE21addingPercentEncoding33_A90579D1FA072CB135F95EF00BA4645015forURLComponentSSAA0M3SetACLLV_tFSSSRys5UInt8VGXEfU_Ss_TG5TA_0, (uint64_t (*)(void))partial apply for closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:), partial apply for closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:),
              (uint64_t)closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply,
              (uint64_t (*)(void))closure #1 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply,
              (uint64_t (*)(uint64_t, void))closure #2 in static UIDNAHookICU.IDNACodedHostUTF16(_:encodeToASCII:)partial apply);
            goto LABEL_71;
          }
LABEL_23:
          uint64_t v27 = 512;
LABEL_28:
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0) {
            goto LABEL_74;
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v45 = (int)POSIXErrorCode.rawValue.getter();
          id v46 = objc_allocWithZone((Class)NSError);
          uint64_t v47 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v42 = objc_msgSend(v46, sel_initWithDomain_code_userInfo_, v47, v45, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v48 = objc_msgSend(v42, sel_domain);
          id v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
          id v11 = v50;

          if (v49 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v11 == v51)
          {
            swift_bridgeObjectRelease_n();
            goto LABEL_33;
          }
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v52) {
            goto LABEL_33;
          }
          __break(1u);
          break;
      }
      goto LABEL_73;
    }
LABEL_13:
    uint64_t v39 = a9;
    uint64_t v40 = v103;
    uint64_t v41 = 4;
    switch((int)v11)
    {
      case 1:
      case 13:
        uint64_t v41 = 513;
        goto LABEL_37;
      case 2:
        goto LABEL_37;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 29:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
        goto LABEL_24;
      case 17:
        uint64_t v41 = 516;
        goto LABEL_37;
      case 28:
      case 69:
        uint64_t v41 = 640;
        goto LABEL_37;
      case 30:
        uint64_t v41 = 642;
        goto LABEL_37;
      case 63:
        uint64_t v41 = 514;
        goto LABEL_37;
      default:
        if (v11 == 102)
        {
          swift_retain_n();
          uint64_t v43 = v103;
          swift_retain_n();
          id v44 = v43;
          id v11 = 0;
          uint64_t v102 = 512;
        }
        else
        {
LABEL_24:
          uint64_t v41 = 512;
LABEL_37:
          uint64_t v101 = v12;
          uint64_t v102 = v41;
          swift_retain_n();
          long long v53 = v103;
          swift_retain_n();
          id v54 = v53;
          if ((POSIXErrorCode.init(rawValue:)() & 0x100000000) != 0)
          {
LABEL_74:
            _StringGuts.grow(_:)(22);
            swift_bridgeObjectRelease();
            v106._uint64_t countAndFlagsBits = 0xD000000000000014;
            v106._unint64_t object = (void *)0x80000001823A9780;
            LODWORD(v104) = v11;
            v96._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v96);
            swift_bridgeObjectRelease();
            LODWORD(v99) = 0;
            uint64_t v98 = 73;
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            JUMPOUT(0x181DBAF28);
          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain");
          uint64_t v55 = (int)POSIXErrorCode.rawValue.getter();
          id v56 = objc_allocWithZone((Class)NSError);
          uint64_t v57 = String._bridgeToObjectiveCImpl()();
          swift_bridgeObjectRelease();
          id v11 = objc_msgSend(v56, sel_initWithDomain_code_userInfo_, v57, v55, _NativeDictionary.bridged()());
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          id v58 = objc_msgSend(v11, sel_domain);
          id v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v58);
          uint64_t v61 = v60;

          if (v59 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSPOSIXErrorDomain") && v61 == v62)
          {
            swift_bridgeObjectRelease_n();
          }
          else
          {
            char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v63 & 1) == 0)
            {
LABEL_73:
              __break(1u);
              goto LABEL_74;
            }
          }
        }
        long long v64 = v103;
        swift_retain();
        swift_retain();
        if (_foundation_swift_url_feature_enabled())
        {
          uint64_t v107 = a9;
          id v65 = v64;
          swift_retain();
          uint64_t v100 = a9;
          swift_retain();
          Swift::String v66 = URL.path(percentEncoded:)(1);
          uint64_t countAndFlagsBits = v66._countAndFlagsBits;
          Swift::String v106 = v66;
          swift_bridgeObjectRetain();
          uint64_t v101 = v64;
          if (String.count.getter() <= 1)
          {
            unint64_t object = (unint64_t)v66._object;
          }
          else
          {
            unint64_t object = (unint64_t)v66._object;
            if ((specialized BidirectionalCollection.last.getter(v66._countAndFlagsBits, (unint64_t)v66._object) & 0x1FF) == 0x2F)
            {
              specialized RangeReplaceableCollection<>.popLast()();
              swift_bridgeObjectRelease();
              uint64_t countAndFlagsBits = v106._countAndFlagsBits;
              unint64_t object = (unint64_t)v106._object;
            }
          }
          uint64_t v104 = Set.init(minimumCapacity:)();
          uint64_t v81 = specialized Set._Variant.insert(_:)(&v108, 0x2FuLL);
          uint64_t v82 = v104;
          uint64_t v83 = HIBYTE(object) & 0xF;
          if ((object & 0x2000000000000000) == 0) {
            uint64_t v83 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
          }
          if (v83)
          {
            uint64_t v104 = countAndFlagsBits;
            unint64_t v105 = object;
            MEMORY[0x1F4188790](v81);
            uint64_t v98 = v84;
            uint64_t v99 = v82;
            swift_bridgeObjectRetain();
            specialized String.UTF8View.withContiguousStorageIfAvailable<A>(_:)((void *(*)(long long *__return_ptr, void *, uint64_t))closure #1 in StringProtocol.removingURLPercentEncoding(excluding:)specialized partial apply, (uint64_t)&v97, countAndFlagsBits, object);
            if (v85 == 1)
            {
              Swift::Int v86 = v104;
              unint64_t v87 = v105;
              swift_bridgeObjectRetain();
              specialized StringProtocol.removingURLPercentEncoding<A>(utf8Buffer:excluding:)(v86, v87, v82);
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v40 = v103;
            long long v64 = v101;
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v40 = v103;
            long long v64 = v101;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v39 = v100;
          outlined consume of PathOrURL(v40, a8, v100, 1);
          outlined consume of PathOrURL(v40, a8, v39, 1);
        }
        else
        {
          id v69 = objc_msgSend(v64, sel__parameterString);
          if (v69)
          {
            char v70 = v69;
            id v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
            long long v73 = v72;

            if (getEnumTag for _DarwinSearchPathsSequence.Iterator.State()
              && (id v74 = objc_msgSend(v64, sel_path)) != 0)
            {
              uint64_t v75 = v74;
              uint64_t v101 = v64;
              id v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
              uint64_t v78 = v77;

              v106._uint64_t countAndFlagsBits = (uint64_t)v76;
              v106._unint64_t object = v78;
              swift_bridgeObjectRetain();
              v79._uint64_t countAndFlagsBits = 59;
              v79._unint64_t object = (void *)0xE100000000000000;
              String.append(_:)(v79);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              v80._uint64_t countAndFlagsBits = (uint64_t)v71;
              v80._unint64_t object = v73;
              String.append(_:)(v80);
              swift_bridgeObjectRelease();
              long long v64 = v101;
            }
            else
            {
              v106._uint64_t countAndFlagsBits = 59;
              v106._unint64_t object = (void *)0xE100000000000000;
              v88._uint64_t countAndFlagsBits = (uint64_t)v71;
              v88._unint64_t object = v73;
              String.append(_:)(v88);
            }
            swift_bridgeObjectRelease();
            outlined consume of PathOrURL(v103, a8, a9, 1);
          }
          else
          {
            uint64_t v89 = v64;
            id v90 = objc_msgSend(v64, sel_path);
            if (v90)
            {
              uint64_t v91 = v90;
              static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
            }
            outlined consume of PathOrURL(v103, a8, a9, 1);
            long long v64 = v89;
          }
        }
        uint64_t v92 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v93 = v64;
        outlined consume of PathOrURL(v40, a8, v39, 1);
        if (v11)
        {
          v106._uint64_t countAndFlagsBits = (uint64_t)v11;
          lazy protocol witness table accessor for type POSIXError and conformance POSIXError();
          id v11 = v11;
          if (_getErrorEmbeddedNSError<A>(_:)())
          {
          }
          else
          {
            swift_allocError();
            *uint64_t v95 = v11;
          }
          uint64_t v94 = (void *)_swift_stdlib_bridgeErrorToNSError();
        }
        else
        {
          uint64_t v94 = 0;
        }
        objc_msgSend(self, sel__cocoaErrorWithCode_path_url_underlying_variant_source_destination_, v102, v92, v93, v94, 0, 0, 0);

        swift_unknownObjectRelease();
        outlined consume of PathOrURL(v40, a8, v39, 1);
        goto LABEL_71;
    }
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
  id v29 = objc_allocWithZone((Class)NSError);
  uint64_t v30 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  id v31 = objc_msgSend(v29, sel_initWithDomain_code_userInfo_, v30, 514, _NativeDictionary.bridged()());
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  id v32 = objc_msgSend(v31, sel_domain);
  id v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
  uint64_t v35 = v34;

  if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v35 == v36)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    a8 = v36;
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v38 & 1) == 0)
    {
      __break(1u);
      goto LABEL_13;
    }
  }
LABEL_71:
  swift_willThrow();
}

uint64_t specialized RandomAccessCollection<>.distance(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0;
  }
  if (a1 < 0 || v4 < a1)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (a2 < 0 || v4 < a2)
  {
LABEL_9:
    __break(1u);
    JUMPOUT(0x181DBB184);
  }
  return a2 - a1;
}

void specialized static NSData._writeData(toPath:data:options:stringEncodingAttributeData:reportProgress:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, unint64_t a6, int a7)
{
  int v40 = a7;
  uint64_t v41 = a1;
  uint64_t v12 = MEMORY[0x185306FE0]();
  id v13 = a3;
  id v14 = objc_msgSend(v13, sel_bytes);
  id v15 = v13;
  int64_t v16 = (int64_t)objc_msgSend(v15, sel_length);
  if (((unint64_t)objc_msgSend(v15, sel_length) & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  id v17 = objc_msgSend(v15, sel_length);

  if (v16 < 0 || (uint64_t)v17 < v16) {
    goto LABEL_14;
  }
  uint64_t v39 = (void *)v12;
  if (v14) {
    unint64_t v18 = (unint64_t)v14 + v16;
  }
  else {
    unint64_t v18 = 0;
  }
  id v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"com.apple.TextEncoding");
  uint64_t v21 = v20;
  id v44 = v19;
  uint64_t v45 = v20;
  uint64_t v46 = a5;
  unint64_t v47 = a6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Data>);
  uint64_t v22 = (void *)static _DictionaryStorage.allocate(capacity:)();
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a5, a6);
  swift_bridgeObjectRetain();
  outlined copy of Data._Representation(a5, a6);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19, v21);
  if (v24) {
    goto LABEL_15;
  }
  v22[(v23 >> 6) + 8] |= 1 << v23;
  uint64_t v25 = (void *)(v22[6] + 16 * v23);
  *uint64_t v25 = v19;
  v25[1] = v21;
  unint64_t v26 = (uint64_t *)(v22[7] + 16 * v23);
  *unint64_t v26 = a5;
  v26[1] = a6;
  uint64_t v27 = v22[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    return;
  }
  v22[2] = v29;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Data));
  uint64_t v30 = swift_arrayDestroy();
  if (a4)
  {
    MEMORY[0x1F4188790](v30);
    v32[2] = v41;
    v32[3] = a2;
    v32[4] = 0;
    char v33 = 0;
    uint64_t v34 = a4;
    char v35 = v40 & 1;
    id v36 = v14;
    unint64_t v37 = v18;
    char v38 = v22;
    swift_bridgeObjectRetain();
    specialized String.withFileSystemRepresentation<A>(_:)((uint64_t (*)(char *))partial apply for closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:), (uint64_t)v32, v41, a2);
    id v31 = v39;
    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v42[0] = v41;
    v42[1] = a2;
    v42[2] = 0;
    char v43 = 0;
    writeToFileNoAux(path:buffer:options:attributes:reportProgress:)((uint64_t)v42, (uint64_t)v14, v18, a4, v22, v40 & 1);
    id v31 = v39;
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t partial apply for closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(const char *a1)
{
  return closure #1 in writeToFileAux(path:buffer:options:attributes:reportProgress:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(unsigned char *)(v1 + 40), *(void **)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(void **)(v1 + 64), *(void *)(v1 + 72), *(void **)(v1 + 80));
}

void static URLError.Code.unknown.getter(void *a1@<X8>)
{
  *a1 = -1;
}

id URLError._nsError.getter()
{
  return *v0;
}

void __swiftcall URLError.init(_nsError:)(Foundation::URLError *__return_ptr retstr, NSError *_nsError)
{
  uint64_t v4 = [(NSError *)_nsError domain];
  id v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain") && v7 == v8) {
    goto LABEL_7;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_bridgeObjectRelease_n();
  }
  retstr->_nsError.super.Class isa = (Class)_nsError;
}

id static URLError.errorDomain.getter()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
}

uint64_t URLError.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t URLError.Code.rawValue.getter()
{
  return *(void *)v0;
}

Foundation::URLError::Code __swiftcall URLError.Code.init(rawValue:)(Foundation::URLError::Code rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

id protocol witness for static CustomNSError.errorDomain.getter in conformance URLError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSURLErrorDomain");
}

void static URLError.Code.cancelled.getter(void *a1@<X8>)
{
  *a1 = -999;
}

void static URLError.Code.badURL.getter(void *a1@<X8>)
{
  *a1 = -1000;
}

void static URLError.Code.timedOut.getter(void *a1@<X8>)
{
  *a1 = -1001;
}

Foundation::URLError::NetworkUnavailableReason_optional __swiftcall URLError.NetworkUnavailableReason.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (Foundation::URLError::NetworkUnavailableReason_optional)rawValue;
}

uint64_t URLError.NetworkUnavailableReason.rawValue.getter()
{
  return *v0;
}

Foundation::URLError::NetworkUnavailableReason_optional protocol witness for RawRepresentable.init(rawValue:) in conformance URLError.NetworkUnavailableReason(Swift::Int *a1)
{
  return URLError.NetworkUnavailableReason.init(rawValue:)(*a1);
}

uint64_t URLError.failingURL.getter@<X0>(void *a1@<X8>)
{
  id v2 = *v1;
  id v3 = *v1;
  id v64 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }
  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }
  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result) {
    goto LABEL_69;
  }
  *(void *)(v6 + 16) = result;
  if (result)
  {
    uint64_t v12 = result - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v13 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12)) {
          goto LABEL_10;
        }
        unint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return result;
        }
        *(void *)(v6 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        id v15 = (_OWORD *)(v14 + 32 * v12);
        long long v16 = v15[1];
        id v17 = (_OWORD *)(v14 + 32 * v21);
        *id v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }
      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      BOOL v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      uint64_t *v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      uint64_t v34 = (_OWORD *)(v33 + 32 * v21);
      char v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
    }
    while ((v12 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v65 = v6 + 64;
  uint64_t v37 = -1 << *(unsigned char *)(v6 + 32);
  if (-v37 < 64) {
    uint64_t v38 = ~(-1 << -(char)v37);
  }
  else {
    uint64_t v38 = -1;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  int64_t v66 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v41 = 0;
  while (1)
  {
    if (v39)
    {
      unint64_t v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }
    int64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v46 >= v66) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v65 + 8 * v46);
    int64_t v48 = v41 + 1;
    if (!v47)
    {
      int64_t v48 = v41 + 2;
      if (v41 + 2 >= v66) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v65 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v41 + 3;
        if (v41 + 3 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v41 + 4;
          if (v41 + 4 >= v66) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v65 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v39 = (v47 - 1) & v47;
    unint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    int64_t v41 = v48;
LABEL_48:
    uint64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    uint64_t v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v78);
    *(void *)&long long v77 = v52;
    *((void *)&v77 + 1) = v51;
    v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(void *)&v75[0] = v52;
    *((void *)&v75[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    long long v71 = v67;
    long long v72 = v68;
    uint64_t v73 = v69;
    outlined init with take of Any(v70, v74);
    long long v67 = v71;
    long long v68 = v72;
    uint64_t v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1 << *(unsigned char *)(v36 + 32);
    unint64_t v54 = result & ~v53;
    unint64_t v55 = v54 >> 6;
    if (((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      unint64_t v42 = __clz(__rbit64((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v56 = 0;
      unint64_t v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }
        BOOL v58 = v55 == v57;
        if (v55 == v57) {
          unint64_t v55 = 0;
        }
        v56 |= v58;
        uint64_t v59 = *(void *)(v40 + 8 * v55);
      }
      while (v59 == -1);
      unint64_t v42 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    uint64_t v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)uint64_t v43 = v67;
    *(_OWORD *)(v43 + 16) = v68;
    *(void *)(v43 + 32) = v69;
    uint64_t result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }
  int64_t v49 = v41 + 5;
  if (v41 + 5 < v66)
  {
    unint64_t v47 = *(void *)(v65 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        int64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1)) {
          goto LABEL_67;
        }
        if (v48 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }
    int64_t v48 = v41 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  uint64_t v60 = @"NSErrorFailingURLKey";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v79);
  }
  else
  {
    long long v79 = 0u;
    long long v80 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((void *)&v80 + 1))
  {
    uint64_t result = swift_dynamicCast();
    if (result) {
      return result;
    }
  }
  else
  {
    uint64_t result = outlined destroy of Any?((uint64_t)&v79);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t URLError.failureURLString.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }
  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }
  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_70;
  }
  *(void *)(v5 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v12 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
          goto LABEL_10;
        }
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          return result;
        }
        *(void *)(v5 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        long long v15 = v14[1];
        long long v16 = (_OWORD *)(v13 + 32 * v20);
        *long long v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }
      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      BOOL v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      uint64_t *v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      uint64_t v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v63 = v5 + 64;
  uint64_t v36 = -1 << *(unsigned char *)(v5 + 32);
  if (-v36 < 64) {
    uint64_t v37 = ~(-1 << -(char)v36);
  }
  else {
    uint64_t v37 = -1;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  int64_t v64 = (unint64_t)(63 - v36) >> 6;
  uint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v40 = 0;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }
    int64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_67:
      __break(1u);
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    int64_t v47 = v40 + 1;
    if (!v46)
    {
      int64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v38 = (v46 - 1) & v46;
    unint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    int64_t v40 = v47;
LABEL_48:
    int64_t v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    uint64_t v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&long long v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    long long v69 = v65;
    long long v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    long long v65 = v69;
    long long v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1 << *(unsigned char *)(v35 + 32);
    unint64_t v53 = result & ~v52;
    unint64_t v54 = v53 >> 6;
    if (((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      unint64_t v41 = __clz(__rbit64((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v55 = 0;
      unint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_67;
        }
        BOOL v57 = v54 == v56;
        if (v54 == v56) {
          unint64_t v54 = 0;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }
      while (v58 == -1);
      unint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }
  int64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    unint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        int64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_68;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }
    int64_t v47 = v40 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&long long v65 = @"NSErrorFailingURLStringKey";
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  uint64_t v59 = @"NSErrorFailingURLStringKey";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if (v61)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v65);
    }
    else
    {
      long long v65 = 0u;
      long long v66 = 0u;
    }
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v66 + 1))
  {
    if (swift_dynamicCast()) {
      return v75;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v65);
    return 0;
  }
}

uint64_t URLError.failureURLPeerTrust.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  id v62 = v1;
  id v3 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v3)
  {
LABEL_22:
    uint64_t v5 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v35 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v4 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v4)
  {
    uint64_t v5 = v4;
    goto LABEL_19;
  }
  id v6 = objc_msgSend(v3, sel_count);
  if (!v6)
  {

    goto LABEL_22;
  }
  uint64_t v7 = (uint64_t)v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v5 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = *(void **)(v5 + 48);
  uint64_t v9 = *(void *)(v5 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v8, v9, v3, v7);
  if (result < 0 || v7 < result) {
    goto LABEL_68;
  }
  *(void *)(v5 + 16) = result;
  if (result)
  {
    uint64_t v11 = result - 1;
    uint64_t v12 = v5 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v12 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11)) {
          goto LABEL_10;
        }
        id v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[1];
        swift_bridgeObjectRetain();
        unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19);
        char v22 = v21;
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v23 = *(void *)(v5 + 16);
        BOOL v24 = __OFSUB__(v23, 1);
        uint64_t v25 = v23 - 1;
        if (v24)
        {
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
          return result;
        }
        *(void *)(v5 + 16) = v25;
LABEL_10:
        if (--v11 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      if (v11 < (uint64_t)v20)
      {
        *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20) = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v11);
        uint64_t v13 = *(void *)(v5 + 56);
        uint64_t v14 = (_OWORD *)(v13 + 32 * v11);
        long long v15 = v14[1];
        long long v16 = (_OWORD *)(v13 + 32 * v20);
        *long long v16 = *v14;
        v16[1] = v15;
        goto LABEL_10;
      }
      if (v20 == v11) {
        goto LABEL_10;
      }
      uint64_t v26 = *(void *)(v5 + 48);
      uint64_t v27 = (uint64_t *)(v26 + 16 * v20);
      BOOL v28 = (uint64_t *)(v26 + 16 * v11);
      uint64_t v29 = *v27;
      uint64_t v30 = v27[1];
      uint64_t v31 = v28[1];
      *uint64_t v27 = *v28;
      v27[1] = v31;
      uint64_t *v28 = v29;
      v28[1] = v30;
      uint64_t v32 = *(void *)(v5 + 56);
      uint64_t v33 = (_OWORD *)(v32 + 32 * v20);
      uint64_t v34 = (_OWORD *)(v32 + 32 * v11);
      outlined init with take of Any(v33, &v69);
      outlined init with take of Any(v34, v33);
      outlined init with take of Any(&v69, v34);
    }
    while ((v11 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v5 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v35 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v63 = v5 + 64;
  uint64_t v36 = -1 << *(unsigned char *)(v5 + 32);
  if (-v36 < 64) {
    uint64_t v37 = ~(-1 << -(char)v36);
  }
  else {
    uint64_t v37 = -1;
  }
  unint64_t v38 = v37 & *(void *)(v5 + 64);
  int64_t v64 = (unint64_t)(63 - v36) >> 6;
  uint64_t v39 = v35 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v40 = 0;
  while (1)
  {
    if (v38)
    {
      unint64_t v43 = __clz(__rbit64(v38));
      v38 &= v38 - 1;
      unint64_t v44 = v43 | (v40 << 6);
      goto LABEL_48;
    }
    int64_t v45 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    if (v45 >= v64) {
      goto LABEL_57;
    }
    unint64_t v46 = *(void *)(v63 + 8 * v45);
    int64_t v47 = v40 + 1;
    if (!v46)
    {
      int64_t v47 = v40 + 2;
      if (v40 + 2 >= v64) {
        goto LABEL_57;
      }
      unint64_t v46 = *(void *)(v63 + 8 * v47);
      if (!v46)
      {
        int64_t v47 = v40 + 3;
        if (v40 + 3 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        if (!v46)
        {
          int64_t v47 = v40 + 4;
          if (v40 + 4 >= v64) {
            goto LABEL_57;
          }
          unint64_t v46 = *(void *)(v63 + 8 * v47);
          if (!v46) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v38 = (v46 - 1) & v46;
    unint64_t v44 = __clz(__rbit64(v46)) + (v47 << 6);
    int64_t v40 = v47;
LABEL_48:
    int64_t v49 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v44);
    uint64_t v51 = *v49;
    uint64_t v50 = v49[1];
    outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v44, (uint64_t)v76);
    *(void *)&long long v75 = v51;
    *((void *)&v75 + 1) = v50;
    v73[2] = v75;
    v74[0] = v76[0];
    v74[1] = v76[1];
    *(void *)&v73[0] = v51;
    *((void *)&v73[0] + 1) = v50;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v74, v68);
    long long v69 = v65;
    long long v70 = v66;
    uint64_t v71 = v67;
    outlined init with take of Any(v68, v72);
    long long v65 = v69;
    long long v66 = v70;
    uint64_t v67 = v71;
    outlined init with take of Any(v72, v73);
    outlined init with take of Any(v73, &v69);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v35 + 40));
    uint64_t v52 = -1 << *(unsigned char *)(v35 + 32);
    unint64_t v53 = result & ~v52;
    unint64_t v54 = v53 >> 6;
    if (((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6))) != 0)
    {
      unint64_t v41 = __clz(__rbit64((-1 << v53) & ~*(void *)(v39 + 8 * (v53 >> 6)))) | v53 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v55 = 0;
      unint64_t v56 = (unint64_t)(63 - v52) >> 6;
      do
      {
        if (++v54 == v56 && (v55 & 1) != 0)
        {
          __break(1u);
          goto LABEL_65;
        }
        BOOL v57 = v54 == v56;
        if (v54 == v56) {
          unint64_t v54 = 0;
        }
        v55 |= v57;
        uint64_t v58 = *(void *)(v39 + 8 * v54);
      }
      while (v58 == -1);
      unint64_t v41 = __clz(__rbit64(~v58)) + (v54 << 6);
    }
    *(void *)(v39 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    uint64_t v42 = *(void *)(v35 + 48) + 40 * v41;
    *(_OWORD *)uint64_t v42 = v65;
    *(_OWORD *)(v42 + 16) = v66;
    *(void *)(v42 + 32) = v67;
    uint64_t result = (uint64_t)outlined init with take of Any(&v69, (_OWORD *)(*(void *)(v35 + 56) + 32 * v41));
    ++*(void *)(v35 + 16);
  }
  int64_t v48 = v40 + 5;
  if (v40 + 5 < v64)
  {
    unint64_t v46 = *(void *)(v63 + 8 * v48);
    if (!v46)
    {
      while (1)
      {
        int64_t v47 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_66;
        }
        if (v47 >= v64) {
          goto LABEL_57;
        }
        unint64_t v46 = *(void *)(v63 + 8 * v47);
        ++v48;
        if (v46) {
          goto LABEL_47;
        }
      }
    }
    int64_t v47 = v40 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&long long v65 = @"NSURLErrorFailingURLPeerTrustErrorKey";
  type metadata accessor for NSString();
  lazy protocol witness table accessor for type NSString and conformance NSObject();
  uint64_t v59 = @"NSURLErrorFailingURLPeerTrustErrorKey";
  AnyHashable.init<A>(_:)();
  if (*(void *)(v35 + 16))
  {
    unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v69);
    if (v61)
    {
      outlined init with copy of Any(*(void *)(v35 + 56) + 32 * v60, (uint64_t)&v75);
    }
    else
    {
      long long v75 = 0u;
      v76[0] = 0u;
    }
  }
  else
  {
    long long v75 = 0u;
    v76[0] = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v69);
  if (*((void *)&v76[0] + 1))
  {
    outlined init with take of Any(&v75, &v65);
    outlined init with take of Any(&v65, &v69);
    type metadata accessor for SecTrustRef(0);
    swift_dynamicCast();
    return v75;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v75);
    return 0;
  }
}

uint64_t URLError.backgroundTaskCancelledReason.getter@<X0>(char *a1@<X8>)
{
  return URLError.backgroundTaskCancelledReason.getter((void **)&NSURLErrorBackgroundTaskCancelledReasonKey, a1);
}

uint64_t URLError.networkUnavailableReason.getter@<X0>(char *a1@<X8>)
{
  return URLError.backgroundTaskCancelledReason.getter((void **)&NSURLErrorNetworkUnavailableReasonKey, a1);
}

uint64_t URLError.backgroundTaskCancelledReason.getter@<X0>(void **a1@<X0>, char *a2@<X8>)
{
  id v3 = *v2;
  id v4 = *v2;
  id v66 = v3;
  id v5 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v5)
  {
LABEL_22:
    uint64_t v7 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v37 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v6 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v6)
  {
    uint64_t v7 = v6;
    goto LABEL_19;
  }
  id v8 = objc_msgSend(v5, sel_count);
  if (!v8)
  {

    goto LABEL_22;
  }
  uint64_t v9 = (uint64_t)v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v10 = *(void **)(v7 + 48);
  uint64_t v11 = *(void *)(v7 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v10, v11, v5, v9);
  if (result < 0 || v9 < result) {
    goto LABEL_73;
  }
  *(void *)(v7 + 16) = result;
  if (result)
  {
    uint64_t v13 = result - 1;
    uint64_t v14 = v7 + 64;
    while (1)
    {
      if ((*(void *)(v14 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13)) {
        goto LABEL_10;
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v13);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      swift_bridgeObjectRetain();
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
      char v24 = v23;
      swift_bridgeObjectRelease();
      if (v24)
      {
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v25 = *(void *)(v7 + 16);
        BOOL v26 = __OFSUB__(v25, 1);
        uint64_t v27 = v25 - 1;
        if (v26) {
          goto LABEL_72;
        }
        *(void *)(v7 + 16) = v27;
        goto LABEL_10;
      }
      *(void *)(v14 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
      if (v13 < (uint64_t)v22)
      {
        *(_OWORD *)(*(void *)(v7 + 48) + 16 * v22) = *(_OWORD *)(*(void *)(v7 + 48) + 16 * v13);
        uint64_t v15 = *(void *)(v7 + 56);
        long long v16 = (_OWORD *)(v15 + 32 * v13);
        long long v17 = v16[1];
        uint64_t v18 = (_OWORD *)(v15 + 32 * v22);
        *uint64_t v18 = *v16;
        v18[1] = v17;
LABEL_10:
        if (--v13 < 0) {
          break;
        }
      }
      else
      {
        if (v22 == v13) {
          goto LABEL_10;
        }
        uint64_t v28 = *(void *)(v7 + 48);
        uint64_t v29 = (uint64_t *)(v28 + 16 * v22);
        uint64_t v30 = (uint64_t *)(v28 + 16 * v13);
        uint64_t v31 = *v29;
        uint64_t v32 = v29[1];
        uint64_t v33 = v30[1];
        *uint64_t v29 = *v30;
        v29[1] = v33;
        *uint64_t v30 = v31;
        v30[1] = v32;
        uint64_t v34 = *(void *)(v7 + 56);
        uint64_t v35 = (_OWORD *)(v34 + 32 * v22);
        uint64_t v36 = (_OWORD *)(v34 + 32 * v13);
        outlined init with take of Any(v35, &v75);
        outlined init with take of Any(v36, v35);
        outlined init with take of Any(&v75, v36);
        if (v13 < 0) {
          break;
        }
      }
    }
  }
  swift_release();
LABEL_19:

  if (!*(void *)(v7 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v37 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v68 = v7 + 64;
  uint64_t v38 = -1 << *(unsigned char *)(v7 + 32);
  if (-v38 < 64) {
    uint64_t v39 = ~(-1 << -(char)v38);
  }
  else {
    uint64_t v39 = -1;
  }
  unint64_t v40 = v39 & *(void *)(v7 + 64);
  int64_t v69 = (unint64_t)(63 - v38) >> 6;
  uint64_t v41 = v37 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v42 = 0;
  while (1)
  {
    if (v40)
    {
      unint64_t v45 = __clz(__rbit64(v40));
      v40 &= v40 - 1;
      unint64_t v46 = v45 | (v42 << 6);
      goto LABEL_48;
    }
    int64_t v47 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v47 >= v69) {
      goto LABEL_57;
    }
    unint64_t v48 = *(void *)(v68 + 8 * v47);
    int64_t v49 = v42 + 1;
    if (!v48)
    {
      int64_t v49 = v42 + 2;
      if (v42 + 2 >= v69) {
        goto LABEL_57;
      }
      unint64_t v48 = *(void *)(v68 + 8 * v49);
      if (!v48)
      {
        int64_t v49 = v42 + 3;
        if (v42 + 3 >= v69) {
          goto LABEL_57;
        }
        unint64_t v48 = *(void *)(v68 + 8 * v49);
        if (!v48)
        {
          int64_t v49 = v42 + 4;
          if (v42 + 4 >= v69) {
            goto LABEL_57;
          }
          unint64_t v48 = *(void *)(v68 + 8 * v49);
          if (!v48) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v40 = (v48 - 1) & v48;
    unint64_t v46 = __clz(__rbit64(v48)) + (v49 << 6);
    int64_t v42 = v49;
LABEL_48:
    uint64_t v51 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v46);
    uint64_t v53 = *v51;
    uint64_t v52 = v51[1];
    outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v46, (uint64_t)v82);
    *(void *)&long long v81 = v53;
    *((void *)&v81 + 1) = v52;
    v79[2] = v81;
    v80[0] = v82[0];
    v80[1] = v82[1];
    *(void *)&v79[0] = v53;
    *((void *)&v79[0] + 1) = v52;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v80, v74);
    long long v75 = v70;
    long long v76 = v72;
    uint64_t v77 = v73;
    outlined init with take of Any(v74, v78);
    long long v70 = v75;
    long long v72 = v76;
    uint64_t v73 = v77;
    outlined init with take of Any(v78, v79);
    outlined init with take of Any(v79, &v75);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v37 + 40));
    uint64_t v54 = -1 << *(unsigned char *)(v37 + 32);
    unint64_t v55 = result & ~v54;
    unint64_t v56 = v55 >> 6;
    if (((-1 << v55) & ~*(void *)(v41 + 8 * (v55 >> 6))) != 0)
    {
      unint64_t v43 = __clz(__rbit64((-1 << v55) & ~*(void *)(v41 + 8 * (v55 >> 6)))) | v55 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v57 = 0;
      unint64_t v58 = (unint64_t)(63 - v54) >> 6;
      do
      {
        if (++v56 == v58 && (v57 & 1) != 0)
        {
          __break(1u);
          goto LABEL_70;
        }
        BOOL v59 = v56 == v58;
        if (v56 == v58) {
          unint64_t v56 = 0;
        }
        v57 |= v59;
        uint64_t v60 = *(void *)(v41 + 8 * v56);
      }
      while (v60 == -1);
      unint64_t v43 = __clz(__rbit64(~v60)) + (v56 << 6);
    }
    *(void *)(v41 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
    uint64_t v44 = *(void *)(v37 + 48) + 40 * v43;
    *(_OWORD *)uint64_t v44 = v70;
    *(_OWORD *)(v44 + 16) = v72;
    *(void *)(v44 + 32) = v73;
    uint64_t result = (uint64_t)outlined init with take of Any(&v75, (_OWORD *)(*(void *)(v37 + 56) + 32 * v43));
    ++*(void *)(v37 + 16);
  }
  int64_t v50 = v42 + 5;
  if (v42 + 5 >= v69)
  {
LABEL_57:
    swift_release();
    outlined consume of Set<A1>.Iterator._Variant<A><A1>();

    swift_bridgeObjectRelease();
    id v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
    AnyHashable.init<A>(_:)();
    if (*(void *)(v37 + 16))
    {
      unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v75);
      if (v62)
      {
        outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v61, (uint64_t)&v83);
      }
      else
      {
        long long v83 = 0u;
        long long v84 = 0u;
      }
    }
    else
    {
      long long v83 = 0u;
      long long v84 = 0u;
    }
    swift_release();
    outlined destroy of AnyHashable((uint64_t)&v75);
    if (*((void *)&v84 + 1))
    {
      uint64_t result = swift_dynamicCast();
      if (result)
      {
        char v63 = (char)v71;
        if ((unint64_t)v71 >= 3) {
          char v63 = 3;
        }
        int64_t v64 = a2;
        goto LABEL_69;
      }
    }
    else
    {
      uint64_t result = outlined destroy of Any?((uint64_t)&v83);
    }
    int64_t v64 = a2;
    char v63 = 3;
LABEL_69:
    *int64_t v64 = v63;
    return result;
  }
  unint64_t v48 = *(void *)(v68 + 8 * v50);
  if (v48)
  {
    int64_t v49 = v42 + 5;
    goto LABEL_47;
  }
  while (1)
  {
    int64_t v49 = v50 + 1;
    if (__OFADD__(v50, 1)) {
      break;
    }
    if (v49 >= v69) {
      goto LABEL_57;
    }
    unint64_t v48 = *(void *)(v68 + 8 * v49);
    ++v50;
    if (v48) {
      goto LABEL_47;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

uint64_t URLError.downloadTaskResumeData.getter()
{
  return URLError.downloadTaskResumeData.getter(MEMORY[0x1E4F18CE0]);
}

uint64_t URLError.uploadTaskResumeData.getter()
{
  return URLError.downloadTaskResumeData.getter(MEMORY[0x1E4F18D10]);
}

uint64_t URLError.downloadTaskResumeData.getter(void **a1)
{
  id v2 = *v1;
  id v3 = *v1;
  id v63 = v2;
  id v4 = objc_msgSend((id)_swift_stdlib_bridgeErrorToNSError(), sel_userInfo);
  swift_unknownObjectRelease();
  if (!v4)
  {
LABEL_22:
    uint64_t v6 = MEMORY[0x1E4FBC868];
    if (*(void *)(MEMORY[0x1E4FBC868] + 16)) {
      goto LABEL_20;
    }
LABEL_23:
    uint64_t v36 = MEMORY[0x1E4FBC868];
    goto LABEL_24;
  }
  swift_unknownObjectRetain();
  uint64_t v5 = static Dictionary._bridgeFromObjectiveCAdoptingNativeStorageOf(_:)();
  if (v5)
  {
    uint64_t v6 = v5;
    goto LABEL_19;
  }
  id v7 = objc_msgSend(v4, sel_count);
  if (!v7)
  {

    goto LABEL_22;
  }
  uint64_t v8 = (uint64_t)v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = *(void **)(v6 + 48);
  uint64_t v10 = *(void *)(v6 + 56);
  swift_retain();
  uint64_t result = (uint64_t)specialized closure #2 in static Dictionary._forceBridgeFromObjectiveC(_:result:)(v9, v10, v4, v8);
  if (result < 0 || v8 < result) {
    goto LABEL_69;
  }
  *(void *)(v6 + 16) = result;
  if (result)
  {
    uint64_t v12 = result - 1;
    uint64_t v13 = v6 + 64;
    do
    {
      while (1)
      {
        if ((*(void *)(v13 + (((unint64_t)v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12)) {
          goto LABEL_10;
        }
        uint64_t v18 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v19 = *v18;
        uint64_t v20 = v18[1];
        swift_bridgeObjectRetain();
        unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
        char v23 = v22;
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          break;
        }
        swift_arrayDestroy();
        uint64_t result = swift_arrayDestroy();
        uint64_t v24 = *(void *)(v6 + 16);
        BOOL v25 = __OFSUB__(v24, 1);
        uint64_t v26 = v24 - 1;
        if (v25)
        {
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
          return result;
        }
        *(void *)(v6 + 16) = v26;
LABEL_10:
        if (--v12 < 0) {
          goto LABEL_18;
        }
      }
      *(void *)(v13 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (v12 < (uint64_t)v21)
      {
        *(_OWORD *)(*(void *)(v6 + 48) + 16 * v21) = *(_OWORD *)(*(void *)(v6 + 48) + 16 * v12);
        uint64_t v14 = *(void *)(v6 + 56);
        uint64_t v15 = (_OWORD *)(v14 + 32 * v12);
        long long v16 = v15[1];
        long long v17 = (_OWORD *)(v14 + 32 * v21);
        *long long v17 = *v15;
        v17[1] = v16;
        goto LABEL_10;
      }
      if (v21 == v12) {
        goto LABEL_10;
      }
      uint64_t v27 = *(void *)(v6 + 48);
      uint64_t v28 = (uint64_t *)(v27 + 16 * v21);
      uint64_t v29 = (uint64_t *)(v27 + 16 * v12);
      uint64_t v30 = *v28;
      uint64_t v31 = v28[1];
      uint64_t v32 = v29[1];
      uint64_t *v28 = *v29;
      v28[1] = v32;
      *uint64_t v29 = v30;
      v29[1] = v31;
      uint64_t v33 = *(void *)(v6 + 56);
      uint64_t v34 = (_OWORD *)(v33 + 32 * v21);
      uint64_t v35 = (_OWORD *)(v33 + 32 * v12);
      outlined init with take of Any(v34, &v71);
      outlined init with take of Any(v35, v34);
      outlined init with take of Any(&v71, v35);
    }
    while ((v12 & 0x8000000000000000) == 0);
  }
LABEL_18:
  swift_release();
LABEL_19:

  if (!*(void *)(v6 + 16)) {
    goto LABEL_23;
  }
LABEL_20:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
  uint64_t v36 = static _DictionaryStorage.allocate(capacity:)();
LABEL_24:
  uint64_t v65 = v6 + 64;
  uint64_t v37 = -1 << *(unsigned char *)(v6 + 32);
  if (-v37 < 64) {
    uint64_t v38 = ~(-1 << -(char)v37);
  }
  else {
    uint64_t v38 = -1;
  }
  unint64_t v39 = v38 & *(void *)(v6 + 64);
  int64_t v66 = (unint64_t)(63 - v37) >> 6;
  uint64_t v40 = v36 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v41 = 0;
  while (1)
  {
    if (v39)
    {
      unint64_t v44 = __clz(__rbit64(v39));
      v39 &= v39 - 1;
      unint64_t v45 = v44 | (v41 << 6);
      goto LABEL_48;
    }
    int64_t v46 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
LABEL_66:
      __break(1u);
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v46 >= v66) {
      goto LABEL_57;
    }
    unint64_t v47 = *(void *)(v65 + 8 * v46);
    int64_t v48 = v41 + 1;
    if (!v47)
    {
      int64_t v48 = v41 + 2;
      if (v41 + 2 >= v66) {
        goto LABEL_57;
      }
      unint64_t v47 = *(void *)(v65 + 8 * v48);
      if (!v47)
      {
        int64_t v48 = v41 + 3;
        if (v41 + 3 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        if (!v47)
        {
          int64_t v48 = v41 + 4;
          if (v41 + 4 >= v66) {
            goto LABEL_57;
          }
          unint64_t v47 = *(void *)(v65 + 8 * v48);
          if (!v47) {
            break;
          }
        }
      }
    }
LABEL_47:
    unint64_t v39 = (v47 - 1) & v47;
    unint64_t v45 = __clz(__rbit64(v47)) + (v48 << 6);
    int64_t v41 = v48;
LABEL_48:
    int64_t v50 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v45);
    uint64_t v52 = *v50;
    uint64_t v51 = v50[1];
    outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v45, (uint64_t)v78);
    *(void *)&long long v77 = v52;
    *((void *)&v77 + 1) = v51;
    v75[2] = v77;
    v76[0] = v78[0];
    v76[1] = v78[1];
    *(void *)&v75[0] = v52;
    *((void *)&v75[0] + 1) = v51;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v76, v70);
    long long v71 = v67;
    long long v72 = v68;
    uint64_t v73 = v69;
    outlined init with take of Any(v70, v74);
    long long v67 = v71;
    long long v68 = v72;
    uint64_t v69 = v73;
    outlined init with take of Any(v74, v75);
    outlined init with take of Any(v75, &v71);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v36 + 40));
    uint64_t v53 = -1 << *(unsigned char *)(v36 + 32);
    unint64_t v54 = result & ~v53;
    unint64_t v55 = v54 >> 6;
    if (((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6))) != 0)
    {
      unint64_t v42 = __clz(__rbit64((-1 << v54) & ~*(void *)(v40 + 8 * (v54 >> 6)))) | v54 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v56 = 0;
      unint64_t v57 = (unint64_t)(63 - v53) >> 6;
      do
      {
        if (++v55 == v57 && (v56 & 1) != 0)
        {
          __break(1u);
          goto LABEL_66;
        }
        BOOL v58 = v55 == v57;
        if (v55 == v57) {
          unint64_t v55 = 0;
        }
        v56 |= v58;
        uint64_t v59 = *(void *)(v40 + 8 * v55);
      }
      while (v59 == -1);
      unint64_t v42 = __clz(__rbit64(~v59)) + (v55 << 6);
    }
    *(void *)(v40 + ((v42 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v42;
    uint64_t v43 = *(void *)(v36 + 48) + 40 * v42;
    *(_OWORD *)uint64_t v43 = v67;
    *(_OWORD *)(v43 + 16) = v68;
    *(void *)(v43 + 32) = v69;
    uint64_t result = (uint64_t)outlined init with take of Any(&v71, (_OWORD *)(*(void *)(v36 + 56) + 32 * v42));
    ++*(void *)(v36 + 16);
  }
  int64_t v49 = v41 + 5;
  if (v41 + 5 < v66)
  {
    unint64_t v47 = *(void *)(v65 + 8 * v49);
    if (!v47)
    {
      while (1)
      {
        int64_t v48 = v49 + 1;
        if (__OFADD__(v49, 1)) {
          goto LABEL_67;
        }
        if (v48 >= v66) {
          goto LABEL_57;
        }
        unint64_t v47 = *(void *)(v65 + 8 * v48);
        ++v49;
        if (v47) {
          goto LABEL_47;
        }
      }
    }
    int64_t v48 = v41 + 5;
    goto LABEL_47;
  }
LABEL_57:
  swift_release();
  outlined consume of Set<A1>.Iterator._Variant<A><A1>();

  swift_bridgeObjectRelease();
  *(void *)&long long v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  *((void *)&v67 + 1) = v60;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v36 + 16) && (unint64_t v61 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v71), (v62 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v36 + 56) + 32 * v61, (uint64_t)&v67);
  }
  else
  {
    long long v67 = 0u;
    long long v68 = 0u;
  }
  swift_release();
  outlined destroy of AnyHashable((uint64_t)&v71);
  if (*((void *)&v68 + 1))
  {
    if (swift_dynamicCast()) {
      return v77;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v67);
    return 0;
  }
}

void static URLError.unsupportedURL.getter(void *a1@<X8>)
{
  *a1 = -1002;
}

void static URLError.cannotFindHost.getter(void *a1@<X8>)
{
  *a1 = -1003;
}

void static URLError.cannotConnectToHost.getter(void *a1@<X8>)
{
  *a1 = -1004;
}

void static URLError.networkConnectionLost.getter(void *a1@<X8>)
{
  *a1 = -1005;
}

void static URLError.dnsLookupFailed.getter(void *a1@<X8>)
{
  *a1 = -1006;
}

void static URLError.httpTooManyRedirects.getter(void *a1@<X8>)
{
  *a1 = -1007;
}

void static URLError.resourceUnavailable.getter(void *a1@<X8>)
{
  *a1 = -1008;
}

void static URLError.notConnectedToInternet.getter(void *a1@<X8>)
{
  *a1 = -1009;
}

void static URLError.redirectToNonExistentLocation.getter(void *a1@<X8>)
{
  *a1 = -1010;
}

void static URLError.badServerResponse.getter(void *a1@<X8>)
{
  *a1 = -1011;
}

void static URLError.userCancelledAuthentication.getter(void *a1@<X8>)
{
  *a1 = -1012;
}

void static URLError.userAuthenticationRequired.getter(void *a1@<X8>)
{
  *a1 = -1013;
}

void static URLError.zeroByteResource.getter(void *a1@<X8>)
{
  *a1 = -1014;
}

void static URLError.cannotDecodeRawData.getter(void *a1@<X8>)
{
  *a1 = -1015;
}

void static URLError.cannotDecodeContentData.getter(void *a1@<X8>)
{
  *a1 = -1016;
}

void static URLError.cannotParseResponse.getter(void *a1@<X8>)
{
  *a1 = -1017;
}

void static URLError.appTransportSecurityRequiresSecureConnection.getter(void *a1@<X8>)
{
  *a1 = -1022;
}

void static URLError.fileDoesNotExist.getter(void *a1@<X8>)
{
  *a1 = -1100;
}

void static URLError.fileIsDirectory.getter(void *a1@<X8>)
{
  *a1 = -1101;
}

void static URLError.noPermissionsToReadFile.getter(void *a1@<X8>)
{
  *a1 = -1102;
}

void static URLError.dataLengthExceedsMaximum.getter(void *a1@<X8>)
{
  *a1 = -1103;
}

void static URLError.secureConnectionFailed.getter(void *a1@<X8>)
{
  *a1 = -1200;
}

void static URLError.serverCertificateHasBadDate.getter(void *a1@<X8>)
{
  *a1 = -1201;
}

void static URLError.serverCertificateUntrusted.getter(void *a1@<X8>)
{
  *a1 = -1202;
}

void static URLError.serverCertificateHasUnknownRoot.getter(void *a1@<X8>)
{
  *a1 = -1203;
}

void static URLError.serverCertificateNotYetValid.getter(void *a1@<X8>)
{
  *a1 = -1204;
}

void static URLError.clientCertificateRejected.getter(void *a1@<X8>)
{
  *a1 = -1205;
}

void static URLError.clientCertificateRequired.getter(void *a1@<X8>)
{
  *a1 = -1206;
}

void static URLError.cannotLoadFromNetwork.getter(void *a1@<X8>)
{
  *a1 = -2000;
}

void static URLError.cannotCreateFile.getter(void *a1@<X8>)
{
  *a1 = -3000;
}

void static URLError.cannotOpenFile.getter(void *a1@<X8>)
{
  *a1 = -3001;
}

void static URLError.cannotCloseFile.getter(void *a1@<X8>)
{
  *a1 = -3002;
}

void static URLError.cannotWriteToFile.getter(void *a1@<X8>)
{
  *a1 = -3003;
}

void static URLError.cannotRemoveFile.getter(void *a1@<X8>)
{
  *a1 = -3004;
}

void static URLError.cannotMoveFile.getter(void *a1@<X8>)
{
  *a1 = -3005;
}

void static URLError.downloadDecodingFailedMidStream.getter(void *a1@<X8>)
{
  *a1 = -3006;
}

void static URLError.downloadDecodingFailedToComplete.getter(void *a1@<X8>)
{
  *a1 = -3007;
}

void static URLError.internationalRoamingOff.getter(void *a1@<X8>)
{
  *a1 = -1018;
}

void static URLError.callIsActive.getter(void *a1@<X8>)
{
  *a1 = -1019;
}

void static URLError.dataNotAllowed.getter(void *a1@<X8>)
{
  *a1 = -1020;
}

void static URLError.requestBodyStreamExhausted.getter(void *a1@<X8>)
{
  *a1 = -1021;
}

void static URLError.backgroundSessionRequiresSharedContainer.getter(void *a1@<X8>)
{
  *a1 = -995;
}

void static URLError.backgroundSessionInUseByAnotherProcess.getter(void *a1@<X8>)
{
  *a1 = -996;
}

void static URLError.backgroundSessionWasDisconnected.getter(void *a1@<X8>)
{
  *a1 = -997;
}

unint64_t lazy protocol witness table accessor for type URLError.Code and conformance URLError.Code()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code;
  if (!lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.Code and conformance URLError.Code);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError.Code(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type URLError.Code and conformance URLError.Code();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type URLError and conformance URLError();
  a1[2] = lazy protocol witness table accessor for type URLError and conformance URLError();
  unint64_t result = lazy protocol witness table accessor for type URLError and conformance URLError();
  a1[3] = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for URLError(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type URLError and conformance URLError();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason;
  if (!lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.BackgroundTaskCancelledReason and conformance URLError.BackgroundTaskCancelledReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason()
{
  unint64_t result = lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason;
  if (!lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type URLError.NetworkUnavailableReason and conformance URLError.NetworkUnavailableReason);
  }
  return result;
}

ValueMetadata *type metadata accessor for URLError.BackgroundTaskCancelledReason()
{
  return &type metadata for URLError.BackgroundTaskCancelledReason;
}

unsigned char *storeEnumTagSinglePayload for URLError.BackgroundTaskCancelledReason(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x181DBE428);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for URLError.NetworkUnavailableReason()
{
  return &type metadata for URLError.NetworkUnavailableReason;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOG_SSs5NeverOTg506_sSS10d3E17ef31V4fromACs7Decoder_p_tKcfcSSAC14gh3V14iJ54Ocfu_33_3c0eda9a63dc724d562b3e4a722c2209AISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v25 = type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage(0);
  uint64_t v3 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    v24[1] = v1;
    uint64_t v28 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    while (2)
    {
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v8, (uint64_t)v5, type metadata accessor for String.LocalizationValue.FormatArgument.CodableStorage);
      unint64_t v10 = 0xE200000000000000;
      uint64_t v11 = 25637;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          goto LABEL_22;
        case 2u:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1684827173;
          goto LABEL_22;
        case 3u:
          uint64_t v11 = 29989;
          goto LABEL_22;
        case 4u:
          unint64_t v10 = 0xE400000000000000;
LABEL_9:
          uint64_t v11 = 1970039845;
          goto LABEL_22;
        case 5u:
          uint64_t v11 = 26149;
          goto LABEL_22;
        case 6u:
        case 7u:
LABEL_4:
          unint64_t v10 = 0xE300000000000000;
          uint64_t v11 = 6712357;
          goto LABEL_22;
        case 8u:
          goto LABEL_19;
        case 9u:
          goto LABEL_20;
        case 0xAu:
          swift_release();
          goto LABEL_20;
        case 0xBu:
          long long v14 = *((_OWORD *)v5 + 7);
          v26[6] = *((_OWORD *)v5 + 6);
          v26[7] = v14;
          __int16 v27 = *((_WORD *)v5 + 64);
          long long v15 = *((_OWORD *)v5 + 3);
          v26[2] = *((_OWORD *)v5 + 2);
          v26[3] = v15;
          long long v16 = *((_OWORD *)v5 + 5);
          v26[4] = *((_OWORD *)v5 + 4);
          v26[5] = v16;
          long long v17 = *((_OWORD *)v5 + 1);
          v26[0] = *(_OWORD *)v5;
          v26[1] = v17;
          outlined release of (Date, String.LocalizationValue.FormatArgument.DateArgumentFormatStyle)((uint64_t)v26);
          goto LABEL_20;
        case 0xCu:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          goto LABEL_20;
        case 0xDu:
          uint64_t v18 = (uint64_t)&v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle))
                                    + 48)];
          uint64_t v19 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle;
          goto LABEL_17;
        case 0xEu:
          uint64_t v18 = (uint64_t)&v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Double, String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle))
                                    + 48)];
          uint64_t v19 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle;
          goto LABEL_17;
        case 0xFu:
          uint64_t v18 = (uint64_t)&v5[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NSDecimal, String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle))
                                    + 48)];
          uint64_t v19 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle;
LABEL_17:
          outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage(v18, v19);
          goto LABEL_20;
        case 0x10u:
          swift_unknownObjectRelease();
          goto LABEL_19;
        case 0x11u:
          unint64_t v10 = 0xE400000000000000;
          uint64_t v11 = 1684827173;
          switch(*v5)
          {
            case 0:
              goto LABEL_22;
            case 1:
              goto LABEL_9;
            case 2:
              unint64_t v10 = 0xE200000000000000;
              uint64_t v11 = 26149;
              break;
            case 3:
              goto LABEL_4;
            case 4:
              goto LABEL_20;
            default:
              goto LABEL_21;
          }
          goto LABEL_22;
        default:
          uint64_t v12 = (void *)*((void *)v5 + 9);
          uint64_t v13 = *((void *)v5 + 10);
          v24[2] = *((void *)v5 + 6);
          v24[3] = v13;
          void v24[4] = *((void *)v5 + 11);

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
LABEL_19:
          swift_bridgeObjectRelease();
LABEL_20:
          unint64_t v10 = 0xE200000000000000;
LABEL_21:
          uint64_t v11 = 16421;
LABEL_22:
          uint64_t v7 = v28;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1);
            uint64_t v7 = v28;
          }
          unint64_t v21 = *(void *)(v7 + 16);
          unint64_t v20 = *(void *)(v7 + 24);
          if (v21 >= v20 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
            uint64_t v7 = v28;
          }
          *(void *)(v7 + 16) = v21 + 1;
          uint64_t v22 = v7 + 16 * v21;
          *(void *)(v22 + 32) = v11;
          *(void *)(v22 + 40) = v10;
          v8 += v9;
          if (!--v6) {
            return v7;
          }
          continue;
      }
    }
  }
  return v7;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg5(void (*a1)(_OWORD *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  int64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    uint64_t v6 = v19;
    for (uint64_t i = a3 + 32; ; i += 120)
    {
      a1(v17, i);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v19 = v6;
      unint64_t v11 = *(void *)(v6 + 16);
      unint64_t v10 = *(void *)(v6 + 24);
      if (v11 >= v10 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
        uint64_t v6 = v19;
      }
      *(void *)(v6 + 16) = v11 + 1;
      uint64_t v12 = (_OWORD *)(v6 + (v11 << 6));
      long long v13 = v17[0];
      long long v14 = v17[1];
      long long v15 = v18[0];
      *(_OWORD *)((char *)v12 + 73) = *(_OWORD *)((char *)v18 + 9);
      long long v12[3] = v14;
      _OWORD v12[4] = v15;
      id v12[2] = v13;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a5();
  swift_unknownObjectRelease();
  return v5;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverO10Foundation23LocalizedStringResourceVIsgnrzr_xSayAJGAGSlRzAJRsd__AGRsd_0_r_0_lIetMgnozo_Tp5(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v38)(uint64_t *__return_ptr, char *);
  uint64_t v39;
  char *v40;
  char v41[32];
  uint64_t v42;
  long long v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  long long v47;
  uint64_t v48;
  long long v49;
  long long v50;
  uint64_t v51;

  uint64_t v6 = v5;
  uint64_t v38 = a1;
  unint64_t v39 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = dispatch thunk of Collection.count.getter();
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v13)
  {
    uint64_t v51 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13 & ~(v13 >> 63), 0);
    uint64_t v40 = v12;
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    if (v13 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v33 = v10;
      long long v15 = (void (**)(char *))(v36 + 16);
      long long v16 = (void (**)(char *, uint64_t))(v36 + 8);
      uint64_t v36 = v4;
      uint64_t v35 = a4;
      while (1)
      {
        long long v17 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
        uint64_t v18 = AssociatedTypeWitness;
        (*v15)(v9);
        v17(v41, 0);
        v38(&v42, v9);
        if (v6) {
          break;
        }
        uint64_t v6 = 0;
        (*v16)(v9, v18);
        uint64_t v19 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
          uint64_t v19 = v51;
        }
        unint64_t v21 = *(void *)(v19 + 16);
        unint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v51;
        }
        uint64_t v22 = v42;
        uint64_t v23 = v44;
        uint64_t v24 = v45;
        uint64_t v25 = v48;
        uint64_t v26 = v19 + 112 * v21;
        long long v27 = v43;
        long long v29 = v46;
        long long v28 = v47;
        long long v30 = v49;
        long long v31 = v50;
        *(void *)(v19 + 16) = v21 + 1;
        *(void *)(v26 + 32) = v22;
        *(_OWORD *)(v26 + 40) = v27;
        *(void *)(v26 + 56) = v23;
        *(void *)(v26 + 64) = v24;
        *(_OWORD *)(v26 + 72) = v29;
        *(_OWORD *)(v26 + 88) = v28;
        *(void *)(v26 + 104) = v25;
        *(_OWORD *)(v26 + 112) = v30;
        *(_OWORD *)(v26 + 128) = v31;
        dispatch thunk of Collection.formIndex(after:)();
        if (!--v13)
        {
          (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v33);
          return v51;
        }
      }
      (*v16)(v9, v18);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v40, v33);
      return swift_release();
    }
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayyXlG_SnySS5IndexVGs5NeverOTg5(void (*a1)(long long *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    if (!v6) {
      return v7;
    }
    uint64_t v16 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
    if (v6 < 0) {
      break;
    }
    uint64_t v9 = 0;
    uint64_t v7 = v16;
    while (v6 != v9)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        uint64_t v10 = MEMORY[0x185303120](v9, a3);
      }
      else
      {
        uint64_t v10 = *(void *)(a3 + 8 * v9 + 32);
        swift_unknownObjectRetain();
      }
      uint64_t v14 = v10;
      a1(&v15, &v14);
      if (v4)
      {
        swift_release();
        swift_unknownObjectRelease();
        return v7;
      }
      uint64_t v4 = 0;
      swift_unknownObjectRelease();
      uint64_t v16 = v7;
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v16;
      }
      ++v9;
      *(void *)(v7 + 16) = v12 + 1;
      *(_OWORD *)(v7 + 16 * v12 + 32) = v15;
      if (v6 == v9) {
        return v7;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)v37 - v19;
  uint64_t v21 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (void *)((char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(a3, (uint64_t)v20, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v25 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
      outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v11, (uint64_t)v23, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      void *v23 = a1;
      v23[1] = a2;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = (uint64_t)v11;
    }
    else
    {
      uint64_t v25 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
      outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v8, (uint64_t)v23, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      void *v23 = a1;
      v23[1] = a2;
      swift_storeEnumTagMultiPayload();
      uint64_t v26 = (uint64_t)v8;
    }
  }
  else
  {
    uint64_t v25 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?((uint64_t)v20, (uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v14, (uint64_t)v23, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    void *v23 = a1;
    v23[1] = a2;
    swift_storeEnumTagMultiPayload();
    uint64_t v26 = (uint64_t)v14;
  }
  outlined destroy of Any?(v26, v25);
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0((uint64_t)v23, (uint64_t)v17, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.Format);
  int v27 = swift_getEnumCaseMultiPayload();
  if (!v27)
  {
    uint64_t v33 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>;
    outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v14, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>);
    uint64_t v28 = specialized FloatingPointFormatStyle.format(_:)();
    uint64_t v30 = v34;
    uint64_t v31 = (uint64_t)v14;
LABEL_11:
    uint64_t v32 = v33;
    goto LABEL_12;
  }
  if (v27 != 1)
  {
    uint64_t v33 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent;
    outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v8, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent);
    uint64_t v28 = specialized FloatingPointFormatStyle.Percent.format(_:)();
    uint64_t v30 = v35;
    uint64_t v31 = (uint64_t)v8;
    goto LABEL_11;
  }
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v11, &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency);
  uint64_t v28 = specialized FloatingPointFormatStyle.Currency.format(_:)();
  uint64_t v30 = v29;
  uint64_t v31 = (uint64_t)v11;
  uint64_t v32 = &demangling cache variable for type metadata for FloatingPointFormatStyle<Double>.Currency;
LABEL_12:
  outlined destroy of Any?(v31, v32);
  v37[0] = v28;
  v37[1] = v30;
  outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v23, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
  return String.init<A>(_:)();
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v51)(void *__return_ptr, uint64_t, uint64_t);
  unsigned char *v52;
  int *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  os_unfair_lock_s *v60;
  unsigned char *v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ObjectType;
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned char *v87;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  BOOL v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t isStackAllocationSafe;
  int v102;
  uint64_t v103;
  unsigned char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned char *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  unsigned char *v126;
  uint64_t v127;
  int *v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unsigned char *v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned char *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned char *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  unsigned char *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t result;
  unsigned char v159[12];
  int v160;
  uint64_t v161;
  unsigned char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned char *v166;
  int *v167;
  unsigned char *v168;
  unsigned char *v169;
  unsigned char *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned char *v173;
  void v174[18];
  void *v175;
  void v176[18];
  void v177[20];

  uint64_t v171 = a2;
  uint64_t v172 = a4;
  v177[18] = *MEMORY[0x1E4F143B8];
  uint64_t v165 = type metadata accessor for ICUPercentNumberFormatter.Signature(0);
  MEMORY[0x1F4188790](v165);
  uint64_t v7 = &v159[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v167 = (int *)type metadata accessor for ICUCurrencyNumberFormatter.Signature(0);
  uint64_t v161 = *((void *)v167 - 1);
  MEMORY[0x1F4188790](v167);
  uint64_t v162 = &v159[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  uint64_t v168 = &v159[-v10];
  BOOL v164 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
  MEMORY[0x1F4188790](v164);
  uint64_t v170 = &v159[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = &v159[-v13];
  uint64_t v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  MEMORY[0x1F4188790](v163);
  uint64_t v169 = &v159[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = &v159[-v17];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IntegerFormatStyle<Int>);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v166 = &v159[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = &v159[-v22];
  uint64_t v24 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format(0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = &v159[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = &v159[-v28];
  uint64_t v30 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v173 = &v159[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(a3, (uint64_t)v29, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v33 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
      outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v18, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      uint64_t v34 = v173;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v18, (uint64_t)v173, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v35 = v171;
      *uint64_t v34 = a1;
      v34[1] = v35;
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = (uint64_t)v18;
    }
    else
    {
      uint64_t v33 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
      outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v14, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      uint64_t v34 = v173;
      outlined init with copy of (Hashable & Sendable)?((uint64_t)v14, (uint64_t)v173, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v39 = v171;
      *uint64_t v34 = a1;
      v34[1] = v39;
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = (uint64_t)v14;
    }
    uint64_t v38 = v33;
  }
  else
  {
    outlined init with take of LocalePreferences?((uint64_t)v29, (uint64_t)v23, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    uint64_t v34 = v173;
    outlined init with copy of (Hashable & Sendable)?((uint64_t)v23, (uint64_t)v173, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    uint64_t v37 = v171;
    *uint64_t v34 = a1;
    v34[1] = v37;
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = (uint64_t)v23;
    uint64_t v38 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>;
  }
  outlined destroy of Any?(v36, v38);
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0((uint64_t)v34, (uint64_t)v26, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.Format);
  int v40 = swift_getEnumCaseMultiPayload();
  if (!v40)
  {
    uint64_t v69 = v166;
    outlined init with take of LocalePreferences?((uint64_t)v26, (uint64_t)v166, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
    long long v70 = specialized static ICUNumberFormatter.create<A>(for:)((uint64_t)v69);
    long long v71 = v172;
    if (!v70) {
      goto LABEL_64;
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    long long v72 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1F4188790](v72);
    LODWORD(v177[0]) = 0;
    Swift::Int isStackAllocationSafe = unumf_resultToString();
    if (LODWORD(v177[0]) == 15)
    {
      uint64_t v102 = isStackAllocationSafe + 1;
      if (__OFADD__(isStackAllocationSafe, 1))
      {
        __break(1u);
        goto LABEL_134;
      }
      if (v102 < 0)
      {
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }
      if (v102 < 513
        || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1F4188790](isStackAllocationSafe);
        uint64_t v104 = &v159[-v103];
        LODWORD(v176[0]) = 0;
        unint64_t v105 = unumf_resultToString();
        if (SLODWORD(v176[0]) <= 0 && v105 > 0)
        {
          Swift::String v106 = specialized String.init(_utf16:)((uint64_t)v104, v105);
          char v108 = v107;
          goto LABEL_47;
        }
LABEL_63:
        swift_release();
        swift_release();
        goto LABEL_64;
      }
      uint64_t v117 = swift_slowAlloc();
      LODWORD(v176[0]) = 0;
      uint64_t v118 = unumf_resultToString();
      if (SLODWORD(v176[0]) > 0 || v118 <= 0)
      {
        MEMORY[0x185309510](v117, -1, -1);
        goto LABEL_63;
      }
      Swift::String v106 = specialized String.init(_utf16:)(v117, v118);
      char v108 = v119;
      MEMORY[0x185309510](v117, -1, -1);
    }
    else
    {
      if (SLODWORD(v177[0]) > 0 || (int)isStackAllocationSafe <= 0) {
        goto LABEL_63;
      }
      Swift::String v106 = specialized String.init(_utf16:)((uint64_t)&v159[-64], isStackAllocationSafe);
      char v108 = v115;
    }
LABEL_47:
    swift_release();
    swift_release();
    if (v108)
    {
LABEL_65:
      outlined destroy of Any?((uint64_t)v69, &demangling cache variable for type metadata for IntegerFormatStyle<Int>);
      unint64_t v87 = v173;
LABEL_132:
      v177[0] = v106;
      v177[1] = v108;
      outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v87, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
      return String.init<A>(_:)();
    }
LABEL_64:
    v177[0] = v71;
    lazy protocol witness table accessor for type Int and conformance Int();
    Swift::String v106 = String.init<A>(_:radix:uppercase:)();
    char v108 = v123;
    goto LABEL_65;
  }
  if (v40 != 1)
  {
    uint64_t v73 = v170;
    outlined init with take of LocalePreferences?((uint64_t)v26, (uint64_t)v170, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent);
    uint64_t v171 = type metadata accessor for ICUPercentNumberFormatter();
    id v74 = (uint64_t)&v73[*(int *)(v164 + 36)];
    long long v75 = *((void *)v73 + 1);
    uint64_t ObjectType = swift_getObjectType();
    long long v77 = *(uint64_t (**)(uint64_t, uint64_t))(v75 + 472);
    swift_unknownObjectRetain();
    uint64_t v78 = v77(ObjectType, v75);
    long long v80 = v79;
    swift_unknownObjectRelease();
    long long v81 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v75 + 464);
    swift_unknownObjectRetain();
    v81(v176, ObjectType, v75);
    swift_unknownObjectRelease();
    outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)v177, &demangling cache variable for type metadata for LocalePreferences?);
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v74, (uint64_t)v7, type metadata accessor for NumberFormatStyleConfiguration.Collection);
    uint64_t v82 = v165;
    long long v83 = (uint64_t *)&v7[*(int *)(v165 + 20)];
    *long long v83 = v78;
    v83[1] = v80;
    outlined init with take of LocalePreferences?((uint64_t)v177, (uint64_t)&v7[*(int *)(v82 + 24)], &demangling cache variable for type metadata for LocalePreferences?);
    long long v84 = static ICUPercentNumberFormatter._create(with:)((uint64_t)v7);
    outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v7, type metadata accessor for ICUPercentNumberFormatter.Signature);
    uint64_t v85 = v172;
    if (!v84) {
      goto LABEL_68;
    }
    type metadata accessor for ICUNumberFormatterBase.FormatResult();
    swift_initStackObject();
    Swift::Int v86 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
    MEMORY[0x1F4188790](v86);
    LODWORD(v176[0]) = 0;
    uint64_t v109 = unumf_resultToString();
    if (LODWORD(v176[0]) != 15)
    {
      if (SLODWORD(v176[0]) > 0 || (int)v109 <= 0) {
        goto LABEL_67;
      }
      Swift::String v106 = specialized String.init(_utf16:)((uint64_t)&v159[-64], v109);
      char v108 = v116;
      goto LABEL_52;
    }
    uint64_t v110 = v109 + 1;
    if (!__OFADD__(v109, 1))
    {
      if (v110 < 0)
      {
LABEL_137:
        __break(1u);
        goto LABEL_138;
      }
      if (v110 < 513 || (uint64_t v109 = swift_stdlib_isStackAllocationSafe(), (v109 & 1) != 0))
      {
        MEMORY[0x1F4188790](v109);
        uint64_t v112 = &v159[-v111];
        LODWORD(v174[0]) = 0;
        uint64_t v113 = unumf_resultToString();
        if (SLODWORD(v174[0]) <= 0 && v113 > 0)
        {
          Swift::String v106 = specialized String.init(_utf16:)((uint64_t)v112, v113);
          char v108 = v114;
          goto LABEL_52;
        }
LABEL_67:
        swift_release();
        swift_release();
        goto LABEL_68;
      }
      uint64_t v120 = swift_slowAlloc();
      LODWORD(v174[0]) = 0;
      uint64_t v121 = unumf_resultToString();
      if (SLODWORD(v174[0]) > 0 || v121 <= 0)
      {
        MEMORY[0x185309510](v120, -1, -1);
        goto LABEL_67;
      }
      Swift::String v106 = specialized String.init(_utf16:)(v120, v121);
      char v108 = v122;
      MEMORY[0x185309510](v120, -1, -1);
LABEL_52:
      swift_release();
      swift_release();
      if (v108)
      {
LABEL_69:
        unint64_t v87 = v173;
        uint64_t v125 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Percent;
        uint64_t v126 = v170;
LABEL_131:
        outlined destroy of Any?((uint64_t)v126, v125);
        goto LABEL_132;
      }
LABEL_68:
      v176[0] = v85;
      lazy protocol witness table accessor for type Int and conformance Int();
      Swift::String v106 = String.init<A>(_:radix:uppercase:)();
      char v108 = v124;
      goto LABEL_69;
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  uint64_t v41 = (uint64_t)v26;
  unint64_t v42 = v169;
  outlined init with take of LocalePreferences?(v41, (uint64_t)v169, &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency);
  uint64_t v43 = (uint64_t)v42 + *(int *)(v163 + 40);
  uint64_t v44 = v42[3];
  uint64_t v171 = v42[2];
  uint64_t v45 = v42[1];
  uint64_t v46 = swift_getObjectType();
  unint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t))(v45 + 472);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v48 = v47(v46, v45);
  uint64_t v50 = v49;
  swift_unknownObjectRelease();
  uint64_t v51 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v45 + 464);
  swift_unknownObjectRetain();
  v51(v176, v46, v45);
  swift_unknownObjectRelease();
  outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)v177, &demangling cache variable for type metadata for LocalePreferences?);
  uint64_t v52 = v168;
  _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(v43, (uint64_t)v168, type metadata accessor for CurrencyFormatStyleConfiguration.Collection);
  uint64_t v53 = v167;
  unint64_t v54 = (uint64_t *)&v52[v167[5]];
  *unint64_t v54 = v171;
  v54[1] = v44;
  unint64_t v55 = (uint64_t *)&v52[v53[6]];
  *unint64_t v55 = v48;
  v55[1] = v50;
  char v56 = (uint64_t)&v52[v53[7]];
  unint64_t v57 = outlined init with take of LocalePreferences?((uint64_t)v177, v56, &demangling cache variable for type metadata for LocalePreferences?);
  if (one-time initialization token for cache != -1) {
    unint64_t v57 = swift_once();
  }
  BOOL v58 = qword_1E8ED9480;
  uint64_t v171 = static ICUCurrencyNumberFormatter.cache;
  MEMORY[0x1F4188790](v57);
  *(void *)&v159[-16] = v52;
  uint64_t v59 = (void *)(v58 + 16);
  uint64_t v60 = (os_unfair_lock_s *)(v58 + 24);
  swift_retain_n();
  os_unfair_lock_lock((os_unfair_lock_t)(v58 + 24));
  unint64_t v61 = 0;
  _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA017ICUCurrencyNumberB0C9Signature33_1C58B5D80AA37B9371410D3343C91B53LLV_AJSgTG5TA_0(v58 + 16, (uint64_t *)&v175);
  os_unfair_lock_unlock((os_unfair_lock_t)(v58 + 24));
  swift_release();
  char v62 = v175;
  if (v175 != (void *)1)
  {
    swift_release();
    unint64_t v87 = v173;
    goto LABEL_106;
  }
  uint64_t v170 = 0;
  id v63 = specialized static ICUCurrencyNumberFormatter.skeleton(for:)((uint64_t)v52);
  uint64_t v65 = v64;
  int64_t v66 = *v55;
  long long v67 = v55[1];
  outlined init with take of LocalePreferences?(v56, (uint64_t)v176, &demangling cache variable for type metadata for LocalePreferences?);
  type metadata accessor for ICUCurrencyNumberFormatter();
  swift_allocObject();
  outlined init with take of LocalePreferences?((uint64_t)v176, (uint64_t)v174, &demangling cache variable for type metadata for LocalePreferences?);
  swift_bridgeObjectRetain();
  outlined retain of LocalePreferences?((uint64_t)v176);
  char v62 = ICUNumberFormatterBase.init(skeleton:localeIdentifier:preferences:)(v63, v65, v66, v67, (uint64_t)v174);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v58 + 24));
  long long v68 = *(void *)(v58 + 16);
  if (v171 >= *(void *)(v68 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    *uint64_t v59 = MEMORY[0x1E4FBC868];
  }
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v174[0] = *v59;
  uint64_t v89 = v174[0];
  *uint64_t v59 = 0x8000000000000000;
  uint64_t v52 = v168;
  uint64_t v91 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v168);
  uint64_t v92 = *(void *)(v89 + 16);
  id v93 = (v90 & 1) == 0;
  uint64_t v94 = v92 + v93;
  unint64_t v87 = v173;
  if (__OFADD__(v92, v93))
  {
    __break(1u);
  }
  else
  {
    if (*(void *)(v89 + 24) < v94)
    {
      uint64_t v95 = v90;
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v94, isUniquelyReferenced_nonNull_native);
      Swift::String v96 = v174[0];
      uint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v52);
      if ((v95 & 1) != (v98 & 1)) {
        goto LABEL_141;
      }
      uint64_t v91 = v97;
      if ((v95 & 1) == 0) {
        goto LABEL_104;
      }
LABEL_27:
      uint64_t v99 = *(void *)(v96 + 56);
      uint64_t v100 = 8 * v91;
      swift_release();
      *(void *)(v99 + v100) = v62;
      uint64_t v52 = v168;
LABEL_105:
      *(void *)(v58 + 16) = v96;
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v60);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of ICUDateIntervalFormatter??((uint64_t)v175);
      swift_release();
      unint64_t v61 = v170;
LABEL_106:
      outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v52, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      if (!v62) {
        goto LABEL_129;
      }
      type metadata accessor for ICUNumberFormatterBase.FormatResult();
      swift_initStackObject();
      uint64_t v146 = ICUNumberFormatterBase.FormatResult.init(formatter:value:)();
      if (v61)
      {

LABEL_128:
        swift_release();
        goto LABEL_129;
      }
      MEMORY[0x1F4188790](v146);
      LODWORD(v176[0]) = 0;
      uint64_t v147 = unumf_resultToString();
      if (LODWORD(v176[0]) != 15)
      {
        if (SLODWORD(v176[0]) > 0 || (int)v147 <= 0) {
          goto LABEL_127;
        }
        Swift::String v106 = specialized String.init(_utf16:)((uint64_t)&v159[-64], v147);
        char v108 = v153;
        goto LABEL_120;
      }
      uint64_t v148 = v147 + 1;
      if (!__OFADD__(v147, 1))
      {
        if ((v148 & 0x80000000) == 0)
        {
          if (v148 < 513 || (uint64_t v147 = swift_stdlib_isStackAllocationSafe(), (v147 & 1) != 0))
          {
            MEMORY[0x1F4188790](v147);
            char v150 = &v159[-v149];
            LODWORD(v174[0]) = 0;
            uint64_t v151 = unumf_resultToString();
            if (SLODWORD(v174[0]) <= 0 && v151 > 0)
            {
              Swift::String v106 = specialized String.init(_utf16:)((uint64_t)v150, v151);
              char v108 = v152;
              goto LABEL_120;
            }
LABEL_127:
            swift_release();
            goto LABEL_128;
          }
          uint64_t v154 = swift_slowAlloc();
          LODWORD(v174[0]) = 0;
          uint64_t v155 = unumf_resultToString();
          if (SLODWORD(v174[0]) > 0 || v155 <= 0)
          {
            MEMORY[0x185309510](v154, -1, -1);
            goto LABEL_127;
          }
          Swift::String v106 = specialized String.init(_utf16:)(v154, v155);
          char v108 = v156;
          MEMORY[0x185309510](v154, -1, -1);
LABEL_120:
          swift_release();
          swift_release();
          if (v108)
          {
LABEL_130:
            uint64_t v125 = &demangling cache variable for type metadata for IntegerFormatStyle<Int>.Currency;
            uint64_t v126 = v169;
            goto LABEL_131;
          }
LABEL_129:
          v176[0] = v172;
          lazy protocol witness table accessor for type Int and conformance Int();
          Swift::String v106 = String.init<A>(_:radix:uppercase:)();
          char v108 = v157;
          goto LABEL_130;
        }
LABEL_138:
        __break(1u);
      }
      goto LABEL_135;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      Swift::String v96 = v89;
      if (v90) {
        goto LABEL_27;
      }
LABEL_104:
      uint64_t v144 = v162;
      uint64_t v145 = v91;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0((uint64_t)v52, (uint64_t)v162, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
      specialized _NativeDictionary._insert(at:key:value:)(v145, (uint64_t)v144, (uint64_t)v62, (void *)v96);
      goto LABEL_105;
    }
  }
  uint64_t v160 = v90;
  uint64_t v163 = v91;
  BOOL v164 = v68;
  uint64_t v165 = v58 + 24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUCurrencyNumberFormatter.Signature, ICUCurrencyNumberFormatter?>);
  uint64_t v127 = static _DictionaryStorage.copy(original:)();
  Swift::String v96 = v127;
  if (!*(void *)(v89 + 16))
  {
LABEL_103:
    swift_bridgeObjectRelease();
    unint64_t v87 = v173;
    uint64_t v52 = v168;
    uint64_t v60 = (os_unfair_lock_s *)v165;
    uint64_t v91 = v163;
    if (v160) {
      goto LABEL_27;
    }
    goto LABEL_104;
  }
  uint64_t v128 = (int *)(v127 + 64);
  BOOL v129 = 1 << *(unsigned char *)(v96 + 32);
  uint64_t v167 = (int *)(v89 + 64);
  char v130 = (unint64_t)(v129 + 63) >> 6;
  if (v96 != v89 || v128 >= &v167[2 * v130]) {
    memmove(v128, v167, 8 * v130);
  }
  uint64_t v171 = 0;
  *(void *)(v96 + 16) = *(void *)(v89 + 16);
  uint64_t v131 = 1 << *(unsigned char *)(v89 + 32);
  uint64_t v132 = -1;
  if (v131 < 64) {
    uint64_t v132 = ~(-1 << v131);
  }
  uint64_t v133 = v132 & *(void *)(v89 + 64);
  uint64_t v166 = (unsigned char *)((unint64_t)(v131 + 63) >> 6);
  uint64_t v134 = v162;
  while (1)
  {
    if (v133)
    {
      uint64_t v135 = __clz(__rbit64(v133));
      v133 &= v133 - 1;
      uint64_t v136 = v135 | (v171 << 6);
      goto LABEL_79;
    }
    char v140 = (unsigned char *)(v171 + 1);
    if (__OFADD__(v171, 1))
    {
      __break(1u);
      goto LABEL_140;
    }
    if ((uint64_t)v140 >= (uint64_t)v166) {
      goto LABEL_103;
    }
    uint64_t v141 = *(void *)&v167[2 * (void)v140];
    uint64_t v142 = v171 + 1;
    if (!v141)
    {
      uint64_t v142 = v171 + 2;
      if (v171 + 2 >= (uint64_t)v166) {
        goto LABEL_103;
      }
      uint64_t v141 = *(void *)&v167[2 * v142];
      if (!v141)
      {
        uint64_t v142 = v171 + 3;
        if (v171 + 3 >= (uint64_t)v166) {
          goto LABEL_103;
        }
        uint64_t v141 = *(void *)&v167[2 * v142];
        if (!v141)
        {
          uint64_t v142 = v171 + 4;
          if (v171 + 4 >= (uint64_t)v166) {
            goto LABEL_103;
          }
          uint64_t v141 = *(void *)&v167[2 * v142];
          if (!v141)
          {
            uint64_t v142 = v171 + 5;
            if (v171 + 5 >= (uint64_t)v166) {
              goto LABEL_103;
            }
            uint64_t v141 = *(void *)&v167[2 * v142];
            if (!v141)
            {
              uint64_t v142 = v171 + 6;
              if (v171 + 6 >= (uint64_t)v166) {
                goto LABEL_103;
              }
              uint64_t v141 = *(void *)&v167[2 * v142];
              if (!v141)
              {
                uint64_t v142 = v171 + 7;
                if (v171 + 7 >= (uint64_t)v166) {
                  goto LABEL_103;
                }
                uint64_t v141 = *(void *)&v167[2 * v142];
                if (!v141) {
                  break;
                }
              }
            }
          }
        }
      }
    }
LABEL_102:
    uint64_t v133 = (v141 - 1) & v141;
    uint64_t v171 = v142;
    uint64_t v136 = __clz(__rbit64(v141)) + (v142 << 6);
LABEL_79:
    uint64_t v137 = *(void *)(v161 + 72) * v136;
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV14CodableStorageOWOcTm_0(*(void *)(v89 + 48) + v137, (uint64_t)v134, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    uint64_t v138 = 8 * v136;
    uint64_t v139 = *(void *)(*(void *)(v89 + 56) + 8 * v136);
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0((uint64_t)v134, *(void *)(v96 + 48) + v137, type metadata accessor for ICUCurrencyNumberFormatter.Signature);
    *(void *)(*(void *)(v96 + 56) + v138) = v139;
    swift_retain();
  }
  uint64_t v143 = v171 + 8;
  if (v171 + 8 >= (uint64_t)v166) {
    goto LABEL_103;
  }
  uint64_t v141 = *(void *)&v167[2 * v143];
  if (v141)
  {
    uint64_t v142 = v171 + 8;
    goto LABEL_102;
  }
  while (1)
  {
    uint64_t v142 = v143 + 1;
    if (__OFADD__(v143, 1)) {
      break;
    }
    if (v142 >= (uint64_t)v166) {
      goto LABEL_103;
    }
    uint64_t v141 = *(void *)&v167[2 * v142];
    ++v143;
    if (v141) {
      goto LABEL_102;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  void (*v22)(uint64_t *__return_ptr, uint64_t, uint64_t);
  int v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  os_unfair_lock_s *v31;
  void *v32;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  char v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char v60;
  void *v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  const void *v74;
  uint64_t v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t *v80;
  uint64_t isStackAllocationSafe;
  int v82;
  uint64_t v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  Swift::String v98;
  id v99;
  id v100;
  id v101;
  void *v102;
  void *v103;
  Swift::String v104;
  uint64_t result;
  void v106[10];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  os_unfair_lock_s *v150;
  uint64_t v151;
  int64_t v152;
  char *v153;
  uint64_t v154;
  os_unfair_lock_s *v155;
  os_unfair_lock_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  long long v163;
  void *v164;
  int v165;
  __int16 v166;
  uint64_t v167[49];
  void v168[49];
  uint64_t v169[44];
  uint64_t v170[49];
  long long v171;
  long long v172;
  long long v173;
  __int16 v174;
  uint64_t v175[49];
  char v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  __int16 v180;
  int v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  uint64_t v185;

  uint64_t v185 = *MEMORY[0x1E4F143B8];
  long long v9 = *(_OWORD *)(a3 + 64);
  uint64_t v171 = *(_OWORD *)(a3 + 48);
  uint64_t v172 = v9;
  uint64_t v173 = *(_OWORD *)(a3 + 80);
  uint64_t v174 = *(_WORD *)(a3 + 96);
  uint64_t v163 = *(_OWORD *)a3;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v158 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 40);
  uint64_t v159 = *(void *)(a3 + 32);
  uint64_t v160 = v10;
  outlined retain of Date.IntervalFormatStyle(a3);
  swift_unknownObjectRetain();
  outlined release of Locale((uint64_t)&v163);
  v175[0] = a1;
  v175[1] = a2;
  uint64_t v12 = Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)(v175);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v12 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    uint64_t v15 = v13;
    uint64_t v161 = v12;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v176 = 3;
    uint64_t v177 = 0;
    uint64_t v178 = 50332931;
    uint64_t v179 = 0;
    uint64_t v180 = 1;
    uint64_t v181 = 591363;
    uint64_t v182 = 513;
    uint64_t v183 = 0;
    uint64_t v184 = 3327;
    v175[0] = a1;
    v175[1] = a2;
    uint64_t v161 = Date.FormatStyle.DateFieldCollection.formatterTemplate(overridingDayPeriodWithLocale:)(v175);
    uint64_t v15 = v16;
  }
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 64);
  swift_unknownObjectRetain();
  uint64_t v19 = v18(ObjectType, a2);
  Locale.Components.init(identifier:)(v19, v20, v175);
  v170[0] = a1;
  v170[1] = a2;
  Locale.Components.applyPreferencesOverride(_:)(v170);
  uint64_t v157 = a1;
  swift_unknownObjectRelease();
  memcpy(v169, v175, sizeof(v169));
  uint64_t v21 = swift_getObjectType();
  uint64_t v22 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 24);
  outlined retain of Locale.Components(v169);
  swift_unknownObjectRetain();
  v22(v175, v21, v11);
  swift_unknownObjectRelease();
  uint64_t v23 = LOBYTE(v175[0]);
  uint64_t v24 = swift_getObjectType();
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v158 + 32);
  swift_unknownObjectRetain();
  uint64_t v26 = v25(v24, v158);
  uint64_t v28 = v27;
  swift_unknownObjectRelease();
  memcpy(v170, v169, 0x160uLL);
  LODWORD(v158) = v23;
  LOBYTE(v170[44]) = v23;
  uint64_t v154 = v26;
  v170[45] = v26;
  v170[46] = v28;
  v170[47] = v161;
  v170[48] = v15;
  uint64_t v29 = one-time initialization token for cache;
  swift_bridgeObjectRetain();
  uint64_t v30 = v15;
  if (v29 != -1) {
    swift_once();
  }
  uint64_t v31 = (os_unfair_lock_s *)unk_1E8EDF4E0;
  uint64_t v149 = static ICUDateIntervalFormatter.cache;
  uint64_t v32 = memcpy(v168, v170, sizeof(v168));
  MEMORY[0x1F4188790](v32);
  v106[6] = v168;
  swift_retain_n();
  os_unfair_lock_lock(v31 + 6);
  char v150 = v31 + 4;
  char isUniquelyReferenced_nonNull_native = 0;
  _s10Foundation14FormatterCacheV9formatter3for7creatorq_x_q_yKXEtKFq_SgSDyxq_GzYbXEfU_AA015ICUDateIntervalB0C9SignatureV_AJSgTG5TA_0((uint64_t)&v31[4], v175);
  uint64_t v156 = v31 + 6;
  os_unfair_lock_unlock(v31 + 6);
  swift_release();
  uint64_t v34 = v175[0];
  if (v175[0] != 1) {
    goto LABEL_77;
  }
  uint64_t v155 = v31;
  v106[9] = type metadata accessor for ICUDateIntervalFormatter();
  uint64_t v147 = swift_allocObject();
  uint64_t v148 = v30;
  uint64_t v146 = v28;
  uint64_t v151 = v169[26];
  uint64_t v152 = v169[27];
  uint64_t v153 = (char *)v169[28];
  uint64_t v107 = v169[0];
  char v108 = v169[1];
  v175[0] = v169[0];
  v175[1] = v169[1];
  uint64_t v109 = v169[2];
  uint64_t v110 = v169[3];
  v175[2] = v169[2];
  v175[3] = v169[3];
  uint64_t v111 = v169[4];
  v175[4] = v169[4];
  uint64_t v113 = v169[5];
  v175[5] = v169[5];
  uint64_t v115 = v169[6];
  v175[6] = v169[6];
  uint64_t v117 = v169[7];
  v175[7] = v169[7];
  uint64_t v119 = v169[8];
  v175[8] = v169[8];
  uint64_t v121 = v169[9];
  v175[9] = v169[9];
  uint64_t v35 = v169[29];
  uint64_t v123 = v169[10];
  v175[10] = v169[10];
  uint64_t v125 = v169[11];
  v175[11] = v169[11];
  LOBYTE(v175[12]) = v158;
  uint64_t v128 = v169[14];
  BOOL v129 = v169[13];
  v175[13] = v169[13];
  v175[14] = v169[14];
  uint64_t v134 = v169[15];
  uint64_t v135 = v169[16];
  v175[15] = v169[15];
  v175[16] = v169[16];
  uint64_t v136 = v169[17];
  uint64_t v137 = v169[18];
  v175[17] = v169[17];
  v175[18] = v169[18];
  uint64_t v138 = v169[19];
  uint64_t v139 = v169[20];
  v175[19] = v169[19];
  v175[20] = v169[20];
  char v140 = v169[21];
  uint64_t v141 = v169[22];
  v175[21] = v169[21];
  v175[22] = v169[22];
  uint64_t v142 = v169[23];
  uint64_t v143 = v169[24];
  v175[23] = v169[23];
  v175[24] = v169[24];
  uint64_t v144 = LOBYTE(v169[25]);
  LOWORD(v175[25]) = v169[25];
  uint64_t v145 = BYTE1(v169[25]);
  v175[26] = v169[26];
  v175[27] = v169[27];
  v175[28] = v169[28];
  v175[29] = v169[29];
  uint64_t v36 = v169[30];
  v175[30] = v169[30];
  uint64_t v112 = v169[31];
  v175[31] = v169[31];
  uint64_t v114 = v169[32];
  v175[32] = v169[32];
  uint64_t v116 = v169[33];
  v175[33] = v169[33];
  uint64_t v118 = v169[34];
  v175[34] = v169[34];
  uint64_t v120 = v169[35];
  v175[35] = v169[35];
  char v122 = v169[36];
  v175[36] = v169[36];
  uint64_t v124 = v169[37];
  v175[37] = v169[37];
  uint64_t v126 = v169[38];
  v175[38] = v169[38];
  uint64_t v127 = v169[39];
  v175[39] = v169[39];
  char v130 = v169[40];
  v175[40] = v169[40];
  uint64_t v131 = v169[41];
  v175[41] = v169[41];
  uint64_t v132 = v169[42];
  v175[42] = v169[42];
  uint64_t v133 = v169[43];
  v175[43] = v169[43];
  outlined retain of Locale.Components(v169);
  outlined retain of ICUDateIntervalFormatter.Signature(v170);
  Locale.Components.icuIdentifier.getter();
  swift_bridgeObjectRetain();
  uint64_t v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v154, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v38 = specialized _copyCollectionToContiguousArray<A>(_:)(v161, v30);
  swift_bridgeObjectRelease();
  outlined release of ICUDateIntervalFormatter.Signature(v170);
  uint64_t v162 = 0;
  uint64_t v39 = v38[2];
  if (v39 >> 31)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v154 = v36;
  uint64_t v161 = v35;
  if (v37[2] >> 31)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  String.utf8CString.getter();
  uint64_t v30 = udtitvfmt_open();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v34 = v147;
  char isUniquelyReferenced_nonNull_native = (uint64_t)v155;
  if (!v30) {
    goto LABEL_23;
  }
  *(void *)(v147 + 16) = v30;
  udtitvfmt_setAttribute();
  LODWORD(v30) = v162;
  if (v162 <= 0) {
    goto LABEL_22;
  }
  if (one-time initialization token for logger != -1) {
    goto LABEL_101;
  }
  while (1)
  {
    unint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static ICUError.logger);
    uint64_t v48 = Logger.logObject.getter();
    uint64_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      v175[0] = v51;
      *(_DWORD *)uint64_t v50 = 136315394;
      v167[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001823AF010, v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 12) = 2080;
      uint64_t v52 = ICUError.debugDescription.getter((UErrorCode)v30);
      v167[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v52, v53, v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_181795000, v48, v49, "%s. Error: %s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      char isUniquelyReferenced_nonNull_native = (uint64_t)v155;
      MEMORY[0x185309510](v51, -1, -1);
      MEMORY[0x185309510](v50, -1, -1);
    }

LABEL_22:
    v175[0] = v107;
    v175[1] = v108;
    v175[2] = v109;
    v175[3] = v110;
    v175[4] = v111;
    v175[5] = v113;
    v175[6] = v115;
    v175[7] = v117;
    v175[8] = v119;
    v175[9] = v121;
    v175[10] = v123;
    v175[11] = v125;
    LOBYTE(v175[12]) = v158;
    v175[13] = v129;
    v175[14] = v128;
    *(_DWORD *)((char *)&v175[12] + 1) = v164;
    HIDWORD(v175[12]) = *(_DWORD *)((char *)&v164 + 3);
    v175[15] = v134;
    v175[16] = v135;
    v175[17] = v136;
    v175[18] = v137;
    v175[19] = v138;
    v175[20] = v139;
    v175[21] = v140;
    v175[22] = v141;
    v175[23] = v142;
    v175[24] = v143;
    LOBYTE(v175[25]) = v144;
    BYTE1(v175[25]) = v145;
    HIWORD(v175[25]) = v166;
    *(_DWORD *)((char *)&v175[25] + 2) = v165;
    v175[26] = v151;
    v175[27] = v152;
    v175[28] = (uint64_t)v153;
    v175[29] = v161;
    v175[30] = v154;
    v175[31] = v112;
    v175[32] = v114;
    v175[33] = v116;
    v175[34] = v118;
    v175[35] = v120;
    v175[36] = v122;
    v175[37] = v124;
    v175[38] = v126;
    v175[39] = v127;
    v175[40] = v130;
    v175[41] = v131;
    v175[42] = v132;
    v175[43] = v133;
    outlined release of Locale.Components(v175);
    while (1)
    {
      swift_retain();
      os_unfair_lock_lock(v156);
      unint64_t v54 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
      memcpy(v175, v168, sizeof(v175));
      unint64_t v55 = v150;
      if (v149 >= *(void *)(v54 + 16)) {
        swift_bridgeObjectRetain();
      }
      else {
        *(void *)&v150->_os_unfair_lock_opaque = MEMORY[0x1E4FBC868];
      }
      outlined retain of ICUDateIntervalFormatter.Signature(v175);
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      BOOL v164 = *(void **)&v55->_os_unfair_lock_opaque;
      uint64_t v37 = v164;
      *(void *)&v55->_os_unfair_lock_opaque = 0x8000000000000000;
      uint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v175);
      unint64_t v57 = v37[2];
      BOOL v58 = (v56 & 1) == 0;
      uint64_t v59 = v57 + v58;
      if (!__OFADD__(v57, v58)) {
        break;
      }
LABEL_37:
      __break(1u);
      swift_once();
      int v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static ICUError.logger);
      uint64_t v41 = Logger.logObject.getter();
      unint64_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v44 = swift_slowAlloc();
        v175[0] = v44;
        *(_DWORD *)uint64_t v43 = 136315394;
        v167[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x80000001823A9B60, v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 12) = 2080;
        uint64_t v45 = ICUError.debugDescription.getter((UErrorCode)v37);
        v167[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v45, v46, v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_181795000, v41, v42, "%s. Error: %s", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x185309510](v44, -1, -1);
        MEMORY[0x185309510](v43, -1, -1);
      }

      char isUniquelyReferenced_nonNull_native = (uint64_t)v155;
      if (v39) {
        udtitvfmt_close();
      }
LABEL_23:
      v175[0] = v107;
      v175[1] = v108;
      v175[2] = v109;
      v175[3] = v110;
      v175[4] = v111;
      v175[5] = v113;
      v175[6] = v115;
      v175[7] = v117;
      v175[8] = v119;
      v175[9] = v121;
      v175[10] = v123;
      v175[11] = v125;
      LOBYTE(v175[12]) = v158;
      v175[13] = v129;
      v175[14] = v128;
      *(_DWORD *)((char *)&v175[12] + 1) = v164;
      HIDWORD(v175[12]) = *(_DWORD *)((char *)&v164 + 3);
      v175[15] = v134;
      v175[16] = v135;
      v175[17] = v136;
      v175[18] = v137;
      v175[19] = v138;
      v175[20] = v139;
      v175[21] = v140;
      v175[22] = v141;
      v175[23] = v142;
      v175[24] = v143;
      LOBYTE(v175[25]) = v144;
      BYTE1(v175[25]) = v145;
      HIWORD(v175[25]) = v166;
      *(_DWORD *)((char *)&v175[25] + 2) = v165;
      v175[26] = v151;
      v175[27] = v152;
      v175[28] = (uint64_t)v153;
      v175[29] = v161;
      v175[30] = v154;
      v175[31] = v112;
      v175[32] = v114;
      v175[33] = v116;
      v175[34] = v118;
      v175[35] = v120;
      v175[36] = v122;
      v175[37] = v124;
      v175[38] = v126;
      v175[39] = v127;
      v175[40] = v130;
      v175[41] = v131;
      v175[42] = v132;
      v175[43] = v133;
      outlined release of Locale.Components(v175);
      swift_deallocPartialClassInstance();
      uint64_t v34 = 0;
    }
    uint64_t v60 = v56;
    if (v37[3] >= v59) {
      break;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v59, isUniquelyReferenced_nonNull_native);
    unint64_t v61 = v164;
    char v62 = specialized __RawDictionaryStorage.find<A>(_:)((unsigned __int8 *)v175);
    if ((v60 & 1) != (v63 & 1)) {
      goto LABEL_104;
    }
    uint64_t v39 = v62;
    if ((v60 & 1) == 0)
    {
LABEL_75:
      specialized _NativeDictionary._insert(at:key:value:)(v39, v175, v34, v61);
      outlined retain of ICUDateIntervalFormatter.Signature(v175);
      goto LABEL_76;
    }
LABEL_34:
    char isUniquelyReferenced_nonNull_native = v61[7];
    swift_release();
    *(void *)(isUniquelyReferenced_nonNull_native + 8 * v39) = v34;
LABEL_76:
    LODWORD(v30) = v148;
    *(void *)&v155[4]._os_unfair_lock_opaque = v61;
    swift_bridgeObjectRelease();
    outlined release of ICUDateIntervalFormatter.Signature(v175);
    os_unfair_lock_unlock(v156);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of ICUDateIntervalFormatter??(1);
LABEL_77:
    outlined release of Locale.Components(v169);
    swift_release();
    swift_bridgeObjectRelease();
    long long v80 = outlined release of ICUDateIntervalFormatter.Signature(v170);
    if (!v34) {
      goto LABEL_97;
    }
    MEMORY[0x1F4188790](v80);
    LODWORD(v168[0]) = 0;
    Swift::Int isStackAllocationSafe = udtitvfmt_format();
    if (LODWORD(v168[0]) != 15)
    {
      if (SLODWORD(v168[0]) <= 0 && (int)isStackAllocationSafe > 0)
      {
        Swift::Int v86 = specialized String.init(_utf16:)((uint64_t)v106, isStackAllocationSafe);
        Swift::String v88 = v89;
        goto LABEL_89;
      }
LABEL_96:
      swift_release();
      goto LABEL_97;
    }
    uint64_t v82 = isStackAllocationSafe + 1;
    if (__OFADD__(isStackAllocationSafe, 1))
    {
      __break(1u);
    }
    else if ((v82 & 0x80000000) == 0)
    {
      if (v82 < 513 || (Swift::Int isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
      {
        MEMORY[0x1F4188790](isStackAllocationSafe);
        long long v84 = (char *)v106 - v83;
        LODWORD(v167[0]) = 0;
        uint64_t v85 = udtitvfmt_format();
        if (SLODWORD(v167[0]) <= 0 && v85 >= 1)
        {
          Swift::Int v86 = specialized String.init(_utf16:)((uint64_t)v84, v85);
          Swift::String v88 = v87;
          goto LABEL_89;
        }
        goto LABEL_96;
      }
      id v90 = swift_slowAlloc();
      LODWORD(v167[0]) = 0;
      uint64_t v91 = udtitvfmt_format();
      if (SLODWORD(v167[0]) > 0 || v91 < 1)
      {
        MEMORY[0x185309510](v90, -1, -1);
        goto LABEL_96;
      }
      Swift::Int v86 = specialized String.init(_utf16:)(v90, v91);
      Swift::String v88 = v92;
      MEMORY[0x185309510](v90, -1, -1);
LABEL_89:
      swift_release();
      if (v88)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
LABEL_97:
        id v93 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, a4);
        uint64_t v94 = objc_msgSend(v93, sel_description);

        uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        uint64_t v97 = v96;

        v168[0] = v95;
        v168[1] = v97;
        v98._uint64_t countAndFlagsBits = 2108704;
        v98._unint64_t object = (void *)0xE300000000000000;
        String.append(_:)(v98);
        uint64_t v99 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9C8]), sel_initWithTimeIntervalSinceReferenceDate_, a5);
        uint64_t v100 = objc_msgSend(v99, sel_description);

        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
        uint64_t v103 = v102;

        v104._uint64_t countAndFlagsBits = (uint64_t)v101;
        v104._unint64_t object = v103;
        String.append(_:)(v104);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        Swift::Int v86 = v168[0];
        Swift::String v88 = v168[1];
      }
      v168[0] = v86;
      v168[1] = v88;
      return String.init<A>(_:)();
    }
    __break(1u);
LABEL_101:
    swift_once();
  }
  if (isUniquelyReferenced_nonNull_native)
  {
    unint64_t v61 = v37;
    if ((v56 & 1) == 0) {
      goto LABEL_75;
    }
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ICUDateIntervalFormatter.Signature, ICUDateIntervalFormatter?>);
  int64_t v64 = static _DictionaryStorage.copy(original:)();
  unint64_t v61 = (void *)v64;
  if (!v37[2])
  {
LABEL_74:
    swift_bridgeObjectRelease();
    if ((v60 & 1) == 0) {
      goto LABEL_75;
    }
    goto LABEL_34;
  }
  uint64_t v147 = v34;
  uint64_t v65 = (char *)(v64 + 64);
  int64_t v66 = 1 << *((unsigned char *)v61 + 32);
  uint64_t v153 = (char *)(v37 + 8);
  long long v67 = (unint64_t)(v66 + 63) >> 6;
  if (v61 != v37 || v65 >= &v153[8 * v67]) {
    memmove(v65, v153, 8 * v67);
  }
  long long v68 = 0;
  v61[2] = v37[2];
  uint64_t v69 = 1 << *((unsigned char *)v37 + 32);
  long long v70 = -1;
  if (v69 < 64) {
    long long v70 = ~(-1 << v69);
  }
  long long v71 = v70 & v37[8];
  uint64_t v152 = (unint64_t)(v69 + 63) >> 6;
  while (2)
  {
    uint64_t v34 = v147;
    if (v71)
    {
      uint64_t v158 = (v71 - 1) & v71;
      uint64_t v161 = v68;
      long long v72 = __clz(__rbit64(v71)) | (v68 << 6);
LABEL_46:
      uint64_t v73 = 392 * v72;
      id v74 = (const void *)(v37[6] + 392 * v72);
      memcpy(v167, v74, sizeof(v167));
      long long v75 = 8 * v72;
      uint64_t v154 = *(void *)(v37[7] + v75);
      memmove((void *)(v61[6] + v73), v74, 0x188uLL);
      char isUniquelyReferenced_nonNull_native = v154;
      *(void *)(v61[7] + v75) = v154;
      outlined retain of ICUDateIntervalFormatter.Signature(v167);
      swift_retain();
      long long v68 = v161;
      long long v71 = v158;
      continue;
    }
    break;
  }
  long long v76 = v68 + 1;
  if (__OFADD__(v68, 1))
  {
    __break(1u);
    goto LABEL_103;
  }
  if (v76 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v76];
  uint64_t v78 = v68 + 1;
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 1;
  if (v76 + 1 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 2;
  if (v76 + 2 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 3;
  if (v76 + 3 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 4;
  if (v76 + 4 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 5;
  if (v76 + 5 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 6;
  if (v76 + 6 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 7;
  if (v76 + 7 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77) {
    goto LABEL_73;
  }
  uint64_t v78 = v76 + 8;
  if (v76 + 8 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v78];
  if (v77)
  {
LABEL_73:
    uint64_t v158 = (v77 - 1) & v77;
    uint64_t v161 = v78;
    long long v72 = __clz(__rbit64(v77)) + (v78 << 6);
    goto LABEL_46;
  }
  long long v79 = v76 + 9;
  if (v79 >= v152) {
    goto LABEL_74;
  }
  long long v77 = *(void *)&v153[8 * v79];
  if (v77)
  {
    uint64_t v78 = v79;
    goto LABEL_73;
  }
  while (1)
  {
    uint64_t v78 = v79 + 1;
    if (__OFADD__(v79, 1)) {
      break;
    }
    uint64_t v34 = v147;
    if (v78 >= v152) {
      goto LABEL_74;
    }
    long long v77 = *(void *)&v153[8 * v78];
    ++v79;
    if (v77) {
      goto LABEL_73;
    }
  }
LABEL_103:
  __break(1u);
LABEL_104:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, long long *a3, double a4)
{
  long long v7 = a3[5];
  long long v83 = a3[4];
  long long v84 = v7;
  v85[0] = a3[6];
  *(_OWORD *)((char *)v85 + 10) = *(long long *)((char *)a3 + 106);
  long long v8 = a3[1];
  long long v79 = *a3;
  long long v80 = v8;
  long long v9 = a3[3];
  long long v81 = a3[2];
  long long v82 = v9;
  double v66 = a4;
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a3, v67);
  outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v67, v68);
  switch(_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOg((uint64_t)v68))
  {
    case 1u:
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v68);
      long long v27 = a3[5];
      long long v63 = a3[4];
      long long v64 = v27;
      v65[0] = a3[6];
      *(_OWORD *)((char *)v65 + 10) = *(long long *)((char *)a3 + 106);
      long long v28 = a3[1];
      long long v59 = *a3;
      long long v60 = v28;
      long long v29 = a3[3];
      long long v61 = a3[2];
      long long v62 = v29;
      outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)a3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      long long v76 = v83;
      long long v77 = v84;
      v78[0] = v85[0];
      *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)((char *)v85 + 10);
      long long v72 = v79;
      long long v73 = v80;
      *(Foundation::Date *)&v26._Swift::Double time = (Foundation::Date)v81;
      long long v74 = v81;
      long long v75 = v82;
      goto LABEL_7;
    case 2u:
      uint64_t v16 = (_OWORD *)_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v68);
      long long v17 = v16[1];
      long long v18 = v16[2];
      long long v19 = v16[3];
      v69[0] = *v16;
      v69[1] = v17;
      v70[0] = v18;
      v70[1] = v19;
      long long v20 = v19;
      long long v37 = v17;
      long long v39 = v69[0];
      outlined init with take of LocalePreferences?((uint64_t)v70, (uint64_t)&v71, &demangling cache variable for type metadata for Locale?);
      outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)a3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      outlined release of Locale((uint64_t)&v71);
      long long v41 = v39;
      *(_OWORD *)unint64_t v42 = v37;
      *(void *)&v42[16] = a1;
      uint64_t v43 = a2;
      long long v44 = v20;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi1_((uint64_t)&v41);
      goto LABEL_5;
    case 3u:
      uint64_t v21 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v68);
      char v22 = *(unsigned char *)v21;
      __int16 v23 = *(_WORD *)(v21 + 1);
      v69[0] = *(_OWORD *)(v21 + 3);
      *(void *)((char *)v69 + 13) = *(void *)(v21 + 16);
      uint64_t v24 = *(void *)(v21 + 40);
      char v25 = v22 & 1;
      long long v71 = *(_OWORD *)((char *)v69 + 5);
      long long v40 = *(_OWORD *)(v21 + 24);
      outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)a3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      outlined release of Locale((uint64_t)&v71);
      LOBYTE(v41) = v25;
      *(_WORD *)((char *)&v41 + 1) = v23;
      *((void *)&v41 + 1) = a1;
      *(void *)unint64_t v42 = a2;
      *(_OWORD *)&v42[8] = v40;
      uint64_t v43 = v24;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi2_((uint64_t)&v41);
      goto LABEL_5;
    default:
      uint64_t v10 = _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOj0_((uint64_t)v68);
      long long v36 = *(_OWORD *)(v10 + 16);
      long long v38 = *(_OWORD *)v10;
      uint64_t v11 = *(void *)(v10 + 40);
      uint64_t v35 = *(void *)(v10 + 32);
      __int16 v12 = *(_WORD *)(v10 + 48);
      uint64_t v13 = *(void *)(v10 + 56);
      char v14 = *(unsigned char *)(v10 + 64);
      v69[0] = *(_OWORD *)(v10 + 65);
      *(void *)((char *)v69 + 15) = *(void *)(v10 + 80);
      char v34 = *(unsigned char *)(v10 + 120);
      char v15 = *(unsigned char *)(v10 + 121) & 1;
      long long v71 = *(_OWORD *)((char *)v69 + 7);
      long long v32 = *(_OWORD *)(v10 + 104);
      long long v33 = *(_OWORD *)(v10 + 88);
      outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)a3, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      swift_unknownObjectRetain();
      outlined release of Locale((uint64_t)&v71);
      long long v41 = v38;
      *(_OWORD *)unint64_t v42 = v36;
      *(void *)&v42[16] = v35;
      uint64_t v43 = v11;
      LOWORD(v44) = v12;
      *((void *)&v44 + 1) = v13;
      char v45 = v14 & 1;
      uint64_t v46 = a1;
      uint64_t v47 = a2;
      long long v48 = v33;
      long long v49 = v32;
      char v50 = v34;
      char v51 = v15;
      _sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleV0D033_52A34860FC1D9F87FB0A99C608112EB3LLOWOi_((uint64_t)&v41);
LABEL_5:
      outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(&v41, &v52);
      *(Foundation::Date *)&v26._Swift::Double time = (Foundation::Date)v56;
      long long v63 = v56;
      long long v64 = v57;
      v65[0] = v58[0];
      *(_OWORD *)((char *)v65 + 10) = *(_OWORD *)((char *)v58 + 10);
      long long v59 = (__int128)v52;
      long long v60 = v53;
      long long v61 = v54;
      long long v62 = v55;
      *(_OWORD *)((char *)v78 + 10) = *(_OWORD *)((char *)v58 + 10);
      long long v77 = v57;
      v78[0] = v58[0];
      long long v75 = v55;
      long long v76 = v56;
      long long v73 = v53;
      long long v74 = v54;
      long long v72 = (__int128)v52;
LABEL_7:
      Swift::String v30 = String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.format(_:)(v26);
      outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)&v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format);
      Swift::String v52 = v30;
      return String.init<A>(_:)();
  }
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle?);
  MEMORY[0x1F4188790](v10 - 8);
  __int16 v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v27);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  int v17 = swift_dynamicCast();
  long long v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v17)
  {
    v18(v12, 0, 1, v13);
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0((uint64_t)v12, (uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
    char v19 = specialized static String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle.Format.== infix(_:_:)(a2, (uint64_t)v16);
    outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v16, type metadata accessor for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle);
    char v20 = 0;
    if ((v19 & 1) == 0) {
      return v20 & 1;
    }
  }
  else
  {
    v18(v12, 1, 1, v13);
    outlined destroy of Any?((uint64_t)v12, &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DecimalArgumentFormatStyle?);
  }
  type metadata accessor for NSDecimal(0);
  uint64_t v29 = v21;
  v27[0] = a3;
  v27[1] = a4;
  int v28 = a5;
  uint64_t v22 = *(void *)(a1 + 56);
  __int16 v23 = __swift_project_boxed_opaque_existential_1((void *)(a1 + 32), v22);
  v26[3] = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v22 - 8) + 16))(boxed_opaque_existential_1, v23, v22);
  char v20 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v27, (uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
  return v20 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  long long v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  __int16 v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v8, 0, 1, v9);
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0((uint64_t)v8, (uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    char v15 = specialized static String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle.== infix(_:_:)(a2, (uint64_t)v12);
    outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle);
    char v16 = 0;
    if ((v15 & 1) == 0) {
      return v16 & 1;
    }
  }
  else
  {
    v14(v8, 1, 1, v9);
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.FloatingPointArgumentFormatStyle?);
  }
  v23[3] = MEMORY[0x1E4FBB3D0];
  *(double *)__int16 v23 = a3;
  int v17 = (void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 56);
  char v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
  v22[3] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(boxed_opaque_existential_1, v19, v18);
  char v16 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v23, (uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v16 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle?);
  MEMORY[0x1F4188790](v6 - 8);
  long long v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  __int16 v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1 + 64, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  int v13 = swift_dynamicCast();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v13)
  {
    v14(v8, 0, 1, v9);
    _sSS10FoundationE17LocalizationValueV14FormatArgumentV07DecimaleD5StyleVWObTm_0((uint64_t)v8, (uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    char v15 = specialized static String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle.== infix(_:_:)(a2, (uint64_t)v12);
    outlined destroy of String.LocalizationValue.FormatArgument.CodableStorage((uint64_t)v12, type metadata accessor for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle);
    char v16 = 0;
    if ((v15 & 1) == 0) {
      return v16 & 1;
    }
  }
  else
  {
    v14(v8, 1, 1, v9);
    outlined destroy of Any?((uint64_t)v8, &demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.IntegerArgumentFormatStyle?);
  }
  v23[3] = MEMORY[0x1E4FBB550];
  v23[0] = a3;
  int v17 = (void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 56);
  char v19 = __swift_project_boxed_opaque_existential_1(v17, v18);
  v22[3] = v18;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(boxed_opaque_existential_1, v19, v18);
  char v16 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v23, (uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return v16 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  long long v7 = *(_OWORD *)(a2 + 80);
  v46[4] = *(_OWORD *)(a2 + 64);
  v46[5] = v7;
  __int16 v47 = *(_WORD *)(a2 + 96);
  long long v8 = *(_OWORD *)(a2 + 16);
  v46[0] = *(_OWORD *)a2;
  v46[1] = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  v46[2] = *(_OWORD *)(a2 + 32);
  v46[3] = v9;
  outlined init with copy of Any(a1 + 64, (uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  if (!swift_dynamicCast()) {
    goto LABEL_4;
  }
  if (!(void)v17) {
    goto LABEL_4;
  }
  long long v32 = v17;
  uint64_t v33 = v18;
  uint64_t v34 = v19;
  uint64_t v35 = v20;
  uint64_t v36 = v21;
  char v37 = v22;
  uint64_t v38 = v23;
  int v39 = v24;
  uint64_t v40 = v25;
  __int16 v41 = v26 & 0x1FF;
  int v42 = v27;
  __int16 v43 = v28;
  uint64_t v44 = v29;
  __int16 v45 = v30;
  BOOL v10 = specialized static Date.IntervalFormatStyle.== infix(_:_:)(v46, &v32);
  outlined consume of Date.IntervalFormatStyle?(v17);
  if (!v10)
  {
    char v15 = 0;
  }
  else
  {
LABEL_4:
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Range<Date>);
    *(double *)&long long v32 = a3;
    *((double *)&v32 + 1) = a4;
    uint64_t v11 = (void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 56);
    int v13 = __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v19 = v12;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v17);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(boxed_opaque_existential_1, v13, v12);
    char v15 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)&v32, (uint64_t)&v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
  }
  return v15 & 1;
}

uint64_t specialized closure #2 in String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:)(uint64_t a1, long long *a2, double a3)
{
  outlined init with copy of Any(a1 + 64, (uint64_t)v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
  if (!swift_dynamicCast()) {
    goto LABEL_4;
  }
  destructiveProjectEnumData for PredicateCodableError(v19, v6);
  outlined init with take of LocalePreferences?((uint64_t)v19, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?);
  outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?);
  if (_sSS10FoundationE17LocalizationValueV14FormatArgumentV04DateeD5StyleVSgWOg((uint64_t)v18) == 1
    || (outlined init with take of LocalePreferences?((uint64_t)v17, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?), outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(a2, v21), outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v21, v15), outlined init with take of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format(v16, v14), char v7 = specialized static String.LocalizationValue.FormatArgument.DateArgumentFormatStyle.Format.== infix(_:_:)(v15, v14), outlined retain of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of String.LocalizationValue.FormatArgument.DateArgumentFormatStyle?), (v7 & 1) != 0))
  {
LABEL_4:
    v19[3] = &type metadata for Date;
    *(double *)uint64_t v19 = a3;
    long long v8 = (void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 56);
    BOOL v10 = __swift_project_boxed_opaque_existential_1(v8, v9);
    v18[3] = v9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, v10, v9);
    char v12 = specialized static String.LocalizationValue.FormatArgument.Storage._equalValues(_:_:)((uint64_t)v19, (uint64_t)v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  else
  {
    char v12 = 0;
  }
  return v12 & 1;
}

BOOL static String.LocalizationValue.Placeholder.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t specialized String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0;
  *(unsigned char *)(v11 + 32) = -2;
  outlined init with copy of String.LocalizationValue.FormatArgument.Storage(v5, (uint64_t)&v87);
  switch(v95)
  {
    case 1:
      uint64_t v31 = v87;
      if (a3)
      {
        uint64_t v32 = *((void *)&v87 + 1);
        uint64_t v33 = swift_retain();
        uint64_t v34 = specialized NSAttributedString.init<A>(_:including:)(v33);
        a1[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        a1[4] = lazy protocol witness table accessor for type NSNumber and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject, &lazy cache variable for type metadata for NSAttributedString);
        *a1 = v34;
        uint64_t result = swift_release();
        *(void *)a2 = v31;
        *(void *)(a2 + 8) = v32;
        *(unsigned char *)(a2 + 16) = 0;
        return result;
      }
      unsigned long long v57 = *(_OWORD *)(v87 + 32);
      long long v98 = *(_OWORD *)(v87 + 16);
      unsigned long long v99 = v57;
      long long v100 = *(_OWORD *)(v87 + 48);
      unsigned long long v104 = v57;
      long long v105 = v100;
      long long v103 = v98;
      outlined init with take of any PredicateExpression<Self.Output == B1>(&v103, (uint64_t)v96);
      outlined retain of Locale((uint64_t)v96);
      uint64_t v58 = MEMORY[0x185302050](&v98);
      uint64_t v60 = v59;
      a1[3] = MEMORY[0x1E4FBB1A0];
      a1[4] = lazy protocol witness table accessor for type String and conformance String();
      *a1 = v58;
      a1[1] = v60;
      swift_release();
      goto LABEL_29;
    case 2:
      long long v105 = v89;
      long long v106 = v90;
      long long v107 = v91;
      long long v108 = v92;
      long long v103 = v87;
      unsigned long long v104 = v88;
      *(void *)&long long v98 = a4;
      *((void *)&v98 + 1) = a5;
      uint64_t v22 = ((uint64_t (*)(long long *))v87)(&v98);
      uint64_t v24 = v23;
      a1[3] = MEMORY[0x1E4FBB1A0];
      a1[4] = lazy protocol witness table accessor for type String and conformance String();
      *a1 = v22;
      a1[1] = v24;
      getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v11, a3 & 1, a2);
      outlined destroy of String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper((uint64_t)&v103);
      return swift_release();
    case 3:
      long long v105 = v89;
      long long v106 = v90;
      long long v107 = v91;
      long long v108 = v92;
      long long v103 = v87;
      unsigned long long v104 = v88;
      *(void *)&long long v98 = a4;
      *((void *)&v98 + 1) = a5;
      ((void (*)(_OWORD **__return_ptr, long long *))v87)(&v86, &v98);
      if (a3)
      {
        getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v11, 1, (uint64_t)&v98);
        unsigned __int8 v26 = v99;
        if (v99 != 255)
        {
          long long v27 = v98;
          if (v99)
          {
            LOBYTE(v96[0]) = 0;
            AttributedString.mergeAttributes(_:mergePolicy:)((uint64_t *)&v98, (char *)v96);
          }
          outlined consume of String.LocalizationValue.FormatArgument._AttributeFixup?(v27, *((uint64_t *)&v27 + 1), v26);
        }
        __int16 v28 = v86;
        uint64_t v29 = swift_retain();
        uint64_t v30 = specialized NSAttributedString.init<A>(_:including:)(v29);
        a1[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        a1[4] = lazy protocol witness table accessor for type NSNumber and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject, &lazy cache variable for type metadata for NSAttributedString);
        *a1 = v30;
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v103);
        uint64_t result = swift_release();
        *(void *)a2 = v28;
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = 0;
      }
      else
      {
        unsigned long long v53 = v86[2];
        v96[0] = v86[1];
        v96[1] = v53;
        long long v97 = v86[3];
        long long v98 = v96[0];
        unsigned long long v99 = v53;
        long long v100 = v97;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v98, (uint64_t)v111);
        outlined retain of Locale((uint64_t)v111);
        uint64_t v54 = MEMORY[0x185302050](v96);
        uint64_t v56 = v55;
        a1[3] = MEMORY[0x1E4FBB1A0];
        a1[4] = lazy protocol witness table accessor for type String and conformance String();
        *a1 = v54;
        a1[1] = v56;
        swift_release();
        outlined destroy of String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper((uint64_t)&v103);
LABEL_29:
        uint64_t result = swift_release();
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(unsigned char *)(a2 + 16) = -1;
      }
      return result;
    case 4:
      long long v80 = a1;
      uint64_t v84 = a2;
      uint64_t v12 = *((void *)&v87 + 1);
      long long v81 = (void *)*((void *)&v88 + 1);
      uint64_t v13 = v88;
      uint64_t v82 = a5;
      uint64_t v14 = (_OWORD *)v89;
      uint64_t v76 = v87;
      uint64_t v77 = *((void *)&v89 + 1);
      uint64_t v15 = v90;
      char v16 = (void *)*((void *)&v91 + 1);
      long long v17 = v92;
      uint64_t v78 = v93;
      uint64_t v83 = v94;
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      uint64_t v18 = v12;
      uint64_t v19 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      id v20 = v16;
      swift_retain();
      swift_retain();
      swift_unknownObjectRelease();
      if (a3)
      {
        *(void *)&long long v103 = v76;
        *((void *)&v103 + 1) = v18;
        unsigned long long v104 = __PAIR128__((unint64_t)v81, v19);
        *(void *)&long long v105 = v14;
        *((void *)&v105 + 1) = v77;
        *(void *)&long long v106 = v15;
        *((void *)&v106 + 1) = a4;
        *(void *)&long long v107 = v82;
        *((void *)&v107 + 1) = v20;
        long long v108 = v17;
        uint64_t v109 = v78;
        uint64_t v110 = v83;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        long long v98 = 0uLL;
        LOWORD(v99) = 1;
        *((void *)&v99 + 1) = 0;
        LOWORD(v100) = 256;
        *((void *)&v100 + 1) = 0;
        uint64_t v101 = 0;
        char v102 = 0;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        id v79 = v20;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        specialized LocalizedStringResource._withExtensionForBundle<A>(_:)((uint64_t)&v103, (uint64_t)&v98, (uint64_t)&v103, (NSObject **)v96);
        uint64_t v21 = *(void *)&v96[0];
        if (*(void *)&v96[0])
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)&v98, 0, 0, 0, a4, v82, 0, v19, v81, v14);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();

          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          uint64_t v21 = *(void *)&v96[0];
        }
        uint64_t v70 = swift_retain();
        uint64_t v71 = specialized NSAttributedString.init<A>(_:including:)(v70);
        v80[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        v80[4] = lazy protocol witness table accessor for type NSNumber and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject, &lazy cache variable for type metadata for NSAttributedString);
        *long long v80 = v71;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)uint64_t v84 = v21;
        *(void *)(v84 + 8) = 0;
        *(unsigned char *)(v84 + 16) = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)&long long v103 = v76;
        *((void *)&v103 + 1) = v18;
        unsigned long long v104 = __PAIR128__((unint64_t)v81, v19);
        *(void *)&long long v105 = v14;
        *((void *)&v105 + 1) = v77;
        *(void *)&long long v106 = v15;
        *((void *)&v106 + 1) = a4;
        *(void *)&long long v107 = v82;
        *((void *)&v107 + 1) = v20;
        long long v108 = v17;
        uint64_t v109 = v78;
        uint64_t v110 = v83;
        long long v98 = 0uLL;
        LOWORD(v99) = 256;
        *((void *)&v99 + 1) = 0;
        *(void *)&long long v100 = 0;
        BYTE8(v100) = 0;
        long long v49 = v20;
        uint64_t v50 = specialized String.init(localized:options:)(&v103, &v98);
        uint64_t v52 = v51;
        v80[3] = MEMORY[0x1E4FBB1A0];
        v80[4] = lazy protocol witness table accessor for type String and conformance String();
        *long long v80 = v50;
        v80[1] = v52;
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
        *(void *)uint64_t v84 = 0;
        *(void *)(v84 + 8) = 0;
        *(unsigned char *)(v84 + 16) = -1;
      }
      return result;
    case 5:
      uint64_t v85 = a2;
      uint64_t v35 = v87;
      int v36 = BYTE8(v87);
      int v37 = BYTE9(v87);
      swift_unknownObjectRetain_n();
      swift_unknownObjectRelease();
      uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation23LocalizedStringResourceVG_SSs5NeverOTg506_sSS10d164E17LocalizationValueV14FormatArgumentV7resolve10attributed4with9includings7CVarArg_p6vararg_AE15_AttributeFixupOSg11attrStrInfotSb_AA6LocaleVxmtAA0M5ScopeRzlFSSAA23efG7VXEfU0_AF6LocaleVTf1cn_nTf4ng_n(v35, a4, a5);
      swift_bridgeObjectRelease();
      if (a3)
      {
        if (v37) {
          int v39 = 256;
        }
        else {
          int v39 = 0;
        }
        specialized static ICUListFormatter.formatter<A, B>(for:)(v39 | v36, a4, a5);
        uint64_t v40 = v38;
        int64_t v41 = *(void *)(v38 + 16);
        *(void *)&long long v103 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41, 0);
        v42._rawValue = (void *)v103;
        if (v41)
        {
          swift_bridgeObjectRetain();
          __int16 v43 = (uint64_t *)(v40 + 40);
          do
          {
            uint64_t v44 = *(v43 - 1);
            uint64_t v45 = *v43;
            *(Swift::OpaquePointer *)&long long v103 = v42;
            unint64_t v47 = *((void *)v42._rawValue + 2);
            unint64_t v46 = *((void *)v42._rawValue + 3);
            swift_bridgeObjectRetain();
            if (v47 >= v46 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
              v42._rawValue = (void *)v103;
            }
            v43 += 2;
            *((void *)v42._rawValue + 2) = v47 + 1;
            long long v48 = (char *)v42._rawValue + 16 * v47;
            *((void *)v48 + 4) = v44;
            *((void *)v48 + 5) = v45;
            --v41;
          }
          while (v41);
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        ICUListFormatter.format(strings:)(v42);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_release();
        swift_release();
        BigString.init(_:)();
        AttributedString.init(_:attributes:)(&v103, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)&v98);
        uint64_t v72 = v98;
        uint64_t v73 = swift_retain();
        uint64_t v74 = specialized NSAttributedString.init<A>(_:including:)(v73);
        a1[3] = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSAttributedString);
        a1[4] = lazy protocol witness table accessor for type NSNumber and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedString and conformance NSObject, &lazy cache variable for type metadata for NSAttributedString);
        *a1 = v74;
        swift_release();
        uint64_t result = swift_unknownObjectRelease();
        *(void *)uint64_t v85 = v72;
        *(void *)(v85 + 8) = 0;
        *(unsigned char *)(v85 + 16) = 0;
      }
      else
      {
        a1[3] = MEMORY[0x1E4FBB1A0];
        a1[4] = lazy protocol witness table accessor for type String and conformance String();
        if (v37) {
          int v61 = 256;
        }
        else {
          int v61 = 0;
        }
        specialized static ICUListFormatter.formatter<A, B>(for:)(v61 | v36, a4, a5);
        int64_t v62 = *(void *)(v38 + 16);
        *(void *)&long long v103 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62, 0);
        v63._rawValue = (void *)v103;
        if (v62)
        {
          swift_bridgeObjectRetain();
          long long v64 = (uint64_t *)(v38 + 40);
          do
          {
            uint64_t v65 = *(v64 - 1);
            uint64_t v66 = *v64;
            *(Swift::OpaquePointer *)&long long v103 = v63;
            unint64_t v68 = *((void *)v63._rawValue + 2);
            unint64_t v67 = *((void *)v63._rawValue + 3);
            swift_bridgeObjectRetain();
            if (v68 >= v67 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
              v63._rawValue = (void *)v103;
            }
            v64 += 2;
            *((void *)v63._rawValue + 2) = v68 + 1;
            uint64_t v69 = (char *)v63._rawValue + 16 * v68;
            *((void *)v69 + 4) = v65;
            *((void *)v69 + 5) = v66;
            --v62;
          }
          while (v62);
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        Swift::String v75 = ICUListFormatter.format(strings:)(v63);
        swift_release();
        swift_release();
        *(Swift::String *)a1 = v75;
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t result = swift_unknownObjectRelease_n();
        *(void *)uint64_t v85 = 0;
        *(void *)(v85 + 8) = 0;
        *(unsigned char *)(v85 + 16) = -1;
      }
      return result;
    case 6:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      swift_unexpectedError();
      __break(1u);
      JUMPOUT(0x181DC38C4);
    default:
      outlined init with take of Any(&v87, &v103);
      outlined init with copy of Any((uint64_t)&v103, (uint64_t)&v98);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
      swift_dynamicCast();
      getter of attributeFixup #1 in String.LocalizationValue.FormatArgument.resolve<A>(attributed:with:including:)(v11, a3 & 1, a2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v103);
      return swift_release();
  }
}

uint64_t AttributedString.init<A>(localized:including:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[9];
  uint64_t v19 = *a1;
  long long v20 = *(_OWORD *)(a1 + 1);
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  long long v9 = *(_OWORD *)(a1 + 7);
  long long v23 = *(_OWORD *)(a1 + 5);
  long long v24 = v9;
  uint64_t v25 = v8;
  long long v10 = *((_OWORD *)a1 + 6);
  long long v26 = *((_OWORD *)a1 + 5);
  long long v27 = v10;
  long long v12 = 0uLL;
  __int16 v13 = 1;
  uint64_t v14 = 0;
  __int16 v15 = 256;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  uint64_t result = AttributedString.init<A>(localized:options:including:)((long long *)&v19, &v12, a2, a3, a4, &v28);
  *a5 = v28;
  return result;
}

uint64_t specialized AttributedString.subscript.setter(char a1)
{
  id v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = (void *)*v1;
    long long v5 = *(_OWORD *)(*v1 + 16);
    long long v6 = *(_OWORD *)(*v1 + 48);
    v36[1] = *(_OWORD *)(*v1 + 32);
    void v36[2] = v6;
    v36[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v36);
    swift_unknownObjectRetain();
    *id v2 = AttributedString.Guts.init(string:runs:)(v36, v7, v8, v9, v10);
    swift_release();
  }
  uint64_t v11 = (long long *)*v2;
  long long v12 = v11 + 1;
  long long v13 = v11[2];
  if (a1 == 12)
  {
    long long v38 = *v12;
    long long v39 = v13;
    long long v40 = v11[3];
    swift_retain();
    outlined retain of Locale((uint64_t)&v38);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v38);
    long long v14 = *v12;
    long long v15 = v11[3];
    long long v34 = v11[2];
    long long v35 = v15;
    long long v33 = v14;
    long long v16 = *v12;
    v28[1] = v11[2];
    v28[2] = v15;
    v28[0] = v16;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v28, (uint64_t)v37);
    outlined retain of Locale((uint64_t)v37);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v33);
    swift_release();
    long long v17 = v11[2];
    long long v30 = *v12;
    long long v31 = v17;
    long long v32 = v11[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v26);
    long long v18 = v11[2];
    v29[0] = *v12;
    v29[1] = v18;
    _OWORD v29[2] = v11[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v27);
    uint64_t v19 = BigString.Index.utf8Offset.getter();
    uint64_t v20 = BigString.Index.utf8Offset.getter();
    uint64_t v21 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v21, v19, v20);
    return swift_release();
  }
  else
  {
    long long v33 = *v12;
    long long v34 = v13;
    long long v35 = v11[3];
    swift_retain();
    outlined retain of Locale((uint64_t)&v33);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v33);
    long long v23 = *v12;
    long long v24 = v11[3];
    long long v31 = v11[2];
    long long v32 = v24;
    long long v30 = v23;
    long long v25 = *v12;
    long long v39 = v11[2];
    long long v40 = v24;
    long long v38 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v38, (uint64_t)v29);
    outlined retain of Locale((uint64_t)v29);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v30);
    swift_release();
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
  }
}

{
  uint64_t *v1;
  uint64_t *v2;
  void *v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  long long *v11;
  long long *v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  long long v23;
  long long v24;
  long long v25;
  char v26[48];
  char v27[48];
  long long v28[3];
  _OWORD v29[3];
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  _OWORD v36[3];
  unsigned char v37[40];
  long long v38;
  long long v39;
  long long v40;

  id v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = (void *)*v1;
    long long v5 = *(_OWORD *)(*v1 + 16);
    long long v6 = *(_OWORD *)(*v1 + 48);
    v36[1] = *(_OWORD *)(*v1 + 32);
    void v36[2] = v6;
    v36[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v36);
    swift_unknownObjectRetain();
    *id v2 = AttributedString.Guts.init(string:runs:)(v36, v7, v8, v9, v10);
    swift_release();
  }
  uint64_t v11 = (long long *)*v2;
  long long v12 = v11 + 1;
  long long v13 = v11[2];
  if (a1 == 8)
  {
    long long v38 = *v12;
    long long v39 = v13;
    long long v40 = v11[3];
    swift_retain();
    outlined retain of Locale((uint64_t)&v38);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v38);
    long long v14 = *v12;
    long long v15 = v11[3];
    long long v34 = v11[2];
    long long v35 = v15;
    long long v33 = v14;
    long long v16 = *v12;
    v28[1] = v11[2];
    v28[2] = v15;
    v28[0] = v16;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v28, (uint64_t)v37);
    outlined retain of Locale((uint64_t)v37);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v33);
    swift_release();
    long long v17 = v11[2];
    long long v30 = *v12;
    long long v31 = v17;
    long long v32 = v11[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v26);
    long long v18 = v11[2];
    v29[0] = *v12;
    v29[1] = v18;
    _OWORD v29[2] = v11[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v27);
    uint64_t v19 = BigString.Index.utf8Offset.getter();
    uint64_t v20 = BigString.Index.utf8Offset.getter();
    uint64_t v21 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v21, v19, v20);
    return swift_release();
  }
  else
  {
    long long v33 = *v12;
    long long v34 = v13;
    long long v35 = v11[3];
    swift_retain();
    outlined retain of Locale((uint64_t)&v33);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v33);
    long long v23 = *v12;
    long long v24 = v11[3];
    long long v31 = v11[2];
    long long v32 = v24;
    long long v30 = v23;
    long long v25 = *v12;
    long long v39 = v11[2];
    long long v40 = v24;
    long long v38 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v38, (uint64_t)v29);
    outlined retain of Locale((uint64_t)v29);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v30);
    swift_release();
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
  }
}

uint64_t specialized AttributedString.subscript.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = *(void **)v1;
    long long v5 = *(_OWORD *)(*(void *)v1 + 16);
    long long v6 = *(_OWORD *)(*(void *)v1 + 48);
    v57[1] = *(_OWORD *)(*(void *)v1 + 32);
    v57[2] = v6;
    v57[0] = v5;
    uint64_t v7 = v4[8];
    uint64_t v8 = v4[9];
    uint64_t v9 = v4[10];
    uint64_t v10 = v4[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v57);
    swift_unknownObjectRetain();
    *(void *)uint64_t v2 = AttributedString.Guts.init(string:runs:)(v57, v7, v8, v9, v10);
    swift_release();
  }
  if (a1)
  {
    uint64_t v11 = *(_OWORD **)v2;
    long long v12 = v11[1];
    long long v13 = v11[3];
    long long v55 = v11[2];
    long long v56 = v13;
    long long v54 = v12;
    swift_retain();
    swift_retain();
    outlined retain of Locale((uint64_t)&v54);
    uint64_t v14 = BigString.startIndex.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    outlined release of Locale((uint64_t)&v54);
    long long v21 = v11[1];
    long long v22 = v11[3];
    long long v52 = v11[2];
    long long v53 = v22;
    long long v51 = v21;
    long long v23 = v11[1];
    long long v60 = v11[2];
    long long v61 = v22;
    long long v59 = v23;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v59, (uint64_t)v50);
    outlined retain of Locale((uint64_t)v50);
    uint64_t v24 = BigString.endIndex.getter();
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    outlined release of Locale((uint64_t)&v51);
    swift_release();
    *(void *)&long long v45 = v14;
    *((void *)&v45 + 1) = v16;
    *(void *)&long long v46 = v18;
    *((void *)&v46 + 1) = v20;
    *(void *)&long long v47 = v24;
    *((void *)&v47 + 1) = v26;
    uint64_t v48 = v28;
    uint64_t v49 = v30;
    specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
    return swift_release_n();
  }
  else
  {
    long long v32 = *(_OWORD **)v2;
    long long v33 = *(_OWORD *)(*(void *)v2 + 16);
    long long v34 = *(_OWORD *)(*(void *)v2 + 48);
    long long v60 = *(_OWORD *)(*(void *)v2 + 32);
    long long v61 = v34;
    long long v59 = v33;
    swift_retain();
    outlined retain of Locale((uint64_t)&v59);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v59);
    long long v35 = v32[1];
    long long v36 = v32[3];
    long long v55 = v32[2];
    long long v56 = v36;
    long long v54 = v35;
    long long v37 = v32[1];
    long long v46 = v32[2];
    long long v47 = v36;
    long long v45 = v37;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v45, (uint64_t)v58);
    outlined retain of Locale((uint64_t)v58);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v54);
    swift_release();
    long long v38 = v32[2];
    long long v51 = v32[1];
    long long v52 = v38;
    long long v53 = v32[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)&v43);
    long long v39 = v32[2];
    v50[0] = v32[1];
    v50[1] = v39;
    v50[2] = v32[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v44);
    uint64_t v40 = BigString.Index.utf8Offset.getter();
    int64_t v41 = (void *)BigString.Index.utf8Offset.getter();
    Swift::OpaquePointer v42 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v42, v40, v41);
    return swift_release();
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  long long v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t v31;
  void *v32;
  void *v33;
  _OWORD *v35;
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  long long v46;
  long long v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned char v65[48];
  unsigned char v66[48];
  void v67[8];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  unsigned char v74[112];
  long long v75;
  long long v76;
  long long v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  long long v86;
  long long v87;
  long long v88;
  uint64_t v89;
  uint64_t v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  long long v96;
  _OWORD v97[3];
  unsigned char v98[40];
  long long v99;
  long long v100;
  long long v101;

  uint64_t v2 = v1;
  outlined init with take of LocalePreferences?(a1, (uint64_t)v67, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition?);
  uint64_t v4 = v67[0];
  long long v5 = v67[1];
  Swift::OpaquePointer v63 = v67[3];
  long long v64 = v67[2];
  long long v61 = v67[5];
  int64_t v62 = v67[4];
  long long v6 = v68;
  long long v59 = v67[7];
  long long v60 = v67[6];
  uint64_t v7 = v69;
  uint64_t v8 = v70;
  uint64_t v9 = v71;
  uint64_t v10 = v72;
  uint64_t v11 = v73;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v12 = *(void **)v2;
    long long v13 = *(_OWORD *)(*(void *)v2 + 16);
    uint64_t v14 = *(_OWORD *)(*(void *)v2 + 48);
    v97[1] = *(_OWORD *)(*(void *)v2 + 32);
    v97[2] = v14;
    v97[0] = v13;
    unsigned long long v57 = v8;
    uint64_t v58 = v4;
    long long v55 = v7;
    long long v56 = v5;
    uint64_t v15 = v12[8];
    uint64_t v16 = v12[9];
    uint64_t v17 = v12[10];
    uint64_t v18 = v12[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v97);
    swift_unknownObjectRetain();
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    uint64_t v7 = v55;
    long long v5 = v56;
    long long v21 = v18;
    uint64_t v8 = v57;
    long long v22 = AttributedString.Guts.init(string:runs:)(v97, v15, v19, v20, v21);
    uint64_t v4 = v58;
    *(void *)uint64_t v2 = v22;
    swift_release();
  }
  outlined init with take of LocalePreferences?(a1, (uint64_t)v74, &demangling cache variable for type metadata for AttributedString.MarkdownSourcePosition?);
  if (v74[105])
  {
    long long v23 = *(_OWORD **)v2;
    uint64_t v24 = v23[1];
    uint64_t v25 = v23[3];
    long long v87 = v23[2];
    unsigned long long v88 = v25;
    Swift::Int v86 = v24;
    swift_retain();
    outlined retain of Locale((uint64_t)&v86);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v86);
    uint64_t v26 = v23[1];
    uint64_t v27 = v23[3];
    long long v100 = v23[2];
    uint64_t v101 = v27;
    unsigned long long v99 = v26;
    uint64_t v28 = v23[1];
    uint64_t v76 = v23[2];
    uint64_t v77 = v27;
    Swift::String v75 = v28;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v75, (uint64_t)v98);
    outlined retain of Locale((uint64_t)v98);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v99);
    swift_release();
    uint64_t v29 = v23[2];
    uint64_t v94 = v23[1];
    char v95 = v29;
    Swift::String v96 = v23[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v65);
    uint64_t v30 = v23[2];
    long long v91 = v23[1];
    long long v92 = v30;
    uint64_t v93 = v23[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v66);
    long long v31 = BigString.Index.utf8Offset.getter();
    long long v32 = (void *)BigString.Index.utf8Offset.getter();
    long long v33 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v33, v31, v32);
    return swift_release();
  }
  else
  {
    *(void *)&uint64_t v76 = v64;
    *((void *)&v76 + 1) = v63;
    *(void *)&uint64_t v77 = v62;
    *((void *)&v77 + 1) = v61;
    uint64_t v78 = v60;
    id v79 = v59;
    long long v80 = v6 & 1;
    long long v81 = v7;
    uint64_t v82 = v8;
    uint64_t v83 = v9;
    uint64_t v84 = v10;
    uint64_t v85 = v11 & 1;
    long long v35 = *(_OWORD **)v2;
    long long v36 = v35[1];
    long long v37 = v35[3];
    char v95 = v35[2];
    Swift::String v96 = v37;
    *(void *)&Swift::String v75 = v4;
    *((void *)&v75 + 1) = v5;
    uint64_t v94 = v36;
    swift_retain();
    outlined retain of Locale((uint64_t)&v94);
    long long v38 = BigString.startIndex.getter();
    uint64_t v40 = v39;
    Swift::OpaquePointer v42 = v41;
    uint64_t v44 = v43;
    outlined release of Locale((uint64_t)&v94);
    long long v45 = v35[1];
    long long v46 = v35[3];
    long long v92 = v35[2];
    uint64_t v93 = v46;
    long long v91 = v45;
    long long v47 = v35[1];
    long long v100 = v35[2];
    uint64_t v101 = v46;
    unsigned long long v99 = v47;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v99, (uint64_t)v66);
    outlined retain of Locale((uint64_t)v66);
    uint64_t v48 = BigString.endIndex.getter();
    uint64_t v50 = v49;
    long long v52 = v51;
    long long v54 = v53;
    outlined release of Locale((uint64_t)&v91);
    swift_release();
    *(void *)&Swift::Int v86 = v38;
    *((void *)&v86 + 1) = v40;
    *(void *)&long long v87 = v42;
    *((void *)&v87 + 1) = v44;
    *(void *)&unsigned long long v88 = v48;
    *((void *)&v88 + 1) = v50;
    long long v89 = v52;
    long long v90 = v54;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(&v75);
  }
}

uint64_t specialized AttributedString.subscript.setter(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    long long v6 = (void *)*v2;
    long long v7 = *(_OWORD *)(*v2 + 16);
    long long v8 = *(_OWORD *)(*v2 + 48);
    v56[1] = *(_OWORD *)(*v2 + 32);
    _OWORD v56[2] = v8;
    v56[0] = v7;
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v11 = v6[10];
    uint64_t v12 = v6[11];
    type metadata accessor for AttributedString.Guts();
    swift_allocObject();
    outlined retain of Locale((uint64_t)v56);
    swift_unknownObjectRetain();
    *uint64_t v3 = AttributedString.Guts.init(string:runs:)(v56, v9, v10, v11, v12);
    swift_release();
  }
  long long v13 = (long long *)*v3;
  uint64_t v14 = v13 + 1;
  long long v15 = v13[2];
  if (a2)
  {
    long long v58 = *v14;
    long long v59 = v15;
    long long v60 = v13[3];
    swift_retain();
    outlined retain of Locale((uint64_t)&v58);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)&v58);
    long long v34 = *v14;
    long long v35 = v13[3];
    long long v54 = v13[2];
    long long v55 = v35;
    long long v53 = v34;
    long long v36 = *v14;
    long long v45 = v13[2];
    long long v46 = v35;
    long long v44 = v36;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v44, (uint64_t)v57);
    outlined retain of Locale((uint64_t)v57);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)&v53);
    swift_release();
    long long v37 = v13[2];
    long long v50 = *v14;
    long long v51 = v37;
    long long v52 = v13[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v42);
    long long v38 = v13[2];
    v49[0] = *v14;
    v49[1] = v38;
    v49[2] = v13[3];
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.index(roundingDown:)();
    outlined release of Locale((uint64_t)v43);
    uint64_t v39 = BigString.Index.utf8Offset.getter();
    uint64_t v40 = BigString.Index.utf8Offset.getter();
    int64_t v41 = (void *)swift_retain();
    specialized AttributedString._InternalRunsSlice.updateEach(with:)(v41, v39, v40);
    return swift_release();
  }
  else
  {
    long long v53 = *v14;
    long long v54 = v15;
    long long v55 = v13[3];
    swift_retain();
    outlined retain of Locale((uint64_t)&v53);
    uint64_t v16 = BigString.startIndex.getter();
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    outlined release of Locale((uint64_t)&v53);
    long long v23 = *v14;
    long long v24 = v13[3];
    long long v51 = v13[2];
    long long v52 = v24;
    long long v50 = v23;
    long long v25 = *v14;
    long long v59 = v13[2];
    long long v60 = v24;
    long long v58 = v25;
    outlined init with take of any PredicateExpression<Self.Output == B1>(&v58, (uint64_t)v49);
    outlined retain of Locale((uint64_t)v49);
    uint64_t v26 = BigString.endIndex.getter();
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    uint64_t v32 = v31;
    outlined release of Locale((uint64_t)&v50);
    swift_release();
    *(void *)&long long v44 = v16;
    *((void *)&v44 + 1) = v18;
    *(void *)&long long v45 = v20;
    *((void *)&v45 + 1) = v22;
    *(void *)&long long v46 = v26;
    *((void *)&v46 + 1) = v28;
    uint64_t v47 = v30;
    uint64_t v48 = v32;
    return specialized AttributedString.Guts.setAttributeValue<A>(_:forKey:in:)(a1);
  }
}

void specialized closure #2 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(unint64_t *__return_ptr, void *)@<X3>, void *a5@<X5>, uint64_t a6@<X8>)
{
  unint64_t v73 = a1;
  *(void *)&long long v74 = a2;
  *((void *)&v74 + 1) = a1;
  unint64_t v75 = a1;
  uint64_t v76 = a1 + a2;
  long long v77 = MEMORY[0x1E4FBC860];
  XMLPlistScanner.scanXMLPropertyList()();
  if (!v6)
  {
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(a3 + 16);
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _PlistDecoder<_XMLPlistDecodingFormat>);
    swift_allocObject();
    swift_bridgeObjectRetain();
    unint64_t v27 = specialized _PlistDecoder.init(referencing:options:codingPathNode:)(v12, v13, 0x8000000000000000);
    swift_release();
    uint64_t v71 = v14;
    uint64_t v72 = &protocol witness table for _PlistDecoder<A>;
    v70[0] = v27;
    swift_retain();
    a4(&v73, v70);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    swift_retain();
    specialized _PlistDecoder.takeOwnershipOfBackingDataIfNeeded(selfIsUniquelyReferenced:)(isUniquelyReferenced_nonNull_native);
    swift_release_n();
    *a5 = 100;
    unint64_t v40 = v75;
    uint64_t v41 = v76;
    uint64_t v42 = v79;
    *(void *)a6 = v73;
    *(_OWORD *)(a6 + 8) = v74;
    *(void *)(a6 + 24) = v40;
    *(void *)(a6 + 32) = v41;
    *(_OWORD *)(a6 + 40) = v77;
    *(_OWORD *)(a6 + 56) = v78;
    *(void *)(a6 + 72) = v42;
    long long v43 = v81;
    *(_OWORD *)(a6 + 80) = v80;
    *(_OWORD *)(a6 + 96) = v43;
    return;
  }
  swift_bridgeObjectRelease();
  id v83 = v6;
  id v15 = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    uint64_t v16 = v70[0];
    uint64_t v17 = (void *)v70[1];
    uint64_t v19 = v70[2];
    uint64_t v18 = v71;
    uint64_t v20 = v72;
    uint64_t v66 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v67 = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 40) = v23;
    unint64_t v24 = 0xD00000000000002CLL;
    unint64_t v25 = 0x80000001823AE6C0;
    char v68 = v20;
    switch(v20)
    {
      case 1:
        _StringGuts.grow(_:)(24);
        swift_bridgeObjectRelease();
        unint64_t v73 = 0xD000000000000016;
        *(void *)&long long v74 = 0x80000001823AE750;
        goto LABEL_15;
      case 2:
        _StringGuts.grow(_:)(33);
        swift_bridgeObjectRelease();
        unint64_t v73 = 0xD000000000000013;
        *(void *)&long long v74 = 0x80000001823AE730;
        XMLPlistTag.tagName.getter(v16);
        v28._uint64_t countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
        uint64_t v29 = 0x6E696C206E6F203ELL;
        unint64_t v30 = 0xEA00000000002065;
        goto LABEL_21;
      case 3:
        if (v18)
        {
          unint64_t v73 = 0;
          *(void *)&long long v74 = 0xE000000000000000;
          _StringGuts.grow(_:)(47);
          v31._unint64_t object = (void *)0x80000001823AA880;
          v31._uint64_t countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v31);
          unsigned int v32 = (v16 + 1);
          if ((v16 & 0x80) != 0) {
            unsigned int v32 = (((v16 & 0x3F) << 8) | (v16 >> 6)) + 33217;
          }
          uint64_t v82 = (v32 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v32) >> 3)) & 7)));
          MEMORY[0x185302020](&v82);
          Character.write<A>(to:)();
          swift_bridgeObjectRelease();
          v33._uint64_t countAndFlagsBits = 0x656E696C206E6F20;
          v33._unint64_t object = (void *)0xE900000000000020;
          String.append(_:)(v33);
          uint64_t v82 = (uint64_t)v17;
          v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v34);
          swift_bridgeObjectRelease();
          v35._uint64_t countAndFlagsBits = 32;
          v35._unint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v35);
          swift_bridgeObjectRetain();
          uint64_t v36 = v19;
          uint64_t v37 = v18;
        }
        else
        {
          unint64_t v73 = 0;
          *(void *)&long long v74 = 0xE000000000000000;
          _StringGuts.grow(_:)(46);
          v44._unint64_t object = (void *)0x80000001823AA880;
          v44._uint64_t countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v44);
          unsigned int v45 = (v16 + 1);
          if ((v16 & 0x80) != 0) {
            unsigned int v45 = (((v16 & 0x3F) << 8) | (v16 >> 6)) + 33217;
          }
          uint64_t v82 = (v45 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (__clz(v45) >> 3)) & 7)));
          MEMORY[0x185302020](&v82);
          Character.write<A>(to:)();
          swift_bridgeObjectRelease();
          uint64_t v29 = 0x656E696C206E6F20;
          unint64_t v30 = 0xE900000000000020;
LABEL_21:
          String.append(_:)(*(Swift::String *)&v29);
          uint64_t v82 = (uint64_t)v17;
LABEL_22:
          uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
        }
        String.append(_:)(*(Swift::String *)&v36);
        swift_bridgeObjectRelease();
        goto LABEL_24;
      case 4:
        unint64_t v73 = 0;
        *(void *)&long long v74 = 0xE000000000000000;
        _StringGuts.grow(_:)(56);
        v38._uint64_t countAndFlagsBits = 0xD000000000000036;
        v38._unint64_t object = (void *)0x80000001823AE6F0;
        String.append(_:)(v38);
LABEL_15:
        uint64_t v82 = v16;
        goto LABEL_22;
      case 5:
        swift_bridgeObjectRetain();
        unint64_t v24 = v16;
        unint64_t v25 = (unint64_t)v17;
        goto LABEL_25;
      case 6:
        goto LABEL_25;
      default:
        if (v17)
        {
          unint64_t v73 = 0xD00000000000001BLL;
          *(void *)&long long v74 = 0x80000001823AE790;
          v26._uint64_t countAndFlagsBits = v16;
          v26._unint64_t object = v17;
          String.append(_:)(v26);
LABEL_24:
          unint64_t v24 = v73;
          unint64_t v25 = v74;
        }
        else
        {
          unint64_t v24 = 0xD00000000000001ALL;
          unint64_t v25 = 0x80000001823AE770;
        }
LABEL_25:
        uint64_t v69 = v18;
        uint64_t v46 = v19;
        uint64_t v47 = (uint64_t)v17;
        *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
        *(void *)(inited + 48) = v24;
        *(void *)(inited + 56) = v25;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
        uint64_t v48 = (void *)static _DictionaryStorage.allocate(capacity:)();
        outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v73, &demangling cache variable for type metadata for (String, Any));
        uint64_t v50 = v73;
        uint64_t v49 = v74;
        swift_retain();
        unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v50, v49);
        if (v52)
        {
          __break(1u);
        }
        else
        {
          v48[(v51 >> 6) + 8] |= 1 << v51;
          long long v53 = (uint64_t *)(v48[6] + 16 * v51);
          *long long v53 = v50;
          v53[1] = v49;
          outlined init with take of Any((long long *)((char *)&v74 + 8), (_OWORD *)(v48[7] + 32 * v51));
          uint64_t v54 = v48[2];
          BOOL v55 = __OFADD__(v54, 1);
          uint64_t v56 = v54 + 1;
          if (!v55)
          {
            v48[2] = v56;
            swift_release();
            swift_bridgeObjectRelease();
            static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
            id v57 = objc_allocWithZone((Class)NSError);
            uint64_t v58 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRelease();
            id v59 = objc_msgSend(v57, sel_initWithDomain_code_userInfo_, v58, 3840, _NativeDictionary.bridged()());
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            id v60 = objc_msgSend(v59, sel_domain);
            id v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
            uint64_t v63 = v62;

            if (v61 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain")
              && v63 == v64)
            {
              swift_bridgeObjectRelease_n();
              outlined consume of XMLPlistError(v16, v47, v46, v69, v68);
LABEL_31:
              DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
              (*(void (**)(uint64_t, void))(*(void *)(v66 - 8) + 104))(v67, *MEMORY[0x1E4FBBA78]);
              swift_willThrow();
              break;
            }
            char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of XMLPlistError(v16, v47, v46, v69, v68);
            if (v65) {
              goto LABEL_31;
            }
LABEL_35:
            __break(1u);
            JUMPOUT(0x181DC5300);
          }
        }
        __break(1u);
        goto LABEL_35;
    }
  }
}

void specialized closure #3 in PropertyListDecoder._decode<A>(_:from:format:)(unint64_t a1, unint64_t a2, uint64_t a3, void *a4, void (*a5)(long long *))
{
  __ParseOldStylePropertyList(utf16:)(a1, a2, (uint64_t)&v36);
  if (!v5)
  {
    outlined init with take of Any(&v36, v41);
    outlined init with copy of Any((uint64_t)v41, (uint64_t)&v36);
    uint64_t v32 = *(void *)(a3 + 16);
    uint64_t v33 = type metadata accessor for __PlistDictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    Swift::String v34 = __PlistDictionaryDecoder.init(referencing:at:options:)((uint64_t)&v36, MEMORY[0x1E4FBC860], v32);
    *a4 = 1;
    *((void *)&v37 + 1) = v33;
    Swift::String v38 = &protocol witness table for __PlistDictionaryDecoder;
    *(void *)&long long v36 = v34;
    swift_retain();
    a5(&v36);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
    return;
  }
  id v42 = v5;
  id v9 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    uint64_t v10 = v39;
    uint64_t v11 = v40;
    uint64_t v12 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v14 = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1821037E0;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSDebugDescription");
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 48) = v10;
    *(void *)(inited + 56) = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v17 = (void *)static _DictionaryStorage.allocate(capacity:)();
    outlined init with copy of (Hashable & Sendable)?(inited + 32, (uint64_t)&v36, &demangling cache variable for type metadata for (String, Any));
    long long v18 = v36;
    swift_bridgeObjectRetain();
    swift_retain();
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, *((uint64_t *)&v18 + 1));
    if (v20)
    {
      __break(1u);
    }
    else
    {
      v17[(v19 >> 6) + 8] |= 1 << v19;
      *(_OWORD *)(v17[6] + 16 * v19) = v18;
      outlined init with take of Any(&v37, (_OWORD *)(v17[7] + 32 * v19));
      uint64_t v21 = v17[2];
      BOOL v22 = __OFADD__(v21, 1);
      uint64_t v23 = v21 + 1;
      if (!v22)
      {
        _OWORD v17[2] = v23;
        swift_release();
        swift_bridgeObjectRelease();
        static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain");
        id v24 = objc_allocWithZone((Class)NSError);
        uint64_t v25 = String._bridgeToObjectiveCImpl()();
        swift_bridgeObjectRelease();
        id v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, 3840, _NativeDictionary.bridged()());
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        id v27 = objc_msgSend(v26, sel_domain);
        id v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        uint64_t v30 = v29;

        if (v28 == static String._unconditionallyBridgeFromObjectiveC(_:)(@"NSCocoaErrorDomain") && v30 == v31)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_10:
          DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v12 - 8) + 104))(v14, *MEMORY[0x1E4FBBA78], v12);
          swift_willThrow();
          goto LABEL_11;
        }
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v35) {
          goto LABEL_10;
        }
LABEL_14:
        __break(1u);
        JUMPOUT(0x181DC5760);
      }
    }
    __break(1u);
    goto LABEL_14;
  }
LABEL_11:
}

uint64_t String.LocalizationOptions.replacements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t String.LocalizationOptions.replacements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*String.LocalizationOptions.replacements.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t String.LocalizationOptions._PluralizationNumber.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v20 = *(void *)(v3 - 8);
  uint64_t v21 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v17 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v18 = *(void *)(v5 - 8);
  uint64_t v19 = v5;
  MEMORY[0x1F4188790](v5);
  long long v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)v1;
  char v12 = *(unsigned char *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v12)
  {
    char v23 = 1;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    uint64_t v13 = v17;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v21);
  }
  else
  {
    char v22 = 0;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v19;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t String.LocalizationOptions._PluralizationNumber.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  uint64_t v31 = v4;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v32 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.CodingKeys and conformance String.LocalizationOptions._PluralizationNumber.CodingKeys();
  uint64_t v13 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_6;
  }
  uint64_t v14 = v6;
  uint64_t v29 = v7;
  char v35 = a1;
  uint64_t v15 = v12;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v20 = &type metadata for String.LocalizationOptions._PluralizationNumber;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA70], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v10);
    a1 = v35;
LABEL_6:
    uint64_t v21 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v21);
  }
  char v17 = *(unsigned char *)(v16 + 32);
  if (v17)
  {
    char v37 = 1;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
    uint64_t v25 = 0;
  }
  else
  {
    char v36 = 0;
    lazy protocol witness table accessor for type String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance String.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    char v23 = v9;
    id v24 = v15;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v26 = v29;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v10);
  }
  id v27 = v33;
  *uint64_t v33 = v25;
  *((unsigned char *)v27 + 8) = v17;
  uint64_t v21 = (uint64_t)v35;
  return __swift_destroy_boxed_opaque_existential_1(v21);
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationOptions._PluralizationNumber@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return String.LocalizationOptions._PluralizationNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationOptions._PluralizationNumber(void *a1)
{
  return String.LocalizationOptions._PluralizationNumber.encode(to:)(a1);
}

void String.LocalizationOptions._pluralizationNumber.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 17);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
}

uint64_t String.LocalizationOptions._pluralizationNumber.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  char v3 = *(unsigned char *)(result + 9);
  *(void *)(v1 + 8) = *(void *)result;
  *(unsigned char *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 17) = v3;
  return result;
}

uint64_t (*String.LocalizationOptions._pluralizationNumber.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t String.LocalizationOptions._localization.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t String.LocalizationOptions._localization.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*String.LocalizationOptions._localization.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void String.LocalizationOptions.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 256;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
}

id String.LocalizationOptions._nsOptions.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  char v2 = *(unsigned char *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 17);
  id result = objc_msgSend(objc_allocWithZone((Class)_NSStringFormattingOptions), sel_init);
  if (result)
  {
    uint64_t v5 = result;
    if (v3)
    {
      objc_msgSend(result, sel_setPluralizationNumber_, 0);
    }
    else
    {
      id v6 = objc_allocWithZone((Class)NSNumber);
      if (v2) {
        uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v7 = v1;
      }
      id v8 = objc_msgSend(v6, sel_initWithInteger_, v7);
      objc_msgSend(v5, sel_setPluralizationNumber_, v8);
    }
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void String.LocalizationValue.Placeholder.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance String.LocalizationValue.Placeholder.CodingKeys()
{
  uint64_t result = 7630441;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1953393013;
      break;
    case 2:
      uint64_t result = 0x74616F6C66;
      break;
    case 3:
      uint64_t result = 0x656C62756F64;
      break;
    case 4:
      uint64_t result = 0x7463656A626FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance String.LocalizationValue.Placeholder.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationValue.Placeholder.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.DoubleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.DoubleCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.FloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.FloatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.IntCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.IntCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.ObjectCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.ObjectCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance String.LocalizationValue.Placeholder.UintCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance String.LocalizationValue.Placeholder.UintCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t String.LocalizationValue.Placeholder.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.ObjectCodingKeys>);
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  MEMORY[0x1F4188790](v3);
  char v35 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.DoubleCodingKeys>);
  uint64_t v33 = *(void *)(v5 - 8);
  uint64_t v34 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v32 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.FloatCodingKeys>);
  uint64_t v30 = *(void *)(v7 - 8);
  uint64_t v31 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v29 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.UintCodingKeys>);
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v28 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.IntCodingKeys>);
  uint64_t v26 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<String.LocalizationValue.Placeholder.CodingKeys>);
  uint64_t v38 = *(void *)(v15 - 8);
  uint64_t v39 = v15;
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v18)
  {
    case 1:
      char v41 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys();
      uint64_t v21 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
      goto LABEL_8;
    case 2:
      char v42 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys();
      char v22 = v29;
      uint64_t v21 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v30;
      uint64_t v23 = v31;
      goto LABEL_7;
    case 3:
      char v43 = 3;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys();
      char v22 = v32;
      uint64_t v21 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v33;
      uint64_t v23 = v34;
      goto LABEL_7;
    case 4:
      char v44 = 4;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys();
      char v22 = v35;
      uint64_t v21 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v24 = v36;
      uint64_t v23 = v37;
LABEL_7:
      (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
LABEL_8:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v17, v21);
      break;
    default:
      char v40 = 0;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();
      uint64_t v19 = v39;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v12);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v17, v19);
      break;
  }
  return result;
}

Swift::Int String.LocalizationValue.Placeholder.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t String.LocalizationValue.Placeholder.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v54 = a2;
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.ObjectCodingKeys>);
  uint64_t v43 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  long long v53 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.DoubleCodingKeys>);
  uint64_t v49 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  char v52 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.FloatCodingKeys>);
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v51 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.UintCodingKeys>);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.IntCodingKeys>);
  uint64_t v42 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<String.LocalizationValue.Placeholder.CodingKeys>);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = a1[3];
  BOOL v55 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v17);
  lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.CodingKeys and conformance String.LocalizationValue.Placeholder.CodingKeys();
  uint64_t v18 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
LABEL_7:
    uint64_t v33 = (uint64_t)v55;
    return __swift_destroy_boxed_opaque_existential_1(v33);
  }
  uint64_t v39 = v10;
  char v40 = v12;
  uint64_t v19 = v9;
  uint64_t v21 = v51;
  uint64_t v20 = v52;
  uint64_t v41 = 0;
  uint64_t v56 = v14;
  char v22 = v53;
  uint64_t v23 = v54;
  uint64_t v24 = v16;
  uint64_t v25 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v25 + 16) != 1)
  {
    uint64_t v30 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v32 = v31;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v32 = &type metadata for String.LocalizationValue.Placeholder;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v30 - 8) + 104))(v32, *MEMORY[0x1E4FBBA70], v30);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v16, v13);
    goto LABEL_7;
  }
  char v26 = *(unsigned char *)(v25 + 32);
  switch(v26)
  {
    case 1:
      char v58 = 1;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.UintCodingKeys and conformance String.LocalizationValue.Placeholder.UintCodingKeys();
      uint64_t v35 = v41;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v35) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v44 + 8))(v19, v45);
      goto LABEL_19;
    case 2:
      char v59 = 2;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.FloatCodingKeys and conformance String.LocalizationValue.Placeholder.FloatCodingKeys();
      uint64_t v36 = v41;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v36) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v47 + 8))(v21, v48);
      goto LABEL_19;
    case 3:
      char v60 = 3;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.DoubleCodingKeys and conformance String.LocalizationValue.Placeholder.DoubleCodingKeys();
      uint64_t v37 = v41;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v37) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v49 + 8))(v20, v46);
LABEL_19:
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v13);
      goto LABEL_21;
    case 4:
      char v61 = 4;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.ObjectCodingKeys and conformance String.LocalizationValue.Placeholder.ObjectCodingKeys();
      uint64_t v38 = v41;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v38) {
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v43 + 8))(v22, v50);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v13);
      uint64_t v23 = v54;
      goto LABEL_21;
    default:
      char v27 = *(unsigned char *)(v25 + 32);
      char v57 = 0;
      lazy protocol witness table accessor for type String.LocalizationValue.Placeholder.IntCodingKeys and conformance String.LocalizationValue.Placeholder.IntCodingKeys();
      uint64_t v29 = v40;
      uint64_t v28 = v41;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      if (v28)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v13);
        uint64_t v33 = (uint64_t)v55;
        return __swift_destroy_boxed_opaque_existential_1(v33);
      }
      (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v13);
      char v26 = v27;
LABEL_21:
      unsigned char *v23 = v26;
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
      break;
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance String.LocalizationValue.Placeholder@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return String.LocalizationValue.Placeholder.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance String.LocalizationValue.Placeholder(void *a1)
{
  return String.LocalizationValue.Placeholder.encode(to:)(a1);
}

uint64_t String.LocalizationValue.init(key:arguments:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a3;
  a4[1] = result;
  a4[2] = a2;
  return result;
}

__n128 String.LocalizationValue.init(stringInterpolation:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)(void *a1, uint64_t a2)
{
  unint64_t v3 = v2;
  v6._uint64_t countAndFlagsBits = 16421;
  v6._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  *((void *)&v29 + 1) = a2;
  *(void *)&long long v30 = swift_getWitnessTable();
  *(void *)&long long v28 = a1;
  uint64_t v7 = one-time initialization token for cache;
  id v8 = a1;
  if (v7 != -1) {
    swift_once();
  }
  *(void *)&long long v23 = LocaleCache.current.getter();
  *((void *)&v23 + 1) = v9;
  _convertObjectToSendableArgument(_:locale:)((uint64_t)&v28, v26);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  uint64_t v10 = v27;
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(v26, v27);
  uint64_t v24 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
  char v25 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v23, (uint64_t)&v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  uint64_t v13 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  _OWORD v13[2] = v15 + 1;
  uint64_t v16 = &v13[15 * v15];
  long long v17 = v28;
  long long v18 = v29;
  long long v19 = v31;
  *((_OWORD *)v16 + 4) = v30;
  *((_OWORD *)v16 + 5) = v19;
  *((_OWORD *)v16 + 2) = v17;
  *((_OWORD *)v16 + 3) = v18;
  __n128 result = v32;
  long long v21 = v33;
  long long v22 = v34;
  *((unsigned char *)v16 + 144) = v35;
  *((_OWORD *)v16 + 7) = v21;
  *((_OWORD *)v16 + 8) = v22;
  *((__n128 *)v16 + 6) = result;
  *unint64_t v3 = v13;
  return result;
}

unint64_t _convertObjectToSendableArgument(_:locale:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  uint64_t v4 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if (swift_dynamicCast())
  {
    uint64_t v5 = v16;
    a2[3] = (char *)v4;
    Swift::String v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSNumber and conformance NSObject;
    uint64_t v7 = (unint64_t *)&lazy cache variable for type metadata for NSNumber;
  }
  else
  {
    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
    uint64_t v8 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDate);
    if (swift_dynamicCast())
    {
      uint64_t v5 = v16;
      a2[3] = (char *)v8;
      Swift::String v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSDate and conformance NSObject;
      uint64_t v7 = &lazy cache variable for type metadata for NSDate;
    }
    else
    {
      outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, (uint64_t)v17);
      uint64_t v9 = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSURL);
      if (!swift_dynamicCast())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1821037E0;
        uint64_t v12 = outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>(a1, inited + 32);
        MEMORY[0x1F4188790](v12);
        swift_unknownObjectRetain();
        uint64_t v13 = specialized withVaList<A>(_:_:)(inited, (void (*)(void *__return_ptr, uint64_t))partial apply for closure #1 in String.init(format:locale:arguments:));
        unint64_t v15 = v14;
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_unknownObjectRelease();
        a2[3] = (char *)MEMORY[0x1E4FBB1A0];
        unint64_t result = lazy protocol witness table accessor for type String and conformance String();
        a2[4] = (char *)result;
        *a2 = v13;
        a2[1] = v15;
        return result;
      }
      uint64_t v5 = v16;
      a2[3] = (char *)v9;
      Swift::String v6 = (unint64_t *)&lazy protocol witness table cache variable for type NSURL and conformance NSObject;
      uint64_t v7 = &lazy cache variable for type metadata for NSURL;
    }
  }
  unint64_t result = lazy protocol witness table accessor for type NSNumber and conformance NSObject(v6, v7);
  a2[4] = (char *)result;
  *a2 = v5;
  return result;
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 1684827173;
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype()) {
    goto LABEL_3;
  }
  if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    uint64_t v7 = (void *)0xE200000000000000;
    uint64_t v6 = 25637;
  }
  else
  {
    uint64_t v6 = 1970039845;
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
LABEL_3:
      uint64_t v7 = (void *)0xE400000000000000;
      goto LABEL_4;
    }
    if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
    {
      uint64_t v7 = (void *)0xE200000000000000;
      uint64_t v6 = 29989;
    }
    else if (swift_dynamicCastMetatype())
    {
      uint64_t v7 = (void *)0xE200000000000000;
      uint64_t v6 = 26149;
    }
    else
    {
      uint64_t v6 = 6712357;
      uint64_t v7 = (void *)0xE300000000000000;
      if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
      {
        uint64_t v6 = 16421;
        uint64_t v7 = (void *)0xE200000000000000;
      }
    }
  }
LABEL_4:
  v10._uint64_t countAndFlagsBits = v6;
  v10._unint64_t object = v7;
  String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(a1, v10, a2, a3);

  return swift_bridgeObjectRelease();
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:specifier:)(int a1, Swift::String a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  String.append(_:)(a2);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(a4 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  __swift_allocate_boxed_opaque_existential_1(v25);
  v8(a3, a4);
  uint64_t v9 = AssociatedTypeWitness;
  Swift::String v10 = __swift_project_boxed_opaque_existential_1(v25, AssociatedTypeWitness);
  uint64_t v23 = v9;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, v10, v9);
  char v24 = 0;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(&v22, (uint64_t)v28);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
  uint64_t v12 = *v5;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
  }
  unint64_t v14 = v12[2];
  unint64_t v13 = v12[3];
  if (v14 >= v13 >> 1) {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v13 > 1), v14 + 1, 1, v12);
  }
  id v12[2] = v14 + 1;
  unint64_t v15 = &v12[15 * v14];
  long long v16 = v28[0];
  long long v17 = v28[1];
  long long v18 = v28[3];
  *((_OWORD *)v15 + 4) = v28[2];
  *((_OWORD *)v15 + 5) = v18;
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = v17;
  __n128 result = (__n128)v28[4];
  long long v20 = v28[5];
  long long v21 = v28[6];
  *((unsigned char *)v15 + 144) = v29;
  *((_OWORD *)v15 + 7) = v20;
  *((_OWORD *)v15 + 8) = v21;
  *((__n128 *)v15 + 6) = result;
  *uint64_t v5 = v12;
  return result;
}

uint64_t String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:)(char *a1)
{
  Swift::UInt v1 = (void *)0xE400000000000000;
  v2._uint64_t countAndFlagsBits = 1684827173;
  switch(*a1)
  {
    case 0:
      break;
    case 1:
      v2._uint64_t countAndFlagsBits = 1970039845;
      break;
    case 2:
      Swift::UInt v1 = (void *)0xE200000000000000;
      v2._uint64_t countAndFlagsBits = 26149;
      break;
    case 3:
      Swift::UInt v1 = (void *)0xE300000000000000;
      v2._uint64_t countAndFlagsBits = 6712357;
      break;
    default:
      Swift::UInt v1 = (void *)0xE200000000000000;
      v2._uint64_t countAndFlagsBits = 16421;
      break;
  }
  v2._unint64_t object = v1;
  String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)(a1, v2);

  return swift_bridgeObjectRelease();
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation(placeholder:specifier:)(char *a1, Swift::String a2)
{
  unint64_t v3 = v2;
  char v4 = *a1;
  String.append(_:)(a2);
  uint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  uint64_t v5[2] = v7 + 1;
  uint64_t v8 = &v5[15 * v7];
  *((unsigned char *)v8 + 32) = v4;
  *(_OWORD *)((char *)v8 + 65) = v12;
  *(_OWORD *)((char *)v8 + 49) = v11;
  *(_OWORD *)((char *)v8 + 33) = v10;
  __n128 result = v13;
  *((_OWORD *)v8 + 8) = *(_OWORD *)&v15[15];
  *(_OWORD *)((char *)v8 + 113) = *(_OWORD *)v15;
  *(_OWORD *)((char *)v8 + 97) = v14;
  *(__n128 *)((char *)v8 + 81) = v13;
  *((unsigned char *)v8 + 144) = 6;
  *unint64_t v3 = v5;
  return result;
}

double String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)&double result = String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(long long *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))String.LocalizationValue.FormatArgument.Storage.StringFormatWrapper.init<A, B>(_:format:), 2).n128_u64[0];
  return result;
}

{
  double result;

  *(void *)&double result = String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(a1, a2, a3, a4, a5, a6, (void (*)(long long *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))String.LocalizationValue.FormatArgument.Storage.AttributedStringFormatWrapper.init<A, B>(_:format:), 3).n128_u64[0];
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A, B>(_:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(long long *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t), int a8)
{
  void (*v47)(long long *__return_ptr, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  int v48;
  long long v49[7];
  char v50;
  _OWORD v51[7];
  char v52;

  uint64_t v48 = a8;
  uint64_t v47 = a7;
  uint64_t v46 = a6;
  uint64_t v45 = a5;
  uint64_t v44 = a2;
  uint64_t v41 = *(void *)(a4 - 8);
  uint64_t v11 = v41;
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v40 - v14;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v40 - v22;
  v24._uint64_t countAndFlagsBits = 16421;
  v24._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  char v25 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v25(v23, a1, a3);
  char v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v15, v44, a4);
  v25(v20, (uint64_t)v23, a3);
  uint64_t v27 = v43;
  v26(v43, (uint64_t)v15, a4);
  v47(v49, v20, v27, a3, a4, v45, v46);
  uint64_t v28 = a4;
  char v29 = v42;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v15, v28);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v23, a3);
  uint64_t v50 = v48;
  outlined init with take of String.LocalizationValue.FormatArgument.Storage(v49, (uint64_t)v51);
  long long v30 = *v29;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
  }
  unint64_t v32 = v30[2];
  unint64_t v31 = v30[3];
  if (v32 >= v31 >> 1) {
    long long v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
  }
  v30[2] = v32 + 1;
  long long v33 = &v30[15 * v32];
  long long v34 = v51[0];
  long long v35 = v51[1];
  long long v36 = v51[3];
  *((_OWORD *)v33 + 4) = v51[2];
  *((_OWORD *)v33 + 5) = v36;
  *((_OWORD *)v33 + 2) = v34;
  *((_OWORD *)v33 + 3) = v35;
  __n128 result = (__n128)v51[4];
  long long v38 = v51[5];
  long long v39 = v51[6];
  *((unsigned char *)v33 + 144) = v52;
  *((_OWORD *)v33 + 7) = v38;
  *((_OWORD *)v33 + 8) = v39;
  *((__n128 *)v33 + 6) = result;
  *char v29 = v30;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  v6._uint64_t countAndFlagsBits = 16421;
  v6._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  unint64_t v7 = *v2;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  uint64_t v7[2] = v9 + 1;
  long long v10 = &v7[15 * v9];
  void v10[4] = v4;
  void v10[5] = v5;
  *((_OWORD *)v10 + 3) = v12;
  *((_OWORD *)v10 + 4) = v13;
  __n128 result = v14;
  *((_OWORD *)v10 + 7) = v16;
  *((_OWORD *)v10 + 8) = v17;
  *((__n128 *)v10 + 5) = v14;
  *((_OWORD *)v10 + 6) = v15;
  *((unsigned char *)v10 + 144) = 1;
  *unint64_t v3 = v7;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v7._uint64_t countAndFlagsBits = 16421;
  v7._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 8))(&v25, a2, a3);
  uint64_t v8 = v27;
  uint64_t v9 = v28;
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  __n128 v23 = v31;
  long long v24 = v26;
  uint64_t v12 = v32;
  uint64_t v13 = v33;
  uint64_t v21 = v34;
  uint64_t v22 = v25;
  uint64_t v19 = v36;
  uint64_t v20 = v35;
  __n128 v14 = *v3;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  void v14[2] = v16 + 1;
  long long v17 = &v14[15 * v16];
  v17[4] = v22;
  *(_OWORD *)(v17 + 5) = v24;
  v17[7] = v8;
  v17[8] = v9;
  v17[9] = v10;
  v17[10] = v11;
  __n128 result = v23;
  *(__n128 *)(v17 + 11) = v23;
  v17[13] = v12;
  v17[14] = v13;
  v17[15] = v21;
  v17[16] = v20;
  v17[17] = v19;
  *((unsigned char *)v17 + 144) = 4;
  *uint64_t v4 = v14;
  return result;
}

__n128 String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  Swift::String v6 = v5;
  char v10 = *a2;
  char v11 = a2[1];
  long long v22 = *(_OWORD *)(a2 + 8);
  v12._uint64_t countAndFlagsBits = 16421;
  v12._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFxq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lyADs5NeverO10Foundation23LocalizedStringResourceVIsgnrzr_xSayAJGAGSlRzAJRsd__AGRsd_0_r_0_lIetMgnozo_Tp5((void (*)(uint64_t *__return_ptr, char *))partial apply for implicit closure #1 in String.LocalizationValue.StringInterpolation.appendInterpolation<A>(_:format:), (uint64_t)v23, a3, a4);
  swift_release();
  __n128 v14 = *v5;
  swift_unknownObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    __n128 v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  void v14[2] = v16 + 1;
  long long v17 = &v14[15 * v16];
  v17[4] = v13;
  *((unsigned char *)v17 + 40) = v10;
  *((unsigned char *)v17 + 41) = v11;
  __int16 v18 = v37;
  *(_DWORD *)((char *)v17 + 42) = v36;
  *((_WORD *)v17 + 23) = v18;
  *((_OWORD *)v17 + 3) = v22;
  *((_OWORD *)v17 + 4) = v31;
  __n128 result = v32;
  long long v20 = v33;
  long long v21 = v35;
  *((_OWORD *)v17 + 7) = v34;
  *((_OWORD *)v17 + 8) = v21;
  *((__n128 *)v17 + 5) = result;
  *((_OWORD *)v17 + 6) = v20;
  *((unsigned char *)v17 + 144) = 5;
  *Swift::String v6 = v14;
  return result;
}

double key path getter for CustomLocalizedStringResourceConvertible.localizedStringResource : <A>A.Element@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void (*v5)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  long long v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  uint64_t v18;
  long long v19;
  long long v20;

  uint64_t v4 = *(void *)(a2 + a1 - 8);
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v4 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5(&v12, AssociatedTypeWitness, v4);
  Swift::String v7 = v14;
  uint64_t v8 = v15;
  uint64_t v9 = v18;
  *(void *)a3 = v12;
  *(_OWORD *)(a3 + 8) = v13;
  *(void *)(a3 + 24) = v7;
  *(void *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 40) = v16;
  *(_OWORD *)(a3 + 56) = v17;
  *(void *)(a3 + 72) = v9;
  __n128 result = *(double *)&v19;
  char v11 = v20;
  *(_OWORD *)(a3 + 80) = v19;
  *(_OWORD *)(a3 + 96) = v11;
  return result;
}

void *protocol witness for StringInterpolationProtocol.init(literalCapacity:interpolationCount:) in conformance String.LocalizationValue.StringInterpolation@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[1] = 0;
  a3[2] = 0xE000000000000000;
  if (a2 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v5 = __OFADD__(result, 2 * a2);
    __n128 result = (void *)((char *)result + 2 * a2);
    if (!v5)
    {
      MEMORY[0x185301FA0](result);
      __n128 result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a2 & ~(a2 >> 63), 0, MEMORY[0x1E4FBC860]);
      *a3 = result;
      return result;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for StringInterpolationProtocol.appendLiteral(_:) in conformance String.LocalizationValue.StringInterpolation(Swift::String *a1)
{
}

uint64_t static String.LocalizationValue.== infix(_:_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if ((specialized static Array<A>.== infix(_:_:)(*a1) & 1) == 0) {
    return 0;
  }
  if (v2 == v4 && v3 == v5) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationValue(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  if ((specialized static Array<A>.== infix(_:_:)(*a1) & 1) == 0) {
    return 0;
  }
  if (v2 == v4 && v3 == v5) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

__n128 protocol witness for ExpressibleByStringInterpolation.init(stringInterpolation:) in conformance String.LocalizationValue@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  return result;
}

uint64_t *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance String.LocalizationValue@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  *a2 = MEMORY[0x1E4FBC860];
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

void *String.LocalizationValue.resolve(key:options:table:bundle:locale:performLocalization:)(void *a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t *a7, char a8)
{
  long long v12 = a3[1];
  long long v43 = *a3;
  *(_OWORD *)uint64_t v44 = v12;
  *(_OWORD *)&v44[9] = *(long long *)((char *)a3 + 25);
  uint64_t v13 = *a7;
  uint64_t v14 = a7[1];
  uint64_t v15 = a2;
  if (!a2)
  {
    a1 = *(void **)(v8 + 8);
    uint64_t v15 = swift_bridgeObjectRetain();
  }
  if ((void)v43) {
    unint64_t v16 = v43;
  }
  else {
    unint64_t v16 = MEMORY[0x1E4FBC860];
  }
  long long v48 = v16;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v17, &v48, v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a8)
  {
    if (a6) {
      id v19 = a6;
    }
    else {
      id v19 = objc_msgSend(self, sel_mainBundle);
    }
    outlined init with take of LocalePreferences?((uint64_t)&v44[8], (uint64_t)v46, &demangling cache variable for type metadata for String?);
    char v20 = v44[24];
    outlined init with take of LocalePreferences?((uint64_t)v46, (uint64_t)&v47, &demangling cache variable for type metadata for String?);
    if (*((void *)&v47 + 1))
    {
      long long v48 = v47;
      if (v20)
      {
        id v25 = a6;
        outlined retain of String?((uint64_t)v46);
        id v26 = objc_msgSend(v19, sel_localizations);
        if (!v26) {
          id v26 = (id)_ContiguousArrayBuffer._asCocoaArray()();
        }
        uint64_t v27 = self;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v28 = swift_allocObject();
        long long v29 = v48;
        *(_OWORD *)(v28 + 16) = xmmword_1821037E0;
        *(_OWORD *)(v28 + 32) = v29;
        id v30 = objc_msgSend(v27, sel_preferredLocalizationsFromArray_forPreferences_, v26, _ContiguousArrayBuffer._asCocoaArray()());

        swift_unknownObjectRelease();
        if (v30)
        {
          type metadata accessor for __SwiftDeferredNSArray();
          swift_unknownObjectRetain();
          if (swift_dynamicCastClass())
          {
            swift_retain();
          }
          uint64_t v31 = swift_dynamicCastClass();
          if (v31)
          {
            long long v21 = (_OWORD *)v31;
          }
          else
          {
            swift_unknownObjectRelease();
            objc_msgSend(v30, sel_copy);
            unint64_t v32 = _bridgeCocoaArray<A>(_:)();
            swift_unknownObjectRelease();
            long long v21 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v32);

            swift_bridgeObjectRelease();
          }
        }
        else
        {
          long long v21 = (_OWORD *)MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        long long v21 = (_OWORD *)swift_allocObject();
        long long v22 = v47;
        v21[1] = xmmword_1821037E0;
        v21[2] = v22;
        id v23 = a6;
        outlined retain of String?((uint64_t)v46);
      }
    }
    else
    {
      id v24 = a6;
      long long v21 = 0;
    }
    uint64_t v33 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    uint64_t v34 = String._bridgeToObjectiveCImpl()();
    if (a5)
    {
      long long v35 = (void *)String._bridgeToObjectiveCImpl()();
      if (!v21)
      {
LABEL_26:
        id v36 = objc_msgSend(v19, sel_localizedStringForKey_value_table_localizations_, v33, v34, v35, v21);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

        a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        uint64_t v15 = v37;

        goto LABEL_27;
      }
    }
    else
    {
      long long v35 = 0;
      if (!v21) {
        goto LABEL_26;
      }
    }
    long long v21 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
    goto LABEL_26;
  }
LABEL_27:
  if (!*(void *)(v18 + 16))
  {
    outlined init with take of LocalePreferences?((uint64_t)&v43 + 8, (uint64_t)v45, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v45, (uint64_t)&v49, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v50 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v49, (uint64_t)v51),
          String._bridgeToObjectiveCImpl()(),
          id v39 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v39))
    {
      swift_bridgeObjectRelease();
      return a1;
    }
  }
  swift_unknownObjectRetain();
  uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm(v18, v13, v14, (uint64_t)v42, (uint64_t (*)(void))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v43);
  a1 = specialized withVaList<A>(_:_:)(v38, (uint64_t)a1, v15, v13, v14);
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  return a1;
}

void *String.init(localized:table:bundle:localization:locale:comment:)(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v11 = *a1;
  uint64_t v12 = *a7;
  uint64_t v13 = a7[1];
  __int16 v29 = 256;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  char v32 = 0;
  v28[0] = MEMORY[0x1E4FBC860];
  memset(&v28[1], 0, 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v25 = v13;
  uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v11, v28, v12, v13);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a4)
  {
    id v14 = a4;
    if (a6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1821037E0;
      *(void *)(v15 + 32) = a5;
      *(void *)(v15 + 40) = a6;
      goto LABEL_6;
    }
  }
  else
  {
    id v14 = objc_msgSend(self, sel_mainBundle);
    if (a6) {
      goto LABEL_3;
    }
  }
  uint64_t v15 = 0;
LABEL_6:
  uint64_t v16 = String._bridgeToObjectiveCImpl()();
  id v26 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = String._bridgeToObjectiveCImpl()();
  if (a3)
  {
    uint64_t v18 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v18 = 0;
  if (v15) {
LABEL_8:
  }
    uint64_t v15 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_9:
  id v19 = objc_msgSend(v14, sel_localizedStringForKey_value_table_localizations_, v16, v17, v18, v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  char v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  uint64_t v22 = v21;

  if (*(void *)(v27 + 16))
  {
    swift_unknownObjectRetain();
    uint64_t v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v27, v12, v13);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v20 = specialized withVaList<A>(_:_:)(v23, (uint64_t)v20, v22, v12, v25);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v20;
}

void *String.init(localized:options:table:bundle:locale:comment:)(uint64_t *a1, long long *a2, uint64_t a3, void *a4, void *a5, uint64_t *a6)
{
  uint64_t v8 = *a1;
  long long v9 = a2[1];
  long long v40 = *a2;
  *(_OWORD *)uint64_t v41 = v9;
  *(_OWORD *)&v41[9] = *(long long *)((char *)a2 + 25);
  uint64_t v11 = *a6;
  uint64_t v10 = a6[1];
  if ((void)v40) {
    unint64_t v12 = v40;
  }
  else {
    unint64_t v12 = MEMORY[0x1E4FBC860];
  }
  long long v45 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v10;
  uint64_t v38 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v8, &v45, v11, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a5) {
    id v13 = a5;
  }
  else {
    id v13 = objc_msgSend(self, sel_mainBundle);
  }
  outlined init with take of LocalePreferences?((uint64_t)&v41[8], (uint64_t)v43, &demangling cache variable for type metadata for String?);
  char v14 = v41[24];
  outlined init with take of LocalePreferences?((uint64_t)v43, (uint64_t)&v44, &demangling cache variable for type metadata for String?);
  id v39 = a5;
  if (*((void *)&v44 + 1))
  {
    long long v45 = v44;
    if (v14)
    {
      id v36 = a4;
      id v19 = a5;
      outlined retain of String?((uint64_t)v43);
      id v20 = objc_msgSend(v13, sel_localizations);
      if (!v20) {
        id v20 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      uint64_t v21 = self;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v22 = swift_allocObject();
      long long v23 = v45;
      *(_OWORD *)(v22 + 16) = xmmword_1821037E0;
      *(_OWORD *)(v22 + 32) = v23;
      id v24 = objc_msgSend(v21, sel_preferredLocalizationsFromArray_forPreferences_, v20, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v24)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        uint64_t v25 = swift_dynamicCastClass();
        if (v25)
        {
          uint64_t v15 = (_OWORD *)v25;
        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v24, sel_copy);
          unint64_t v26 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v15 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v26);

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v15 = (_OWORD *)MEMORY[0x1E4FBC860];
      }
      a4 = v36;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v15 = (_OWORD *)swift_allocObject();
      long long v16 = v44;
      v15[1] = xmmword_1821037E0;
      void v15[2] = v16;
      id v17 = a5;
      outlined retain of String?((uint64_t)v43);
    }
  }
  else
  {
    id v18 = a5;
    uint64_t v15 = 0;
  }
  uint64_t v27 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v28 = String._bridgeToObjectiveCImpl()();
  if (a4)
  {
    a4 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v15) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (v15) {
LABEL_23:
  }
    uint64_t v15 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_24:
  id v29 = objc_msgSend(v13, sel_localizedStringForKey_value_table_localizations_, v27, v28, a4, v15);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  if (!*(void *)(v38 + 16))
  {
    outlined init with take of LocalePreferences?((uint64_t)&v40 + 8, (uint64_t)v42, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v42, (uint64_t)&v46, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v47 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v46, (uint64_t)v48),
          String._bridgeToObjectiveCImpl()(),
          id v34 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v34))
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  swift_unknownObjectRetain();
  uint64_t v33 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v38, v11, v37);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v40);
  uint64_t v30 = specialized withVaList<A>(_:_:)(v33, (uint64_t)v30, v32, v11, v37);
  outlined release of String.LocalizationOptions((uint64_t)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
LABEL_32:

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  outlined release of String.LocalizationOptions((uint64_t)&v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v30;
}

void *String.init(localized:defaultValue:options:table:bundle:locale:comment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, long long *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t *a9)
{
  uint64_t v11 = *a4;
  long long v12 = a5[1];
  long long v43 = *a5;
  *(_OWORD *)long long v44 = v12;
  *(_OWORD *)&v44[9] = *(long long *)((char *)a5 + 25);
  uint64_t v14 = *a9;
  uint64_t v13 = a9[1];
  StaticString.description.getter();
  if ((void)v43) {
    unint64_t v15 = v43;
  }
  else {
    unint64_t v15 = MEMORY[0x1E4FBC860];
  }
  long long v48 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v40 = v13;
  uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v11, &v48, v14, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a8) {
    id v16 = a8;
  }
  else {
    id v16 = objc_msgSend(self, sel_mainBundle);
  }
  outlined init with take of LocalePreferences?((uint64_t)&v44[8], (uint64_t)v46, &demangling cache variable for type metadata for String?);
  char v17 = v44[24];
  outlined init with take of LocalePreferences?((uint64_t)v46, (uint64_t)&v47, &demangling cache variable for type metadata for String?);
  uint64_t v42 = a8;
  if (*((void *)&v47 + 1))
  {
    long long v48 = v47;
    if (v17)
    {
      id v22 = a8;
      outlined retain of String?((uint64_t)v46);
      id v23 = objc_msgSend(v16, sel_localizations);
      if (!v23) {
        id v23 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      id v24 = self;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v25 = swift_allocObject();
      long long v26 = v48;
      *(_OWORD *)(v25 + 16) = xmmword_1821037E0;
      *(_OWORD *)(v25 + 32) = v26;
      id v27 = objc_msgSend(v24, sel_preferredLocalizationsFromArray_forPreferences_, v23, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v27)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        uint64_t v28 = swift_dynamicCastClass();
        if (v28)
        {
          id v18 = (_OWORD *)v28;
        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v27, sel_copy);
          unint64_t v29 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          id v18 = (_OWORD *)specialized _arrayForceCast<A, B>(_:)(v29);

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        id v18 = (_OWORD *)MEMORY[0x1E4FBC860];
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      id v18 = (_OWORD *)swift_allocObject();
      long long v19 = v47;
      v18[1] = xmmword_1821037E0;
      _OWORD v18[2] = v19;
      id v20 = a8;
      outlined retain of String?((uint64_t)v46);
    }
  }
  else
  {
    id v21 = a8;
    id v18 = 0;
  }
  uint64_t v30 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v31 = String._bridgeToObjectiveCImpl()();
  if (a7)
  {
    uint64_t v32 = (void *)String._bridgeToObjectiveCImpl()();
    if (!v18) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  uint64_t v32 = 0;
  if (v18) {
LABEL_22:
  }
    id v18 = (_OWORD *)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_24:
  id v33 = objc_msgSend(v16, sel_localizedStringForKey_value_table_localizations_, v30, v31, v32, v18);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  if (!*(void *)(v41 + 16))
  {
    outlined init with take of LocalePreferences?((uint64_t)&v43 + 8, (uint64_t)v45, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v45, (uint64_t)&v49, &demangling cache variable for type metadata for String.LocalizationOptions._PluralizationNumber?);
    if ((v50 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v49, (uint64_t)v51),
          String._bridgeToObjectiveCImpl()(),
          id v38 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v38))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
  }
  swift_unknownObjectRetain();
  uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v41, v14, v13);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  outlined retain of String.LocalizationOptions((uint64_t)&v43);
  id v34 = specialized withVaList<A>(_:_:)(v37, (uint64_t)v34, v36, v14, v40);
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
LABEL_30:

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of String.LocalizationOptions((uint64_t)&v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v34;
}

void *String.init(localized:options:table:bundle:localization:locale:comment:)(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  char v11 = *((unsigned char *)a2 + 16);
  char v42 = *((unsigned char *)a2 + 17);
  uint64_t v12 = a2[4];
  char v13 = *((unsigned char *)a2 + 40);
  uint64_t v14 = *a8;
  uint64_t v43 = a8[1];
  if (a7)
  {
    uint64_t v15 = a7;
  }
  else
  {
    a6 = a2[3];
    swift_bridgeObjectRetain();
    uint64_t v15 = v12;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v46[2] = v9;
  v46[3] = v10;
  char v47 = v11;
  char v48 = v42;
  uint64_t v49 = a6;
  uint64_t v50 = v15;
  char v51 = v13;
  if (v9) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  v46[0] = v17;
  v46[1] = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v8, v46, v14, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  if (a5)
  {
    id v18 = a5;
    if (v15) {
      goto LABEL_9;
    }
LABEL_18:
    id v26 = a5;
    uint64_t v25 = 0;
    goto LABEL_22;
  }
  id v18 = objc_msgSend(self, sel_mainBundle);
  if (!v15) {
    goto LABEL_18;
  }
LABEL_9:
  if (v13)
  {
    id v19 = a5;
    swift_bridgeObjectRetain();
    id v20 = objc_msgSend(v18, sel_localizations);
    if (!v20) {
      id v20 = (id)_ContiguousArrayBuffer._asCocoaArray()();
    }
    id v21 = self;
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1821037E0;
    *(void *)(v22 + 32) = a6;
    *(void *)(v22 + 40) = v15;
    id v23 = objc_msgSend(v21, sel_preferredLocalizationsFromArray_forPreferences_, v20, _ContiguousArrayBuffer._asCocoaArray()());

    swift_unknownObjectRelease();
    if (v23)
    {
      type metadata accessor for __SwiftDeferredNSArray();
      swift_unknownObjectRetain();
      if (swift_dynamicCastClass())
      {
        swift_retain();
      }
      uint64_t v24 = swift_dynamicCastClass();
      if (v24)
      {
        uint64_t v25 = v24;
      }
      else
      {
        swift_unknownObjectRelease();
        objc_msgSend(v23, sel_copy);
        unint64_t v28 = _bridgeCocoaArray<A>(_:)();
        swift_unknownObjectRelease();
        uint64_t v25 = specialized _arrayForceCast<A, B>(_:)(v28);

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v25 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1821037E0;
    *(void *)(v25 + 32) = a6;
    *(void *)(v25 + 40) = v15;
    id v27 = a5;
    swift_bridgeObjectRetain();
  }
LABEL_22:
  uint64_t v29 = String._bridgeToObjectiveCImpl()();
  swift_bridgeObjectRelease();
  uint64_t v30 = String._bridgeToObjectiveCImpl()();
  if (a4)
  {
    uint64_t v31 = (void *)String._bridgeToObjectiveCImpl()();
    uint64_t v32 = v18;
    if (!v25) {
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  uint64_t v31 = 0;
  uint64_t v32 = v18;
  if (v25) {
LABEL_24:
  }
    uint64_t v25 = _ContiguousArrayBuffer._asCocoaArray()();
LABEL_26:
  id v33 = objc_msgSend(v32, sel_localizedStringForKey_value_table_localizations_, v29, v30, v31, v25, v40);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  id v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  uint64_t v36 = v35;

  if (!*(void *)(v41 + 16))
  {
    if ((v42 & 1) != 0
      || (String._bridgeToObjectiveCImpl()(),
          id v38 = (id)_CFStringGetFormatSpecifierConfiguration(),
          swift_unknownObjectRelease(),
          !v38))
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  swift_unknownObjectRetain();
  uint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_ps5NeverOTg506_sSS10d3E17ef106V7resolve3key7options5table6bundle6locale07performB0S2SSg_SSAAE0B7OptionsVAKSo8NSBundleCSgAA6LocaleVSbtFs7ij6_pAC14gH6VXEfU_AF0Z0VTf1cn_nTf4ng_n(v41, v14, v43);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  id v34 = specialized withVaList<A>(_:_:)(v37, (uint64_t)v34, v36, v14, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_32:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  return v34;
}

void InflectionConcept.hash(into:)(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  if (*(unsigned char *)(v1 + 16))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v3);
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance InflectionConcept.CodingKeys()
{
  if (*v0) {
    return 0x657A696C61636F6CLL;
  }
  else {
    return 0x41664F736D726574;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance InflectionConcept.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized InflectionConcept.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.LocalizedPhraseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.LocalizedPhraseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance InflectionConcept.TermsOfAddressCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance InflectionConcept.TermsOfAddressCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t InflectionConcept.encode(to:)(void *a1)
{
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.LocalizedPhraseCodingKeys>);
  uint64_t v16 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.TermsOfAddressCodingKeys>);
  uint64_t v15 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  Swift::String v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<InflectionConcept.CodingKeys>);
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *v1;
  v14[1] = v1[1];
  char v10 = *((unsigned char *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v10)
  {
    char v23 = 1;
    lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v11 = v18;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v4, v11);
  }
  else
  {
    char v22 = 0;
    lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v21 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TermOfAddress]);
    lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A](&lazy protocol witness table cache variable for type [TermOfAddress] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress);
    uint64_t v12 = v17;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v9, v7);
}

Swift::Int InflectionConcept.hashValue.getter()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  return Hasher._finalize()();
}

uint64_t InflectionConcept.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v34 = a2;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.LocalizedPhraseCodingKeys>);
  uint64_t v35 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v4 = (char *)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.TermsOfAddressCodingKeys>);
  uint64_t v36 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<InflectionConcept.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  id v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type InflectionConcept.CodingKeys and conformance InflectionConcept.CodingKeys();
  uint64_t v13 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  uint64_t v33 = v5;
  uint64_t v14 = v37;
  uint64_t v39 = v9;
  uint64_t v15 = v11;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v23 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v25 = &type metadata for InflectionConcept;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v23 - 8) + 104))(v25, *MEMORY[0x1E4FBBA70], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v8);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  }
  v32[1] = v16;
  char v17 = *(unsigned char *)(v16 + 32);
  if (v17)
  {
    char v42 = 1;
    lazy protocol witness table accessor for type InflectionConcept.LocalizedPhraseCodingKeys and conformance InflectionConcept.LocalizedPhraseCodingKeys();
    uint64_t v18 = v4;
    uint64_t v19 = v15;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v21 = v18;
    uint64_t v22 = v39;
    uint64_t v36 = 0;
    uint64_t v28 = v20;
    uint64_t v30 = v29;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v14);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v8);
  }
  else
  {
    char v41 = 0;
    lazy protocol witness table accessor for type InflectionConcept.TermsOfAddressCodingKeys and conformance InflectionConcept.TermsOfAddressCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TermOfAddress]);
    lazy protocol witness table accessor for type [TermOfAddress] and conformance <A> [A](&lazy protocol witness table cache variable for type [TermOfAddress] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TermOfAddress and conformance TermOfAddress);
    uint64_t v27 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v27);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v8);
    uint64_t v36 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = v40;
  }
  uint64_t v31 = v34;
  *id v34 = v28;
  v31[1] = v30;
  *((unsigned char *)v31 + 16) = v17;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InflectionConcept()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance InflectionConcept(uint64_t a1)
{
  uint64_t v3 = *(void *)v1;
  if (*(unsigned char *)(v1 + 16))
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)(a1, v3);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InflectionConcept()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v2)
  {
    Hasher._combine(_:)(1uLL);
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    specialized Array<A>.hash(into:)((uint64_t)v4, v1);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance InflectionConcept@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return InflectionConcept.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance InflectionConcept(void *a1)
{
  return InflectionConcept.encode(to:)(a1);
}

uint64_t AttributedString.LocalizationOptions.replacements.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions.replacements.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.replacements.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.concepts.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions.concepts.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.concepts.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.inflect.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t AttributedString.LocalizationOptions.inflect.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 16) = result;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.inflect.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions.applyReplacementIndexAttribute.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t AttributedString.LocalizationOptions.applyReplacementIndexAttribute.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 17) = result;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions.applyReplacementIndexAttribute.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void String.LocalizationOptions._PluralizationNumber.hash(into:)()
{
  if (*(unsigned char *)(v0 + 8))
  {
    Swift::UInt v1 = 1;
  }
  else
  {
    Swift::UInt v1 = *(void *)v0;
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

BOOL static String.LocalizationOptions._PluralizationNumber.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(unsigned char *)(a2 + 8) & 1) != 0;
  }
  if (*(unsigned char *)(a2 + 8)) {
    return 0;
  }
  return *(void *)a1 == *(void *)a2;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys()
{
  if (*v0) {
    return 0x6E776F6E6B6E75;
  }
  else {
    return 0x6369666963657073;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized String.LocalizationOptions._PluralizationNumber.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AttributedString.LocalizationOptions._PluralizationNumber.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v20 = *(void *)(v3 - 8);
  uint64_t v21 = v3;
  MEMORY[0x1F4188790](v3);
  char v17 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v18 = *(void *)(v5 - 8);
  uint64_t v19 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)v1;
  char v12 = *(unsigned char *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v12)
  {
    char v23 = 1;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    uint64_t v13 = v17;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v13, v21);
  }
  else
  {
    char v22 = 0;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v15 = v19;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int String.LocalizationOptions._PluralizationNumber.hashValue.getter()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt v1 = 1;
  }
  else {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t AttributedString.LocalizationOptions._PluralizationNumber.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v30 = v3;
  uint64_t v31 = v4;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys>);
  uint64_t v32 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys>);
  uint64_t v34 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.CodingKeys();
  uint64_t v13 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13) {
    goto LABEL_6;
  }
  uint64_t v14 = v6;
  uint64_t v29 = v7;
  uint64_t v35 = a1;
  uint64_t v15 = v12;
  uint64_t v16 = KeyedDecodingContainer.allKeys.getter();
  if (*(void *)(v16 + 16) != 1)
  {
    uint64_t v18 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
    *uint64_t v20 = &type metadata for AttributedString.LocalizationOptions._PluralizationNumber;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x1E4FBBA70], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v10);
    a1 = v35;
LABEL_6:
    uint64_t v21 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v21);
  }
  char v17 = *(unsigned char *)(v16 + 32);
  if (v17)
  {
    char v37 = 1;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.UnknownCodingKeys();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
    uint64_t v25 = 0;
  }
  else
  {
    char v36 = 0;
    lazy protocol witness table accessor for type AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys and conformance AttributedString.LocalizationOptions._PluralizationNumber.SpecificCodingKeys();
    char v23 = v9;
    uint64_t v24 = v15;
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v26 = v29;
    uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v24, v10);
  }
  uint64_t v27 = v33;
  *uint64_t v33 = v25;
  *((unsigned char *)v27 + 8) = v17;
  uint64_t v21 = (uint64_t)v35;
  return __swift_destroy_boxed_opaque_existential_1(v21);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance String.LocalizationOptions._PluralizationNumber()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt v1 = 1;
  }
  else {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AttributedString.LocalizationOptions._PluralizationNumber@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AttributedString.LocalizationOptions._PluralizationNumber.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AttributedString.LocalizationOptions._PluralizationNumber(void *a1)
{
  return AttributedString.LocalizationOptions._PluralizationNumber.encode(to:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance String.LocalizationOptions._PluralizationNumber(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0) {
    return (*(void *)a1 == *(void *)a2) & ~result;
  }
  return result;
}

void AttributedString.LocalizationOptions._pluralizationNumber.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  char v3 = *(unsigned char *)(v1 + 33);
  *(void *)a1 = *(void *)(v1 + 24);
  *(unsigned char *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 9) = v3;
}

uint64_t AttributedString.LocalizationOptions._pluralizationNumber.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  char v3 = *(unsigned char *)(result + 9);
  *(void *)(v1 + 24) = *(void *)result;
  *(unsigned char *)(v1 + 32) = v2;
  *(unsigned char *)(v1 + 33) = v3;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions._pluralizationNumber.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

uint64_t AttributedString.LocalizationOptions._localization.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AttributedString.LocalizationOptions._localization.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AttributedString.LocalizationOptions._localization.modify())(void, void)
{
  return destructiveProjectEnumData for PredicateCodableError;
}

void AttributedString.LocalizationOptions.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 256;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
}

uint64_t static AttributedString.LocalizationOptions.termsOfAddressConcept(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(_WORD *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = 0;
  *(_WORD *)(a2 + 32) = 256;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InflectionConcept>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1821037E0;
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = 0;
  *(unsigned char *)(v4 + 48) = 0;
  *(void *)(a2 + 8) = v4;

  return swift_bridgeObjectRetain();
}

uint64_t static AttributedString.LocalizationOptions.localizedPhraseConcept(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(_WORD *)(a3 + 16) = 1;
  *(void *)(a3 + 24) = 0;
  *(_WORD *)(a3 + 32) = 256;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<InflectionConcept>);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1821037E0;
  *(void *)(v6 + 32) = a1;
  *(void *)(v6 + 40) = a2;
  *(unsigned char *)(v6 + 48) = 1;
  *(void *)(a3 + 8) = v6;

  return swift_bridgeObjectRetain();
}

uint64_t AttributedString.LocalizationOptions._nsOptions.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 17);
  uint64_t v2 = *(void *)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 33);
  uint64_t result = (uint64_t)objc_msgSend(objc_allocWithZone((Class)_NSStringFormattingOptions), sel_init);
  if (result)
  {
    uint64_t v6 = (void *)result;
    if (v4)
    {
      objc_msgSend((id)result, sel_setPluralizationNumber_, 0);
    }
    else
    {
      id v7 = objc_allocWithZone((Class)NSNumber);
      if (v3) {
        uint64_t v8 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v8 = v2;
      }
      id v9 = objc_msgSend(v7, sel_initWithInteger_, v8);
      objc_msgSend(v6, sel_setPluralizationNumber_, v9);
    }
    if (v1) {
      return 2;
    }
    else {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AttributedString.FormattingOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t AttributedString.FormattingOptions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static AttributedString.FormattingOptions.applyReplacementIndexAttribute.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t AttributedString.InterpolationOptions.rawValue.getter()
{
  return *(void *)v0;
}

void AttributedString.init(localized:options:table:bundle:locale:comment:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11 = *a1;
  char v12 = (void *)a1[1];
  uint64_t v13 = (_OWORD *)a1[2];
  char v14 = *a2;
  uint64_t v16 = *a6;
  uint64_t v15 = a6[1];
  v19[0] = 0;
  v19[1] = 0;
  char v20 = 1;
  char v21 = v14 & 1;
  uint64_t v22 = 0;
  __int16 v23 = 256;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  if (!v16)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v18 = static LocaleCache.cache;
    uint64_t v16 = LocaleCache.current.getter();
    uint64_t v15 = v17;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v19, a3, a4, (uint64_t)a5, v16, v15, 1u, v11, v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a7 = v18;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, long long *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = *((void *)a1 + 2);
  char v13 = *((unsigned char *)a2 + 16);
  char v14 = *((unsigned char *)a2 + 17);
  uint64_t v15 = *((void *)a2 + 3);
  char v16 = *((unsigned char *)a2 + 32);
  char v17 = *((unsigned char *)a2 + 33);
  char v18 = *((unsigned char *)a2 + 56);
  long long v31 = *a1;
  uint64_t v32 = v12;
  long long v19 = *a2;
  char v24 = v13;
  char v25 = v14;
  uint64_t v26 = v15;
  char v27 = v16;
  char v28 = v17;
  long long v29 = *(long long *)((char *)a2 + 40);
  char v30 = v18;
  long long v22 = *a6;
  long long v23 = v19;
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)((uint64_t *)&v31, (uint64_t *)&v23, a3, a4, a5, (uint64_t *)&v22, &v33, v21, a10, a10, a11);
  uint64_t result = swift_release();
  *a7 = v33;
  return result;
}

void AttributedString.init(localized:defaultValue:options:table:bundle:locale:comment:)(uint64_t *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, uint64_t *a6@<X8>, uint64_t *a7)
{
  uint64_t v11 = *a1;
  uint64_t v10 = (void *)a1[1];
  uint64_t v12 = (_OWORD *)a1[2];
  char v13 = *a2;
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  v22[0] = 0;
  v22[1] = 0;
  char v23 = 1;
  char v24 = v13 & 1;
  uint64_t v25 = 0;
  __int16 v26 = 256;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  char v29 = 0;
  uint64_t v16 = StaticString.description.getter();
  uint64_t v18 = v17;
  if (!v14)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v21 = static LocaleCache.cache;
    uint64_t v14 = LocaleCache.current.getter();
    uint64_t v15 = v19;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v16, v18, (uint64_t)v22, a3, a4, (uint64_t)a5, v14, v15, 1u, v11, v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *a6 = v21;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>(long long *a1@<X3>, long long *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v14 = *((void *)a1 + 2);
  char v15 = *((unsigned char *)a2 + 16);
  char v16 = *((unsigned char *)a2 + 17);
  uint64_t v17 = *((void *)a2 + 3);
  char v18 = *((unsigned char *)a2 + 32);
  char v19 = *((unsigned char *)a2 + 33);
  char v20 = *((unsigned char *)a2 + 56);
  long long v35 = *a1;
  uint64_t v36 = v14;
  long long v21 = *a2;
  char v28 = v15;
  char v29 = v16;
  uint64_t v30 = v17;
  char v31 = v18;
  char v32 = v19;
  long long v33 = *(long long *)((char *)a2 + 40);
  char v34 = v20;
  long long v26 = *a7;
  long long v27 = v21;
  AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)((uint64_t *)&v35, (uint64_t *)&v27, a3, a4, a5, &v37, (uint64_t *)&v26, v23, v24, v25, a12, a12, a13);
  uint64_t result = swift_release();
  *a6 = v37;
  return result;
}

uint64_t AttributedString.init(localized:options:table:bundle:locale:comment:)@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v11 = *a1;
  uint64_t v12 = (void *)a1[1];
  char v13 = (_OWORD *)a1[2];
  long long v14 = a2[1];
  v20[0] = *a2;
  v20[1] = v14;
  v21[0] = a2[2];
  *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v15 = *a6;
  if (*a6)
  {
    uint64_t v16 = a6[1];
  }
  else
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v19 = static LocaleCache.cache;
    uint64_t v15 = LocaleCache.current.getter();
    uint64_t v16 = v17;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v20, a3, a4, (uint64_t)a5, v15, v16, 1u, v11, v12, v13);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  outlined release of AttributedString.LocalizationOptions((uint64_t)v20);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a7 = v19;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v13 = a3;
  uint64_t v14 = a10;
  uint64_t v15 = a9;
  uint64_t v16 = a1[1];
  uint64_t v17 = a1[2];
  uint64_t v19 = *a2;
  uint64_t v18 = a2[1];
  char v20 = *((unsigned char *)a2 + 16);
  char v21 = *((unsigned char *)a2 + 17);
  uint64_t v22 = a2[3];
  char v23 = *((unsigned char *)a2 + 32);
  char v24 = *((unsigned char *)a2 + 33);
  uint64_t v25 = a2[5];
  uint64_t v26 = a2[6];
  char v27 = *((unsigned char *)a2 + 56);
  uint64_t v29 = *a6;
  uint64_t v28 = a6[1];
  uint64_t v43 = *a1;
  uint64_t v44 = v16;
  uint64_t v45 = v17;
  v34[0] = v19;
  v34[1] = v18;
  char v35 = v20;
  char v36 = v21;
  uint64_t v37 = v22;
  char v38 = v23;
  char v39 = v24;
  uint64_t v40 = v25;
  uint64_t v41 = v26;
  char v42 = v27;
  if (!v29)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v33[0] = static LocaleCache.cache;
    uint64_t v29 = LocaleCache.current.getter();
    uint64_t v15 = a9;
    uint64_t v13 = a3;
    uint64_t v14 = a10;
  }
  v33[0] = v29;
  v33[1] = v28;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v34, v13, a4, (uint64_t)a5, (uint64_t)v33, v15, 1u, v14, a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a7 = v46;
  return result;
}

uint64_t AttributedString.init(localized:defaultValue:options:table:bundle:locale:comment:)@<X0>(uint64_t *a1@<X3>, _OWORD *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, uint64_t *a6@<X8>, uint64_t *a7)
{
  uint64_t v11 = *a1;
  uint64_t v10 = (void *)a1[1];
  uint64_t v12 = (_OWORD *)a1[2];
  long long v13 = a2[1];
  v23[0] = *a2;
  v23[1] = v13;
  v24[0] = a2[2];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v14 = *a7;
  uint64_t v15 = a7[1];
  uint64_t v16 = StaticString.description.getter();
  uint64_t v18 = v17;
  if (!v14)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    uint64_t v22 = static LocaleCache.cache;
    uint64_t v14 = LocaleCache.current.getter();
    uint64_t v15 = v19;
  }
  specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v16, v18, (uint64_t)v23, a3, a4, (uint64_t)a5, v14, v15, 1u, v11, v10, v12);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined release of AttributedString.LocalizationOptions((uint64_t)v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = v22;
  return result;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>(uint64_t *a1@<X3>, uint64_t *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  char v17 = *((unsigned char *)a2 + 16);
  char v33 = *((unsigned char *)a2 + 17);
  uint64_t v18 = a2[3];
  char v19 = *((unsigned char *)a2 + 32);
  char v20 = *((unsigned char *)a2 + 33);
  uint64_t v22 = a2[5];
  uint64_t v21 = a2[6];
  char v23 = *((unsigned char *)a2 + 56);
  uint64_t v24 = *a7;
  uint64_t v32 = a7[1];
  uint64_t v48 = *a1;
  uint64_t v49 = v13;
  uint64_t v50 = v14;
  uint64_t v25 = StaticString.description.getter();
  v39[0] = v15;
  v39[1] = v16;
  char v40 = v17;
  char v41 = v33;
  uint64_t v42 = v18;
  char v43 = v19;
  char v44 = v20;
  uint64_t v45 = v22;
  uint64_t v46 = v21;
  char v47 = v23;
  if (v24)
  {
    uint64_t v27 = v32;
  }
  else
  {
    uint64_t v28 = v25;
    uint64_t v29 = v26;
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v38[0] = static LocaleCache.cache;
    uint64_t v24 = LocaleCache.current.getter();
    uint64_t v27 = v30;
    uint64_t v26 = v29;
    uint64_t v25 = v28;
  }
  v38[0] = v24;
  v38[1] = v27;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(v25, v26, (uint64_t)v39, a3, a4, (uint64_t)a5, (uint64_t)v38, a11, 1u, a12, a13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a6 = v51;
  return result;
}

uint64_t AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)@<X0>(long long *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, long long *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = *((void *)a1 + 2);
  char v13 = *a2;
  long long v25 = *a1;
  uint64_t v26 = v12;
  v17[0] = 0;
  v17[1] = 0;
  char v18 = 1;
  char v19 = v13 & 1;
  uint64_t v20 = 0;
  __int16 v21 = 256;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  char v24 = 0;
  long long v16 = *a6;
  AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)((uint64_t *)&v25, v17, a3, a4, a5, (uint64_t *)&v16, &v27, v15, a10, a10, a11);
  uint64_t result = swift_release();
  *a7 = v27;
  return result;
}

uint64_t AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)@<X0>(long long *a1@<X3>, char *a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void *a5@<X7>, void *a6@<X8>, long long *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  uint64_t v14 = *((void *)a1 + 2);
  char v15 = *a2;
  long long v29 = *a1;
  uint64_t v30 = v14;
  v21[0] = 0;
  v21[1] = 0;
  char v22 = 1;
  char v23 = v15 & 1;
  uint64_t v24 = 0;
  __int16 v25 = 256;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  long long v20 = *a7;
  AttributedString.init<A>(localized:defaultValue:options:table:bundle:locale:comment:including:)((uint64_t *)&v29, v21, a3, a4, a5, &v31, (uint64_t *)&v20, v17, v18, v19, a12, a12, a13);
  uint64_t result = swift_release();
  *a6 = v31;
  return result;
}

void AttributedString.init<A>(localized:options:table:bundle:locale:comment:including:)(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, void *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v14 = a1[1];
  uint64_t v15 = a1[2];
  char v16 = *a2;
  uint64_t v18 = *a6;
  uint64_t v17 = a6[1];
  uint64_t v29 = *a1;
  uint64_t v30 = v14;
  uint64_t v31 = v15;
  v21[0] = 0;
  v21[1] = 0;
  char v22 = 1;
  char v23 = v16 & 1;
  uint64_t v24 = 0;
  __int16 v25 = 256;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  char v28 = 0;
  if (!v18)
  {
    if (one-time initialization token for cache != -1) {
      swift_once();
    }
    v20[0] = static LocaleCache.cache;
    uint64_t v18 = LocaleCache.current.getter();
  }
  v20[0] = v18;
  v20[1] = v17;
  String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(0, 0, (uint64_t)v21, a3, a4, (uint64_t)a5, (uint64_t)v20, a9, 1u, a10, a11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  *a7 = v32;
}

void specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, void *a11, _OWORD *a12)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  long long v20 = v19;
  uint64_t v920 = v21;
  id v919 = v22;
  v864 = v23;
  uint64_t v1374 = *MEMORY[0x1E4F143B8];
  v921 = v24;
  v906 = v12;
  if (!v24)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = v906;
    id v919 = a11;
    v921 = a12;
  }
  id v922 = a11;
  if (*(void *)v12) {
    unint64_t v25 = *(void *)v12;
  }
  else {
    unint64_t v25 = MEMORY[0x1E4FBC860];
  }
  v990[0] = v25;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v918 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(a10, v990, v16, (uint64_t)v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v908 = 0;
  if (v18) {
    id v889 = v18;
  }
  else {
    id v889 = objc_msgSend(self, sel_mainBundle);
  }
  id v26 = v18;
  swift_bridgeObjectRetain();
  uint64_t v27 = String.count.getter();
  swift_bridgeObjectRelease();
  if (v27 < 1)
  {
    long long v20 = (void *)0xEB00000000656C62;
    uint64_t v920 = 0x617A696C61636F4CLL;
  }
  else
  {
    if (!v20)
    {
      __break(1u);
LABEL_342:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181DD2860);
    }
    swift_bridgeObjectRetain();
  }
  LODWORD(v917) = a9;
  uint64_t v28 = *((void *)v906 + 6);
  v863 = (void *)v16;
  id v913 = v20;
  if (v28)
  {
    uint64_t v29 = *((void *)v906 + 5);
    if (v906[56])
    {
      swift_bridgeObjectRetain();
      id v31 = objc_msgSend(v889, sel_localizations);
      if (!v31) {
        id v31 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      uint64_t v32 = self;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1821037E0;
      *(void *)(v33 + 32) = v29;
      *(void *)(v33 + 40) = v28;
      id v34 = objc_msgSend(v32, sel_preferredLocalizationsFromArray_forPreferences_, v31, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v34)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        uint64_t v35 = swift_dynamicCastClass();
        if (v35)
        {
          uint64_t v30 = v35;
        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v34, sel_copy);
          unint64_t v36 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v30 = specialized _arrayForceCast<A, B>(_:)(v36);

          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v30 = MEMORY[0x1E4FBC860];
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_1821037E0;
      *(void *)(v30 + 32) = v29;
      *(void *)(v30 + 40) = v28;
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    uint64_t v30 = 0;
  }
  swift_bridgeObjectRetain();
  id v37 = objc_msgSend(v889, sel_preferredLocalizations);
  char v38 = (void *)MEMORY[0x1E4FBC860];
  if (!v37)
  {
LABEL_31:
    if (v30) {
      goto LABEL_32;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  char v39 = v37;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v40 = swift_dynamicCastClass();
  if (v40)
  {
    char v38 = (void *)v40;

    goto LABEL_31;
  }
  swift_unknownObjectRelease();
  objc_msgSend(v39, sel_copy);
  unint64_t v42 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  char v38 = (void *)specialized _arrayForceCast<A, B>(_:)(v42);

  swift_bridgeObjectRelease();
  if (!v30) {
    goto LABEL_35;
  }
LABEL_32:
  char v41 = specialized static Array<A>.== infix(_:_:)((void *)v30, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41)
  {
    swift_bridgeObjectRelease();
    uint64_t v30 = 0;
  }
LABEL_36:
  uint64_t v872 = v30;
  v862 = v14;
  if ((v917 & 1) == 0)
  {
    if (v918[2])
    {
      v915 = 0;
      id v876 = 0;
      *(void *)&v1017[0] = MEMORY[0x1E4FBC868];
      LODWORD(v914) = 1;
      char v47 = v863;
      goto LABEL_52;
    }
    uint64_t v49 = 0;
    id v50 = 0;
    goto LABEL_47;
  }
  uint64_t v43 = String._bridgeToObjectiveCImpl()();
  uint64_t v44 = String._bridgeToObjectiveCImpl()();
  uint64_t v45 = String._bridgeToObjectiveCImpl()();
  if (v30)
  {
    swift_bridgeObjectRetain();
    uint64_t v46 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
  }
  else
  {
    uint64_t v46 = 0;
  }
  *(void *)&v990[0] = 0;
  *(void *)&v989[0] = 0;
  id v48 = objc_msgSend(v889, sel__localizedStringNoCacheNoMarkdownParsingForKey_value_table_localizations_actualTableURL_formatSpecifierConfiguration_, v43, v44, v45, v46, v990, v989);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  uint64_t v49 = *(_OWORD **)&v989[0];
  id v50 = *(id *)&v990[0];
  if (!v48)
  {
    id v94 = *(id *)&v989[0];
    id v95 = v50;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v990, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v989);

    swift_bridgeObjectRelease();
    void *v864 = *(void *)&v989[0];
    return;
  }
  id v51 = *(id *)&v989[0];
  id v52 = v50;
  swift_bridgeObjectRelease();
  self;
  long long v53 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v919 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  v921 = v54;

  if (!v918[2])
  {
LABEL_47:
    outlined init with take of LocalePreferences?((uint64_t)(v906 + 24), (uint64_t)v1066, &demangling cache variable for type metadata for AttributedString.LocalizationOptions._PluralizationNumber?);
    outlined init with take of LocalePreferences?((uint64_t)v1066, (uint64_t)&v1333, &demangling cache variable for type metadata for AttributedString.LocalizationOptions._PluralizationNumber?);
    BOOL v55 = v908;
    if ((v1334 & 1) != 0
      || (outlined init with take of AttributedString.LocalizationOptions._PluralizationNumber(&v1333, (uint64_t)&v1335),
          !v49))
    {
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v1065, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v990);
      LODWORD(v914) = 0;
      v916 = *(_OWORD **)&v990[0];
      goto LABEL_73;
    }
    LODWORD(v914) = 0;
    *(void *)&v1017[0] = MEMORY[0x1E4FBC868];
    goto LABEL_50;
  }
  *(void *)&v1017[0] = MEMORY[0x1E4FBC868];
  LODWORD(v914) = 1;
  if (!v51)
  {
    id v876 = v50;
    v915 = 0;
    char v47 = v863;
    goto LABEL_52;
  }
LABEL_50:
  char v47 = v863;
  uint64_t v56 = one-time initialization token for formatSpecifierConfiguration;
  uint64_t v57 = v49;
  if (v56 == -1) {
    goto LABEL_51;
  }
  while (1)
  {
    swift_once();
LABEL_51:
    v915 = v49;
    id v876 = v50;
    char v58 = (void *)static NSAttributedStringKey.formatSpecifierConfiguration;
    *((void *)&v990[1] + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDictionary);
    *(void *)&v990[0] = v57;
    specialized Dictionary.subscript.setter((uint64_t)v990, v58);
LABEL_52:
    id v59 = objc_allocWithZone((Class)NSAttributedString);
    uint64_t v60 = String._bridgeToObjectiveCImpl()();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    swift_bridgeObjectRetain();
    id v61 = objc_msgSend(v59, sel_initWithString_attributes_, v60, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRetain();
    uint64_t v62 = v908;
    uint64_t v63 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTm((uint64_t)v918, (uint64_t)v47, (uint64_t)v14, (uint64_t)&v925, (uint64_t (*)(void))_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg506_sSS10d3E17ef101V23_formatAttributedString_17preparedArguments7options5scope0D13Configuration6localeAA0eF0VSS_SayAC14gh51VGAK0B7OptionsVxmSo12NSDictionaryCSgAA6LocaleVtAA14l11ScopeRzlFs7ij17_p6vararg_AM01_R5m9OSg11attrO44InfotAMXEfU_AA0R6ScopesO0A10AttributesV_TGm5AF6LocaleVTf1cn_nTf4ng_n);
    v911 = v62;
    long long v64 = *((_OWORD *)v906 + 1);
    v990[0] = *(_OWORD *)v906;
    v990[1] = v64;
    v990[2] = *((_OWORD *)v906 + 2);
    *(_OWORD *)((char *)&v990[2] + 9) = *(_OWORD *)(v906 + 41);
    uint64_t v65 = AttributedString.LocalizationOptions._nsOptions.getter();
    uint64_t v67 = v66;
    uint64_t v910 = v65 | 2;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v69 = (uint64_t (*)(uint64_t, void *))v14[61];
    id v922 = v67;
    uint64_t v70 = v63;
    uint64_t v71 = (void *)v69(ObjectType, v14);
    int64_t v72 = *(void *)(v70 + 16);
    id v912 = v61;
    v916 = (_OWORD *)v70;
    if (v72)
    {
      *(void *)&v1007[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72, 0);
      uint64_t v73 = v70 + 32;
      uint64_t v74 = *(void *)&v1007[0];
      int64_t v75 = v72;
      do
      {
        outlined init with copy of (Hashable & Sendable)?(v73, (uint64_t)v990, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v990, (uint64_t)v989);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v989, (uint64_t)&v964);
        outlined destroy of Any?((uint64_t)v990, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v74 + 16) + 1, 1);
          uint64_t v74 = *(void *)&v1007[0];
        }
        unint64_t v77 = *(void *)(v74 + 16);
        unint64_t v76 = *(void *)(v74 + 24);
        if (v77 >= v76 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
          uint64_t v74 = *(void *)&v1007[0];
        }
        *(void *)(v74 + 16) = v77 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v964, v74 + 40 * v77 + 32);
        v73 += 64;
        --v75;
      }
      while (v75);
      id v61 = v912;
    }
    long long v78 = self;
    uint64_t v79 = getVaList(_:)();
    swift_bridgeObjectRelease();
    long long v80 = v922;
    id v81 = objc_msgSend(v78, sel__attributedStringWithFormat_attributeOptions_formattingOptions_locale_arguments_, v61, v910, v922, v71, v79);

    id v82 = v81;
    id v83 = specialized static AttributeScope.scopeDescription.getter();
    swift_bridgeObjectRelease();
    uint64_t v84 = v911;
    AttributedString.init(_:attributeTable:options:)(v82, (uint64_t)v83, 0, v990);
    id v50 = v876;
    uint64_t v85 = v61;
    uint64_t v49 = v915;
    if (v84)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v1065, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v990);
      swift_bridgeObjectRelease();

      BOOL v55 = 0;
      v916 = *(_OWORD **)&v990[0];
      uint64_t v30 = v872;
    }
    else
    {
      v908 = 0;
      *(void *)&long long v964 = *(void *)&v990[0];
      uint64_t v86 = MEMORY[0x1E4FBC860];
      if (v72)
      {
        id v919 = v82;
        *(void *)&v1007[0] = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v72, 0);
        uint64_t v87 = (uint64_t)(v916 + 2);
        uint64_t v86 = *(void *)&v1007[0];
        do
        {
          outlined init with copy of (Hashable & Sendable)?(v87, (uint64_t)v990, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v990, (uint64_t)v989);
          uint64_t v88 = *((void *)&v990[2] + 1);
          uint64_t v89 = *(void *)&v990[3];
          char v90 = BYTE8(v990[3]);
          *((void *)&v989[2] + 1) = *((void *)&v990[2] + 1);
          *(void *)&v989[3] = *(void *)&v990[3];
          BYTE8(v989[3]) = BYTE8(v990[3]);
          outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(*((uint64_t *)&v990[2] + 1), *(uint64_t *)&v990[3], BYTE8(v990[3]));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v989);
          outlined destroy of Any?((uint64_t)v990, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v86 + 16) + 1, 1);
            uint64_t v86 = *(void *)&v1007[0];
          }
          unint64_t v92 = *(void *)(v86 + 16);
          unint64_t v91 = *(void *)(v86 + 24);
          if (v92 >= v91 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v91 > 1, v92 + 1, 1);
            uint64_t v86 = *(void *)&v1007[0];
          }
          *(void *)(v86 + 16) = v92 + 1;
          uint64_t v93 = v86 + 24 * v92;
          *(void *)(v93 + 32) = v88;
          *(void *)(v93 + 40) = v89;
          *(unsigned char *)(v93 + 48) = v90;
          v87 += 64;
          --v72;
          long long v80 = v922;
        }
        while (v72);
        id v50 = v876;
        uint64_t v49 = v915;
        id v82 = v919;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.LocalizationValue.restoreAttributedStringArguments(_:in:)(v86);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v916 = (_OWORD *)v964;
      uint64_t v30 = v872;
      BOOL v55 = v908;
    }
LABEL_73:
    long long v96 = v916[1];
    long long v97 = v916[2];
    long long v1332 = v916[3];
    v1331[1] = v97;
    v1331[0] = v96;
    long long v98 = v916[1];
    long long v99 = v916[2];
    v1336[2] = v1332;
    v1336[1] = v99;
    v1336[0] = v98;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1336, (uint64_t)v1337);
    outlined retain of Locale((uint64_t)v1337);
    v907 = (void *)MEMORY[0x185302050](v1331);
    uint64_t v910 = v100;
    if (v50)
    {
      URL.init(reference:)(v50, v990);
      char v102 = (_OWORD *)*((void *)&v990[0] + 1);
      uint64_t v101 = *(void **)&v990[0];
      uint64_t v103 = *(void *)&v990[1];
    }
    else
    {
      uint64_t v101 = 0;
      char v102 = 0;
      uint64_t v103 = 0;
    }
    v873 = v49;
    v104._uint64_t countAndFlagsBits = 0x65686361636F6E2ELL;
    v104._unint64_t object = (void *)0xE800000000000000;
    BOOL v105 = String.hasSuffix(_:)(v104);
    uint64_t v106 = swift_bridgeObjectRelease();
    id v876 = v50;
    id v922 = v101;
    LODWORD(v921) = (v105 || v30 != 0) | v917 ^ 1;
    v915 = v49;
    if (!((v105 || v30 != 0) | (v917 ^ 1) & 1))
    {
      if (one-time initialization token for attributedStringsCacheLock != -1) {
        goto LABEL_280;
      }
      goto LABEL_78;
    }
LABEL_81:
    v908 = v55;
    if (one-time initialization token for localizedAttributedString != -1) {
LABEL_278:
    }
      swift_once();
    LODWORD(v920) = static AttributedString.MarkdownParsingOptions.localizedAttributedString;
    LODWORD(v913) = byte_1E8EDF429;
    LODWORD(v919) = byte_1E8EDF42A;
    uint64_t v110 = qword_1E8EDF430;
    uint64_t v111 = (NSError *)unk_1E8EDF438;
    if (v101)
    {
      *(void *)&v990[0] = v101;
      *((void *)&v990[0] + 1) = v102;
      *(void *)&v990[1] = v103;
      swift_bridgeObjectRetain();
      unint64_t v112 = URL.pathComponents.getter();
      unint64_t v113 = v112;
      uint64_t v114 = *(void *)(v112 + 16);
      if (v114)
      {
        uint64_t v115 = v112 + 16 * v114 + 24;
        while (v114 <= *(void *)(v113 + 16))
        {
          swift_bridgeObjectRetain();
          v116._uint64_t countAndFlagsBits = 0x6A6F72706C2ELL;
          v116._unint64_t object = (void *)0xE600000000000000;
          if (String.hasSuffix(_:)(v116) && String.count.getter() >= 7)
          {
            swift_bridgeObjectRelease();
            String.index(_:offsetBy:)();
            uint64_t v117 = String.subscript.getter();
            uint64_t v119 = v118;
            uint64_t v121 = v120;
            uint64_t v123 = v122;
            swift_bridgeObjectRelease();
            uint64_t v110 = MEMORY[0x185301F50](v117, v119, v121, v123);
            uint64_t v125 = v124;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v111 = v125;
            goto LABEL_90;
          }
          --v114;
          swift_bridgeObjectRelease();
          v115 -= 16;
          if (!v114) {
            goto LABEL_266;
          }
        }
        __break(1u);
      }
LABEL_266:
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    if (!v111 && (v917 & 1) != 0)
    {
      id v127 = objc_msgSend(v889, sel_preferredLocalizations);
      if (v127)
      {
        uint64_t v128 = v127;
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v129 = swift_dynamicCastClass();
        if (v129)
        {
          char v130 = (void *)v129;

          if (v130[2]) {
            goto LABEL_261;
          }
        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v128, sel_copy);
          unint64_t v812 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          char v130 = (void *)specialized _arrayForceCast<A, B>(_:)(v812);

          swift_bridgeObjectRelease();
          if (v130[2])
          {
LABEL_261:
            uint64_t v110 = v130[4];
            uint64_t v111 = (NSError *)v130[5];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            goto LABEL_90;
          }
        }
      }
      else
      {
        char v130 = (void *)MEMORY[0x1E4FBC860];
        if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
          goto LABEL_261;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v111 = 0;
    }
LABEL_90:
    if (!v915)
    {
      memset(v990, 0, 32);
      uint64_t v131 = v922;
LABEL_112:
      outlined destroy of Any?((uint64_t)v990, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_113;
    }
    *(void *)&v989[0] = 0xD000000000000022;
    *((void *)&v989[0] + 1) = 0x80000001823B0C80;
    id v126 = objc_msgSend(v873, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    if (v126)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v989, 0, 32);
    }
    uint64_t v131 = v922;
    outlined init with take of LocalePreferences?((uint64_t)v989, (uint64_t)v990, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (!*((void *)&v990[1] + 1)) {
      goto LABEL_112;
    }
    if (swift_dynamicCast())
    {
      long long v132 = v989[0];
      if (v919) {
        int v133 = 0x10000;
      }
      else {
        int v133 = 0;
      }
      int v134 = v920 | (v913 << 8) | v133;
      swift_bridgeObjectRetain();
      uint64_t v135 = (NSError *)v110;
      BOOL v55 = v908;
      int v136 = specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v989, v132, *((unint64_t *)&v132 + 1), v134, v135, v111, (int)v914, 0);
      if (v55)
      {
        swift_bridgeObjectRelease();

        uint64_t v137 = swift_bridgeObjectRelease();
        if (v921) {
          goto LABEL_253;
        }
        id v912 = (id)v103;
LABEL_251:
        if (one-time initialization token for attributedStringsCacheLock != -1) {
          goto LABEL_339;
        }
        goto LABEL_252;
      }
      int v142 = v136;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(void *)&v990[0] = *(void *)&v989[0];
      unint64_t v811 = v910;
      swift_bridgeObjectRetain();
      specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v989, (uint64_t)v907, v811, 512, 0, 0, 0, 0);
      swift_bridgeObjectRelease();
      uint64_t v137 = specialized AttributedString.subscript.setter(*(uint64_t *)&v989[0]);
      goto LABEL_121;
    }
LABEL_113:
    if (v919) {
      int v138 = 0x10000;
    }
    else {
      int v138 = 0;
    }
    int v139 = v920 | (v913 << 8) | v138;
    swift_bridgeObjectRetain();
    char v140 = (NSError *)v110;
    BOOL v55 = v908;
    int v141 = specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v990, (uint64_t)v907, v910, v139, v140, v111, (int)v914, 0);
    if (v55)
    {

      uint64_t v137 = swift_bridgeObjectRelease();
      BOOL v55 = 0;
      int v142 = 0;
      long long v108 = 0;
      if (v921) {
        goto LABEL_118;
      }
      goto LABEL_122;
    }
    int v142 = v141;
    uint64_t v137 = swift_bridgeObjectRelease();
LABEL_121:
    long long v108 = *(_OWORD **)&v990[0];
    if (v921)
    {
LABEL_118:
      if (!v108) {
        goto LABEL_253;
      }
      int v870 = v142;
      goto LABEL_126;
    }
LABEL_122:
    id v912 = (id)v103;
    if (!v108) {
      goto LABEL_251;
    }
    v921 = v102;
    int v870 = v142;
    v908 = 0;
    uint64_t v143 = one-time initialization token for attributedStringsCacheLock;
    uint64_t v144 = swift_retain_n();
    if (v143 != -1) {
      uint64_t v144 = swift_once();
    }
    uint64_t v145 = static String.LocalizationValue.attributedStringsCacheLock;
    MEMORY[0x1F4188790](v144);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v145 + 24));
    BOOL v55 = v908;
    partial apply for specialized closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)((uint64_t *)(v145 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v145 + 24));
    swift_release();
    swift_release_n();
    uint64_t v131 = v922;
LABEL_126:

    swift_bridgeObjectRelease();
    outlined consume of URL?(v131);
LABEL_127:
    v924 = v108;
    uint64_t v923 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    if (v914) {
      break;
    }
    swift_bridgeObjectRelease();
    id v793 = v876;
LABEL_240:
    v794 = v906;
    if ((v906[17] & 1) == 0)
    {
      specialized AttributedString.subscript.setter(0, 1);
      v794 = v906;
    }
    if ((*((unsigned char *)v794 + 16) & v870 & 1) == 0)
    {
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      void *v864 = v924;

      return;
    }
    v795 = v924;
    uint64_t v796 = v923;
    uint64_t v797 = *((void *)v794 + 1);
    v614 = (void *)swift_allocObject();
    v614[2] = v795;
    v615 = v614 + 2;
    long long v798 = v795[2];
    v990[0] = v795[1];
    v990[1] = v798;
    v990[2] = v795[3];
    v915 = v795;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v990);
    MEMORY[0x185302050](v990);
    id v799 = objc_allocWithZone((Class)NSMutableString);
    uint64_t v800 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v801 = objc_msgSend(v799, sel_initWithString_, v800);
    swift_unknownObjectRelease();
    id v922 = (id)v796;
    id v913 = v801;
    v914 = v614;
    if (v797)
    {
      uint64_t v802 = *(void *)(v797 + 16);
      uint64_t v612 = MEMORY[0x1E4FBC860];
      if (v802)
      {
        v921 = v614 + 2;
        *(void *)&long long v964 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        uint64_t v920 = v797;
        v803 = (unsigned char *)(v797 + 48);
        do
        {
          if (*v803 == 1)
          {
            id v804 = objc_allocWithZone((Class)NSString);
            uint64_t v805 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRetain();
            objc_msgSend(v804, sel_initWithString_, v805);
            swift_unknownObjectRelease();
            outlined consume of InflectionConcept();
          }
          else
          {
            swift_bridgeObjectRetain();
            _ContiguousArrayBuffer._asCocoaArray()();
          }
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v803 += 24;
          --v802;
        }
        while (v802);
        uint64_t v612 = v964;
        swift_bridgeObjectRelease();
        uint64_t v796 = (uint64_t)v922;
        v614 = v914;
        v615 = v921;
      }
    }
    else
    {
      uint64_t v612 = 0;
    }
    v808 = v862;
    uint64_t v809 = swift_getObjectType();
    v810 = (_OWORD *)((uint64_t (*)(uint64_t, void *))v808[61])(v809, v808);
    if ((unint64_t)v796 >> 62)
    {
      uint64_t v813 = v796 & 0xFFFFFFFFFFFFFF8;
      if (v796 < 0) {
        uint64_t v813 = v796;
      }
      uint64_t v920 = v813;
      swift_bridgeObjectRetain();
      v921 = v810;
      if (!v612)
      {
LABEL_287:
        id v919 = 0;
        goto LABEL_288;
      }
    }
    else
    {
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for _NSAttributedStringReplacement);
      swift_bridgeObjectRetain();
      uint64_t v920 = _ContiguousArrayBuffer._asCocoaArray()();
      v921 = v810;
      if (!v612) {
        goto LABEL_287;
      }
    }
    uint64_t v613 = v612 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v612 >> 62) {
      goto LABEL_331;
    }
    type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v919 = (id)_ContiguousArrayBuffer._asCocoaArray()();
LABEL_288:
    v918 = objc_msgSend(self, sel_currentUser);
    v967 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    v968 = v614;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    v966 = &block_descriptor_239;
    v917 = _Block_copy(&v964);
    swift_retain();
    swift_release();
    uint64_t v814 = swift_allocObject();
    *(void *)(v814 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v814 + 24) = v614;
    v967 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v968 = (void *)v814;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v966 = &block_descriptor_247;
    id v912 = _Block_copy(&v964);
    swift_retain();
    uint64_t v894 = v814;
    swift_retain();
    swift_release();
    uint64_t v815 = swift_allocObject();
    *(void *)(v815 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v815 + 24) = v614;
    v967 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v968 = (void *)v815;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v966 = &block_descriptor_255;
    v911 = _Block_copy(&v964);
    swift_retain();
    v895 = (_OWORD *)v815;
    swift_retain();
    swift_release();
    uint64_t v816 = swift_allocObject();
    *(void *)(v816 + 16) = v615;
    uint64_t v817 = swift_allocObject();
    *(void *)(v817 + 16) = closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v817 + 24) = v816;
    v893 = (void *)v816;
    v967 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v968 = (void *)v817;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v966 = &block_descriptor_266;
    uint64_t v910 = (uint64_t)_Block_copy(&v964);
    uint64_t v896 = v817;
    swift_retain();
    swift_release();
    uint64_t v818 = swift_allocObject();
    *(void *)(v818 + 16) = v615;
    uint64_t v819 = swift_allocObject();
    *(void *)(v819 + 16) = closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v819 + 24) = v818;
    uint64_t v892 = v818;
    v967 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ()partial apply;
    v968 = (void *)v819;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    v966 = &block_descriptor_277;
    v909 = _Block_copy(&v964);
    v897 = (char *)v819;
    swift_retain();
    swift_release();
    uint64_t v820 = swift_allocObject();
    *(void *)(v820 + 16) = v615;
    uint64_t v821 = swift_allocObject();
    *(void *)(v821 + 16) = closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v821 + 24) = v820;
    uint64_t v891 = v820;
    v967 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool)partial apply;
    v968 = (void *)v821;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool);
    v966 = &block_descriptor_288;
    v908 = _Block_copy(&v964);
    v898 = (char *)v821;
    swift_retain();
    swift_release();
    uint64_t v822 = swift_allocObject();
    *(void *)(v822 + 16) = v615;
    uint64_t v823 = swift_allocObject();
    *(void *)(v823 + 16) = closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v823 + 24) = v822;
    uint64_t v890 = v822;
    v967 = thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?)partial apply;
    v968 = (void *)v823;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
    v966 = &block_descriptor_299;
    v907 = _Block_copy(&v964);
    uint64_t v899 = v823;
    swift_retain();
    swift_release();
    uint64_t v824 = swift_allocObject();
    *(void *)(v824 + 16) = v615;
    uint64_t v825 = swift_allocObject();
    *(void *)(v825 + 16) = closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v825 + 24) = v824;
    unint64_t v888 = v824;
    v967 = thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String)partial apply;
    v968 = (void *)v825;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
    v966 = &block_descriptor_310;
    v906 = (char *)_Block_copy(&v964);
    uint64_t v900 = v825;
    swift_retain();
    swift_release();
    uint64_t v826 = swift_allocObject();
    id v827 = v913;
    *(void *)(v826 + 16) = v913;
    uint64_t v828 = swift_allocObject();
    *(void *)(v828 + 16) = closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v828 + 24) = v826;
    id v887 = (id)v826;
    v967 = thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ()partial apply;
    v968 = (void *)v828;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    v966 = &block_descriptor_321;
    char v47 = _Block_copy(&v964);
    id v829 = v827;
    uint64_t v901 = v828;
    swift_retain();
    swift_release();
    uint64_t v830 = swift_allocObject();
    *(void *)(v830 + 16) = v615;
    *(void *)(v830 + 24) = v829;
    uint64_t v831 = swift_allocObject();
    *(void *)(v831 + 16) = closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v831 + 24) = v830;
    uint64_t v886 = v830;
    v967 = thunk for @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ()partial apply;
    v968 = (void *)v831;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
    v966 = &block_descriptor_332;
    v832 = _Block_copy(&v964);
    v903 = v832;
    id v913 = v829;
    uint64_t v902 = v831;
    swift_retain();
    swift_release();
    v967 = (uint64_t (*)())destructiveProjectEnumData for PredicateCodableError;
    v968 = 0;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
    v966 = &block_descriptor_335;
    v833 = _Block_copy(&v964);
    swift_release();
    uint64_t v834 = swift_allocObject();
    id v835 = v922;
    *(void *)(v834 + 16) = v915;
    *(void *)(v834 + 24) = v835;
    uint64_t v836 = swift_allocObject();
    *(void *)(v836 + 16) = closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:)partial apply;
    *(void *)(v836 + 24) = v834;
    v885 = (void *)v834;
    v967 = thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?)partial apply;
    v968 = (void *)v836;
    v905 = (char *)v836;
    *(void *)&long long v964 = MEMORY[0x1E4F143A8];
    *((void *)&v964 + 1) = 1107296256;
    v965 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    v966 = &block_descriptor_346;
    v837 = _Block_copy(&v964);
    v904 = v837;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    uint64_t v849 = (uint64_t)v833;
    uint64_t v850 = (uint64_t)v837;
    v838 = v833;
    uint64_t v848 = (uint64_t)v832;
    v839 = v906;
    id v50 = v907;
    v840 = v908;
    v841 = v909;
    uint64_t v842 = v910;
    uint64_t v49 = v911;
    uint64_t v14 = v912;
    _NSInflect((uint64_t)v921, v920, (uint64_t)v919, (uint64_t)v918, (uint64_t)v917, 0, (uint64_t)v912, (uint64_t)v911, v910, (uint64_t)v909, (uint64_t)v908, (uint64_t)v907, (uint64_t)v906, (uint64_t)v47, v848, v849, v850);

    _Block_release(v838);
    _Block_release(v903);
    _Block_release(v47);
    _Block_release(v839);
    _Block_release(v50);
    _Block_release(v840);
    _Block_release(v841);
    _Block_release((const void *)v842);
    _Block_release(v49);
    _Block_release(v14);
    _Block_release(v917);

    swift_unknownObjectRelease();
    _Block_release(v904);
    uint64_t v57 = (uint64_t)v905;
    LOBYTE(v842) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v842)
    {
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
LABEL_304:
      __break(1u);
LABEL_305:
      __break(1u);
LABEL_306:
      __break(1u);
LABEL_307:
      __break(1u);
LABEL_308:
      __break(1u);
LABEL_309:
      __break(1u);
LABEL_310:
      __break(1u);
      goto LABEL_311;
    }
    if (swift_isEscapingClosureAtFileLocation()) {
      goto LABEL_302;
    }
    uint64_t v57 = v902;
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      goto LABEL_303;
    }
    uint64_t v57 = v901;
    char v844 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v844) {
      goto LABEL_304;
    }
    uint64_t v57 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v57) {
      goto LABEL_305;
    }
    uint64_t v57 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v57) {
      goto LABEL_306;
    }
    uint64_t v57 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v57) {
      goto LABEL_307;
    }
    uint64_t v57 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v57) {
      goto LABEL_308;
    }
    uint64_t v57 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v57) {
      goto LABEL_309;
    }
    uint64_t v57 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v57) {
      goto LABEL_310;
    }
    uint64_t v57 = v894;
    char v845 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v845 & 1) == 0)
    {
      uint64_t v846 = v914[2];
      swift_retain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      void *v864 = v846;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_release();

      goto LABEL_300;
    }
LABEL_311:
    __break(1u);
  }
  v908 = v55;
  long long v146 = v108[2];
  v1330[0] = v108[1];
  v1330[1] = v146;
  v1330[2] = v108[3];
  swift_retain_n();
  outlined retain of Locale((uint64_t)v1330);
  uint64_t v147 = BigString.startIndex.getter();
  uint64_t v149 = v148;
  uint64_t v151 = v150;
  id v922 = v152;
  outlined release of Locale((uint64_t)v1330);
  long long v153 = v108[1];
  long long v154 = v108[2];
  long long v1329 = v108[3];
  v1328[1] = v154;
  v1328[0] = v153;
  long long v155 = v108[1];
  long long v156 = v108[2];
  v1338[2] = v1329;
  v1338[1] = v156;
  v1338[0] = v155;
  outlined init with take of any PredicateExpression<Self.Output == B1>(v1338, (uint64_t)v1339);
  outlined retain of Locale((uint64_t)v1339);
  uint64_t v157 = BigString.endIndex.getter();
  uint64_t v159 = v158;
  uint64_t v161 = v160;
  uint64_t v163 = v162;
  outlined release of Locale((uint64_t)v1328);
  if (static BigString.Index.< infix(_:_:)())
  {
    __break(1u);
  }
  else
  {
    uint64_t v1320 = v147;
    uint64_t v1321 = v149;
    uint64_t v1322 = v151;
    id v1323 = v922;
    uint64_t v1324 = v157;
    uint64_t v1325 = v159;
    uint64_t v1326 = v161;
    uint64_t v1327 = v163;
    AttributedString.Runs.init(_:in:)((uint64_t)v108, v1007);
    swift_release();
    long long v1019 = v1007[10];
    long long v1020 = v1007[11];
    v1021 = v1008;
    v1017[6] = v1007[6];
    v1017[7] = v1007[7];
    long long v1018 = v1007[9];
    v1017[8] = v1007[8];
    v1017[2] = v1007[2];
    v1017[3] = v1007[3];
    v1017[5] = v1007[5];
    v1017[4] = v1007[4];
    v1017[1] = v1007[1];
    v1017[0] = v1007[0];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v157 = swift_allocObject();
    *(_OWORD *)(v157 + 16) = xmmword_1821037E0;
    outlined retain of AttributedString.Runs((uint64_t)v1017);
    if (one-time initialization token for name == -1) {
      goto LABEL_130;
    }
  }
  swift_once();
LABEL_130:
  uint64_t v164 = qword_1E8ED5F08;
  v909 = v916 + 1;
  *(void *)(v157 + 32) = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
  *(void *)(v157 + 40) = v164;
  v904 = (const void *)v157;
  swift_bridgeObjectRetain();
  outlined release of AttributedString.Runs((uint64_t)v1017);
  long long v1013 = *(_OWORD *)((char *)&v1017[4] + 8);
  long long v1014 = *(_OWORD *)((char *)&v1017[5] + 8);
  v898 = (char *)v989 + 8;
  v897 = (char *)v990 + 8;
  v905 = (char *)&v964 + 8;
  v852 = (char *)&v990[4] + 8;
  v853 = (char *)&v989[4] + 8;
  long long v1015 = *(_OWORD *)((char *)&v1017[6] + 8);
  long long v1016 = *(_OWORD *)((char *)&v1017[7] + 8);
  v851 = (long long *)v980;
  v860 = &v927;
  v861 = (id *)&v942;
  long long v1009 = *(_OWORD *)((char *)v1017 + 8);
  long long v1010 = *(_OWORD *)((char *)&v1017[1] + 8);
  long long v1011 = *(_OWORD *)((char *)&v1017[2] + 8);
  long long v1012 = *(_OWORD *)((char *)&v1017[3] + 8);
  id v165 = (id)*((void *)&v1017[8] + 1);
  uint64_t v166 = (void *)v1018;
  uint64_t v167 = (void *)*((void *)&v1019 + 1);
  char v102 = (_OWORD *)v1019;
  uint64_t v169 = (void *)*((void *)&v1020 + 1);
  uint64_t v168 = v1020;
  uint64_t v902 = *((void *)&v1018 + 1);
  v903 = (const void *)*((void *)&v1017[8] + 1);
  uint64_t v900 = v1018;
  uint64_t v901 = *(void *)&v1017[0];
  id v170 = v1021;
  v921 = (_OWORD *)*((void *)&v1018 + 1);
  v918 = (void *)*((void *)&v1019 + 1);
  uint64_t v899 = v1019;
  v911 = (void *)*((void *)&v1020 + 1);
  id v912 = v1021;
  uint64_t v920 = v1020;
  while (1)
  {
    id v171 = v921;
    if (static BigString.Index.== infix(_:_:)())
    {
      _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_((uint64_t)v990);
      outlined init with take of LocalePreferences?((uint64_t)v990, (uint64_t)v1006, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
    }
    else
    {
      long long v172 = v1013;
      long long v173 = v1014;
      long long v174 = v1014;
      uint64_t v175 = v905;
      *((_OWORD *)v905 + 4) = v1013;
      v175[5] = v173;
      long long v176 = v1015;
      long long v177 = v1016;
      long long v178 = v1016;
      v175[6] = v1015;
      v175[7] = v177;
      long long v179 = v1009;
      long long v180 = v1010;
      long long v181 = v1010;
      *uint64_t v175 = v1009;
      v175[1] = v180;
      long long v182 = v1011;
      long long v183 = v1012;
      long long v184 = v1012;
      v175[2] = v1011;
      v175[3] = v183;
      uint64_t v185 = v898;
      *((_OWORD *)v898 + 4) = v172;
      v185[5] = v174;
      v185[6] = v176;
      v185[7] = v178;
      *uint64_t v185 = v179;
      v185[1] = v181;
      v185[2] = v182;
      v185[3] = v184;
      id v186 = v170;
      uint64_t v187 = v169;
      uint64_t v188 = v900;
      uint64_t v189 = v901;
      *(void *)&v989[0] = v901;
      uint64_t v190 = (uint64_t)v102;
      v917 = v102;
      uint64_t v192 = v902;
      uint64_t v191 = (uint64_t)v903;
      *((void *)&v989[8] + 1) = v903;
      *(void *)&v989[9] = v900;
      *((void *)&v989[9] + 1) = v902;
      id v922 = v166;
      uint64_t v193 = v899;
      *(void *)&v989[10] = v899;
      *((void *)&v989[10] + 1) = v918;
      *(void *)&v989[11] = v920;
      *((void *)&v989[11] + 1) = v187;
      *(void *)&v989[12] = v186;
      uint64_t v941 = (uint64_t)v165;
      uint64_t v942 = (uint64_t)v922;
      uint64_t v943 = (uint64_t)v171;
      uint64_t v944 = v190;
      id v919 = v165;
      AttributedString.Runs.subscript.getter(&v979);
      v914 = (void *)v980[0];
      v915 = v979;
      id v913 = (id)v980[9];
      long long v194 = v1014;
      uint64_t v195 = v897;
      *((_OWORD *)v897 + 4) = v1013;
      v195[5] = v194;
      long long v196 = v1016;
      v195[6] = v1015;
      v195[7] = v196;
      long long v197 = v1010;
      *uint64_t v195 = v1009;
      v195[1] = v197;
      long long v198 = v1012;
      v195[2] = v1011;
      v195[3] = v198;
      *(void *)&v990[0] = v189;
      *((void *)&v990[8] + 1) = v191;
      *(void *)&v990[9] = v188;
      *((void *)&v990[9] + 1) = v192;
      *(void *)&v990[10] = v193;
      *((void *)&v990[10] + 1) = v918;
      *(void *)&v990[11] = v920;
      *((void *)&v990[11] + 1) = v187;
      *(void *)&v990[12] = v186;
      id v199 = v171;
      v921 = v171;
      uint64_t v200 = (uint64_t)v904;
      *((void *)&v990[12] + 1) = v904;
      uint64_t v201 = v187;
      uint64_t v202 = MEMORY[0x1E4FBC860];
      *(void *)&v990[13] = MEMORY[0x1E4FBC860];
      *(void *)&long long v964 = v189;
      uint64_t v969 = v191;
      uint64_t v970 = v188;
      uint64_t v971 = v192;
      uint64_t v972 = v193;
      v973 = v918;
      uint64_t v974 = v920;
      v975 = v201;
      id v976 = v186;
      id v203 = v919;
      v979 = v919;
      v980[0] = v922;
      v980[1] = v199;
      uint64_t v204 = (uint64_t)v917;
      v980[2] = v917;
      outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v990);
      swift_retain();
      AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v979, v200, v202, (uint64_t *)v989);
      uint64_t v103 = v204;
      swift_release();
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v990);
      uint64_t v205 = (void *)*((void *)&v989[0] + 1);
      id v165 = *(id *)&v989[0];
      char v102 = (_OWORD *)*((void *)&v989[1] + 1);
      uint64_t v101 = *(void **)&v989[1];
      id v206 = v921;
      if (static BigString.Index.< infix(_:_:)())
      {
        __break(1u);
LABEL_268:
        __break(1u);
LABEL_269:
        __break(1u);
LABEL_270:
        __break(1u);
LABEL_271:
        __break(1u);
LABEL_272:
        __break(1u);
LABEL_273:
        __break(1u);
LABEL_274:
        __break(1u);
LABEL_275:
        __break(1u);
LABEL_276:
        __break(1u);
LABEL_277:
        __break(1u);
        goto LABEL_278;
      }
      specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v915, (uint64_t)v1006);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v1006[14] = v203;
      v1006[15] = v922;
      v1006[16] = v206;
      v1006[17] = v103;
      v1006[18] = v165;
      v1006[19] = v205;
      v1006[20] = v101;
      v1006[21] = v102;
      destructiveProjectEnumData for PredicateCodableError(v1006, v207);
      uint64_t v166 = v205;
      v921 = v101;
      uint64_t v169 = v911;
      id v170 = v912;
      uint64_t v167 = v918;
      uint64_t v168 = v920;
    }
    outlined init with take of LocalePreferences?((uint64_t)v1006, (uint64_t)v991, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
    outlined init with take of LocalePreferences?((uint64_t)v991, (uint64_t)v992, (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?);
    if (_s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg((uint64_t)v992) == 1)
    {
      *(_OWORD *)((char *)&v990[4] + 8) = v1013;
      *(_OWORD *)((char *)&v990[5] + 8) = v1014;
      *(_OWORD *)((char *)&v990[6] + 8) = v1015;
      *(_OWORD *)((char *)&v990[7] + 8) = v1016;
      *(_OWORD *)((char *)v990 + 8) = v1009;
      *(_OWORD *)((char *)&v990[1] + 8) = v1010;
      *(_OWORD *)((char *)&v990[2] + 8) = v1011;
      *(_OWORD *)((char *)&v990[3] + 8) = v1012;
      *(void *)&v990[0] = v901;
      *((void *)&v990[8] + 1) = v903;
      *(void *)&v990[9] = v900;
      *((void *)&v990[9] + 1) = v902;
      *(void *)&v990[10] = v899;
      *((void *)&v990[10] + 1) = v167;
      *(void *)&v990[11] = v168;
      *((void *)&v990[11] + 1) = v169;
      *(void *)&v990[12] = v170;
      *((void *)&v990[12] + 1) = v904;
      *(void *)&v990[13] = MEMORY[0x1E4FBC860];
      *((void *)&v990[13] + 1) = v165;
      *(void *)&v990[14] = v166;
      *((void *)&v990[14] + 1) = v921;
      *(void *)&v990[15] = v102;
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v990);
      swift_bridgeObjectRelease();
      memset(v989, 0, 105);
      BYTE9(v989[6]) = 1;
      specialized AttributedString.subscript.setter((uint64_t)v989);
      id v793 = v876;
      goto LABEL_240;
    }
    id v922 = v166;
    if (v997) {
      goto LABEL_132;
    }
    v914 = v999;
    v915 = (_OWORD *)v998;
    id v913 = v1000;
    v895 = v1002;
    uint64_t v896 = v1001;
    v893 = v1004;
    uint64_t v894 = v1003;
    uint64_t v892 = v1005;
    v1315[0] = v992[0];
    v1315[1] = v992[1];
    v1315[2] = v992[2];
    v1315[3] = v992[3];
    char v1316 = v993 & 1;
    long long v1317 = v994;
    long long v1318 = v995;
    char v1319 = v996 & 1;
    id v919 = v165;
    uint64_t v208 = v910;
    swift_bridgeObjectRetain();
    unint64_t v209 = v208;
    id v165 = v919;
    unint64_t v210 = specialized Range<>.init<A>(_:in:)((uint64_t)v1315, (unint64_t)v907, v209);
    if (v212) {
      goto LABEL_132;
    }
    unsigned __int16 v213 = v210;
    unint64_t v214 = v211;
    v917 = v102;
    long long v215 = v909[1];
    v1314[0] = *v909;
    v1314[1] = v215;
    v1314[2] = v909[2];
    unint64_t v216 = v210 & 0xC;
    int64_t v217 = v210 >> 16;
    swift_retain();
    outlined retain of Locale((uint64_t)v1314);
    if (v216 == 8)
    {
      BigString.utf16.getter();
      uint64_t v218 = BigString.UTF16View.count.getter();
      outlined release of Locale((uint64_t)&v1022);
      if (v218 < v217)
      {
        outlined release of Locale((uint64_t)v1314);
        swift_release();
        id v165 = v919;
        char v102 = v917;
LABEL_132:
        uint64_t v166 = v922;
        continue;
      }
      uint64_t v219 = v213 >> 14;
      BigString.utf16.getter();
      BigString.startIndex.getter();
      uint64_t v220 = BigString.UTF16View.index(_:offsetBy:)();
      uint64_t v222 = v221;
      uint64_t v224 = v223;
      uint64_t v226 = v225;
      outlined release of Locale((uint64_t)&v1023);
      if (v219)
      {
        BigString.utf8.getter();
        uint64_t v866 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v222 = v227;
        v871 = v228;
        v874 = v229;
        outlined release of Locale((uint64_t)&v1024);
      }
      else
      {
        v874 = v226;
        v871 = v224;
        uint64_t v866 = v220;
      }
      uint64_t v865 = v222;
      outlined release of Locale((uint64_t)v1314);
      uint64_t v168 = v920;
    }
    else
    {
      uint64_t v230 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
      uint64_t v232 = v231;
      int v234 = v233;
      uint64_t v236 = v235;
      BigString.endIndex.getter();
      v871 = v234;
      v874 = v236;
      char v237 = static BigString.Index.< infix(_:_:)();
      outlined release of Locale((uint64_t)v1314);
      if (v237)
      {
        swift_release();
LABEL_146:
        id v165 = v919;
        uint64_t v166 = v922;
        char v102 = v917;
        uint64_t v169 = v911;
        id v170 = v912;
        continue;
      }
      uint64_t v865 = v232;
      uint64_t v866 = v230;
    }
    uint64_t v166 = v922;
    uint64_t v238 = v909;
    long long v239 = v909[1];
    v1313[0] = *v909;
    v1313[1] = v239;
    v1313[2] = v909[2];
    if ((v214 & 0xC) == 8)
    {
      long long v240 = v909[1];
      v1340[0] = *v909;
      v1340[1] = v240;
      v1340[2] = v909[2];
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1340, (uint64_t)v1341);
      outlined retain of Locale((uint64_t)v1341);
      BigString.utf16.getter();
      uint64_t v241 = BigString.UTF16View.count.getter();
      outlined release of Locale((uint64_t)&v1025);
      if (v241 < (uint64_t)(v214 >> 16))
      {
        outlined release of Locale((uint64_t)v1313);
        swift_release();
        uint64_t v169 = v911;
        id v170 = v912;
        id v165 = v919;
        char v102 = v917;
        continue;
      }
      BigString.utf16.getter();
      BigString.startIndex.getter();
      uint64_t v251 = BigString.UTF16View.index(_:offsetBy:)();
      uint64_t v245 = v252;
      uint64_t v247 = v253;
      uint64_t v249 = v254;
      outlined release of Locale((uint64_t)&v1026);
      if ((unsigned __int16)v214 >> 14)
      {
        BigString.utf8.getter();
        uint64_t v891 = BigString.UTF8View.index(_:offsetBy:)();
        uint64_t v245 = v255;
        uint64_t v247 = v256;
        uint64_t v249 = v257;
        outlined release of Locale((uint64_t)&v1027);
      }
      else
      {
        uint64_t v891 = v251;
      }
      uint64_t v238 = v909;
      outlined release of Locale((uint64_t)v1313);
    }
    else
    {
      long long v242 = v909[1];
      v1342[0] = *v909;
      v1342[1] = v242;
      v1342[2] = v909[2];
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1342, (uint64_t)v1343);
      outlined retain of Locale((uint64_t)v1343);
      uint64_t v243 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
      uint64_t v245 = v244;
      uint64_t v247 = v246;
      uint64_t v249 = v248;
      BigString.endIndex.getter();
      char v250 = static BigString.Index.< infix(_:_:)();
      outlined release of Locale((uint64_t)v1313);
      if (v250)
      {
        swift_release();
        uint64_t v169 = v911;
        id v170 = v912;
        uint64_t v168 = v920;
        id v165 = v919;
        char v102 = v917;
        continue;
      }
      uint64_t v891 = v243;
    }
    long long v258 = *v238;
    long long v259 = v238[1];
    long long v1312 = v238[2];
    v1311[1] = v259;
    v1311[0] = v258;
    long long v260 = *v238;
    long long v261 = v238[1];
    v1344[2] = v1312;
    v1344[1] = v261;
    v1344[0] = v260;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1344, (uint64_t)v1345);
    outlined retain of Locale((uint64_t)v1345);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1311);
    if (static BigString.Index.< infix(_:_:)())
    {
      swift_release();
LABEL_191:
      uint64_t v167 = v918;
      uint64_t v169 = v911;
      id v170 = v912;
      uint64_t v168 = v920;
      id v165 = v919;
      uint64_t v166 = v922;
      char v102 = v917;
      continue;
    }
    long long v262 = *v238;
    long long v263 = v238[1];
    long long v1310 = v238[2];
    v1309[1] = v263;
    v1309[0] = v262;
    long long v264 = *v238;
    long long v265 = v238[1];
    v1346[2] = v1310;
    v1346[1] = v265;
    v1346[0] = v264;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1346, (uint64_t)v1347);
    outlined retain of Locale((uint64_t)v1347);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v1309);
    uint64_t v266 = v891;
    char v267 = static BigString.Index.< infix(_:_:)();
    uint64_t v268 = v916;
    swift_release();
    v916 = v268;
    if (v267) {
      goto LABEL_191;
    }
    long long v269 = v238[1];
    v1308[0] = *v238;
    v1308[1] = v269;
    v1308[2] = v238[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1308);
    uint64_t v890 = BigString.startIndex.getter();
    id v887 = v271;
    unint64_t v888 = v270;
    uint64_t v886 = v272;
    outlined release of Locale((uint64_t)v1308);
    long long v273 = *v238;
    long long v274 = v238[1];
    long long v1307 = v238[2];
    v1306[1] = v274;
    v1306[0] = v273;
    long long v275 = *v238;
    long long v276 = v238[1];
    v1348[2] = v1307;
    v1348[1] = v276;
    v1348[0] = v275;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1348, (uint64_t)v1349);
    outlined retain of Locale((uint64_t)v1349);
    uint64_t v277 = BigString.endIndex.getter();
    uint64_t v891 = v266;
    uint64_t v279 = v278;
    uint64_t v281 = v280;
    uint64_t v283 = v282;
    outlined release of Locale((uint64_t)v1306);
    uint64_t v1295 = v890;
    uint64_t v1296 = v888;
    id v1297 = v887;
    uint64_t v1298 = v886;
    uint64_t v1299 = v277;
    uint64_t v1300 = v279;
    uint64_t v1301 = v281;
    uint64_t v1302 = v283;
    long long v284 = *v238;
    long long v285 = v238[1];
    long long v1305 = v238[2];
    long long v1304 = v285;
    long long v1303 = v284;
    swift_retain();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v1028);
    BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v890 = v286;
    id v887 = v288;
    unint64_t v888 = v287;
    BigSubstring.UnicodeScalarView.endIndex.getter();
    outlined release of Locale((uint64_t)&v1029);
    swift_release();
    uint64_t v1207 = v866;
    uint64_t v1208 = v865;
    v1209 = v871;
    v1210 = v874;
    uint64_t v1211 = v891;
    uint64_t v1212 = v245;
    uint64_t v1213 = v247;
    uint64_t v1214 = v249;
    if (static BigString.Index.< infix(_:_:)()) {
      break;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_336;
    }
    long long v289 = v909[1];
    v1294[3] = *v909;
    v1294[4] = v289;
    v1294[5] = v909[2];
    uint64_t v290 = v916;
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v1030);
    uint64_t v291 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v293 = v292;
    uint64_t v295 = v294;
    uint64_t v297 = v296;
    uint64_t v298 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v300 = v299;
    uint64_t v302 = v301;
    uint64_t v304 = v303;
    outlined release of Locale((uint64_t)&v1031);
    swift_release_n();
    uint64_t v1252 = v291;
    uint64_t v1253 = v293;
    uint64_t v1254 = v295;
    uint64_t v1255 = v297;
    uint64_t v1256 = v298;
    uint64_t v1257 = v300;
    uint64_t v1258 = v302;
    uint64_t v1259 = v304;
    v1260 = v290;
    uint64_t v1261 = v291;
    uint64_t v1262 = v293;
    uint64_t v1263 = v295;
    uint64_t v1264 = v297;
    uint64_t v1265 = v298;
    uint64_t v1266 = v300;
    uint64_t v1267 = v302;
    uint64_t v1268 = v304;
    uint64_t v1269 = 0;
    uint64_t v305 = v924;
    long long v306 = v924[2];
    v1294[0] = v924[1];
    v1294[1] = v306;
    v1294[2] = v924[3];
    swift_retain();
    outlined retain of Locale((uint64_t)v1294);
    uint64_t v307 = BigString.startIndex.getter();
    uint64_t v309 = v308;
    uint64_t v311 = v310;
    uint64_t v313 = v312;
    outlined release of Locale((uint64_t)v1294);
    long long v314 = v305[1];
    long long v315 = v305[2];
    long long v1293 = v305[3];
    v1292[1] = v315;
    v1292[0] = v314;
    long long v316 = v305[1];
    long long v317 = v305[2];
    v1350[2] = v1293;
    v1350[1] = v317;
    v1350[0] = v316;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1350, (uint64_t)v1351);
    outlined retain of Locale((uint64_t)v1351);
    uint64_t v318 = BigString.endIndex.getter();
    uint64_t v320 = v319;
    uint64_t v322 = v321;
    uint64_t v324 = v323;
    outlined release of Locale((uint64_t)v1292);
    uint64_t v1281 = v307;
    uint64_t v1282 = v309;
    uint64_t v1283 = v311;
    uint64_t v1284 = v313;
    uint64_t v1285 = v318;
    uint64_t v1286 = v320;
    uint64_t v1287 = v322;
    uint64_t v1288 = v324;
    long long v325 = v305[2];
    long long v1289 = v305[1];
    long long v1290 = v325;
    long long v1291 = v305[3];
    swift_retain();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v1032);
    uint64_t v326 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v890 = v327;
    uint64_t v891 = v326;
    id v887 = v329;
    unint64_t v888 = v328;
    BigSubstring.UnicodeScalarView.endIndex.getter();
    outlined release of Locale((uint64_t)&v1033);
    swift_release();
    uint64_t v1270 = (uint64_t)v915;
    v1271 = v914;
    id v1272 = v913;
    uint64_t v1273 = v896;
    v1274 = v895;
    uint64_t v1275 = v894;
    v1276 = v893;
    uint64_t v1277 = v892;
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_337;
    }
    if (static BigString.Index.< infix(_:_:)()) {
      goto LABEL_338;
    }
    long long v330 = v305[2];
    long long v1278 = v305[1];
    long long v1279 = v330;
    long long v1280 = v305[3];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v1034);
    uint64_t v331 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v333 = v332;
    uint64_t v335 = v334;
    uint64_t v337 = v336;
    uint64_t v338 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v340 = v339;
    uint64_t v342 = v341;
    uint64_t v344 = v343;
    outlined release of Locale((uint64_t)&v1035);
    swift_release_n();
    *(void *)&long long v1235 = v331;
    *((void *)&v1235 + 1) = v333;
    uint64_t v1236 = v335;
    uint64_t v1237 = v337;
    uint64_t v1238 = v338;
    uint64_t v1239 = v340;
    uint64_t v1240 = v342;
    uint64_t v1241 = v344;
    v1242 = v305;
    uint64_t v1243 = v331;
    uint64_t v1244 = v333;
    uint64_t v1245 = v335;
    uint64_t v1246 = v337;
    uint64_t v1247 = v338;
    uint64_t v1248 = v340;
    uint64_t v1249 = v342;
    uint64_t v1250 = v344;
    uint64_t v1251 = 0;
    LOBYTE(v338) = specialized Sequence<>.elementsEqual<A>(_:)(&v1235);
    uint64_t v345 = (uint64_t)v916;
    swift_release();
    swift_release();
    if ((v338 & 1) == 0) {
      goto LABEL_191;
    }
    long long v346 = v909;
    long long v347 = v909[1];
    v1234[0] = *v909;
    v1234[1] = v347;
    v1234[2] = v909[2];
    swift_retain();
    outlined retain of Locale((uint64_t)v1234);
    BigString.startIndex.getter();
    outlined release of Locale((uint64_t)v1234);
    long long v348 = *v346;
    long long v349 = v346[1];
    long long v1233 = v346[2];
    v1232[1] = v349;
    v1232[0] = v348;
    long long v350 = *v346;
    long long v351 = v346[1];
    v1352[2] = v1233;
    v1352[1] = v351;
    v1352[0] = v350;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1352, (uint64_t)v1353);
    outlined retain of Locale((uint64_t)v1353);
    BigString.endIndex.getter();
    outlined release of Locale((uint64_t)v1232);
    swift_release();
    long long v352 = v346[1];
    long long v1229 = *v346;
    long long v1230 = v352;
    long long v1231 = v346[2];
    swift_retain_n();
    BigString.unicodeScalars.getter();
    BigString.UnicodeScalarView.subscript.getter();
    outlined release of Locale((uint64_t)&v1036);
    uint64_t v353 = BigSubstring.UnicodeScalarView.startIndex.getter();
    uint64_t v355 = v354;
    uint64_t v357 = v356;
    uint64_t v359 = v358;
    uint64_t v360 = BigSubstring.UnicodeScalarView.endIndex.getter();
    uint64_t v362 = v361;
    uint64_t v364 = v363;
    uint64_t v366 = v365;
    outlined release of Locale((uint64_t)&v1037);
    swift_release();
    uint64_t v1221 = v353;
    uint64_t v1222 = v355;
    uint64_t v1223 = v357;
    uint64_t v1224 = v359;
    uint64_t v1225 = v360;
    uint64_t v1226 = v362;
    uint64_t v1227 = v364;
    uint64_t v1228 = v366;
    AttributedString.Runs.init(_:in:)(v345, v989);
    long long v367 = v989[0];
    long long v368 = v989[1];
    long long v369 = v989[2];
    long long v370 = v989[3];
    uint64_t v371 = *(void *)&v989[4];
    uint64_t v372 = v852;
    uint64_t v373 = v853;
    long long v374 = *((_OWORD *)v853 + 5);
    *((_OWORD *)v852 + 4) = *((_OWORD *)v853 + 4);
    v372[5] = v374;
    long long v375 = v373[7];
    v372[6] = v373[6];
    v372[7] = v375;
    long long v376 = v373[1];
    *uint64_t v372 = *v373;
    v372[1] = v376;
    long long v377 = v373[3];
    v372[2] = v373[2];
    v372[3] = v377;
    v990[0] = v367;
    v990[1] = v368;
    v990[2] = v369;
    v990[3] = v370;
    *(void *)&v990[4] = v371;
    *((void *)&v990[12] + 1) = *((void *)&v367 + 1);
    v990[13] = v368;
    v990[14] = v369;
    v990[15] = v370;
    *(void *)&v990[16] = v371;
    specialized IndexingIterator.next()((uint64_t)v989);
    id v170 = v912;
    uint64_t v378 = v345;
    unint64_t v888 = *(void *)&v989[0];
    if (*(void *)&v989[0])
    {
      v885 = (void *)*((void *)&v989[0] + 1);
      uint64_t v380 = *((void *)&v989[1] + 1);
      uint64_t v379 = *(_OWORD **)&v989[1];
      uint64_t v382 = *((void *)&v989[2] + 1);
      uint64_t v381 = *(void **)&v989[2];
      uint64_t v384 = (void *)*((void *)&v989[3] + 1);
      uint64_t v383 = *(void *)&v989[3];
      uint64_t v385 = *(void **)&v989[4];
      uint64_t v386 = v896;
      id v387 = v913;
      uint64_t v388 = (uint64_t)v914;
      uint64_t v389 = (uint64_t)v915;
      uint64_t v390 = *((void *)&v989[4] + 1);
      v391 = *(void **)&v989[5];
      do
      {
        uint64_t v886 = v388;
        id v887 = v387;
        uint64_t v890 = v389;
        while (1)
        {
          uint64_t v894 = v380;
          v895 = v379;
          uint64_t v892 = v382;
          v893 = v381;
          uint64_t v891 = v386;
          v869 = v391;
          uint64_t v878 = v390;
          v879 = v385;
          id v880 = v384;
          uint64_t v881 = v383;
          v392 = v909;
          long long v393 = v909[1];
          v1101[0] = *v909;
          v1101[1] = v393;
          v1101[2] = v909[2];
          swift_retain();
          outlined retain of Locale((uint64_t)v1101);
          uint64_t v394 = BigString.startIndex.getter();
          uint64_t v396 = v395;
          v884 = v397;
          uint64_t v399 = v398;
          outlined release of Locale((uint64_t)v1101);
          long long v400 = *v392;
          long long v401 = v392[1];
          long long v1100 = v392[2];
          v1099[1] = v401;
          v1099[0] = v400;
          long long v402 = *v392;
          long long v403 = v392[1];
          v1368[2] = v1100;
          v1368[1] = v403;
          v1368[0] = v402;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1368, (uint64_t)v1369);
          outlined retain of Locale((uint64_t)v1369);
          uint64_t v404 = BigString.endIndex.getter();
          uint64_t v406 = v405;
          uint64_t v408 = v407;
          uint64_t v410 = v409;
          outlined release of Locale((uint64_t)v1099);
          uint64_t v1088 = v394;
          uint64_t v1089 = v396;
          v1090 = v884;
          uint64_t v1091 = v399;
          uint64_t v1092 = v404;
          uint64_t v1093 = v406;
          uint64_t v1094 = v408;
          uint64_t v1095 = v410;
          long long v411 = *v392;
          long long v412 = v392[1];
          long long v413 = v392[2];
          uint64_t v103 = v894;
          long long v1098 = v413;
          long long v1097 = v412;
          long long v1096 = v411;
          swift_retain();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1038);
          BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v883 = v415;
          v884 = v414;
          v882 = v416;
          uint64_t v417 = BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v101 = v418;
          outlined release of Locale((uint64_t)&v1039);
          swift_release();
          char v102 = v893;
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_268;
          }
          v419 = v101;
          uint64_t v101 = (void *)v417;
          v877 = v419;
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_269;
          }
          uint64_t v103 = v881;
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_270;
          }
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_271;
          }
          long long v420 = v909[1];
          v1087[3] = *v909;
          v1087[4] = v420;
          v1087[5] = v909[2];
          BigString.unicodeScalars.getter();
          uint64_t v875 = BigString.UnicodeScalarView.distance(from:to:)();
          outlined release of Locale((uint64_t)&v1040);
          swift_release();
          uint64_t v103 = (uint64_t)v924;
          long long v421 = v924[1];
          long long v422 = v924[2];
          v1087[2] = v924[3];
          v1087[1] = v422;
          v1087[0] = v421;
          swift_retain_n();
          outlined retain of Locale((uint64_t)v1087);
          uint64_t v423 = BigString.startIndex.getter();
          uint64_t v425 = v424;
          uint64_t v427 = v426;
          uint64_t v429 = v428;
          outlined release of Locale((uint64_t)v1087);
          long long v430 = *(_OWORD *)(v103 + 16);
          long long v431 = *(_OWORD *)(v103 + 32);
          long long v1086 = *(_OWORD *)(v103 + 48);
          v1085[1] = v431;
          v1085[0] = v430;
          long long v432 = *(_OWORD *)(v103 + 16);
          long long v433 = *(_OWORD *)(v103 + 32);
          v1370[2] = v1086;
          v1370[1] = v433;
          v1370[0] = v432;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1370, (uint64_t)v1371);
          outlined retain of Locale((uint64_t)v1371);
          uint64_t v434 = BigString.endIndex.getter();
          uint64_t v436 = v435;
          uint64_t v438 = v437;
          uint64_t v440 = v439;
          outlined release of Locale((uint64_t)v1085);
          uint64_t v1074 = v423;
          uint64_t v1075 = v425;
          uint64_t v1076 = v427;
          uint64_t v1077 = v429;
          uint64_t v1078 = v434;
          uint64_t v1079 = v436;
          uint64_t v1080 = v438;
          uint64_t v1081 = v440;
          long long v441 = *(_OWORD *)(v103 + 32);
          long long v1082 = *(_OWORD *)(v103 + 16);
          long long v1083 = v441;
          long long v1084 = *(_OWORD *)(v103 + 48);
          swift_retain();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1041);
          uint64_t v442 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v883 = v443;
          v884 = (void *)v442;
          v882 = v444;
          v877 = v445;
          BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v101 = v446;
          v448 = v447;
          uint64_t v450 = v449;
          outlined release of Locale((uint64_t)&v1042);
          swift_release();
          char v102 = v887;
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_272;
          }
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_273;
          }
          uint64_t v867 = v450;
          v868 = v448;
          long long v451 = *(_OWORD *)(v103 + 32);
          v1073[3] = *(_OWORD *)(v103 + 16);
          v1073[4] = v451;
          v1073[5] = *(_OWORD *)(v103 + 48);
          BigString.unicodeScalars.getter();
          uint64_t v452 = BigString.UnicodeScalarView.index(_:offsetBy:)();
          uint64_t v454 = v453;
          v456 = v455;
          char v102 = v457;
          outlined release of Locale((uint64_t)&v1043);
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_274;
          }
          char v458 = static BigString.Index.< infix(_:_:)();
          swift_release_n();
          if (v458) {
            goto LABEL_275;
          }
          uint64_t v883 = (uint64_t)v102;
          v884 = v456;
          uint64_t v459 = v890;
          char v102 = (_OWORD *)v886;
          uint64_t v101 = v887;
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_276;
          }
          *(void *)&long long v964 = v888;
          *((void *)&v964 + 1) = v885;
          LOBYTE(v941) = 1;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v875 = v454;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            long long v461 = *(_OWORD *)(v103 + 32);
            v1073[0] = *(_OWORD *)(v103 + 16);
            v1073[1] = v461;
            v1073[2] = *(_OWORD *)(v103 + 48);
            uint64_t v462 = *(void *)(v103 + 64);
            uint64_t v463 = *(void *)(v103 + 72);
            uint64_t v464 = *(void *)(v103 + 80);
            uint64_t v465 = *(void *)(v103 + 88);
            type metadata accessor for AttributedString.Guts();
            swift_allocObject();
            outlined retain of Locale((uint64_t)v1073);
            swift_unknownObjectRetain();
            uint64_t v466 = v463;
            uint64_t v459 = v890;
            uint64_t v467 = v464;
            uint64_t v454 = v875;
            uint64_t v468 = AttributedString.Guts.init(string:runs:)(v1073, v462, v466, v467, v465);
            v924 = (_OWORD *)v468;
            swift_release();
            uint64_t v103 = v468;
          }
          long long v469 = *(_OWORD *)(v103 + 32);
          v1072[0] = *(_OWORD *)(v103 + 16);
          v1072[1] = v469;
          v1072[2] = *(_OWORD *)(v103 + 48);
          swift_retain();
          outlined retain of Locale((uint64_t)v1072);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v1072);
          long long v470 = *(_OWORD *)(v103 + 16);
          long long v471 = *(_OWORD *)(v103 + 32);
          long long v1071 = *(_OWORD *)(v103 + 48);
          v1070[1] = v471;
          v1070[0] = v470;
          long long v472 = *(_OWORD *)(v103 + 16);
          v1372[1] = *(_OWORD *)(v103 + 32);
          v1372[2] = v1071;
          v1372[0] = v472;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1372, (uint64_t)v1373);
          outlined retain of Locale((uint64_t)v1373);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v1070);
          swift_release();
          v1066[2] = v459;
          v1066[3] = v102;
          v1066[4] = v101;
          v1066[5] = v891;
          uint64_t v891 = v452;
          v1066[6] = v452;
          v1066[7] = v454;
          v1066[8] = v884;
          v1066[9] = v883;
          long long v473 = *(_OWORD *)(v103 + 32);
          long long v1067 = *(_OWORD *)(v103 + 16);
          long long v1068 = v473;
          long long v1069 = *(_OWORD *)(v103 + 48);
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1044);
          uint64_t v474 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v476 = v475;
          uint64_t v478 = v477;
          uint64_t v480 = v479;
          uint64_t v481 = BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v483 = v482;
          uint64_t v485 = v484;
          uint64_t v487 = v486;
          outlined release of Locale((uint64_t)v1045);
          swift_release();
          *(void *)&v989[0] = v103;
          *((void *)&v989[0] + 1) = v474;
          *(void *)&v989[1] = v476;
          *((void *)&v989[1] + 1) = v478;
          *(void *)&v989[2] = v480;
          *((void *)&v989[2] + 1) = v481;
          *(void *)&v989[3] = v483;
          *((void *)&v989[3] + 1) = v485;
          *(void *)&v989[4] = v487;
          if (one-time initialization token for currentIdentity != -1) {
            swift_once();
          }
          v488 = (uint64_t *)(static AttributedString.currentIdentity + 16);
          v489 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
          swift_retain();
          os_unfair_lock_lock(v489);
          v490 = v908;
          closure #1 in static AttributedString._nextModifyIdentity.getter(v488, (uint64_t *)&v979);
          v908 = v490;
          os_unfair_lock_unlock(v489);
          swift_release();
          id v491 = v979;
          *((void *)&v989[4] + 1) = v979;
          BigString.init()();
          v979 = 0;
          MEMORY[0x185309530](&v979, 8);
          id v492 = v979;
          type metadata accessor for AttributedString.Guts();
          uint64_t v493 = swift_allocObject();
          char v494 = BigString.isEmpty.getter();
          uint64_t v101 = v911;
          uint64_t v168 = v920;
          char v102 = v917;
          if ((v494 & 1) == 0) {
            goto LABEL_277;
          }
          long long v495 = v1045[8];
          *(_OWORD *)(v493 + 16) = v1045[7];
          *(_OWORD *)(v493 + 32) = v495;
          *(_OWORD *)(v493 + 48) = v1045[9];
          *(void *)(v493 + 64) = 0;
          *(void *)(v493 + 72) = 0;
          *(void *)(v493 + 80) = 0;
          *(void *)(v493 + 88) = v492;
          swift_release();
          AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v964, (char *)&v941);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*((id *)&v989[4] + 1) != v491) {
            goto LABEL_342;
          }
          v924 = *(_OWORD **)&v989[0];
          swift_release();
          v496 = v916;
          id v170 = v912;
          uint64_t v169 = v101;
          uint64_t v497 = v875;
          if (!(((v906[16] & 1) == 0) | v870 & 1)) {
            break;
          }
          outlined consume of AttributedString.Runs.Run?(v888);
          specialized IndexingIterator.next()((uint64_t)v989);
          v885 = (void *)*((void *)&v989[0] + 1);
          uint64_t v886 = v497;
          uint64_t v380 = *((void *)&v989[1] + 1);
          uint64_t v379 = *(_OWORD **)&v989[1];
          uint64_t v382 = *((void *)&v989[2] + 1);
          uint64_t v381 = *(void **)&v989[2];
          uint64_t v384 = (void *)*((void *)&v989[3] + 1);
          uint64_t v383 = *(void *)&v989[3];
          uint64_t v386 = v883;
          uint64_t v390 = *((void *)&v989[4] + 1);
          uint64_t v385 = *(void **)&v989[4];
          id v887 = v884;
          unint64_t v888 = *(void *)&v989[0];
          uint64_t v890 = v891;
          v391 = *(void **)&v989[5];
          uint64_t v378 = (uint64_t)v496;
          if (!*(void *)&v989[0]) {
            goto LABEL_193;
          }
        }
        uint64_t v498 = v888;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized AttributedString._AttributeStorage.subscript.getter(v498, (uint64_t)v989);
        outlined consume of AttributedString.Runs.Run?(v498);
        uint64_t v388 = v875;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v499 = *((void *)&v989[0] + 1);
        outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v989[0], *((uint64_t *)&v989[0] + 1));
        int v870 = v499 != 1;
        specialized IndexingIterator.next()((uint64_t)v989);
        v885 = (void *)*((void *)&v989[0] + 1);
        uint64_t v380 = *((void *)&v989[1] + 1);
        uint64_t v379 = *(_OWORD **)&v989[1];
        uint64_t v382 = *((void *)&v989[2] + 1);
        uint64_t v381 = *(void **)&v989[2];
        uint64_t v384 = (void *)*((void *)&v989[3] + 1);
        uint64_t v383 = *(void *)&v989[3];
        uint64_t v390 = *((void *)&v989[4] + 1);
        uint64_t v385 = *(void **)&v989[4];
        v391 = *(void **)&v989[5];
        unint64_t v888 = *(void *)&v989[0];
        uint64_t v389 = v891;
        uint64_t v386 = v883;
        id v387 = v884;
        uint64_t v378 = (uint64_t)v496;
      }
      while (*(void *)&v989[0]);
    }
    else
    {
      uint64_t v169 = v911;
      uint64_t v168 = v920;
      char v102 = v917;
    }
LABEL_193:
    memcpy(v989, v990, 0x108uLL);
    outlined release of AttributedString.Runs((uint64_t)v989);
    if (v906[16])
    {
      v500 = v909;
      long long v501 = v909[1];
      v1220[0] = *v909;
      v1220[1] = v501;
      v1220[2] = v909[2];
      swift_retain();
      outlined retain of Locale((uint64_t)v1220);
      BigString.startIndex.getter();
      outlined release of Locale((uint64_t)v1220);
      long long v502 = *v500;
      long long v503 = v500[1];
      long long v1219 = v500[2];
      v1218[1] = v503;
      v1218[0] = v502;
      long long v504 = *v500;
      long long v505 = v500[1];
      v1354[2] = v1219;
      v1354[1] = v505;
      v1354[0] = v504;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1354, (uint64_t)v1355);
      outlined retain of Locale((uint64_t)v1355);
      BigString.endIndex.getter();
      outlined release of Locale((uint64_t)v1218);
      swift_release();
      long long v506 = v500[1];
      long long v1215 = *v500;
      long long v1216 = v506;
      long long v1217 = v500[2];
      swift_retain_n();
      BigString.unicodeScalars.getter();
      BigString.UnicodeScalarView.subscript.getter();
      outlined release of Locale((uint64_t)&v1046);
      uint64_t v507 = BigSubstring.UnicodeScalarView.startIndex.getter();
      uint64_t v509 = v508;
      uint64_t v511 = v510;
      uint64_t v513 = v512;
      uint64_t v514 = BigSubstring.UnicodeScalarView.endIndex.getter();
      uint64_t v515 = v378;
      uint64_t v517 = v516;
      uint64_t v519 = v518;
      uint64_t v521 = v520;
      outlined release of Locale((uint64_t)&v1047);
      swift_release();
      uint64_t v1199 = v507;
      uint64_t v1200 = v509;
      uint64_t v1201 = v511;
      uint64_t v1202 = v513;
      uint64_t v1203 = v514;
      uint64_t v1204 = v517;
      uint64_t v1205 = v519;
      uint64_t v1206 = v521;
      AttributedString.Runs.init(_:in:)(v515, &v979);
      long long v522 = v851[5];
      long long v985 = v851[4];
      long long v986 = v522;
      long long v523 = v851[7];
      long long v987 = v851[6];
      long long v988 = v523;
      long long v524 = v851[1];
      long long v981 = *v851;
      long long v982 = v524;
      long long v525 = v851[3];
      long long v983 = v851[2];
      long long v984 = v525;
      id v880 = v979;
      uint64_t v526 = v980[16];
      v527 = (void *)v980[17];
      uint64_t v528 = v980[18];
      uint64_t v529 = v980[19];
      v530 = (void *)v980[20];
      uint64_t v531 = v980[21];
      v532 = (void *)v980[22];
      v533 = (void *)v980[23];
      char v534 = static BigString.Index.== infix(_:_:)();
      uint64_t v881 = v526;
      uint64_t v535 = v526;
      uint64_t v878 = v528;
      v879 = v527;
      v536 = v527;
      v537 = v532;
      uint64_t v538 = v528;
      v539 = v533;
      uint64_t v890 = v529;
      v540 = (_OWORD *)v529;
      id v541 = v536;
      v877 = v530;
      uint64_t v875 = v531;
      v869 = v532;
      v893 = v533;
      if ((v534 & 1) == 0)
      {
        while (1)
        {
          uint64_t v892 = v535;
          uint64_t v894 = v538;
          v895 = v540;
          long long v557 = v985;
          long long v558 = v986;
          long long v559 = v986;
          v560 = v860;
          *((_OWORD *)v860 + 4) = v985;
          *((_OWORD *)v560 + 5) = v558;
          long long v561 = v987;
          long long v562 = v988;
          long long v563 = v988;
          *((_OWORD *)v560 + 6) = v987;
          *((_OWORD *)v560 + 7) = v562;
          long long v564 = v981;
          long long v565 = v982;
          long long v566 = v982;
          *(_OWORD *)v560 = v981;
          *((_OWORD *)v560 + 1) = v565;
          long long v567 = v983;
          long long v568 = v984;
          long long v569 = v984;
          *((_OWORD *)v560 + 2) = v983;
          *((_OWORD *)v560 + 3) = v568;
          v570 = v861;
          *((_OWORD *)v861 + 4) = v557;
          *((_OWORD *)v570 + 5) = v559;
          *((_OWORD *)v570 + 6) = v561;
          *((_OWORD *)v570 + 7) = v563;
          *(_OWORD *)v570 = v564;
          *((_OWORD *)v570 + 1) = v566;
          *((_OWORD *)v570 + 2) = v567;
          *((_OWORD *)v570 + 3) = v569;
          id v572 = v880;
          uint64_t v571 = v881;
          uint64_t v941 = (uint64_t)v880;
          uint64_t v951 = v881;
          uint64_t v573 = v878;
          v574 = v879;
          v952 = v879;
          uint64_t v953 = v878;
          uint64_t v954 = v890;
          v955 = v530;
          uint64_t v956 = v531;
          v957 = v537;
          v958 = v539;
          uint64_t v937 = v535;
          id v938 = v541;
          uint64_t v939 = v538;
          v940 = v540;
          AttributedString.Runs.subscript.getter(&v959);
          id v887 = (id)v960;
          unint64_t v888 = v959;
          uint64_t v575 = v531;
          uint64_t v886 = v963;
          long long v576 = v986;
          v577 = v905;
          *((_OWORD *)v905 + 4) = v985;
          v577[5] = v576;
          long long v578 = v988;
          v577[6] = v987;
          v577[7] = v578;
          long long v579 = v982;
          _OWORD *v577 = v981;
          v577[1] = v579;
          long long v580 = v984;
          v577[2] = v983;
          v577[3] = v580;
          *(void *)&long long v964 = v572;
          uint64_t v969 = v571;
          uint64_t v970 = (uint64_t)v574;
          uint64_t v971 = v573;
          uint64_t v972 = v890;
          v973 = v530;
          uint64_t v974 = v531;
          v975 = v537;
          id v976 = v893;
          v977 = &outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
          uint64_t v581 = (uint64_t)v541;
          uint64_t v582 = MEMORY[0x1E4FBC860];
          uint64_t v978 = MEMORY[0x1E4FBC860];
          id v926 = v572;
          uint64_t v929 = v571;
          v930 = v574;
          uint64_t v931 = v573;
          uint64_t v932 = v890;
          v933 = v530;
          uint64_t v934 = v575;
          v935 = v537;
          v936 = v893;
          unint64_t v959 = v892;
          unint64_t v960 = v581;
          BOOL v55 = (void *)v894;
          uint64_t v961 = v894;
          v962 = v895;
          swift_retain();
          outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v964);
          AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v959, (uint64_t)&outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:), v582, &v941);
          swift_release();
          outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v964);
          uint64_t v103 = v941;
          id v541 = (id)v942;
          uint64_t v553 = v943;
          char v102 = (_OWORD *)v944;
          uint64_t v891 = v581;
          if (static BigString.Index.< infix(_:_:)()) {
            break;
          }
          uint64_t v583 = specialized AttributedString._AttributeStorage.subscript.getter(v888);
          char v585 = v584;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v539 = v893;
          if ((v585 & 1) == 0)
          {
            uint64_t v859 = v583;
            v882 = v102;
            uint64_t v883 = v553;
            v884 = v541;
            v885 = (void *)v103;
            v586 = v909;
            long long v587 = v909[1];
            v1198[0] = *v909;
            v1198[1] = v587;
            v1198[2] = v909[2];
            swift_retain();
            outlined retain of Locale((uint64_t)v1198);
            unint64_t v888 = BigString.startIndex.getter();
            uint64_t v589 = v588;
            uint64_t v591 = v590;
            uint64_t v593 = v592;
            outlined release of Locale((uint64_t)v1198);
            long long v594 = *v586;
            long long v595 = v586[1];
            long long v1197 = v586[2];
            v1196[1] = v595;
            v1196[0] = v594;
            long long v596 = *v586;
            long long v597 = v586[1];
            v1356[2] = v1197;
            v1356[1] = v597;
            v1356[0] = v596;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v1356, (uint64_t)v1357);
            outlined retain of Locale((uint64_t)v1357);
            uint64_t v598 = BigString.endIndex.getter();
            uint64_t v600 = v599;
            uint64_t v602 = v601;
            uint64_t v604 = v603;
            outlined release of Locale((uint64_t)v1196);
            uint64_t v1185 = v888;
            uint64_t v1186 = v589;
            uint64_t v1187 = v591;
            uint64_t v1188 = v593;
            uint64_t v1189 = v598;
            uint64_t v1190 = v600;
            uint64_t v1191 = v602;
            uint64_t v1192 = v604;
            long long v605 = *v586;
            long long v606 = v586[1];
            long long v1195 = v586[2];
            long long v1194 = v606;
            long long v1193 = v605;
            swift_retain();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v1048);
            uint64_t v607 = BigSubstring.UnicodeScalarView.startIndex.getter();
            id v887 = v609;
            unint64_t v888 = v608;
            uint64_t v886 = v610;
            BigSubstring.UnicodeScalarView.endIndex.getter();
            uint64_t v612 = v611;
            outlined release of Locale((uint64_t)&v1049);
            swift_release();
            uint64_t v613 = v865;
            v614 = v871;
            v615 = v874;
            v868 = (void *)v607;
            if (static BigString.Index.< infix(_:_:)())
            {
              __break(1u);
LABEL_314:
              __break(1u);
LABEL_315:
              __break(1u);
LABEL_316:
              __break(1u);
LABEL_317:
              __break(1u);
LABEL_318:
              __break(1u);
LABEL_319:
              __break(1u);
LABEL_320:
              __break(1u);
LABEL_321:
              __break(1u);
LABEL_322:
              __break(1u);
LABEL_323:
              __break(1u);
LABEL_324:
              __break(1u);
LABEL_325:
              __break(1u);
LABEL_326:
              __break(1u);
LABEL_327:
              __break(1u);
LABEL_328:
              __break(1u);
LABEL_329:
              __break(1u);
LABEL_330:
              __break(1u);
LABEL_331:
              if (v612 >= 0) {
                v847 = (void *)v613;
              }
              else {
                v847 = (void *)v612;
              }
              id v919 = v847;
              goto LABEL_288;
            }
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_314;
            }
            uint64_t v613 = v891;
            v615 = (_OWORD *)v892;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_315;
            }
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_316;
            }
            v616 = v909;
            long long v617 = v909[1];
            v1184[3] = *v909;
            v1184[4] = v617;
            v1184[5] = v909[2];
            BigString.unicodeScalars.getter();
            uint64_t v867 = BigString.UnicodeScalarView.distance(from:to:)();
            outlined release of Locale((uint64_t)&v1050);
            swift_release();
            long long v618 = v616[1];
            v1184[0] = *v616;
            v1184[1] = v618;
            v1184[2] = v616[2];
            swift_retain();
            outlined retain of Locale((uint64_t)v1184);
            uint64_t v619 = BigString.startIndex.getter();
            id v887 = v620;
            unint64_t v888 = v619;
            uint64_t v622 = v621;
            uint64_t v624 = v623;
            outlined release of Locale((uint64_t)v1184);
            long long v625 = *v616;
            long long v626 = v616[1];
            long long v1183 = v616[2];
            v1182[1] = v626;
            v1182[0] = v625;
            long long v627 = *v616;
            long long v628 = v616[1];
            v1358[2] = v1183;
            v1358[1] = v628;
            v1358[0] = v627;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v1358, (uint64_t)v1359);
            outlined retain of Locale((uint64_t)v1359);
            uint64_t v629 = BigString.endIndex.getter();
            uint64_t v612 = (uint64_t)v615;
            uint64_t v631 = v630;
            uint64_t v633 = v632;
            uint64_t v635 = v634;
            outlined release of Locale((uint64_t)v1182);
            uint64_t v1171 = v888;
            uint64_t v1172 = v622;
            uint64_t v1173 = v624;
            id v1174 = v887;
            uint64_t v1175 = v629;
            uint64_t v1176 = v631;
            uint64_t v1177 = v633;
            uint64_t v1178 = v635;
            long long v636 = *v616;
            long long v637 = v616[1];
            long long v1181 = v616[2];
            long long v1180 = v637;
            long long v1179 = v636;
            swift_retain();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v1051);
            uint64_t v638 = BigSubstring.UnicodeScalarView.startIndex.getter();
            uint64_t v640 = v639;
            v642 = v641;
            unint64_t v888 = v643;
            uint64_t v613 = BigSubstring.UnicodeScalarView.endIndex.getter();
            v615 = v644;
            outlined release of Locale((uint64_t)&v1052);
            v614 = (void *)v891;
            swift_release();
            uint64_t v886 = v640;
            id v887 = (id)v638;
            v868 = v642;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_317;
            }
            char v645 = static BigString.Index.< infix(_:_:)();
            v614 = v885;
            if (v645) {
              goto LABEL_318;
            }
            uint64_t v612 = v883;
            uint64_t v613 = (uint64_t)v884;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_319;
            }
            char v646 = static BigString.Index.< infix(_:_:)();
            v615 = (_OWORD *)v892;
            if (v646) {
              goto LABEL_320;
            }
            long long v647 = v909[1];
            v1170[3] = *v909;
            v1170[4] = v647;
            v1170[5] = v909[2];
            BigString.unicodeScalars.getter();
            uint64_t v856 = BigString.UnicodeScalarView.distance(from:to:)();
            outlined release of Locale((uint64_t)&v1053);
            swift_release();
            v648 = v924;
            long long v649 = v924[1];
            long long v650 = v924[2];
            v1170[2] = v924[3];
            v1170[1] = v650;
            v1170[0] = v649;
            swift_retain_n();
            outlined retain of Locale((uint64_t)v1170);
            uint64_t v651 = BigString.startIndex.getter();
            uint64_t v653 = v652;
            uint64_t v655 = v654;
            uint64_t v657 = v656;
            outlined release of Locale((uint64_t)v1170);
            long long v658 = v648[1];
            long long v659 = v648[2];
            long long v1169 = v648[3];
            v1168[1] = v659;
            v1168[0] = v658;
            long long v660 = v648[1];
            long long v661 = v648[2];
            v1360[2] = v1169;
            v1360[1] = v661;
            v1360[0] = v660;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v1360, (uint64_t)v1361);
            outlined retain of Locale((uint64_t)v1361);
            uint64_t v662 = BigString.endIndex.getter();
            uint64_t v664 = v663;
            uint64_t v666 = v665;
            uint64_t v668 = v667;
            outlined release of Locale((uint64_t)v1168);
            uint64_t v1157 = v651;
            uint64_t v1158 = v653;
            uint64_t v1159 = v655;
            uint64_t v1160 = v657;
            uint64_t v1161 = v662;
            uint64_t v1162 = v664;
            uint64_t v1163 = v666;
            uint64_t v1164 = v668;
            long long v669 = v648[2];
            long long v1165 = v648[1];
            long long v1166 = v669;
            long long v1167 = v648[3];
            swift_retain();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v1054);
            uint64_t v894 = BigSubstring.UnicodeScalarView.startIndex.getter();
            id v887 = v671;
            unint64_t v888 = v670;
            uint64_t v886 = v672;
            uint64_t v612 = BigSubstring.UnicodeScalarView.endIndex.getter();
            v615 = v673;
            uint64_t v675 = v674;
            outlined release of Locale((uint64_t)&v1055);
            v895 = v648;
            swift_release();
            uint64_t v613 = (uint64_t)v915;
            v614 = v913;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_321;
            }
            v868 = (void *)v612;
            uint64_t v857 = v675;
            v858 = v615;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_322;
            }
            v615 = v895;
            v676 = v895 + 1;
            long long v677 = v895[2];
            v1156[3] = v895[1];
            v1156[4] = v677;
            v1156[5] = v895[3];
            BigString.unicodeScalars.getter();
            uint64_t v678 = BigString.UnicodeScalarView.index(_:offsetBy:)();
            uint64_t v612 = v679;
            uint64_t v613 = v680;
            uint64_t v682 = v681;
            outlined release of Locale((uint64_t)&v1056);
            uint64_t v892 = v678;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_323;
            }
            uint64_t v683 = static BigString.Index.< infix(_:_:)();
            uint64_t v891 = v613;
            uint64_t v613 = v683;
            swift_release_n();
            unint64_t v888 = v682;
            uint64_t v894 = v612;
            if (v613) {
              goto LABEL_324;
            }
            long long v684 = v615[2];
            v1156[0] = *v676;
            v1156[1] = v684;
            v1156[2] = v615[3];
            swift_retain_n();
            outlined retain of Locale((uint64_t)v1156);
            uint64_t v685 = BigString.startIndex.getter();
            uint64_t v687 = v686;
            uint64_t v689 = v688;
            uint64_t v691 = v690;
            outlined release of Locale((uint64_t)v1156);
            long long v692 = *v676;
            long long v693 = v615[2];
            long long v1155 = v615[3];
            v1154[1] = v693;
            v1154[0] = v692;
            long long v694 = *v676;
            long long v695 = v615[2];
            v1362[2] = v1155;
            v1362[1] = v695;
            v1362[0] = v694;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v1362, (uint64_t)v1363);
            outlined retain of Locale((uint64_t)v1363);
            uint64_t v696 = BigString.endIndex.getter();
            uint64_t v698 = v697;
            uint64_t v700 = v699;
            uint64_t v702 = v701;
            outlined release of Locale((uint64_t)v1154);
            uint64_t v1143 = v685;
            uint64_t v1144 = v687;
            uint64_t v1145 = v689;
            uint64_t v1146 = v691;
            uint64_t v1147 = v696;
            uint64_t v1148 = v698;
            uint64_t v1149 = v700;
            uint64_t v1150 = v702;
            long long v703 = v676[1];
            long long v1151 = *v676;
            long long v1152 = v703;
            long long v1153 = v676[2];
            swift_retain();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v1057);
            uint64_t v704 = BigSubstring.UnicodeScalarView.startIndex.getter();
            v868 = v705;
            uint64_t v886 = v707;
            id v887 = v706;
            uint64_t v613 = BigSubstring.UnicodeScalarView.endIndex.getter();
            uint64_t v709 = v708;
            v711 = v710;
            outlined release of Locale((uint64_t)&v1058);
            swift_release();
            v615 = (_OWORD *)v891;
            uint64_t v612 = v892;
            uint64_t v867 = v704;
            v614 = v868;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_325;
            }
            uint64_t v857 = v613;
            v858 = v711;
            uint64_t v855 = v709;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_326;
            }
            long long v712 = v676[1];
            long long v1140 = *v676;
            long long v1141 = v712;
            v854 = v676;
            long long v1142 = v676[2];
            BigString.unicodeScalars.getter();
            uint64_t v613 = (uint64_t)v1059;
            uint64_t v713 = BigString.UnicodeScalarView.index(_:offsetBy:)();
            uint64_t v612 = v714;
            v716 = v715;
            uint64_t v718 = v717;
            outlined release of Locale((uint64_t)v1059);
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_327;
            }
            uint64_t v613 = static BigString.Index.< infix(_:_:)();
            v719 = v895;
            swift_release_n();
            if (v613) {
              goto LABEL_328;
            }
            uint64_t v613 = v891;
            v615 = (_OWORD *)v892;
            v614 = (void *)v894;
            uint64_t v720 = v888;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_329;
            }
            v1139[0] = v615;
            v1139[1] = v614;
            v1139[2] = v613;
            v1139[3] = v720;
            v1139[4] = v713;
            v1139[5] = v612;
            v1139[6] = v716;
            v1139[7] = v718;
            swift_retain();
            uint64_t v886 = specialized _NSRange.init<A>(_:in:)((uint64_t)v1139, v719);
            id v887 = (id)v713;
            v868 = v721;
            if (static BigString.Index.< infix(_:_:)()) {
              goto LABEL_330;
            }
            v722 = v854;
            long long v723 = v854[1];
            v1138[0] = *v854;
            v1138[1] = v723;
            v1138[2] = v854[2];
            swift_retain();
            outlined retain of Locale((uint64_t)v1138);
            BigString.startIndex.getter();
            outlined release of Locale((uint64_t)v1138);
            long long v724 = *v722;
            long long v725 = v722[1];
            long long v1137 = v722[2];
            v1136[1] = v725;
            v1136[0] = v724;
            long long v726 = *v722;
            long long v727 = v722[1];
            v1364[2] = v1137;
            v1364[1] = v727;
            v1364[0] = v726;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v1364, (uint64_t)v1365);
            outlined retain of Locale((uint64_t)v1365);
            BigString.endIndex.getter();
            outlined release of Locale((uint64_t)v1136);
            swift_release();
            v1111 = v615;
            v1112 = v614;
            uint64_t v1113 = v891;
            uint64_t v1114 = v720;
            id v1115 = v887;
            uint64_t v857 = v612;
            v858 = v716;
            uint64_t v1116 = v612;
            v1117 = v716;
            uint64_t v867 = v718;
            uint64_t v1118 = v718;
            long long v728 = v722[1];
            long long v1133 = *v722;
            long long v1134 = v728;
            long long v1135 = v722[2];
            swift_retain_n();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v1060);
            uint64_t v729 = BigSubstring.UnicodeScalarView.startIndex.getter();
            uint64_t v731 = v730;
            uint64_t v733 = v732;
            uint64_t v735 = v734;
            uint64_t v736 = BigSubstring.UnicodeScalarView.endIndex.getter();
            uint64_t v738 = v737;
            uint64_t v740 = v739;
            uint64_t v742 = v741;
            outlined release of Locale((uint64_t)&v1061);
            swift_release();
            uint64_t v1125 = v729;
            uint64_t v1126 = v731;
            uint64_t v1127 = v733;
            uint64_t v1128 = v735;
            uint64_t v743 = (uint64_t)v895;
            uint64_t v1129 = v736;
            uint64_t v1130 = v738;
            uint64_t v1131 = v740;
            uint64_t v1132 = v742;
            swift_retain();
            specialized AttributedString.Guts.getUniformValue<A>(in:key:)((uint64_t)&v941);
            if (v944)
            {
              outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v941, (uint64_t)&v926);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
              swift_dynamicCast();
              outlined destroy of AttributedString._AttributeValue((uint64_t)&v941);
            }
            else
            {
              outlined destroy of Any?((uint64_t)&v941, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
              unint64_t v960 = 0;
              unint64_t v959 = 0;
              LODWORD(v961) = 0;
              BYTE4(v961) = -1;
            }
            swift_release();
            unint64_t v744 = v959;
            unint64_t v745 = v960;
            unsigned int v746 = BYTE4(v961);
            uint64_t v747 = v961;
            swift_release();
            if (v746 <= 0xFEuLL)
            {
              unint64_t v785 = v747 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v746 << 32);
              switch(HIDWORD(v785))
              {
                case 1u:
                  id v788 = objc_allocWithZone((Class)NSNumber);
                  id v787 = objc_msgSend(v788, sel_initWithLongLong_, v744, v851);
                  break;
                case 2u:
                  double v789 = *(double *)&v744;
                  goto LABEL_234;
                case 3u:
                  NSDecimal.doubleValue.getter(v744, v745, v785);
                  double v789 = v790;
LABEL_234:
                  id v787 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v789);
                  break;
                default:
                  id v786 = objc_allocWithZone((Class)NSNumber);
                  id v787 = objc_msgSend(v786, sel_initWithUnsignedLongLong_, v744, v851);
                  break;
              }
              uint64_t v791 = (uint64_t)v787;
              uint64_t v944 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
              uint64_t v941 = v791;
              uint64_t v784 = 1;
            }
            else
            {
              if (static BigString.Index.< infix(_:_:)()) {
                __break(1u);
              }
              long long v748 = v722[1];
              v1124[0] = *v722;
              v1124[1] = v748;
              v1124[2] = v722[2];
              swift_retain();
              outlined retain of Locale((uint64_t)v1124);
              BigString.startIndex.getter();
              outlined release of Locale((uint64_t)v1124);
              long long v749 = *v722;
              long long v750 = v722[1];
              long long v1123 = v722[2];
              v1122[1] = v750;
              v1122[0] = v749;
              long long v751 = *v722;
              long long v752 = v722[1];
              v1366[2] = v1123;
              v1366[1] = v752;
              v1366[0] = v751;
              outlined init with take of any PredicateExpression<Self.Output == B1>(v1366, (uint64_t)v1367);
              outlined retain of Locale((uint64_t)v1367);
              BigString.endIndex.getter();
              outlined release of Locale((uint64_t)v1122);
              swift_release();
              long long v753 = v722[1];
              long long v1119 = *v722;
              long long v1120 = v753;
              long long v1121 = v722[2];
              swift_retain_n();
              BigString.unicodeScalars.getter();
              BigString.UnicodeScalarView.subscript.getter();
              outlined release of Locale((uint64_t)&v1062);
              uint64_t v754 = BigSubstring.UnicodeScalarView.startIndex.getter();
              uint64_t v756 = v755;
              uint64_t v758 = v757;
              uint64_t v894 = v759;
              uint64_t v760 = BigSubstring.UnicodeScalarView.endIndex.getter();
              uint64_t v762 = v761;
              uint64_t v764 = v763;
              uint64_t v766 = v765;
              outlined release of Locale((uint64_t)&v1063);
              swift_release();
              uint64_t v1102 = v754;
              uint64_t v1103 = v756;
              uint64_t v1104 = v758;
              uint64_t v1105 = v894;
              uint64_t v1106 = v760;
              uint64_t v1107 = v762;
              uint64_t v1108 = v764;
              uint64_t v1109 = v766;
              long long v767 = *v722;
              long long v768 = v722[1];
              v1110[2] = v722[2];
              v1110[1] = v768;
              v1110[0] = v767;
              swift_retain_n();
              outlined retain of Locale((uint64_t)v1110);
              BigString.subscript.getter();
              outlined release of Locale((uint64_t)v1110);
              uint64_t v769 = BigSubstring.startIndex.getter();
              uint64_t v771 = v770;
              uint64_t v773 = v772;
              uint64_t v775 = v774;
              uint64_t v776 = BigSubstring.endIndex.getter();
              uint64_t v778 = v777;
              uint64_t v780 = v779;
              uint64_t v782 = v781;
              outlined release of Locale((uint64_t)&v1064);
              swift_release_n();
              uint64_t v941 = v743;
              uint64_t v942 = v769;
              uint64_t v943 = v771;
              uint64_t v944 = v773;
              uint64_t v945 = v775;
              uint64_t v946 = v776;
              uint64_t v947 = v778;
              uint64_t v948 = v780;
              uint64_t v949 = v782;
              uint64_t v950 = 0;
              lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
              String.init<A>(_:)();
              uint64_t v783 = String._bridgeToObjectiveCImpl()();
              swift_bridgeObjectRelease();
              uint64_t v784 = 0;
              uint64_t v944 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
              uint64_t v941 = v783;
            }
            outlined init with copy of (Hashable & Sendable)?((uint64_t)&v941, (uint64_t)&v926, (uint64_t *)&demangling cache variable for type metadata for Any?);
            uint64_t v792 = v928;
            if (v928)
            {
              v547 = __swift_project_boxed_opaque_existential_1(&v926, v928);
              uint64_t v548 = *(void *)(v792 - 8);
              double v549 = MEMORY[0x1F4188790](v547);
              v551 = (char *)&v851 - ((v550 + 15) & 0xFFFFFFFFFFFFFFF0);
              (*(void (**)(char *, double))(v548 + 16))(v551, v549);
              uint64_t v552 = _bridgeAnythingToObjectiveC<A>(_:)();
              (*(void (**)(char *, uint64_t))(v548 + 8))(v551, v792);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v926);
            }
            else
            {
              uint64_t v552 = 0;
            }
            uint64_t v103 = (uint64_t)v885;
            char v102 = v882;
            uint64_t v553 = v883;
            id v554 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
            objc_msgSend(v554, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v859, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v886, v868, v784, v552);
            uint64_t v555 = swift_unknownObjectRelease();
            MEMORY[0x185302590](v555);
            if (*(void *)((v923 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v923 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            outlined destroy of Any?((uint64_t)&v941, (uint64_t *)&demangling cache variable for type metadata for Any?);
            v539 = v893;
            id v541 = v884;
          }
          v530 = v877;
          uint64_t v531 = v875;
          v537 = v869;
          char v556 = static BigString.Index.== infix(_:_:)();
          uint64_t v535 = v103;
          uint64_t v538 = v553;
          v540 = v102;
          if (v556) {
            goto LABEL_196;
          }
        }
        __break(1u);
LABEL_280:
        uint64_t v106 = swift_once();
LABEL_78:
        long long v107 = (os_unfair_lock_s *)static String.LocalizationValue.attributedStringsCacheLock;
        MEMORY[0x1F4188790](v106);
        swift_retain();
        os_unfair_lock_lock(v107 + 6);
        partial apply for specialized closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)((uint64_t)&v107[4], (uint64_t)v990);
        os_unfair_lock_unlock(v107 + 6);
        swift_release();
        long long v108 = *(_OWORD **)&v990[0];
        if (*(void *)&v990[0])
        {
          char v109 = BYTE8(v990[0]);

          outlined consume of URL?(v922);
          int v870 = v109 & 1;
          goto LABEL_127;
        }
        uint64_t v101 = v922;
        goto LABEL_81;
      }
LABEL_196:
      long long v542 = v986;
      v543 = v905;
      *((_OWORD *)v905 + 4) = v985;
      v543[5] = v542;
      long long v544 = v988;
      v543[6] = v987;
      v543[7] = v544;
      long long v545 = v982;
      _OWORD *v543 = v981;
      v543[1] = v545;
      long long v546 = v984;
      v543[2] = v983;
      v543[3] = v546;
      *(void *)&long long v964 = v880;
      uint64_t v969 = v881;
      uint64_t v970 = (uint64_t)v879;
      uint64_t v971 = v878;
      uint64_t v972 = v890;
      v973 = v530;
      uint64_t v974 = v531;
      v975 = v537;
      id v976 = v539;
      v977 = &outlined read-only object #0 of specialized String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
      uint64_t v978 = MEMORY[0x1E4FBC860];
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v964);
      uint64_t v167 = v918;
      uint64_t v168 = v920;
      goto LABEL_146;
    }
    uint64_t v167 = v918;
    id v165 = v919;
    uint64_t v166 = v922;
  }
  __break(1u);
LABEL_336:
  __break(1u);
LABEL_337:
  __break(1u);
LABEL_338:
  __break(1u);
LABEL_339:
  uint64_t v137 = swift_once();
LABEL_252:
  uint64_t v806 = static String.LocalizationValue.attributedStringsCacheLock;
  MEMORY[0x1F4188790](v137);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v806 + 24));
  partial apply for specialized closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)((uint64_t *)(v806 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v806 + 24));
  swift_release();
  uint64_t v131 = v922;
LABEL_253:
  id v807 = v873;

  swift_bridgeObjectRelease();
  outlined consume of URL?(v131);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  void *v864 = v916;

LABEL_300:
}

void String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, void *a11)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v945 = v12;
  uint64_t v14 = v13;
  unint64_t v16 = v15;
  uint64_t v954 = v17;
  uint64_t v953 = v18;
  v916 = v19;
  uint64_t v1402 = *MEMORY[0x1E4F143B8];
  uint64_t isEscapingClosureAtFileLocation = *(void *)v20;
  uint64_t v914 = *(void *)(v20 + 8);
  LODWORD(v917) = *(unsigned __int8 *)(v20 + 16);
  LODWORD(v915) = *(unsigned __int8 *)(v20 + 17);
  uint64_t v941 = *(void **)(v20 + 24);
  LODWORD(v940) = *(unsigned __int8 *)(v20 + 32);
  LODWORD(v946) = *(unsigned __int8 *)(v20 + 33);
  id v22 = *(id *)(v20 + 48);
  uint64_t v944 = *(void *)(v20 + 40);
  LODWORD(v943) = *(unsigned __int8 *)(v20 + 56);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  uint64_t v26 = *v11;
  id v950 = (id)v11[1];
  uint64_t v955 = v27;
  uint64_t v949 = (_OWORD *)v11[2];
  if (!v27)
  {
    uint64_t v953 = (uint64_t)v950;
    uint64_t v955 = swift_bridgeObjectRetain();
  }
  if (isEscapingClosureAtFileLocation) {
    uint64_t v28 = isEscapingClosureAtFileLocation;
  }
  else {
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  v1022[0] = (unint64_t)v28;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v913 = (void *)v24;
  v952 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_AJs5NeverOTg506_sSS10d3E17ef43V25argumentsWithReplacements_6localeSayAC14gH40VGSays7CVarArg_pGSg_AA6LocaleVtFA2GXEfU_s16IndexingIteratorVySays0tU0_pGGAF0X0VTf1cn_nTf4nng_n(v26, v1022, v25, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v912 = v25;
  swift_unknownObjectRelease();
  if (v14) {
    id v927 = v14;
  }
  else {
    id v927 = objc_msgSend(self, sel_mainBundle);
  }
  id v29 = v14;
  swift_bridgeObjectRetain();
  uint64_t v30 = String.count.getter();
  swift_bridgeObjectRelease();
  id v31 = 0;
  if (v30 < 1)
  {
    unint64_t v16 = 0xEB00000000656C62;
    uint64_t v954 = 0x617A696C61636F4CLL;
  }
  else
  {
    if (!v16)
    {
      __break(1u);
LABEL_339:
      LODWORD(v879) = 0;
      uint64_t v878 = 347;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x181DD8940);
    }
    swift_bridgeObjectRetain();
  }
  LODWORD(v951) = a9;
  uint64_t v948 = (void *)v16;
  if (v22)
  {
    if (v943)
    {
      swift_bridgeObjectRetain();
      id v32 = objc_msgSend(v927, sel_localizations);
      if (!v32) {
        id v32 = (id)_ContiguousArrayBuffer._asCocoaArray()();
      }
      uint64_t v33 = self;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_1821037E0;
      *(void *)(v34 + 32) = v944;
      *(void *)(v34 + 40) = v22;
      id v35 = objc_msgSend(v33, sel_preferredLocalizationsFromArray_forPreferences_, v32, _ContiguousArrayBuffer._asCocoaArray()());

      swift_unknownObjectRelease();
      if (v35)
      {
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        id v31 = 0;
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        uint64_t v36 = swift_dynamicCastClass();
        if (v36)
        {
          uint64_t v37 = v36;

          uint64_t v38 = v37;
        }
        else
        {
          swift_unknownObjectRelease();
          objc_msgSend(v35, sel_copy);
          unint64_t v39 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          uint64_t v40 = specialized _arrayForceCast<A, B>(_:)(v39);

          uint64_t v38 = v40;
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        uint64_t v38 = MEMORY[0x1E4FBC860];
        id v31 = 0;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1821037E0;
      *(void *)(v38 + 32) = v944;
      *(void *)(v38 + 40) = v22;
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  swift_bridgeObjectRetain();
  id v41 = objc_msgSend(v927, sel_preferredLocalizations);
  unint64_t v42 = (void *)MEMORY[0x1E4FBC860];
  if (!v41)
  {
LABEL_31:
    if (v38) {
      goto LABEL_32;
    }
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  uint64_t v43 = v41;
  type metadata accessor for __SwiftDeferredNSArray();
  swift_unknownObjectRetain();
  if (swift_dynamicCastClass())
  {
    swift_retain();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v44 = swift_dynamicCastClass();
  if (v44)
  {
    unint64_t v42 = (void *)v44;

    goto LABEL_31;
  }
  swift_unknownObjectRelease();
  objc_msgSend(v43, sel_copy);
  unint64_t v46 = _bridgeCocoaArray<A>(_:)();
  swift_unknownObjectRelease();
  unint64_t v42 = (void *)specialized _arrayForceCast<A, B>(_:)(v46);

  swift_bridgeObjectRelease();
  if (!v38) {
    goto LABEL_35;
  }
LABEL_32:
  char v45 = specialized static Array<A>.== infix(_:_:)((void *)v38, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v45)
  {
    swift_bridgeObjectRelease();
    uint64_t v38 = 0;
  }
LABEL_36:
  uint64_t v924 = v38;
  if (v951)
  {
    uint64_t v47 = String._bridgeToObjectiveCImpl()();
    uint64_t v48 = String._bridgeToObjectiveCImpl()();
    uint64_t v49 = String._bridgeToObjectiveCImpl()();
    if (v38)
    {
      swift_bridgeObjectRetain();
      id v50 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
    }
    else
    {
      id v50 = 0;
    }
    *(void *)&v1022[0] = 0;
    *(void *)&v1021[0] = 0;
    id v52 = objc_msgSend(v927, sel__localizedStringNoCacheNoMarkdownParsingForKey_value_table_localizations_actualTableURL_formatSpecifierConfiguration_, v47, v48, v49, v50, v1022, v1021);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    id v51 = *(id *)&v1021[0];
    long long v53 = *(void **)&v1022[0];
    if (!v52)
    {
      id v91 = *(id *)&v1021[0];
      id v92 = v53;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v1022, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v1021);

      swift_bridgeObjectRelease();
      uint64_t *v916 = *(void *)&v1021[0];
      return;
    }
    id v54 = *(id *)&v1021[0];
    v918 = v53;
    id v55 = v53;
    swift_bridgeObjectRelease();
    self;
    uint64_t v56 = (void *)swift_dynamicCastObjCClassUnconditional();
    uint64_t v953 = (uint64_t)static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    uint64_t v955 = v57;

    uint64_t v38 = v924;
  }
  else
  {
    v918 = 0;
    id v51 = 0;
  }
  uint64_t v949 = (_OWORD *)a10;
  uint64_t v58 = v952[2];
  char v59 = (char)v946;
  if (!v51) {
    char v59 = 1;
  }
  id v947 = (id)v952[2];
  id v950 = a11;
  id v942 = v51;
  if (!v58 && (v59 & 1) != 0)
  {
    BigString.init(_:)();
    AttributedString.init(_:attributes:)(v1054, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v1022);
    uint64_t v60 = *(_OWORD **)&v1022[0];
    goto LABEL_71;
  }
  *(void *)&v1049[0] = MEMORY[0x1E4FBC868];
  if (!v51) {
    goto LABEL_51;
  }
  uint64_t v61 = one-time initialization token for formatSpecifierConfiguration;
  uint64_t v62 = (uint64_t)v51;
  if (v61 == -1) {
    goto LABEL_50;
  }
  while (1)
  {
    swift_once();
LABEL_50:
    uint64_t v63 = (void *)static NSAttributedStringKey.formatSpecifierConfiguration;
    *((void *)&v1022[1] + 1) = type metadata accessor for NSMorphologyPronoun(0, &lazy cache variable for type metadata for NSDictionary);
    *(void *)&v1022[0] = v62;
    specialized Dictionary.subscript.setter((uint64_t)v1022, v63);
LABEL_51:
    id v64 = objc_allocWithZone((Class)NSAttributedString);
    uint64_t v65 = String._bridgeToObjectiveCImpl()();
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type String.LocalizationValue.FormatArgument.CodableStorage and conformance String.LocalizationValue.FormatArgument.CodableStorage((unint64_t *)&lazy protocol witness table cache variable for type NSAttributedStringKey and conformance NSAttributedStringKey, type metadata accessor for NSAttributedStringKey);
    swift_bridgeObjectRetain();
    id v938 = objc_msgSend(v64, sel_initWithString_attributes_, v65, _NativeDictionary.bridged()());
    swift_unknownObjectRelease();
    uint64_t v66 = swift_unknownObjectRelease();
    MEMORY[0x1F4188790](v66);
    v874 = v949;
    id v875 = v950;
    uint64_t v67 = v913;
    uint64_t v876 = v912;
    uint64_t v877 = (uint64_t)v913;
    uint64_t v878 = (uint64_t)v945;
    id v68 = v31;
    uint64_t v69 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS10FoundationE17LocalizationValueV14FormatArgumentVG_s7CVarArg_p6vararg_AJ15_AttributeFixupOSg11attrStrInfots5NeverOTg5((void (*)(_OWORD *__return_ptr, uint64_t))partial apply for closure #1 in String.LocalizationValue._formatAttributedString<A>(_:preparedArguments:options:scope:formatConfiguration:locale:), (uint64_t)v873, (uint64_t)v952);
    uint64_t v937 = v68;
    *(void *)&v1022[0] = isEscapingClosureAtFileLocation;
    *((void *)&v1022[0] + 1) = v914;
    LOBYTE(v1022[1]) = v917;
    BYTE1(v1022[1]) = v915;
    *((void *)&v1022[1] + 1) = v941;
    LOBYTE(v1022[2]) = (_BYTE)v940;
    BYTE1(v1022[2]) = (_BYTE)v946;
    *((void *)&v1022[2] + 1) = v944;
    *(void *)&v1022[3] = v22;
    BYTE8(v1022[3]) = (_BYTE)v943;
    uint64_t v70 = AttributedString.LocalizationOptions._nsOptions.getter();
    int64_t v72 = v71;
    uint64_t v944 = v70 | 2;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v74 = (uint64_t (*)(uint64_t, void *))v67[61];
    id v946 = v72;
    int64_t v75 = (void *)v74(ObjectType, v67);
    int64_t v76 = v69[2];
    uint64_t v939 = v69;
    if (v76)
    {
      *(void *)&v1039[0] = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0);
      uint64_t v77 = (uint64_t)(v69 + 4);
      uint64_t v78 = *(void *)&v1039[0];
      int64_t v79 = v76;
      do
      {
        outlined init with copy of (Hashable & Sendable)?(v77, (uint64_t)v1022, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v1022, (uint64_t)v1021);
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1021, (uint64_t)&v996);
        outlined destroy of Any?((uint64_t)v1022, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v78 + 16) + 1, 1);
          uint64_t v78 = *(void *)&v1039[0];
        }
        unint64_t v81 = *(void *)(v78 + 16);
        unint64_t v80 = *(void *)(v78 + 24);
        if (v81 >= v80 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
          uint64_t v78 = *(void *)&v1039[0];
        }
        *(void *)(v78 + 16) = v81 + 1;
        outlined init with take of any PredicateExpression<Self.Output == B1>(&v996, v78 + 40 * v81 + 32);
        v77 += 64;
        --v79;
      }
      while (v79);
    }
    id v82 = self;
    uint64_t v83 = getVaList(_:)();
    swift_bridgeObjectRelease();
    id v84 = v938;
    id v85 = v946;
    id v86 = objc_msgSend(v82, sel__attributedStringWithFormat_attributeOptions_formattingOptions_locale_arguments_, v938, v944, v946, v75, v83);

    uint64_t v87 = type metadata accessor for _FoundationPlusScope();
    id v88 = v86;
    uint64_t v89 = static AttributeScope.scopeDescription.getter(v87);
    swift_bridgeObjectRelease();
    char v90 = v937;
    AttributedString.init(_:attributeTable:options:)(v88, (uint64_t)v89, 0, v1022);
    id v31 = v90;
    if (v90)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      BigString.init(_:)();
      AttributedString.init(_:attributes:)(v1054, MEMORY[0x1E4FBC868], MEMORY[0x1E4FBC870], (uint64_t *)v1022);
      swift_bridgeObjectRelease();

      id v51 = v942;
      id v31 = 0;
      uint64_t v60 = *(_OWORD **)&v1022[0];
      uint64_t v38 = v924;
    }
    else
    {
      *(void *)&long long v996 = *(void *)&v1022[0];
      uint64_t v93 = MEMORY[0x1E4FBC860];
      if (v76)
      {
        uint64_t v953 = (uint64_t)v88;
        id v909 = 0;
        *(void *)&v1039[0] = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76, 0);
        uint64_t v94 = (uint64_t)v939 + 32;
        uint64_t v93 = *(void *)&v1039[0];
        do
        {
          outlined init with copy of (Hashable & Sendable)?(v94, (uint64_t)v1022, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)v1022, (uint64_t)v1021);
          uint64_t v95 = *((void *)&v1022[2] + 1);
          uint64_t v96 = *(void *)&v1022[3];
          char v97 = BYTE8(v1022[3]);
          *((void *)&v1021[2] + 1) = *((void *)&v1022[2] + 1);
          *(void *)&v1021[3] = *(void *)&v1022[3];
          BYTE8(v1021[3]) = BYTE8(v1022[3]);
          outlined copy of String.LocalizationValue.FormatArgument._AttributeFixup?(*((uint64_t *)&v1022[2] + 1), *(uint64_t *)&v1022[3], BYTE8(v1022[3]));
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v1021);
          outlined destroy of Any?((uint64_t)v1022, &demangling cache variable for type metadata for (vararg: CVarArg, attrStrInfo: String.LocalizationValue.FormatArgument._AttributeFixup?));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v93 + 16) + 1, 1);
            uint64_t v93 = *(void *)&v1039[0];
          }
          unint64_t v99 = *(void *)(v93 + 16);
          unint64_t v98 = *(void *)(v93 + 24);
          if (v99 >= v98 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v98 > 1, v99 + 1, 1);
            uint64_t v93 = *(void *)&v1039[0];
          }
          *(void *)(v93 + 16) = v99 + 1;
          uint64_t v100 = v93 + 24 * v99;
          *(void *)(v100 + 32) = v95;
          *(void *)(v100 + 40) = v96;
          *(unsigned char *)(v100 + 48) = v97;
          v94 += 64;
          --v76;
        }
        while (v76);
        uint64_t v38 = v924;
        id v31 = v909;
        id v84 = v938;
        id v88 = (id)v953;
      }
      else
      {
        uint64_t v38 = v924;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.LocalizationValue.restoreAttributedStringArguments(_:in:)(v93);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      id v51 = v942;
      uint64_t v60 = (_OWORD *)v996;
    }
LABEL_71:
    long long v101 = v60[1];
    long long v102 = v60[2];
    long long v1363 = v60[3];
    v1362[1] = v102;
    v1362[0] = v101;
    long long v103 = v60[1];
    long long v104 = v60[2];
    uint64_t v944 = (uint64_t)v60;
    v1364[2] = v1363;
    v1364[1] = v104;
    v1364[0] = v103;
    outlined init with take of any PredicateExpression<Self.Output == B1>(v1364, (uint64_t)v1365);
    outlined retain of Locale((uint64_t)v1365);
    uint64_t v943 = (void *)MEMORY[0x185302050](v1362);
    id v946 = v105;
    if (v918)
    {
      URL.init(reference:)(v918, v1022);
      uint64_t v106 = (void *)*((void *)&v1022[0] + 1);
      long long v107 = *(void **)&v1022[0];
      uint64_t v955 = *(void *)&v1022[1];
    }
    else
    {
      long long v107 = 0;
      uint64_t v106 = 0;
      uint64_t v955 = 0;
    }
    id v919 = v51;
    v108._uint64_t countAndFlagsBits = 0x65686361636F6E2ELL;
    v108._unint64_t object = (void *)0xE800000000000000;
    BOOL v109 = String.hasSuffix(_:)(v108);
    uint64_t v110 = swift_bridgeObjectRelease();
    LODWORD(v953) = (v109 || v38 != 0) | v951 ^ 1;
    if (!((v109 || v38 != 0) | (v951 ^ 1) & 1))
    {
      if (one-time initialization token for attributedStringsCacheLock != -1) {
        uint64_t v110 = swift_once();
      }
      uint64_t v111 = (os_unfair_lock_s *)static String.LocalizationValue.attributedStringsCacheLock;
      MEMORY[0x1F4188790](v110);
      v874 = v949;
      id v875 = v950;
      uint64_t v876 = (uint64_t)v943;
      uint64_t v877 = (uint64_t)v946;
      uint64_t v878 = v112;
      LOBYTE(v879) = v113;
      swift_retain();
      os_unfair_lock_lock(v111 + 6);
      partial apply for closure #1 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)((uint64_t)&v111[4], (uint64_t)v1022);
      os_unfair_lock_unlock(v111 + 6);
      swift_release();
      uint64_t v114 = *(_OWORD **)&v1022[0];
      if (*(void *)&v1022[0])
      {
        char v115 = BYTE8(v1022[0]);

        outlined consume of URL?(v107);
        LODWORD(v116) = v115 & 1;
        goto LABEL_129;
      }
    }
    if (one-time initialization token for localizedAttributedString != -1) {
LABEL_279:
    }
      swift_once();
    LODWORD(v954) = v947 != 0;
    LODWORD(v939) = static AttributedString.MarkdownParsingOptions.localizedAttributedString;
    LODWORD(v940) = byte_1E8EDF429;
    LODWORD(v941) = byte_1E8EDF42A;
    uint64_t v117 = qword_1E8EDF430;
    uint64_t v118 = unk_1E8EDF438;
    uint64_t v948 = v106;
    if (!v107)
    {
      swift_bridgeObjectRetain();
      goto LABEL_90;
    }
    uint64_t v119 = v107;
    *(void *)&v1022[0] = v107;
    *((void *)&v1022[0] + 1) = v106;
    *(void *)&v1022[1] = v955;
    swift_bridgeObjectRetain();
    unint64_t v120 = URL.pathComponents.getter();
    unint64_t v121 = v120;
    uint64_t v122 = *(void *)(v120 + 16);
    if (v122) {
      break;
    }
    swift_bridgeObjectRelease();
    long long v107 = v119;
LABEL_90:
    if (v118 || (v951 & 1) == 0)
    {
      uint64_t v119 = v107;
      if (v942) {
        goto LABEL_105;
      }
    }
    else
    {
      id v135 = objc_msgSend(v927, sel_preferredLocalizations);
      if (v135)
      {
        int v136 = v135;
        type metadata accessor for __SwiftDeferredNSArray();
        swift_unknownObjectRetain();
        if (swift_dynamicCastClass())
        {
          swift_retain();
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v137 = swift_dynamicCastClass();
        if (!v137)
        {
          uint64_t v119 = v107;
          swift_unknownObjectRelease();
          objc_msgSend(v136, sel_copy);
          unint64_t v139 = _bridgeCocoaArray<A>(_:)();
          swift_unknownObjectRelease();
          int v138 = (void *)specialized _arrayForceCast<A, B>(_:)(v139);

          swift_bridgeObjectRelease();
          if (!v138[2])
          {
            swift_bridgeObjectRelease();
            uint64_t v118 = 0;
            if (!v942) {
              goto LABEL_117;
            }
            goto LABEL_105;
          }
LABEL_104:
          uint64_t v117 = v138[4];
          uint64_t v118 = v138[5];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!v942) {
            goto LABEL_117;
          }
          goto LABEL_105;
        }
        int v138 = (void *)v137;
        uint64_t v119 = v107;

        if (v138[2]) {
          goto LABEL_104;
        }
      }
      else
      {
        uint64_t v119 = v107;
        int v138 = (void *)MEMORY[0x1E4FBC860];
        if (*(void *)(MEMORY[0x1E4FBC860] + 16)) {
          goto LABEL_104;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v118 = 0;
      if (v942) {
        goto LABEL_105;
      }
    }
LABEL_117:
    memset(v1022, 0, 32);
    int v141 = v119;
LABEL_118:
    outlined destroy of Any?((uint64_t)v1022, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_119:
    LOBYTE(v1022[0]) = (_BYTE)v939;
    BYTE1(v1022[0]) = (_BYTE)v940;
    BYTE2(v1022[0]) = (_BYTE)v941;
    *((void *)&v1022[0] + 1) = v117;
    *(void *)&v1022[1] = v118;
    BYTE8(v1022[1]) = v954;
    memset(v1021, 0, 24);
    swift_bridgeObjectRetain();
    int v146 = static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(&v996, (uint64_t)v943, (unint64_t)v946, (uint64_t)v949, (char *)v1022, (uint64_t)v1021, (uint64_t)v949, (uint64_t)v950);
    if (v31)
    {

      uint64_t v144 = swift_bridgeObjectRelease();
      id v31 = 0;
      LODWORD(v116) = 0;
      uint64_t v114 = 0;
      if (v953) {
        goto LABEL_121;
      }
    }
    else
    {
      LODWORD(v116) = v146;
      uint64_t v144 = swift_bridgeObjectRelease();
LABEL_124:
      uint64_t v114 = (_OWORD *)v996;
      if (v953)
      {
LABEL_121:
        if (!v114) {
          goto LABEL_255;
        }
        goto LABEL_128;
      }
    }
    if (!v114) {
      goto LABEL_252;
    }
    uint64_t v953 = (uint64_t)v141;
    uint64_t v147 = one-time initialization token for attributedStringsCacheLock;
    uint64_t v148 = swift_retain_n();
    if (v147 != -1) {
LABEL_307:
    }
      uint64_t v148 = swift_once();
    uint64_t v149 = static String.LocalizationValue.attributedStringsCacheLock;
    MEMORY[0x1F4188790](v148);
    v873[0] = v949;
    v873[1] = v950;
    v874 = v943;
    id v875 = v946;
    uint64_t v876 = (uint64_t)v114;
    LOBYTE(v877) = v116 & 1;
    uint64_t v878 = (uint64_t)v945;
    LOBYTE(v879) = v954;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v149 + 24));
    partial apply for closure #2 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)((uint64_t *)(v149 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v149 + 24));
    swift_release();
    swift_release_n();
    int v141 = (void *)v953;
LABEL_128:

    swift_bridgeObjectRelease();
    outlined consume of URL?(v141);
LABEL_129:
    v957 = v114;
    uint64_t v956 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    if (v947)
    {
      int v908 = v116;
      id v909 = v31;
      long long v150 = v114[2];
      v1361[0] = v114[1];
      v1361[1] = v150;
      v1361[2] = v114[3];
      swift_retain_n();
      outlined retain of Locale((uint64_t)v1361);
      uint64_t v151 = BigString.startIndex.getter();
      uint64_t v153 = v152;
      uint64_t v155 = v154;
      uint64_t v157 = v156;
      outlined release of Locale((uint64_t)v1361);
      long long v158 = v114[1];
      long long v159 = v114[2];
      long long v1360 = v114[3];
      v1359[1] = v159;
      v1359[0] = v158;
      long long v160 = v114[1];
      long long v161 = v114[2];
      v1366[2] = v1360;
      v1366[1] = v161;
      v1366[0] = v160;
      outlined init with take of any PredicateExpression<Self.Output == B1>(v1366, (uint64_t)v1367);
      outlined retain of Locale((uint64_t)v1367);
      uint64_t v162 = (_OWORD *)BigString.endIndex.getter();
      uint64_t v164 = v163;
      uint64_t v166 = v165;
      uint64_t v168 = v167;
      outlined release of Locale((uint64_t)v1359);
      if (static BigString.Index.< infix(_:_:)())
      {
        __break(1u);
      }
      else
      {
        uint64_t v1351 = v151;
        uint64_t v1352 = v153;
        uint64_t v1353 = v155;
        uint64_t v1354 = v157;
        v1355 = v162;
        uint64_t v1356 = v164;
        uint64_t v1357 = v166;
        uint64_t v1358 = v168;
        AttributedString.Runs.init(_:in:)((uint64_t)v114, v1039);
        swift_release();
        long long v1051 = v1039[10];
        long long v1052 = v1039[11];
        uint64_t v1053 = v1040;
        v1049[6] = v1039[6];
        v1049[7] = v1039[7];
        long long v1050 = v1039[9];
        v1049[8] = v1039[8];
        v1049[2] = v1039[2];
        v1049[3] = v1039[3];
        v1049[5] = v1039[5];
        v1049[4] = v1039[4];
        v1049[1] = v1039[1];
        v1049[0] = v1039[0];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        uint64_t v162 = (_OWORD *)swift_allocObject();
        v162[1] = xmmword_1821037E0;
        outlined retain of AttributedString.Runs((uint64_t)v1049);
        if (one-time initialization token for name == -1) {
          goto LABEL_132;
        }
      }
      swift_once();
LABEL_132:
      uint64_t v169 = qword_1E8ED5F08;
      v935 = (long long *)(v944 + 16);
      *((void *)v162 + 4) = static AttributeScopes.FoundationAttributes.MarkdownSourcePositionAttribute.name;
      *((void *)v162 + 5) = v169;
      uint64_t v941 = v162;
      swift_bridgeObjectRetain();
      outlined release of AttributedString.Runs((uint64_t)v1049);
      v933 = (char *)v1021 + 8;
      long long v1045 = *(_OWORD *)((char *)&v1049[4] + 8);
      long long v1046 = *(_OWORD *)((char *)&v1049[5] + 8);
      uint64_t v932 = (char *)v1022 + 8;
      uint64_t v934 = (char *)&v996 + 8;
      v904 = (char *)&v1022[4] + 8;
      v905 = (char *)&v1021[4] + 8;
      uint64_t v902 = (long long *)v1012;
      long long v1047 = *(_OWORD *)((char *)&v1049[6] + 8);
      long long v1048 = *(_OWORD *)((char *)&v1049[7] + 8);
      v906 = &v959;
      v907 = &v974;
      int v903 = v917 ^ 1;
      id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
      long long v1041 = *(_OWORD *)((char *)v1049 + 8);
      long long v1042 = *(_OWORD *)((char *)&v1049[1] + 8);
      long long v1043 = *(_OWORD *)((char *)&v1049[2] + 8);
      long long v1044 = *(_OWORD *)((char *)&v1049[3] + 8);
      uint64_t v171 = *((void *)&v1049[8] + 1);
      uint64_t v116 = *((void *)&v1050 + 1);
      uint64_t v172 = v1050;
      uint64_t v173 = *((void *)&v1051 + 1);
      id v174 = (id)*((void *)&v1052 + 1);
      uint64_t v951 = (void *)v1052;
      uint64_t v939 = (void *)*((void *)&v1050 + 1);
      v940 = (void *)*((void *)&v1049[8] + 1);
      uint64_t v937 = (void *)v1050;
      id v938 = *(id *)&v1049[0];
      id v175 = v1053;
      v936 = (const void *)v1051;
      v952 = (void *)v1051;
      unint64_t v176 = (unint64_t)v946;
      uint64_t v945 = (void *)*((void *)&v1051 + 1);
      id v950 = v1053;
      id v942 = (id)*((void *)&v1052 + 1);
      while (1)
      {
        long long v177 = v952;
        id v178 = v175;
        if (static BigString.Index.== infix(_:_:)())
        {
          _s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOi0_((uint64_t)v1022);
          outlined init with take of LocalePreferences?((uint64_t)v1022, (uint64_t)v1038, v170);
        }
        else
        {
          long long v179 = v1045;
          long long v180 = v1046;
          long long v181 = v1046;
          long long v182 = v934;
          *((_OWORD *)v934 + 4) = v1045;
          v182[5] = v180;
          long long v183 = v1047;
          long long v184 = v1048;
          long long v185 = v1048;
          v182[6] = v1047;
          v182[7] = v184;
          long long v186 = v1041;
          long long v187 = v1042;
          long long v188 = v1042;
          *long long v182 = v1041;
          v182[1] = v187;
          long long v189 = v1043;
          long long v190 = v1044;
          long long v191 = v1044;
          v182[2] = v1043;
          v182[3] = v190;
          uint64_t v192 = v933;
          *((_OWORD *)v933 + 4) = v179;
          v192[5] = v181;
          v192[6] = v183;
          v192[7] = v185;
          *uint64_t v192 = v186;
          v192[1] = v188;
          v192[2] = v189;
          v192[3] = v191;
          uint64_t v954 = v172;
          uint64_t v193 = (uint64_t)v177;
          v952 = v177;
          id v194 = v174;
          id v195 = v938;
          uint64_t v196 = (uint64_t)v939;
          *(void *)&v1021[0] = v938;
          long long v197 = v940;
          *((void *)&v1021[8] + 1) = v940;
          id v198 = v178;
          uint64_t v200 = (uint64_t)v936;
          uint64_t v199 = (uint64_t)v937;
          *(void *)&v1021[9] = v937;
          *((void *)&v1021[9] + 1) = v939;
          uint64_t v955 = v116;
          *(void *)&v1021[10] = v936;
          *((void *)&v1021[10] + 1) = v173;
          uint64_t v201 = v951;
          *(void *)&v1021[11] = v951;
          *((void *)&v1021[11] + 1) = v194;
          *(void *)&v1021[12] = v198;
          uint64_t v973 = v171;
          uint64_t v974 = v954;
          uint64_t v975 = v955;
          uint64_t v976 = v193;
          uint64_t v953 = v171;
          AttributedString.Runs.subscript.getter(&v1011);
          uint64_t v949 = v1011;
          uint64_t v948 = (void *)v1012[0];
          id v947 = (id)v1012[9];
          long long v202 = v1046;
          id v203 = v932;
          *((_OWORD *)v932 + 4) = v1045;
          v203[5] = v202;
          long long v204 = v1048;
          v203[6] = v1047;
          v203[7] = v204;
          long long v205 = v1042;
          *id v203 = v1041;
          v203[1] = v205;
          long long v206 = v1044;
          v203[2] = v1043;
          v203[3] = v206;
          *(void *)&v1022[0] = v195;
          *((void *)&v1022[8] + 1) = v197;
          *(void *)&v1022[9] = v199;
          *((void *)&v1022[9] + 1) = v196;
          uint64_t v207 = v200;
          *(void *)&v1022[10] = v200;
          *((void *)&v1022[10] + 1) = v173;
          *(void *)&v1022[11] = v201;
          *((void *)&v1022[11] + 1) = v194;
          *(void *)&v1022[12] = v950;
          uint64_t v208 = (uint64_t)v941;
          *((void *)&v1022[12] + 1) = v941;
          uint64_t v209 = v173;
          uint64_t v210 = MEMORY[0x1E4FBC860];
          *(void *)&v1022[13] = MEMORY[0x1E4FBC860];
          *(void *)&long long v996 = v195;
          id v1001 = v197;
          uint64_t v1002 = v199;
          uint64_t v1003 = v196;
          uint64_t v1004 = v207;
          uint64_t v1005 = v209;
          v1006 = v201;
          id v1007 = v194;
          uint64_t v211 = v954;
          id v1008 = v950;
          uint64_t v212 = v953;
          long long v1011 = (_OWORD *)v953;
          v1012[0] = v954;
          v1012[1] = v955;
          uint64_t v106 = v952;
          v1012[2] = v952;
          outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)v1022);
          swift_retain();
          AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)((uint64_t *)&v1011, v208, v210, (uint64_t *)v1021);
          long long v107 = (void *)v212;
          swift_release();
          outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v1022);
          uint64_t v172 = *((void *)&v1021[0] + 1);
          uint64_t v171 = *(void *)&v1021[0];
          unsigned __int16 v213 = (void *)*((void *)&v1021[1] + 1);
          id v31 = *(id *)&v1021[1];
          if (static BigString.Index.< infix(_:_:)())
          {
            __break(1u);
            goto LABEL_279;
          }
          specialized AttributedString._AttributeStorage.subscript.getter((uint64_t)v949, (uint64_t)v1038);
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v1038[14] = v212;
          v1038[15] = v211;
          v1038[16] = v955;
          v1038[17] = v106;
          v1038[18] = v171;
          v1038[19] = v172;
          v1038[20] = v31;
          v1038[21] = v213;
          destructiveProjectEnumData for PredicateCodableError(v1038, v214);
          uint64_t v116 = (uint64_t)v31;
          v952 = v213;
          unint64_t v176 = (unint64_t)v946;
          id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
          uint64_t v173 = (uint64_t)v945;
          id v174 = v942;
        }
        outlined init with take of LocalePreferences?((uint64_t)v1038, (uint64_t)v1023, v170);
        outlined init with take of LocalePreferences?((uint64_t)v1023, (uint64_t)v1024, v170);
        if (_s10Foundation16AttributedStringV22MarkdownSourcePositionVSg_SnyAC5IndexVGtSgWOg((uint64_t)v1024) == 1) {
          break;
        }
        uint64_t v955 = v116;
        uint64_t v954 = v172;
        uint64_t v953 = v171;
        if (v1029) {
          goto LABEL_135;
        }
        uint64_t v949 = (_OWORD *)v1030;
        uint64_t v948 = v1031;
        id v947 = v1032;
        long long v215 = v1034;
        v930 = v1035;
        uint64_t v931 = v1033;
        uint64_t v928 = v1037;
        uint64_t v929 = v1036;
        v1346[0] = v1024[0];
        v1346[1] = v1024[1];
        v1346[2] = v1024[2];
        long long v1346[3] = v1024[3];
        char v1347 = v1025 & 1;
        long long v1348 = v1026;
        long long v1349 = v1027;
        char v1350 = v1028 & 1;
        swift_bridgeObjectRetain();
        unint64_t v216 = specialized Range<>.init<A>(_:in:)((uint64_t)v1346, (unint64_t)v943, v176);
        if (v218) {
          goto LABEL_135;
        }
        unsigned __int16 v219 = v216;
        unint64_t v220 = v217;
        long long v221 = v935[1];
        v1345[0] = *v935;
        v1345[1] = v221;
        v1345[2] = v935[2];
        unint64_t v222 = v216 & 0xC;
        int64_t v223 = v216 >> 16;
        swift_retain();
        outlined retain of Locale((uint64_t)v1345);
        if (v222 == 8)
        {
          uint64_t v224 = v1345;
          BigString.utf16.getter();
          uint64_t v225 = BigString.UTF16View.count.getter();
          outlined release of Locale((uint64_t)&v1055);
          if (v225 < v223) {
            goto LABEL_133;
          }
          unint64_t v926 = v220;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          uint64_t v226 = BigString.UTF16View.index(_:offsetBy:)();
          uint64_t v228 = v227;
          uint64_t v230 = v229;
          uint64_t v232 = v231;
          outlined release of Locale((uint64_t)&v1056);
          if (v219 >> 14)
          {
            BigString.utf8.getter();
            uint64_t v922 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v923 = v233;
            uint64_t v920 = v235;
            uint64_t v921 = v234;
            outlined release of Locale((uint64_t)&v1057);
          }
          else
          {
            uint64_t v920 = v232;
            uint64_t v921 = v230;
            uint64_t v922 = v226;
            uint64_t v923 = v228;
          }
          uint64_t v173 = (uint64_t)v945;
          outlined release of Locale((uint64_t)v1345);
          id v174 = v942;
        }
        else
        {
          uint64_t v925 = v215;
          unint64_t v926 = v220;
          uint64_t v236 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
          uint64_t v238 = v237;
          uint64_t v240 = v239;
          uint64_t v241 = v170;
          unint64_t v242 = v176;
          id v243 = v174;
          uint64_t v245 = v244;
          BigString.endIndex.getter();
          uint64_t v922 = v236;
          uint64_t v923 = v238;
          uint64_t v920 = v245;
          uint64_t v921 = v240;
          id v174 = v243;
          unint64_t v176 = v242;
          id v170 = v241;
          char v246 = static BigString.Index.< infix(_:_:)();
          outlined release of Locale((uint64_t)v1345);
          if (v246) {
            goto LABEL_134;
          }
          long long v215 = v925;
        }
        unsigned __int16 v247 = v926;
        long long v248 = v935[1];
        v1344[0] = *v935;
        v1344[1] = v248;
        v1344[2] = v935[2];
        int64_t v249 = v926 >> 16;
        if ((v926 & 0xC) == 8)
        {
          long long v250 = v935[1];
          v1368[0] = *v935;
          v1368[1] = v250;
          v1368[2] = v935[2];
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1368, (uint64_t)v1369);
          outlined retain of Locale((uint64_t)v1369);
          uint64_t v224 = v1344;
          BigString.utf16.getter();
          uint64_t v251 = BigString.UTF16View.count.getter();
          outlined release of Locale((uint64_t)&v1058);
          if (v251 < v249)
          {
LABEL_133:
            outlined release of Locale((uint64_t)v224);
            uint64_t v173 = (uint64_t)v945;
LABEL_134:
            swift_release();
            goto LABEL_135;
          }
          uint64_t v252 = v247 >> 14;
          BigString.utf16.getter();
          BigString.startIndex.getter();
          uint64_t v253 = BigString.UTF16View.index(_:offsetBy:)();
          uint64_t v255 = v254;
          uint64_t v257 = v256;
          long long v259 = v258;
          outlined release of Locale((uint64_t)&v1059);
          uint64_t v925 = v215;
          if (v252)
          {
            BigString.utf8.getter();
            unint64_t v926 = BigString.UTF8View.index(_:offsetBy:)();
            uint64_t v910 = v261;
            uint64_t v911 = v260;
            uint64_t v263 = v262;
            outlined release of Locale((uint64_t)&v1060);
          }
          else
          {
            uint64_t v910 = v259;
            uint64_t v911 = v255;
            unint64_t v926 = v253;
            uint64_t v263 = v257;
          }
          outlined release of Locale((uint64_t)v1344);
        }
        else
        {
          uint64_t v925 = v215;
          long long v264 = v935[1];
          v1370[0] = *v935;
          v1370[1] = v264;
          v1370[2] = v935[2];
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1370, (uint64_t)v1371);
          outlined retain of Locale((uint64_t)v1371);
          uint64_t v265 = BigString.Index.init(_utf8Offset:utf16TrailingSurrogate:)();
          uint64_t v267 = v266;
          uint64_t v269 = v268;
          uint64_t v271 = v270;
          BigString.endIndex.getter();
          unint64_t v926 = v265;
          uint64_t v910 = v271;
          uint64_t v911 = v267;
          uint64_t v263 = v269;
          char v272 = static BigString.Index.< infix(_:_:)();
          outlined release of Locale((uint64_t)v1344);
          if (v272) {
            goto LABEL_134;
          }
        }
        long long v273 = *v935;
        long long v274 = v935[1];
        long long v1343 = v935[2];
        v1342[1] = v274;
        v1342[0] = v273;
        long long v275 = *v935;
        long long v276 = v935[1];
        v1372[2] = v1343;
        v1372[1] = v276;
        v1372[0] = v275;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1372, (uint64_t)v1373);
        outlined retain of Locale((uint64_t)v1373);
        BigString.startIndex.getter();
        outlined release of Locale((uint64_t)v1342);
        char v277 = static BigString.Index.< infix(_:_:)();
        unint64_t v176 = (unint64_t)v946;
        id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
        uint64_t v173 = (uint64_t)v945;
        if (v277) {
          goto LABEL_134;
        }
        long long v278 = *v935;
        long long v279 = v935[1];
        long long v1341 = v935[2];
        v1340[1] = v279;
        v1340[0] = v278;
        long long v280 = *v935;
        long long v281 = v935[1];
        v1374[2] = v1341;
        v1374[1] = v281;
        v1374[0] = v280;
        outlined init with take of any PredicateExpression<Self.Output == B1>(v1374, (uint64_t)v1375);
        outlined retain of Locale((uint64_t)v1375);
        BigString.endIndex.getter();
        outlined release of Locale((uint64_t)v1340);
        uint64_t v173 = (uint64_t)v945;
        id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
        unint64_t v176 = (unint64_t)v946;
        unint64_t v282 = v926;
        uint64_t v114 = v910;
        uint64_t v116 = v911;
        char v283 = static BigString.Index.< infix(_:_:)();
        swift_release();
        if (v283)
        {
LABEL_135:
          id v175 = v950;
          uint64_t v171 = v953;
          uint64_t v172 = v954;
          uint64_t v116 = v955;
        }
        else
        {
          long long v284 = v935;
          long long v285 = v935[1];
          v1339[0] = *v935;
          v1339[1] = v285;
          v1339[2] = v935[2];
          swift_retain();
          outlined retain of Locale((uint64_t)v1339);
          uint64_t v286 = BigString.startIndex.getter();
          uint64_t v900 = v287;
          uint64_t v901 = v286;
          v898 = v289;
          uint64_t v899 = v288;
          outlined release of Locale((uint64_t)v1339);
          long long v290 = *v284;
          long long v291 = v284[1];
          long long v1338 = v284[2];
          v1337[1] = v291;
          v1337[0] = v290;
          long long v292 = *v284;
          long long v293 = v284[1];
          v1376[2] = v1338;
          v1376[1] = v293;
          v1376[0] = v292;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1376, (uint64_t)v1377);
          outlined retain of Locale((uint64_t)v1377);
          uint64_t v294 = BigString.endIndex.getter();
          unint64_t v926 = v282;
          uint64_t v296 = v295;
          uint64_t v298 = v297;
          uint64_t v300 = v299;
          outlined release of Locale((uint64_t)v1337);
          uint64_t v1326 = v901;
          uint64_t v1327 = v900;
          uint64_t v1328 = v899;
          long long v1329 = v898;
          uint64_t v1330 = v294;
          uint64_t v1331 = v296;
          uint64_t v1332 = v298;
          uint64_t v1333 = v300;
          long long v301 = *v284;
          long long v302 = v284[1];
          long long v1336 = v284[2];
          long long v1335 = v302;
          long long v1334 = v301;
          swift_retain();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1061);
          BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v900 = v304;
          uint64_t v901 = v303;
          uint64_t v899 = v305;
          BigSubstring.UnicodeScalarView.endIndex.getter();
          id v31 = v306;
          outlined release of Locale((uint64_t)&v1062);
          swift_release();
          uint64_t v1238 = v922;
          uint64_t v1239 = v923;
          uint64_t v1240 = v921;
          uint64_t v1241 = v920;
          unint64_t v1242 = v926;
          uint64_t v1243 = v116;
          uint64_t v1244 = v263;
          uint64_t v1245 = v114;
          if (static BigString.Index.< infix(_:_:)())
          {
            __break(1u);
LABEL_304:
            __break(1u);
LABEL_305:
            __break(1u);
LABEL_306:
            __break(1u);
            goto LABEL_307;
          }
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_304;
          }
          long long v307 = v935[1];
          v1325[3] = *v935;
          v1325[4] = v307;
          v1325[5] = v935[2];
          uint64_t v308 = v944;
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1063);
          uint64_t v309 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v311 = v310;
          uint64_t v313 = v312;
          uint64_t v315 = v314;
          uint64_t v316 = BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v318 = v317;
          uint64_t v320 = v319;
          uint64_t v322 = v321;
          outlined release of Locale((uint64_t)&v1064);
          swift_release_n();
          uint64_t v1283 = v309;
          uint64_t v1284 = v311;
          uint64_t v1285 = v313;
          uint64_t v1286 = v315;
          uint64_t v1287 = v316;
          uint64_t v1288 = v318;
          uint64_t v1289 = v320;
          uint64_t v1290 = v322;
          uint64_t v1291 = v308;
          uint64_t v1292 = v309;
          uint64_t v1293 = v311;
          uint64_t v1294 = v313;
          uint64_t v1295 = v315;
          uint64_t v1296 = v316;
          uint64_t v1297 = v318;
          uint64_t v1298 = v320;
          uint64_t v1299 = v322;
          uint64_t v1300 = 0;
          uint64_t v323 = v957;
          long long v324 = v957[2];
          v1325[0] = v957[1];
          v1325[1] = v324;
          v1325[2] = v957[3];
          swift_retain();
          outlined retain of Locale((uint64_t)v1325);
          uint64_t v325 = BigString.startIndex.getter();
          uint64_t v327 = v326;
          uint64_t v329 = v328;
          uint64_t v331 = v330;
          outlined release of Locale((uint64_t)v1325);
          long long v332 = v323[1];
          long long v333 = v323[2];
          long long v1324 = v323[3];
          v1323[1] = v333;
          v1323[0] = v332;
          long long v334 = v323[1];
          long long v335 = v323[2];
          v1378[2] = v1324;
          v1378[1] = v335;
          v1378[0] = v334;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1378, (uint64_t)v1379);
          outlined retain of Locale((uint64_t)v1379);
          uint64_t v336 = BigString.endIndex.getter();
          uint64_t v338 = v337;
          uint64_t v340 = v339;
          uint64_t v116 = v341;
          outlined release of Locale((uint64_t)v1323);
          uint64_t v1312 = v325;
          uint64_t v1313 = v327;
          uint64_t v1314 = v329;
          uint64_t v1315 = v331;
          uint64_t v1316 = v336;
          uint64_t v1317 = v338;
          uint64_t v1318 = v340;
          uint64_t v1319 = v116;
          long long v342 = v323[2];
          long long v1320 = v323[1];
          long long v1321 = v342;
          long long v1322 = v323[3];
          swift_retain();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1065);
          unint64_t v926 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v910 = v344;
          uint64_t v911 = v343;
          uint64_t v901 = v345;
          BigSubstring.UnicodeScalarView.endIndex.getter();
          LODWORD(v116) = v346;
          outlined release of Locale((uint64_t)&v1066);
          swift_release();
          uint64_t v1301 = (uint64_t)v949;
          uint64_t v1302 = v948;
          id v1303 = v947;
          uint64_t v114 = v930;
          uint64_t v1304 = v931;
          long long v1305 = v925;
          v1306 = v930;
          id v31 = (id)v928;
          uint64_t v1307 = v929;
          uint64_t v1308 = v928;
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_305;
          }
          if (static BigString.Index.< infix(_:_:)()) {
            goto LABEL_306;
          }
          long long v347 = v323[2];
          long long v1309 = v323[1];
          long long v1310 = v347;
          long long v1311 = v323[3];
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1067);
          uint64_t v348 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v350 = v349;
          uint64_t v352 = v351;
          uint64_t v354 = v353;
          uint64_t v355 = BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v357 = v356;
          uint64_t v359 = v358;
          uint64_t v361 = v360;
          outlined release of Locale((uint64_t)&v1068);
          swift_release_n();
          *(void *)&long long v1266 = v348;
          *((void *)&v1266 + 1) = v350;
          uint64_t v1267 = v352;
          uint64_t v1268 = v354;
          uint64_t v1269 = v355;
          uint64_t v1270 = v357;
          uint64_t v1271 = v359;
          uint64_t v1272 = v361;
          uint64_t v1273 = v323;
          uint64_t v1274 = v348;
          uint64_t v1275 = v350;
          uint64_t v1276 = v352;
          uint64_t v1277 = v354;
          uint64_t v1278 = v355;
          uint64_t v1279 = v357;
          uint64_t v1280 = v359;
          uint64_t v1281 = v361;
          uint64_t v1282 = 0;
          LOBYTE(v355) = specialized Sequence<>.elementsEqual<A>(_:)(&v1266);
          swift_release();
          swift_release();
          if ((v355 & 1) == 0)
          {
            unint64_t v176 = (unint64_t)v946;
            id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
            uint64_t v173 = (uint64_t)v945;
            id v174 = v942;
            goto LABEL_135;
          }
          uint64_t v362 = v935;
          long long v363 = v935[1];
          v1265[0] = *v935;
          v1265[1] = v363;
          v1265[2] = v935[2];
          uint64_t v364 = v944;
          swift_retain();
          outlined retain of Locale((uint64_t)v1265);
          BigString.startIndex.getter();
          outlined release of Locale((uint64_t)v1265);
          long long v365 = *v362;
          long long v366 = v362[1];
          long long v1264 = v362[2];
          v1263[1] = v366;
          v1263[0] = v365;
          long long v367 = *v362;
          long long v368 = v362[1];
          v1380[2] = v1264;
          v1380[1] = v368;
          v1380[0] = v367;
          outlined init with take of any PredicateExpression<Self.Output == B1>(v1380, (uint64_t)v1381);
          outlined retain of Locale((uint64_t)v1381);
          BigString.endIndex.getter();
          outlined release of Locale((uint64_t)v1263);
          swift_release();
          long long v369 = v362[1];
          long long v1260 = *v362;
          long long v1261 = v369;
          long long v1262 = v362[2];
          swift_retain_n();
          BigString.unicodeScalars.getter();
          BigString.UnicodeScalarView.subscript.getter();
          outlined release of Locale((uint64_t)&v1069);
          uint64_t v370 = BigSubstring.UnicodeScalarView.startIndex.getter();
          uint64_t v372 = v371;
          uint64_t v374 = v373;
          uint64_t v376 = v375;
          uint64_t v377 = BigSubstring.UnicodeScalarView.endIndex.getter();
          uint64_t v379 = v378;
          uint64_t v381 = v380;
          uint64_t v383 = v382;
          outlined release of Locale((uint64_t)&v1070);
          swift_release();
          uint64_t v1252 = v370;
          uint64_t v1253 = v372;
          uint64_t v1254 = v374;
          uint64_t v1255 = v376;
          uint64_t v1256 = v377;
          uint64_t v1257 = v379;
          uint64_t v1258 = v381;
          uint64_t v1259 = v383;
          AttributedString.Runs.init(_:in:)(v364, v1021);
          long long v384 = v1021[0];
          long long v385 = v1021[1];
          long long v386 = v1021[2];
          long long v387 = v1021[3];
          uint64_t v388 = *(void *)&v1021[4];
          uint64_t v389 = v904;
          uint64_t v390 = v905;
          long long v391 = *((_OWORD *)v905 + 5);
          *((_OWORD *)v904 + 4) = *((_OWORD *)v905 + 4);
          v389[5] = v391;
          long long v392 = v390[7];
          v389[6] = v390[6];
          v389[7] = v392;
          long long v393 = v390[1];
          *uint64_t v389 = *v390;
          v389[1] = v393;
          long long v394 = v390[3];
          v389[2] = v390[2];
          v389[3] = v394;
          v1022[0] = v384;
          v1022[1] = v385;
          v1022[2] = v386;
          v1022[3] = v387;
          *(void *)&v1022[4] = v388;
          *((void *)&v1022[12] + 1) = *((void *)&v384 + 1);
          v1022[13] = v385;
          v1022[14] = v386;
          v1022[15] = v387;
          *(void *)&v1022[16] = v388;
          specialized IndexingIterator.next()((uint64_t)v1021);
          uint64_t v901 = *(void *)&v1021[0];
          if (*(void *)&v1021[0])
          {
            uint64_t v900 = (void *)*((void *)&v1021[0] + 1);
            uint64_t v396 = (void *)*((void *)&v1021[1] + 1);
            uint64_t v395 = *(void *)&v1021[1];
            unint64_t v398 = *((void *)&v1021[2] + 1);
            uint64_t v397 = *(void *)&v1021[2];
            uint64_t v400 = *((void *)&v1021[3] + 1);
            uint64_t v399 = *(void *)&v1021[3];
            uint64_t v401 = *(void *)&v1021[4];
            long long v402 = (_OWORD *)v931;
            uint64_t v403 = (uint64_t)v947;
            uint64_t v404 = (uint64_t)v948;
            uint64_t v405 = (uint64_t)v949;
            uint64_t v406 = (void *)*((void *)&v1021[4] + 1);
            uint64_t v407 = *(void *)&v1021[5];
            int v408 = v908;
            uint64_t v409 = v935;
            while (1)
            {
              LODWORD(v885) = v903 | v408;
              uint64_t v929 = v403;
              v930 = v402;
              uint64_t v928 = v404;
              int v908 = v408;
              while (1)
              {
                uint64_t v895 = v399;
                uint64_t v896 = v395;
                uint64_t v925 = v396;
                unint64_t v926 = v398;
                uint64_t v910 = (_OWORD *)v405;
                uint64_t v911 = v397;
                uint64_t v889 = v407;
                id v892 = v406;
                uint64_t v893 = v401;
                uint64_t v894 = v400;
                long long v410 = v409[1];
                v1132[0] = *v409;
                v1132[1] = v410;
                v1132[2] = v409[2];
                long long v411 = v409;
                swift_retain();
                outlined retain of Locale((uint64_t)v1132);
                uint64_t v412 = BigString.startIndex.getter();
                uint64_t v414 = v413;
                uint64_t v416 = v415;
                uint64_t v418 = v417;
                outlined release of Locale((uint64_t)v1132);
                long long v419 = *v411;
                long long v420 = v411[1];
                long long v1131 = v411[2];
                v1130[1] = v420;
                v1130[0] = v419;
                long long v421 = *v411;
                long long v422 = v411[1];
                v1396[2] = v1131;
                v1396[1] = v422;
                v1396[0] = v421;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v1396, (uint64_t)v1397);
                outlined retain of Locale((uint64_t)v1397);
                uint64_t v423 = BigString.endIndex.getter();
                uint64_t v425 = v424;
                uint64_t v427 = v426;
                uint64_t v429 = v428;
                outlined release of Locale((uint64_t)v1130);
                uint64_t v1119 = v412;
                uint64_t v1120 = v414;
                uint64_t v1121 = v416;
                uint64_t v1122 = v418;
                uint64_t v1123 = v423;
                uint64_t v1124 = v425;
                uint64_t v1125 = v427;
                uint64_t v1126 = v429;
                long long v430 = *v411;
                long long v431 = v411[1];
                long long v1129 = v411[2];
                long long v1128 = v431;
                long long v1127 = v430;
                swift_retain();
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)&v1071);
                uint64_t v432 = BigSubstring.UnicodeScalarView.startIndex.getter();
                v898 = v434;
                uint64_t v899 = v433;
                uint64_t v897 = v435;
                BigSubstring.UnicodeScalarView.endIndex.getter();
                outlined release of Locale((uint64_t)&v1072);
                swift_release();
                uint64_t v891 = v432;
                if (static BigString.Index.< infix(_:_:)())
                {
                  __break(1u);
LABEL_309:
                  __break(1u);
LABEL_310:
                  __break(1u);
LABEL_311:
                  __break(1u);
LABEL_312:
                  __break(1u);
LABEL_313:
                  __break(1u);
LABEL_314:
                  __break(1u);
LABEL_315:
                  __break(1u);
LABEL_316:
                  __break(1u);
LABEL_317:
                  __break(1u);
LABEL_318:
                  __break(1u);
LABEL_319:
                  __break(1u);
LABEL_320:
                  __break(1u);
LABEL_321:
                  __break(1u);
LABEL_322:
                  __break(1u);
LABEL_323:
                  __break(1u);
LABEL_324:
                  __break(1u);
LABEL_325:
                  __break(1u);
LABEL_326:
                  __break(1u);
LABEL_327:
                  __break(1u);
LABEL_328:
                  __break(1u);
LABEL_329:
                  __break(1u);
LABEL_330:
                  __break(1u);
LABEL_331:
                  __break(1u);
LABEL_332:
                  __break(1u);
LABEL_333:
                  __break(1u);
LABEL_334:
                  __break(1u);
LABEL_335:
                  __break(1u);
LABEL_336:
                  __break(1u);
LABEL_337:
                  __break(1u);
                }
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_309;
                }
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_310;
                }
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_311;
                }
                long long v436 = v935[1];
                v1118[3] = *v935;
                v1118[4] = v436;
                v1118[5] = v935[2];
                BigString.unicodeScalars.getter();
                uint64_t v890 = BigString.UnicodeScalarView.distance(from:to:)();
                outlined release of Locale((uint64_t)&v1073);
                swift_release();
                uint64_t v437 = v957;
                long long v438 = v957[1];
                long long v439 = v957[2];
                v1118[2] = v957[3];
                v1118[1] = v439;
                v1118[0] = v438;
                swift_retain_n();
                outlined retain of Locale((uint64_t)v1118);
                uint64_t v440 = BigString.startIndex.getter();
                uint64_t v442 = v441;
                uint64_t v444 = v443;
                uint64_t v446 = v445;
                outlined release of Locale((uint64_t)v1118);
                long long v447 = v437[1];
                long long v448 = v437[2];
                long long v1117 = v437[3];
                v1116[1] = v448;
                v1116[0] = v447;
                long long v449 = v437[1];
                long long v450 = v437[2];
                v1398[2] = v1117;
                v1398[1] = v450;
                v1398[0] = v449;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v1398, (uint64_t)v1399);
                outlined retain of Locale((uint64_t)v1399);
                uint64_t v451 = BigString.endIndex.getter();
                uint64_t v453 = v452;
                uint64_t v455 = v454;
                uint64_t v457 = v456;
                outlined release of Locale((uint64_t)v1116);
                uint64_t v1105 = v440;
                uint64_t v1106 = v442;
                uint64_t v1107 = v444;
                uint64_t v1108 = v446;
                uint64_t v1109 = v451;
                uint64_t v1110 = v453;
                uint64_t v1111 = v455;
                uint64_t v1112 = v457;
                long long v458 = v437[2];
                long long v1113 = v437[1];
                long long v1114 = v458;
                long long v1115 = v437[3];
                swift_retain();
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)&v1074);
                uint64_t v459 = BigSubstring.UnicodeScalarView.startIndex.getter();
                v898 = v460;
                uint64_t v899 = v459;
                uint64_t v897 = v461;
                uint64_t v891 = v462;
                uint64_t v463 = BigSubstring.UnicodeScalarView.endIndex.getter();
                uint64_t v465 = v464;
                uint64_t v467 = v466;
                outlined release of Locale((uint64_t)&v1075);
                swift_release();
                uint64_t v469 = v928;
                uint64_t v468 = v929;
                long long v470 = v930;
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_312;
                }
                id v887 = v465;
                uint64_t v888 = v463;
                uint64_t v886 = v467;
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_313;
                }
                long long v471 = v437[2];
                v1104[3] = v437[1];
                v1104[4] = v471;
                v1104[5] = v437[3];
                BigString.unicodeScalars.getter();
                uint64_t v928 = v469;
                uint64_t v929 = v468;
                v930 = v470;
                uint64_t v472 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                uint64_t v474 = v473;
                uint64_t v476 = v475;
                uint64_t v478 = v477;
                outlined release of Locale((uint64_t)&v1076);
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_314;
                }
                char v479 = static BigString.Index.< infix(_:_:)();
                swift_release_n();
                if (v479) {
                  goto LABEL_315;
                }
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_316;
                }
                *(void *)&long long v996 = v901;
                *((void *)&v996 + 1) = v900;
                LOBYTE(v973) = 1;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v890 = v478;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  long long v481 = v437[2];
                  v1104[0] = v437[1];
                  v1104[1] = v481;
                  v1104[2] = v437[3];
                  uint64_t v482 = v474;
                  uint64_t v483 = *((void *)v437 + 8);
                  uint64_t v484 = *((void *)v437 + 9);
                  uint64_t v485 = v476;
                  uint64_t v486 = *((void *)v437 + 10);
                  uint64_t v487 = *((void *)v437 + 11);
                  type metadata accessor for AttributedString.Guts();
                  swift_allocObject();
                  outlined retain of Locale((uint64_t)v1104);
                  swift_unknownObjectRetain();
                  uint64_t v488 = v484;
                  uint64_t v474 = v482;
                  uint64_t v489 = v486;
                  uint64_t v476 = v485;
                  uint64_t v490 = v487;
                  uint64_t v478 = v890;
                  uint64_t v491 = AttributedString.Guts.init(string:runs:)(v1104, v483, v488, v489, v490);
                  v957 = (_OWORD *)v491;
                  swift_release();
                  uint64_t v437 = (_OWORD *)v491;
                }
                long long v492 = v437[2];
                v1103[0] = v437[1];
                v1103[1] = v492;
                v1103[2] = v437[3];
                swift_retain();
                outlined retain of Locale((uint64_t)v1103);
                BigString.startIndex.getter();
                outlined release of Locale((uint64_t)v1103);
                long long v493 = v437[1];
                long long v494 = v437[2];
                long long v1102 = v437[3];
                v1101[1] = v494;
                v1101[0] = v493;
                long long v495 = v437[1];
                v1400[1] = v437[2];
                v1400[2] = v1102;
                v1400[0] = v495;
                outlined init with take of any PredicateExpression<Self.Output == B1>(v1400, (uint64_t)v1401);
                outlined retain of Locale((uint64_t)v1401);
                BigString.endIndex.getter();
                outlined release of Locale((uint64_t)v1101);
                swift_release();
                v1097[14] = v910;
                v1097[15] = v928;
                v1097[16] = v929;
                v1097[17] = v930;
                uint64_t v910 = (_OWORD *)v472;
                v1097[18] = v472;
                uint64_t v928 = v474;
                uint64_t v929 = v476;
                v1097[19] = v474;
                v1097[20] = v476;
                v1097[21] = v478;
                long long v496 = v437[2];
                long long v1098 = v437[1];
                long long v1099 = v496;
                long long v1100 = v437[3];
                swift_retain_n();
                BigString.unicodeScalars.getter();
                BigString.UnicodeScalarView.subscript.getter();
                outlined release of Locale((uint64_t)&v1077);
                uint64_t v497 = BigSubstring.UnicodeScalarView.startIndex.getter();
                uint64_t v499 = v498;
                uint64_t v501 = v500;
                uint64_t v503 = v502;
                uint64_t v504 = BigSubstring.UnicodeScalarView.endIndex.getter();
                uint64_t v506 = v505;
                uint64_t v508 = v507;
                uint64_t v510 = v509;
                outlined release of Locale((uint64_t)v1078);
                swift_release();
                *(void *)&v1021[0] = v437;
                *((void *)&v1021[0] + 1) = v497;
                *(void *)&v1021[1] = v499;
                *((void *)&v1021[1] + 1) = v501;
                *(void *)&v1021[2] = v503;
                *((void *)&v1021[2] + 1) = v504;
                *(void *)&v1021[3] = v506;
                *((void *)&v1021[3] + 1) = v508;
                *(void *)&v1021[4] = v510;
                if (one-time initialization token for currentIdentity != -1) {
                  swift_once();
                }
                uint64_t v511 = (uint64_t *)(static AttributedString.currentIdentity + 16);
                uint64_t v512 = (os_unfair_lock_s *)(static AttributedString.currentIdentity + 24);
                swift_retain();
                os_unfair_lock_lock(v512);
                id v513 = v909;
                closure #1 in static AttributedString._nextModifyIdentity.getter(v511, (uint64_t *)&v1011);
                os_unfair_lock_unlock(v512);
                swift_release();
                uint64_t v514 = (uint64_t)v1011;
                *((void *)&v1021[4] + 1) = v1011;
                BigString.init()();
                long long v1011 = 0;
                MEMORY[0x185309530](&v1011, 8);
                uint64_t v515 = (uint64_t)v1011;
                type metadata accessor for AttributedString.Guts();
                uint64_t v516 = swift_allocObject();
                char v517 = BigString.isEmpty.getter();
                id v174 = v942;
                if ((v517 & 1) == 0) {
                  goto LABEL_317;
                }
                long long v518 = v1078[8];
                *(_OWORD *)(v516 + 16) = v1078[7];
                *(_OWORD *)(v516 + 32) = v518;
                *(_OWORD *)(v516 + 48) = v1078[9];
                *(void *)(v516 + 64) = 0;
                *(void *)(v516 + 72) = 0;
                *(void *)(v516 + 80) = 0;
                *(void *)(v516 + 88) = v515;
                swift_release();
                AttributedSubstring.mergeAttributes(_:mergePolicy:)((uint64_t *)&v996, (char *)&v973);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*((void *)&v1021[4] + 1) != v514) {
                  goto LABEL_339;
                }
                v957 = *(_OWORD **)&v1021[0];
                swift_release();
                uint64_t v116 = v955;
                uint64_t v519 = (uint64_t)v892;
                id v909 = v513;
                if ((v885 & 1) == 0) {
                  break;
                }
                uint64_t v877 = (uint64_t)v892;
                uint64_t v878 = v889;
                uint64_t v876 = v893;
                outlined consume of AttributedString.Runs.Run?(v901);
                uint64_t v173 = (uint64_t)v945;
LABEL_171:
                specialized IndexingIterator.next()((uint64_t)v1021);
                uint64_t v900 = (void *)*((void *)&v1021[0] + 1);
                uint64_t v901 = *(void *)&v1021[0];
                uint64_t v396 = (void *)*((void *)&v1021[1] + 1);
                uint64_t v395 = *(void *)&v1021[1];
                unint64_t v398 = *((void *)&v1021[2] + 1);
                uint64_t v397 = *(void *)&v1021[2];
                uint64_t v400 = *((void *)&v1021[3] + 1);
                uint64_t v399 = *(void *)&v1021[3];
                v930 = (_OWORD *)v890;
                uint64_t v406 = (void *)*((void *)&v1021[4] + 1);
                uint64_t v401 = *(void *)&v1021[4];
                uint64_t v405 = (uint64_t)v910;
                uint64_t v407 = *(void *)&v1021[5];
                uint64_t v409 = v935;
                if (!*(void *)&v1021[0]) {
                  goto LABEL_192;
                }
              }
              uint64_t v520 = v901;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              specialized AttributedString._AttributeStorage.subscript.getter(v520, (uint64_t)v1021);
              uint64_t v877 = v519;
              uint64_t v878 = v889;
              uint64_t v876 = v893;
              outlined consume of AttributedString.Runs.Run?(v520);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v521 = *((void *)&v1021[0] + 1);
              outlined consume of AttributedString.AttributeRunBoundaries?(*(uint64_t *)&v1021[0], *((uint64_t *)&v1021[0] + 1));
              uint64_t v173 = (uint64_t)v945;
              if (v521 == 1) {
                goto LABEL_171;
              }
              specialized IndexingIterator.next()((uint64_t)v1021);
              uint64_t v900 = (void *)*((void *)&v1021[0] + 1);
              uint64_t v901 = *(void *)&v1021[0];
              uint64_t v396 = (void *)*((void *)&v1021[1] + 1);
              uint64_t v395 = *(void *)&v1021[1];
              unint64_t v398 = *((void *)&v1021[2] + 1);
              uint64_t v397 = *(void *)&v1021[2];
              uint64_t v400 = *((void *)&v1021[3] + 1);
              uint64_t v399 = *(void *)&v1021[3];
              uint64_t v406 = (void *)*((void *)&v1021[4] + 1);
              uint64_t v401 = *(void *)&v1021[4];
              int v408 = 1;
              uint64_t v407 = *(void *)&v1021[5];
              uint64_t v409 = v935;
              uint64_t v405 = (uint64_t)v910;
              uint64_t v404 = v928;
              uint64_t v403 = v929;
              long long v402 = (_OWORD *)v890;
              if (!*(void *)&v1021[0])
              {
                memcpy(v1021, v1022, 0x108uLL);
                outlined release of AttributedString.Runs((uint64_t)v1021);
                int v908 = 1;
                goto LABEL_193;
              }
            }
          }
          uint64_t v173 = (uint64_t)v945;
          id v174 = v942;
          uint64_t v116 = v955;
LABEL_192:
          memcpy(v1021, v1022, 0x108uLL);
          outlined release of AttributedString.Runs((uint64_t)v1021);
          unint64_t v176 = (unint64_t)v946;
          id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
          uint64_t v171 = v953;
          uint64_t v172 = v954;
          if (v917)
          {
LABEL_193:
            long long v522 = v935;
            long long v523 = v935[1];
            v1251[0] = *v935;
            v1251[1] = v523;
            v1251[2] = v935[2];
            uint64_t v524 = v944;
            swift_retain();
            outlined retain of Locale((uint64_t)v1251);
            BigString.startIndex.getter();
            outlined release of Locale((uint64_t)v1251);
            long long v525 = *v522;
            long long v526 = v522[1];
            long long v1250 = v522[2];
            v1249[1] = v526;
            v1249[0] = v525;
            long long v527 = *v522;
            long long v528 = v522[1];
            v1382[2] = v1250;
            v1382[1] = v528;
            v1382[0] = v527;
            outlined init with take of any PredicateExpression<Self.Output == B1>(v1382, (uint64_t)v1383);
            outlined retain of Locale((uint64_t)v1383);
            BigString.endIndex.getter();
            outlined release of Locale((uint64_t)v1249);
            swift_release();
            long long v529 = v522[1];
            long long v1246 = *v522;
            long long v1247 = v529;
            long long v1248 = v522[2];
            swift_retain_n();
            BigString.unicodeScalars.getter();
            BigString.UnicodeScalarView.subscript.getter();
            outlined release of Locale((uint64_t)&v1079);
            uint64_t v530 = BigSubstring.UnicodeScalarView.startIndex.getter();
            uint64_t v532 = v531;
            uint64_t v534 = v533;
            uint64_t v536 = v535;
            uint64_t v537 = BigSubstring.UnicodeScalarView.endIndex.getter();
            uint64_t v539 = v538;
            uint64_t v541 = v540;
            uint64_t v543 = v542;
            outlined release of Locale((uint64_t)&v1080);
            swift_release();
            uint64_t v1230 = v530;
            uint64_t v1231 = v532;
            uint64_t v1232 = v534;
            uint64_t v1233 = v536;
            uint64_t v1234 = v537;
            uint64_t v1235 = v539;
            uint64_t v1236 = v541;
            uint64_t v1237 = v543;
            AttributedString.Runs.init(_:in:)(v524, &v1011);
            long long v544 = v902[5];
            long long v1017 = v902[4];
            long long v1018 = v544;
            long long v545 = v902[7];
            long long v1019 = v902[6];
            long long v1020 = v545;
            long long v546 = v902[1];
            long long v1013 = *v902;
            long long v1014 = v546;
            long long v547 = v902[3];
            long long v1015 = v902[2];
            long long v1016 = v547;
            uint64_t v891 = (uint64_t)v1011;
            uint64_t v548 = (void *)v1012[16];
            uint64_t v549 = v1012[17];
            uint64_t v550 = v1012[18];
            uint64_t v551 = v1012[19];
            uint64_t v552 = (void *)v1012[23];
            uint64_t v553 = v1012[20];
            id v554 = (void *)v1012[21];
            uint64_t v900 = (void *)v1012[22];
            char v555 = static BigString.Index.== infix(_:_:)();
            uint64_t v889 = v550;
            uint64_t v890 = v549;
            uint64_t v901 = v551;
            id v892 = v548;
            if ((v555 & 1) == 0)
            {
              unint64_t v562 = (unint64_t)v548;
              long long v563 = (_OWORD *)v549;
              uint64_t v564 = v550;
              uint64_t v565 = v551;
              unint64_t v176 = (unint64_t)v946;
              id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
              char v556 = v900;
              id v887 = v554;
              uint64_t v888 = v553;
              uint64_t v925 = v552;
              while (1)
              {
                uint64_t v929 = v564;
                v930 = v563;
                uint64_t v928 = v565;
                unint64_t v926 = v562;
                long long v578 = v1017;
                long long v579 = v1018;
                long long v580 = v1018;
                uint64_t v581 = v906;
                *((_OWORD *)v906 + 4) = v1017;
                *((_OWORD *)v581 + 5) = v579;
                long long v582 = v1019;
                long long v583 = v1020;
                long long v584 = v1020;
                *((_OWORD *)v581 + 6) = v1019;
                *((_OWORD *)v581 + 7) = v583;
                long long v585 = v1013;
                long long v586 = v1014;
                long long v587 = v1014;
                *(_OWORD *)uint64_t v581 = v1013;
                *((_OWORD *)v581 + 1) = v586;
                long long v588 = v1015;
                long long v589 = v1016;
                long long v590 = v1016;
                *((_OWORD *)v581 + 2) = v1015;
                *((_OWORD *)v581 + 3) = v589;
                uint64_t v591 = v907;
                *((_OWORD *)v907 + 4) = v578;
                *((_OWORD *)v591 + 5) = v580;
                *((_OWORD *)v591 + 6) = v582;
                *((_OWORD *)v591 + 7) = v584;
                *(_OWORD *)uint64_t v591 = v585;
                *((_OWORD *)v591 + 1) = v587;
                *((_OWORD *)v591 + 2) = v588;
                *((_OWORD *)v591 + 3) = v590;
                uint64_t v593 = v891;
                id v592 = v892;
                uint64_t v973 = v891;
                id v983 = v892;
                uint64_t v595 = v889;
                uint64_t v594 = v890;
                uint64_t v984 = v890;
                uint64_t v985 = v889;
                uint64_t v986 = v901;
                uint64_t v987 = v553;
                long long v988 = v554;
                v989 = v556;
                v990 = v925;
                unint64_t v969 = v562;
                uint64_t v970 = v563;
                uint64_t v971 = v564;
                uint64_t v972 = v565;
                AttributedString.Runs.subscript.getter(&v991);
                v898 = v992;
                uint64_t v899 = v991;
                uint64_t v897 = v995;
                long long v596 = v1018;
                long long v597 = v934;
                *((_OWORD *)v934 + 4) = v1017;
                v597[5] = v596;
                long long v598 = v1020;
                v597[6] = v1019;
                v597[7] = v598;
                long long v599 = v1014;
                *long long v597 = v1013;
                v597[1] = v599;
                long long v600 = v1016;
                v597[2] = v1015;
                v597[3] = v600;
                *(void *)&long long v996 = v593;
                id v1001 = v592;
                uint64_t v1002 = v594;
                uint64_t v1003 = v595;
                uint64_t v1004 = v901;
                uint64_t v1005 = v553;
                v1006 = v554;
                id v1007 = v900;
                id v1008 = v925;
                long long v1009 = &outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
                uint64_t v1010 = MEMORY[0x1E4FBC860];
                uint64_t v958 = v593;
                id v961 = v592;
                uint64_t v962 = v594;
                uint64_t v963 = v595;
                uint64_t v964 = v901;
                uint64_t v965 = v553;
                v966 = v554;
                v967 = v900;
                v968 = v925;
                uint64_t v991 = v926;
                v992 = v930;
                uint64_t v993 = v929;
                uint64_t v994 = v928;
                swift_retain();
                outlined retain of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>((uint64_t)&v996);
                AttributedString.Runs._slicedRunBoundary(after:attributeNames:constraints:)(&v991, (uint64_t)&outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:), MEMORY[0x1E4FBC860], &v973);
                swift_release();
                outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v996);
                uint64_t v601 = v973;
                uint64_t v574 = v974;
                uint64_t v575 = v975;
                uint64_t v910 = (_OWORD *)v976;
                if (static BigString.Index.< infix(_:_:)()) {
                  goto LABEL_318;
                }
                uint64_t v602 = specialized AttributedString._AttributeStorage.subscript.getter(v899);
                char v604 = v603;
                swift_release();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v911 = v601;
                if ((v604 & 1) == 0)
                {
                  uint64_t v886 = v602;
                  uint64_t v895 = v575;
                  uint64_t v896 = v574;
                  long long v605 = v935;
                  long long v606 = v935[1];
                  v1229[0] = *v935;
                  v1229[1] = v606;
                  v1229[2] = v935[2];
                  swift_retain();
                  outlined retain of Locale((uint64_t)v1229);
                  uint64_t v607 = BigString.startIndex.getter();
                  uint64_t v609 = v608;
                  uint64_t v611 = v610;
                  uint64_t v613 = v612;
                  outlined release of Locale((uint64_t)v1229);
                  long long v614 = *v605;
                  long long v615 = v605[1];
                  long long v1228 = v605[2];
                  v1227[1] = v615;
                  v1227[0] = v614;
                  long long v616 = *v605;
                  long long v617 = v605[1];
                  v1384[2] = v1228;
                  v1384[1] = v617;
                  v1384[0] = v616;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v1384, (uint64_t)v1385);
                  outlined retain of Locale((uint64_t)v1385);
                  uint64_t v618 = BigString.endIndex.getter();
                  uint64_t v620 = v619;
                  uint64_t v622 = v621;
                  uint64_t v624 = v623;
                  outlined release of Locale((uint64_t)v1227);
                  uint64_t v1216 = v607;
                  uint64_t v1217 = v609;
                  uint64_t v1218 = v611;
                  uint64_t v1219 = v613;
                  uint64_t v1220 = v618;
                  uint64_t v1221 = v620;
                  uint64_t v1222 = v622;
                  uint64_t v1223 = v624;
                  long long v625 = *v605;
                  long long v626 = v605[1];
                  long long v1226 = v605[2];
                  long long v1225 = v626;
                  long long v1224 = v625;
                  swift_retain();
                  BigString.unicodeScalars.getter();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)&v1081);
                  uint64_t v627 = BigSubstring.UnicodeScalarView.startIndex.getter();
                  v898 = v629;
                  uint64_t v899 = v628;
                  uint64_t v897 = v630;
                  BigSubstring.UnicodeScalarView.endIndex.getter();
                  outlined release of Locale((uint64_t)&v1082);
                  swift_release();
                  uint64_t v894 = v627;
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_319;
                  }
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_320;
                  }
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_321;
                  }
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_322;
                  }
                  uint64_t v631 = v935;
                  long long v632 = v935[1];
                  v1215[3] = *v935;
                  v1215[4] = v632;
                  v1215[5] = v935[2];
                  BigString.unicodeScalars.getter();
                  uint64_t v893 = BigString.UnicodeScalarView.distance(from:to:)();
                  outlined release of Locale((uint64_t)&v1083);
                  swift_release();
                  long long v633 = v631[1];
                  v1215[0] = *v631;
                  v1215[1] = v633;
                  v1215[2] = v631[2];
                  swift_retain();
                  outlined retain of Locale((uint64_t)v1215);
                  uint64_t v899 = BigString.startIndex.getter();
                  uint64_t v635 = v634;
                  uint64_t v637 = v636;
                  uint64_t v639 = v638;
                  outlined release of Locale((uint64_t)v1215);
                  long long v640 = *v631;
                  long long v641 = v631[1];
                  long long v1214 = v631[2];
                  v1213[1] = v641;
                  v1213[0] = v640;
                  long long v642 = *v631;
                  long long v643 = v631[1];
                  v1386[2] = v1214;
                  v1386[1] = v643;
                  v1386[0] = v642;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v1386, (uint64_t)v1387);
                  outlined retain of Locale((uint64_t)v1387);
                  uint64_t v644 = BigString.endIndex.getter();
                  uint64_t v646 = v645;
                  uint64_t v648 = v647;
                  uint64_t v650 = v649;
                  outlined release of Locale((uint64_t)v1213);
                  uint64_t v1202 = v899;
                  uint64_t v1203 = v635;
                  uint64_t v1204 = v637;
                  uint64_t v1205 = v639;
                  uint64_t v1206 = v644;
                  uint64_t v1207 = v646;
                  uint64_t v1208 = v648;
                  uint64_t v1209 = v650;
                  long long v651 = *v631;
                  long long v652 = v631[1];
                  long long v1212 = v631[2];
                  long long v1211 = v652;
                  long long v1210 = v651;
                  swift_retain();
                  BigString.unicodeScalars.getter();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)&v1084);
                  uint64_t v653 = BigSubstring.UnicodeScalarView.startIndex.getter();
                  uint64_t v655 = v654;
                  uint64_t v657 = v656;
                  uint64_t v659 = v658;
                  BigSubstring.UnicodeScalarView.endIndex.getter();
                  outlined release of Locale((uint64_t)&v1085);
                  swift_release();
                  v898 = v655;
                  uint64_t v899 = v653;
                  uint64_t v897 = v657;
                  uint64_t v894 = v659;
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_323;
                  }
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_324;
                  }
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_325;
                  }
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_326;
                  }
                  long long v660 = v935[1];
                  v1201[3] = *v935;
                  v1201[4] = v660;
                  v1201[5] = v935[2];
                  BigString.unicodeScalars.getter();
                  uint64_t v884 = BigString.UnicodeScalarView.distance(from:to:)();
                  outlined release of Locale((uint64_t)&v1086);
                  swift_release();
                  long long v661 = v957;
                  long long v662 = v957[1];
                  long long v663 = v957[2];
                  v1201[2] = v957[3];
                  v1201[1] = v663;
                  v1201[0] = v662;
                  swift_retain_n();
                  outlined retain of Locale((uint64_t)v1201);
                  uint64_t v664 = BigString.startIndex.getter();
                  uint64_t v666 = v665;
                  uint64_t v668 = v667;
                  uint64_t v670 = v669;
                  outlined release of Locale((uint64_t)v1201);
                  long long v671 = v661[1];
                  long long v672 = v661[2];
                  long long v1200 = v661[3];
                  v1199[1] = v672;
                  v1199[0] = v671;
                  long long v673 = v661[1];
                  long long v674 = v661[2];
                  v1388[2] = v1200;
                  v1388[1] = v674;
                  v1388[0] = v673;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v1388, (uint64_t)v1389);
                  outlined retain of Locale((uint64_t)v1389);
                  uint64_t v675 = BigString.endIndex.getter();
                  uint64_t v677 = v676;
                  uint64_t v679 = v678;
                  uint64_t v681 = v680;
                  outlined release of Locale((uint64_t)v1199);
                  uint64_t v1188 = v664;
                  uint64_t v1189 = v666;
                  uint64_t v1190 = v668;
                  uint64_t v1191 = v670;
                  uint64_t v1192 = v675;
                  uint64_t v1193 = v677;
                  uint64_t v1194 = v679;
                  uint64_t v1195 = v681;
                  long long v682 = v661[2];
                  long long v1196 = v661[1];
                  long long v1197 = v682;
                  long long v1198 = v661[3];
                  swift_retain();
                  BigString.unicodeScalars.getter();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)&v1087);
                  uint64_t v928 = BigSubstring.UnicodeScalarView.startIndex.getter();
                  unint64_t v926 = v683;
                  v898 = v685;
                  uint64_t v899 = v684;
                  uint64_t v686 = BigSubstring.UnicodeScalarView.endIndex.getter();
                  uint64_t v688 = v687;
                  uint64_t v690 = v689;
                  outlined release of Locale((uint64_t)&v1088);
                  v930 = v661;
                  swift_release();
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_327;
                  }
                  uint64_t v897 = v686;
                  uint64_t v894 = v688;
                  uint64_t v885 = v690;
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_328;
                  }
                  uint64_t v691 = v930;
                  long long v692 = v930 + 1;
                  long long v693 = v930[2];
                  v1187[3] = v930[1];
                  v1187[4] = v693;
                  v1187[5] = v930[3];
                  BigString.unicodeScalars.getter();
                  uint64_t v694 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                  uint64_t v696 = v695;
                  uint64_t v698 = v697;
                  uint64_t v700 = v699;
                  outlined release of Locale((uint64_t)&v1089);
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_329;
                  }
                  uint64_t v928 = v694;
                  char v701 = static BigString.Index.< infix(_:_:)();
                  uint64_t v929 = v696;
                  char v702 = v701;
                  swift_release_n();
                  uint64_t v893 = v700;
                  uint64_t v894 = v698;
                  if (v702) {
                    goto LABEL_330;
                  }
                  long long v703 = v691[2];
                  v1187[0] = *v692;
                  v1187[1] = v703;
                  v1187[2] = v691[3];
                  swift_retain_n();
                  outlined retain of Locale((uint64_t)v1187);
                  uint64_t v704 = BigString.startIndex.getter();
                  uint64_t v706 = v705;
                  uint64_t v708 = v707;
                  uint64_t v710 = v709;
                  outlined release of Locale((uint64_t)v1187);
                  long long v711 = *v692;
                  long long v712 = v692[1];
                  long long v1186 = v692[2];
                  v1185[1] = v712;
                  v1185[0] = v711;
                  long long v713 = *v692;
                  long long v714 = v692[1];
                  v1390[2] = v1186;
                  v1390[1] = v714;
                  v1390[0] = v713;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v1390, (uint64_t)v1391);
                  outlined retain of Locale((uint64_t)v1391);
                  uint64_t v715 = BigString.endIndex.getter();
                  uint64_t v717 = v716;
                  uint64_t v719 = v718;
                  uint64_t v721 = v720;
                  outlined release of Locale((uint64_t)v1185);
                  uint64_t v1174 = v704;
                  uint64_t v1175 = v706;
                  uint64_t v1176 = v708;
                  uint64_t v1177 = v710;
                  uint64_t v1178 = v715;
                  uint64_t v1179 = v717;
                  uint64_t v1180 = v719;
                  uint64_t v1181 = v721;
                  long long v722 = v692[1];
                  long long v1182 = *v692;
                  long long v1183 = v722;
                  long long v1184 = v692[2];
                  swift_retain();
                  BigString.unicodeScalars.getter();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)&v1090);
                  unint64_t v926 = BigSubstring.UnicodeScalarView.startIndex.getter();
                  v898 = v724;
                  uint64_t v899 = v723;
                  uint64_t v897 = v725;
                  uint64_t v726 = BigSubstring.UnicodeScalarView.endIndex.getter();
                  uint64_t v728 = v727;
                  uint64_t v730 = v729;
                  outlined release of Locale((uint64_t)&v1091);
                  swift_release();
                  uint64_t v732 = v893;
                  uint64_t v731 = v894;
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_331;
                  }
                  uint64_t v882 = v726;
                  uint64_t v883 = v728;
                  uint64_t v885 = v730;
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_332;
                  }
                  long long v733 = v692[1];
                  long long v1171 = *v692;
                  long long v1172 = v733;
                  uint64_t v881 = v692;
                  long long v1173 = v692[2];
                  BigString.unicodeScalars.getter();
                  uint64_t v734 = v731;
                  uint64_t v735 = BigString.UnicodeScalarView.index(_:offsetBy:)();
                  uint64_t v737 = v736;
                  unint64_t v739 = v738;
                  uint64_t v741 = v740;
                  outlined release of Locale((uint64_t)&v1092);
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_333;
                  }
                  char v742 = static BigString.Index.< infix(_:_:)();
                  uint64_t v743 = v930;
                  swift_release_n();
                  if (v742) {
                    goto LABEL_334;
                  }
                  unint64_t v926 = v739;
                  uint64_t v745 = v928;
                  uint64_t v744 = v929;
                  uint64_t v746 = v734;
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_335;
                  }
                  v1170[0] = v745;
                  v1170[1] = v744;
                  v1170[2] = v734;
                  v1170[3] = v732;
                  v1170[4] = v735;
                  v1170[5] = v737;
                  _OWORD v1170[6] = v926;
                  v1170[7] = v741;
                  swift_retain();
                  uint64_t v747 = specialized _NSRange.init<A>(_:in:)((uint64_t)v1170, v743);
                  v898 = v748;
                  uint64_t v899 = v747;
                  if (static BigString.Index.< infix(_:_:)()) {
                    goto LABEL_336;
                  }
                  long long v749 = v881;
                  long long v750 = v881[1];
                  v1169[0] = *v881;
                  v1169[1] = v750;
                  v1169[2] = v881[2];
                  swift_retain();
                  outlined retain of Locale((uint64_t)v1169);
                  BigString.startIndex.getter();
                  outlined release of Locale((uint64_t)v1169);
                  long long v751 = *v749;
                  long long v752 = v749[1];
                  long long v1168 = v749[2];
                  v1167[1] = v752;
                  v1167[0] = v751;
                  long long v753 = *v749;
                  long long v754 = v749[1];
                  v1392[2] = v1168;
                  v1392[1] = v754;
                  v1392[0] = v753;
                  outlined init with take of any PredicateExpression<Self.Output == B1>(v1392, (uint64_t)v1393);
                  outlined retain of Locale((uint64_t)v1393);
                  BigString.endIndex.getter();
                  outlined release of Locale((uint64_t)v1167);
                  swift_release();
                  uint64_t v1142 = v745;
                  uint64_t v1143 = v929;
                  uint64_t v1144 = v746;
                  uint64_t v1145 = v732;
                  uint64_t v884 = v735;
                  uint64_t v885 = v737;
                  uint64_t v1146 = v735;
                  uint64_t v1147 = v737;
                  unint64_t v1148 = v926;
                  uint64_t v897 = v741;
                  uint64_t v1149 = v741;
                  long long v755 = v749[1];
                  long long v1164 = *v749;
                  long long v1165 = v755;
                  long long v1166 = v749[2];
                  swift_retain_n();
                  BigString.unicodeScalars.getter();
                  BigString.UnicodeScalarView.subscript.getter();
                  outlined release of Locale((uint64_t)&v1093);
                  uint64_t v756 = BigSubstring.UnicodeScalarView.startIndex.getter();
                  uint64_t v758 = v757;
                  uint64_t v760 = v759;
                  uint64_t v762 = v761;
                  uint64_t v763 = BigSubstring.UnicodeScalarView.endIndex.getter();
                  uint64_t v765 = v764;
                  uint64_t v767 = v766;
                  uint64_t v769 = v768;
                  outlined release of Locale((uint64_t)&v1094);
                  swift_release();
                  uint64_t v1156 = v756;
                  uint64_t v1157 = v758;
                  uint64_t v1158 = v760;
                  uint64_t v1159 = v762;
                  uint64_t v1160 = v763;
                  uint64_t v1161 = v765;
                  uint64_t v1162 = v767;
                  uint64_t v770 = (uint64_t)v930;
                  uint64_t v1163 = v769;
                  swift_retain();
                  specialized AttributedString.Guts.getUniformValue<A>(in:key:)((uint64_t)&v973);
                  if (v976)
                  {
                    outlined init with copy of any StandardPredicateExpression<Self.PredicateExpression.Output == Bool>((uint64_t)&v973, (uint64_t)&v958);
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Hashable & Sendable);
                    swift_dynamicCast();
                    outlined destroy of AttributedString._AttributeValue((uint64_t)&v973);
                  }
                  else
                  {
                    outlined destroy of Any?((uint64_t)&v973, &demangling cache variable for type metadata for AttributedString._AttributeValue?);
                    v992 = 0;
                    uint64_t v991 = 0;
                    LODWORD(v993) = 0;
                    BYTE4(v993) = -1;
                  }
                  swift_release();
                  unint64_t v771 = v991;
                  unint64_t v772 = (unint64_t)v992;
                  unsigned int v773 = BYTE4(v993);
                  uint64_t v774 = v993;
                  swift_release();
                  if (v773 <= 0xFEuLL)
                  {
                    unint64_t v812 = v774 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v773 << 32);
                    unint64_t v176 = (unint64_t)v946;
                    id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
                    switch(HIDWORD(v812))
                    {
                      case 1u:
                        id v813 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithLongLong_, v771);
                        break;
                      case 2u:
                        double v814 = *(double *)&v771;
                        goto LABEL_235;
                      case 3u:
                        NSDecimal.doubleValue.getter(v771, v772, v812);
                        double v814 = v815;
LABEL_235:
                        id v813 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithDouble_, v814);
                        break;
                      default:
                        id v813 = objc_msgSend(objc_allocWithZone((Class)NSNumber), sel_initWithUnsignedLongLong_, v771);
                        break;
                    }
                    uint64_t v816 = (uint64_t)v813;
                    uint64_t v976 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
                    uint64_t v973 = v816;
                    uint64_t v811 = 1;
                  }
                  else
                  {
                    if (static BigString.Index.< infix(_:_:)()) {
                      goto LABEL_337;
                    }
                    long long v775 = v749[1];
                    v1155[0] = *v749;
                    v1155[1] = v775;
                    v1155[2] = v749[2];
                    swift_retain();
                    outlined retain of Locale((uint64_t)v1155);
                    BigString.startIndex.getter();
                    outlined release of Locale((uint64_t)v1155);
                    long long v776 = *v749;
                    long long v777 = v749[1];
                    long long v1154 = v749[2];
                    v1153[1] = v777;
                    v1153[0] = v776;
                    long long v778 = *v749;
                    long long v779 = v749[1];
                    v1394[2] = v1154;
                    v1394[1] = v779;
                    v1394[0] = v778;
                    outlined init with take of any PredicateExpression<Self.Output == B1>(v1394, (uint64_t)v1395);
                    outlined retain of Locale((uint64_t)v1395);
                    BigString.endIndex.getter();
                    outlined release of Locale((uint64_t)v1153);
                    swift_release();
                    long long v780 = v749[1];
                    long long v1150 = *v749;
                    long long v1151 = v780;
                    long long v1152 = v749[2];
                    swift_retain_n();
                    BigString.unicodeScalars.getter();
                    BigString.UnicodeScalarView.subscript.getter();
                    outlined release of Locale((uint64_t)&v1095);
                    uint64_t v929 = BigSubstring.UnicodeScalarView.startIndex.getter();
                    uint64_t v782 = v781;
                    uint64_t v784 = v783;
                    uint64_t v786 = v785;
                    uint64_t v787 = BigSubstring.UnicodeScalarView.endIndex.getter();
                    uint64_t v789 = v788;
                    uint64_t v791 = v790;
                    uint64_t v793 = v792;
                    outlined release of Locale((uint64_t)&v1096);
                    swift_release();
                    uint64_t v1133 = v929;
                    uint64_t v1134 = v782;
                    uint64_t v1135 = v784;
                    uint64_t v1136 = v786;
                    uint64_t v1137 = v787;
                    uint64_t v1138 = v789;
                    uint64_t v1139 = v791;
                    uint64_t v1140 = v793;
                    long long v794 = *v749;
                    long long v795 = v749[1];
                    v1141[2] = v749[2];
                    v1141[1] = v795;
                    v1141[0] = v794;
                    swift_retain_n();
                    outlined retain of Locale((uint64_t)v1141);
                    BigString.subscript.getter();
                    outlined release of Locale((uint64_t)v1141);
                    uint64_t v796 = BigSubstring.startIndex.getter();
                    uint64_t v798 = v797;
                    uint64_t v800 = v799;
                    uint64_t v802 = v801;
                    uint64_t v803 = BigSubstring.endIndex.getter();
                    uint64_t v805 = v804;
                    uint64_t v807 = v806;
                    uint64_t v809 = v808;
                    outlined release of Locale((uint64_t)v1097);
                    swift_release_n();
                    uint64_t v973 = v770;
                    uint64_t v974 = v796;
                    uint64_t v975 = v798;
                    uint64_t v976 = v800;
                    uint64_t v977 = v802;
                    uint64_t v978 = v803;
                    uint64_t v979 = v805;
                    uint64_t v980 = v807;
                    uint64_t v981 = v809;
                    uint64_t v982 = 0;
                    lazy protocol witness table accessor for type AttributedString.CharacterView and conformance AttributedString.CharacterView();
                    String.init<A>(_:)();
                    uint64_t v810 = String._bridgeToObjectiveCImpl()();
                    swift_bridgeObjectRelease();
                    uint64_t v811 = 0;
                    uint64_t v976 = type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
                    uint64_t v973 = v810;
                    unint64_t v176 = (unint64_t)v946;
                    id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
                  }
                  outlined init with copy of (Hashable & Sendable)?((uint64_t)&v973, (uint64_t)&v958, (uint64_t *)&demangling cache variable for type metadata for Any?);
                  uint64_t v817 = v960;
                  if (v960)
                  {
                    long long v566 = __swift_project_boxed_opaque_existential_1(&v958, v960);
                    uint64_t v567 = *(void *)(v817 - 8);
                    double v568 = MEMORY[0x1F4188790](v566);
                    v570 = (char *)&v880 - ((v569 + 15) & 0xFFFFFFFFFFFFFFF0);
                    (*(void (**)(char *, double))(v567 + 16))(v570, v568);
                    uint64_t v571 = _bridgeAnythingToObjectiveC<A>(_:)();
                    (*(void (**)(char *, uint64_t))(v567 + 8))(v570, v817);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v958);
                  }
                  else
                  {
                    uint64_t v571 = 0;
                  }
                  id v572 = objc_allocWithZone((Class)_NSAttributedStringReplacement);
                  objc_msgSend(v572, sel_initWithIndex_specifierRangeInFormatString_replacementRangeInResult_replacementKind_argument_, v886, 0x7FFFFFFFFFFFFFFFLL, 0x7FFFFFFFFFFFFFFFLL, v899, v898, v811, v571);
                  uint64_t v573 = swift_unknownObjectRelease();
                  MEMORY[0x185302590](v573);
                  if (*(void *)((v956 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v956 & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                  specialized Array._endMutation()();
                  outlined destroy of Any?((uint64_t)&v973, (uint64_t *)&demangling cache variable for type metadata for Any?);
                  uint64_t v575 = v895;
                  uint64_t v574 = v896;
                }
                long long v576 = v910;
                id v554 = v887;
                uint64_t v553 = v888;
                char v556 = v900;
                uint64_t v552 = v925;
                char v577 = static BigString.Index.== infix(_:_:)();
                unint64_t v562 = v911;
                long long v563 = (_OWORD *)v574;
                uint64_t v564 = v575;
                uint64_t v565 = (uint64_t)v576;
                if (v577) {
                  goto LABEL_195;
                }
              }
            }
            unint64_t v176 = (unint64_t)v946;
            id v170 = (uint64_t *)&demangling cache variable for type metadata for (AttributedString.MarkdownSourcePosition?, Range<AttributedString.Index>)?;
            char v556 = v900;
LABEL_195:
            long long v557 = v1018;
            long long v558 = v934;
            *((_OWORD *)v934 + 4) = v1017;
            v558[5] = v557;
            long long v559 = v1020;
            v558[6] = v1019;
            v558[7] = v559;
            long long v560 = v1014;
            *long long v558 = v1013;
            v558[1] = v560;
            long long v561 = v1016;
            v558[2] = v1015;
            v558[3] = v561;
            *(void *)&long long v996 = v891;
            id v1001 = v892;
            uint64_t v1002 = v890;
            uint64_t v1003 = v889;
            uint64_t v1004 = v901;
            uint64_t v1005 = v553;
            v1006 = v554;
            id v1007 = v556;
            id v1008 = v552;
            long long v1009 = &outlined read-only object #0 of String.LocalizationValue.resolve<A>(key:options:table:bundle:locale:scope:performLocalization:);
            uint64_t v1010 = MEMORY[0x1E4FBC860];
            outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)&v996);
            uint64_t v173 = (uint64_t)v945;
            id v175 = v950;
            uint64_t v171 = v953;
            uint64_t v172 = v954;
            uint64_t v116 = v955;
            id v174 = v942;
          }
          else
          {
            id v175 = v950;
          }
        }
      }
      *(_OWORD *)((char *)&v1022[4] + 8) = v1045;
      *(_OWORD *)((char *)&v1022[5] + 8) = v1046;
      *(_OWORD *)((char *)&v1022[6] + 8) = v1047;
      *(_OWORD *)((char *)&v1022[7] + 8) = v1048;
      *(_OWORD *)((char *)v1022 + 8) = v1041;
      *(_OWORD *)((char *)&v1022[1] + 8) = v1042;
      *(_OWORD *)((char *)&v1022[2] + 8) = v1043;
      *(_OWORD *)((char *)&v1022[3] + 8) = v1044;
      *(void *)&v1022[0] = v938;
      *((void *)&v1022[8] + 1) = v940;
      *(void *)&v1022[9] = v937;
      *((void *)&v1022[9] + 1) = v939;
      *(void *)&v1022[10] = v936;
      *((void *)&v1022[10] + 1) = v173;
      *(void *)&v1022[11] = v951;
      *((void *)&v1022[11] + 1) = v174;
      *(void *)&v1022[12] = v950;
      *((void *)&v1022[12] + 1) = v941;
      *(void *)&v1022[13] = MEMORY[0x1E4FBC860];
      *((void *)&v1022[13] + 1) = v171;
      *(void *)&v1022[14] = v172;
      *((void *)&v1022[14] + 1) = v116;
      *(void *)&v1022[15] = v952;
      outlined release of ReversedCollection<AttributedString.Runs.AttributesSlice1<AttributeScopes.FoundationAttributes.InflectionRuleAttribute>>.Iterator((uint64_t)v1022);
      swift_bridgeObjectRelease();
      memset(v1021, 0, 105);
      BYTE9(v1021[6]) = 1;
      specialized AttributedString.subscript.setter((uint64_t)v1021);
      LODWORD(v116) = v908;
      if (v915) {
        goto LABEL_241;
      }
LABEL_240:
      specialized AttributedString.subscript.setter(0, 1);
      goto LABEL_241;
    }
    swift_bridgeObjectRelease();
    if ((v915 & 1) == 0) {
      goto LABEL_240;
    }
LABEL_241:
    if ((v917 & v116) != 1)
    {
      swift_release();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t *v916 = (uint64_t)v957;
LABEL_276:

      goto LABEL_277;
    }
    uint64_t v818 = v957;
    uint64_t v819 = v956;
    uint64_t v820 = swift_allocObject();
    *(void *)(v820 + 16) = v818;
    uint64_t v821 = v820 + 16;
    long long v822 = v818[2];
    v1022[0] = v818[1];
    v1022[1] = v822;
    v1022[2] = v818[3];
    uint64_t v949 = v818;
    swift_retain_n();
    outlined retain of Locale((uint64_t)v1022);
    MEMORY[0x185302050](v1022);
    id v823 = objc_allocWithZone((Class)NSMutableString);
    uint64_t v824 = String._bridgeToObjectiveCImpl()();
    swift_bridgeObjectRelease();
    id v825 = objc_msgSend(v823, sel_initWithString_, v824);
    swift_unknownObjectRelease();
    uint64_t v955 = v819;
    uint64_t v948 = (void *)v820;
    id v947 = v825;
    if (v914)
    {
      uint64_t v826 = *(void *)(v914 + 16);
      uint64_t v827 = MEMORY[0x1E4FBC860];
      if (v826)
      {
        uint64_t v954 = v820 + 16;
        *(void *)&long long v996 = MEMORY[0x1E4FBC860];
        uint64_t v828 = v914;
        swift_bridgeObjectRetain();
        specialized ContiguousArray.reserveCapacity(_:)();
        id v829 = (unsigned char *)(v828 + 48);
        do
        {
          if (*v829 == 1)
          {
            id v830 = objc_allocWithZone((Class)NSString);
            uint64_t v831 = String._bridgeToObjectiveCImpl()();
            swift_bridgeObjectRetain();
            objc_msgSend(v830, sel_initWithString_, v831);
            swift_unknownObjectRelease();
            outlined consume of InflectionConcept();
          }
          else
          {
            swift_bridgeObjectRetain();
            _ContiguousArrayBuffer._asCocoaArray()();
          }
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v829 += 24;
          --v826;
        }
        while (v826);
        uint64_t v827 = v996;
        swift_bridgeObjectRelease();
        uint64_t v819 = v955;
        uint64_t v820 = (uint64_t)v948;
        uint64_t v821 = v954;
      }
    }
    else
    {
      uint64_t v827 = 0;
    }
    id v835 = (uint64_t (**)(uint64_t, id))v913;
    uint64_t v836 = swift_getObjectType();
    uint64_t v837 = v835[61](v836, v835);
    if ((unint64_t)v819 >> 62)
    {
      if (v819 < 0) {
        uint64_t v838 = v819;
      }
      else {
        uint64_t v838 = v819 & 0xFFFFFFFFFFFFFF8;
      }
      swift_bridgeObjectRetain();
    }
    else
    {
      type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for _NSAttributedStringReplacement);
      swift_bridgeObjectRetain();
      uint64_t v838 = _ContiguousArrayBuffer._asCocoaArray()();
    }
    uint64_t v954 = v837;
    uint64_t v953 = v838;
    if (v827)
    {
      if ((unint64_t)v827 >> 62)
      {
        if (v827 >= 0) {
          uint64_t v872 = (void *)(v827 & 0xFFFFFFFFFFFFFF8);
        }
        else {
          uint64_t v872 = (void *)v827;
        }
        v952 = v872;
      }
      else
      {
        type metadata accessor for NSMorphologyPronoun(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
        v952 = (void *)_ContiguousArrayBuffer._asCocoaArray()();
      }
    }
    else
    {
      v952 = 0;
    }
    id v950 = objc_msgSend(self, sel_currentUser);
    v999 = partial apply for closure #3 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    uint64_t v1000 = v820;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    uint64_t v998 = &block_descriptor_17;
    uint64_t v951 = _Block_copy(&v996);
    swift_retain();
    swift_release();
    uint64_t v839 = swift_allocObject();
    *(void *)(v839 + 16) = partial apply for closure #4 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v839 + 24) = v820;
    v999 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v1000 = v839;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v998 = &block_descriptor_150;
    id v946 = _Block_copy(&v996);
    swift_retain();
    uint64_t v925 = (void *)v839;
    swift_retain();
    swift_release();
    uint64_t v840 = swift_allocObject();
    *(void *)(v840 + 16) = partial apply for closure #5 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v840 + 24) = v820;
    v999 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v1000 = v840;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@in_guaranteed Any?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v998 = &block_descriptor_156;
    uint64_t v945 = _Block_copy(&v996);
    swift_retain();
    unint64_t v926 = v840;
    swift_retain();
    swift_release();
    uint64_t v841 = swift_allocObject();
    *(void *)(v841 + 16) = v821;
    uint64_t v842 = swift_allocObject();
    *(void *)(v842 + 16) = partial apply for closure #6 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v842 + 24) = v841;
    uint64_t v923 = v841;
    v999 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v1000 = v842;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed NSLocalizedNumberFormatRule, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v998 = &block_descriptor_165;
    uint64_t v943 = _Block_copy(&v996);
    uint64_t v928 = v842;
    swift_retain();
    swift_release();
    uint64_t v843 = swift_allocObject();
    *(void *)(v843 + 16) = v821;
    uint64_t v844 = swift_allocObject();
    *(void *)(v844 + 16) = partial apply for closure #7 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v844 + 24) = v843;
    uint64_t v922 = v843;
    v999 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    uint64_t v1000 = v844;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> ();
    uint64_t v998 = &block_descriptor_174;
    id v942 = _Block_copy(&v996);
    uint64_t v929 = v844;
    swift_retain();
    swift_release();
    uint64_t v845 = swift_allocObject();
    *(void *)(v845 + 16) = v821;
    uint64_t v846 = swift_allocObject();
    *(void *)(v846 + 16) = partial apply for closure #8 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v846 + 24) = v845;
    uint64_t v921 = v845;
    v999 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool);
    uint64_t v1000 = v846;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@unowned Bool);
    uint64_t v998 = &block_descriptor_183;
    uint64_t v941 = _Block_copy(&v996);
    v930 = (_OWORD *)v846;
    swift_retain();
    swift_release();
    uint64_t v847 = swift_allocObject();
    *(void *)(v847 + 16) = v821;
    uint64_t v848 = swift_allocObject();
    *(void *)(v848 + 16) = partial apply for closure #9 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v848 + 24) = v847;
    uint64_t v920 = v847;
    v999 = partial apply for thunk for @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
    uint64_t v1000 = v848;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@guaranteed NSAttributedStringKey, @unowned _NSRange) -> (@out Any?);
    uint64_t v998 = &block_descriptor_192;
    v940 = _Block_copy(&v996);
    uint64_t v931 = v848;
    swift_retain();
    swift_release();
    uint64_t v849 = swift_allocObject();
    *(void *)(v849 + 16) = v821;
    uint64_t v850 = swift_allocObject();
    *(void *)(v850 + 16) = partial apply for closure #10 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v850 + 24) = v849;
    uint64_t v917 = v849;
    v999 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange) -> (@owned String);
    uint64_t v1000 = v850;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@unowned _NSRange) -> (@owned String);
    uint64_t v998 = &block_descriptor_201;
    uint64_t v939 = _Block_copy(&v996);
    uint64_t v932 = (char *)v850;
    swift_retain();
    swift_release();
    uint64_t v851 = swift_allocObject();
    id v852 = v947;
    *(void *)(v851 + 16) = v947;
    uint64_t v853 = swift_allocObject();
    *(void *)(v853 + 16) = partial apply for closure #11 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v853 + 24) = v851;
    uint64_t v915 = v851;
    v999 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v1000 = v853;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed @escaping @callee_guaranteed (@guaranteed String?, @unowned _NSRange, @unowned UnsafeMutablePointer<ObjCBool>) -> ()) -> ();
    uint64_t v998 = &block_descriptor_210;
    id v938 = _Block_copy(&v996);
    id v854 = v852;
    v933 = (char *)v853;
    swift_retain();
    swift_release();
    uint64_t v855 = swift_allocObject();
    *(void *)(v855 + 16) = v821;
    *(void *)(v855 + 24) = v854;
    uint64_t v856 = swift_allocObject();
    *(void *)(v856 + 16) = partial apply for closure #12 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v856 + 24) = v855;
    uint64_t v914 = v855;
    v999 = partial apply for thunk for @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
    uint64_t v1000 = v856;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @in_guaranteed Any) -> ();
    uint64_t v998 = &block_descriptor_219;
    uint64_t v857 = _Block_copy(&v996);
    id v947 = v854;
    uint64_t v934 = (char *)v856;
    swift_retain();
    swift_release();
    v999 = destructiveProjectEnumData for PredicateCodableError;
    uint64_t v1000 = 0;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@unowned _NSRange, @guaranteed NSAttributedStringKey, @in_guaranteed Any) -> ();
    uint64_t v998 = &block_descriptor_222;
    v858 = (long long *)_Block_copy(&v996);
    v935 = v858;
    swift_release();
    uint64_t v859 = swift_allocObject();
    uint64_t v860 = v955;
    *(void *)(v859 + 16) = v949;
    *(void *)(v859 + 24) = v860;
    uint64_t v861 = swift_allocObject();
    *(void *)(v861 + 16) = partial apply for closure #14 in AttributedString.inflected(locale:userTermOfAddress:replacements:concepts:preflight:);
    *(void *)(v861 + 24) = v859;
    id v913 = (void *)v859;
    v999 = partial apply for thunk for @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    uint64_t v1000 = v861;
    uint64_t v937 = (void *)v861;
    *(void *)&long long v996 = MEMORY[0x1E4F143A8];
    *((void *)&v996 + 1) = 1107296256;
    char v997 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any) -> (@out Any?);
    uint64_t v998 = &block_descriptor_231;
    v862 = _Block_copy(&v996);
    v936 = v862;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    uint64_t v877 = (uint64_t)v858;
    uint64_t v878 = (uint64_t)v862;
    id v22 = v938;
    v863 = v939;
    v864 = v940;
    uint64_t v865 = v941;
    id v866 = v942;
    uint64_t v867 = v943;
    id v31 = v946;
    v868 = v945;
    _NSInflect(v954, v953, (uint64_t)v952, (uint64_t)v950, (uint64_t)v951, 0, (uint64_t)v946, (uint64_t)v945, (uint64_t)v943, (uint64_t)v942, (uint64_t)v941, (uint64_t)v940, (uint64_t)v939, (uint64_t)v938, (uint64_t)v857, v877, v878);

    _Block_release(v935);
    _Block_release(v857);
    _Block_release(v22);
    _Block_release(v863);
    _Block_release(v864);
    _Block_release(v865);
    _Block_release(v866);
    _Block_release(v867);
    _Block_release(v868);
    _Block_release(v31);
    _Block_release(v951);

    swift_unknownObjectRelease();
    _Block_release(v936);
    uint64_t v62 = (uint64_t)v937;
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
      goto LABEL_297;
    }
    if (swift_isEscapingClosureAtFileLocation()) {
      goto LABEL_288;
    }
    uint64_t v62 = (uint64_t)v934;
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      goto LABEL_289;
    }
    uint64_t v62 = (uint64_t)v933;
    char v869 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v869) {
      goto LABEL_290;
    }
    uint64_t v62 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v62) {
      goto LABEL_291;
    }
    uint64_t v62 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v62) {
      goto LABEL_292;
    }
    uint64_t v62 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v62) {
      goto LABEL_293;
    }
    uint64_t v62 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v62) {
      goto LABEL_294;
    }
    uint64_t v62 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v62) {
      goto LABEL_295;
    }
    uint64_t v62 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v62) {
      goto LABEL_296;
    }
    uint64_t v62 = (uint64_t)v925;
    char v870 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v870 & 1) == 0)
    {
      uint64_t v871 = v948[2];
      swift_retain();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release_n();
      uint64_t *v916 = v871;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_276;
    }
LABEL_297:
    __break(1u);
  }
  id v123 = v31;
  uint64_t v124 = v120 + 16 * v122 + 24;
  while (1)
  {
    if (v122 > *(void *)(v121 + 16))
    {
      __break(1u);
LABEL_115:
      swift_bridgeObjectRelease();
      id v31 = v123;
      long long v107 = v119;
      goto LABEL_90;
    }
    swift_bridgeObjectRetain();
    v125._uint64_t countAndFlagsBits = 0x6A6F72706C2ELL;
    v125._unint64_t object = (void *)0xE600000000000000;
    if (String.hasSuffix(_:)(v125) && String.count.getter() >= 7) {
      break;
    }
    --v122;
    swift_bridgeObjectRelease();
    v124 -= 16;
    if (!v122) {
      goto LABEL_115;
    }
  }
  swift_bridgeObjectRelease();
  String.index(_:offsetBy:)();
  uint64_t v126 = String.subscript.getter();
  uint64_t v128 = v127;
  uint64_t v130 = v129;
  uint64_t v132 = v131;
  swift_bridgeObjectRelease();
  uint64_t v117 = MEMORY[0x185301F50](v126, v128, v130, v132);
  uint64_t v134 = v133;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v118 = v134;
  id v31 = v123;
  if (!v942) {
    goto LABEL_117;
  }
LABEL_105:
  *(void *)&v1021[0] = 0xD000000000000022;
  *((void *)&v1021[0] + 1) = 0x80000001823B0C80;
  id v140 = objc_msgSend(v919, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v140)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v1021, 0, 32);
  }
  int v141 = v119;
  outlined init with take of LocalePreferences?((uint64_t)v1021, (uint64_t)v1022, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((void *)&v1022[1] + 1)) {
    goto LABEL_118;
  }
  if (!swift_dynamicCast()) {
    goto LABEL_119;
  }
  long long v142 = v1021[0];
  LOBYTE(v1022[0]) = (_BYTE)v939;
  BYTE1(v1022[0]) = (_BYTE)v940;
  BYTE2(v1022[0]) = (_BYTE)v941;
  *((void *)&v1022[0] + 1) = v117;
  *(void *)&v1022[1] = v118;
  BYTE8(v1022[1]) = v954;
  memset(v1021, 0, 24);
  swift_bridgeObjectRetain();
  int v143 = static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v1049, v142, *((unint64_t *)&v142 + 1), (uint64_t)v949, (char *)v1022, (uint64_t)v1021, (uint64_t)v949, (uint64_t)v950);
  if (!v31)
  {
    LODWORD(v116) = v143;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v996 = *(void *)&v1049[0];
    unint64_t v145 = (unint64_t)v946;
    swift_bridgeObjectRetain();
    uint64_t v878 = 0;
    uint64_t v879 = 0;
    specialized static AttributedString.parseMarkdown<A>(_:including:options:baseURL:)(v1022, (uint64_t)v943, v145, 512, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
    uint64_t v144 = specialized AttributedString.subscript.setter(*(uint64_t *)&v1022[0]);
    goto LABEL_124;
  }
  swift_bridgeObjectRelease();

  uint64_t v144 = swift_bridgeObjectRelease();
  if ((v953 & 1) == 0)
  {
LABEL_252:
    if (one-time initialization token for attributedStringsCacheLock != -1) {
      uint64_t v144 = swift_once();
    }
    uint64_t v832 = static String.LocalizationValue.attributedStringsCacheLock;
    MEMORY[0x1F4188790](v144);
    v874 = v949;
    id v875 = v950;
    uint64_t v876 = (uint64_t)v943;
    uint64_t v877 = (uint64_t)v946;
    uint64_t v878 = v833;
    LOBYTE(v879) = v954;
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v832 + 24));
    partial apply for closure #3 in String.LocalizationValue._parseLocalizedMarkdown<A>(_:bundlePreferredLocalization:tableURL:formatConfiguration:scope:appliesSourcePositionAttribute:ignoreCache:)((uint64_t *)(v832 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v832 + 24));
    swift_release();
  }
LABEL_255:
  id v834 = v919;

  swift_bridgeObjectRelease();
  outlined consume of URL?(v141);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  uint64_t *v916 = v944;

LABEL_277:
}