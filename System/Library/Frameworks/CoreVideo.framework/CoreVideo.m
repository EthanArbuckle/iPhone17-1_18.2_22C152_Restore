uint64_t CVPixelBufferBacking::getPixelBufferOptions(CVPixelBufferBacking *this)
{
  return *((void *)this + 136);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  if (texture) {
    CFRelease(texture);
  }
}

void translateIOSurfaceKeyToCoreVideoAttachmentKeyAndStoreIt(const __CFString *a1, const void *a2, __CFDictionary **a3)
{
  if (a2)
  {
    v5 = *a3;
    v6 = CVGetCVBufferAttachmentKeyForIOSurfacePropertyKey(a1);
    if (v6)
    {
      v7 = v6;
      if (!CFEqual(a1, (CFTypeRef)*MEMORY[0x1E4F2F068]) || !CFDictionaryContainsKey(v5, @"CGColorSpace"))
      {
        CFTypeRef v8 = copyAttachmentDeserializedIfNecessary(a1, a2);
        if (v8)
        {
          v9 = v8;
          CFDictionarySetValue(v5, v7, v8);
          CFRelease(v9);
        }
      }
    }
  }
}

const void *CVGetCVBufferAttachmentKeyForIOSurfacePropertyKey(const __CFString *a1)
{
  pthread_once(&intializeAndGetIOSurfaceTranslationDictionaries(__CFDictionary const**,__CFDictionary const**)::once, initCVBufferKeyToIOSurfaceKeyDictionary);
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)iosurfaceKeyToCVBufferKeyDictionary;

  return CFDictionaryGetValue(v2, a1);
}

uint64_t CVPixelBufferBacking::getDataSize(CVPixelBufferBacking *this)
{
  return *((void *)this + 129);
}

CFDictionaryRef CVBufferGetAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  CFDictionaryRef result = (CFDictionaryRef)_getCVBuffer(buffer);
  if (result)
  {
    v3 = *(uint64_t (**)(void))(*(void *)result + 128);
    return (CFDictionaryRef)v3();
  }
  return result;
}

void *CVDataBufferGetPixelFormatType(void *a1)
{
  CFDictionaryRef result = _getCVDataBuffer(a1);
  if (result)
  {
    CFDictionaryRef v2 = *(uint64_t (**)(void))(*(void *)result[14] + 192);
    return (void *)v2();
  }
  return result;
}

void *CVDataBufferGetDataSize(void *a1)
{
  CFDictionaryRef result = _getCVDataBuffer(a1);
  if (result)
  {
    CFDictionaryRef v2 = *(uint64_t (**)(void))(*(void *)result[14] + 200);
    return (void *)v2();
  }
  return result;
}

void *CVDataBufferGetIOSurface(void *a1)
{
  CFDictionaryRef result = _getCVDataBuffer(a1);
  if (result)
  {
    CFDictionaryRef v2 = *(uint64_t (**)(void))(*(void *)result[14] + 208);
    return (void *)v2();
  }
  return result;
}

void *_getCVDataBuffer(void *result)
{
  if (result)
  {
    v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVDataBufferGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

Boolean CVBufferHasAttachment(CVBufferRef buffer, CFStringRef key)
{
  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
  {
    v3 = *(uint64_t (**)(void))(*CVBuffer + 88);
    LOBYTE(CVBuffer) = v3();
  }
  return CVBuffer;
}

void CVPixelBufferGetExtendedPixels(CVPixelBufferRef pixelBuffer, size_t *extraColumnsOnLeft, size_t *extraColumnsOnRight, size_t *extraRowsOnTop, size_t *extraRowsOnBottom)
{
  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
  {
    v10 = *(void (**)(void))(*(void *)CVPixelBuffer[15] + 400);
    v10();
  }
  else
  {
    if (extraColumnsOnLeft) {
      *extraColumnsOnLeft = 0;
    }
    if (extraRowsOnTop) {
      *extraRowsOnTop = 0;
    }
    if (extraColumnsOnRight) {
      *extraColumnsOnRight = 0;
    }
    if (extraRowsOnBottom) {
      *extraRowsOnBottom = 0;
    }
  }
}

void *CVPixelBufferGetBufferBacking(void *a1)
{
  CFDictionaryRef result = _getCVPixelBuffer(a1);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)result[15] + 24);
    return (void *)v2();
  }
  return result;
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    v3 = *(uint64_t (**)(void))(**(void **)(result + 120) + 352);
    return v3();
  }
  return result;
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    v3 = *(uint64_t (**)(void))(**(void **)(result + 120) + 360);
    return v3();
  }
  return result;
}

void CVBufferRemoveAllAttachments(CVBufferRef buffer)
{
  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
  {
    CFTypeID v2 = *(void (**)(void))(*CVBuffer + 120);
    v2();
  }
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(**(void **)(result + 120) + 304);
    return v2();
  }
  return result;
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  size_t result = _getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)result + 264);
    return (void *)v2();
  }
  return result;
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (!CVPixelBuffer) {
    return -6661;
  }
  v3 = *(uint64_t (**)(void))(*(void *)CVPixelBuffer[15] + 424);

  return v3();
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(**(void **)(result + 120) + 344);
    return v2();
  }
  return result;
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    v3 = *(uint64_t (**)(void))(**(void **)(result + 120) + 376);
    return v3();
  }
  return result;
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  CFTypeRef result = _getCVBuffer(buffer);
  if (result)
  {
    v4 = *(uint64_t (**)(void))(*(void *)result + 96);
    return (CFTypeRef)v4();
  }
  return result;
}

void *CVPixelBufferGetAttributes(void *a1)
{
  CFTypeRef result = _getCVPixelBuffer(a1);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)result[15] + 256);
    return (void *)v2();
  }
  return result;
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  CFTypeRef result = _getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    v3 = *(uint64_t (**)(void))(**((void **)result + 15) + 368);
    return (void *)v3();
  }
  return result;
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
  {
    v5 = *(void (**)(void))(*CVBuffer + 104);
    v5();
  }
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
  {
    v4 = *(void (**)(void))(*CVBuffer + 136);
    v4();
  }
}

CFDictionaryRef CVBufferCopyAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  CFDictionaryRef result = (CFDictionaryRef)_getCVBuffer(buffer);
  if (result)
  {
    v3 = *(uint64_t (**)(void))(*(void *)result + 72);
    return (CFDictionaryRef)v3();
  }
  return result;
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (!CVPixelBuffer) {
    return -6661;
  }
  CVReturn result = (*(uint64_t (**)(void, CVPixelBufferLockFlags))(*(void *)CVPixelBuffer[15] + 416))(CVPixelBuffer[15], lockFlags);
  if (lockFlags != 1 && !result)
  {
    CVBufferRemoveAttachment(pixelBuffer, @"ExtendedPixelsFilledKey");
    return 0;
  }
  return result;
}

void CVPixelBuffer::removeAttachment(CVPixelBuffer *this, const __CFString *a2)
{
  if (_os_feature_enabled_impl())
  {
    v4 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    CFStringRef v5 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    if (v4) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      if (CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F2F068])) {
        setCGColorSpaceID(v4, 0);
      }
      IOSurfaceRemoveValue(v4, v5);
    }
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 10), a2);
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 11), a2);
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  }
  else
  {
    int v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    uint64_t v12 = 0;
    CVBuffer::removeAttachment((CFMutableDictionaryRef *)this, a2);
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    if (v7)
    {
      CFTypeRef v8 = (__IOSurface *)v7;
      if (convertAttachmentToIOSurfaceStruct(a2, 0, (uint64_t)&v13, &v12))
      {
        v10[4] = v17;
        v10[5] = v18;
        v10[6] = v19;
        int v11 = v20;
        v10[0] = v13;
        v10[1] = v14;
        v10[2] = v15;
        v10[3] = v16;
        setBulkAttachmentsOnIOSurface((uint64_t)v8, (uint64_t)v10, v12);
      }
      else
      {
        CFStringRef v9 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
        if (v9) {
          IOSurfaceRemoveValue(v8, v9);
        }
      }
    }
  }
}

void CVBufferRemoveAttachment(CVBufferRef buffer, CFStringRef key)
{
  CVBuffer = _getCVBuffer(buffer);
  if (CVBuffer)
  {
    v3 = *(void (**)(void))(*CVBuffer + 112);
    v3();
  }
}

uint64_t CVPixelBufferBacking::lockBaseAddress(CVPixelBufferBacking *this, char a2)
{
  {
    CVPixelBufferBacking::lockBaseAddress(unsigned long long)::ktrace_seed = arc4random();
  }
  if (gCVKTraceEnabled)
  {
    ++CVPixelBufferBacking::lockBaseAddress(unsigned long long)::ktrace_seed;
    if (this)
    {
      uint64_t v4 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 160))(this);
      uint64_t v5 = *(void *)this;
      if (v4)
      {
        BOOL v6 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v5 + 160))(this);
        IOOrEXSurfaceGetID(v6);
      }
      else
      {
        (*(void (**)(CVPixelBufferBacking *))(v5 + 24))(this);
      }
    }
    kdebug_trace();
  }
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  uint64_t v7 = (__IOSurface *)*((void *)this + 57);
  int v8 = *((_DWORD *)this + 42);
  if (v7 && !v8)
  {
    if (IOSurfaceLock(v7, a2 & 1, 0))
    {
      uint64_t v9 = 4294960636;
      goto LABEL_15;
    }
    int v8 = *((_DWORD *)this + 42);
  }
  uint64_t v9 = 0;
  *((_DWORD *)this + 42) = v8 + 1;
LABEL_15:
  (*(void (**)(CVPixelBufferBacking *))(*(void *)this + 224))(this);
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 24));
  if (gCVKTraceEnabled)
  {
    uint64_t v10 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 160))(this);
    uint64_t v11 = *(void *)this;
    if (v10)
    {
      uint64_t v12 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v11 + 160))(this);
      IOOrEXSurfaceGetID(v12);
    }
    else
    {
      (*(void (**)(CVPixelBufferBacking *))(v11 + 24))(this);
    }
    kdebug_trace();
  }
  return v9;
}

void sub_1A584397C(_Unwind_Exception *a1)
{
}

uint64_t CVImageBacking::flushCachedGLESTexture(CVImageBacking *this)
{
  uint64_t result = *((void *)this + 19);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 328))(result);
    *((void *)this + 19) = 0;
  }
  return result;
}

void setCGColorSpaceID(__IOSurface *a1, const void *a2)
{
  if (_os_feature_enabled_impl())
  {
    int valuePtr = 0;
    if (a2
      && (CFTypeID TypeID = CGColorSpaceGetTypeID(), TypeID == CFGetTypeID(a2))
      && (int valuePtr = CGColorSpaceGetID()) != 0
      && (CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr)) != 0)
    {
      CFNumberRef v6 = v5;
      IOSurfaceSetValue(a1, (CFStringRef)*MEMORY[0x1E4F2F070], v5);
      CFRelease(v6);
    }
    else
    {
      IOSurfaceRemoveValue(a1, (CFStringRef)*MEMORY[0x1E4F2F070]);
    }
  }
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(**(void **)(result + 120) + 272);
    return v2();
  }
  return result;
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(**(void **)(result + 120) + 280);
    return v2();
  }
  return result;
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)CVPixelBuffer[15] + 192);
    LODWORD(CVPixelBuffer) = v2();
  }
  return CVPixelBuffer;
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  CFTypeRef result = _getCVBuffer(buffer);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 80);
    return (CFTypeRef)v4();
  }
  return result;
}

void *_getCVBuffer(void *result)
{
  if (result)
  {
    v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferGetTypeID() || v2 == CVDataBufferGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

void *_getCVPixelBuffer(void *result)
{
  if (result)
  {
    v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  if (CVPixelBufferGetTypeID::once != -1) {
    dispatch_once_f(&CVPixelBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBuffer);
  }
  return kCVPixelBufferID;
}

uint64_t CVDataBufferGetTypeID()
{
  if (CVDataBufferGetTypeID::once != -1) {
    dispatch_once_f(&CVDataBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBuffer);
  }
  return kCVDataBufferID;
}

void CVBufferPropagateAttachments(CVBufferRef sourceBuffer, CVBufferRef destinationBuffer)
{
  CVBuffer = _getCVBuffer(sourceBuffer);
  uint64_t v4 = _getCVBuffer(destinationBuffer);
  if (CVBuffer)
  {
    if (v4)
    {
      if (CVBuffer != v4)
      {
        uint64_t v5 = (*(uint64_t (**)(void *, uint64_t))(*CVBuffer + 72))(CVBuffer, 1);
        if (v5)
        {
          CFNumberRef v6 = (const void *)v5;
          uint64_t v7 = _getCVBuffer(destinationBuffer);
          if (v7) {
            (*(void (**)(void *, const void *, uint64_t))(*v7 + 136))(v7, v6, 1);
          }
          CFRelease(v6);
        }
      }
    }
  }
}

uint64_t CVPixelBuffer::setAttachments(CVPixelBuffer *this, const __CFDictionary *a2, unsigned int a3)
{
  if (!_os_feature_enabled_impl())
  {
    int v34 = 0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    *(_OWORD *)keysAndValues = 0u;
    long long v29 = 0u;
    long long context = 0u;
    uint64_t v7 = CVBuffer::setAttachments(this, a2, a3);
    uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    if (a3 != 1) {
      return v7;
    }
    if (v7) {
      return v7;
    }
    uint64_t v10 = (__IOSurface *)v9;
    if (!v9) {
      return v7;
    }
    int v11 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
    if (v11 >= 1)
    {
      int v12 = v11;
      unsigned int v13 = 0;
      Mutable = 0;
      uint64_t v7 = 0;
      long long v15 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      long long v16 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        uint64_t v26 = 0;
        long long v17 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v13);
        Value = (__CFString *)CFDictionaryGetValue(a2, v17);
        if (Value)
        {
          long long v19 = Value;
          int v20 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v13);
          int v21 = convertAttachmentToIOSurfaceStruct(v20, v19, (uint64_t)&context, &v26);
          v7 |= v26;
          if (!v21)
          {
            if (!Mutable) {
              Mutable = CFDictionaryCreateMutable(0, 0, v15, v16);
            }
            CFStringRef v22 = (const __CFString *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v13);
            CVPixelBuffer::addIOSurfaceAttachmentToDictionary(this, Mutable, v22, (CGColorSpace *)v19);
          }
        }
        ++v13;
      }
      while (v12 != v13);
      if (v7)
      {
        v24[4] = v31;
        v24[5] = v32;
        v24[6] = v33;
        int v25 = v34;
        v24[0] = context;
        v24[1] = *(_OWORD *)keysAndValues;
        v24[2] = v29;
        v24[3] = v30;
        uint64_t v7 = setBulkAttachmentsOnIOSurface((uint64_t)v10, (uint64_t)v24, v7);
      }
      if (Mutable)
      {
        IOSurfaceSetValues(v10, Mutable);
        CFRelease(Mutable);
      }
      return v7;
    }
    return 0;
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
  uint64_t v7 = 4294960635;
  if (!a2 || a3 > 1) {
    return v7;
  }
  if (a3 == 1)
  {
    CFDictionaryRef v8 = (const __CFDictionary *)v6;
    if (v6)
    {
      keysAndValues[0] = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      long long context = *((_OWORD *)this + 5);
      keysAndValues[1] = v8;
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)translateCoreVideoAttachmentKeyToIOSurfaceKeyAndStoreIt, &context);
      IOSurfaceSetValues(v8, keysAndValues[0]);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
      CFRelease(keysAndValues[0]);
      return 0;
    }
  }

  return CVBuffer::setAttachments(this, a2, a3);
}

CFDictionaryRef CVPixelBuffer::copyAttachments(CVPixelBuffer *this, unsigned int a2)
{
  if (_os_feature_enabled_impl())
  {
    long long context = 0;
    uint64_t v4 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    uint64_t v5 = (pthread_mutex_t *)((char *)this + 16);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    if (a2 == 1 && v4 && (CFDictionaryRef v6 = IOSurfaceCopyAllValues(v4)) != 0)
    {
      CFDictionaryRef v7 = v6;
      long long context = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      insertColorSpaceIntoDictionaryUsingID(v7, context);
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)translateIOSurfaceKeyToCoreVideoAttachmentKeyAndStoreIt, &context);
      CVBuffer::setAttachments(this, context, 1u);
      CFDictionaryRef v8 = CVBuffer::copyAttachments(this, 1u);
      CFRelease(v7);
      if (context) {
        CFRelease(context);
      }
    }
    else
    {
      CFDictionaryRef v8 = CVBuffer::copyAttachments(this, a2);
    }
    pthread_mutex_unlock(v5);
    return v8;
  }
  else
  {
    return CVBuffer::copyAttachments(this, a2);
  }
}

CFDictionaryRef CVBuffer::copyAttachments(CVBuffer *this, unsigned int a2)
{
  if (a2 > 1) {
    return 0;
  }
  uint64_t v5 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  CFDictionaryRef v6 = (const __CFDictionary *)*((void *)this + a2 + 10);
  if (v6) {
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
  }
  else {
    CFDictionaryRef Copy = 0;
  }
  pthread_mutex_unlock(v5);
  return Copy;
}

uint64_t CVBuffer::setAttachments(CVBuffer *this, const __CFDictionary *a2, unsigned int a3)
{
  uint64_t result = 4294960635;
  if (a2)
  {
    if (a3 <= 1)
    {
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      long long v7 = *((_OWORD *)this + 5);
      CVAttachmentMode v8 = a3;
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)applySetAttachments, &v7);
      pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
      return 0;
    }
  }
  return result;
}

void insertColorSpaceIntoDictionaryUsingID(const __CFDictionary *a1, __CFDictionary *a2)
{
  int v4 = _os_feature_enabled_impl();
  if (a2)
  {
    if (v4)
    {
      if (CVDictionaryGetIntValueWithDefault(a1, (const void *)*MEMORY[0x1E4F2F070], 0))
      {
        uint64_t v5 = (const void *)CGColorSpaceCreateWithID();
        if (v5)
        {
          CFDictionaryRef v6 = v5;
          CFDictionarySetValue(a2, @"CGColorSpace", v5);
          CFRelease(v6);
        }
      }
    }
  }
}

uint64_t CVPixelBufferBacking::performStandardMemoryLayoutAndCopyIOSurfaceCreationProperties(CVPixelBufferBacking *this, void *a2, uint64_t a3, const __CFAllocator *a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFDictionary *a7, const __CFDictionary *a8, unint64_t a9, long long a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, unint64_t *a17, void **a18, unint64_t *a19, unint64_t *a20,unint64_t *a21,unint64_t *a22,unint64_t *a23,__IOSurface **a24,__IOSurface *a25,__CVBuffer *a26,unsigned int *a27,unint64_t *a28,void **a29,const __CFDictionary **a30)
{
  MEMORY[0x1F4188790](this, a2, a3, a4, a5, a6, a7, a8);
  v311 = v30;
  CFDictionaryRef v32 = v31;
  CFDictionaryRef v282 = v33;
  CFDictionaryRef v35 = v34;
  CFAllocatorRef v37 = v36;
  int v39 = v38;
  v389[17] = *MEMORY[0x1E4F143B8];
  memset(v389, 0, 128);
  long long v388 = 0u;
  long long v387 = 0u;
  long long v386 = 0u;
  long long v385 = 0u;
  long long v384 = 0u;
  long long v383 = 0u;
  long long v382 = 0u;
  *(_OWORD *)v381 = 0u;
  memset(v380, 0, sizeof(v380));
  memset(v379, 0, sizeof(v379));
  memset(v378, 0, sizeof(v378));
  memset(v377, 0, sizeof(v377));
  memset(v376, 0, sizeof(v376));
  memset(v375, 0, sizeof(v375));
  memset(v374, 0, sizeof(v374));
  memset(v373, 0, sizeof(v373));
  memset(v372, 0, sizeof(v372));
  memset(v371, 0, sizeof(v371));
  memset(v370, 0, sizeof(v370));
  memset(v369, 0, sizeof(v369));
  memset(v368, 0, sizeof(v368));
  memset(v367, 0, sizeof(v367));
  memset(v366, 0, sizeof(v366));
  memset(v365, 0, sizeof(v365));
  memset(v364, 0, sizeof(v364));
  memset(v363, 0, sizeof(v363));
  memset(v362, 0, sizeof(v362));
  memset(v361, 0, sizeof(v361));
  memset(v360, 0, sizeof(v360));
  memset(v359, 0, sizeof(v359));
  memset(v358, 0, sizeof(v358));
  unint64_t v355 = 0;
  unint64_t v354 = 0;
  v353 = 0;
  memset(v357, 0, sizeof(v357));
  int v41 = _os_feature_enabled_impl();
  uint64_t v42 = 8;
  memset(&v356[6], 0, 32);
  if (v41) {
    uint64_t v42 = 1;
  }
  unint64_t v328 = v42;
  memset(v356, 0, 96);
  if (a25)
  {
    BufferBacking = CVPixelBufferGetBufferBacking(a25);
    if (BufferBacking) {
      a24 = *(__IOSurface ***)(BufferBacking[2] + 456);
    }
  }
  buffer = a24;
  if (a29) {
    *a29 = 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v32, @"Planes");
  CFArrayRef v45 = Value;
  CFDictionaryRef theDict = v32;
  int v300 = v39;
  CFAllocatorRef allocator = v37;
  if (Value)
  {
    unint64_t Count = CFArrayGetCount(Value);
    unint64_t v47 = Count;
    if (Count == 1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v45, 0);
    }
    else
    {
      if (Count > 0x10) {
        return 4294960635;
      }
      ValueAtIndex = 0;
    }
  }
  else
  {
    unint64_t v47 = 0;
    ValueAtIndex = v32;
  }
  v49 = (__CFDictionary *)CFDictionaryGetValue(v35, @"IOSurfaceProperties");
  if (v49)
  {
    CFMutableDictionaryRef Mutable = v49;
    uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v49, (const void *)local_kIOSurfaceProtectionOptions, 0);
    BOOL v52 = IntValueWithDefault == 0;
    BOOL v280 = IntValueWithDefault != 0;
    BOOL v284 = CVDictionaryGetBoolValueWithDefault(Mutable, (const void *)local_kIOSurfaceProhibitUseCount, 0) == 0;
    CFRetain(Mutable);
LABEL_16:
    char v281 = v52;
    v53 = (__CFString *)CFDictionaryGetValue(Mutable, @"Planes");
    v54 = v53;
    BOOL v52 = 0;
    goto LABEL_31;
  }
  CFBooleanRef v55 = (const __CFBoolean *)CFDictionaryGetValue(v35, @"IOSurfaceCoreAnimationCompatibility");
  if (!v55)
  {
    v53 = (__CFString *)CFDictionaryGetValue(v35, @"MetalCompatibility");
    BOOL v57 = 0;
    if (!v53)
    {
      BOOL v280 = 0;
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_29;
    }
LABEL_22:
    v53 = (__CFString *)CFBooleanGetValue((CFBooleanRef)v53);
    if (!v53 && !v57) {
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  int v56 = CFBooleanGetValue(v55);
  BOOL v57 = v56 != 0;
  v53 = (__CFString *)CFDictionaryGetValue(v35, @"MetalCompatibility");
  if (v53) {
    goto LABEL_22;
  }
  if (!v56)
  {
LABEL_24:
    CFMutableDictionaryRef Mutable = 0;
    BOOL v280 = 0;
LABEL_29:
    v54 = 0;
    BOOL v52 = 1;
    goto LABEL_30;
  }
LABEL_25:
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"IOSurfacePurgeWhenNotInUse", (const void *)*MEMORY[0x1E4F1CFD0]);
  BOOL v280 = 0;
  BOOL v52 = 1;
  if (Mutable)
  {
    BOOL v284 = 1;
    goto LABEL_16;
  }
  v54 = 0;
LABEL_30:
  char v281 = 1;
  BOOL v284 = 1;
LABEL_31:
  int DefaultBytesPerRowAlignment = CVPixelBufferBacking::getDefaultBytesPerRowAlignment((CVPixelBufferBacking *)v53);
  if (DefaultBytesPerRowAlignment >= 0) {
    int v59 = DefaultBytesPerRowAlignment;
  }
  else {
    int v59 = -DefaultBytesPerRowAlignment;
  }
  if ((a13 & 0x80000000) == 0) {
    int v60 = a13;
  }
  else {
    int v60 = -(int)a13;
  }
  if (v59 <= v60) {
    unsigned int v61 = v60;
  }
  else {
    unsigned int v61 = v59;
  }
  if (v59 < v60) {
    int v60 = v59;
  }
  if (v60)
  {
    if (v60 < 1)
    {
      int v62 = v61;
    }
    else
    {
      do
      {
        int v62 = v60;
        int v60 = (int)v61 % v60;
        unsigned int v61 = v62;
      }
      while (v60 > 0);
    }
  }
  else if (v61 <= 1)
  {
    int v62 = 1;
  }
  else
  {
    int v62 = v61;
  }
  unint64_t v315 = DefaultBytesPerRowAlignment * (int)a13 / v62;
  CFArrayRef theArray = v45;
  if (!v47)
  {
    BOOL v178 = v52;
    if (a20) {
      *a20 = 0;
    }
    uint64_t v179 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BitsPerBlock", 1);
    CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"HorizontalSubsampling", 1);
    CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"VerticalSubsampling", 1);
    unint64_t v180 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BlockWidth", 1);
    unint64_t v181 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BlockHeight", 1);
    uint64_t v182 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BlockHorizontalAlignment", 1);
    uint64_t v183 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BlockVerticalAlignment", 1);
    unint64_t v184 = CVDictionaryGetIntValueWithDefault(v35, @"ExactBytesPerRow", 0);
    uint64_t v185 = CVDictionaryGetIntValueWithDefault(v35, @"ExactHeight", 0);
    if ((!v185 || v185 == *((void *)&a10 + 1) + a9 + a12)
      && (!CVDictionaryGetBoolValueWithDefault(theDict, @"ContainsSenselArray", 0)
       || (a9 & 1) == 0 && ((a12 | DWORD2(a10)) & 1) == 0))
    {
      unint64_t v355 = 0;
      v380[0] = 0;
      if (!a27 || !buffer)
      {
        unint64_t v190 = 8;
        if (!v184) {
          unint64_t v190 = 16;
        }
        uint64_t v102 = _CVPixelBufferLayoutPlane(v180, v181, v179, v182, v183, (uint64_t)v311, a9, a10, *((unint64_t *)&a10 + 1), a11, a12, v190, v328, v315, a15, a16, v184, (unint64_t *)&v353, v381,
                 &v355,
                 &v354);
        if (!v102)
        {
          unint64_t v77 = 0;
          int v177 = 0;
          unint64_t v176 = v355;
          v379[0] = v355;
          unint64_t v290 = 1;
          a24 = buffer;
          goto LABEL_221;
        }
        goto LABEL_226;
      }
      v353 = (__CFString *)a13;
      unint64_t v176 = a13 * a9;
      unint64_t v355 = a13 * a9;
      a24 = buffer;
      size_t AllocSize = IOSurfaceGetAllocSize((IOSurfaceRef)buffer);
      uint64_t v187 = *(void *)a27;
      if (*(void *)a27 + a13 * a9 <= AllocSize)
      {
        v381[0] = *(void *)a27;
        if (((v187 + 63) & 0xFFFFFFFFFFFFFFC0) == v187)
        {
          LODWORD(v102) = 0;
          int v177 = 0;
          unint64_t v77 = 0;
          int v302 = 1;
          unint64_t v290 = 1;
          unint64_t v188 = v315;
          goto LABEL_233;
        }
      }
    }
    goto LABEL_225;
  }
  v325 = v54;
  BOOL v271 = v52;
  CFIndex v63 = 0;
  unint64_t v64 = 0;
  v349 = 0;
  *(void *)v352 = 0;
  do
  {
    v65 = CFArrayGetValueAtIndex(v45, v63);
    if (v65)
    {
      v66 = v65;
      unint64_t v67 = CVDictionaryGetIntValueWithDefault(v65, @"HorizontalSubsampling", 1);
      unint64_t v68 = CVDictionaryGetIntValueWithDefault(v66, @"VerticalSubsampling", 1);
      v69 = v349;
      if (v67 > (unint64_t)v349) {
        v69 = (__CFString *)v67;
      }
      v349 = v69;
      if (v68 > v64) {
        unint64_t v64 = v68;
      }
    }
    ++v63;
  }
  while (v47 != v63);
  unint64_t v270 = v64;
  cf = Mutable;
  CFDictionaryRef v338 = v35;
  unint64_t v313 = CVDictionaryGetIntValueWithDefault(v35, @"CompressedDataRegionAlignment", 512);
  CFIndex v70 = 0;
  int v71 = 0;
  do
  {
    v72 = CFArrayGetValueAtIndex(theArray, v70);
    unsigned int v73 = CVDictionaryGetIntValueWithDefault(v72, @"CompressionType", 0);
    v377[v70] = v73;
    uint64_t v74 = CVDictionaryGetIntValueWithDefault(v72, @"TiledAddressFormat", 0);
    v362[v70] = v74;
    if (v73 || v74 == 5)
    {
      if (v73 > 4)
      {
LABEL_217:
        uint64_t v102 = 4294960634;
LABEL_218:
        CFMutableDictionaryRef Mutable = cf;
        goto LABEL_226;
      }
      int v71 = 1;
    }
    ++v70;
  }
  while (v47 != v70);
  uint64_t v75 = 8 * v47;
  if (v47 <= 1) {
    unint64_t v76 = 0;
  }
  else {
    unint64_t v76 = v47;
  }
  if (v71)
  {
    uint64_t v75 = 0;
    unint64_t v77 = v47;
  }
  else
  {
    unint64_t v77 = v76;
  }
  if (a20) {
    *a20 = v77;
  }
  *(void *)v352 = (a14 - 1 + v75) / a14 * a14;
  CFArrayRef v78 = theArray;
  CFArrayRef v79 = (const __CFArray *)v325;
  if (v77)
  {
    unint64_t v80 = 0;
    int v264 = 0;
    int v268 = 0;
    v81 = 0;
    unint64_t v82 = 0;
    v291 = (char *)&v311[-1].length + 7;
    if (a27) {
      BOOL v83 = a24 == 0;
    }
    else {
      BOOL v83 = 1;
    }
    v266 = (const void *)*MEMORY[0x1E4F2F250];
    v267 = (const void *)*MEMORY[0x1E4F2F230];
    v262 = (const void *)*MEMORY[0x1E4F2F168];
    v263 = (const void *)*MEMORY[0x1E4F2F208];
    v260 = (const void *)*MEMORY[0x1E4F2F180];
    v261 = (const void *)*MEMORY[0x1E4F2F210];
    uint64_t v301 = a9 - 1;
    int v84 = !v83;
    int v265 = v84;
    uint64_t v272 = 8 * v77;
    v273 = (const void *)*MEMORY[0x1E4F2EFB0];
    unint64_t v290 = 1;
    v305 = v353;
    CFDictionaryRef v35 = v338;
    unint64_t v343 = v77;
    while (1)
    {
      v85 = CFArrayGetValueAtIndex(v78, v82);
      v86 = cf;
      if (v79)
      {
        v86 = v81;
        if (v82 < CFArrayGetCount(v79)) {
          v86 = CFArrayGetValueAtIndex(v79, v82);
        }
      }
      CFIndex v340 = v82;
      unint64_t v319 = CVDictionaryGetIntValueWithDefault(v85, @"BitsPerBlock", 1);
      *(void *)&v378[v80 / 4] = v319;
      unint64_t v87 = 1;
      unint64_t v88 = 1;
      if (v77 != 1)
      {
        unint64_t v87 = CVDictionaryGetIntValueWithDefault(v85, @"HorizontalSubsampling", 1);
        unint64_t v88 = CVDictionaryGetIntValueWithDefault(v85, @"VerticalSubsampling", 1);
      }
      unint64_t v307 = CVDictionaryGetIntValueWithDefault(v85, @"BlockWidth", 1);
      unint64_t v321 = CVDictionaryGetIntValueWithDefault(v85, @"BlockHeight", 1);
      CVDictionaryGetIntValueWithDefault(v85, @"BlockHorizontalAlignment", 1);
      CVDictionaryGetIntValueWithDefault(v85, @"BlockVerticalAlignment", 1);
      if (v87 <= 1) {
        unint64_t v89 = 1;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v88 <= 1) {
        unint64_t v90 = 1;
      }
      else {
        unint64_t v90 = v88;
      }
      uint64_t IntInArrayWithDefault = CVDictionaryGetIntInArrayWithDefault(v35, @"ExactBytesPerRow", v340, 0);
      uint64_t v92 = CVDictionaryGetIntValueWithDefault(theDict, @"ExactRatioBetweenBytesPerRowOfPlanes", 0);
      if (v343 == 2)
      {
        unint64_t v93 = a12;
        unint64_t v94 = a11;
        if (v80 == 8 && v92)
        {
          if (IntInArrayWithDefault)
          {
            if (v389[0] * v92 != IntInArrayWithDefault) {
              goto LABEL_217;
            }
          }
          else
          {
            uint64_t IntInArrayWithDefault = v389[0] * v92;
          }
        }
      }
      else
      {
        unint64_t v93 = a12;
        unint64_t v94 = a11;
      }
      v342 = v86;
      unint64_t v292 = IntInArrayWithDefault;
      unint64_t v95 = 8;
      if (!IntInArrayWithDefault) {
        unint64_t v95 = 16;
      }
      if (v89 > v95) {
        uint64_t v96 = 1;
      }
      else {
        uint64_t v96 = v95 / v89;
      }
      uint64_t v97 = v328 / v90;
      if (v90 > v328) {
        uint64_t v97 = 1;
      }
      unint64_t v274 = v97;
      v277 = (__CFString *)v96;
      BOOL v98 = __CFADD__(v291, v89);
      BOOL v99 = __CFADD__(v301, v90);
      unint64_t v100 = (unint64_t)a10 / v89;
      v361[v80 / 8] = (unint64_t)a10 / v89;
      v360[v80 / 8] = v94 / v89;
      unint64_t v101 = *((void *)&a10 + 1) / v90;
      v359[v80 / 8] = *((void *)&a10 + 1) / v90;
      unint64_t v309 = v93 / v90;
      v358[v80 / 8] = v93 / v90;
      uint64_t v102 = 4294960634;
      if (v98 || v99) {
        goto LABEL_218;
      }
      unint64_t v103 = v94 / v89;
      unint64_t v104 = (v301 + v90) / v90;
      if (CVDictionaryGetBoolValueWithDefault(theDict, @"ContainsSenselArray", 0)
        && v343 != 4
        && (v104 & 1) != 0)
      {
        goto LABEL_217;
      }
      a21[v80 / 8] = (unint64_t)&v291[v89] / v89;
      a22[v80 / 8] = v104;
      uint64_t v105 = CVDictionaryGetIntValueWithDefault(v338, @"ExactHeight", 0);
      if (v105)
      {
        if (v105 != *((void *)&a10 + 1) + a9 + a12) {
          goto LABEL_217;
        }
      }
      unint64_t v303 = (unint64_t)&v291[v89] / v89;
      unint64_t v106 = (a14 - 1 + *(void *)v352) / a14 * a14;
      *(void *)v352 = v106;
      CFIndex v107 = v340;
      int v108 = v377[v340];
      CFArrayRef v78 = theArray;
      v317 = (__CFString *)v104;
      if ((v108 - 1) >= 2)
      {
        if (v108)
        {
          if ((v108 - 3) > 1) {
            goto LABEL_129;
          }
          unint64_t v110 = v106;
          if (areUniversalCompressedBuffers2KAligned())
          {
            unint64_t v111 = (v110 + v313 - 1) / v313 * v313;
            unint64_t v313 = (v313 + 2047) & 0xFFFFFFFFFFFFF800;
            if (v111 != v110) {
              CVDictionaryGetIntValueWithDefault(theDict, @"PixelFormat", 0);
            }
          }
          unint64_t v106 = v110;
        }
        else if (v362[v80 / 8] != 5)
        {
          v380[v80 / 8] = v106;
          v109 = (__CFString *)&v380[v340];
          goto LABEL_166;
        }
      }
      unint64_t v106 = (v106 + v313 - 1) / v313 * v313;
      *(void *)v352 = v106;
LABEL_129:
      v109 = (__CFString *)&v380[v80 / 8];
      v380[v80 / 8] = v106;
      if ((v108 - 2) < 3) {
        goto LABEL_130;
      }
      if (v108)
      {
        if (v108 == 1)
        {
          unint64_t v294 = v106;
          v278 = (__CFString *)LODWORD(v362[v80 / 8]);
          uint64_t v116 = CVDictionaryGetIntValueWithDefault(v338, @"CompressedTileHeaderGroupBytesPerRowAlignment", 128);
          *(void *)&v365[v80 / 4] = CVDictionaryGetIntValueWithDefault(v342, v263, 1);
          uint64_t v117 = CVDictionaryGetIntValueWithDefault(v342, v262, 4);
          uint64_t v118 = v117;
          *(void *)&v370[v80 / 4] = v117;
          if (v117 != 8 && v117 != 4) {
            goto LABEL_217;
          }
          v288 = (__CFString *)&v380[v80 / 8];
          uint64_t v119 = CVDictionaryGetIntValueWithDefault(v85, @"TileWidth", 1);
          *(void *)&v376[v80 / 4] = v119;
          uint64_t v102 = 4294960634;
          if ((unint64_t)(v119 - 1) > 0x3FE) {
            goto LABEL_218;
          }
          unint64_t v120 = v119;
          uint8x8_t v121 = (uint8x8_t)vcnt_s8((int8x8_t)v119);
          v121.i16[0] = vaddlv_u8(v121);
          if (v121.u32[0] > 1uLL) {
            goto LABEL_218;
          }
          uint64_t v122 = CVDictionaryGetIntValueWithDefault(v85, @"TileHeight", 1);
          *(void *)&v375[v80 / 4] = v122;
          if ((unint64_t)(v122 - 1) > 0x3FE) {
            goto LABEL_218;
          }
          unint64_t v123 = v122;
          uint8x8_t v124 = (uint8x8_t)vcnt_s8((int8x8_t)v122);
          v124.i16[0] = vaddlv_u8(v124);
          if (v124.u32[0] > 1uLL) {
            goto LABEL_218;
          }
          unint64_t v125 = CVDictionaryGetIntValueWithDefault(v342, v267, 0);
          *(void *)&v372[v80 / 4] = v125;
          if (v125 > v120) {
            goto LABEL_218;
          }
          unint64_t v126 = v125;
          unint64_t v275 = v116;
          unint64_t v127 = CVDictionaryGetIntValueWithDefault(v342, v266, 0);
          *(void *)&v371[v80 / 4] = v127;
          if (v127 > v123) {
            goto LABEL_218;
          }
          unint64_t v128 = v127;
          unint64_t v129 = CVDictionaryGetIntValueWithDefault(v342, v261, 0);
          *(void *)&v363[v80 / 4] = v129;
          if (v129 > 3) {
            goto LABEL_218;
          }
          if (a10 != 0) {
            goto LABEL_218;
          }
          if (v120 % v307) {
            goto LABEL_218;
          }
          unint64_t v130 = (v120 + v303 + v103 + v126 - 1) / v120;
          if (v130 * v120 < v120) {
            goto LABEL_218;
          }
          *(void *)&v369[v80 / 4] = v130;
          if (v123 % v321) {
            goto LABEL_218;
          }
          char v131 = v129;
          unint64_t v132 = ((unint64_t)v317 + (v123 << v129) + v309 + v128 - 1) / (v123 << v129) * (v123 << v129);
          if (v132 < v123 << v129) {
            goto LABEL_217;
          }
          unint64_t v133 = v132 / v123;
          *(void *)&v368[v80 / 4] = v132 / v123;
          unint64_t v134 = (v118 * v130) << v129;
          unint64_t v135 = CVDictionaryGetIntValueWithDefault(v342, v260, (v134 + v275 - 1) / v275 * v275);
          *(void *)&v364[v80 / 4] = v135;
          if (v135 < v134) {
            goto LABEL_217;
          }
          v381[v80 / 8] = v294;
          unint64_t v136 = (v313 + v135 * (v133 >> v131) + v294 - 1) / v313 * v313;
          *(void *)&v366[v80 / 4] = v136;
          unint64_t v137 = (v123 * v120 * v319 + 7) >> 3;
          *(void *)&v357[v80 / 4] = v137;
          *(void *)v352 = v136 + v133 * v130 * v137;
          int v268 = 1;
          a24 = buffer;
          CFDictionaryRef v35 = v338;
          CFArrayRef v78 = theArray;
          unint64_t v77 = v343;
          CFIndex v107 = v340;
          unint64_t v138 = (unint64_t)v305;
LABEL_197:
          uint64_t v153 = (uint64_t)v278;
          goto LABEL_198;
        }
      }
      else if (v362[v80 / 8] == 5)
      {
LABEL_130:
        unint64_t v293 = v106;
        v278 = (__CFString *)LODWORD(v362[v80 / 8]);
        uint64_t v112 = CVDictionaryGetIntValueWithDefault(v85, @"BytesPerTileHeader", 2);
        uint64_t v113 = v112;
        *(void *)&v370[v80 / 4] = v112;
        v288 = (__CFString *)&v380[v80 / 8];
        switch(v112)
        {
          case 32:
            int v115 = 32;
            int v114 = 32;
            break;
          case 8:
            int v115 = 16;
            int v114 = 16;
            break;
          case 2:
            int v114 = 16;
            if (v319 <= 0x20) {
              int v115 = 16;
            }
            else {
              int v115 = 8;
            }
            break;
          default:
            goto LABEL_217;
        }
        uint64_t v139 = CVDictionaryGetIntValueWithDefault(v85, @"TileWidth", 1);
        *(void *)&v376[v80 / 4] = v139;
        uint64_t v102 = 4294960634;
        if ((unint64_t)(v139 - 1) > 0x3FE) {
          goto LABEL_218;
        }
        unint64_t v140 = v139;
        uint8x8_t v141 = (uint8x8_t)vcnt_s8((int8x8_t)v139);
        v141.i16[0] = vaddlv_u8(v141);
        if (v141.u32[0] > 1uLL) {
          goto LABEL_218;
        }
        uint64_t v142 = CVDictionaryGetIntValueWithDefault(v85, @"TileHeight", 1);
        *(void *)&v375[v80 / 4] = v142;
        if ((unint64_t)(v142 - 1) > 0x3FE) {
          goto LABEL_218;
        }
        unint64_t v143 = v142;
        uint8x8_t v144 = (uint8x8_t)vcnt_s8((int8x8_t)v142);
        v144.i16[0] = vaddlv_u8(v144);
        if (v144.u32[0] > 1uLL) {
          goto LABEL_218;
        }
        unsigned int v276 = v115;
        if (v108 == 2)
        {
          v145 = v342;
        }
        else
        {
          int BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(theDict, @"MultiSlice", 0);
          v145 = v342;
          if (BoolValueWithDefault)
          {
            int v264 = BoolValueWithDefault;
            unint64_t v290 = CVDictionaryGetIntValueWithDefault(v338, @"NumberOfSlices", 0);
            if (v290 < 2)
            {
              uint64_t v102 = 4294960635;
              goto LABEL_218;
            }
          }
          else
          {
            int v264 = 0;
          }
        }
        unint64_t v154 = CVDictionaryGetIntValueWithDefault(v145, v267, 0);
        *(void *)&v372[v80 / 4] = v154;
        if (v154 > v140) {
          goto LABEL_218;
        }
        unint64_t v155 = v154;
        unint64_t v156 = CVDictionaryGetIntValueWithDefault(v145, v266, 0);
        *(void *)&v371[v80 / 4] = v156;
        if (v156 > v143) {
          goto LABEL_217;
        }
        unint64_t v157 = (v103 + v303 + v155 + v140 - 1) / v140;
        if (v157 * v140 < v140) {
          goto LABEL_217;
        }
        unsigned int v158 = v114;
        *(void *)&v369[v80 / 4] = v157;
        unint64_t v159 = ((unint64_t)v317 + v156 + v143 + v309 - 1) / v143;
        if (v159 * v143 < v143) {
          goto LABEL_217;
        }
        *(void *)&v368[v80 / 4] = v159;
        if (a10 != 0 || v140 % v307 || v143 % v321) {
          goto LABEL_217;
        }
        unsigned int v160 = (int)v157 * (int)v140 / v276;
        char v161 = __clz(v160);
        if (0x80000000 >> v161 >= v160) {
          char v162 = 31;
        }
        else {
          char v162 = 32;
        }
        char v163 = v162 - v161;
        unsigned int v164 = (int)v159 * (int)v143 / v158;
        char v165 = __clz(v164);
        if (0x80000000 >> v165 >= v164) {
          char v166 = 31;
        }
        else {
          char v166 = 32;
        }
        char v322 = v166;
        uint64_t v167 = v113 << v163;
        *(void *)&v364[v80 / 4] = v113 << v163;
        unint64_t v168 = (v140 * v143 * v319 + 7) >> 3;
        *(void *)&v357[v80 / 4] = v168;
        if ((v108 - 3) > 1)
        {
          uint64_t v170 = 128;
        }
        else
        {
          int v169 = areUniversalCompressedBuffers2KAligned();
          uint64_t v170 = 128;
          if (v169) {
            uint64_t v170 = 2048;
          }
        }
        CFDictionaryRef v35 = v338;
        unint64_t v77 = v343;
        unint64_t v138 = (unint64_t)v305;
        unint64_t v171 = v159 * v157 * v168;
        uint64_t v172 = (v171 + v170 - 1) & -v170;
        if (((v171 + 127) & 0xFFFFFFFFFFFFFF80) != v172) {
          CVDictionaryGetIntValueWithDefault(theDict, @"PixelFormat", 0);
        }
        unint64_t v173 = ((v167 << (v322 - v165)) + 127) & 0xFFFFFFFFFFFFFF80;
        *(void *)((char *)v356 + v80) = v173;
        v381[v80 / 8] = v293;
        *(void *)&v366[v80 / 4] = v293;
        *(void *)&v374[v80 / 4] = v172;
        v367[v80 / 8] = v293 + v172 * v290;
        *(void *)&v373[v80 / 4] = v173;
        *(void *)v352 = v293 + (v172 + v173) * v290;
        int v268 = 1;
        a24 = buffer;
        CFArrayRef v78 = theArray;
        CFIndex v107 = v340;
        goto LABEL_197;
      }
LABEL_166:
      unint64_t v77 = v343;
      v288 = v109;
      if (v265)
      {
        if (v292) {
          unint64_t v138 = v292;
        }
        else {
          unint64_t v138 = a13;
        }
        v353 = (__CFString *)v138;
        uint64_t v147 = CVDictionaryGetIntValueWithDefault(v342, @"BytesPerRowAlignment", v138);
        v389[v80 / 8] = v147;
        size_t v148 = IOSurfaceGetAllocSize((IOSurfaceRef)buffer);
        unint64_t v149 = ((unint64_t)v317 + v321 - 1) / v321 * v147;
        *(void *)v352 = v149;
        unint64_t v150 = *(void *)&a27[v80 / 4];
        CFDictionaryRef v35 = v338;
        CFArrayRef v79 = (const __CFArray *)v325;
        if (v150 + v149 > v148) {
          goto LABEL_217;
        }
        v381[v80 / 8] = v150;
        if (((v150 + 63) & 0xFFFFFFFFFFFFFFC0) != v150) {
          goto LABEL_217;
        }
        v288->isa = (void *)v150;
        v379[v80 / 8] = v149;
        v362[v80 / 8] = CVDictionaryGetIntValueWithDefault(v342, v273, 0);
        unint64_t v151 = a9;
        a24 = buffer;
        goto LABEL_202;
      }
      uint64_t v152 = _CVPixelBufferLayoutPlane(v307, v321, v319, (uint64_t)v349, v270, v303, (unint64_t)v317, v100, v101, v103, v309, (unint64_t)v277, v274, v315, 0, 0, v292, &v389[v80 / 8], &v381[v80 / 8],
               (unint64_t *)v352,
               0);
      uint64_t v153 = 0;
      CFDictionaryRef v35 = v338;
      unint64_t v138 = (unint64_t)v305;
      a24 = buffer;
      if (v152)
      {
        uint64_t v102 = v152;
        goto LABEL_218;
      }
LABEL_198:
      v362[v80 / 8] = CVDictionaryGetIntValueWithDefault(v342, v273, v153);
      if (a24)
      {
        unint64_t v151 = a9;
      }
      else
      {
        uint64_t v174 = *(void *)v352;
        v379[v80 / 8] = *(void *)v352 - (unint64_t)v288->isa;
        unint64_t v151 = a9;
        unint64_t v138 = (v301 + v174) / a9;
      }
      CFArrayRef v79 = (const __CFArray *)v325;
LABEL_202:
      unint64_t v175 = (v138 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      v353 = (__CFString *)v175;
      if (!is_mul_ok(v151, v175)) {
        goto LABEL_217;
      }
      v305 = (__CFString *)((v138 + 3) & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v176 = v175 * v151;
      unint64_t v355 = v175 * v151;
      unint64_t v82 = v107 + 1;
      v80 += 8;
      v81 = v342;
      if (v272 == v80)
      {
        int v177 = v268;
        LODWORD(v102) = v264;
        goto LABEL_220;
      }
    }
  }
  unint64_t v176 = 0;
  int v177 = 0;
  LODWORD(v102) = 0;
  unint64_t v290 = 1;
  CFDictionaryRef v35 = v338;
LABEL_220:
  unint64_t v354 = v176;
  CFMutableDictionaryRef Mutable = cf;
  BOOL v178 = v271;
LABEL_221:
  unint64_t v188 = v315;
  if (a24)
  {
    int v302 = 1;
    goto LABEL_233;
  }
  BOOL v245 = __CFADD__(v176, v315);
  v176 += v315;
  if (v245)
  {
LABEL_225:
    uint64_t v102 = 4294960634;
LABEL_226:
    if (Mutable) {
      CFRelease(Mutable);
    }
    return v102;
  }
  int v302 = 0;
  unint64_t v355 = v176;
LABEL_233:
  if (!v178)
  {
    v352[0] = kIOSurfaceSubsamplingNone;
    CFTypeID v197 = CFGetTypeID(Mutable);
    if (v197 == CFDictionaryGetTypeID())
    {
      MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, Mutable);
      v199 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v199 != CFDictionaryGetValue(v35, @"IOSurfacePurgeable")) {
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F130], v199);
      }
      if (!v284) {
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F278], v199);
      }
      CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F2C0], (uint64_t)v311);
      CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F0E8], a9);
      int v269 = v177;
      if (!v177) {
        CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E4F2EFE0], (uint64_t)v353);
      }
      CFStringRef v200 = (const __CFString *)*MEMORY[0x1E4F2F138];
      if (v77) {
        int v201 = 0;
      }
      else {
        int v201 = v381[0];
      }
      setIntValue(MutableCopy, (const __CFString *)*MEMORY[0x1E4F2F138], v201);
      v202 = (const void *)*MEMORY[0x1E4F2EFB8];
      if (v302)
      {
        uint64_t v203 = v355;
      }
      else
      {
        unint64_t v204 = CVDictionaryGetIntValueWithDefault(MutableCopy, v202, 0);
        if (v355 <= v204) {
          uint64_t v203 = v204;
        }
        else {
          uint64_t v203 = v355;
        }
        unint64_t v355 = v203;
      }
      CVDictionarySetSInt64Value(MutableCopy, v202, v203);
      if (!v269)
      {
        CFStringRef v205 = (const __CFString *)*MEMORY[0x1E4F2EFD8];
        int v206 = CVDictionaryGetIntValueWithDefault(theDict, @"BitsPerBlock", 8);
        setIntValue(MutableCopy, v205, v206 / 8);
      }
      CFStringRef v207 = (const __CFString *)*MEMORY[0x1E4F2F0A0];
      int v208 = CVDictionaryGetIntValueWithDefault(theDict, @"BlockWidth", 1);
      setIntValue(MutableCopy, v207, v208);
      CFStringRef v209 = (const __CFString *)*MEMORY[0x1E4F2F098];
      int v210 = CVDictionaryGetIntValueWithDefault(theDict, @"BlockHeight", 1);
      setIntValue(MutableCopy, v209, v210);
      if (a24)
      {
        uint64_t v211 = CVDictionaryGetIntValueWithDefault(Mutable, v200, 0);
        if (((v211 + 63) & 0xFFFFFFFFFFFFFFC0) != v211) {
          goto LABEL_377;
        }
        setIntValue(MutableCopy, v200, v211);
      }
      if (v102) {
        BOOL v212 = v290 > 1;
      }
      else {
        BOOL v212 = 0;
      }
      int v213 = v212;
      int v298 = v213;
      if (v213 == 1) {
        setIntValue(MutableCopy, (const __CFString *)*MEMORY[0x1E4F2F290], v290);
      }
      v214 = CFDictionaryGetValue(theDict, @"PixelFormat");
      if (v214) {
        CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F150], v214);
      }
      properties = MutableCopy;
      unint64_t v344 = v77;
      if (v77)
      {
        CFDictionaryRef v339 = v35;
        cfa = Mutable;
        v341 = CFArrayCreateMutable(0, v77, MEMORY[0x1E4F1D510]);
        CFIndex v215 = 0;
        v337 = (const void *)*MEMORY[0x1E4F2F258];
        v336 = (const void *)*MEMORY[0x1E4F2F220];
        v335 = (const void *)*MEMORY[0x1E4F2F160];
        v333 = (const void *)*MEMORY[0x1E4F2F240];
        v330 = (const void *)*MEMORY[0x1E4F2F248];
        v350 = (__CFString *)*MEMORY[0x1E4F2F1F0];
        v347 = (__CFString *)*MEMORY[0x1E4F2F1E8];
        v312 = (__CFString *)*MEMORY[0x1E4F2EFB0];
        v329 = (__CFString *)*MEMORY[0x1E4F2F1D8];
        v327 = (__CFString *)*MEMORY[0x1E4F2F180];
        v326 = (__CFString *)*MEMORY[0x1E4F2F168];
        v324 = (__CFString *)*MEMORY[0x1E4F2F1C8];
        v323 = (__CFString *)*MEMORY[0x1E4F2F1C0];
        v320 = (__CFString *)*MEMORY[0x1E4F2F230];
        v318 = (__CFString *)*MEMORY[0x1E4F2F250];
        v316 = (__CFString *)*MEMORY[0x1E4F2F260];
        v314 = (__CFString *)*MEMORY[0x1E4F2F228];
        v299 = (__CFString *)(v369[0] * v357[0]);
        v310 = (__CFString *)*MEMORY[0x1E4F2F1B0];
        v308 = (__CFString *)*MEMORY[0x1E4F2F1B8];
        v296 = (__CFString *)*MEMORY[0x1E4F2F188];
        v297 = (__CFString *)*MEMORY[0x1E4F2F190];
        v306 = (__CFString *)*MEMORY[0x1E4F2F170];
        CFStringRef allocatora = (const __CFString *)*MEMORY[0x1E4F2F218];
        v289 = (__CFString *)*MEMORY[0x1E4F2F1E0];
        v279 = (__CFString *)*MEMORY[0x1E4F2F1D0];
        v285 = (__CFString *)*MEMORY[0x1E4F2F208];
        v283 = (__CFString *)*MEMORY[0x1E4F2F210];
        v295 = (const void *)*MEMORY[0x1E4F2F178];
        v304 = v353;
        while (1)
        {
          v216 = CFArrayGetValueAtIndex(theArray, v215);
          v217 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CVDictionarySetSInt64Value(v217, v337, a21[v215]);
          CVDictionarySetSInt64Value(v217, v336, a22[v215]);
          CVDictionarySetSInt64Value(v217, v335, v380[v215]);
          unint64_t v218 = v381[v215];
          CVDictionarySetSInt64Value(v217, v333, v218);
          CVDictionarySetSInt64Value(v217, v330, v379[v215]);
          int v219 = CVDictionaryGetIntValueWithDefault(v216, @"BlockWidth", 1);
          setIntValue(v217, v350, v219);
          v220 = v216;
          int v221 = CVDictionaryGetIntValueWithDefault(v216, @"BlockHeight", 1);
          setIntValue(v217, v347, v221);
          uint64_t v222 = v361[v215];
          if (v222) {
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnLeft, v222);
          }
          uint64_t v223 = v360[v215];
          if (v223) {
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnRight, v223);
          }
          uint64_t v224 = v359[v215];
          if (v224) {
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnTop, v224);
          }
          uint64_t v225 = v358[v215];
          if (v225) {
            setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnBottom, v225);
          }
          uint64_t v226 = v362[v215];
          if (v226) {
            setIntValue(v217, v312, v362[v215]);
          }
          int v227 = v377[v215];
          if ((v227 - 1) >= 4 && (v227 || v226 != 5))
          {
            setIntValue(v217, v306, v378[2 * v215] / 8);
            CVDictionarySetSInt64Value(v217, v295, v389[v215]);
            goto LABEL_301;
          }
          setIntValue(v217, v329, v377[v215]);
          setIntValue(v217, v327, v364[2 * v215]);
          setIntValue(v217, v326, v370[2 * v215]);
          int v228 = v376[2 * v215];
          setIntValue(v217, v324, v228);
          int v229 = v375[2 * v215];
          setIntValue(v217, v323, v229);
          setIntValue(v217, v320, v372[2 * v215]);
          setIntValue(v217, v318, v371[2 * v215]);
          uint64_t v230 = *(void *)&v369[2 * v215];
          setIntValue(v217, v316, v230);
          setIntValue(v217, v314, v368[2 * v215]);
          setIntValue(v217, (const __CFString *)local_kIOSurfacePlaneBitsPerElement, v378[2 * v215]);
          if ((v227 - 2) < 3) {
            break;
          }
          if (v227)
          {
            if (v227 == 1)
            {
              setIntValue(v217, v285, v365[2 * v215]);
              setIntValue(v217, v283, v363[2 * v215]);
              setIntValue(v217, v308, v218);
              setIntValue(v217, v310, v366[2 * v215]);
            }
            goto LABEL_301;
          }
          if (v226 == 5)
          {
            setIntValue(v217, v310, v218);
            setIntValue(v217, v308, v367[v215]);
LABEL_296:
            uint64_t v231 = *(void *)&v357[2 * v215];
            setIntValue(v217, v297, v231);
            setIntValue(v217, v296, v231 * v230);
            setIntValue(v217, v350, v228);
            setIntValue(v217, v347, v229);
            setIntValue(v217, v306, v231);
            if (v298)
            {
              setIntValue(v217, v289, v374[2 * v215]);
              setIntValue(v217, allocatora, v373[2 * v215]);
            }
            v304 = v299;
            if (v227 == 4)
            {
              int v232 = CVDictionaryGetIntValueWithDefault(v220, @"CompressionFootprint", 0);
              if (!v232)
              {
                v353 = v299;
                CFMutableDictionaryRef Mutable = cfa;
                goto LABEL_376;
              }
              setIntValue(v217, v279, v232);
              v304 = v299;
            }
          }
LABEL_301:
          unint64_t v77 = v344;
          setComponentsProperties(theDict, v217, v215, v344, properties);
          getSubsamplingForIOSurfaceProperty((const __CFDictionary *)v220, theDict, v352);
          CFArrayAppendValue(v341, v217);
          CFRelease(v217);
          if (v344 == ++v215)
          {
            v353 = v304;
            CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E4F2F238], v341);
            setIntValue(properties, (const __CFString *)*MEMORY[0x1E4F2F298], v352[0]);
            CFRelease(v341);
            CFMutableDictionaryRef Mutable = cfa;
            a24 = buffer;
            CFDictionaryRef v35 = v339;
            goto LABEL_324;
          }
        }
        setIntValue(v217, v310, v218);
        setIntValue(v217, v308, v367[v215]);
        if ((v227 - 3) > 1) {
          goto LABEL_301;
        }
        goto LABEL_296;
      }
      setComponentsProperties(theDict, 0, 0, 1uLL, MutableCopy);
      getSubsamplingForIOSurfaceProperty(theDict, theDict, v352);
      setIntValue(MutableCopy, (const __CFString *)*MEMORY[0x1E4F2F298], v352[0]);
      if ((void)a10) {
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnLeft, a10);
      }
      if (*((void *)&a10 + 1)) {
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnTop, SDWORD2(a10));
      }
      if (a11) {
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnRight, a11);
      }
      if (a12) {
        setIntValue(MutableCopy, (const __CFString *)local_kIOSurfacePlaneExtendedPixelsOnBottom, a12);
      }
LABEL_324:
      CFArrayRef v233 = (const __CFArray *)CFDictionaryGetValue(v35, @"CacheMode");
      if (v233)
      {
        CFArrayRef v234 = v233;
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v234) && CFArrayGetCount(v234) >= 1)
        {
          v236 = CFArrayGetValueAtIndex(v234, 0);
          CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E4F2EFE8], v236);
        }
      }
      if (v282)
      {
        v237 = CFDictionaryGetValue(v282, @"PixelBufferPoolNameKey");
        if (v237) {
          CFDictionarySetValue(properties, (const void *)*MEMORY[0x1E4F2F128], v237);
        }
      }
      v238 = a29;
      if (!v300) {
        goto LABEL_371;
      }
      if (a24)
      {
        if (a25) {
          uint64_t ChildIOSurface = (uint64_t)CreateChildIOSurface(a25, properties, v77, (unsigned int *)a26);
        }
        else {
          uint64_t ChildIOSurface = IOSurfaceCreateChildSurface();
        }
      }
      else
      {
        uint64_t ChildIOSurface = (uint64_t)IOOrEXSurfaceCreate(properties);
      }
      v240 = (__IOSurface *)ChildIOSurface;
      if (ChildIOSurface)
      {
        char v241 = v281 ^ 1;
        if (!v269) {
          char v241 = 1;
        }
        if ((v241 & 1) == 0 && v344)
        {
          for (CFIndex i = 0; v344 != i; ++i)
          {
            CFDictionaryRef v243 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, i);
            int v244 = v377[i];
            if (v244 == 3)
            {
              if (v290 <= 1) {
                goto LABEL_350;
              }
            }
            else
            {
              BOOL v245 = v244 != 4 || v290 >= 2;
              if (!v245)
              {
LABEL_350:
                BaseAddressOfCompressedTileHeaderRegionOfPlane = (void *)IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
                unsigned __int8 valuePtr = 0;
                CFNumberRef v247 = (const __CFNumber *)CFDictionaryGetValue(v243, @"CompressionMetadataPatternSignallingConstant");
                if (v247)
                {
                  CFNumberRef v248 = v247;
                  CFTypeID v249 = CFGetTypeID(v247);
                  if (v249 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue(v248, kCFNumberSInt8Type, &valuePtr);
                    memset(BaseAddressOfCompressedTileHeaderRegionOfPlane, valuePtr, *((void *)v356 + i));
                  }
                }
              }
            }
          }
        }
        int v250 = v280;
        if (v269) {
          int v250 = 1;
        }
        unint64_t v251 = v344;
        if (((v302 | v250) & 1) == 0)
        {
          IOSurfaceRef BaseAddress = IOOrEXSurfaceGetBaseAddress(v240);
          if (v344)
          {
            v253 = (_DWORD *)((char *)BaseAddress + 4);
            v254 = (unsigned int *)v389;
            v255 = v381;
            do
            {
              unsigned int v256 = *(_DWORD *)v255++;
              *(v253 - 1) = bswap32(v256);
              unsigned int v257 = *v254;
              v254 += 2;
              _DWORD *v253 = bswap32(v257);
              v253 += 2;
              --v251;
            }
            while (v251);
          }
        }
        if (a17) {
          *a17 = 0;
        }
        v238 = a29;
        v258 = a28;
        if (a18) {
          *a18 = v353;
        }
        if (a19) {
          *a19 = v354;
        }
        if (a23)
        {
          CFTypeRef v259 = CFRetain(v240);
          v258 = a28;
          *a23 = (unint64_t)v259;
        }
        if (v258) {
          unint64_t *v258 = 0;
        }
        CFRelease(v240);
LABEL_371:
        uint64_t v102 = 0;
        if (v238)
        {
          MutableCFDictionaryRef Copy = properties;
          if (properties)
          {
            uint64_t v102 = 0;
            *v238 = (void *)CFRetain(properties);
            goto LABEL_379;
          }
        }
        else
        {
          MutableCFDictionaryRef Copy = properties;
        }
LABEL_378:
        if (!MutableCopy) {
          goto LABEL_226;
        }
LABEL_379:
        CFRelease(MutableCopy);
        goto LABEL_226;
      }
LABEL_376:
      MutableCFDictionaryRef Copy = properties;
    }
    else
    {
      MutableCFDictionaryRef Copy = 0;
    }
LABEL_377:
    uint64_t v102 = 4294960634;
    goto LABEL_378;
  }
  if (!v300) {
    goto LABEL_315;
  }
  v191 = CFAllocatorAllocate(allocator, v176, 0);
  if (v191)
  {
    unint64_t v192 = ((unint64_t)v191 + v188 - 1) / v188 * v188;
    if (v77)
    {
      uint64_t v193 = 0;
      v194 = a18;
      do
      {
        v195 = (_DWORD *)(v192 + v193 * 8);
        unsigned int v196 = bswap32(v389[v193]);
        _DWORD *v195 = bswap32(v381[v193]);
        v195[1] = v196;
        ++v193;
      }
      while (v77 != v193);
    }
    else
    {
      v192 += v381[0];
      v194 = a18;
    }
    if (a17) {
      *a17 = v192;
    }
    if (v194) {
      *v194 = v353;
    }
    if (a19) {
      *a19 = v354;
    }
    if (a23) {
      *a23 = 0;
    }
    if (a28)
    {
      uint64_t v102 = 0;
      *a28 = (unint64_t)v191;
      goto LABEL_226;
    }
LABEL_315:
    uint64_t v102 = 0;
    goto LABEL_226;
  }
  return 4294960634;
}

uint64_t CVDictionaryGetIntValueWithDefault(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t valuePtr = a3;
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (a2)
    {
      if (v6 == TypeID)
      {
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, a2);
        if (Value)
        {
          CFNumberRef v9 = Value;
          CFTypeID v10 = CFGetTypeID(Value);
          if (v10 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v9, kCFNumberLongType, &valuePtr);
            return valuePtr;
          }
        }
      }
    }
  }
  return v3;
}

const void *CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(unsigned int a1)
{
  CVKTraceInit();
  if (!_pixelFormatDictionary) {
    pthread_once(&once, _pixelFormatDictionaryInit);
  }
  pthread_mutex_lock(&_pixelFormatMutex);
  CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)_pixelFormatDictionary, (const void *)a1);
  pthread_mutex_unlock(&_pixelFormatMutex);
  return Value;
}

const void *CVPixelBuffer::copyAttachment(CVPixelBuffer *this, const __CFString *a2, CVAttachmentMode *a3)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    if (v6)
    {
      long long v7 = (__IOSurface *)v6;
      CFStringRef v8 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      uint64_t v9 = copyIOSurfaceAttachment(v7, v8);
      if (v9)
      {
        CFTypeID v10 = (const void *)v9;
        if (a3) {
          *a3 = kCVAttachmentMode_ShouldPropagate;
        }
        goto LABEL_16;
      }
      CFNumberRef Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2);
      if (Value)
      {
        CFTypeID v10 = Value;
        if (a3) {
          *a3 = kCVAttachmentMode_ShouldPropagate;
        }
      }
      else
      {
        CFTypeID v10 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
        if (!v10)
        {
LABEL_16:
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
          return v10;
        }
        if (a3) {
          *a3 = kCVAttachmentMode_ShouldNotPropagate;
        }
      }
      CFRetain(v10);
      goto LABEL_16;
    }
  }

  return CVBuffer::copyAttachment((CFDictionaryRef *)this, a2, a3);
}

uint64_t CVPixelBufferBacking::getIOOrEXSurface(CVPixelBufferBacking *this)
{
  return *((void *)this + 57);
}

void pixelBufferBackingCreateIOSurfaceWiringAssertion(__IOSurface *a1, os_unfair_lock_t lock, uint64_t *a3, int *a4, int a5)
{
  if (!a1) {
    return;
  }
  os_unfair_lock_lock(lock);
  if (!*a3 && (*a4 & 0xE) == 2)
  {
    uint64_t WiringAssertion = IOSurfaceCreateWiringAssertion();
    *a3 = WiringAssertion;
    int v11 = *a4;
    if (WiringAssertion)
    {
      *a4 = v11 | 4;
      goto LABEL_14;
    }
LABEL_13:
    *a4 = v11 | 8;
    IOSurfaceID ID = IOSurfaceGetID(a1);
    syslog(3, "CoreVideo: Failed to create wiring assertion for IOSurface ID 0x%x", ID);
    goto LABEL_14;
  }
  if (a5 && !*a3 && !*a4)
  {
    int v12 = (const void *)IOSurfaceCreateWiringAssertion();
    if (v12)
    {
      CFRelease(v12);
      goto LABEL_14;
    }
    int v11 = *a4;
    goto LABEL_13;
  }
LABEL_14:

  os_unfair_lock_unlock(lock);
}

const void *CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(const __CFString *a1)
{
  pthread_once(&intializeAndGetIOSurfaceTranslationDictionaries(__CFDictionary const**,__CFDictionary const**)::once, initCVBufferKeyToIOSurfaceKeyDictionary);
  if (!a1) {
    return 0;
  }
  CFDictionaryRef v2 = (const __CFDictionary *)cvBufferKeyToIOSurfaceKeyDictionary;

  return CFDictionaryGetValue(v2, a1);
}

uint64_t copyIOSurfaceAttachment(__IOSurface *a1, const __CFString *a2)
{
  if (!a2) {
    return 0;
  }
  if (!_os_feature_enabled_impl() || !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F2F068]))
  {
    CFNumberRef v5 = 0;
    goto LABEL_10;
  }
  int valuePtr = 0;
  CFNumberRef v4 = (const __CFNumber *)IOSurfaceCopyValue(a1, (CFStringRef)*MEMORY[0x1E4F2F070]);
  CFNumberRef v5 = v4;
  if (!v4
    || (CFTypeID v6 = CFGetTypeID(v4), v6 != CFNumberGetTypeID())
    || (CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr), !valuePtr)
    || (uint64_t v7 = CGColorSpaceCreateWithID()) == 0)
  {
LABEL_10:
    CFTypeRef v9 = IOSurfaceCopyValue(a1, a2);
    uint64_t v8 = (uint64_t)copyAttachmentDeserializedIfNecessary(a2, v9);
    if (!v5) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  uint64_t v8 = v7;
  CFTypeRef v9 = 0;
LABEL_11:
  CFRelease(v5);
LABEL_12:
  if (v9) {
    CFRelease(v9);
  }
  return v8;
}

CFTypeRef copyAttachmentDeserializedIfNecessary(const __CFString *a1, CFTypeRef cf)
{
  if (cf)
  {
    CFTypeRef v4 = CFRetain(cf);
    if (!a1) {
      return v4;
    }
  }
  else
  {
    CFTypeRef v4 = 0;
    if (!a1) {
      return v4;
    }
  }
  int v5 = CFEqual((CFTypeRef)*MEMORY[0x1E4F2F068], a1);
  if (!cf || !v5) {
    return v4;
  }
  pthread_mutex_lock(&sCVPixelBufferGlobalCache_Mutex);
  if ((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList == cf
    || sCVPixelBufferGlobalCache_CFPropertyList && CFEqual((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList, cf))
  {
    if (sCVPixelBufferGlobalCache_ColorSpace)
    {
      CFTypeRef v6 = CFRetain((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace);
      pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
      if (!v6)
      {
LABEL_21:
        if (!v4) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
LABEL_20:
      CFRetain(v6);
      goto LABEL_21;
    }
  }
  else
  {
    CGColorSpaceRef v7 = CGColorSpaceCreateWithPropertyList(cf);
    if (v7)
    {
      CFTypeRef v6 = v7;
      CFRetain(v7);
      if (sCVPixelBufferGlobalCache_ColorSpace) {
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace);
      }
      sCVPixelBufferGlobalCache_ColorSpace = (uint64_t)v6;
      CFRetain(cf);
      if (sCVPixelBufferGlobalCache_CFPropertyList) {
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList);
      }
      sCVPixelBufferGlobalCache_CFPropertyList = (uint64_t)cf;
      pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
      goto LABEL_20;
    }
  }
  pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
  CFTypeRef v6 = 0;
  if (v4) {
LABEL_22:
  }
    CFRelease(v4);
LABEL_23:
  if (v6) {
    CFRelease(v6);
  }
  return v6;
}

void CVKTraceInit()
{
  if (initializeOnceToken != -1) {
    dispatch_once_f(&initializeOnceToken, 0, (dispatch_function_t)fig_ktrace_initialize);
  }
}

void setIntValue(__CFDictionary *a1, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t CVDictionarySetSInt64Value(__CFDictionary *a1, const void *a2, uint64_t a3)
{
  uint64_t valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
  CFNumberRef v6 = v5;
  if (a1 && v5)
  {
    CFDictionarySetValue(a1, a2, v5);
    uint64_t v7 = 0;
LABEL_5:
    CFRelease(v6);
    return v7;
  }
  uint64_t v7 = 4294960634;
  if (v5) {
    goto LABEL_5;
  }
  return v7;
}

uint64_t CVPixelBufferBacking::getDefaultBytesPerRowAlignment(CVPixelBufferBacking *this)
{
  if ((CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::didCheck & 1) == 0)
  {
    Boolean keyExistsAndHasValidFormat = 0;
    AppIntegerCFNumberRef Value = CFPreferencesGetAppIntegerValue(@"corevideo_minimum_alignment", @"com.apple.corevideo", &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat) {
      CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::uint64_t result = AppIntegerValue;
    }
    CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::didCheck = 1;
  }
  return CVPixelBufferBacking::getDefaultBytesPerRowAlignment(void)::result;
}

IOSurfaceRef IOOrEXSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetBaseAddress(buffer);
  }
  return buffer;
}

CFDictionaryRef setComponentsProperties(const __CFDictionary *theDict, __CFDictionary *a2, CFIndex a3, unint64_t a4, __CFDictionary *a5)
{
  CFDictionaryRef v9 = theDict;
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  long long v51 = 0uLL;
  if (!a2 && a4 > 1 || a4 == 1 && !a5) {
    return theDict;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"Planes");
  ValueAtIndex = v9;
  if (Value) {
    ValueAtIndex = CFArrayGetValueAtIndex(Value, a3);
  }
  int BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(v9, @"ContainsYCbCr", 0);
  int v13 = CVDictionaryGetBoolValueWithDefault(v9, @"ContainsRGB", 0);
  int v14 = CVDictionaryGetBoolValueWithDefault(v9, @"ContainsAlpha", 0);
  int v15 = CVDictionaryGetBoolValueWithDefault(v9, @"ContainsGrayscale", 0);
  int v16 = CVDictionaryGetBoolValueWithDefault(v9, @"ContainsSenselArray", 0);
  if (a3) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = BoolValueWithDefault == 0;
  }
  char v18 = !v17;
  if (a4 >= 2 && (v18 & 1) != 0 || (int v19 = 0, a4 >= 3) && a3 && BoolValueWithDefault && !v14) {
    int v19 = 1;
  }
  if (((a4 == 1) & v18) != 0) {
    int v20 = v19 + 3;
  }
  else {
    int v20 = v19;
  }
  if (a3 == 1 && BoolValueWithDefault && (a4 == 2 || a4 == 3 && v14)) {
    v20 += 2;
  }
  BOOL v21 = v13 && v14 == 0;
  BOOL v22 = v21;
  if (a4 == 2 && !a3 && v22)
  {
    ++v20;
  }
  else
  {
    if (a3 != 1) {
      BOOL v22 = 0;
    }
    if (a4 == 2 && v22)
    {
      v20 += 2;
    }
    else
    {
      if (v13) {
        BOOL v23 = a4 >= 3;
      }
      else {
        BOOL v23 = 1;
      }
      if (!v23 && a3 == 0) {
        v20 += 3;
      }
    }
  }
  HIDWORD(v47) = v15;
  int v48 = v13;
  int v26 = a4 > 2 && v13 != 0;
  int v46 = v16;
  LODWORD(v47) = v14;
  if (v14) {
    BOOL v27 = a3 + 1 == a4;
  }
  else {
    BOOL v27 = 0;
  }
  if (v27) {
    ++v26;
  }
  if (v15) {
    ++v26;
  }
  unsigned int v28 = v26 + v20;
  int v49 = BoolValueWithDefault;
  if (v16)
  {
    uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BlockWidth", 1);
    uint64_t v30 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BlockHeight", 1);
    unsigned int v31 = v28 + 2;
    if (IntValueWithDefault != 2) {
      unsigned int v31 = v28;
    }
    if (v30 == 2) {
      unsigned int v28 = v31 + 2;
    }
    else {
      unsigned int v28 = v31;
    }
  }
  uint64_t v32 = 0;
  uint64_t v33 = v28 <= 1 ? 1 : v28;
  CFIndex capacity = v33;
  uint64_t v34 = 4 * v33;
  do
  {
    *(_DWORD *)((char *)&v51 + v32) = CVDictionaryGetIntValueWithDefault(v9, @"BitsPerComponent", 8);
    v32 += 4;
  }
  while (v34 != v32);
  CFDictionaryRef v35 = a2 ? a2 : a5;
  CFDictionaryRef theDict = (const __CFDictionary *)CVDictionarySetSInt32Array(v35, (const void *)*MEMORY[0x1E4F2F198], (char *)&v51, capacity);
  if (theDict) {
    return theDict;
  }
  CFAllocatorRef v36 = CFDictionaryGetValue(v9, @"ComponentRange");
  if (v36)
  {
    CFAllocatorRef v37 = v36;
    if (CFEqual(v36, @"VideoRange"))
    {
      int v38 = 2;
LABEL_87:
      LODWORD(v51) = v38;
      goto LABEL_89;
    }
    if (CFEqual(v37, @"FullRange"))
    {
      int v38 = 1;
      goto LABEL_87;
    }
    if (CFEqual(v37, @"WideRange"))
    {
      int v38 = 3;
      goto LABEL_87;
    }
  }
  int v38 = 0;
  LODWORD(v51) = 0;
LABEL_89:
  if (v28 >= 2)
  {
    int v39 = (int *)&v51 + 1;
    CFIndex v40 = capacity - 1;
    do
    {
      *v39++ = v38;
      --v40;
    }
    while (v40);
  }
  if (a2) {
    int v41 = a2;
  }
  else {
    int v41 = a5;
  }
  CFDictionaryRef theDict = (const __CFDictionary *)CVDictionarySetSInt32Array(v41, (const void *)*MEMORY[0x1E4F2F1A8], (char *)&v51, capacity);
  if (!theDict)
  {
    if (v49)
    {
      if (!a3)
      {
        LODWORD(v51) = 5;
        if (capacity == 3) {
          *(void *)((char *)&v51 + 4) = 0x600000007;
        }
        goto LABEL_116;
      }
      if (a3 == 1)
      {
        uint64_t v42 = 0x600000007;
LABEL_100:
        *(void *)&long long v51 = v42;
        goto LABEL_116;
      }
      if (a3 != 2 || !v47) {
        goto LABEL_116;
      }
    }
    else if (v48)
    {
      if (!a3)
      {
        if (a4 != 2 || v47)
        {
          *(void *)&long long v51 = 0x300000004;
          DWORD2(v51) = 2;
          if (capacity == 4) {
            HIDWORD(v51) = 1;
          }
          goto LABEL_116;
        }
        int v43 = 2;
        goto LABEL_115;
      }
      if (a3 != 1 || (v47 & 1) == 0)
      {
        if (a3 == 1 && !v47)
        {
          uint64_t v42 = 0x400000003;
          goto LABEL_100;
        }
LABEL_116:
        if (a2) {
          v44 = a2;
        }
        else {
          v44 = a5;
        }
        return (const __CFDictionary *)CVDictionarySetSInt32Array(v44, (const void *)*MEMORY[0x1E4F2F1A0], (char *)&v51, capacity);
      }
    }
    else if (!v47)
    {
      if (v46)
      {
        if (v28 <= 1) {
          unsigned int v45 = 1;
        }
        else {
          unsigned int v45 = v28;
        }
        bzero(&v51, 4 * v45);
      }
      else
      {
        LODWORD(v51) = 0;
      }
      goto LABEL_116;
    }
    int v43 = 1;
LABEL_115:
    LODWORD(v51) = v43;
    goto LABEL_116;
  }
  return theDict;
}

uint64_t CVDictionaryGetBoolValueWithDefault(const void *a1, const void *a2, uint64_t a3)
{
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (a2)
    {
      if (v6 == TypeID)
      {
        CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, a2);
        if (Value)
        {
          CFDictionaryRef v9 = Value;
          if (CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
          {
            return 1;
          }
          else if (CFEqual(v9, (CFTypeRef)*MEMORY[0x1E4F1CFC8]))
          {
            return 0;
          }
          else
          {
            return a3;
          }
        }
      }
    }
  }
  return a3;
}

uint64_t CVDictionarySetSInt32Array(__CFDictionary *a1, const void *a2, char *a3, CFIndex capacity)
{
  if (!capacity) {
    return 0;
  }
  uint64_t v7 = capacity;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, capacity, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294960634;
  }
  CFDictionaryRef v9 = Mutable;
  while (1)
  {
    CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, a3);
    if (!v10) {
      break;
    }
    CFNumberRef v11 = v10;
    CFArrayAppendValue(v9, v10);
    CFRelease(v11);
    a3 += 4;
    if (!--v7)
    {
      CFDictionarySetValue(a1, a2, v9);
      uint64_t v12 = 0;
      goto LABEL_10;
    }
  }
  uint64_t v12 = 4294960634;
LABEL_10:
  CFRelease(v9);
  return v12;
}

uint64_t getSubsamplingForIOSurfaceProperty(const __CFDictionary *a1, const __CFDictionary *a2, IOSurfaceSubsampling *a3)
{
  unint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a1, @"HorizontalSubsampling", 1);
  unint64_t v7 = CVDictionaryGetIntValueWithDefault(a1, @"VerticalSubsampling", 1);
  uint64_t result = CVDictionaryGetBoolValueWithDefault(a2, @"ContainsSenselArray", 0);
  if (IntValueWithDefault <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = IntValueWithDefault;
  }
  if (v7 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v7;
  }
  if (v9 == 2 && v10 == 2 && result == 0)
  {
    IOSurfaceSubsampling v15 = kIOSurfaceSubsampling420;
    goto LABEL_25;
  }
  if (v9 == 2 && v7 < 2)
  {
    IOSurfaceSubsampling v15 = kIOSurfaceSubsampling422;
LABEL_25:
    *a3 = v15;
    return result;
  }
  if (v9 == 4 && v7 <= 1)
  {
    IOSurfaceSubsampling v15 = kIOSurfaceSubsampling411;
    goto LABEL_25;
  }
  return result;
}

uint64_t _CVPixelBufferLayoutPlane(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, unint64_t a14, unint64_t a15, unint64_t a16, unint64_t a17, unint64_t *a18, unint64_t *a19, unint64_t *a20,unint64_t *a21)
{
  uint64_t v22 = a15;
  unint64_t v60 = a8;
  uint64_t result = 4294960634;
  if (a4)
  {
    if (a2)
    {
      if (a1)
      {
        if (a6)
        {
          if (a7)
          {
            unint64_t v27 = a12;
            if (a12)
            {
              unint64_t v58 = 0;
              unint64_t v56 = 0;
              if (CVRoundToMultipleDidOverflow(a8, a1, &v60)) {
                return 4294960634;
              }
              if (CVRoundToMultipleDidOverflow(a10, a1, &a10)) {
                return 4294960634;
              }
              if (CVRoundToMultipleDidOverflow(a9, a2, &a9)) {
                return 4294960634;
              }
              if (CVRoundToMultipleDidOverflow(a11, a2, &a11)) {
                return 4294960634;
              }
              if (__CFADD__(a10, v60)) {
                return 4294960634;
              }
              uint64_t v31 = a10 + v60;
              if (__CFADD__(a10 + v60, a6)) {
                return 4294960634;
              }
              unint64_t v58 = v31 + a6;
              if (CVRoundToMultipleDidOverflow(v31 + a6, a4 * a1, &v58)
                || CVRoundToMultipleDidOverflow(v58, v27, &v58))
              {
                return 4294960634;
              }
              unint64_t v32 = a14;
              unint64_t v33 = (unint64_t)(a3 + 7) >> 3;
              unint64_t v34 = v33 * a4;
              if ((a14 & 0x80000000) == 0) {
                int v35 = a14;
              }
              else {
                int v35 = -(int)a14;
              }
              if ((v34 & 0x80000000) == 0) {
                int v36 = v33 * a4;
              }
              else {
                int v36 = -(int)v34;
              }
              if (v35 <= v36) {
                int v37 = v36;
              }
              else {
                int v37 = v35;
              }
              if (v35 < v36) {
                int v36 = v35;
              }
              unint64_t v38 = v58 / a1;
              if (v36)
              {
                if (v36 < 1)
                {
                  int v39 = v37;
                }
                else
                {
                  do
                  {
                    int v39 = v36;
                    int v36 = v37 % v36;
                    int v37 = v39;
                  }
                  while (v36 > 0);
                }
              }
              else
              {
                int v39 = v37 <= 1 ? 1 : v37;
              }
              if (!is_mul_ok(v33, v38)) {
                return 4294960634;
              }
              unint64_t v40 = a17;
              int v41 = (int)a14 * (int)v34 / v39;
              unint64_t v42 = v41;
              unint64_t v43 = v38 * v33;
              unint64_t v59 = v38 * v33;
              if (a17)
              {
                if (v43 > a17) {
                  return 4294960634;
                }
                unint64_t v59 = a17;
              }
              else if (CVRoundToMultipleDidOverflow(v43, v41, &v59))
              {
                return 4294960634;
              }
              if (v22)
              {
                if (CVRoundToMultipleDidOverflow(v22, v42, &a15)) {
                  return 4294960634;
                }
                unint64_t v44 = v59;
                if (v59 <= a15) {
                  unint64_t v44 = a15;
                }
                unint64_t v59 = v44;
              }
              if (!v40)
              {
                if (v59 % v34) {
                  _CVPixelBufferLayoutPlane();
                }
                if (v59 % v32) {
                  _CVPixelBufferLayoutPlane();
                }
                if (v59 % v33) {
                  _CVPixelBufferLayoutPlane();
                }
              }
              if (__CFADD__(a11, a9)) {
                return 4294960634;
              }
              uint64_t v45 = a11 + a9;
              if (__CFADD__(a11 + a9, a7)) {
                return 4294960634;
              }
              unint64_t v57 = v45 + a7;
              int v46 = CVRoundToMultipleDidOverflow(v45 + a7, a5 * a2, &v57);
              if (v46 || CVRoundToMultipleDidOverflow(v57, a13, &v57)) {
                return 4294960634;
              }
              unint64_t v47 = v57;
              uint64_t result = 4294960634;
              if (v57 && v58)
              {
                unint64_t v48 = v60 / a1 * v33;
                if (!CVRoundToMultipleDidOverflow(v48, v32, &v56))
                {
                  unint64_t v49 = v56;
                  unint64_t v50 = v57;
                  unint64_t v51 = v48 >= v56 ? 0 : v32;
                  unint64_t v52 = v59;
                  *a18 = v59;
                  if (v52 <= ~v51 / v50)
                  {
                    v54 = a20;
                    v53 = a21;
                    unint64_t v55 = a16;
                    *a19 = *a20 + v49 + a9 * v52;
                    *v54 += v51 + v55 + v52 * (v47 / a2);
                    uint64_t result = 0;
                    if (v53) {
                      unint64_t *v53 = a7 / a2 * v52 - v48;
                    }
                    return result;
                  }
                }
                return 4294960634;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CVRoundToMultipleDidOverflow(uint64_t a1, unint64_t a2, void *a3)
{
  if (!a3) {
    return 1;
  }
  if (__CFADD__(a1, a2 - 1)) {
    return 1;
  }
  unint64_t v3 = (a1 + a2 - 1) / a2;
  if (!is_mul_ok(v3, a2)) {
    return 1;
  }
  uint64_t result = 0;
  *a3 = v3 * a2;
  return result;
}

uint64_t CVDictionaryGetIntInArrayWithDefault(const void *a1, const void *a2, CFIndex a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t valuePtr = a4;
  if (a1)
  {
    CFTypeID v8 = CFGetTypeID(a1);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (a2)
    {
      if (v8 == TypeID)
      {
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)a1, a2);
        if (Value)
        {
          CFArrayRef v11 = Value;
          CFTypeID v12 = CFGetTypeID(Value);
          CFTypeID v13 = CFArrayGetTypeID();
          if ((a3 & 0x8000000000000000) == 0 && v12 == v13 && CFArrayGetCount(v11) > a3)
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v11, a3);
            if (ValueAtIndex)
            {
              CFNumberRef v15 = ValueAtIndex;
              CFTypeID v16 = CFGetTypeID(ValueAtIndex);
              if (v16 == CFNumberGetTypeID())
              {
                CFNumberGetValue(v15, kCFNumberLongType, &valuePtr);
                return valuePtr;
              }
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t areUniversalCompressedBuffers2KAligned(void)
{
  if ((areUniversalCompressedBuffers2KAligned(void)::didCheck & 1) == 0)
  {
    CFDictionaryRef v0 = (const __CFDictionary *)MGCopyAnswer();
    if (v0)
    {
      CFDictionaryRef v1 = v0;
      CFDictionaryRef v2 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v2 == CFDictionaryGetValue(v0, @"universal-buffer-compression-requires-plane-alignment-2048")) {
        areUniversalCompressedBuffers2KAligned(void)::uint64_t result = 1;
      }
      CFRelease(v1);
    }
    if (!areUniversalCompressedBuffers2KAligned(void)::result)
    {
      Boolean keyExistsAndHasValidFormat = 0;
      AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"universal-buffer-compression-requires-plane-alignment-2048", @"com.apple.corevideo", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        areUniversalCompressedBuffers2KAligned(void)::uint64_t result = AppBooleanValue;
      }
    }
    areUniversalCompressedBuffers2KAligned(void)::didCheck = 1;
  }
  return areUniversalCompressedBuffers2KAligned(void)::result;
}

uint64_t classFinalize_CVPixelBuffer(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

void CVBufferRelease(CVBufferRef buffer)
{
  if (buffer) {
    CFRelease(buffer);
  }
}

uint64_t classFinalize_CVPixelBufferBacking(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  if (texture) {
    CFRetain(texture);
  }
  return texture;
}

void CVImageBacking::prepareToRemoveFromPool(CVImageBacking *this)
{
  CVBufferBacking::prepareToRemoveFromPool(this);
  CFDictionaryRef v2 = (const void *)*((void *)this + 17);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 17) = 0;
}

IOSurfaceRef CVPixelBufferBacking::getBaseAddressOfPlane(CVPixelBufferBacking *this, size_t a2, uint64_t a3)
{
  if (!*((_DWORD *)this + 42) && (a3 & 1) != 0) {
    return 0;
  }
  size_t v3 = *((void *)this + 130);
  if (!(a2 | v3)) {
    return (IOSurfaceRef)(*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(void *)this + 320))(this, a3);
  }
  if (v3 <= a2) {
    return 0;
  }
  if (*((void *)this + 57)) {
    return IOOrEXSurfaceGetBaseAddressOfPlane(*((IOSurfaceRef *)this + 57), a2);
  }
  return (IOSurfaceRef)*((void *)this + a2 + 62);
}

void applySetAttachments(const void *key, const void *a2, CFDictionaryRef *a3)
{
  if (a2)
  {
    CFArrayRef Value = CFDictionaryGetValue(*a3, key);
    unint64_t v7 = Value;
    if (Value) {
      CFRetain(Value);
    }
    CFDictionaryRemoveValue(*a3, key);
    CFTypeID v8 = CFDictionaryGetValue(a3[1], key);
    uint64_t v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    CFDictionaryRemoveValue(a3[1], key);
    CFDictionarySetValue(a3[*((unsigned int *)a3 + 4)], key, a2);
    if (v7) {
      CFRelease(v7);
    }
    if (v9)
    {
      CFRelease(v9);
    }
  }
}

uint64_t CVImageBacking::finalize(CVImageBacking *this)
{
  CFDictionaryRef v2 = (const void *)*((void *)this + 17);
  if (v2) {
    CFRelease(v2);
  }

  return CVBufferBacking::finalize(this);
}

BOOL shouldThisDeviceIncludeVariantCategoryIndexForUniversalCompressionForThisPixelFormat(unsigned long,CVPixelFormatCompressionTypeAndFootprint const*,CVPixelFormatTiledAddressFormatType const*)::$_0::__invoke()
{
  return areUniversalCompressionFormatsSupported()
      || areUniversalLossyCompressionFormatsSupported() != 0;
}

uint64_t calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(uint64_t a1, uint64_t a2, _DWORD *a3, char a4)
{
  int v8 = shouldThisDeviceIncludeVariantCategoryIndexConditionChecker(a1, a2, a3, (unsigned int (*)(void, unint64_t))shouldThisDeviceIncludeVariantCategoryIndexForNonUniversalCompressionForThisPixelFormat(unsigned long,CVPixelFormatCompressionTypeAndFootprint const*,CVPixelFormatTiledAddressFormatType const*)::$_0::__invoke) != 0;
  if (shouldThisDeviceIncludeVariantCategoryIndexConditionChecker(a1, a2, a3, (unsigned int (*)(void, unint64_t))shouldThisDeviceIncludeVariantCategoryIndexForUniversalCompressionForThisPixelFormat(unsigned long,CVPixelFormatCompressionTypeAndFootprint const*,CVPixelFormatTiledAddressFormatType const*)::$_0::__invoke))uint64_t v9 = ((v8 & 1) << 16) | 0x20000u; {
  else
  }
    uint64_t v9 = (v8 << 16);
  if ((a4 & 0x20) != 0
    && (areUniversalCompressionFormatsSupported()
     || areUniversalLossyCompressionFormatsSupported()))
  {
    if ((shouldSupportCAForInterchange(void)::didCheckCAForInterchange & 1) == 0)
    {
      Boolean keyExistsAndHasValidFormat = 0;
      AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"support_ca_interchange", @"com.apple.corevideo", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat)
      {
        shouldSupportCAForInterchange(void)::supportCAForInterchange = AppBooleanValue;
        CFArrayRef v11 = "enable";
        if (!AppBooleanValue) {
          CFArrayRef v11 = "disable";
        }
        CFTypeID v12 = "YES";
        if (!AppBooleanValue) {
          CFTypeID v12 = "NO";
        }
        syslog(3, "CoreVideo: Will %s kCVPixelBufferIOSurfaceCoreAnimationCompatibilityKey for Interchange compressed and tiled uncompressed formats  -- thank you for setting \"defaults write com.apple.corevideo support_ca_interchange -BOOL %s\"\n", v11, v12);
      }
      shouldSupportCAForInterchange(void)::didCheckCAForInterchange = 1;
    }
    if (shouldSupportCAForInterchange(void)::supportCAForInterchange) {
      uint64_t v9 = v9 | 0x40000;
    }
    else {
      uint64_t v9 = v9;
    }
  }
  if ((a4 & 0x10) != 0)
  {
    if (areHTPCFormatsSupportedByCA()) {
      return v9 | 0x80000;
    }
    else {
      return v9;
    }
  }
  return v9;
}

uint64_t shouldThisDeviceIncludeVariantCategoryIndexConditionChecker(uint64_t result, uint64_t a2, _DWORD *a3, unsigned int (*a4)(void, unint64_t))
{
  if (result)
  {
    uint64_t v8 = result;
    do
    {
      if ((*(_DWORD *)a2 - 2) < 3 || !*(_DWORD *)a2 && *a3 == 5)
      {
        unint64_t v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(a2 + 8);
        if (a4(*(void *)a2, v4)) {
          return 1;
        }
      }
      ++a3;
      a2 += 12;
      --v8;
    }
    while (v8);
    return 0;
  }
  return result;
}

BOOL shouldThisDeviceIncludeVariantCategoryIndexForNonUniversalCompressionForThisPixelFormat(unsigned long,CVPixelFormatCompressionTypeAndFootprint const*,CVPixelFormatTiledAddressFormatType const*)::$_0::__invoke()
{
  return !areUniversalCompressionFormatsSupported()
      && areUniversalLossyCompressionFormatsSupported() == 0;
}

uint64_t areUniversalCompressionFormatsSupported(void)
{
  if ((areUniversalCompressionFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      CFDictionaryRef v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        CFDictionaryRef v1 = v0;
        CFDictionaryRef v2 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v2 == CFDictionaryGetValue(v0, @"universal-buffer-compression")) {
          areUniversalCompressionFormatsSupported(void)::uint64_t result = 1;
        }
        CFRelease(v1);
      }
      areUniversalCompressionFormatsSupported(void)::didCheck = 1;
    }
  }
  return areUniversalCompressionFormatsSupported(void)::result;
}

uint64_t areUniversalLossyCompressionFormatsSupported(void)
{
  if ((areUniversalLossyCompressionFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      CFDictionaryRef v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        CFDictionaryRef v1 = v0;
        CFDictionaryRef v2 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v2 == CFDictionaryGetValue(v0, @"universal-lossy-buffer-compression")) {
          areUniversalLossyCompressionFormatsSupported(void)::uint64_t result = 1;
        }
        CFRelease(v1);
      }
      if (!areUniversalLossyCompressionFormatsSupported(void)::result)
      {
        Boolean keyExistsAndHasValidFormat = 0;
        AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"universal-lossy-buffer-compression", @"com.apple.corevideo", &keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat)
        {
          char v4 = AppBooleanValue;
          CFNumberRef v5 = "enable";
          if (!AppBooleanValue) {
            CFNumberRef v5 = "disable";
          }
          CFTypeID v6 = "YES";
          if (!AppBooleanValue) {
            CFTypeID v6 = "NO";
          }
          syslog(3, "CoreVideo: Will %s universal buffer compression -- thank you for setting \"defaults write com.apple.corevideo universal-lossy-buffer-compression -BOOL %s\"\n", v5, v6);
          areUniversalLossyCompressionFormatsSupported(void)::uint64_t result = v4;
        }
      }
      areUniversalLossyCompressionFormatsSupported(void)::didCheck = 1;
    }
  }
  return areUniversalLossyCompressionFormatsSupported(void)::result;
}

uint64_t calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(int a1, int a2)
{
  if (a2)
  {
    if (areHTPCFormatsSupportedByCA()) {
      unsigned int v3 = 196608;
    }
    else {
      unsigned int v3 = 0x10000;
    }
    if (!a1) {
      goto LABEL_19;
    }
  }
  else
  {
    unsigned int v3 = 0;
    if (!a1) {
      goto LABEL_19;
    }
  }
  if ((isDeviceTypeH6orH7(void)::didCheck & 1) == 0)
  {
    CFStringRef v4 = (const __CFString *)MGCopyAnswer();
    if (v4)
    {
      CFStringRef v5 = v4;
      if (CFEqual(@"s5l8960x", v4)
        || CFEqual(@"t7000", v5)
        || CFEqual(@"t7001", v5))
      {
        isDeviceTypeH6orH7(void)::deviceTypeH6orH7 = 1;
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT))
    {
      calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice();
    }
    isDeviceTypeH6orH7(void)::didCheck = 1;
  }
  if (isDeviceTypeH6orH7(void)::deviceTypeH6orH7) {
    v3 |= 0x40000u;
  }
LABEL_19:
  uint64_t result = v3 | 0x80000;
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if (doesThisDeviceSupportOpenGLES(void)::supportOpenGLES) {
      return result;
    }
    else {
      return v3;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  return result;
}

uint64_t areHTPCFormatsSupportedByCA(void)
{
  if ((areHTPCFormatsSupportedByCA(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      CFDictionaryRef v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        CFDictionaryRef v1 = v0;
        CFDictionaryRef v2 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v2 == CFDictionaryGetValue(v0, @"buffer-compression")) {
          areHTPCFormatsSupportedByCA(void)::uint64_t result = 1;
        }
        CFRelease(v1);
      }
      areHTPCFormatsSupportedByCA(void)::didCheck = 1;
    }
  }
  return areHTPCFormatsSupportedByCA(void)::result;
}

uint64_t disableCompression(void)
{
  if ((disableCompression(void)::didCheck & 1) == 0)
  {
    Boolean keyExistsAndHasValidFormat = 0;
    AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"disable-buffer-compression", @"com.apple.corevideo", &keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat)
    {
      char v1 = AppBooleanValue;
      CFDictionaryRef v2 = "disable";
      if (!AppBooleanValue) {
        CFDictionaryRef v2 = "enable";
      }
      unsigned int v3 = "YES";
      if (!AppBooleanValue) {
        unsigned int v3 = "NO";
      }
      syslog(3, "CoreVideo: Will %s  buffer compression -- thank you for setting \"defaults write com.apple.corevideo disable-buffer-compression -BOOL %s\"\n", v2, v3);
      disableCompression(void)::uint64_t result = v1;
    }
    disableCompression(void)::didCheck = 1;
  }
  return disableCompression(void)::result;
}

uint64_t CVPixelBufferPool::getPixelBufferAttributes(CVPixelBufferPool *this)
{
  return *((void *)this + 5);
}

IOSurfaceRef CVPixelBufferBacking::getBytesPerRowOfPlane(CVPixelBufferBacking *this, size_t a2)
{
  size_t v2 = *((void *)this + 130);
  if (!(a2 | v2)) {
    return (IOSurfaceRef)(*(uint64_t (**)(void))(*(void *)this + 296))();
  }
  if (v2 <= a2) {
    return 0;
  }
  if (*((void *)this + 57)) {
    return IOOrEXSurfaceGetBytesPerRowOfPlane(*((IOSurfaceRef *)this + 57), a2);
  }
  return (IOSurfaceRef)*((void *)this + a2 + 78);
}

void CVPixelBufferPool::bufferBackingNotInUse(atomic_uint *this, CVBufferBacking *a2)
{
  CVBufferPool::bufferBackingNotInUse((CVBufferPool *)this, a2);
  if (!a2)
  {
    if (!this) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v4 = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 160))(a2);
  uint64_t v5 = *(void *)a2;
  if (v4)
  {
    CFTypeID v6 = (__IOSurface *)(*(uint64_t (**)(CVBufferBacking *))(v5 + 160))(a2);
    IOOrEXSurfaceGetID(v6);
  }
  else
  {
    (*(void (**)(CVBufferBacking *))(v5 + 24))(a2);
  }
  if (this) {
LABEL_8:
  }
    (*(void (**)(atomic_uint *))(*(void *)this + 24))(this);
LABEL_9:
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 96))(v7);
    uint64_t v8 = *((void *)this + 2);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 104))(v8);
    }
  }
  kdebug_trace();
  (*(void (**)(void))(**((void **)this + 2) + 136))(*((void *)this + 2));
  if ((*(unsigned int (**)(CVBufferBacking *))(*(void *)a2 + 80))(a2))
  {
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(this + 12, (unsigned int *)&v9, 0, memory_order_relaxed, memory_order_relaxed);
    if (v9 == 1)
    {
      LocalCenter = CFNotificationCenterGetLocalCenter();
      CFArrayRef v11 = (const void *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 24))(this);
      CFNotificationCenterPostNotification(LocalCenter, @"BufferPoolFreeBufferNotification", v11, 0, 1u);
    }
  }
}

void *CVPixelBufferPool::createPixelBuffer(CVPixelBufferPool *this, const __CFAllocator *a2, const __CFDictionary *a3, int *a4)
{
  uint64_t v48 = 0;
  (*(void (**)(void))(**((void **)this + 2) + 160))(*((void *)this + 2));
  {
    CVPixelBufferPool::createPixelBuffer(__CFAllocator const*,__CFDictionary const*,int *)::ktrace_seed = arc4random();
  }
  ++CVPixelBufferPool::createPixelBuffer(__CFAllocator const*,__CFDictionary const*,int *)::ktrace_seed;
  (*(void (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
  uint64_t v8 = *((void *)this + 2);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 96))(v8);
    uint64_t v9 = *((void *)this + 2);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 104))(v9);
    }
  }
  kdebug_trace();
  if (a3)
  {
    uint64_t v10 = (const void *)*MEMORY[0x1E4F1CFD0];
    CFArrayRef Value = CFDictionaryGetValue(a3, @"PreferIOSurfaceWithWiringAssertion");
    CFTypeID v12 = CFDictionaryGetValue(a3, @"RequireIOSurfaceWithoutWiringAssertion");
    BOOL v13 = v10 == Value;
    if (v10 == Value && v10 == v12)
    {
      BOOL v21 = 0;
      int v22 = -6691;
LABEL_42:
      *a4 = v22;
      goto LABEL_62;
    }
    if (v10 == Value) {
      uint64_t v15 = 1;
    }
    else {
      uint64_t v15 = 2 * (v10 == v12);
    }
  }
  else
  {
    uint64_t v15 = 0;
    BOOL v13 = 0;
  }
  int v17 = (*(uint64_t (**)(void, uint64_t *, uint64_t))(**((void **)this + 2) + 128))(*((void *)this + 2), &v48, v15);
  uint64_t v18 = v48;
  if (v13 && !v48)
  {
    int v17 = (*(uint64_t (**)(void, uint64_t *, void))(**((void **)this + 2) + 128))(*((void *)this + 2), &v48, 0);
    uint64_t v18 = v48;
  }
  if (v18)
  {
    int v19 = (CVImageBacking **)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 24))(v18);
    if (v48)
    {
      if ((*(uint64_t (**)(uint64_t))(*(void *)v48 + 160))(v48))
      {
        int v20 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)v48 + 160))(v48);
        IOOrEXSurfaceGetID(v20);
      }
      else if (v48)
      {
        (*(void (**)(uint64_t))(*(void *)v48 + 24))(v48);
      }
    }
    (*(void (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
    uint64_t v23 = *((void *)this + 2);
    if (v23)
    {
      (*(void (**)(uint64_t))(*(void *)v23 + 96))(v23);
      uint64_t v24 = *((void *)this + 2);
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 104))(v24);
      }
    }
    kdebug_trace();
    if (v19)
    {
      if ((*(uint64_t (**)(CVImageBacking *))(*(void *)v19[2] + 152))(v19[2]))
      {
        LODWORD(valuePtr) = 0;
        IOSurfaceGetYCbCrMatrix();
        IOSurfaceClearDataProperties();
      }
      uint64_t v34 = (*(uint64_t (**)(CVImageBacking *))(*(void *)v19[2] + 152))(v19[2]);
      if (v34)
      {
        int v35 = (__IOSurface *)v34;
        CFDictionaryRef v36 = (const __CFDictionary *)CFDictionaryGetValue(*((CFDictionaryRef *)this + 5), @"PropagatedAttachments");
        if (!v36 || !CFDictionaryContainsKey(v36, @"LogTransferFunction")) {
          IOSurfaceRemoveValue(v35, @"LogTransferFunction");
        }
      }
      goto LABEL_48;
    }
  }
  if (a3)
  {
    uint64_t v25 = v17;
    CFNumberRef v26 = (const __CFNumber *)CFDictionaryGetValue(a3, @"BufferPoolAllocationThreshold");
    CFNumberRef v27 = v26;
    CFNumberRef valuePtr = 0;
    if (v26)
    {
      CFTypeID v28 = CFGetTypeID(v26);
      if (v28 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v27, kCFNumberLongType, &valuePtr);
        CFNumberRef v27 = valuePtr;
      }
      else
      {
        CFNumberRef v27 = 0;
      }
    }
    if ((uint64_t)v27 <= (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2))
                       + v25)
    {
      BOOL v21 = 0;
      int v22 = -6689;
      goto LABEL_42;
    }
  }
  long long v29 = CVPixelBufferBacking::alloc(a2, v16);
  int v19 = v29;
  if (!v29)
  {
    BOOL v21 = 0;
    int v22 = -6660;
    goto LABEL_42;
  }
  if (!(*(uint64_t (**)(CVImageBacking *, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int *))(*(void *)v29[2] + 248))(v29[2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, *((void *)this + 5), *((void *)this + 4), 0, 0, 0,
          0,
          a4))
  {
    BOOL v21 = 0;
    goto LABEL_62;
  }
  (*(void (**)(void, CVImageBacking *, uint64_t, void))(**((void **)this + 2) + 112))(*((void *)this + 2), v19[2], 1, 0);
  uint64_t v30 = (void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
  uint64_t v31 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2)) + 1;
  uint64_t v32 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  CVTracePoolAction(1, v30, (void **)v19, "created", v31, v32);
  if (*((unsigned char *)this + 136)) {
    (*(void (**)(CVImageBacking *))(*(void *)v19[2] + 88))(v19[2]);
  }
LABEL_48:
  int v37 = CVPixelBuffer::alloc(a2, v33);
  BOOL v21 = v37;
  if (v37 && (*(uint64_t (**)(void, CVImageBacking *))(*(void *)v37[2] + 248))(v37[2], v19[2]))
  {
    (*(void (**)(void, void))(*(void *)v21[2] + 144))(v21[2], *((void *)this + 5));
    if (a3)
    {
      CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(a3, @"BaseAddressAdjustment");
      CFNumberRef valuePtr = 0;
      if (v38 && (CFNumberRef v39 = v38, v40 = CFGetTypeID(v38), v40 == CFNumberGetTypeID()))
      {
        CFNumberGetValue(v39, kCFNumberLongType, &valuePtr);
        CFNumberRef v41 = valuePtr;
      }
      else
      {
        CFNumberRef v41 = 0;
      }
      (*(void (**)(void, const __CFNumber *))(*(void *)v21[2] + 256))(v21[2], v41);
    }
    int v42 = 0;
  }
  else
  {
    (*(void (**)(void, CVImageBacking *))(**((void **)this + 2) + 120))(*((void *)this + 2), v19[2]);
    int v42 = -6660;
  }
  *a4 = v42;
  unint64_t v43 = v19[2];
  if (v43 && (*(uint64_t (**)(CVImageBacking *))(*(void *)v43 + 160))(v43))
  {
    (*(void (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
    unint64_t v44 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(void *)v19[2] + 160))(v19[2]);
    IOOrEXSurfaceGetID(v44);
    uint64_t v45 = *((void *)this + 2);
    if (!v45) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
LABEL_62:
  (*(void (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
  uint64_t v45 = *((void *)this + 2);
  if (v45) {
LABEL_63:
  }
    (*(void (**)(uint64_t))(*(void *)v45 + 104))(v45);
LABEL_64:
  kdebug_trace();
  (*(void (**)(void))(**((void **)this + 2) + 168))(*((void *)this + 2));
  (*(void (**)(void))(**((void **)this + 2) + 136))(*((void *)this + 2));
  return v21;
}

void sub_1A58494E8(_Unwind_Exception *a1)
{
}

uint64_t CVObject::typeRef(CVObject *this)
{
  return *((void *)this + 1);
}

uint64_t CVPixelBufferBacking::getIOOrEXSurfaceWithoutAssertion(CVPixelBufferBacking *this)
{
  return *((void *)this + 57);
}

uint64_t CVLocklessBunchPair::getUsedBackingsCount(CVLocklessBunchPair *this)
{
  uint64_t result = *((void *)this + 29);
  if (result) {
    return (int)CVAtomicBunchGetCount(result);
  }
  return result;
}

uint64_t CVLocklessBunchPair::getFreeBackingsCount(CVLocklessBunchPair *this)
{
  uint64_t result = *((void *)this + 28);
  if (result) {
    return (int)CVAtomicBunchGetCount(result);
  }
  return result;
}

uint64_t CVAtomicBunchGetCount(uint64_t a1)
{
  return (unsigned __int16)(**(int **)(a1 + 32) >> *(unsigned char *)(a1 + 40));
}

__IOSurface *IOOrEXSurfaceGetID(__IOSurface *result)
{
  if (result) {
    return (__IOSurface *)IOSurfaceGetID(result);
  }
  return result;
}

CFTypeRef *CVPixelBuffer::initWithPixelBufferBacking(CFTypeRef *this, CVPixelBufferBacking *a2)
{
  unsigned int v3 = this;
  if (!CVImageBuffer::init(this)) {
    return 0;
  }
  (*(void (**)(CVPixelBufferBacking *))(*(void *)a2 + 32))(a2);
  v3[15] = a2;
  if (*((unsigned char *)v3 + 104)) {
    (*(void (**)(CVPixelBufferBacking *))(*(void *)a2 + 64))(a2);
  }
  return v3;
}

CFTypeRef *CVImageBuffer::init(CFTypeRef *this)
{
  if (CVBuffer::init(this)) {
    return this;
  }
  else {
    return 0;
  }
}

CVBufferBacking *CVBufferBacking::retainUsage(CVBufferBacking *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 176))(v2);
  }
  CVIncrementAtomic((atomic_uint *)this + 4);
  if (!v3)
  {
    uint64_t v4 = *((void *)this + 11);
    if (!v4) {
      return this;
    }
    (*(void (**)(uint64_t, CVBufferBacking *))(*(void *)v4 + 64))(v4, this);
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 192))(v5);
  }
  return this;
}

CFTypeRef *CVObject::retain(CFTypeRef *this)
{
  return this;
}

void CVIncrementAtomic(atomic_uint *a1)
{
  do
  {
    atomic_uint v2 = *a1;
    atomic_uint v3 = *a1;
    atomic_compare_exchange_strong(a1, (unsigned int *)&v3, *a1 + 1);
  }
  while (v3 != v2);
}

CFTypeRef *CVBuffer::init(CFTypeRef *this)
{
  char v1 = this;
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = CFGetAllocator(this[1]);
  pthread_mutexattr_init(&v7);
  pthread_mutexattr_settype(&v7, 2);
  pthread_mutex_init((pthread_mutex_t *)(v1 + 2), &v7);
  pthread_mutexattr_destroy(&v7);
  atomic_uint v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D048];
  uint64_t v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  v1[10] = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, v3, v4);
  v1[11] = Mutable;
  if (!v1[10] || !Mutable)
  {
    (*((void (**)(CFTypeRef *))*v1 + 5))(v1);
    return 0;
  }
  return v1;
}

CVBufferBacking *CVPixelBufferBacking::retainUsage(CVPixelBufferBacking *this)
{
  CFAllocatorRef v2 = (__IOSurface *)*((void *)this + 57);
  if (v2) {
    IOOrEXSurfaceIncrementUseCount(v2);
  }

  return CVBufferBacking::retainUsage(this);
}

void IOOrEXSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
  if (buffer) {
    IOSurfaceIncrementUseCount(buffer);
  }
}

uint64_t CVBunchPair::exitBackingsCriticalSection(CVBunchPair *this)
{
  return pthread_rwlock_unlock((pthread_rwlock_t *)((char *)this + 16));
}

uint64_t CVBunchPair::enterBackingsCriticalReadSection(CVBunchPair *this)
{
  return pthread_rwlock_rdlock((pthread_rwlock_t *)((char *)this + 16));
}

void CVBufferBacking::releaseUsage(atomic_uint *this)
{
  CVDecrementAtomic(this + 4);
  if (v2 == 1)
  {
    *((void *)this + 13) = CVGetCurrentHostTime();
    uint64_t v3 = *((void *)this + 11);
    if (v3 && ((*(void (**)(uint64_t))(*(void *)v3 + 176))(v3), *((void *)this + 11)))
    {
      (*(void (**)(atomic_uint *))(*(void *)this + 136))(this);
      (*(void (**)(void, atomic_uint *))(**((void **)this + 11) + 72))(*((void *)this + 11), this);
      uint64_t v4 = *((void *)this + 11);
      if (v4)
      {
        uint64_t v5 = *(void (**)(void))(*(void *)v4 + 192);
        v5();
      }
    }
    else
    {
      CFTypeID v6 = *(void (**)(atomic_uint *))(*(void *)this + 112);
      v6(this);
    }
  }
}

uint64_t CVLocklessBunchPair::freeAgedOutBackings(uint64_t this)
{
  unint64_t add_explicit = atomic_fetch_add_explicit((atomic_ullong *volatile)(this + 240), 0, memory_order_relaxed);
  if (add_explicit)
  {
    uint64_t v2 = this;
    uint64_t v7 = *(void *)(this + 216);
    uint64_t v3 = CVGetCurrentHostTime();
    v4[0] = *(void *)(v2 + 224);
    v4[1] = v3 - add_explicit;
    char v5 = 0;
    uint64_t v8 = v2;
    uint64_t v6 = (unsigned __int16)*(_DWORD *)(v2 + 248);
    return CVAtomicBunchApply(v4[0], (uint64_t (*)(uint64_t, void))_freeAgedOutBackings, (uint64_t)v4);
  }
  return this;
}

uint64_t CVAtomicBunchAddObject(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 3;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v19 = v4;
  if (!v4) {
    goto LABEL_26;
  }
  int v5 = 3;
  do
  {
    unsigned int v17 = *(_DWORD *)(v4 + 16);
    if (v17)
    {
      int v5 = 2;
    }
    else if ((v17 & 4) == 0 && !HIWORD(v17))
    {
      unsigned int v18 = ElementModifyFlags(v4, 1, 0x10000);
      if (v18)
      {
        int v5 = 2;
      }
      else if ((v18 & 4) == 0 && !HIWORD(v18))
      {
        *(void *)(v4 + 8) = a2;
        CVMemoryBarrier();
        int v21 = 0;
        unsigned int v20 = 0;
        do
        {
          int v21 = *(_DWORD *)(v4 + 16);
          unsigned int v20 = v21 | 4;
          int v6 = v21;
          int v7 = v21;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 16), (unsigned int *)&v7, v21 | 4, memory_order_relaxed, memory_order_relaxed);
        }
        while (v7 != v6);
        int v5 = 1;
        atomic_fetch_add_explicit(*(atomic_uint *volatile *)(a1 + 32), 1 << *(unsigned char *)(a1 + 40), memory_order_relaxed);
      }
      int v21 = 0;
      unsigned int v20 = 0;
      do
      {
        int v21 = *(_DWORD *)(v4 + 16);
        unsigned int v20 = v21 - 0x10000;
        if ((v18 & 1) == 0)
        {
          v20 &= ~1u;
          if ((v21 & 2) != 0) {
            v20 &= 0xFFFFFFF9;
          }
        }
        int v8 = v21;
        int v9 = v21;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 16), (unsigned int *)&v9, v20, memory_order_relaxed, memory_order_relaxed);
      }
      while (v9 != v8);
    }
    uint64_t v4 = *(void *)v4;
    uint64_t v19 = v4;
  }
  while (v5 != 1 && v4);
  if (v5 != 1)
  {
LABEL_26:
    uint64_t result = CVAtomicBunchIncreaseSizeAndReserveElement(a1, 0x10u, &v19);
    if (result != 1) {
      return result;
    }
    *(void *)(v19 + 8) = a2;
    CVMemoryBarrier();
    uint64_t v11 = v19;
    int v21 = 0;
    unsigned int v20 = 0;
    do
    {
      int v21 = *(_DWORD *)(v11 + 16);
      unsigned int v20 = v21 | 4;
      int v12 = v21;
      int v13 = v21;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v11 + 16), (unsigned int *)&v13, v21 | 4, memory_order_relaxed, memory_order_relaxed);
    }
    while (v13 != v12);
    atomic_fetch_add_explicit(*(atomic_uint *volatile *)(a1 + 32), 1 << *(unsigned char *)(a1 + 40), memory_order_relaxed);
    uint64_t v14 = v19;
    int v21 = 0;
    unsigned int v20 = 0;
    do
    {
      int v21 = *(_DWORD *)(v14 + 16);
      unsigned int v20 = (v21 - 0x10000) & 0xFFFFFFFE;
      if ((v21 & 2) != 0)
      {
        v20 &= ~4u;
        v20 &= ~2u;
      }
      int v15 = v21;
      int v16 = v21;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v14 + 16), (unsigned int *)&v16, v20, memory_order_relaxed, memory_order_relaxed);
    }
    while (v16 != v15);
  }
  return 1;
}

uint64_t CVAtomicBunchApply(uint64_t a1, uint64_t (*a2)(uint64_t, void), uint64_t a3)
{
  if (!a1) {
    return 3;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return 1;
  }
  uint64_t v7 = 1;
  do
  {
    int v13 = *(_DWORD *)(v4 + 16);
    if (v13)
    {
      LOBYTE(v8) = 0;
      uint64_t v7 = 2;
    }
    else if ((v13 & 4) != 0)
    {
      char v14 = ElementModifyFlags(v4, 1, 0x10000);
      if (v14)
      {
        unsigned int v8 = 0;
        uint64_t v7 = 2;
      }
      else if ((v14 & 4) != 0)
      {
        unsigned int v8 = a2(a3, *(void *)(v4 + 8));
      }
      else
      {
        unsigned int v8 = 0;
      }
      do
      {
        unsigned int v15 = *(_DWORD *)(v4 + 16) - 0x10000;
        if ((v14 & 1) == 0)
        {
          v15 &= ~1u;
          if (*(_DWORD *)(v4 + 16) & 2 | (v8 >> 1) & 1) {
            v15 &= 0xFFFFFFF9;
          }
        }
        int v9 = *(_DWORD *)(v4 + 16);
        int v10 = v9;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 16), (unsigned int *)&v10, v15, memory_order_relaxed, memory_order_relaxed);
      }
      while (v10 != v9);
      if ((v8 & 2) != 0) {
        atomic_fetch_add_explicit(*(atomic_uint *volatile *)(a1 + 32), -1 << *(unsigned char *)(a1 + 40), memory_order_relaxed);
      }
    }
    else
    {
      LOBYTE(v8) = 0;
    }
    uint64_t v4 = *(void *)v4;
    if (v4) {
      BOOL v11 = (v8 & 1) == 0;
    }
    else {
      BOOL v11 = 0;
    }
  }
  while (v11);
  return v7;
}

uint64_t ElementModifyFlags(uint64_t a1, int a2, int a3)
{
  do
  {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    unsigned int v3 = v6;
    unsigned int v4 = v6;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(a1 + 16), &v4, (v6 | a2) + a3, memory_order_relaxed, memory_order_relaxed);
  }
  while (v4 != v3);
  return v6;
}

void CVMemoryBarrier()
{
}

void _freeAgedOutBackings(void **a1, void *a2)
{
  if (*((void *)a2 + 3))
  {
    (*(void (**)(void *))(*a1[2] + 168))(a1[2]);
    unsigned int v4 = a1[2];
    if (v4[13] < *((void *)a2 + 1))
    {
      if (*((unsigned char *)a2 + 16))
      {
        (*(void (**)(void *))(*v4 + 112))(v4);
        int v5 = (void *)*((void *)a2 + 4);
        CFIndex Count = CFArrayGetCount(*((CFArrayRef *)a2 + 5));
        CFIndex v7 = CFArrayGetCount(*(CFArrayRef *)a2);
        CVTracePoolAction(1, v5, a1, "-> aged out", Count, v7 - 1);
        CFArrayRef v8 = *(const __CFArray **)a2;
        v10.length = CFArrayGetCount(*(CFArrayRef *)a2);
        v10.location = 0;
        FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v8, v10, a1);
        CFArrayRemoveValueAtIndex(v8, FirstIndexOfValue);
        --*((void *)a2 + 3);
      }
      else
      {
        *((unsigned char *)a2 + 16) = 1;
      }
    }
  }
}

uint64_t _freeAgedOutBackings(uint64_t *a1, void **a2)
{
  uint64_t v4 = a1[3];
  if (v4 >= (int)CVAtomicBunchGetCount(*a1)) {
    return 0;
  }
  (*(void (**)(void *))(*a2[2] + 168))(a2[2]);
  int v5 = a2[2];
  if (v5[13] >= (unint64_t)a1[1]) {
    return 0;
  }
  if (*((unsigned char *)a1 + 16))
  {
    (*(void (**)(void *))(*v5 + 112))(v5);
    unsigned int v6 = (void *)a1[4];
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 96))(a1[5]) + 1;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1[5] + 104))(a1[5]);
    CVTracePoolAction(1, v6, a2, "-> aged out", v7, v8 - 1);
    --a1[3];
    CFRelease(a2);
    return 2;
  }
  else
  {
    uint64_t result = 0;
    *((unsigned char *)a1 + 16) = 1;
  }
  return result;
}

void CVDecrementAtomic(atomic_uint *a1)
{
  do
  {
    atomic_uint v2 = *a1;
    atomic_uint v3 = *a1;
    atomic_compare_exchange_strong(a1, (unsigned int *)&v3, *a1 - 1);
  }
  while (v3 != v2);
}

uint64_t CVBunchPair::notifyPoolBufferBackingInUse(uint64_t this, CVBufferBacking *a2)
{
  if (*(void *)(this + 216)) {
    return (*(uint64_t (**)(void, CVBufferBacking *))(**(void **)(*(void *)(this + 216) + 16) + 72))(*(void *)(*(void *)(this + 216) + 16), a2);
  }
  return this;
}

uint64_t CVLocklessBunchPair::tryToReuseABacking(CVLocklessBunchPair *this, CVBufferBacking **a2, int a3)
{
  unsigned int v6 = 0;
  unsigned int v7 = 0;
  int v8 = a3;
  CVAtomicBunchApply(*((void *)this + 28), (uint64_t (*)(uint64_t, void))_tryToReuseABacking, (uint64_t)&v6);
  uint64_t v4 = (CVBufferBacking *)v6;
  if (v6) {
    uint64_t v4 = v6[2];
  }
  *a2 = v4;
  return v7;
}

uint64_t CVLocklessBunchPair::bufferBackingInUse(CVLocklessBunchPair *this, CVBufferBacking *a2)
{
  uint64_t v4 = *((void *)this + 28);
  for (uint64_t i = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
        CVAtomicBunchRemoveObject(v4, i, 0) == 2;
        uint64_t i = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2))
  {
    sched_yield();
    uint64_t v4 = *((void *)this + 28);
  }
  uint64_t v6 = *((void *)this + 29);
  uint64_t v7 = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);

  return CVAtomicBunchAddObject(v6, v7);
}

uint64_t CVAtomicBunchRemoveObject(uint64_t a1, uint64_t a2, int a3)
{
  if (!a1) {
    return 3;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    while (*(void *)(v4 + 8) != a2)
    {
      uint64_t result = 3;
LABEL_13:
      uint64_t v4 = *(void *)v4;
      if (result != 3 || !v4) {
        return result;
      }
    }
    char v13 = ElementModifyFlags(v4, 1, 0x10000);
    BOOL v8 = (v13 & 1) == 0;
    if ((v13 & 4) != 0 && (v13 & 2) == 0 && *(void *)(v4 + 8) == a2)
    {
      if (!a3 && (v13 & 1) != 0)
      {
        uint64_t result = 2;
        goto LABEL_9;
      }
      do
      {
        int v16 = *(_DWORD *)(v4 + 16);
        int v11 = v16;
        int v12 = v16;
        atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 16), (unsigned int *)&v12, v16 | 3, memory_order_relaxed, memory_order_relaxed);
      }
      while (v12 != v11);
      BOOL v8 = (v16 & 1) == 0;
      if ((v13 & 1) == 0) {
        BOOL v8 = 1;
      }
      if ((v16 & 4) != 0 && (v16 & 2) == 0)
      {
        atomic_fetch_add_explicit(*(atomic_uint *volatile *)(a1 + 32), -1 << *(unsigned char *)(a1 + 40), memory_order_relaxed);
        uint64_t result = 1;
        goto LABEL_9;
      }
    }
    uint64_t result = 3;
    do
    {
LABEL_9:
      int v15 = *(_DWORD *)(v4 + 16);
      unsigned int v14 = v15 - 0x10000;
      if (v8)
      {
        v14 &= ~1u;
        if ((v15 & 2) != 0) {
          v14 &= 0xFFFFFFF9;
        }
      }
      int v9 = *(_DWORD *)(v4 + 16);
      int v10 = v9;
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(v4 + 16), (unsigned int *)&v10, v14, memory_order_relaxed, memory_order_relaxed);
    }
    while (v10 != v9);
    goto LABEL_13;
  }
  return 3;
}

uint64_t CVBufferPool::bufferBackingInUse(CVBufferPool *this, CVBufferBacking *a2)
{
  return (*(uint64_t (**)(void, CVBufferBacking *))(**((void **)this + 2) + 80))(*((void *)this + 2), a2);
}

const void *CVPixelBuffer::setDefaultAttachments(CFMutableDictionaryRef *this, const __CFDictionary *a2)
{
  CFDictionaryRemoveAllValues(this[10]);
  CFDictionaryRemoveAllValues(this[11]);
  uint64_t result = (const void *)_os_feature_enabled_impl();
  if (result)
  {
    uint64_t result = (const void *)(*(uint64_t (**)(CFMutableDictionaryRef))(*(void *)this[15] + 152))(this[15]);
    if (result) {
      uint64_t result = (const void *)IOSurfaceRemoveCoreVideoBridgedValues();
    }
  }
  if (a2)
  {
    CFArrayRef Value = CFDictionaryGetValue(a2, @"PropagatedAttachments");
    if (Value)
    {
      uint64_t v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFDictionaryGetTypeID()) {
        (*((void (**)(CFMutableDictionaryRef *, const void *, uint64_t))*this + 17))(this, v6, 1);
      }
    }
    uint64_t result = CFDictionaryGetValue(a2, @"NonPropagatedAttachments");
    if (result)
    {
      BOOL v8 = result;
      CFTypeID v9 = CFGetTypeID(result);
      uint64_t result = (const void *)CFDictionaryGetTypeID();
      if ((const void *)v9 == result)
      {
        int v10 = (uint64_t (*)(CFMutableDictionaryRef *, const void *, void))*((void *)*this + 17);
        return (const void *)v10(this, v8, 0);
      }
    }
  }
  return result;
}

__IOSurface *CVPixelBufferBacking::resetAgeForRemoteUsage(CVPixelBufferBacking *this)
{
  uint64_t result = (__IOSurface *)*((void *)this + 57);
  if (result)
  {
    if (*((unsigned char *)this + 113))
    {
LABEL_5:
      *((void *)this + 13) = -1;
      return result;
    }
    uint64_t result = IOOrEXSurfaceIsInUse(result);
    if (result)
    {
      *((unsigned char *)this + 112) = 1;
      goto LABEL_5;
    }
    if (*((unsigned char *)this + 112))
    {
      uint64_t result = (__IOSurface *)CVGetCurrentHostTime();
      *((void *)this + 13) = result;
      *((unsigned char *)this + 112) = 0;
    }
  }
  return result;
}

IOSurfaceRef IOOrEXSurfaceIsInUse(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceIsInUse(buffer);
  }
  return buffer;
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  CFTypeRef cf = 0;
  char v8 = _os_feature_enabled_impl();
  CVReturn v9 = -6661;
  if (!surface || !pixelBufferOut) {
    return v9;
  }
  char v10 = v8;
  *pixelBufferOut = 0;
  IOOrEXSurfaceGetID(surface);
  kdebug_trace();
  if (pixelBufferAttributes) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFDictionaryRef v13 = MutableCopy;
  if (!MutableCopy)
  {
    int v16 = 0;
    CFDictionaryRef v14 = 0;
    goto LABEL_40;
  }
  if (v10) {
    CFDictionaryRef v14 = 0;
  }
  else {
    CFDictionaryRef v14 = IOSurfaceCopyAllValues(surface);
  }
  CFTypeRef cf = CVPixelBufferBacking::alloc(allocator, v12);
  if (cf)
  {
    if (checkIOOrEXSurfaceAndCreatePixelBufferBacking(surface, v13, &cf))
    {
LABEL_28:
      int v16 = 0;
      goto LABEL_30;
    }
    int v16 = CVPixelBuffer::alloc(allocator, v15);
    if (v16)
    {
      unsigned int v17 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v17 == CFDictionaryGetValue(v13, @"IOSurfaceDoNotIncrementUseCount"))
      {
        CFTypeID v18 = CFGetTypeID(v16);
        if (v18 == CVPixelBufferGetTypeID()) {
          uint64_t v19 = v16[2];
        }
        else {
          uint64_t v19 = 0;
        }
        CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(v19);
      }
      if ((*(uint64_t (**)(void, void))(*(void *)v16[2] + 248))(v16[2], *((void *)cf + 2)))
      {
        if ((v10 & 1) == 0)
        {
          CFTypeID v20 = CFGetTypeID(v16);
          if (v20 == CVPixelBufferGetTypeID())
          {
            int v21 = (CVPixelBuffer *)v16[2];
            if (v21) {
              CVPixelBuffer::pullAttachmentsFromIOSurface(v21, v14);
            }
          }
          if (v14)
          {
            CFArrayRef Value = CFDictionaryGetValue(v14, (const void *)*MEMORY[0x1E4F2F128]);
            if (Value)
            {
              uint64_t v23 = Value;
              CFTypeID v24 = CFGetTypeID(Value);
              if (v24 == CFStringGetTypeID()) {
                CVBufferBacking::setPoolName(*((atomic_uint **)cf + 2), v23);
              }
            }
          }
        }
        CVTracePoolAction(1, 0, (void **)cf, "created from IOSurface", 0, 0);
        CVReturn v9 = 0;
        *pixelBufferOut = (CVPixelBufferRef)v16;
        goto LABEL_28;
      }
      CVReturn v9 = -6660;
LABEL_30:
      if (cf) {
        CFRelease(cf);
      }
      if (!v13) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
LABEL_40:
    CVReturn v9 = -6662;
    goto LABEL_30;
  }
  int v16 = 0;
  CVReturn v9 = -6662;
LABEL_33:
  CFRelease(v13);
LABEL_34:
  if (v14) {
    CFRelease(v14);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v9;
}

void CVTracePoolAction(int a1, void *a2, void **a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (!CVTracePools(a1)) {
    return;
  }
  uint64_t v23 = 0;
  CFTypeID v24 = 0;
  int v22 = 0;
  __str[0] = 0;
  v28[0] = 0;
  v27[0] = 0;
  if (a2)
  {
    uint64_t v11 = a2[2];
    if (v11 && (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11))
    {
      CFStringRef v12 = (const __CFString *)(*(uint64_t (**)(void))(*(void *)a2[2] + 88))(a2[2]);
      CFStringGetCString(v12, buffer, 128, 0x600u);
      asprintf(&v22, " (%s)", buffer);
      CFDictionaryRef v13 = v22;
    }
    else
    {
      CFDictionaryRef v13 = 0;
    }
    if (!v13) {
      CFDictionaryRef v13 = "";
    }
    asprintf(&v23, " pool %p%s:", a2, v13);
  }
  if (a3)
  {
    snprintf(__str, 0x20uLL, " backing %p", a3);
    CFDictionaryRef v14 = (__IOSurface *)(*(uint64_t (**)(void *))(*a3[2] + 160))(a3[2]);
    if (v14)
    {
      CFAllocatorRef v15 = v14;
      IOSurfaceID ID = IOOrEXSurfaceGetID(v14);
      *(_OWORD *)buffer = xmmword_1A5884CA0;
      long long v26 = *(_OWORD *)algn_1A5884CB0;
      CFStringRef v17 = (const __CFString *)IOSurfaceCopyValue(v15, (CFStringRef)*MEMORY[0x1E4F2F128]);
      if (!v17)
      {
        snprintf(v28, 0x40uLL, " (IOSurface ID 0x%llx (%s))", ID, buffer);
        if (!a2) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      CFStringRef v18 = v17;
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 == CFStringGetTypeID()) {
        CFStringGetCString(v18, buffer, 32, 0);
      }
      snprintf(v28, 0x40uLL, " (IOSurface ID 0x%llx (%s))", ID, buffer);
      CFRelease(v18);
    }
  }
  if (a2) {
LABEL_17:
  }
    snprintf(v27, 0x40uLL, " [now %ld in pool: %ld in use, %ld free]", a6 + a5, a5, a6);
LABEL_18:
  CFTypeID v20 = v23;
  if (!v23) {
    CFTypeID v20 = "";
  }
  asprintf(&v24, "CoreVideo:%s%s%s %s%s", v20, __str, v28, a4, v27);
  int v21 = v24;
  if (v24)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buffer = 136315138;
      *(void *)&buffer[4] = v21;
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)buffer, 0xCu);
      int v21 = v24;
    }
  }
  free(v21);
  free(v23);
  free(v22);
}

BOOL CVTracePools(int a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  Boolean keyExistsAndHasValidFormat = 0;
  if ((CVTracePools(int)::sDidCheck & 1) == 0)
  {
    AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"pools_trace", @"com.apple.corevideo", 0);
    CVTracePools(int)::sTracePools = AppBooleanValue != 0;
    if (AppBooleanValue)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        CVReturn v9 = "CoreVideo: will trace pool activity -- thank you for setting \"defaults write com.apple.corevideo pools_trace -BOOL YES\"";
        _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
      AppIntegerCFArrayRef Value = CFPreferencesGetAppIntegerValue(@"pools_trace_level", @"com.apple.corevideo", &keyExistsAndHasValidFormat);
      if (keyExistsAndHasValidFormat) {
        int v4 = AppIntegerValue;
      }
      else {
        int v4 = 3;
      }
      CVTracePools(int)::sTraceLevel = v4;
    }
    CVTracePools(int)::sDidCheck = 1;
  }
  if (CVTracePools(int)::sTracePools) {
    BOOL v5 = CVTracePools(int)::sTraceLevel < a1;
  }
  else {
    BOOL v5 = 1;
  }
  return !v5;
}

CVImageBacking **CVPixelBufferBacking::alloc(CVPixelBufferBacking *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVPixelBufferBacking *)_cvTrackingGetCFAllocator(@"CVPixelBufferBacking");
  }
  if (CVPixelBufferBackingGetTypeID(void)::once != -1) {
    dispatch_once_f(&CVPixelBufferBackingGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferBacking);
  }
  atomic_uint v3 = (CVImageBacking **)CVObject::alloc((CVObject *)kCVPixelBufferBackingID, (unint64_t)this, (const __CFAllocator *)0x18, 0x498uLL);
  int v4 = v3;
  if (v3)
  {
    CVImageBacking::CVImageBacking(v3[2], v3);
    *(void *)uint64_t v5 = &unk_1EFA17248;
    *(void *)(v5 + 496) = 0;
    *(_DWORD *)(v5 + 168) = 0;
    *(void *)(v5 + 108pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
    *(void *)(v5 + 1096) = 0;
    *(void *)(v5 + 1088) = 0;
    *(void *)(v5 + 112pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
    *(void *)(v5 + 1112) = 0;
    *(unsigned char *)(v5 + 144) = 1;
    *(void *)(v5 + 1136) = 0;
    *(void *)(v5 + 448) = 0;
    *(void *)(v5 + 456) = 0;
    *(_DWORD *)(v5 + 476) = 0;
  }
  return v4;
}

void CVImageBacking::CVImageBacking(CVImageBacking *this, const void *a2)
{
  CVBufferBacking::CVBufferBacking(this, a2);
  *atomic_uint v2 = &unk_1EFA166E0;
}

void CVBufferBacking::CVBufferBacking(CVBufferBacking *this, const void *a2)
{
  CVObject::CVObject(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA16900;
  *(void *)(v2 + 88) = 0;
  *(unsigned char *)(v2 + 113) = 0;
  *(void *)(v2 + 12pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
  *(_DWORD *)(v2 + 128) = 0;
}

void *CVPixelBuffer::alloc(CVPixelBuffer *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVPixelBuffer *)_cvTrackingGetCFAllocator(@"CVPixelBuffer");
  }
  if (CVPixelBufferGetTypeID::once != -1) {
    dispatch_once_f(&CVPixelBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBuffer);
  }
  atomic_uint v3 = (void *)CVObject::alloc((CVObject *)kCVPixelBufferID, (unint64_t)this, (const __CFAllocator *)0x18, 0x80uLL);
  int v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3[2];
    CVImageBuffer::CVImageBuffer((CVImageBuffer *)v5, v3);
    *(void *)uint64_t v5 = &unk_1EFA165B8;
    CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(0);
    *(unsigned char *)(v5 + 104) = 1;
    *(void *)(v5 + 108) = 0;
    *(void *)(v5 + 12pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
    *(void *)(v5 + 96) = 0;
  }
  return v4;
}

uint64_t CVObject::alloc(CVObject *this, unint64_t a2, const __CFAllocator *a3, size_t a4)
{
  unint64_t v5 = ((unint64_t)a3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v7 = Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = v5 + Instance;
    bzero((void *)(v5 + Instance), a4);
  }
  return v7;
}

void CVImageBuffer::CVImageBuffer(CVImageBuffer *this, const void *a2)
{
  CVBuffer::CVBuffer(this, a2);
  *uint64_t v2 = &unk_1EFA163F8;
}

void CVBuffer::CVBuffer(CVBuffer *this, const void *a2)
{
  CVObject::CVObject(this, a2);
  *uint64_t v2 = &unk_1EFA17AF8;
  v2[10] = 0;
  v2[11] = 0;
}

void CVObject::CVObject(CVObject *this, const void *a2)
{
  *(void *)this = &unk_1EFA17BA8;
  *((void *)this + 1) = a2;
}

uint64_t checkIOOrEXSurfaceAndCreatePixelBufferBacking(__IOSurface *a1, const __CFDictionary *a2, void *a3)
{
  v106[16] = *MEMORY[0x1E4F143B8];
  unsigned int v102 = 0;
  memset(v103, 0, sizeof(v103));
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  if (!a1) {
    return -6661;
  }
  if (!a2 || !a3 || !*a3) {
    return -6662;
  }
  unint64_t Width = (unint64_t)IOOrEXSurfaceGetWidth(a1);
  IOSurfaceRef Height = IOOrEXSurfaceGetHeight(a1);
  unsigned int PixelFormat = IOOrEXSurfaceGetPixelFormat(a1);
  unint64_t BytesPerRow = (unint64_t)IOOrEXSurfaceGetBytesPerRow(a1);
  IOSurfaceRef AllocSize = IOOrEXSurfaceGetAllocSize(a1);
  PlaneCFIndex Count = IOOrEXSurfaceGetPlaneCount(a1);
  if ((unint64_t)PlaneCount > 0x10) {
    return -6661;
  }
  int v7 = 0;
  unint64_t v8 = (unint64_t)PlaneCount;
  if (!PlaneCount) {
    goto LABEL_20;
  }
  uint64_t v9 = 0;
  do
  {
    int CompressionTypeOfPlane = IOSurfaceGetCompressionTypeOfPlane();
    int AddressFormatOfPlane = IOSurfaceGetAddressFormatOfPlane();
    if ((CompressionTypeOfPlane - 1) < 3
      || (!CompressionTypeOfPlane ? (BOOL v12 = AddressFormatOfPlane == 5) : (BOOL v12 = 0),
          !v12 ? (int v13 = 0) : (int v13 = 1),
          CompressionTypeOfPlane == 4 || v13))
    {
      int v7 = 1;
    }
    ++v9;
  }
  while (v8 != v9);
  if (v8 >= 2)
  {
    for (size_t i = 0; i != v8; ++i)
    {
      v106[i] = IOOrEXSurfaceGetWidthOfPlane(a1, i);
      v105[i] = IOOrEXSurfaceGetHeightOfPlane(a1, i);
      v104[i] = IOOrEXSurfaceGetBytesPerRowOfPlane(a1, i);
      *((void *)v103 + i) = IOOrEXSurfaceGetBaseAddressOfPlane(a1, i);
    }
  }
  else
  {
LABEL_20:
    v106[0] = IOOrEXSurfaceGetWidth(a1);
    v105[0] = IOOrEXSurfaceGetHeight(a1);
    v104[0] = IOOrEXSurfaceGetBytesPerRow(a1);
    unint64_t v8 = 0;
    *(void *)&v103[0] = IOOrEXSurfaceGetBaseAddress(a1);
  }
  if (PixelFormat)
  {
    DescriptionWithPixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(PixelFormat);
    if (!DescriptionWithPixelFormatType)
    {
      int valuePtr = 0;
      CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a2, @"PixelFormatDescription");
      if (!Value) {
        return -6680;
      }
      DescriptionWithPixelFormatType = Value;
      CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(Value, @"PixelFormat");
      if (!v31) {
        return -6680;
      }
      CFNumberRef v32 = v31;
      CFTypeID v33 = CFGetTypeID(v31);
      if (v33 != CFNumberGetTypeID()) {
        return -6680;
      }
      CFNumberGetValue(v32, kCFNumberIntType, &valuePtr);
      if (PixelFormat != valuePtr) {
        return -6680;
      }
    }
    CFDictionarySetValue(a2, @"PixelFormatDescription", DescriptionWithPixelFormatType);
  }
  else
  {
    if (!CFDictionaryGetValue(a2, @"PixelFormatDescription")) {
      return -6680;
    }
    DescriptionWithPixelFormatType = 0;
  }
  CFBooleanRef v16 = (const __CFBoolean *)CFDictionaryGetValue(a2, @"MetalCompatibility");
  if (v16 && CFBooleanGetValue(v16))
  {
    if (v8 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = v8;
    }
    CFStringRef v18 = v103;
    CFTypeID v19 = (char *)v104;
    do
    {
      char v20 = *v19;
      v19 += 8;
      if ((v20 & 0x3F) != 0 || (*v18 & 0x3F) != 0) {
        return -6661;
      }
      v18 += 8;
    }
    while (--v17);
  }
  unint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a2, @"BytesPerRowAlignment", 0);
  if (IntValueWithDefault)
  {
    if (v8 <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v8;
    }
    uint64_t v23 = v104;
    do
    {
      unint64_t v24 = *v23++;
      if (v24 % IntValueWithDefault) {
        return -6661;
      }
    }
    while (--v22);
  }
  uint64_t v25 = CFDictionaryGetValue(a2, @"ExactBytesPerRow");
  if (v25)
  {
    long long v26 = v25;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v26))
    {
      uint64_t v28 = CVDictionaryGetIntValueWithDefault(a2, @"ExactBytesPerRow", 0);
      if (v104[0] != v28) {
        return -6661;
      }
    }
    else
    {
      CFTypeID v35 = CFArrayGetTypeID();
      if (v35 == CFGetTypeID(v26))
      {
        CFIndex v36 = 0;
        if (v8 <= 1) {
          uint64_t v37 = 1;
        }
        else {
          uint64_t v37 = v8;
        }
        do
        {
          uint64_t IntInArrayWithDefault = CVDictionaryGetIntInArrayWithDefault(a2, @"ExactBytesPerRow", v36, 0);
          if (IntInArrayWithDefault)
          {
            if (v104[v36] != IntInArrayWithDefault) {
              return -6661;
            }
          }
        }
        while (v37 != ++v36);
      }
    }
  }
  unint64_t v39 = CVDictionaryGetIntValueWithDefault(a2, @"PlaneAlignment", 0);
  if (v39)
  {
    if (v8 <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = v8;
    }
    CFNumberRef v41 = v103;
    while (!(*v41 % v39))
    {
      ++v41;
      if (!--v40) {
        goto LABEL_69;
      }
    }
    return -6661;
  }
LABEL_69:
  ParentIOSurfaceID ID = IOSurfaceGetParentID();
  if (v7)
  {
    if (DescriptionWithPixelFormatType)
    {
      CFArrayRef v43 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)DescriptionWithPixelFormatType, @"Planes");
      if (IOSurfaceGetCompressionTypeOfPlane() - 3 > 0xFFFFFFFD)
      {
        char v48 = 1;
        LODWORD(SliceCount) = 1;
        IOSurfaceRef v47 = AllocSize;
        int v46 = a3;
        if (!v8) {
          goto LABEL_75;
        }
      }
      else
      {
        int BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(DescriptionWithPixelFormatType, @"MultiSlice", 0);
        SliceCFIndex Count = IOSurfaceGetSliceCount();
        IOSurfaceRef v47 = AllocSize;
        int v46 = a3;
        if (BoolValueWithDefault)
        {
          if (SliceCount - 0x100000000 <= 0xFFFFFFFF00000001) {
            return -6661;
          }
          char v48 = 0;
          if (!v8) {
            goto LABEL_75;
          }
          goto LABEL_99;
        }
        if (SliceCount >= 2) {
          return -6661;
        }
        char v48 = 1;
        LODWORD(SliceCount) = 1;
        if (!v8)
        {
LABEL_75:
          size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a1, 0);
          goto LABEL_119;
        }
      }
LABEL_99:
      unint64_t v65 = 0;
      CFIndex v66 = 0;
      if (SliceCount < 2) {
        char v48 = 1;
      }
      char v89 = v48;
      v91 = (__CFString *)SliceCount;
      CFArrayRef v88 = v43;
      while (1)
      {
        unint64_t v90 = v65;
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v43, v66);
        uint64_t NumberFromDict = getNumberFromDict(ValueAtIndex, @"BytesPerTileHeader", 1);
        unint64_t v69 = getNumberFromDict(ValueAtIndex, @"TileWidth", 1);
        unint64_t v70 = getNumberFromDict(ValueAtIndex, @"TileHeight", 1);
        uint64_t v71 = getNumberFromDict(ValueAtIndex, @"BitsPerBlock", 8);
        unint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
        if (!is_mul_ok(WidthInCompressedTilesOfPlane, v69)) {
          break;
        }
        unint64_t v73 = WidthInCompressedTilesOfPlane;
        unint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
        if (!is_mul_ok(HeightInCompressedTilesOfPlane, v70)) {
          break;
        }
        unint64_t v75 = ((v70 * v69 * v71 + 7) >> 3) * v73 * HeightInCompressedTilesOfPlane;
        unint64_t v76 = v73 * NumberFromDict * HeightInCompressedTilesOfPlane;
        unint64_t v77 = v76 + v90 + v75;
        if (v90 >= v77) {
          break;
        }
        if ((v89 & 1) == 0)
        {
          uint64_t v78 = 1;
          while (1)
          {
            unint64_t v79 = v75 + IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane();
            if (v79 != IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane()) {
              break;
            }
            unint64_t v80 = v76 + IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane();
            if (v80 != IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane()) {
              break;
            }
            if (v91 == (__CFString *)++v78) {
              goto LABEL_110;
            }
          }
          return -6661;
        }
LABEL_110:
        ++v66;
        unint64_t v65 = v76 + v90 + v75;
        CFArrayRef v43 = v88;
        if (v66 == v8)
        {
          IOSurfaceRef v47 = AllocSize;
          BOOL v64 = v77 > (unint64_t)AllocSize;
          goto LABEL_95;
        }
      }
    }
    return -6662;
  }
  if (v8)
  {
    int v50 = ParentID;
    if (DescriptionWithPixelFormatType) {
      DescriptionWithPixelFormatType = CFDictionaryGetValue((CFDictionaryRef)DescriptionWithPixelFormatType, @"Planes");
    }
    unint64_t v51 = 0;
    size_t v52 = 0;
    while (1)
    {
      CFDictionaryRef v53 = DescriptionWithPixelFormatType
          ? (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)DescriptionWithPixelFormatType, v52)
          : 0;
      IOSurfaceRef BytesPerElementOfPlane = IOOrEXSurfaceGetBytesPerElementOfPlane(a1, v52);
      if ((unint64_t)BytesPerElementOfPlane >> 61) {
        break;
      }
      uint64_t v55 = getNumberFromDict(v53, @"BitsPerBlock", 8 * (void)BytesPerElementOfPlane);
      uint64_t v56 = v55 >= 0 ? v55 : v55 + 7;
      IOSurfaceRef ElementWidthOfPlane = IOOrEXSurfaceGetElementWidthOfPlane(a1, v52);
      unint64_t v58 = getNumberFromDict(v53, @"BlockWidth", (uint64_t)ElementWidthOfPlane);
      unint64_t v59 = v105[v52];
      unint64_t v60 = v104[v52];
      if (!is_mul_ok(v59, v60)) {
        break;
      }
      if (!v50)
      {
        unint64_t v61 = v51 + v60 * v59;
        BOOL v62 = v51 >= v61;
        unint64_t v51 = v61;
        if (v62) {
          break;
        }
      }
      unint64_t v63 = v106[v52];
      if (!is_mul_ok(v63, v56 >> 3) || !is_mul_ok(v60, v58) || v63 * (v56 >> 3) > v60 * v58) {
        break;
      }
      if (v8 == ++v52)
      {
        IOSurfaceRef v47 = AllocSize;
        BOOL v64 = v51 > (unint64_t)AllocSize;
LABEL_95:
        int v46 = a3;
        size_t BytesPerRowOfPlane = BytesPerRow;
        if (v64) {
          return -6662;
        }
        goto LABEL_119;
      }
    }
    return -6662;
  }
  IOSurfaceRef BytesPerElement = IOOrEXSurfaceGetBytesPerElement(a1);
  if ((unint64_t)BytesPerElement >> 61) {
    return -6662;
  }
  unint64_t v82 = getNumberFromDict((const __CFDictionary *)DescriptionWithPixelFormatType, @"BitsPerBlock", 8 * (void)BytesPerElement)/ 8;
  IOSurfaceRef ElementWidth = IOOrEXSurfaceGetElementWidth(a1);
  unint64_t v84 = getNumberFromDict((const __CFDictionary *)DescriptionWithPixelFormatType, @"BlockWidth", (uint64_t)ElementWidth);
  IOSurfaceRef ElementHeight = IOOrEXSurfaceGetElementHeight(a1);
  unint64_t v86 = getNumberFromDict((const __CFDictionary *)DescriptionWithPixelFormatType, @"BlockHeight", (uint64_t)ElementHeight);
  IOSurfaceRef v47 = AllocSize;
  int v46 = a3;
  if (!is_mul_ok(Width, v82)) {
    return -6662;
  }
  if (!is_mul_ok(BytesPerRow, v84)) {
    return -6662;
  }
  if (v82 * Width > v84 * BytesPerRow) {
    return -6662;
  }
  if (!is_mul_ok((unint64_t)Height, BytesPerRow)) {
    return -6662;
  }
  size_t BytesPerRowOfPlane = BytesPerRow;
  if (((unint64_t)Height + v86 - 1) / v86 * BytesPerRow > (unint64_t)AllocSize) {
    return -6662;
  }
LABEL_119:
  IOSurfaceGetExtendedPixelsOfPlane();
  CVDictionarySetSInt64Value(a2, @"ExtendedPixelsLeft", v101);
  CVDictionarySetSInt64Value(a2, @"ExtendedPixelsTop", v100);
  CVDictionarySetSInt64Value(a2, @"ExtendedPixelsRight", v99);
  CVDictionarySetSInt64Value(a2, @"ExtendedPixelsBottom", v98);
  if ((*(uint64_t (**)(void, unint64_t, IOSurfaceRef, void, IOSurfaceRef, size_t, unint64_t, void, void *, void *, void *, void, void, void, const __CFDictionary *, void, __IOSurface *, void, void, void, unsigned int *))(**(void **)(*v46 + 16) + 248))(*(void *)(*v46 + 16), Width, Height, 0, v47, BytesPerRowOfPlane, v8, 0, v106, v105, v104, 0, 0, 0, a2, 0, a1, 0, 0,
         0,
         &v102))
  {
    unint64_t v87 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (v87 == CFDictionaryGetValue(a2, @"IOSurfaceWiringAssertion")) {
      *(_DWORD *)(*(void *)(*v46 + 16) + 488) |= 2u;
    }
  }
  else
  {
    *int v46 = 0;
  }
  return v102;
}

uint64_t getNumberFromDict(const __CFDictionary *a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t valuePtr = a3;
  if (a1)
  {
    CFTypeID v6 = CFGetTypeID(a1);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
      if (Value)
      {
        CFNumberRef v8 = Value;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(v8))
        {
          CFNumberGetValue(v8, kCFNumberCFIndexType, &valuePtr);
          return valuePtr;
        }
      }
    }
  }
  return v3;
}

IOSurfaceRef IOOrEXSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetBaseAddressOfPlane(buffer, planeIndex);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetBytesPerRowOfPlane(buffer, planeIndex);
  }
  return buffer;
}

CFTypeRef *CVPixelBufferBacking::initWithPixelBufferDescription(CFTypeRef *this, unint64_t a2, uint64_t a3, void *a4, unint64_t a5, unint64_t a6, unint64_t a7, void **a8, unint64_t *a9, unint64_t *a10, unint64_t *a11, void (*a12)(void *, const void *), void (*a13)(void *, const void *, unint64_t, unint64_t, const void **), void *a14, const __CFDictionary *a15, const __CFDictionary *a16, __IOSurface *a17, long long a18, unint64_t *a19, int *a20)
{
  CFNumberRef v27 = this;
  CFAllocatorRef v28 = CFGetAllocator(this[1]);
  *a20 = 0;
  if (CVBufferBacking::init((CVBufferBacking *)v27))
  {
    uint64_t v30 = a15;
    if (!a15)
    {
LABEL_39:
      int v39 = -6660;
      goto LABEL_40;
    }
    v27[22] = (CFTypeRef)a2;
    v27[23] = (CFTypeRef)a3;
    if (a3 | a2)
    {
      if (!a2) {
        goto LABEL_18;
      }
    }
    else
    {
      v27[22] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(a15, @"Width", 0);
      uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a15, @"Height", 0);
      uint64_t v30 = a15;
      a3 = IntValueWithDefault;
      v27[23] = (CFTypeRef)IntValueWithDefault;
      if (!v27[22])
      {
LABEL_18:
        int v39 = -6681;
LABEL_40:
        *a20 = v39;
LABEL_41:
        (*((void (**)(CFTypeRef *))*v27 + 5))(v27);
        return 0;
      }
    }
    if (a7 > 0x10 || !a3) {
      goto LABEL_18;
    }
    v111[0] = 0;
    CFDictionaryRef v32 = v30;
    CFDictionaryRef PixelFormatDescription = CVPixelBufferBacking::getPixelFormatDescription(v30, (const __CFDictionary *)v111, v29);
    if (!PixelFormatDescription)
    {
      int v39 = -6680;
      goto LABEL_40;
    }
    CFDictionaryRef v34 = PixelFormatDescription;
    v27[135] = CFDictionaryCreateCopy(v28, PixelFormatDescription);
    v27[136] = CFDictionaryCreateCopy(v28, v32);
    v27[131] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, @"ExtendedPixelsLeft", 0);
    v27[133] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, @"ExtendedPixelsTop", 0);
    v27[132] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, @"ExtendedPixelsRight", 0);
    v27[134] = (CFTypeRef)CVDictionaryGetIntValueWithDefault(v32, @"ExtendedPixelsBottom", 0);
    uint64_t v110 = CVDictionaryGetIntValueWithDefault(v34, @"BitsPerBlock", 0);
    CFDictionaryRef v108 = v34;
    uint64_t v109 = CVDictionaryGetIntValueWithDefault(v34, @"BlockWidth", 1);
    if (a4 || a8 || a17)
    {
      v27[143] = a12;
      v27[144] = a13;
      v27[145] = a14;
      *((unsigned char *)v27 + 1168) = 1;
      v27[57] = a17;
      if (a17) {
        CFRetain(a17);
      }
      v27[56] = a4;
      if (a7)
      {
        v27[129] = (CFTypeRef)a5;
        if (a5)
        {
          if (!a6) {
            a6 = a5 / (unint64_t)v27[23];
          }
          v27[126] = (CFTypeRef)a6;
        }
        v27[130] = (CFTypeRef)a7;
        CFArrayRef v43 = v27 + 40;
        uint64_t v44 = 78;
        uint64_t v45 = a8;
        unint64_t v47 = v109;
        unint64_t v46 = v110;
        do
        {
          if (a8) {
            char v48 = *v45;
          }
          else {
            char v48 = 0;
          }
          uint64_t v49 = *a11++;
          v43[38] = v49;
          uint64_t v50 = *a9++;
          v43[22] = v48;
          *(v43 - 16) = v50;
          uint64_t v51 = *a10++;
          *v43++ = v51;
          unint64_t v52 = v44 - 77;
          ++v44;
          ++v45;
        }
        while (v52 < (unint64_t)v27[130]);
      }
      else
      {
        v27[126] = (CFTypeRef)a6;
        v27[129] = (CFTypeRef)a5;
        unint64_t v47 = v109;
        unint64_t v46 = v110;
      }
      *a20 = 0;
    }
    else
    {
      uint64_t DefaultBytesPerRowAlignment = CVPixelBufferBacking::getDefaultBytesPerRowAlignment(0);
      CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v32, @"MetalCompatibility");
      CFBooleanRef v37 = Value;
      if (Value)
      {
        if (CFBooleanGetValue(Value))
        {
          uint64_t DefaultBytesPerRowAlignment = 64;
          int v38 = 64;
        }
        else
        {
          int v38 = 16;
        }
      }
      else
      {
        int v38 = 16;
      }
      CFDictionaryRef v53 = CFDictionaryGetValue(v32, @"MemoryAllocator");
      if (!v53) {
        CFDictionaryRef v53 = CFGetAllocator(v27[1]);
      }
      v27[137] = CFRetain(v53);
      CFDataRef v54 = (const __CFData *)CFDictionaryGetValue(v32, @"CustomMemoryLayoutCallBacks");
      if (v54)
      {
        CFDataRef v55 = v54;
        if (v37 && CFBooleanGetValue(v37)) {
          goto LABEL_39;
        }
        BytePtr = (uint64_t *)CFDataGetBytePtr(v55);
        uint64_t v58 = *BytePtr;
        if ((*BytePtr | 2) != 2)
        {
          *a20 = -6682;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            CVPixelBufferBacking::initWithPixelBufferDescription(v58);
          }
          goto LABEL_41;
        }
        if (!BytePtr[1] || !BytePtr[2])
        {
          *a20 = -6682;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            CVPixelBufferBacking::initWithPixelBufferDescription();
          }
          goto LABEL_41;
        }
        v27[138] = (CFTypeRef)v58;
        CFTypeRef v59 = (CFTypeRef)BytePtr[1];
        v27[139] = v59;
        v27[140] = (CFTypeRef)BytePtr[2];
        v27[141] = (CFTypeRef)BytePtr[3];
      }
      else
      {
        CFTypeRef v59 = v27[139];
      }
      if (!v59)
      {
        v27[138] = (CFTypeRef)3;
        v27[139] = _CVPixelBufferStandardMemoryLayout;
        v27[140] = _CVPixelBufferStandardMemoryDispose;
        v27[141] = 0;
      }
      if (a16)
      {
        uint64_t v60 = CVDictionaryGetIntValueWithDefault(a16, @"WorstCaseBytesPerRow", 0);
        uint64_t v61 = CVDictionaryGetIntValueWithDefault(a16, @"AdjustableBaseAddressGranularity", 0);
        BOOL v62 = CFDictionaryGetValue(a16, @"PixelBufferPoolNameKey");
        if (v62) {
          CVBufferBacking::setPoolName((atomic_uint *)v27, v62);
        }
      }
      else
      {
        uint64_t v60 = 0;
        uint64_t v61 = 0;
      }
      uint64_t v63 = CVDictionaryGetIntValueWithDefault(v32, @"BytesPerRowAlignment", 0);
      if (v63)
      {
        if ((int)DefaultBytesPerRowAlignment >= 0) {
          int v64 = DefaultBytesPerRowAlignment;
        }
        else {
          int v64 = -(int)DefaultBytesPerRowAlignment;
        }
        if ((int)v63 >= 0) {
          int v65 = v63;
        }
        else {
          int v65 = -(int)v63;
        }
        if (v64 <= v65) {
          unsigned int v66 = v65;
        }
        else {
          unsigned int v66 = v64;
        }
        if (v64 >= v65) {
          int v64 = v65;
        }
        if (v64)
        {
          CFDictionaryRef v67 = v32;
          if (v64 < 1)
          {
            int v68 = v66;
          }
          else
          {
            do
            {
              int v68 = v64;
              int v64 = (int)v66 % v64;
              unsigned int v66 = v68;
            }
            while (v64 > 0);
          }
        }
        else
        {
          if (v66 <= 1) {
            int v68 = 1;
          }
          else {
            int v68 = v66;
          }
          CFDictionaryRef v67 = v32;
        }
        uint64_t DefaultBytesPerRowAlignment = (int)v63 * (int)DefaultBytesPerRowAlignment / v68;
      }
      else
      {
        CFDictionaryRef v67 = v32;
      }
      uint64_t v69 = CVDictionaryGetIntValueWithDefault(v67, @"PlaneAlignment", 0);
      if (v69)
      {
        if ((int)v69 >= 0) {
          int v70 = v69;
        }
        else {
          int v70 = -(int)v69;
        }
        if (v38 <= v70) {
          unsigned int v71 = v70;
        }
        else {
          unsigned int v71 = v38;
        }
        if (v38 < v70) {
          int v70 = v38;
        }
        if (v70)
        {
          CFDictionaryRef v72 = v32;
          if (v70 < 1)
          {
            int v73 = v71;
          }
          else
          {
            do
            {
              int v73 = v70;
              int v70 = (int)v71 % v70;
              unsigned int v71 = v73;
            }
            while (v70 > 0);
          }
        }
        else
        {
          if (v71 <= 1) {
            int v73 = 1;
          }
          else {
            int v73 = v71;
          }
          CFDictionaryRef v72 = v32;
        }
        int v38 = (int)v69 * v38 / v73;
      }
      else
      {
        CFDictionaryRef v72 = v32;
      }
      if (v38 >= 0) {
        int v74 = v38;
      }
      else {
        int v74 = -v38;
      }
      if ((int)DefaultBytesPerRowAlignment >= 0) {
        int v75 = DefaultBytesPerRowAlignment;
      }
      else {
        int v75 = -(int)DefaultBytesPerRowAlignment;
      }
      if (v74 <= v75) {
        unsigned int v76 = v75;
      }
      else {
        unsigned int v76 = v74;
      }
      if (v74 >= v75) {
        int v74 = v75;
      }
      if (v74)
      {
        if (v74 < 1)
        {
          int v77 = v76;
        }
        else
        {
          do
          {
            int v77 = v74;
            int v74 = (int)v76 % v74;
            unsigned int v76 = v77;
          }
          while (v74 > 0);
        }
      }
      else if (v76 <= 1)
      {
        int v77 = 1;
      }
      else
      {
        int v77 = v76;
      }
      int v78 = v38 * (int)DefaultBytesPerRowAlignment / v77;
      if (a18 == 0)
      {
        if (v78 >= 0) {
          int v79 = v38 * (int)DefaultBytesPerRowAlignment / v77;
        }
        else {
          int v79 = -v78;
        }
        if (v79 <= 512) {
          int v80 = 512;
        }
        else {
          int v80 = v79;
        }
        if (v79 >= 512) {
          int v81 = 512;
        }
        else {
          int v81 = v79;
        }
        if (v79 >= 1 && v81)
        {
          do
          {
            int v82 = v81;
            int v81 = v80 % v81;
            int v80 = v82;
          }
          while (v81 > 0);
        }
        else
        {
          int v82 = v80;
        }
        int v78 = (v78 << 9) / v82;
      }
      CFTypeRef v83 = v27[138];
      if (v83 == (CFTypeRef)2)
      {
        int v84 = ((uint64_t (*)(CFTypeRef, CFTypeRef, const __CFDictionary *, const __CFDictionary *, void, const __CFDictionary *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, void, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *))v27[139])(v27[141], v27[137], v72, a16, 0, v108, v27[22], v27[23], v27[131], v27[133], v27[132], v27[134], DefaultBytesPerRowAlignment, v78, v60, v61, v27 + 56, v27 + 126, v27 + 129,
                v27 + 130,
                v27 + 24,
                v27 + 40,
                v27 + 142);
      }
      else if (v83 == (CFTypeRef)3)
      {
        int v84 = ((uint64_t (*)(CFTypeRef, CFTypeRef, const __CFDictionary *, const __CFDictionary *, void, const __CFDictionary *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, void, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, void, void, CFTypeRef *, unint64_t *, CFTypeRef *))v27[139])(v27[141], v27[137], v72, a16, 0, v108, v27[22], v27[23], v27[131], v27[133], v27[132], v27[134], DefaultBytesPerRowAlignment, v78, v60, v61, v27 + 56, v27 + 126, v27 + 129,
                v27 + 130,
                v27 + 24,
                v27 + 40,
                v27 + 57,
                a18,
                *((void *)&a18 + 1),
                v27 + 59,
                a19,
                v27 + 142);
      }
      else
      {
        int v84 = ((uint64_t (*)(CFTypeRef, CFTypeRef, const __CFDictionary *, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *, CFTypeRef *))v27[139])(v27[141], v27[137], v108, v27[22], v27[23], v27[131], v27[133], v27[132], v27[134], DefaultBytesPerRowAlignment, v60, v61, v27 + 56, v27 + 126, v27 + 129, v27 + 130, v27 + 24, v27 + 40, v27 + 142);
      }
      *a20 = v84;
      v85 = (__IOSurface *)v27[57];
      unint64_t v47 = v109;
      unint64_t v46 = v110;
      if (v85)
      {
        if ((CFTypeRef v86 = v27[131]) == 0 && !v27[133] && !v27[132] && !v27[134]
          || (setIOSurfaceIntValue(v85, @"ExtendedPixelsLeft", (int)v86),
              setIOSurfaceIntValue((__IOSurface *)v27[57], @"ExtendedPixelsRight", *((_DWORD *)v27 + 264)),
              setIOSurfaceIntValue((__IOSurface *)v27[57], @"ExtendedPixelsTop", *((_DWORD *)v27 + 266)),
              setIOSurfaceIntValue((__IOSurface *)v27[57], @"ExtendedPixelsBottom", *((_DWORD *)v27 + 268)),
              v27[57]))
        {
          unint64_t v87 = (const void *)*MEMORY[0x1E4F1CFD0];
          if (v87 == CFDictionaryGetValue(v32, @"IOSurfaceWiringAssertion")) {
            *((_DWORD *)v27 + 122) |= 2u;
          }
        }
      }
      if (!*a20)
      {
        if (v27[130])
        {
          if (!v27[57])
          {
            uint64_t v97 = (char *)v27[56];
            CFArrayRef v98 = (const __CFArray *)CFDictionaryGetValue(v108, @"Planes");
            if (v27[130])
            {
              CFArrayRef v99 = v98;
              unint64_t v100 = 0;
              uint64_t v101 = v27 + 62;
              unsigned int v102 = (unsigned int *)(v97 + 4);
              do
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v99, v100);
                unint64_t v104 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BitsPerBlock", 0);
                unint64_t v105 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"BlockWidth", 1);
                *uint64_t v101 = (char *)v27[56] + bswap32(*(v102 - 1));
                unsigned int v106 = *v102;
                v102 += 2;
                uint64_t v107 = bswap32(v106);
                v101[16] = v107;
                v101[32] = 8 * (unint64_t)v107 / (v104 / v105);
                v101[48] = v104 / v105;
                ++v100;
                ++v101;
              }
              while (v100 < (unint64_t)v27[130]);
            }
          }
        }
      }
    }
    unint64_t v88 = v46 / v47;
    if (v47 <= v46) {
      unint64_t v89 = 8 * (uint64_t)v27[126] / v88;
    }
    else {
      unint64_t v89 = 0;
    }
    v27[127] = (CFTypeRef)v89;
    v27[128] = (CFTypeRef)v88;
    if (*a20) {
      goto LABEL_41;
    }
    if (!*((unsigned char *)v27 + 1168))
    {
      int v90 = *((_DWORD *)v27 + 118);
      int v91 = *((_DWORD *)v27 + 122);
      pthread_once(&shouldTraceBackingSummary(void)::once, (void (*)(void))initPixelBufferBackingSummary);
      if (gPixelBufferBackingSummaryBag)
      {
        uint64_t v92 = (*((uint64_t (**)(CFTypeRef *))*v27 + 34))(v27);
        uint64_t v93 = (*((uint64_t (**)(CFTypeRef *))*v27 + 35))(v27);
        unsigned int v94 = (*((uint64_t (**)(CFTypeRef *))*v27 + 24))(v27);
        uint64_t v95 = (*((uint64_t (**)(CFTypeRef *))*v27 + 38))(v27);
        CFStringRef PoolName = (const __CFString *)CVBufferBacking::getPoolName((atomic_uint *)v27);
        addBackingSummaryToGlobalBagAndTrace(v92, v93, v94, v95, v90, v91, PoolName);
      }
      *((unsigned char *)v27 + 1169) = 1;
    }
  }
  else
  {
    CFNumberRef v27 = 0;
    *a20 = -6662;
  }
  return v27;
}

const __CFNumber *CVPixelBufferBacking::getPixelFormatDescription(CVPixelBufferBacking *this, const __CFDictionary *a2, unsigned int *a3)
{
  unsigned int valuePtr = 0;
  CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(this, @"PixelFormatDescription");
  if (!result)
  {
    CFNumberRef result = (const __CFNumber *)CFDictionaryGetValue(this, @"PixelFormatType");
    if (result)
    {
      CFNumberRef v6 = result;
      CFTypeID v7 = CFGetTypeID(result);
      if (v7 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
        CFNumberRef result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(valuePtr);
      }
      else
      {
        CFTypeID v8 = CFGetTypeID(v6);
        if (v8 == CFArrayGetTypeID() && (CFIndex Count = CFArrayGetCount(v6), Count >= 1))
        {
          CFIndex v10 = Count;
          for (CFIndex i = 0; i != v10; ++i)
          {
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v6, i);
            CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
            CFNumberRef result = (const __CFNumber *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(valuePtr);
            if (result) {
              break;
            }
          }
        }
        else
        {
          CFNumberRef result = 0;
        }
      }
    }
  }
  if (a2) {
    *(_DWORD *)a2 = valuePtr;
  }
  return result;
}

CVBufferBacking *CVBufferBacking::init(CVBufferBacking *this)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  pthread_mutexattr_init(&v3);
  pthread_mutexattr_settype(&v3, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), &v3);
  return this;
}

IOSurfaceRef IOOrEXSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetWidthOfPlane(buffer, planeIndex);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetHeightOfPlane(buffer, planeIndex);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetElementWidthOfPlane(buffer, planeIndex);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetBytesPerElementOfPlane(buffer, planeIndex);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetWidth(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetWidth(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetHeight(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetHeight(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetBytesPerRow(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetPlaneCount(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetPixelFormat(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetAllocSize(buffer);
  }
  return buffer;
}

uint64_t _CVPixelBufferStandardMemoryLayout(CVPixelBufferBacking *a1, const __CFAllocator *a2, const __CFDictionary *a3, const __CFDictionary *a4, const __CFDictionary *a5, const __CFDictionary *a6, __CFDictionary *a7, unint64_t a8, long long a9, unint64_t a10, long long a11, unint64_t a12, long long a13, unint64_t *a14, long long a15, unint64_t *a16, void **a17, unint64_t *a18, unint64_t *a19, __IOSurface **a20,unint64_t *a21,__CVBuffer *a22,__IOSurface **a23,__IOSurface *a24,__CVBuffer *a25,unsigned int *a26,unint64_t *a27,void **a28)
{
  return CVPixelBufferBacking::performStandardMemoryLayoutAndCopyIOSurfaceCreationProperties(a1, (void *)1, (uint64_t)a2, a3, a4, a6, a6, a7, a8, a9, a10, a11, *((unint64_t *)&a11 + 1), a12, a13, *((unint64_t *)&a13 + 1), a14, (void **)a15, *((unint64_t **)&a15 + 1),
           a16,
           (unint64_t *)a17,
           a18,
           a19,
           a20,
           (__IOSurface *)a21,
           a22,
           (unsigned int *)a23,
           (unint64_t *)a24,
           0,
           v29);
}

void setIOSurfaceIntValue(__IOSurface *a1, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  IOSurfaceSetValue(a1, a2, v5);
  CFRelease(v5);
}

uint64_t CVPixelBuffer::setBaseAddressAdjustment(uint64_t this, uint64_t a2)
{
  *(void *)(this + 96) = a2;
  return this;
}

uint64_t CVBunchPair::notifyPoolBufferBackingNotInUse(uint64_t this, CVBufferBacking *a2)
{
  if (*(void *)(this + 216)) {
    return (*(uint64_t (**)(void, CVBufferBacking *))(**(void **)(*(void *)(this + 216) + 16) + 80))(*(void *)(*(void *)(this + 216) + 16), a2);
  }
  return this;
}

uint64_t CVBufferPool::bufferBackingNotInUse(CVBufferPool *this, CVBufferBacking *a2)
{
  return (*(uint64_t (**)(void, CVBufferBacking *))(**((void **)this + 2) + 88))(*((void *)this + 2), a2);
}

IOSurfaceRef IOOrEXSurfaceGetElementWidth(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetElementWidth(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetElementHeight(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetElementHeight(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetBytesPerElement(buffer);
  }
  return buffer;
}

uint64_t _applyFunction(const void *a1, void *a2)
{
  return ((uint64_t (*)(const void *, void))*a2)(a1, a2[1]);
}

uint64_t _applyFunction(void *a1, void *a2)
{
  return 0;
}

uint64_t scanIOSurfacesCallback(void *a1, void *a2)
{
  return ((uint64_t (*)(void, void))*a2)(*(void *)(a1[2] + 456), a2[1]);
}

uint64_t _invalidateBacking(void **a1, void *a2)
{
  return (*(uint64_t (**)(void))(*a1[2] + 112))();
}

{
  return (*(uint64_t (**)(void))(*a1[2] + 112))();
}

{
  return (*(uint64_t (**)(void))(*a1[2] + 112))();
}

uint64_t _invalidateBacking(__CFArray *a1, void *a2)
{
  return 2;
}

uint64_t _tryToReuseABacking(_DWORD *a1, void **a2)
{
  int v4 = a1[3];
  if (v4)
  {
    int v5 = (*(uint64_t (**)(void *))(*a2[2] + 128))(a2[2]);
  }
  else if ((v4 & 2) != 0)
  {
    int v5 = (*(uint64_t (**)(void *))(*a2[2] + 128))(a2[2]) ^ 1;
  }
  else
  {
    int v5 = 1;
  }
  if ((*(unsigned int (**)(void *))(*a2[2] + 80))(a2[2])) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    uint64_t result = 0;
    ++a1[2];
  }
  else
  {
    *(void *)a1 = a2;
    return 3;
  }
  return result;
}

uint64_t CVPixelBufferBacking::okToReuse(CVPixelBufferBacking *this)
{
  uint64_t v2 = (__IOSurface *)*((void *)this + 57);
  if (v2 && IOOrEXSurfaceIsInUse(v2)) {
    return 0;
  }

  return CVBufferBacking::okToReuse(this);
}

uint64_t CVBufferBacking::okToReuse(CVBufferBacking *this)
{
  return 1;
}

void CVPixelBufferPoolRelease(CVPixelBufferPoolRef pixelBufferPool)
{
  if (pixelBufferPool) {
    CFRelease(pixelBufferPool);
  }
}

uint64_t CVPixelBufferBacking::getHeightOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 130);
  if (!(a2 | v2)) {
    return (*(uint64_t (**)(void))(*(void *)this + 280))();
  }
  if (v2 <= a2) {
    return 0;
  }
  return *((void *)this + a2 + 40);
}

uint64_t CVPixelBufferBacking::getWidthOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 130);
  if (!(a2 | v2)) {
    return (*(uint64_t (**)(void))(*(void *)this + 272))();
  }
  if (v2 <= a2) {
    return 0;
  }
  return *((void *)this + a2 + 24);
}

void *CVPixelBufferBacking::getExtendedPixels(void *this, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  if (a2) {
    *a2 = this[131];
  }
  if (a3) {
    *a3 = this[132];
  }
  if (a4) {
    *a4 = this[133];
  }
  if (a5) {
    *a5 = this[134];
  }
  return this;
}

const void *CVPixelBuffer::getAttachment(CVPixelBuffer *this, const __CFString *a2, CVAttachmentMode *a3)
{
  if (_os_feature_enabled_impl()
    && (uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15))) != 0)
  {
    CFTypeID v7 = (__IOSurface *)v6;
    CFStringRef v8 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    uint64_t v9 = (const void *)copyIOSurfaceAttachment(v7, v8);
    CFIndex v10 = (__CFDictionary *)*((void *)this + 11);
    if (v9)
    {
      CFDictionarySetValue(v10, a2, v9);
      if (a3) {
        *a3 = kCVAttachmentMode_ShouldPropagate;
      }
      CFRelease(v9);
    }
    else
    {
      CFBooleanRef Value = CFDictionaryGetValue(v10, a2);
      if (Value)
      {
        uint64_t v9 = Value;
        if (a3) {
          *a3 = kCVAttachmentMode_ShouldPropagate;
        }
      }
      else
      {
        int v13 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
        uint64_t v9 = v13;
        if (a3 && v13) {
          *a3 = kCVAttachmentMode_ShouldNotPropagate;
        }
      }
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
    return v9;
  }
  else
  {
    return CVBuffer::getAttachment((CFDictionaryRef *)this, a2, a3);
  }
}

void *CVDataBufferPoolGetDataBufferAttributes(void *a1)
{
  uint64_t result = _getCVDataBufferPool(a1);
  if (result)
  {
    unint64_t v2 = *(uint64_t (**)(void))(*result + 120);
    return (void *)v2();
  }
  return result;
}

Boolean CVImageBufferIsFlipped(CVImageBufferRef imageBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    unint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *))(*CVPixelBuffer + 160))(CVPixelBuffer)
                             + 200);
    LOBYTE(CVPixelBuffer) = v2();
  }
  return CVPixelBuffer;
}

uint64_t CVDataBufferPoolCreateDataBuffer(uint64_t a1, void *a2, void *a3)
{
  unsigned int v8 = -6660;
  CVDataBufferPool = _getCVDataBufferPool(a2);
  uint64_t v6 = 4294960635;
  if (a3 && CVDataBufferPool)
  {
    *a3 = (*(uint64_t (**)(void *, uint64_t, void, unsigned int *))(*CVDataBufferPool + 104))(CVDataBufferPool, a1, 0, &v8);
    return v8;
  }
  return v6;
}

void *_getCVDataBufferPool(void *result)
{
  if (result)
  {
    char v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVDataBufferPoolGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CVDataBufferPoolGetTypeID()
{
  if (CVDataBufferPoolGetTypeID::once != -1) {
    dispatch_once_f(&CVDataBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBufferPool);
  }
  return kCVDataBufferPoolID;
}

CVBuffer **CVDataBufferPool::createDataBuffer(CFDictionaryRef *this, const __CFAllocator *a2, const __CFDictionary *a3, int *a4)
{
  uint64_t v31 = 0;
  CFBooleanRef Value = CFDictionaryGetValue(this[5], @"IOSurfaceProperties");
  if (Value && (uint64_t v9 = Value, v10 = CFGetTypeID(Value), v10 == CFDictionaryGetTypeID()))
  {
    uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v9, (const void *)*MEMORY[0x1E4F2F150], 0);
    uint64_t v12 = CVDictionaryGetIntValueWithDefault(v9, (const void *)*MEMORY[0x1E4F2EFB8], 0);
  }
  else
  {
    uint64_t IntValueWithDefault = 0;
    uint64_t v12 = 0;
  }
  (*(void (**)(CFDictionaryRef))(*(void *)this[2] + 160))(this[2]);
  int v13 = (*(uint64_t (**)(CFDictionaryRef, uint64_t *, void))(*(void *)this[2] + 128))(this[2], &v31, 0);
  uint64_t v15 = (*(uint64_t (**)(CFDictionaryRef))(*(void *)this[2] + 96))(this[2]);
  if (v31 && (uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 24))(v31)) != 0)
  {
    uint64_t v17 = v16;
    if ((*(uint64_t (**)(void))(**(void **)(v16 + 16) + 208))(*(void *)(v16 + 16))) {
      IOSurfaceClearDataProperties();
    }
  }
  else
  {
    if (a3)
    {
      CFNumberRef v19 = (const __CFNumber *)CFDictionaryGetValue(a3, @"BufferPoolAllocationThreshold");
      uint64_t v30 = 0;
      if (v19)
      {
        CFNumberRef v20 = v19;
        CFTypeID v21 = CFGetTypeID(v19);
        if (v21 == CFNumberGetTypeID())
        {
          CFNumberGetValue(v20, kCFNumberLongType, &v30);
          if (v30 >= 1 && v30 <= v15 + v13)
          {
            uint64_t v22 = 0;
            int v23 = -6689;
LABEL_24:
            *a4 = v23;
            goto LABEL_25;
          }
        }
      }
    }
    unint64_t v24 = CVDataBufferBacking::alloc(a2, v14);
    if (!v24)
    {
      uint64_t v22 = 0;
      goto LABEL_23;
    }
    uint64_t v17 = (uint64_t)v24;
    if (!(*(uint64_t (**)(CVBufferBacking *, uint64_t, uint64_t, CFDictionaryRef, CFDictionaryRef, void, int *))(*(void *)v24[2] + 176))(v24[2], IntValueWithDefault, v12, this[5], this[4], 0, a4))
    {
      uint64_t v22 = 0;
      goto LABEL_25;
    }
    (*(void (**)(CFDictionaryRef, void, uint64_t, void))(*(void *)this[2] + 112))(this[2], *(void *)(v17 + 16), 1, 0);
    uint64_t v25 = (void *)(*((uint64_t (**)(CFDictionaryRef *))*this + 3))(this);
    uint64_t v26 = (*(uint64_t (**)(CFDictionaryRef))(*(void *)this[2] + 96))(this[2]) + 1;
    uint64_t v27 = (*(uint64_t (**)(CFDictionaryRef))(*(void *)this[2] + 104))(this[2]);
    CVTracePoolAction(1, v25, (void **)v17, "CVDataBuffer backing created", v26, v27 - 1);
  }
  CFAllocatorRef v28 = CVDataBuffer::alloc(a2, v18);
  uint64_t v22 = v28;
  if (!v28
    || !(*(uint64_t (**)(CVBuffer *, void))(*(void *)v28[2] + 160))(v28[2], *(void *)(v17 + 16)))
  {
    (*(void (**)(CFDictionaryRef, void))(*(void *)this[2] + 120))(this[2], *(void *)(v17 + 16));
LABEL_23:
    int v23 = -6660;
    goto LABEL_24;
  }
  (*(void (**)(CVBuffer *, CFDictionaryRef))(*(void *)v22[2] + 144))(v22[2], this[5]);
  *a4 = 0;
LABEL_25:
  (*(void (**)(CFDictionaryRef))(*(void *)this[2] + 168))(this[2]);
  (*(void (**)(CFDictionaryRef))(*(void *)this[2] + 136))(this[2]);
  return v22;
}

CVBufferBacking **CVDataBufferBacking::alloc(CVDataBufferBacking *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVDataBufferBacking *)_cvTrackingGetCFAllocator(@"CVDataBufferBacking");
  }
  CFTypeID TypeID = (CVObject *)CVObjectGetTypeID();
  int v4 = (CVBufferBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0xC0uLL);
  int v5 = v4;
  if (v4)
  {
    CVBufferBacking::CVBufferBacking(v4[2], v4);
    *(void *)uint64_t v6 = &unk_1EFA16EB0;
    *(void *)(v6 + 144) = 0;
    *(void *)(v6 + 16pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
    *(_DWORD *)(v6 + 168) = 0;
  }
  return v5;
}

uint64_t CVMetalTextureBacking::setImageBacking(CVMetalTextureBacking *this, CVImageBacking *a2)
{
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(CVImageBacking *))(*(void *)a2 + 32))(a2);
    atomic_fetch_and_explicit((atomic_uint *volatile)this + 24, 0xFFFFFFFE, memory_order_relaxed);
  }
  else
  {
    uint64_t result = 0;
  }
  *((void *)this + 21) = result;
  return result;
}

uint64_t CVPixelBufferIsCompatibleWithAttributes(__CVBuffer *a1, const __CFDictionary *a2)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(PixelFormatType);
  CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(a2, @"MetalCompatibility");
  if (Value && CFBooleanGetValue(Value))
  {
    if (!CVPixelBufferGetIOSurface(a1))
    {
      CFTypeID v10 = "IOSurface backing for Metal compatibility not satisfied";
      goto LABEL_167;
    }
    if (CVPixelBufferIsPlanar(a1))
    {
      PlaneCFIndex Count = CVPixelBufferGetPlaneCount(a1);
      if (PlaneCount)
      {
        size_t v8 = PlaneCount;
        size_t v9 = 0;
        while ((CVPixelBufferGetBytesPerRowOfPlane(a1, v9) & 0x3F) == 0)
        {
          if (((unint64_t)getBaseAddressOfPlaneWithoutLock(a1, v9) & 0x3F) != 0) {
            goto LABEL_15;
          }
          if (v8 == ++v9) {
            goto LABEL_16;
          }
        }
        goto LABEL_13;
      }
    }
    else
    {
      if ((CVPixelBufferGetBytesPerRow(a1) & 0x3F) != 0)
      {
LABEL_13:
        CFTypeID v10 = "rowbytes alignment for Metal compatibility not satisfied";
        goto LABEL_167;
      }
      if (((unint64_t)getBaseAddressWithoutLock(a1) & 0x3F) != 0)
      {
LABEL_15:
        CFTypeID v10 = "plane alignment for Metal compatibility not satisfied";
        goto LABEL_167;
      }
    }
  }
LABEL_16:
  uint64_t v11 = CFDictionaryGetValue(a2, @"IOSurfaceOpenGLFBOCompatibility");
  if (v11)
  {
    if (!DescriptionWithPixelFormatType)
    {
      CFTypeID v10 = "unknown pixel format -- not IOSurfaceOpenGLFBO compatible";
      goto LABEL_167;
    }
    uint64_t v12 = v11;
    int v13 = CFDictionaryGetValue(DescriptionWithPixelFormatType, @"IOSurfaceOpenGLFBOCompatibility");
    if (v13) {
      CFAllocatorRef v14 = v13;
    }
    else {
      CFAllocatorRef v14 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    if (!CFEqual(v12, v14))
    {
      CFTypeID v10 = "pixel format not IOSurfaceOpenGLFBO compatible";
      goto LABEL_167;
    }
  }
  uint64_t v15 = CFDictionaryGetValue(a2, @"OpenGLESCompatibility");
  if (v15)
  {
    if (!DescriptionWithPixelFormatType)
    {
      CFTypeID v10 = "unknown pixel format -- not OpenGLES compatible";
      goto LABEL_167;
    }
    uint64_t v16 = v15;
    uint64_t v17 = CFDictionaryGetValue(DescriptionWithPixelFormatType, @"OpenGLESCompatibility");
    if (v17) {
      CFAllocatorRef v18 = v17;
    }
    else {
      CFAllocatorRef v18 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    if (!CFEqual(v16, v18))
    {
      CFTypeID v10 = "pixel format not OpenGLES compatible";
      goto LABEL_167;
    }
  }
  CFNumberRef v19 = CFDictionaryGetValue(a2, @"IOSurfaceOpenGLESTextureCompatibility");
  if (v19)
  {
    if (!DescriptionWithPixelFormatType)
    {
      CFTypeID v10 = "unknown pixel format -- not IOSurfaceOpenGLESTexture compatible";
      goto LABEL_167;
    }
    CFNumberRef v20 = v19;
    CFTypeID v21 = CFDictionaryGetValue(DescriptionWithPixelFormatType, @"IOSurfaceOpenGLESTextureCompatibility");
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    if (!CFEqual(v20, v22))
    {
      CFTypeID v10 = "pixel format not IOSurfaceOpenGLESTexture compatible";
      goto LABEL_167;
    }
  }
  int v23 = CFDictionaryGetValue(a2, @"IOSurfaceOpenGLESFBOCompatibility");
  if (v23)
  {
    if (!DescriptionWithPixelFormatType)
    {
      CFTypeID v10 = "unknown pixel format -- not IOSurfaceOpenGLESFBO compatible";
      goto LABEL_167;
    }
    unint64_t v24 = v23;
    uint64_t v25 = CFDictionaryGetValue(DescriptionWithPixelFormatType, @"IOSurfaceOpenGLESFBOCompatibility");
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    if (!CFEqual(v24, v26))
    {
      CFTypeID v10 = "pixel format not IOSurfaceOpenGLESFBO compatible";
      goto LABEL_167;
    }
  }
  uint64_t v27 = CFDictionaryGetValue(a2, @"IOSurfaceCoreAnimationCompatibility");
  if (v27)
  {
    if (!DescriptionWithPixelFormatType)
    {
      CFTypeID v10 = "unknown pixel format -- not IOSurfaceCoreAnimation compatible";
      goto LABEL_167;
    }
    CFAllocatorRef v28 = v27;
    long long v29 = CFDictionaryGetValue(DescriptionWithPixelFormatType, @"IOSurfaceCoreAnimationCompatibility");
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    if (!CFEqual(v28, v30))
    {
      CFTypeID v10 = "pixel format not IOSurfaceCoreAnimation compatible";
      goto LABEL_167;
    }
  }
  uint64_t v31 = CFDictionaryGetValue(a2, @"MemoryAllocator");
  if (v31)
  {
    CFDictionaryRef v32 = v31;
    CFDictionaryRef Attributes = (const __CFDictionary *)CVPixelBufferGetAttributes(a1);
    CFDictionaryRef v34 = CFDictionaryGetValue(Attributes, @"MemoryAllocator");
    if (!v34)
    {
      CFTypeID v10 = "not using custom memory allocator";
      goto LABEL_167;
    }
    if (!CFEqual(v32, v34))
    {
      CFTypeID v10 = "custom memory allocator mismatch";
      goto LABEL_167;
    }
  }
  CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(a2, @"PixelFormatType");
  if (v35)
  {
    CFNumberRef v36 = v35;
    OSType v37 = CVPixelBufferGetPixelFormatType(a1);
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v36))
    {
      int64_t valuePtr = 0;
      if (!CFNumberGetValue(v36, kCFNumberLongType, &valuePtr) || valuePtr != v37)
      {
        CFTypeID v10 = "wrong pixel format";
        goto LABEL_167;
      }
    }
    else
    {
      CFTypeID v39 = CFArrayGetTypeID();
      if (v39 == CFGetTypeID(v36) && !numberIsInCFArrayOfCFNumbers(v37, v36))
      {
        CFTypeID v10 = "pixel format not in list";
        goto LABEL_167;
      }
    }
  }
  CFNumberRef v40 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Width");
  CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(a2, @"Height");
  if (v40)
  {
    CFTypeID v42 = CFNumberGetTypeID();
    if (v42 == CFGetTypeID(v40))
    {
      size_t Width = CVPixelBufferGetWidth(a1);
      int64_t valuePtr = 0;
      if (!CFNumberGetValue(v40, kCFNumberLongType, &valuePtr) || valuePtr != Width)
      {
        CFTypeID v10 = "wrong width";
        goto LABEL_167;
      }
    }
  }
  if (v41)
  {
    CFTypeID v44 = CFNumberGetTypeID();
    if (v44 == CFGetTypeID(v41))
    {
      size_t Height = CVPixelBufferGetHeight(a1);
      int64_t valuePtr = 0;
      if (!CFNumberGetValue(v41, kCFNumberLongType, &valuePtr) || valuePtr != Height)
      {
        CFTypeID v10 = "wrong height";
        goto LABEL_167;
      }
    }
  }
  CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ExtendedPixelsLeft");
  CFNumberRef v47 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ExtendedPixelsTop");
  CFNumberRef v48 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ExtendedPixelsRight");
  CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ExtendedPixelsBottom");
  CFNumberRef v50 = v49;
  if (v46 || v47 || v48 || v49)
  {
    size_t extraRowsOnTop = 0;
    size_t extraColumnsOnLeft = 0;
    size_t extraRowsOnBottom = 0;
    size_t extraColumnsOnRight = 0;
    CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
    if (v46)
    {
      CFTypeID v55 = CFNumberGetTypeID();
      if (v55 == CFGetTypeID(v46))
      {
        int64_t v56 = extraColumnsOnLeft;
        int64_t valuePtr = 0;
        if (CFNumberGetValue(v46, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v56)
          {
            CFTypeID v10 = "insufficient extended-left";
            goto LABEL_167;
          }
        }
      }
    }
    if (v47)
    {
      CFTypeID v57 = CFNumberGetTypeID();
      if (v57 == CFGetTypeID(v47))
      {
        int64_t v58 = extraRowsOnTop;
        int64_t valuePtr = 0;
        if (CFNumberGetValue(v47, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v58)
          {
            CFTypeID v10 = "insufficient extended-top";
            goto LABEL_167;
          }
        }
      }
    }
    if (v48)
    {
      CFTypeID v59 = CFNumberGetTypeID();
      if (v59 == CFGetTypeID(v48))
      {
        int64_t v60 = extraColumnsOnRight;
        int64_t valuePtr = 0;
        if (CFNumberGetValue(v48, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v60)
          {
            CFTypeID v10 = "insufficient extended-right";
            goto LABEL_167;
          }
        }
      }
    }
    if (v50)
    {
      CFTypeID v61 = CFNumberGetTypeID();
      if (v61 == CFGetTypeID(v50))
      {
        int64_t v62 = extraRowsOnBottom;
        int64_t valuePtr = 0;
        if (CFNumberGetValue(v50, kCFNumberLongType, &valuePtr))
        {
          if (valuePtr > v62)
          {
            CFTypeID v10 = "insufficient extended-bottom";
            goto LABEL_167;
          }
        }
      }
    }
  }
  CFNumberRef v51 = (const __CFNumber *)CFDictionaryGetValue(a2, @"ExactBytesPerRow");
  if (v51)
  {
    CFNumberRef v52 = v51;
    CFTypeID v53 = CFNumberGetTypeID();
    if (v53 == CFGetTypeID(v52))
    {
      if (!CVPixelBufferIsPlanar(a1))
      {
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
        int64_t valuePtr = 0;
        if (!CFNumberGetValue(v52, kCFNumberLongType, &valuePtr) || valuePtr != BytesPerRow)
        {
          CFTypeID v10 = "exact bytes per row not satisfied";
          goto LABEL_167;
        }
      }
    }
    else
    {
      CFTypeID v63 = CFArrayGetTypeID();
      if (v63 == CFGetTypeID(v52))
      {
        if (CVPixelBufferIsPlanar(a1))
        {
          size_t v64 = CVPixelBufferGetPlaneCount(a1);
          if (CFArrayGetCount(v52) == v64)
          {
            if (v64)
            {
              size_t v65 = 0;
              while (1)
              {
                CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v52, v65);
                size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v65);
                CFTypeID v68 = CFNumberGetTypeID();
                if (v68 == CFGetTypeID(ValueAtIndex))
                {
                  int64_t valuePtr = 0;
                  if (!CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr) || valuePtr != BytesPerRowOfPlane) {
                    break;
                  }
                }
                if (v64 == ++v65) {
                  goto LABEL_115;
                }
              }
              CFTypeID v10 = "exact bytes per row not satisfied (planar)";
              goto LABEL_167;
            }
          }
        }
      }
    }
  }
LABEL_115:
  CFNumberRef v69 = (const __CFNumber *)CFDictionaryGetValue(a2, @"BytesPerRowAlignment");
  if (v69)
  {
    CFNumberRef v70 = v69;
    CFTypeID v71 = CFNumberGetTypeID();
    if (v71 == CFGetTypeID(v70))
    {
      if (CVPixelBufferIsPlanar(a1))
      {
        size_t v72 = CVPixelBufferGetPlaneCount(a1);
        if (v72)
        {
          size_t v73 = v72;
          size_t v74 = 0;
          while (1)
          {
            size_t v75 = CVPixelBufferGetBytesPerRowOfPlane(a1, v74);
            if (!numberIsMultipleOfCFNumber(v75, v70)) {
              break;
            }
            if (v73 == ++v74) {
              goto LABEL_127;
            }
          }
          CFTypeID v10 = "bytes per row alignment not satisfied (planar)";
          goto LABEL_167;
        }
      }
      else
      {
        size_t v76 = CVPixelBufferGetBytesPerRow(a1);
        if (!numberIsMultipleOfCFNumber(v76, v70))
        {
          CFTypeID v10 = "bytes per row alignment not satisfied";
          goto LABEL_167;
        }
      }
    }
  }
LABEL_127:
  CFNumberRef v77 = (const __CFNumber *)CFDictionaryGetValue(a2, @"PlaneAlignment");
  if (v77)
  {
    CFNumberRef v78 = v77;
    CFTypeID v79 = CFNumberGetTypeID();
    if (v79 == CFGetTypeID(v78))
    {
      if (CVPixelBufferIsPlanar(a1))
      {
        size_t v80 = CVPixelBufferGetPlaneCount(a1);
        if (v80)
        {
          size_t v81 = v80;
          uint64_t v82 = 0;
          do
          {
            BaseAddressOfPlaneWithoutLock = getBaseAddressOfPlaneWithoutLock(a1, v82);
            if (!addressIsMultipleOfCFNumber((uint64_t)BaseAddressOfPlaneWithoutLock, v78)) {
              goto LABEL_155;
            }
          }
          while (v81 != ++v82);
        }
      }
      else
      {
        BaseAddressWithoutLock = getBaseAddressWithoutLock(a1);
        if (!addressIsMultipleOfCFNumber((uint64_t)BaseAddressWithoutLock, v78))
        {
LABEL_155:
          CFTypeID v10 = "plane alignment not satisfied";
          goto LABEL_167;
        }
      }
    }
  }
  v85 = CFDictionaryGetValue(a2, @"ExactHeight");
  if (!v85) {
    goto LABEL_143;
  }
  CFTypeRef v86 = v85;
  CFTypeID v87 = CFNumberGetTypeID();
  if (v87 != CFGetTypeID(v86)) {
    goto LABEL_143;
  }
  size_t v88 = CVPixelBufferGetHeight(a1);
  size_t extraRowsOnTop = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraColumnsOnRight = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  size_t v89 = extraRowsOnTop + v88 + extraRowsOnBottom;
  int64_t valuePtr = 0;
  if (CFNumberGetValue((CFNumberRef)v86, kCFNumberLongType, &valuePtr) && valuePtr == v89)
  {
LABEL_143:
    CFDictionaryRef v91 = (const __CFDictionary *)CFDictionaryGetValue(a2, @"IOSurfaceProperties");
    CFArrayRef v92 = (const __CFArray *)CFDictionaryGetValue(a2, @"CacheMode");
    if ((unint64_t)v91 | (unint64_t)v92)
    {
      CFArrayRef v93 = v92;
      IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
      if (v91)
      {
        CFTypeID v95 = CFDictionaryGetTypeID();
        if (v95 == CFGetTypeID(v91))
        {
          if (!IOSurface)
          {
            CFTypeID v10 = "not IOSurface backed";
            goto LABEL_167;
          }
          CFDictionaryRef v91 = (const __CFDictionary *)CFDictionaryGetValue(v91, (const void *)*MEMORY[0x1E4F2EFE8]);
        }
        else
        {
          CFDictionaryRef v91 = 0;
        }
      }
      if ((unint64_t)v93 | (unint64_t)v91)
      {
        if (!IOSurface)
        {
          CFTypeID v10 = "not IOSurface backed -- no custom cache mode";
          goto LABEL_167;
        }
        uint64_t CacheMode = IOSurfaceGetCacheMode();
        if (v93 && (CFTypeID v97 = CFArrayGetTypeID(), v97 == CFGetTypeID(v93)))
        {
          if (!numberIsInCFArrayOfCFNumbers(CacheMode, v93))
          {
            CFTypeID v10 = "cache mode not in list";
            goto LABEL_167;
          }
        }
        else if (v91)
        {
          CFTypeID v98 = CFNumberGetTypeID();
          if (v98 == CFGetTypeID(v91))
          {
            int64_t valuePtr = 0;
            if (!CFNumberGetValue(v91, kCFNumberLongType, &valuePtr) || valuePtr != CacheMode)
            {
              CFTypeID v10 = "wrong cache mode";
              goto LABEL_167;
            }
          }
        }
      }
    }
    return 1;
  }
  CFTypeID v10 = "exact height not satisfied";
LABEL_167:
  reportIncompatiblePixelBuffer(a1, a2, v10);
  return 0;
}

uint64_t CVPixelBufferBacking::getPixelFormatType(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], @"PixelFormat", 0);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  IOSurfaceRef result = (IOSurfaceRef)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(**((void **)result + 15) + 152);
    return (IOSurfaceRef)v2();
  }
  return result;
}

BOOL CVPixelBufferBacking::isPlanar(CVPixelBufferBacking *this)
{
  return *((void *)this + 130) != 0;
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)CVPixelBuffer[15] + 312);
    LOBYTE(CVPixelBuffer) = v2();
  }
  return CVPixelBuffer;
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  size_t result = (size_t)_getCVPixelBuffer(pixelBuffer);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(**(void **)(result + 120) + 296);
    return v2();
  }
  return result;
}

void *getBaseAddressWithoutLock(__CVBuffer *a1)
{
  size_t result = _getCVPixelBuffer(a1);
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    size_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 264))(result, 0);
    if (!result)
    {
      pthread_mutexattr_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 264);
      return (void *)v3(v2, 1);
    }
  }
  return result;
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    (*(void (**)(void *))(*CVPixelBuffer + 176))(CVPixelBuffer);
  }
  else
  {
    double v2 = 0.0;
    double v3 = 0.0;
  }
  result.height = v3;
  result.width = v2;
  return result;
}

double CVPixelBufferBacking::getSize(CVPixelBufferBacking *this)
{
  return (float)*((unint64_t *)this + 22);
}

uint64_t CVImageBuffer::getEncodedSize(CVImageBuffer *this)
{
  char v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CVImageBuffer *))(*(void *)this + 160))(this)
                           + 176);

  return v1();
}

uint64_t CVMetalTexture::finalize(CVMetalTexture *this)
{
  uint64_t v2 = *((void *)this + 13);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 336))(v2) && *((unsigned char *)this + 96)) {
      (*(void (**)(void))(**((void **)this + 13) + 72))(*((void *)this + 13));
    }
    (*(void (**)(void))(**((void **)this + 13) + 40))(*((void *)this + 13));
    *((void *)this + 13) = 0;
  }

  return CVImageBuffer::finalize(this);
}

uint64_t CVBufferPool::finalize(CVBufferPool *this)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(CVBufferPool *))(*(void *)this + 24))(this);
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
    uint64_t v5 = *((void *)this + 2);
    if (v5)
    {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v6 = 0;
LABEL_6:
  CVTracePoolAction(1, v2, 0, "being deallocated", v4, v6);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
    (*(void (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
    *((void *)this + 2) = 0;
  }
  size_t v8 = (const void *)*((void *)this + 3);
  if (v8) {
    CFRelease(v8);
  }
  *((void *)this + 3) = 0;

  return CVObject::finalize(this);
}

uint64_t CVPixelBuffer::finalize(CVPixelBuffer *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 15);
  if (v2)
  {
    if (*(void *)(v2 + 456))
    {
      int v3 = *(_DWORD *)(v2 + 168);
      if (v3 >= 1)
      {
        snprintf(__str, 0xC8uLL, "Finalizing CVPixelBuffer %p while lock count is %d.", *((const void **)this + 1), v3);
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          size_t v9 = __str;
          _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        }
        uint64_t v2 = *((void *)this + 15);
      }
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v2))
    {
      uint64_t v4 = 0;
      char v5 = 1;
      do
      {
        char v6 = v5;
        __str[0] = 0;
        do
        {
          CVDecrementAtomicCounter((atomic_uint *)this + v4 + 27, (BOOL *)__str);
          if (!__str[0]) {
            break;
          }
          IOSurfaceDecrementUseCountForCategory();
        }
        while (__str[0]);
        char v5 = 0;
        uint64_t v4 = 1;
      }
      while ((v6 & 1) != 0);
    }
    if (*((unsigned char *)this + 104)) {
      (*(void (**)(void))(**((void **)this + 15) + 72))(*((void *)this + 15));
    }
    (*(void (**)(void))(**((void **)this + 15) + 40))(*((void *)this + 15));
    *((void *)this + 15) = 0;
  }
  return CVImageBuffer::finalize(this);
}

uint64_t CVDecrementAtomicCounter(atomic_uint *a1, BOOL *a2)
{
  do
  {
    uint64_t result = *a1;
    if (!result) {
      break;
    }
    atomic_uint v4 = *a1;
    atomic_compare_exchange_strong(a1, (unsigned int *)&v4, result - 1);
  }
  while (v4 != result);
  *a2 = result != 0;
  return result;
}

void CVObject::release(CFTypeRef *this)
{
}

uint64_t CVBuffer::finalize(CVBuffer *this)
{
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  uint64_t v2 = (const void *)*((void *)this + 10);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = (const void *)*((void *)this + 11);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
  *((void *)this + 11) = 0;

  return CVObject::finalize(this);
}

void CVPixelBufferBacking::releaseUsage(CVPixelBufferBacking *this)
{
  uint64_t v2 = (__IOSurface *)*((void *)this + 57);
  if (v2) {
    IOOrEXSurfaceDecrementUseCount(v2);
  }

  CVBufferBacking::releaseUsage((atomic_uint *)this);
}

void IOOrEXSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
  if (buffer) {
    IOSurfaceDecrementUseCount(buffer);
  }
}

void CVBufferBacking::invalidateBacking(atomic_uint *this)
{
}

void CVBitOrAtomic(int a1, atomic_uint *a2)
{
  do
  {
    atomic_uint v3 = *a2;
    atomic_uint v4 = *a2;
    atomic_compare_exchange_strong(a2, (unsigned int *)&v4, *a2 | a1);
  }
  while (v4 != v3);
}

uint64_t CVMetalTextureBacking::releaseUsage(atomic_uint *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CVBufferBacking::releaseUsage(this);
  uint64_t v2 = (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex;

  return pthread_mutex_unlock(v2);
}

uint64_t CVLockingBunchPair::exitBackingsCriticalSection(CVLockingBunchPair *this)
{
  uint64_t v2 = pthread_rwlock_unlock((pthread_rwlock_t *)((char *)this + 16));
  CVAddAtomic(0, (atomic_uint *)this + 64);
  if (v3)
  {
    (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
    pthread_cond_broadcast((pthread_cond_t *)((char *)this + 264));
    (*(void (**)(CVLockingBunchPair *))(*(void *)this + 168))(this);
  }
  return v2;
}

void CVAddAtomic(int a1, atomic_uint *a2)
{
  do
  {
    atomic_uint v3 = *a2;
    atomic_uint v4 = *a2;
    atomic_compare_exchange_strong(a2, (unsigned int *)&v4, *a2 + a1);
  }
  while (v4 != v3);
}

uint64_t CVMetalTextureCache::bufferBackingNotInUse(CVMetalTextureCache *this, CVBufferBacking *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  atomic_uint v4 = (__CFArray *)*((void *)this + 5);
  char v5 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  CFArrayRef v6 = *(const __CFArray **)(*((void *)this + 2) + 232);
  CFIndex Count = CFArrayGetCount(v6);
  size_t v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v20.location = 0;
  v20.length = Count;
  FirstIndexOfCFBooleanRef Value = CFArrayGetFirstIndexOfValue(v6, v20, v8);
  CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
  if ((*(unsigned int (**)(CVBufferBacking *))(*(void *)a2 + 304))(a2))
  {
    if ((*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 336))(a2)) {
      CFTypeID v10 = (__CFArray **)((char *)this + 64);
    }
    else {
      CFTypeID v10 = (__CFArray **)(*((void *)this + 2) + 224);
    }
    uint64_t v11 = *v10;
    uint64_t v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFArrayAppendValue(v11, v12);
    CFArrayRef v13 = (const __CFArray *)*((void *)this + 5);
    CFIndex v14 = CFArrayGetCount(v13);
    uint64_t v15 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    v21.location = 0;
    v21.length = v14;
    CFIndex v16 = CFArrayGetFirstIndexOfValue(v13, v21, v15);
    CFArrayRemoveValueAtIndex(v13, v16);
    (*(void (**)(CVBufferBacking *))(*(void *)a2 + 320))(a2);
  }
  uint64_t v17 = (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex;

  return pthread_mutex_unlock(v17);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  CVMetalTextureCache = _getCVMetalTextureCache(textureCache);
  CVImageBuffer = _getCVImageBuffer(sourceImage);
  CVReturn v21 = -6660;
  if (textureOut) {
    BOOL v18 = CVMetalTextureCache == 0;
  }
  else {
    BOOL v18 = 1;
  }
  if (v18 || CVImageBuffer == 0) {
    return -6661;
  }
  *textureOut = (CVMetalTextureRef)(*(uint64_t (**)(void *, CFAllocatorRef, void *, CFDictionaryRef, MTLPixelFormat, size_t, size_t, size_t, void, _BYTE, CVReturn *))(*CVMetalTextureCache + 104))(CVMetalTextureCache, allocator, CVImageBuffer, textureAttributes, pixelFormat, width, height, planeIndex, 0, 0, &v21);
  (*(void (**)(void *, void, void))(*CVMetalTextureCache + 120))(CVMetalTextureCache, 0, 0);
  return v21;
}

CVImageBuffer **CVMetalTextureCache::createTextureFromImageWithParams(CFDictionaryRef *this, const __CFAllocator *a2, CVImageBuffer *a3, const __CFDictionary *cf, uint64_t a5, int a6, int a7, uint64_t a8, unint64_t a9, char a10, int *a11)
{
  CFDictionaryRef theDict = 0;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  *(void *)bytes = a8;
  unint64_t v36 = a9;
  char v37 = a10;
  memset(v41, 0, sizeof(v41));
  CVCreateMergedDictionary(this[10], cf, &theDict);
  if (theDict)
  {
    uint64_t valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MetalTextureUsage");
    if (Value)
    {
      CFNumberRef v15 = Value;
      CFTypeID v16 = CFGetTypeID(Value);
      if (v16 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v15, kCFNumberCFIndexType, &valuePtr))
        {
          *(_DWORD *)&v41[1] = valuePtr;
          v41[0] = 1;
        }
      }
    }
    uint64_t v33 = 0;
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"MetalTextureStorageMode");
    if (v17)
    {
      CFNumberRef v18 = v17;
      CFTypeID v19 = CFGetTypeID(v17);
      if (v19 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue(v18, kCFNumberCFIndexType, &v33))
        {
          *(_DWORD *)&v41[6] = v33;
          v41[5] = 1;
        }
      }
    }
    BOOL v20 = CVDictionaryGetBoolValueWithDefault(theDict, @"MetalTextureCacheDoNotIncrementUseCount", 0) != 0;
  }
  else
  {
    BOOL v20 = 0;
  }
  CFDataRef v21 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 51);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, @"TextureParams", v21);
  CFRelease(v21);
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  uint64_t v23 = (*(uint64_t (**)(CVImageBuffer *))(*(void *)a3 + 160))(a3);
  uint64_t v24 = (*((uint64_t (**)(CFDictionaryRef *, const __CFAllocator *, uint64_t, CVImageBuffer *, __CFDictionary *, int *))*this
         + 14))(this, a2, v23, a3, Mutable, a11);
  if (v24)
  {
    uint64_t v25 = v24;
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 24))(v24);
    CFAllocatorRef v28 = CVMetalTexture::alloc(a2, v27);
    long long v29 = v28;
    if (v28)
    {
      if (v20) {
        CVDataBuffer::setDoNotAutomaticallyBumpUseCount((uint64_t)v28[2]);
      }
      if ((*(uint64_t (**)(CVImageBuffer *, void))(*(void *)v29[2] + 248))(v29[2], *(void *)(v26 + 16)))
      {
        (*(void (**)(CVImageBuffer *, CFDictionaryRef))(*(void *)v29[2] + 144))(v29[2], theDict);
        uint64_t v30 = (__CVBuffer *)(*(uint64_t (**)(CVImageBuffer *))(*(void *)a3 + 24))(a3);
        CVBufferPropagateAttachments(v30, (CVBufferRef)v29);
        (*(void (**)(uint64_t, CVImageBuffer *, CVImageBuffer *))(*(void *)v25 + 288))(v25, a3, v29[2]);
        int v31 = 0;
      }
      else
      {
        int v31 = -6660;
      }
    }
    else
    {
      int v31 = -6690;
    }
    *a11 = v31;
  }
  else
  {
    long long v29 = 0;
  }
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return v29;
}

uint64_t CVPixelBuffer::getImageBacking(CVPixelBuffer *this)
{
  return *((void *)this + 15);
}

const void *CVBuffer::setDefaultAttachments(const void *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    atomic_uint v3 = this;
    CFNumberRef Value = CFDictionaryGetValue(theDict, @"PropagatedAttachments");
    if (Value)
    {
      char v5 = Value;
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFDictionaryGetTypeID()) {
        (*(void (**)(const void *, const void *, uint64_t))(*(void *)v3 + 136))(v3, v5, 1);
      }
    }
    this = CFDictionaryGetValue(theDict, @"NonPropagatedAttachments");
    if (this)
    {
      uint64_t v7 = this;
      CFTypeID v8 = CFGetTypeID(this);
      this = (const void *)CFDictionaryGetTypeID();
      if ((const void *)v8 == this)
      {
        size_t v9 = *(uint64_t (**)(const void *, const void *, void))(*(void *)v3 + 136);
        return (const void *)v9(v3, v7, 0);
      }
    }
  }
  return this;
}

void *CVMetalTextureCache::createTextureBackingFromImageBacking(CVMetalTextureCache *this, const __CFAllocator *a2, CVImageBacking *a3, CVImageBuffer *a4, CFDictionaryRef theDict, int *a6)
{
  CFNumberRef Value = CFDictionaryGetValue(theDict, @"TextureParams");
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  uint64_t v12 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 152))(a3);
  if (v12)
  {
    CFArrayRef v13 = v12;
    CFTypeID v44 = a4;
    CFDictionaryRef v14 = (const __CFDictionary *)*((void *)this + 7);
    IOSurfaceID ID = IOSurfaceGetID(v12);
    CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(v14, (const void *)ID);
    if (v16)
    {
      CFArrayRef Mutable = v16;
      CFIndex Count = CFArrayGetCount(v16);
      if (Count >= 1)
      {
        CFIndex v19 = Count;
        CFIndex v20 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = (void **)CFArrayGetValueAtIndex(Mutable, v20);
          uint64_t v22 = (const void *)(*(uint64_t (**)(void *))(*ValueAtIndex[2] + 360))(ValueAtIndex[2]);
          if (CFEqual(v22, Value)) {
            break;
          }
          if (v19 == ++v20) {
            goto LABEL_13;
          }
        }
        uint64_t v38 = (void *)(*(uint64_t (**)(CVMetalTextureCache *))(*(void *)this + 24))(this);
        uint64_t v39 = (void **)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
        CFIndex v40 = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
        CFIndex v41 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
        CVTracePoolAction(1, v38, v39, "CVMetalTextureCache: [IOSurface] Cache hit", v40, v41);
        CFTypeID v42 = ValueAtIndex[2];
        (*(void (**)(void *, CVImageBacking *))(*v42 + 256))(v42, a3);
        if (gCVKTraceEnabled)
        {
          IOSurfaceGetID(v13);
          (*(void (**)(void *))(*v42 + 264))(v42);
          kdebug_trace();
        }
        uint64_t v33 = a6;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v24 = (*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 344))(a3);
      if (v24) {
        CFIndex v25 = 2 * v24;
      }
      else {
        CFIndex v25 = 2;
      }
      CFArrayRef Mutable = CFArrayCreateMutable(a2, v25, MEMORY[0x1E4F1D510]);
      uint64_t v26 = (__CFDictionary *)*((void *)this + 7);
      IOSurfaceID v27 = IOSurfaceGetID(v13);
      CFDictionarySetValue(v26, (const void *)v27, Mutable);
      CFRelease(Mutable);
    }
LABEL_13:
    CFAllocatorRef v28 = (void *)(*(uint64_t (**)(CVMetalTextureCache *))(*(void *)this + 24))(this);
    long long v29 = (void **)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
    CFIndex v30 = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
    CFIndex v31 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
    CVTracePoolAction(1, v28, v29, "CVMetalTextureCache: [IOSurface] Cache miss", v30, v31);
    {
      CVMetalTextureCache::createTextureBackingFromImageBacking(__CFAllocator const*,CVImageBacking *,CVImageBuffer *,__CFDictionary const*,int *)::ktrace_seed = arc4random();
    }
    ++CVMetalTextureCache::createTextureBackingFromImageBacking(__CFAllocator const*,CVImageBacking *,CVImageBuffer *,__CFDictionary const*,int *)::ktrace_seed;
    IOSurfaceGetID(v13);
    kdebug_trace();
    CFDictionaryRef v32 = theDict;
    uint64_t v33 = a6;
    uint64_t v34 = (*(uint64_t (**)(CVImageBacking *, const __CFAllocator *, void, CFDictionaryRef, CVImageBuffer *, int *))(*(void *)a3 + 232))(a3, a2, *((void *)this + 4), v32, v44, a6);
    if (v34)
    {
      uint64_t v35 = v34;
      int v36 = *a6;
      char v37 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 24))(v34);
      CFNumberRef ValueAtIndex = v37;
      if (!v36)
      {
        (*(void (**)(uint64_t, void))(*(void *)v35 + 96))(v35, *((void *)this + 2));
        (*(void (**)(uint64_t, __IOSurface *))(*(void *)v35 + 328))(v35, v13);
        CFArrayAppendValue(Mutable, ValueAtIndex);
        CFArrayAppendValue(*((CFMutableArrayRef *)this + 8), ValueAtIndex);
        IOSurfaceGetID(v13);
        (*(void (**)(uint64_t))(*(void *)v35 + 264))(v35);
        kdebug_trace();
        CFRelease(ValueAtIndex);
LABEL_22:
        uint64_t v23 = ValueAtIndex[2];
        *uint64_t v33 = 0;
        goto LABEL_23;
      }
      CFRelease(v37);
    }
    IOSurfaceGetID(v13);
    kdebug_trace();
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 0;
  }
LABEL_23:
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v23;
}

void sub_1A584F848(_Unwind_Exception *a1)
{
}

uint64_t CVPixelBufferBacking::getPlaneCount(CVPixelBufferBacking *this)
{
  return *((void *)this + 130);
}

uint64_t CVMetalTextureBacking::getTexture(CVMetalTextureBacking *this)
{
  return *((void *)this + 25);
}

uint64_t CVMetalTextureBacking::getTextureParams(CVMetalTextureBacking *this)
{
  return *((void *)this + 28);
}

uint64_t CVMetalTextureCache::flushTextures(uint64_t this, char a2, uint64_t a3)
{
  uint64_t v4 = this;
  if ((a2 & 1) != 0 || *(void *)(this + 88))
  {
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    if (CFArrayGetCount(*(CFArrayRef *)(v4 + 40)))
    {
      CFArrayRef v5 = *(const __CFArray **)(v4 + 40);
      CFIndex Count = CFArrayGetCount(v5);
      CFArrayApplyFunctionReverse(v5, 0, Count, (uint64_t (*)(const void *, uint64_t))CVMetalTextureCache::textureCacheRecycler, v4);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(v4 + 16) + 224)))
    {
      CFArrayRef v7 = *(const __CFArray **)(*(void *)(v4 + 16) + 224);
      CFIndex v8 = CFArrayGetCount(v7);
      CFArrayApplyFunctionReverse(v7, 0, v8, (uint64_t (*)(const void *, uint64_t))CVMetalTextureCache::freeInvalidTexture, v4);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v4 + 64)))
    {
      v11[0] = v4;
      v11[1] = CVGetCurrentHostTime() - *(void *)(v4 + 88);
      v11[2] = a3;
      CFArrayRef v9 = *(const __CFArray **)(v4 + 64);
      CFIndex v10 = CFArrayGetCount(v9);
      CFArrayApplyFunctionReverse(v9, 0, v10, (uint64_t (*)(const void *, uint64_t))CVMetalTextureCache::freeUnusedIOSurfaceTextureBackings, (uint64_t)v11);
    }
    return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  }
  return this;
}

CVImageBuffer **CVMetalTexture::alloc(CVMetalTexture *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVMetalTexture *)_cvTrackingGetCFAllocator(@"CVMetalTexture");
  }
  if (CVMetalTextureGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTexture);
  }
  atomic_uint v3 = (CVImageBuffer **)CVObject::alloc((CVObject *)kCVMetalTextureID, (unint64_t)this, (const __CFAllocator *)0x18, 0x70uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    CVImageBuffer::CVImageBuffer(v3[2], v3);
    *(void *)uint64_t v5 = &unk_1EFA167E8;
    *(void *)(v5 + 104) = 0;
    *(unsigned char *)(v5 + 96) = 1;
  }
  return v4;
}

CFTypeRef *CVMetalTexture::initWithTextureBacking(CFTypeRef *this, CVMetalTextureBacking *a2)
{
  atomic_uint v3 = this;
  if (!CVImageBuffer::init(this)) {
    return 0;
  }
  (*(void (**)(CVMetalTextureBacking *))(*(void *)a2 + 32))(a2);
  v3[13] = a2;
  if ((*(uint64_t (**)(CVMetalTextureBacking *))(*(void *)a2 + 336))(a2) && *((unsigned char *)v3 + 96)) {
    (*(void (**)(CFTypeRef))(*(void *)v3[13] + 64))(v3[13]);
  }
  return v3;
}

uint64_t CVMetalTextureBacking::getIOSurface(CVMetalTextureBacking *this)
{
  return *((void *)this + 26);
}

CVBufferBacking *CVMetalTextureBacking::retainUsage(CVMetalTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  uint64_t v2 = CVBufferBacking::retainUsage(this);
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v2;
}

void *_getCVMetalTextureCache(void *result)
{
  if (result)
  {
    char v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVMetalTextureCacheGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

void *_getCVImageBuffer(void *result)
{
  if (result)
  {
    char v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferGetTypeID() || v2 == CVMetalTextureGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

CFTypeID CVMetalTextureCacheGetTypeID(void)
{
  if (CVMetalTextureCacheGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTextureCache);
  }
  return kCVMetalTextureCacheID;
}

uint64_t CVCreateMergedDictionary(CFDictionaryRef theDict, const __CFDictionary *cf, void *a3)
{
  if (theDict && cf)
  {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
    if (!MutableCopy) {
      return 4294960634;
    }
    CFTypeRef v6 = MutableCopy;
    CFDictionaryApplyFunction(cf, (CFDictionaryApplierFunction)cvDictionaryMerger, MutableCopy);
  }
  else
  {
    if (!theDict)
    {
      if (!cf)
      {
        CFTypeRef v6 = 0;
        goto LABEL_11;
      }
      CFDictionaryRef theDict = cf;
    }
    CFTypeRef v6 = CFRetain(theDict);
  }
LABEL_11:
  uint64_t result = 0;
  *a3 = v6;
  return result;
}

uint64_t CVMetalTextureBacking::releaseBackingUsage(CVMetalTextureBacking *this)
{
  uint64_t result = *((void *)this + 21);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  return result;
}

uint64_t CVMetalTextureBacking::testTexture(CVMetalTextureBacking *this)
{
  return 1;
}

CFTypeRef CVMetalTextureBacking::setIOSurface(CVMetalTextureBacking *this, CFTypeRef cf)
{
  CFTypeRef result = CFRetain(cf);
  *((void *)this + 26) = cf;
  return result;
}

CVMetalTextureBacking **CVPixelBufferBacking::createTextureBackingForDevice(CVPixelBufferBacking *this, const __CFAllocator *a2, CVBufferBacking *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  if (CVMetalBufferBacking::isBufferBackingSupported(this, a3, a3))
  {
    CFTypeRef result = CVPixelBufferMetalTextureBacking::alloc(a2, v12);
    if (result)
    {
      uint64_t v14 = (uint64_t)result;
      CFTypeRef result = (CVMetalTextureBacking **)(*(uint64_t (**)(CVMetalTextureBacking *, CVPixelBufferBacking *, CVBufferBacking *, const __CFDictionary *, CVImageBuffer *, int *))(*(void *)result[2] + 368))(result[2], this, a3, a4, a5, a6);
      if (result) {
        return *(CVMetalTextureBacking ***)(v14 + 16);
      }
    }
  }
  else
  {
    CFTypeRef result = 0;
    *a6 = -6684;
  }
  return result;
}

CVMetalTextureBacking **CVPixelBufferMetalTextureBacking::alloc(CVPixelBufferMetalTextureBacking *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVPixelBufferMetalTextureBacking *)_cvTrackingGetCFAllocator(@"CVPixelBufferMetalTextureBacking");
  }
  CFTypeID TypeID = (CVObject *)CVObjectGetTypeID();
  uint64_t v4 = (CVMetalTextureBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0x170uLL);
  uint64_t v5 = v4;
  if (v4)
  {
    CVMetalTextureBacking::CVMetalTextureBacking(v4[2], v4);
    void *v6 = &unk_1EFA177E0;
  }
  return v5;
}

uint64_t CVObjectGetTypeID()
{
  if (CVObjectGetTypeID::once != -1) {
    dispatch_once_f(&CVObjectGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVObject);
  }
  return kCVObjectID;
}

BOOL CVPixelBufferMetalTextureBacking::createTexture(CVPixelBufferMetalTextureBacking *this, CVImageBuffer *a2)
{
  uint64_t v3 = *((void *)this + 21);
  *((void *)this + 32) = 0;
  *((void *)this + 35) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 320))(v3, 1);
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 37) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 296))(v3);
  *((void *)this + 33) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3);
  *((void *)this + 34) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 280))(v3);
  *((_DWORD *)this + 85) = 0;
  *((unsigned char *)this + 344) = 0;
  *((_DWORD *)this + 87) = 0;
  *((void *)this + 4pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
  *((void *)this + 41) = 0;
  *((_WORD *)this + 168) = 0;
  CFDictionaryRef v4 = (const __CFDictionary *)*((void *)this + 45);
  if (v4)
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v4, @"TextureParams");
    if (Value)
    {
      CFDataRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFDataGetTypeID() && CFDataGetLength(v6) == 51)
      {
        v27.length = CFDataGetLength(v6);
        v27.location = 0;
        CFDataGetBytes(v6, v27, buffer);
        *((void *)this + 34) = v22;
        *((_OWORD *)this + 16) = v21;
        *((_OWORD *)this + 2pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = *(_OWORD *)buffer;
        *((unsigned char *)this + 336) = v20;
        *((unsigned char *)this + 337) = v23;
        *((_DWORD *)this + 85) = v24;
        *((unsigned char *)this + 344) = v25;
        *((_DWORD *)this + 87) = v26;
        *((void *)this + 28) = CFRetain(v6);
      }
    }
  }
  *((_DWORD *)this + 88) = 1;
  CFIndex v8 = (void *)*((void *)this + 24);
  uint64_t v9 = *((void *)this + 32);
  unint64_t v10 = *((void *)this + 33);
  unint64_t v11 = *((void *)this + 34);
  uint64_t v12 = *((unsigned __int8 *)this + 337);
  unsigned int v13 = *((_DWORD *)this + 85);
  int v14 = *((unsigned __int8 *)this + 344);
  unsigned int v15 = *((_DWORD *)this + 87);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v3);
  CFNumberRef v17 = CVMTLTextureCreate(v8, v9, v10, v11, v12, v13, v14, v15, v16, *((void *)this + 40), *((void *)this + 41), *((unsigned char *)this + 336));
  *((void *)this + 25) = v17;
  return v17 != 0;
}

uint64_t CVPixelBuffer::getBaseAddress(CVPixelBuffer *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 15) + 320))(*((void *)this + 15))
       + *((void *)this + 12);
}

IOSurfaceRef CVPixelBufferBacking::getBaseAddress(CVPixelBufferBacking *this, char a2)
{
  if (!*((_DWORD *)this + 42) && (a2 & 1) != 0) {
    return 0;
  }
  if (*((void *)this + 57)) {
    return IOOrEXSurfaceGetBaseAddress(*((IOSurfaceRef *)this + 57));
  }
  return (IOSurfaceRef)*((void *)this + 56);
}

uint64_t CVPixelBufferBacking::getBytesPerRow(CVPixelBufferBacking *this)
{
  return *((void *)this + 126);
}

CVPixelBufferMetalTextureBacking *CVPixelBufferMetalTextureBacking::initWithPixelBackingDevice(CVPixelBufferMetalTextureBacking *this, CVPixelBufferBacking *a2, void *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  *((void *)this + 3pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)a2 + 272))(a2);
  uint64_t v11 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)a2 + 280))(a2);
  *((void *)this + 31) = v11;
  uint64_t v12 = *((void *)this + 30);
  char v13 = (*(unsigned int (**)(CVPixelBufferBacking *))(*(void *)a2 + 200))(a2) != 0;
  CVMetalTextureBacking::initWithBackingDevice(this, a2, a3, v12, v11, v13);
  if (a4) {
    CFTypeRef v15 = CFRetain(a4);
  }
  else {
    CFTypeRef v15 = 0;
  }
  *((void *)this + 45) = v15;
  if (CVPixelBufferMetalTextureBacking::createTexture(this, v14)) {
    int v16 = 0;
  }
  else {
    int v16 = -6684;
  }
  *a6 = v16;
  return this;
}

uint64_t CVPixelBufferBacking::getHeight(CVPixelBufferBacking *this)
{
  return *((void *)this + 23);
}

uint64_t CVPixelBufferBacking::getWidth(CVPixelBufferBacking *this)
{
  return *((void *)this + 22);
}

uint64_t CVImageBacking::isFlipped(CVImageBacking *this)
{
  return *((unsigned __int8 *)this + 144);
}

void CVMetalTextureBacking::CVMetalTextureBacking(CVMetalTextureBacking *this, const void *a2)
{
  CVImageBacking::CVImageBacking(this, a2);
  *CFTypeID v2 = &unk_1EFA17440;
  v2[21] = 0;
  v2[28] = 0;
  v2[25] = 0;
  v2[26] = 0;
  v2[24] = 0;
}

CVMetalTextureBacking *CVMetalTextureBacking::initWithBackingDevice(CVMetalTextureBacking *this, CVImageBacking *a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11 = this;
  if (!CVBufferBacking::init(this)) {
    return 0;
  }
  *((void *)v11 + 21) = (*(uint64_t (**)(CVImageBacking *))(*(void *)a2 + 32))(a2);
  CFTypeRef v12 = CFRetain(a3);
  *((void *)v11 + 23) = a5;
  *((void *)v11 + CVBitOrAtomic(1, this + 24) = v12;
  *((void *)v11 + 22) = a4;
  *((unsigned char *)v11 + 216) = a6;
  return v11;
}

BOOL CVMetalBufferBacking::isBufferBackingSupported(CVMetalBufferBacking *this, CVBufferBacking *a2, void *a3)
{
  return (*(uint64_t (**)(CVMetalBufferBacking *, CVBufferBacking *, void *))(*(void *)this + 152))(this, a2, a3) != 0;
}

void *CVMTLTextureCreate(void *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unsigned int a6, int a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (!a3) {
    return 0;
  }
  unint64_t v19 = [a1 maxTextureWidth2D];
  char v20 = 0;
  if (a4 && v19 >= a3)
  {
    if ([a1 maxTextureHeight2D] < a4) {
      return 0;
    }
    uint64_t v22 = (void *)[MEMORY[0x1E4F35330] texture2DDescriptorWithPixelFormat:a2 width:a3 height:a4 mipmapped:0];
    [v22 setUsage:a6];
    if (a7) {
      [v22 setStorageMode:a8];
    }
    MTLPixelFormatGetInfoForDevice();
    if (a12) {
      char v23 = (void *)[a1 newTextureWithDescriptor:v22 iosurface:a9 plane:a10 slice:a11];
    }
    else {
      char v23 = (void *)[a1 newTextureWithDescriptor:v22 iosurface:a9 plane:a10];
    }
    char v20 = v23;
    [v23 setLabel:objc_msgSend(NSString, "stringWithFormat:", @"CVMetalTexture %p", a9)];
  }
  return v20;
}

CFArrayRef CFArrayApplyFunctionReverse(const __CFArray *theArray, uint64_t a2, uint64_t a3, uint64_t (*a4)(const void *, uint64_t), uint64_t a5)
{
  if (a3 >= 1)
  {
    CFArrayRef v8 = theArray;
    uint64_t v9 = a2 + a3;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(v8, --v9);
      CFArrayRef theArray = (const __CFArray *)a4(ValueAtIndex, a5);
    }
    while (v9 > a2);
  }
  return theArray;
}

void CVMetalTextureCache::freeUnusedIOSurfaceTextureBackings(CVMetalTextureCache *this, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  CFDataRef v6 = (void *)*((void *)this + 2);
  uint64_t v7 = a2[2];
  if (v7)
  {
    (*(void (**)(void))(*v6 + 112))(*((void *)this + 2));
    uint64_t v7 = a2[2];
  }
  if ((v7 & 1) != 0 || (*(unsigned int (**)(void *))(*v6 + 120))(v6) && v6[13] < (unint64_t)a2[1])
  {
    CFArrayRef v8 = *(__CFDictionary **)(v5 + 56);
    uint64_t v9 = (__IOSurface *)(*(uint64_t (**)(void *))(*v6 + 336))(v6);
    IOSurfaceID ID = IOSurfaceGetID(v9);
    CFDictionaryRemoveValue(v8, (const void *)ID);
    CFArrayRef v11 = *(const __CFArray **)(v5 + 64);
    v14.length = CFArrayGetCount(v11);
    v14.location = 0;
    FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v11, v14, this);
    CFArrayRemoveValueAtIndex(v11, FirstIndexOfValue);
  }
}

uint64_t CVMetalTextureBacking::isInvalidated(CVMetalTextureBacking *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 21) + 120))();
}

uint64_t CVBufferBacking::isInvalidated(CVBufferBacking *this)
{
  return *((_DWORD *)this + 24) & 1;
}

CFTypeRef *CVDataBufferBacking::initWithSize(CFTypeRef *this, int a2, const void *a3, const __CFDictionary *a4, const __CFDictionary *Value, __IOSurface *a6, int *a7)
{
  char v13 = this;
  CFAllocatorRef v14 = CFGetAllocator(this[1]);
  *a7 = -6660;
  if (!CVBufferBacking::init((CVBufferBacking *)v13))
  {
    char v13 = 0;
    *a7 = -6662;
    return v13;
  }
  if (!a4)
  {
    int v15 = -6660;
LABEL_22:
    *a7 = v15;
LABEL_23:
    (*((void (**)(CFTypeRef *))*v13 + 5))(v13);
    return 0;
  }
  v13[18] = a3;
  *((_DWORD *)v13 + 39) = a2;
  if (a6)
  {
    *((unsigned char *)v13 + 152) = 1;
    v13[20] = a6;
    CFRetain(a6);
    *a7 = 0;
    return v13;
  }
  v13[17] = CFDictionaryCreateCopy(v14, a4);
  if (Value)
  {
    CFDataRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, @"DataBufferPoolName");
    if (Value) {
      CVBufferBacking::setPoolName((atomic_uint *)v13, Value);
    }
  }
  CFDictionaryRef v16 = (const __CFDictionary *)CFDictionaryGetValue(a4, @"IOSurfaceProperties");
  if (!v16 || (CFDictionaryRef v17 = v16, v18 = CFGetTypeID(v16), v18 != CFDictionaryGetTypeID()))
  {
    int v15 = -6662;
    goto LABEL_22;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(0, 0, v17);
  char v20 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v20 != CFDictionaryGetValue(a4, @"IOSurfacePurgeable")) {
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F130], v20);
  }
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F2C0], 0);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F0E8], 0);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2EFE0], 0);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F138], 0);
  CVDictionarySetSInt64Value(MutableCopy, (const void *)*MEMORY[0x1E4F2EFB8], (uint64_t)v13[18]);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2EFD8], 1);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F0A0], 1);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F098], 1);
  CVDictionarySetSInt32Value(MutableCopy, (const void *)*MEMORY[0x1E4F2F150], a2);
  long long v21 = (const void *)*MEMORY[0x1E4F2EFE8];
  uint64_t v22 = CFDictionaryGetValue(v17, (const void *)*MEMORY[0x1E4F2EFE8]);
  if (v22) {
    CFDictionarySetValue(MutableCopy, v21, v22);
  }
  if (Value) {
    CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F2F128], Value);
  }
  IOSurfaceRef v23 = IOSurfaceCreate(MutableCopy);
  v13[20] = v23;
  if (v23)
  {
    if (v20 == CFDictionaryGetValue(a4, @"IOSurfaceWiringAssertion"))
    {
      int v24 = 0;
      *((_DWORD *)v13 + 46) |= 2u;
    }
    else
    {
      int v24 = 0;
    }
  }
  else
  {
    int v24 = -6662;
  }
  *a7 = v24;
  if (MutableCopy)
  {
    CFRelease(MutableCopy);
    int v24 = *a7;
  }
  if (v24) {
    goto LABEL_23;
  }
  return v13;
}

void CVBufferBacking::setPoolName(atomic_uint *this, CFTypeRef cf)
{
  int v4 = 0;
  atomic_compare_exchange_strong_explicit(this + 32, (unsigned int *)&v4, 1u, memory_order_relaxed, memory_order_relaxed);
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v5 = (const void *)*((void *)this + 15);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 15) = cf;
}

CVBuffer **CVDataBuffer::alloc(CVDataBuffer *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVDataBuffer *)_cvTrackingGetCFAllocator(@"CVDataBuffer");
  }
  if (CVDataBufferGetTypeID::once != -1) {
    dispatch_once_f(&CVDataBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBuffer);
  }
  uint64_t v3 = (CVBuffer **)CVObject::alloc((CVObject *)kCVDataBufferID, (unint64_t)this, (const __CFAllocator *)0x18, 0x78uLL);
  int v4 = v3;
  if (v3)
  {
    CVBuffer::CVBuffer(v3[2], v3);
    *(void *)uint64_t v5 = &unk_1EFA16340;
    *(void *)(v5 + 112) = 0;
    *(unsigned char *)(v5 + 96) = 1;
    *(void *)(v5 + 10pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
  }
  return v4;
}

CFTypeRef *CVDataBuffer::initWithDataBufferBacking(CFTypeRef *this, CVDataBufferBacking *a2)
{
  uint64_t v3 = this;
  if (!CVBuffer::init(this)) {
    return 0;
  }
  (*(void (**)(CVDataBufferBacking *))(*(void *)a2 + 32))(a2);
  v3[14] = a2;
  if (*((unsigned char *)v3 + 96)) {
    (*(void (**)(CVDataBufferBacking *))(*(void *)a2 + 64))(a2);
  }
  return v3;
}

CVBufferBacking *CVDataBufferBacking::retainUsage(CVDataBufferBacking *this)
{
  CFTypeID v2 = (__IOSurface *)*((void *)this + 20);
  if (v2) {
    IOSurfaceIncrementUseCount(v2);
  }

  return CVBufferBacking::retainUsage(this);
}

const void *CVDataBuffer::setDefaultAttachments(const void *this, CFDictionaryRef theDict)
{
  if (theDict)
  {
    uint64_t v3 = this;
    CFDataRef Value = CFDictionaryGetValue(theDict, @"PropagatedAttachments");
    if (Value)
    {
      uint64_t v5 = Value;
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFDictionaryGetTypeID()) {
        (*(void (**)(const void *, const void *, uint64_t))(*(void *)v3 + 136))(v3, v5, 1);
      }
    }
    this = CFDictionaryGetValue(theDict, @"NonPropagatedAttachments");
    if (this)
    {
      uint64_t v7 = this;
      CFTypeID v8 = CFGetTypeID(this);
      this = (const void *)CFDictionaryGetTypeID();
      if ((const void *)v8 == this)
      {
        uint64_t v9 = *(uint64_t (**)(const void *, const void *, void))(*(void *)v3 + 136);
        return (const void *)v9(v3, v7, 0);
      }
    }
  }
  return this;
}

int CVYCbCrMatrixGetIntegerCodePointForString(CFStringRef yCbCrMatrixString)
{
  if (!yCbCrMatrixString) {
    return 2;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(yCbCrMatrixString)) {
    return 2;
  }
  if (CFEqual(yCbCrMatrixString, @"ITU_R_709_2")) {
    return 1;
  }
  if (CFEqual(yCbCrMatrixString, @"ITU_R_601_4")) {
    return 6;
  }
  if (CFEqual(yCbCrMatrixString, @"SMPTE_240M_1995")) {
    return 7;
  }
  if (CFEqual(yCbCrMatrixString, @"ITU_R_2020")) {
    return 9;
  }
  if (CFEqual(yCbCrMatrixString, @"IPT")) {
    return 248;
  }
  if (CFEqual(yCbCrMatrixString, @"ITU_R_2100_ICtCp")) {
    return 14;
  }
  if (CFEqual(yCbCrMatrixString, @"IPT_C2")) {
    return 15;
  }
  if (!CFStringHasPrefix(yCbCrMatrixString, @"YCbCrMatrix#")) {
    return 2;
  }
  CFIndex Length = CFStringGetLength(yCbCrMatrixString);
  v8.location = CFStringGetLength(@"YCbCrMatrix#");
  v8.length = Length - v8.location;
  CFStringRef v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], yCbCrMatrixString, v8);
  if (!v5) {
    return 2;
  }
  CFStringRef v6 = v5;
  IntCFDataRef Value = CFStringGetIntValue(v5);
  CFRelease(v6);
  return IntValue;
}

uint64_t CVPixelBufferPoolSetMinBufferCount(void *a1)
{
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool) {
    return 4294960635;
  }
  CFTypeID v2 = *(uint64_t (**)(void))(*CVPixelBufferPool + 144);

  return v2();
}

uint64_t CVPixelBufferPoolPreAllocate(int a1, __CVPixelBufferPool *a2)
{
  CVPixelBufferPool = _getCVPixelBufferPool(a2);
  if (!CVPixelBufferPool) {
    return 4294960635;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*CVPixelBufferPool + 160);

  return v3();
}

double CVPixelBufferPoolGetMaxBufferAge(void *a1)
{
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool) {
    return 0.0;
  }
  CFTypeID v2 = *(void (**)(void))(*CVPixelBufferPool + 136);

  v2();
  return result;
}

void *CVPixelBufferPoolGetMinBufferCount(void *a1)
{
  double result = _getCVPixelBufferPool(a1);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*result + 152);
    return (void *)v2();
  }
  return result;
}

uint64_t CVPixelBufferPoolScanIOSurfaces(void *a1)
{
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool) {
    return 4294960635;
  }
  CFTypeID v2 = *(uint64_t (**)(void))(*CVPixelBufferPool + 192);

  return v2();
}

CFDictionaryRef CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef pool)
{
  CFDictionaryRef result = (CFDictionaryRef)_getCVPixelBufferPool(pool);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)result + 120);
    return (CFDictionaryRef)v2();
  }
  return result;
}

uint64_t CVPixelBufferPoolCopyIOSurfaceCreationProperties(void *a1, void *a2)
{
  uint64_t v5 = 0;
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  (*(void (**)(void *, uint64_t *))(*CVPixelBufferPool + 208))(CVPixelBufferPool, &v5);
  *a2 = v5;
  return 0;
}

CVReturn CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CVPixelBufferRef *pixelBufferOut)
{
  CVReturn v8 = -6660;
  CVPixelBufferPool = _getCVPixelBufferPool(pixelBufferPool);
  CVReturn v6 = -6661;
  if (pixelBufferOut && CVPixelBufferPool)
  {
    *pixelBufferOut = (CVPixelBufferRef)(*(uint64_t (**)(void *, CFAllocatorRef, void, CVReturn *))(*CVPixelBufferPool + 104))(CVPixelBufferPool, allocator, 0, &v8);
    return v8;
  }
  return v6;
}

CVReturn CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(CFAllocatorRef allocator, CVPixelBufferPoolRef pixelBufferPool, CFDictionaryRef auxAttributes, CVPixelBufferRef *pixelBufferOut)
{
  CVReturn v10 = -6660;
  CVPixelBufferPool = _getCVPixelBufferPool(pixelBufferPool);
  CVReturn v8 = -6661;
  if (pixelBufferOut && CVPixelBufferPool)
  {
    *pixelBufferOut = (CVPixelBufferRef)(*(uint64_t (**)(void *, CFAllocatorRef, CFDictionaryRef, CVReturn *))(*CVPixelBufferPool + 104))(CVPixelBufferPool, allocator, auxAttributes, &v10);
    return v10;
  }
  return v8;
}

void *_getCVPixelBufferPool(void *result)
{
  if (result)
  {
    char v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVPixelBufferPoolGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

CFTypeID CVPixelBufferPoolGetTypeID(void)
{
  if (CVPixelBufferPoolGetTypeID::once != -1) {
    dispatch_once_f(&CVPixelBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferPool);
  }
  return kCVPixelBufferPoolID;
}

uint64_t CVPixelBufferPool::copyDerivedIOSurfaceCreationProperties(const void **this, const __CFDictionary **a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)MEMORY[0x1E4F1CF80];
  uint64_t IntValueWithDefault = (__CFDictionary *)CVDictionaryGetIntValueWithDefault(this[5], @"Width", 0);
  uint64_t v22 = CVDictionaryGetIntValueWithDefault(this[5], @"Height", 0);
  long long v21 = (__CFDictionary **)CVDictionaryGetIntValueWithDefault(this[5], @"ExtendedPixelsLeft", 0);
  uint64_t v4 = CVDictionaryGetIntValueWithDefault(this[5], @"ExtendedPixelsTop", 0);
  unint64_t v5 = CVDictionaryGetIntValueWithDefault(this[5], @"ExtendedPixelsRight", 0);
  CVReturn v6 = (CVPixelBufferBacking *)CVDictionaryGetIntValueWithDefault(this[5], @"ExtendedPixelsBottom", 0);
  uint64_t DefaultBytesPerRowAlignment = CVPixelBufferBacking::getDefaultBytesPerRowAlignment(v6);
  memset(v28, 0, sizeof(v28));
  memset(v27, 0, sizeof(v27));
  unint64_t v26 = 0;
  int v25 = 0;
  CFDictionaryRef PixelFormatDescription = CVPixelBufferBacking::getPixelFormatDescription((CVPixelBufferBacking *)this[5], (const __CFDictionary *)&v25, v8);
  CFDictionaryRef v10 = (const __CFDictionary *)this[4];
  if (v10)
  {
    CFBooleanRef Value = (const __CFBoolean *)CFDictionaryGetValue(v10, @"MetalCompatibility");
    if (Value)
    {
      if (CFBooleanGetValue(Value))
      {
        uint64_t DefaultBytesPerRowAlignment = 64;
        int v12 = 64;
      }
      else
      {
        int v12 = 16;
      }
    }
    else
    {
      int v12 = 16;
    }
    CFDictionaryRef v10 = (const __CFDictionary *)this[4];
    if (v10)
    {
      unint64_t v13 = CVDictionaryGetIntValueWithDefault(v10, @"WorstCaseBytesPerRow", 0);
      unint64_t v14 = CVDictionaryGetIntValueWithDefault(this[4], @"AdjustableBaseAddressGranularity", 0);
      CFDictionaryRef v10 = (const __CFDictionary *)this[4];
    }
    else
    {
      unint64_t v13 = 0;
      unint64_t v14 = 0;
    }
  }
  else
  {
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    int v12 = 16;
  }
  uint64_t v15 = *v3;
  uint64_t v16 = CVDictionaryGetIntValueWithDefault(v10, @"BytesPerRowAlignment", 0);
  if (v16) {
    uint64_t DefaultBytesPerRowAlignment = (int)CVLowestCommonMultiple(DefaultBytesPerRowAlignment, v16);
  }
  uint64_t v17 = CVDictionaryGetIntValueWithDefault(this[4], @"PlaneAlignment", 0);
  if (v17) {
    int v12 = CVLowestCommonMultiple(v12, v17);
  }
  int v18 = CVLowestCommonMultiple(v12, DefaultBytesPerRowAlignment);
  *(void *)&long long v20 = v21;
  *((void *)&v20 + 1) = v4;
  return CVPixelBufferBacking::performStandardMemoryLayoutAndCopyIOSurfaceCreationProperties(0, 0, v15, (const __CFAllocator *)this[5], (const __CFDictionary *)this[4], 0, PixelFormatDescription, IntValueWithDefault, v22, v20, v5, (unint64_t)v6, DefaultBytesPerRowAlignment, v18, v13, v14, 0, 0, 0,
           0,
           (unint64_t *)v28,
           (unint64_t *)v27,
           0,
           0,
           0,
           0,
           0,
           &v26,
           (void **)a2,
           v21);
}

uint64_t CVLowestCommonMultiple(int a1, int a2)
{
  if (a1 >= 0) {
    int v2 = a1;
  }
  else {
    int v2 = -a1;
  }
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = -a2;
  }
  if (v2 <= v3) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = v2;
  }
  if (v2 >= v3) {
    int v2 = v3;
  }
  if (v2)
  {
    if (v2 < 1)
    {
      int v5 = v4;
    }
    else
    {
      do
      {
        int v5 = v2;
        int v2 = (int)v4 % v2;
        unsigned int v4 = v5;
      }
      while (v2 > 0);
    }
  }
  else if (v4 <= 1)
  {
    int v5 = 1;
  }
  else
  {
    int v5 = v4;
  }
  return (a2 * a1 / v5);
}

uint64_t CVPixelBufferBacking::unlockBaseAddress(CVPixelBufferBacking *this, char a2)
{
  unsigned int v4 = (pthread_mutex_t *)((char *)this + 24);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 24));
  int v5 = *((_DWORD *)this + 42);
  BOOL v6 = __OFSUB__(v5, 1);
  int v7 = v5 - 1;
  if (v7 < 0 != v6)
  {
    uint64_t v10 = 4294960636;
  }
  else
  {
    *((_DWORD *)this + 42) = v7;
    CVReturn v8 = (__IOSurface *)*((void *)this + 57);
    if (v8) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    if (v9)
    {
      if (IOSurfaceUnlock(v8, a2 & 1, 0)) {
        uint64_t v10 = 4294960636;
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  pthread_mutex_unlock(v4);
  if (gCVKTraceEnabled)
  {
    uint64_t v11 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 160))(this);
    uint64_t v12 = *(void *)this;
    if (v11)
    {
      unint64_t v13 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v12 + 160))(this);
      IOOrEXSurfaceGetID(v13);
    }
    else
    {
      (*(void (**)(CVPixelBufferBacking *))(v12 + 24))(this);
    }
    kdebug_trace();
  }
  return v10;
}

CVBufferRef CVBufferRetain(CVBufferRef buffer)
{
  if (buffer) {
    CFRetain(buffer);
  }
  return buffer;
}

CFStringRef CVTransferFunctionGetStringForIntegerCodePoint(int transferFunctionCodePoint)
{
  int v1 = transferFunctionCodePoint;
  CFStringRef result = 0;
  switch(transferFunctionCodePoint)
  {
    case 0:
    case 2:
      return result;
    case 1:
    case 6:
    case 14:
    case 15:
      unsigned int v4 = &kCVImageBufferTransferFunction_ITU_R_709_2;
      goto LABEL_12;
    case 7:
      unsigned int v4 = &kCVImageBufferTransferFunction_SMPTE_240M_1995;
      goto LABEL_12;
    case 8:
      unsigned int v4 = &kCVImageBufferTransferFunction_Linear;
      goto LABEL_12;
    case 13:
      unsigned int v4 = &kCVImageBufferTransferFunction_sRGB;
      goto LABEL_12;
    case 16:
      unsigned int v4 = &kCVImageBufferTransferFunction_SMPTE_ST_2084_PQ;
      goto LABEL_12;
    case 17:
      unsigned int v4 = &kCVImageBufferTransferFunction_SMPTE_ST_428_1;
      goto LABEL_12;
    case 18:
      unsigned int v4 = &kCVImageBufferTransferFunction_ITU_R_2100_HLG;
LABEL_12:
      CFStringRef result = *v4;
      break;
    default:
      if (sCVSetUpUnrecognizedCodePointDictionariesOnce != -1)
      {
        int v5 = v1;
        dispatch_once_f(&sCVSetUpUnrecognizedCodePointDictionariesOnce, 0, (dispatch_function_t)cvSetUpUnrecognizedCodePointDictionariesOnce);
        int v1 = v5;
      }
      uint64_t context = 0x1EFA19780;
      int v7 = v1;
      uint64_t v8 = sCVStringsForUnrecognizedTransferFunctionCodePoints;
      dispatch_sync_f((dispatch_queue_t)sCVUnrecognizedCodePointDispatchQueue, &context, (dispatch_function_t)cvGetUnrecognizedCodePointString);
      CFStringRef result = v9;
      break;
  }
  return result;
}

CFStringRef CVYCbCrMatrixGetStringForIntegerCodePoint(int yCbCrMatrixCodePoint)
{
  int v1 = yCbCrMatrixCodePoint;
  CFStringRef result = 0;
  switch(yCbCrMatrixCodePoint)
  {
    case 0:
    case 2:
      return result;
    case 1:
      unsigned int v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_ITU_R_709_2;
      return *v4;
    case 3:
    case 4:
    case 5:
    case 8:
    case 10:
    case 11:
    case 12:
    case 13:
      goto LABEL_5;
    case 6:
      unsigned int v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_ITU_R_601_4;
      return *v4;
    case 7:
      unsigned int v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_SMPTE_240M_1995;
      return *v4;
    case 9:
      unsigned int v4 = (__CFString **)&kCVImageBufferYCbCrMatrix_ITU_R_2020;
      return *v4;
    case 14:
      unsigned int v4 = kCVImageBufferYCbCrMatrix_ITU_R_2100_ICtCp;
      return *v4;
    case 15:
      unsigned int v4 = kCVImageBufferYCbCrMatrix_IPT_C2;
      return *v4;
    default:
      if (v1 == 248)
      {
        unsigned int v4 = kCVImageBufferYCbCrMatrix_IPT;
        return *v4;
      }
      else
      {
LABEL_5:
        if (sCVSetUpUnrecognizedCodePointDictionariesOnce != -1)
        {
          int v5 = v1;
          dispatch_once_f(&sCVSetUpUnrecognizedCodePointDictionariesOnce, 0, (dispatch_function_t)cvSetUpUnrecognizedCodePointDictionariesOnce);
          int v1 = v5;
        }
        uint64_t context = 0x1EFA19740;
        int v7 = v1;
        uint64_t v8 = sCVStringsForUnrecognizedYCbCrMatrixCodePoints;
        dispatch_sync_f((dispatch_queue_t)sCVUnrecognizedCodePointDispatchQueue, &context, (dispatch_function_t)cvGetUnrecognizedCodePointString);
        return v9;
      }
  }
}

CFStringRef CVColorPrimariesGetStringForIntegerCodePoint(int colorPrimariesCodePoint)
{
  int v1 = colorPrimariesCodePoint;
  CFStringRef result = 0;
  switch(colorPrimariesCodePoint)
  {
    case 0:
    case 2:
      return result;
    case 1:
      unsigned int v4 = &kCVImageBufferColorPrimaries_ITU_R_709_2;
      return *v4;
    case 3:
    case 4:
    case 7:
    case 8:
    case 10:
      goto LABEL_5;
    case 5:
      unsigned int v4 = &kCVImageBufferColorPrimaries_EBU_3213;
      return *v4;
    case 6:
      unsigned int v4 = &kCVImageBufferColorPrimaries_SMPTE_C;
      return *v4;
    case 9:
      unsigned int v4 = &kCVImageBufferColorPrimaries_ITU_R_2020;
      return *v4;
    case 11:
      unsigned int v4 = &kCVImageBufferColorPrimaries_DCI_P3;
      return *v4;
    case 12:
      unsigned int v4 = &kCVImageBufferColorPrimaries_P3_D65;
      return *v4;
    default:
      if (v1 == 22)
      {
        unsigned int v4 = &kCVImageBufferColorPrimaries_P22;
        return *v4;
      }
      else
      {
LABEL_5:
        if (sCVSetUpUnrecognizedCodePointDictionariesOnce != -1)
        {
          int v5 = v1;
          dispatch_once_f(&sCVSetUpUnrecognizedCodePointDictionariesOnce, 0, (dispatch_function_t)cvSetUpUnrecognizedCodePointDictionariesOnce);
          int v1 = v5;
        }
        uint64_t context = 0x1EFA19760;
        int v7 = v1;
        uint64_t v8 = sCVStringsForUnrecognizedColorPrimariesCodePoints;
        dispatch_sync_f((dispatch_queue_t)sCVUnrecognizedCodePointDispatchQueue, &context, (dispatch_function_t)cvGetUnrecognizedCodePointString);
        return v9;
      }
  }
}

CGColorSpaceRef CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  if ((CVImageBufferCreateColorSpaceFromAttachments::sDidCheck & 1) == 0)
  {
    CVImageBufferCreateColorSpaceFromAttachments::sForceColorSyncOff = CFPreferencesGetAppBooleanValue(@"force_colorsync_off", @"com.apple.corevideo", 0) != 0;
    CVImageBufferCreateColorSpaceFromAttachments::sUseCGConstColorSpace = CFPreferencesGetAppBooleanValue(@"use_cg_const_colorspaces", @"com.apple.corevideo", 0) != 0;
    CVImageBufferCreateColorSpaceFromAttachments::sDidCheck = 1;
  }
  if (CVImageBufferCreateColorSpaceFromAttachments::sForceColorSyncOff) {
    return 0;
  }
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(attachments, @"CVImageBufferICCProfile");
  if (!Value || (v4 = Value, CFTypeID v5 = CFGetTypeID(Value), v5 != CFDataGetTypeID()) || CFDataGetLength(v4) < 1)
  {
    int v11 = CVImageBufferCreateColorSpaceFromAttachments::sUseCGConstColorSpace;
    uint64_t v65 = 0;
    v66[1] = 0;
    v66[0] = 0x3FFCCCCCCCCCCCCDLL;
    v66[2] = 0x3FF0000000000000;
    v66[3] = 0;
    double valuePtr = 0.0;
    memset(bytes, 0, 32);
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(attachments, @"CVImageBufferGammaLevel");
    unint64_t v13 = CFDictionaryGetValue(attachments, @"CVImageBufferColorPrimaries");
    unint64_t v14 = CFDictionaryGetValue(attachments, @"CVImageBufferTransferFunction");
    uint64_t v15 = CFDictionaryGetValue(attachments, @"CVImageBufferYCbCrMatrix");
    OSType IntValueWithDefault = CVDictionaryGetIntValueWithDefault(attachments, @"PixelFormatType", 0);
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v18 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], IntValueWithDefault);
    CFDictionaryRef v19 = v18;
    MutableCFDictionaryRef Copy = 0;
    if (v13)
    {
      CFTypeRef cf1 = v15;
      CFDictionaryRef v21 = 0;
      uint64_t v22 = 0;
      ICCBased = 0;
      if (v14)
      {
        if (CVDictionaryGetBoolValueWithDefault(v18, @"ContainsGrayscale", 0)
          && (CFEqual(v13, @"ITU_R_709_2") && CFEqual(v14, @"Linear")
           || CFEqual(v13, @"P3_D65") && CFEqual(v14, @"Linear")))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DC78];
LABEL_63:
          ICCBased = CGColorSpaceCreateWithName(*v23);
          MutableCFDictionaryRef Copy = 0;
          CFDictionaryRef v21 = 0;
          uint64_t v22 = 0;
          goto LABEL_64;
        }
        if (CFEqual(v13, @"P3_D65") && CFEqual(v14, @"Linear"))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DBC8];
          goto LABEL_63;
        }
        if (CFEqual(v13, @"P3_D65") && CFEqual(v14, @"SMPTE_ST_2084_PQ"))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DBA8];
          goto LABEL_63;
        }
        if (CFEqual(v13, @"P3_D65") && CFEqual(v14, @"ITU_R_2100_HLG"))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DB98];
          goto LABEL_63;
        }
        if (CFEqual(v13, @"ITU_R_2020") && CFEqual(v14, @"Linear"))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DBD8];
          goto LABEL_63;
        }
        if (CFEqual(v13, @"ITU_R_2020") && CFEqual(v14, @"ITU_R_2100_HLG"))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DC48];
          goto LABEL_63;
        }
        if (CFEqual(v13, @"ITU_R_2020") && CFEqual(v14, @"SMPTE_ST_2084_PQ"))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DC50];
          goto LABEL_63;
        }
        if (CFEqual(v13, @"ITU_R_709_2") && CFEqual(v14, @"ITU_R_709_2"))
        {
          IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DB80];
          goto LABEL_63;
        }
        if (v11)
        {
          if (CFEqual(v13, @"ITU_R_709_2") && CFEqual(v14, @"ITU_R_709_2")
            || CFEqual(v13, @"ITU_R_709_2") && CFEqual(v14, @"ITU_R_2020"))
          {
            IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DC58];
            goto LABEL_63;
          }
          if (CFEqual(v13, @"ITU_R_709_2") && (CFEqual(v14, @"IEC_sRGB") || CFEqual(v14, @"sRGB")))
          {
            IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DC98];
            goto LABEL_63;
          }
          if (CFEqual(v13, @"ITU_R_709_2") && CFEqual(v14, @"Linear"))
          {
            IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DC88];
            goto LABEL_63;
          }
          if (CFEqual(v13, @"P3_D65") && (CFEqual(v14, @"IEC_sRGB") || CFEqual(v14, @"sRGB")))
          {
LABEL_57:
            IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DB90];
            goto LABEL_63;
          }
          if (CFEqual(v13, @"ITU_R_2020") && CFEqual(v14, @"ITU_R_2020")
            || CFEqual(v13, @"ITU_R_2020") && CFEqual(v14, @"ITU_R_709_2"))
          {
            IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DC28];
            goto LABEL_63;
          }
          if (CFEqual(v13, @"DCI_P3") && CFEqual(v14, @"SMPTE_ST_428_1"))
          {
            IOSurfaceRef v23 = (CFStringRef *)MEMORY[0x1E4F1DB88];
            goto LABEL_63;
          }
        }
        if (CFEqual(v13, @"ITU_R_709_2"))
        {
          uint64_t v59 = 1;
          int v25 = (char *)&kQTPrimaries_ITU_R709_2_Info;
          goto LABEL_91;
        }
        if (CFEqual(v13, @"EBU_3213"))
        {
          uint64_t v59 = 5;
          int v25 = (char *)&kQTPrimaries_EBU_3213_Info;
          goto LABEL_91;
        }
        if (CFEqual(v13, @"SMPTE_C"))
        {
          uint64_t v59 = 6;
          int v25 = (char *)&kQTPrimaries_SMPTE_C_Info;
          goto LABEL_91;
        }
        if (CFEqual(v13, @"P22"))
        {
          uint64_t v26 = 22;
LABEL_86:
          uint64_t v59 = v26;
          int v25 = (char *)&kQTPrimaries_GenericRGB_Info;
          goto LABEL_91;
        }
        if (CFEqual(v13, @"ITU_R_2020"))
        {
          uint64_t v59 = 9;
          int v25 = (char *)&kQTPrimaries_ITU_R_2020_Info;
        }
        else if (CFEqual(v13, @"DCI_P3"))
        {
          uint64_t v59 = 11;
          int v25 = (char *)&kQTPrimaries_DCI_P3_Info;
        }
        else
        {
          if (!CFEqual(v13, @"P3_D65"))
          {
            uint64_t v26 = 2;
            goto LABEL_86;
          }
          if (CFEqual(v14, @"ITU_R_709_2")) {
            goto LABEL_57;
          }
          uint64_t v59 = 12;
          int v25 = (char *)&kQTPrimaries_P3_D65_Info;
        }
LABEL_91:
        CFTypeID v61 = v25;
        if (CFEqual(v14, @"ITU_R_709_2"))
        {
          if (v11) {
            CFRange v27 = (__int16 *)&kCVCGTransferFunction_CG709_Info;
          }
          else {
            CFRange v27 = &kQTTransferFunction_ITU_R2020_Info;
          }
          uint64_t v60 = 1;
          goto LABEL_101;
        }
        if (CFEqual(v14, @"SMPTE_240M_1995"))
        {
          uint64_t v28 = 7;
        }
        else
        {
          if (!CFEqual(v14, @"ITU_R_2020"))
          {
            if (CFEqual(v14, @"SMPTE_ST_428_1"))
            {
              uint64_t v60 = 17;
              CFRange v27 = &kQTTransferFunction_SMPTE_ST_428_1_Info;
            }
            else if (CFEqual(v14, @"Linear"))
            {
              uint64_t v60 = 8;
              CFRange v27 = &kCVTransferFunction_Linear_Info;
            }
            else if (CFEqual(v14, @"IEC_sRGB") || CFEqual(v14, @"sRGB"))
            {
              uint64_t v60 = 13;
              CFRange v27 = &kCVCGTransferFunction_sRGB_Info;
            }
            else
            {
              uint64_t v60 = 2;
              CFRange v27 = &kQTTransferFunction_GenericRGB_Info;
              if (CFEqual(v14, @"UseGamma") && v12)
              {
                CFNumberGetValue(v12, kCFNumberDoubleType, v66);
                uint64_t v60 = 2;
                CFRange v27 = (__int16 *)&v65;
              }
            }
LABEL_101:
            if (cf1)
            {
              if (CFEqual(cf1, @"ITU_R_709_2"))
              {
                uint64_t v29 = 1;
              }
              else if (CFEqual(cf1, @"ITU_R_601_4"))
              {
                uint64_t v29 = 6;
              }
              else if (CFEqual(cf1, @"SMPTE_240M_1995"))
              {
                uint64_t v29 = 7;
              }
              else if (CFEqual(cf1, @"DCI_P3"))
              {
                uint64_t v29 = 11;
              }
              else if (CFEqual(cf1, @"P3_D65"))
              {
                uint64_t v29 = 12;
              }
              else if (CFEqual(cf1, @"ITU_R_2020"))
              {
                uint64_t v29 = 9;
              }
              else
              {
                uint64_t v29 = 2;
              }
            }
            else
            {
              uint64_t v29 = 2;
            }
            double v30 = *((double *)v27 + 1);
            if (*v27) {
              double v30 = 1.0 / v30;
            }
            double valuePtr = v30;
            long long v79 = xmmword_1E5BD5368;
            long long v80 = *(_OWORD *)&off_1E5BD5378;
            long long v81 = xmmword_1E5BD5388;
            *(_OWORD *)range = xmmword_1E5BD5328;
            long long v76 = *(_OWORD *)&off_1E5BD5338;
            long long v77 = xmmword_1E5BD5348;
            long long v78 = *(_OWORD *)&off_1E5BD5358;
            CFStringRef v74 = 0;
            long long v73 = 0u;
            long long v72 = 0u;
            long long v71 = 0u;
            long long v70 = 0u;
            long long v69 = 0u;
            long long v68 = 0u;
            values = (void *)CFRetain(@"displayRGB");
            if (CFEqual(v13, @"ITU_R_709_2")
              && (int v31 = CFEqual(v14, @"ITU_R_709_2"), cf1)
              && v31
              && CFEqual(cf1, @"ITU_R_709_2"))
            {
              CFDictionaryRef v32 = @"HDTV";
            }
            else if (CFEqual(v13, @"SMPTE_C") {
                   && (int v33 = CFEqual(v14, @"ITU_R_709_2"), cf1)
            }
                   && v33
                   && CFEqual(cf1, @"ITU_R_601_4"))
            {
              CFDictionaryRef v32 = @"Composite NTSC";
            }
            else if (CFEqual(v13, @"EBU_3213") {
                   && (int v34 = CFEqual(v14, @"ITU_R_709_2"), cf1)
            }
                   && v34
                   && CFEqual(cf1, @"ITU_R_601_4"))
            {
              CFDictionaryRef v32 = @"Composite PAL";
            }
            else if (CFEqual(v13, @"SMPTE_C") {
                   && (int v35 = CFEqual(v14, @"SMPTE_240M_1995"), cf1)
            }
                   && v35
                   && CFEqual(cf1, @"SMPTE_240M_1995"))
            {
              CFDictionaryRef v32 = @"HDTV Interim Color Implementation";
            }
            else if (CFEqual(v13, @"DCI_P3") && CFEqual(v14, @"SMPTE_ST_428_1"))
            {
              CFDictionaryRef v32 = @"Digital Cinema P3";
            }
            else if (CFEqual(v13, @"P3_D65") && CFEqual(v14, @"ITU_R_709_2"))
            {
              CFDictionaryRef v32 = @"Apple P3";
            }
            else if (CFEqual(v13, @"ITU_R_2020") && CFEqual(v14, @"ITU_R_2020"))
            {
              CFDictionaryRef v32 = @"UHD";
            }
            else if (CFEqual(v14, @"SMPTE_ST_2084_PQ"))
            {
              CFDictionaryRef v32 = @"HDR (PQ)";
            }
            else
            {
              if (!CFEqual(v14, @"ITU_R_2100_HLG"))
              {
                int v36 = (void *)CFStringCreateWithFormat(v17, 0, @"QuickTime 'nclc' Video (%d,%d,%d)", v59, v60, v29);
                goto LABEL_159;
              }
              CFDictionaryRef v32 = @"HDR (HLG)";
            }
            int v36 = (void *)CFRetain(v32);
LABEL_159:
            *(void *)&long long v68 = v36;
            uint64_t v37 = 13;
            *((void *)&v68 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
            *(void *)&long long v69 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
            *((void *)&v69 + 1) = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
            *(void *)&long long v70 = CFNumberCreate(0, kCFNumberDoubleType, v61 + 32);
            *((void *)&v70 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 40);
            *(void *)&long long v71 = CFNumberCreate(0, kCFNumberDoubleType, v61);
            *((void *)&v71 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 8);
            *(void *)&long long v72 = CFNumberCreate(0, kCFNumberDoubleType, v61 + 16);
            *((void *)&v72 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 24);
            *(void *)&long long v73 = CFNumberCreate(0, kCFNumberDoubleType, v61 + 48);
            *((void *)&v73 + 1) = CFNumberCreate(0, kCFNumberDoubleType, v61 + 56);
            CFStringRef v74 = CFStringCreateWithCString(0, "Copyright 2007 Apple Inc.", 0);
            CFDictionaryRef v21 = CFDictionaryCreate(0, (const void **)range, (const void **)&values, 14, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            do
            {
              CFRelease(*(&values + v37));
              unint64_t v38 = v37-- + 1;
            }
            while (v38 > 1);
            if (v21 && (Profile = (const ColorSyncProfile *)ColorSyncMakeProfile()) != 0)
            {
              CFIndex v40 = Profile;
              MutableCFDictionaryRef Copy = ColorSyncProfileCreateMutableCopy(Profile);
              CFRelease(v40);
              if (MutableCopy)
              {
                CFDataRef v41 = ColorSyncProfileCopyHeader(MutableCopy);
                if (v41)
                {
                  CFDataRef v42 = v41;
                  uint64_t v22 = CFDataCreateMutableCopy(0, 128, v41);
                  CFRelease(v42);
                  if (v22)
                  {
                    CFDataSetLength(v22, 128);
                    MutableBytePtr = CFDataGetMutableBytePtr(v22);
                    if (MutableBytePtr)
                    {
                      CFTypeID v44 = MutableBytePtr;
                      if (*v27 != 3)
                      {
LABEL_170:
                        *((void *)v44 + 3) = 0x10001000407D5;
                        *((_DWORD *)v44 + 8) = 65537;
                        ColorSyncProfileSetHeader(MutableCopy, v22);
                        ICCBased = CGColorSpaceCreateWithPlatformColorSpace(MutableCopy);
                        goto LABEL_64;
                      }
                      double v45 = *((double *)v27 + 3);
                      v46.f64[0] = *((double *)v27 + 4) + 1.0;
                      __asm { FMOV            V4.2D, #1.0 }
                      v52.f64[0] = *((float64_t *)v27 + 1);
                      double v53 = *((double *)v27 + 2);
                      v52.f64[1] = v46.f64[0];
                      float64x2_t v54 = vdivq_f64(_Q4, v52);
                      _Q4.f64[0] = *((float64_t *)v27 + 4);
                      *(void *)bytes = 1634886000;
                      v46.f64[1] = v45;
                      float64x2_t v55 = (float64x2_t)vdupq_n_s64(0x40EFFFE000000000uLL);
                      __asm { FMOV            V2.2D, #0.5 }
                      *(_DWORD *)&UInt8 bytes[8] = 768;
                      *(int8x16_t *)&bytes[12] = vrev32q_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmlaq_f64(_Q2, v55, v54)), (int32x4_t)vcvtq_u64_f64(vmlaq_f64(_Q2, v55, vdivq_f64(_Q4, v46)))));
                      *(_DWORD *)&bytes[28] = bswap32((v45 * v53 * 65535.0 + 0.5));
                      CFDataRef v57 = CFDataCreateWithBytesNoCopy(0, bytes, 32, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
                      if (v57)
                      {
                        CFDataRef v58 = v57;
                        ColorSyncProfileSetTag(MutableCopy, @"rTRC", v57);
                        ColorSyncProfileSetTag(MutableCopy, @"gTRC", v58);
                        ColorSyncProfileSetTag(MutableCopy, @"bTRC", v58);
                        CFRelease(v58);
                        *((_DWORD *)v44 + 2) = 0x4000000;
                        goto LABEL_170;
                      }
                    }
                  }
LABEL_173:
                  ICCBased = 0;
                  goto LABEL_64;
                }
              }
            }
            else
            {
              MutableCFDictionaryRef Copy = 0;
            }
            uint64_t v22 = 0;
            goto LABEL_173;
          }
          uint64_t v28 = 14;
        }
        uint64_t v60 = v28;
        CFRange v27 = &kQTTransferFunction_ITU_R2020_Info;
        goto LABEL_101;
      }
    }
    else
    {
      CFDictionaryRef v21 = 0;
      uint64_t v22 = 0;
      ICCBased = 0;
    }
LABEL_64:
    if (v19) {
      CFRelease(v19);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (v21) {
      CFRelease(v21);
    }
    uint64_t v10 = 0;
    goto LABEL_73;
  }
  range[0] = 0.0;
  *(void *)&long long v76 = 0;
  range[1] = 1.0;
  *((void *)&v76 + 1) = 0x3FF0000000000000;
  *(void *)&long long v77 = 0;
  *((void *)&v77 + 1) = 0x3FF0000000000000;
  CFRetain(v4);
  BytePtr = CFDataGetBytePtr(v4);
  size_t Length = CFDataGetLength(v4);
  uint64_t v8 = CGDataProviderCreateWithData(v4, BytePtr, Length, (CGDataProviderReleaseDataCallback)_releaseCFDataForCGDataProvider);
  if (v8)
  {
    CFStringRef v9 = v8;
    ICCBased = CGColorSpaceCreateICCBased(3uLL, range, v8, 0);
    uint64_t v10 = v9;
LABEL_73:
    CGDataProviderRelease(v10);
    return ICCBased;
  }
  CGDataProviderRelease(0);
  CFRelease(v4);
  return 0;
}

CFDictionaryRef CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef allocator, OSType pixelFormat)
{
  CFDictionaryRef result = (CFDictionaryRef)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormat);
  if (result)
  {
    return CFDictionaryCreateCopy(allocator, result);
  }
  return result;
}

uint64_t CVDataBufferPoolCreate(CVDataBufferPool *this, const __CFAllocator *a2, uint64_t a3, uint64_t a4, uint64_t a5, CVDataBufferPool ***a6)
{
  unsigned int v15 = -6660;
  if (!a6) {
    return 4294960635;
  }
  *a6 = 0;
  uint64_t result = 4294960635;
  if (a3 && a4)
  {
    unint64_t v13 = CVDataBufferPool::alloc(this, a2);
    if (v13)
    {
      unint64_t v14 = v13;
      if ((*(uint64_t (**)(CVDataBufferPool *, const __CFAllocator *, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)v13[2] + 96))(v13[2], a2, a3, a4, a5, &v15))
      {
        uint64_t result = 0;
        *a6 = v14;
      }
      else
      {
        return v15;
      }
    }
    else
    {
      return 4294960634;
    }
  }
  return result;
}

CVDataBufferPool **CVDataBufferPool::alloc(CVDataBufferPool *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVDataBufferPool *)_cvTrackingGetCFAllocator(@"CVDataBufferPool");
  }
  if (CVDataBufferPoolGetTypeID::once != -1) {
    dispatch_once_f(&CVDataBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVDataBufferPool);
  }
  int v3 = (CVDataBufferPool **)CVObject::alloc((CVObject *)kCVDataBufferPoolID, (unint64_t)this, (const __CFAllocator *)0x18, 0x80uLL);
  CFDataRef v4 = v3;
  if (v3) {
    CVDataBufferPool::CVDataBufferPool(v3[2], v3);
  }
  return v4;
}

void CVDataBufferPool::CVDataBufferPool(CVDataBufferPool *this, const void *a2)
{
  CVBufferPool::CVBufferPool(this, a2);
  *(void *)uint64_t v3 = &unk_1EFA169C0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  pthread_mutex_init((pthread_mutex_t *)(v3 + 56), 0);
  *((_DWORD *)this + 13) = 16;
  *((void *)this + 15) = malloc_type_calloc(1uLL, 0x100uLL, 0x10C004028F705ECuLL);
}

CFTypeRef *CVDataBufferPool::initWithSize(CFTypeRef *this, const __CFDictionary *a2, unsigned int a3, uint64_t a4, const __CFDictionary *a5, int *a6)
{
  int v11 = this;
  valuePtr[7] = *(double *)MEMORY[0x1E4F143B8];
  CFAllocatorRef v12 = CFGetAllocator(this[1]);
  if (!CVBufferPool::init(v11))
  {
    int v11 = 0;
    *a6 = -6660;
    return v11;
  }
  (*((void (**)(CFTypeRef *, double))*v11 + 16))(v11, 1.0);
  if (a2)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v12, a2);
    v11[4] = Copy;
    if (!Copy) {
      goto LABEL_23;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"MaximumBufferAge");
    if (Value)
    {
      CFNumberRef v15 = Value;
      CFTypeID v16 = CFGetTypeID(Value);
      if (v16 != CFNumberGetTypeID()) {
        goto LABEL_25;
      }
      valuePtr[0] = 0.0;
      CFNumberGetValue(v15, kCFNumberDoubleType, valuePtr);
      (*((void (**)(CFTypeRef *, double))*v11 + 16))(v11, valuePtr[0]);
    }
    uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a2, @"MinimumBufferCount", 0);
    if (IntValueWithDefault) {
      (*((void (**)(CFTypeRef *, uint64_t, void, void, void))*v11 + 18))(v11, IntValueWithDefault, 0, 0, *MEMORY[0x1E4F1CF80]);
    }
    CFDictionaryRef v18 = CFDictionaryGetValue(a2, @"DataBufferPoolName");
    if (v18)
    {
      CFDictionaryRef v19 = v18;
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFStringGetTypeID())
      {
        CFRetain(v19);
        CFTypeRef v21 = v11[3];
        if (v21) {
          CFRelease(v21);
        }
        void v11[3] = v19;
        goto LABEL_14;
      }
LABEL_25:
      int v28 = -6691;
      goto LABEL_26;
    }
  }
LABEL_14:
  if (!a4)
  {
LABEL_24:
    int v28 = -6661;
    goto LABEL_26;
  }
  MutableCFDictionaryRef Copy = CVDictionaryCreateMutableCopy(v12, a5);
  v11[5] = MutableCopy;
  if (!MutableCopy)
  {
LABEL_23:
    int v28 = -6662;
LABEL_26:
    *a6 = v28;
LABEL_27:
    (*((void (**)(CFTypeRef *))*v11 + 5))(v11);
    return 0;
  }
  CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(MutableCopy, @"IOSurfaceProperties");
  CFDictionaryRef v24 = v23;
  if (v23)
  {
    CFTypeID v25 = CFGetTypeID(v23);
    if (v25 != CFDictionaryGetTypeID()) {
      goto LABEL_24;
    }
  }
  uint64_t v26 = CVDictionaryCreateMutableCopy((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v24);
  if (!v26) {
    goto LABEL_23;
  }
  CFRange v27 = v26;
  CFDictionarySetValue(v26, (const void *)*MEMORY[0x1E4F2F288], (const void *)*MEMORY[0x1E4F1CFD0]);
  CVDictionarySetSInt64Value(v27, (const void *)*MEMORY[0x1E4F2EFB8], a4);
  CVDictionarySetSInt32Value(v27, (const void *)*MEMORY[0x1E4F2F150], a3);
  CFDictionarySetValue((CFMutableDictionaryRef)v11[5], @"IOSurfaceProperties", v27);
  *a6 = 0;
  if (CVTracePools(1))
  {
    char v34 = 0;
    if (a3 > 0x63) {
      *(_DWORD *)__str = bswap32(a3);
    }
    else {
      snprintf(__str, 5uLL, "%d", a3);
    }
    snprintf((char *)valuePtr, 0x32uLL, "CVDataBuffer allocated (%lld, %s)", a4, __str);
    double v30 = (void *)(*((uint64_t (**)(CFTypeRef *))*v11 + 3))(v11);
    uint64_t v31 = (*(uint64_t (**)(CFTypeRef))(*(void *)v11[2] + 96))(v11[2]);
    uint64_t v32 = (*(uint64_t (**)(CFTypeRef))(*(void *)v11[2] + 104))(v11[2]);
    CVTracePoolAction(1, v30, 0, (const char *)valuePtr, v31, v32);
  }
  CFRelease(v27);
  if (*a6) {
    goto LABEL_27;
  }
  return v11;
}

CFMutableDictionaryRef CVDictionaryCreateMutableCopy(const __CFAllocator *a1, CFDictionaryRef theDict)
{
  if (theDict) {
    return CFDictionaryCreateMutableCopy(a1, 0, theDict);
  }
  else {
    return CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
}

uint64_t CVDataBufferPool::setMaximumBufferAge(CVDataBufferPool *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 2) + 208))(a2);
}

uint64_t CVDataBufferPool::setMinimumBufferCount(CVDataBufferPool *this, uint64_t a2, const void *a3, int a4, const __CFAllocator *a5)
{
  uint64_t v10 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  uint64_t v11 = *((unsigned int *)this + 12);
  if (v11)
  {
    CFAllocatorRef v12 = (uint64_t *)(*((void *)this + 15) + 8);
    uint64_t v13 = *((unsigned int *)this + 12);
    while ((const void *)*(v12 - 1) != a3)
    {
      v12 += 2;
      if (!--v13) {
        goto LABEL_5;
      }
    }
    uint64_t v17 = a2 - *v12;
    *CFAllocatorRef v12 = a2;
  }
  else
  {
LABEL_5:
    unint64_t v14 = (char *)*((void *)this + 15);
    if (*((_DWORD *)this + 13) == v11)
    {
      unsigned int v15 = v11 + 16;
      *((_DWORD *)this + 13) = v15;
      unint64_t v14 = (char *)malloc_type_realloc(v14, 16 * v15, 0x10C004028F705ECuLL);
      *((void *)this + 15) = v14;
      uint64_t v11 = *((unsigned int *)this + 12);
    }
    CFTypeID v16 = &v14[16 * v11];
    *(void *)CFTypeID v16 = a3;
    *((void *)v16 + 1) = a2;
    *((_DWORD *)this + 12) = v11 + 1;
    uint64_t v17 = a2;
  }
  pthread_mutex_unlock(v10);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 216))(*((void *)this + 2), a2);
  if (result) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = a4 == 0;
  }
  if (!v19)
  {
    if (v17 < 1)
    {
      if (v17 < 0) {
        (*(void (**)(CVDataBufferPool *, uint64_t))(*(void *)this + 184))(this, 1);
      }
      return 0;
    }
    else
    {
      CFTypeID v20 = *(uint64_t (**)(CVDataBufferPool *, const __CFAllocator *, uint64_t))(*(void *)this + 160);
      return v20(this, a5, 1);
    }
  }
  return result;
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  CVReturn result = -6661;
  if (metalDevice && cacheOut)
  {
    if (cacheAttributes)
    {
      CFTypeID v11 = CFGetTypeID(cacheAttributes);
      if (v11 != CFDictionaryGetTypeID()) {
        return -6661;
      }
    }
    if (textureAttributes && (CFTypeID v12 = CFGetTypeID(textureAttributes), v12 != CFDictionaryGetTypeID()))
    {
      return -6661;
    }
    else
    {
      *cacheOut = 0;
      uint64_t v13 = CVMetalTextureCache::alloc(allocator, cacheAttributes);
      if (v13
        && (unint64_t v14 = (__CVMetalTextureCache *)v13,
            (*(uint64_t (**)(CVBufferPool *, id, CFDictionaryRef, CFDictionaryRef))(*(void *)v13[2] + 96))(v13[2], metalDevice, cacheAttributes, textureAttributes)))
      {
        CVReturn result = 0;
        *cacheOut = v14;
      }
      else
      {
        return -6662;
      }
    }
  }
  return result;
}

CVBufferPool **CVMetalTextureCache::alloc(CVMetalTextureCache *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVMetalTextureCache *)_cvTrackingGetCFAllocator(@"CVMetalTextureCache");
  }
  if (CVMetalTextureCacheGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTextureCache);
  }
  uint64_t v3 = (CVBufferPool **)CVObject::alloc((CVObject *)kCVMetalTextureCacheID, (unint64_t)this, (const __CFAllocator *)0x18, 0x60uLL);
  CFDataRef v4 = v3;
  if (v3)
  {
    CVBufferPool::CVBufferPool(v3[2], v3);
    void *v5 = &unk_1EFA170C0;
    v5[5] = 0;
    v5[6] = 0;
    v5[4] = 0;
  }
  return v4;
}

CFTypeRef *CVMetalTextureCache::initWithDevice(CFTypeRef *this, void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  int v7 = this;
  CFAllocatorRef v8 = CFGetAllocator(this[1]);
  if (!CVBufferPool::init(v7)) {
    return 0;
  }
  v7[4] = CFRetain(a2);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  v7[5] = Mutable;
  if (!Mutable) {
    goto LABEL_15;
  }
  CFMutableDictionaryRef v10 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E4F1D540]);
  v7[6] = v10;
  if (!v10) {
    goto LABEL_15;
  }
  CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E4F1D540]);
  v7[7] = v11;
  if (!v11) {
    goto LABEL_15;
  }
  CFTypeID v12 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  v7[8] = v12;
  if (!v12) {
    goto LABEL_15;
  }
  if (!CVHostTimeBase::sIsInited) {
    double v13 = CVHostTimeBase::Initialize(v12);
  }
  LODWORD(v13) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v14) = CVHostTimeBase::sToNanosDenominator;
  v7[11] = (CFTypeRef)(1000000000.0 / (double)*(unint64_t *)&v13 * (double)v14);
  if (!a3) {
    goto LABEL_13;
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v8, a3);
  v7[9] = Copy;
  if (!Copy) {
    goto LABEL_15;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(Copy, @"MaximumMetalTextureAge");
  if (!Value) {
    goto LABEL_13;
  }
  CFNumberRef v17 = Value;
  double valuePtr = 0.0;
  CFTypeID v18 = CFGetTypeID(Value);
  if (v18 != CFNumberGetTypeID())
  {
LABEL_15:
    (*((void (**)(CFTypeRef *))*v7 + 5))(v7);
    return 0;
  }
  CFNumberGetValue(v17, kCFNumberDoubleType, &valuePtr);
  v7[11] = (CFTypeRef)CVHostTimeBase::ConvertFromNanos((CVHostTimeBase *)(valuePtr * 1000000000.0), valuePtr * 1000000000.0, v19);
LABEL_13:
  if (a4) {
    v7[10] = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
  }
  return v7;
}

unint64_t CVHostTimeBase::ConvertFromNanos(CVHostTimeBase *this, double a2, double a3)
{
  if (!CVHostTimeBase::sIsInited) {
    a2 = CVHostTimeBase::Initialize(this);
  }
  LODWORD(a2) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(a3) = CVHostTimeBase::sToNanosDenominator;
  return (unint64_t)((double)(unint64_t)this
                          / (double)*(unint64_t *)&a2
                          * (double)*(unint64_t *)&a3);
}

double CVHostTimeBase::Initialize(CVHostTimeBase *this)
{
  mach_timebase_info(&info);
  CVHostTimeBase::sMinDelta = 1;
  CVHostTimeBase::sToNanosNumerator = info.numer;
  CVHostTimeBase::sToNanosDenominator = info.denom;
  CVHostTimeBase::sFromNanosNumerator = info.denom;
  CVHostTimeBase::sFromNanosDenominator = info.numer;
  double result = (double)info.denom / (double)info.numer * 1000000000.0;
  *(double *)&CVHostTimeBase::sFrequency = result;
  CVHostTimeBase::sIsInited = 1;
  return result;
}

uint64_t CVLocklessBunchPair::finalize(CVLocklessBunchPair *this)
{
  (*(void (**)(CVLocklessBunchPair *))(*(void *)this + 56))(this);

  return CVBunchPair::finalize(this);
}

uint64_t preAllocateThread(_DWORD *a1)
{
  a1[6] = 0;
  pthread_setname_np("CVPreAllocateThread");
  if (!a1[6])
  {
    do
    {
      int v2 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)a1 + 168))(*(void *)a1, *((void *)a1 + 2), 1);
      a1[6] = v2;
    }
    while (!v2);
  }
  return 0;
}

{
  int v2;

  a1[6] = 0;
  pthread_setname_np("CVPreAllocateThread");
  if (!a1[6])
  {
    do
    {
      int v2 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)a1 + 168))(*(void *)a1, *((void *)a1 + 2), 1);
      a1[6] = v2;
    }
    while (!v2);
  }
  return 0;
}

uint64_t CVPixelBufferPool::preallocate(CVPixelBufferPool *this, const __CFAllocator *a2, int a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = 0;
  pthread_t v24 = 0;
  uint64_t v6 = *((void *)this + 2);
  v22[0] = this;
  v22[1] = v6;
  v22[2] = a2;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 232))(v6);
  if (v7 >= (*(uint64_t (**)(void))(**((void **)this + 2) + 224))(*((void *)this + 2))) {
    return 0;
  }
  (*(void (**)(void))(**((void **)this + 2) + 160))(*((void *)this + 2));
  if (a3)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 224))(*((void *)this + 2));
    if (v8 <= (*(uint64_t (**)(void))(**((void **)this + 2) + 232))(*((void *)this + 2)) + 1)
    {
      int v9 = 0;
      a3 = 0;
    }
    else
    {
      int v25 = 0;
      v27.__sig = 0x300000006;
      *(void *)uint64_t v26 = 4;
      int v9 = 0;
      if (sysctl((int *)&v27, 2u, &v25, (size_t *)v26, 0, 0) < 0)
      {
        a3 = 0;
      }
      else
      {
        a3 = 0;
        if (v25 >= 2)
        {
          CFMutableDictionaryRef v10 = pthread_self();
          int v25 = 0;
          if (pthread_getschedparam(v10, &v25, (sched_param *)v26))
          {
            CFMutableDictionaryRef v11 = 0;
          }
          else
          {
            CFMutableDictionaryRef v11 = &v27;
            pthread_attr_init(&v27);
            pthread_attr_setschedparam(&v27, (const sched_param *)v26);
            pthread_attr_setschedpolicy(&v27, v25);
          }
          a3 = pthread_create(&v24, v11, (void *(__cdecl *)(void *))preAllocateThread, v22);
          int v9 = 1;
        }
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  do
    unsigned int v13 = (*(uint64_t (**)(CVPixelBufferPool *, const __CFAllocator *, uint64_t))(*(void *)this + 168))(this, a2, 1);
  while (!v13);
  unsigned int v14 = v13;
  if (v13 == -6699) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v13;
  }
  if (a3) {
    int v15 = 0;
  }
  else {
    int v15 = v9;
  }
  if (v15 == 1)
  {
    pthread_join(v24, 0);
    unsigned int v16 = v23;
    if (v23 == -6699) {
      unsigned int v16 = 0;
    }
    if (v14 == -6699) {
      uint64_t v12 = v16;
    }
    else {
      uint64_t v12 = v14;
    }
  }
  (*(void (**)(void))(**((void **)this + 2) + 168))(*((void *)this + 2));
  CFNumberRef v17 = (const void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
  int v18 = (*(uint64_t (**)(void))(**((void **)this + 2) + 232))(*((void *)this + 2));
  int v19 = (*(uint64_t (**)(void))(**((void **)this + 2) + 224))(*((void *)this + 2));
  int v20 = (*(uint64_t (**)(void))(**((void **)this + 2) + 240))(*((void *)this + 2));
  snprintf((char *)&v27, 0x96uLL, "CVPixelBufferPool::preallocate complete for pool %p, allocated %d requested %d _targetBufferCountsBitfield 0x%x \n", v17, v18, v19, v20);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v26 = 136315138;
    *(void *)&v26[4] = &v27;
    _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", v26, 0xCu);
  }
  return v12;
}

uint64_t CVPixelBufferPool::allocateNewBacking(CVPixelBufferPool *this, const __CFAllocator *a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  CFTypeID v5 = CVPixelBufferBacking::alloc(a2, a2);
  if (!v5)
  {
    unsigned int v18 = -6660;
LABEL_14:
    unsigned int v13 = (const void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
    int v14 = (*(uint64_t (**)(void))(**((void **)this + 2) + 232))(*((void *)this + 2));
    int v15 = (*(uint64_t (**)(void))(**((void **)this + 2) + 224))(*((void *)this + 2));
    int v16 = (*(uint64_t (**)(void))(**((void **)this + 2) + 240))(*((void *)this + 2));
    snprintf(__str, 0x96uLL, "CVPixelBufferPool::allocateNewBacking return failure for pool %p, allocated %d requested %d _targetBufferCountsBitfield 0x%x \n", v13, v14, v15, v16);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v20 = __str;
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    return v18;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (*(uint64_t (**)(void, void, void, uint64_t))(**((void **)this + 2) + 112))(*((void *)this + 2), 0, 0, a3);
  unsigned int v18 = v7;
  if (v7)
  {
    uint64_t v8 = v7;
    CFRelease(v6);
  }
  else
  {
    if ((*(uint64_t (**)(CVImageBacking *, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, unsigned int *))(*(void *)v6[2] + 248))(v6[2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, *((void *)this + 5), *((void *)this + 4), 0, 0, 0,
           0,
           &v18))
    {
      if (*((unsigned char *)this + 136)) {
        (*(void (**)(CVImageBacking *))(*(void *)v6[2] + 88))(v6[2]);
      }
      (*(void (**)(CVImageBacking *, void))(*(void *)v6[2] + 96))(v6[2], *((void *)this + 2));
      (*(void (**)(void, CVImageBacking *))(**((void **)this + 2) + 88))(*((void *)this + 2), v6[2]);
      int v9 = (void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
      uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2)) + 1;
      uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
      CVTracePoolAction(1, v9, (void **)v6, "created", v10, v11);
    }
    uint64_t v8 = v18;
  }
  if (v8 != -6699 && v8 != 0) {
    goto LABEL_14;
  }
  return v8;
}

uint64_t CVLocklessBunchPair::initNewBacking(CVLocklessBunchPair *this, CVBufferBacking *a2, char a3, char a4)
{
  do
  {
    unsigned int v13 = *((_DWORD *)this + 62);
    unsigned int v12 = v13;
    if ((v13 & 0xFF0000) != 0)
    {
      unsigned int v12 = v13 - 0x10000;
    }
    else if (a4)
    {
      return 4294960597;
    }
    if (v12 == v13) {
      break;
    }
    int v7 = *((_DWORD *)this + 62);
    int v8 = v7;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)this + 62, (unsigned int *)&v8, v12, memory_order_relaxed, memory_order_relaxed);
  }
  while (v8 != v7);
  if (a2)
  {
    (*(void (**)(CVBufferBacking *, CVLocklessBunchPair *))(*(void *)a2 + 96))(a2, this);
    if ((a3 & 1) == 0)
    {
      uint64_t v9 = *((void *)this + 28);
      uint64_t v10 = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
      CVAtomicBunchAddObject(v9, v10);
    }
  }
  return 0;
}

uint64_t CVBufferBacking::finalize(CVBufferBacking *this)
{
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, @"BufferBackingWillDeallocate", *((const void **)this + 1), 0, 1u);
  uint64_t v3 = (void **)(*(uint64_t (**)(CVBufferBacking *))(*(void *)this + 24))(this);
  CVTracePoolAction(1, 0, v3, "deallocated", 0, 0);
  (*(void (**)(CVBufferBacking *, void))(*(void *)this + 96))(this, 0);
  CFDataRef v4 = (const void *)*((void *)this + 15);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 15) = 0;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 24));

  return CVObject::finalize(this);
}

void CVBufferBacking::setBunchPair(CVBufferBacking *this, CVBunchPair *a2)
{
  if (a2)
  {
    CFDataRef v4 = (const void *)(*(uint64_t (**)(CVBunchPair *))(*(void *)a2 + 24))(a2);
    CFRetain(v4);
  }
  uint64_t v5 = *((void *)this + 11);
  if (v5)
  {
    uint64_t v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    CFRelease(v6);
  }
  *((void *)this + 11) = a2;
}

uint64_t CVLocklessBunchPair::bufferBackingNotInUse(CVLocklessBunchPair *this, CVBufferBacking *a2)
{
  uint64_t v4 = *((void *)this + 29);
  uint64_t v5 = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  CVAtomicBunchRemoveObject(v4, v5, 1);
  uint64_t v6 = *((void *)this + 28);
  uint64_t v7 = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);

  return CVAtomicBunchAddObject(v6, v7);
}

void CVLocklessBunchPair::cleanup(CVLocklessBunchPair *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  (*(void (**)(CVLocklessBunchPair *))(*(void *)this + 184))(this);
  uint64_t v3 = (void *)*((void *)this + 27);
  uint64_t v4 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(void *)this + 96))(this);
  uint64_t v5 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(void *)this + 104))(this);
  CVTracePoolAction(1, v3, 0, "being deallocated", v4, v5);
  uint64_t v6 = (const void *)*((void *)this + 27);
  LODWORD(v3) = (*(uint64_t (**)(CVLocklessBunchPair *))(*(void *)this + 96))(this);
  LODWORD(v4) = (*(uint64_t (**)(CVLocklessBunchPair *))(*(void *)this + 104))(this);
  int v7 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(void *)this + 240))(this);
  snprintf(__str, 0x64uLL, "pool %p being deallocated [%d in use, %d free] _targetBufferCountsBitfield 0x%x \n", v6, v3, v4, v7);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    int v15 = __str;
    _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  uint64_t v8 = *((void *)this + 29);
  if (v8)
  {
    CVAtomicBunchApply(v8, (uint64_t (*)(uint64_t, void))_invalidateBacking, (uint64_t)Mutable);
    CVAtomicBunchDestroy(*((OSQueueHead **)this + 29));
  }
  *((void *)this + 29) = 0;
  uint64_t v9 = *((void *)this + 28);
  if (v9)
  {
    CVAtomicBunchApply(v9, (uint64_t (*)(uint64_t, void))_invalidateBacking, (uint64_t)Mutable);
    CVAtomicBunchDestroy(*((OSQueueHead **)this + 28));
  }
  *((void *)this + 28) = 0;
  (*(void (**)(CVLocklessBunchPair *, void))(*(void *)this + 152))(this, 0);
  (*(void (**)(CVLocklessBunchPair *))(*(void *)this + 192))(this);
  CFIndex Count = CFArrayGetCount(Mutable);
  if (Count >= 1)
  {
    CFIndex v11 = Count;
    for (CFIndex i = 0; i != v11; ++i)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, i);
      CFRelease(ValueAtIndex);
    }
  }
  CFRelease(Mutable);
}

CVReturn CVPixelBufferPoolCreate(CFAllocatorRef allocator, CFDictionaryRef poolAttributes, CFDictionaryRef pixelBufferAttributes, CVPixelBufferPoolRef *poolOut)
{
  CVReturn v10 = -6660;
  if (!poolOut) {
    return -6661;
  }
  *poolOut = 0;
  int v7 = CVPixelBufferPool::alloc(allocator, poolAttributes);
  if (!v7) {
    return -6662;
  }
  uint64_t v8 = (__CVPixelBufferPool *)v7;
  if (!(*(uint64_t (**)(CVPixelBufferPool *, CFDictionaryRef, CFDictionaryRef, CVReturn *))(*(void *)v7[2] + 96))(v7[2], poolAttributes, pixelBufferAttributes, &v10))return v10; {
  CVReturn result = 0;
  }
  *poolOut = v8;
  return result;
}

CFTypeRef *CVPixelBufferPool::initWithOptions(CFTypeRef *this, const __CFDictionary *a2, const __CFDictionary *a3, int *a4)
{
  int v7 = this;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v8 = CFGetAllocator(this[1]);
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  unsigned int v85 = 0;
  buffer[0] = 0;
  if (!CVBufferPool::init(v7))
  {
    int v7 = 0;
    *a4 = -6660;
    return v7;
  }
  (*((void (**)(CFTypeRef *, double))*v7 + 16))(v7, 1.0);
  if (a2)
  {
    *(void *)__str = 0;
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v8, a2);
    v7[4] = Copy;
    if (!Copy)
    {
LABEL_67:
      int v34 = -6662;
      goto LABEL_68;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"MaximumBufferAge");
    if (Value)
    {
      CFNumberRef v11 = Value;
      *(void *)double valuePtr = 0;
      CFTypeID v12 = CFGetTypeID(Value);
      if (v12 != CFNumberGetTypeID()) {
        goto LABEL_30;
      }
      CFNumberGetValue(v11, kCFNumberDoubleType, valuePtr);
      (*((void (**)(CFTypeRef *, double))*v7 + 16))(v7, *(double *)valuePtr);
    }
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a2, @"MinimumBufferCount");
    if (v13)
    {
      CFNumberRef v14 = v13;
      CFTypeID v15 = CFGetTypeID(v13);
      if (v15 != CFNumberGetTypeID()) {
        goto LABEL_30;
      }
      CFNumberGetValue(v14, kCFNumberCFIndexType, __str);
      (*((void (**)(CFTypeRef *, void, void, void, void))*v7 + 18))(v7, *(void *)__str, 0, 0, *MEMORY[0x1E4F1CF80]);
    }
    CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(a2, @"PixelBufferPoolNameKey");
    if (!v16)
    {
LABEL_15:
      int v20 = CFDictionaryGetValue(a2, @"PrefetchOnAllocation");
      if (v20 && CFEqual(v20, (CFTypeRef)*MEMORY[0x1E4F1CFD0])) {
        *((unsigned char *)v7 + 136) = 1;
      }
      goto LABEL_18;
    }
    CFStringRef v17 = v16;
    CFTypeID v18 = CFGetTypeID(v16);
    if (v18 == CFStringGetTypeID())
    {
      CFRetain(v17);
      CFTypeRef v19 = v7[3];
      if (v19) {
        CFRelease(v19);
      }
      v7[3] = v17;
      CFStringGetCString(v17, buffer, 256, 0x600u);
      goto LABEL_15;
    }
LABEL_30:
    int v34 = -6691;
LABEL_68:
    *a4 = v34;
    goto LABEL_69;
  }
LABEL_18:
  if (!a3)
  {
    *a4 = -6682;
    BOOL v43 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v43) {
      CVPixelBufferPool::initWithOptions(v43, v44, v45, v46, v47, v48, v49, v50);
    }
    goto LABEL_69;
  }
  CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(a3, @"Width");
  if (!v21 || (CFNumberRef v22 = v21, v23 = CFGetTypeID(v21), v23 != CFNumberGetTypeID()))
  {
    *a4 = -6682;
    BOOL v35 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v35) {
      CVPixelBufferPool::initWithOptions(v35, v36, v37, v38, v39, v40, v41, v42);
    }
    goto LABEL_69;
  }
  CFNumberGetValue(v22, kCFNumberCFIndexType, &v87);
  uint64_t v24 = v87;
  if (v87 <= 0)
  {
    *a4 = -6682;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      CVPixelBufferPool::initWithOptions(v24);
    }
    goto LABEL_69;
  }
  CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(a3, @"Height");
  if (!v25 || (CFNumberRef v26 = v25, v27 = CFGetTypeID(v25), v27 != CFNumberGetTypeID()))
  {
    *a4 = -6682;
    BOOL v51 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v51) {
      CVPixelBufferPool::initWithOptions(v51, v52, v53, v54, v55, v56, v57, v58);
    }
    goto LABEL_69;
  }
  CFNumberGetValue(v26, kCFNumberCFIndexType, &v86);
  uint64_t v28 = v86;
  if (v86 <= 0)
  {
    *a4 = -6682;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      CVPixelBufferPool::initWithOptions(v28);
    }
    goto LABEL_69;
  }
  uint64_t v29 = CFDictionaryGetValue(a3, @"PixelFormatType");
  if (v29)
  {
    CFNumberRef ValueAtIndex = v29;
    CFTypeID v31 = CFGetTypeID(v29);
    BOOL v33 = 1;
    if (v31 != CFNumberGetTypeID())
    {
      CFTypeID v32 = CFGetTypeID(ValueAtIndex);
      if (v32 != CFArrayGetTypeID()) {
        BOOL v33 = 0;
      }
    }
    CFTypeID v59 = CFGetTypeID(ValueAtIndex);
    if (v59 != CFArrayGetTypeID()
      || !CFArrayGetCount((CFArrayRef)ValueAtIndex)
      || (CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0)) != 0)
    {
      CFTypeID v60 = CFGetTypeID(ValueAtIndex);
      if (v60 == CFNumberGetTypeID()) {
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &v85);
      }
    }
  }
  else
  {
    BOOL v33 = 0;
  }
  CFTypeID v61 = CFDictionaryGetValue(a3, @"PixelFormatDescription");
  if (v61)
  {
    CFTypeID v62 = CFGetTypeID(v61);
    BOOL v63 = v62 == CFDictionaryGetTypeID();
  }
  else
  {
    BOOL v63 = 0;
  }
  if (!v33 && !v63)
  {
    *a4 = -6682;
    BOOL v70 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v70) {
      CVPixelBufferPool::initWithOptions(v70, v71, v72, v73, v74, v75, v76, v77);
    }
    goto LABEL_69;
  }
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(v8, 0, a3);
  v7[5] = MutableCopy;
  if (!MutableCopy) {
    goto LABEL_67;
  }
  uint64_t v65 = CFDictionaryGetValue(MutableCopy, @"IOSurfaceProperties");
  if (v65)
  {
    unsigned int v66 = v65;
    CFTypeID v67 = CFGetTypeID(v65);
    if (v67 != CFDictionaryGetTypeID() && !forceIOSurfaceBackingByDefault()) {
      goto LABEL_64;
    }
    CFTypeID v68 = CFGetTypeID(v66);
    if (v68 == CFDictionaryGetTypeID())
    {
      CFArrayRef Mutable = CFDictionaryCreateMutableCopy(v8, 0, (CFDictionaryRef)v66);
      goto LABEL_62;
    }
  }
  else if (!forceIOSurfaceBackingByDefault())
  {
    if (!CVIsPixelFormatCompressed(v85)) {
      goto LABEL_64;
    }
    unsigned int v83 = v85;
    uint64_t v84 = HIBYTE(v85);
    *a4 = -6662;
    snprintf(__str, 0x80uLL, "CoreVideo: Error, CVPixelBufferPoolCreate() for non-IOSurface backed compressed format %c%c%c%c is not allowed.", v84, BYTE2(v83), BYTE1(v83), v83);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)double valuePtr = 136315138;
      *(void *)&valuePtr[4] = __str;
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", valuePtr, 0xCu);
    }
LABEL_69:
    (*((void (**)(CFTypeRef *))*v7 + 5))(v7);
    return 0;
  }
  CFArrayRef Mutable = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E4F1D540]);
LABEL_62:
  long long v78 = Mutable;
  if (!Mutable) {
    goto LABEL_67;
  }
  CFDictionarySetValue(Mutable, @"IOSurfacePurgeWhenNotInUse", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue((CFMutableDictionaryRef)v7[5], @"IOSurfaceProperties", v78);
  CFRelease(v78);
LABEL_64:
  *a4 = 0;
  if (CVTracePools(1))
  {
    valuePtr[4] = 0;
    if (v85 > 0x63) {
      *(_DWORD *)double valuePtr = bswap32(v85);
    }
    else {
      snprintf(valuePtr, 5uLL, "%d", v85);
    }
    snprintf(__str, 0x32uLL, "allocated (%d x %d, %s)", v87, v86, valuePtr);
    long long v80 = (void *)(*((uint64_t (**)(CFTypeRef *))*v7 + 3))(v7);
    uint64_t v81 = (*(uint64_t (**)(CFTypeRef))(*(void *)v7[2] + 96))(v7[2]);
    uint64_t v82 = (*(uint64_t (**)(CFTypeRef))(*(void *)v7[2] + 104))(v7[2]);
    CVTracePoolAction(1, v80, 0, __str, v81, v82);
  }
  (*((void (**)(CFTypeRef *, char *, void, uint64_t, uint64_t))*v7 + 3))(v7, buffer, v85, v87, v86);
  kdebug_trace();
  return v7;
}

uint64_t CVLocklessBunchPair::setMaximumBufferAge(atomic_ullong *this, double a2)
{
  uint64_t v3 = this + 30;
  unint64_t add_explicit = atomic_fetch_add_explicit(this + 30, 0, memory_order_relaxed);
  HIDWORD(v5) = 1104006501;
  double v6 = a2 * 1000000000.0;
  unint64_t v7 = (unint64_t)v6;
  if (!CVHostTimeBase::sIsInited) {
    double v6 = CVHostTimeBase::Initialize((CVHostTimeBase *)this);
  }
  LODWORD(v6) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v5) = CVHostTimeBase::sToNanosDenominator;
  double v8 = (double)v7 / (double)*(unint64_t *)&v6 * (double)v5;
  unint64_t v9 = add_explicit;
  atomic_compare_exchange_strong_explicit(v3, &v9, (unint64_t)v8, memory_order_relaxed, memory_order_relaxed);
  if (v9 != add_explicit)
  {
    do
    {
      unint64_t v10 = atomic_fetch_add_explicit(this + 30, 0, memory_order_relaxed);
      unint64_t v11 = v10;
      atomic_compare_exchange_strong_explicit(this + 30, &v11, (unint64_t)v8, memory_order_relaxed, memory_order_relaxed);
    }
    while (v11 != v10);
  }
  (*(void (**)(atomic_ullong *))(*this + 136))(this);
  return 0;
}

uint64_t CVPixelBufferPool::setMaximumBufferAge(CVPixelBufferPool *this, double a2)
{
  return (*(uint64_t (**)(double))(**((void **)this + 2) + 208))(a2);
}

CFTypeRef *CVBufferPool::init(CFTypeRef *this)
{
  int v1 = this;
  CFAllocatorRef v2 = CFGetAllocator(this[1]);
  v1[3] = 0;
  if (((*((uint64_t (**)(CFTypeRef *, CFAllocatorRef))*v1 + 7))(v1, v2) & 1) == 0)
  {
    (*((void (**)(CFTypeRef *))*v1 + 5))(v1);
    return 0;
  }
  return v1;
}

void *CVLocklessBunchPair::init(void *a1)
{
  (*(void (**)(void *))(*a1 + 152))(a1);
  CVReturn result = CVAtomicBunchNew(0x10u, 0);
  a1[28] = result;
  if (result)
  {
    uint64_t v3 = CVAtomicBunchNew(0x10u, (uint64_t)result);
    a1[29] = v3;
    return (void *)(v3 != 0);
  }
  return result;
}

void *CVAtomicBunchNew(unsigned int a1, uint64_t a2)
{
  uint64_t v4 = malloc_type_calloc(1uLL, 0x30uLL, 0x10B00403F1EF37AuLL);
  unint64_t v5 = v4;
  if (v4)
  {
    void *v4 = 0;
    v4[1] = 0;
    uint64_t v4[2] = 0;
    if (a2)
    {
      double v6 = *(char **)(a2 + 32);
      if (v6 != (char *)(a2 + 28)) {
        CVAtomicBunchNew();
      }
      char v7 = 16;
    }
    else
    {
      char v7 = 0;
      double v6 = (char *)v4 + 28;
    }
    v4[4] = v6;
    *((unsigned char *)v4 + 4pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = v7;
    CVAtomicBunchIncreaseSizeAndReserveElement((uint64_t)v4, a1, 0);
  }
  return v5;
}

uint64_t CVAtomicBunchIncreaseSizeAndReserveElement(uint64_t a1, unsigned int a2, void *a3)
{
  size_t v6 = 24 * a2 + 8;
  char v7 = (char *)malloc_type_malloc(v6, 0x1193DBD4uLL);
  if (!v7) {
    return 3;
  }
  double v8 = v7;
  bzero(v7, v6);
  OSAtomicEnqueue((OSQueueHead *)a1, v8, 0);
  if (a3)
  {
    *a3 = v8 + 8;
    ElementModifyFlags((uint64_t)(v8 + 8), 1, 0x10000);
  }
  if (a2)
  {
    uint64_t v9 = 0;
    unint64_t v10 = (uint64_t *)(a1 + 16);
    unint64_t v11 = v8 + 8;
    do
    {
      do
      {
        uint64_t v12 = *v10;
        *(void *)&v11[24 * v9] = *v10;
      }
      while (!CVAtomicCompareAndSwapPtrBarrier(v12, (unint64_t)&v11[24 * v9], (atomic_ullong *)(a1 + 16)));
      ++v9;
    }
    while (v9 != a2);
  }
  atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 24), a2, memory_order_relaxed);
  return 1;
}

BOOL CVAtomicCompareAndSwapPtrBarrier(uint64_t a1, unint64_t a2, atomic_ullong *a3)
{
  uint64_t v3 = a1;
  atomic_compare_exchange_strong(a3, (unint64_t *)&v3, a2);
  return v3 == a1;
}

void CVLocklessBunchPair::setBufferPool(uint64_t a1, unint64_t a2)
{
  do
  {
    uint64_t v2 = *(void *)(a1 + 216);
    uint64_t v3 = v2;
    atomic_compare_exchange_strong_explicit((atomic_ullong *volatile)(a1 + 216), (unint64_t *)&v3, a2, memory_order_relaxed, memory_order_relaxed);
  }
  while (v3 != v2);
}

CVPixelBufferPool **CVPixelBufferPool::alloc(CVPixelBufferPool *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVPixelBufferPool *)_cvTrackingGetCFAllocator(@"CVPixelBufferPool");
  }
  if (CVPixelBufferPoolGetTypeID::once != -1) {
    dispatch_once_f(&CVPixelBufferPoolGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferPool);
  }
  uint64_t v3 = (CVPixelBufferPool **)CVObject::alloc((CVObject *)kCVPixelBufferPoolID, (unint64_t)this, (const __CFAllocator *)0x18, 0x90uLL);
  uint64_t v4 = v3;
  if (v3) {
    CVPixelBufferPool::CVPixelBufferPool(v3[2], v3);
  }
  return v4;
}

void CVPixelBufferPool::CVPixelBufferPool(CVPixelBufferPool *this, const void *a2)
{
  CVBufferPool::CVBufferPool(this, a2);
  *uint64_t v3 = &unk_1EFA16C10;
  v3[4] = 0;
  v3[5] = 0;
  if ((shouldPrefetchOnAllocationByDefault(void)::sDidCheck & 1) == 0)
  {
    AppBooleanCFNumberRef Value = CFPreferencesGetAppBooleanValue(@"pool_prefetch", @"com.apple.corevideo", 0);
    shouldPrefetchOnAllocationByDefault(void)::sShouldPrefetchOnAllocation = AppBooleanValue;
    if (AppBooleanValue) {
      syslog(3, "CoreVideo: Will enable CVPixelBufferPool allocation prefetch by default -- thank you for setting \"defaults write com.apple.corevideo pool_prefetch -BOOL YES\"\n");
    }
    shouldPrefetchOnAllocationByDefault(void)::sDidCheck = 1;
  }
  *((unsigned char *)this + 136) = shouldPrefetchOnAllocationByDefault(void)::sShouldPrefetchOnAllocation;
  pthread_mutex_init((pthread_mutex_t *)this + 1, 0);
  *((_DWORD *)this + 15) = 16;
  *((void *)this + 16) = malloc_type_calloc(1uLL, 0x100uLL, 0x10C004028F705ECuLL);
}

void CVBufferPool::CVBufferPool(CVBufferPool *this, const void *a2)
{
  CVObject::CVObject(this, a2);
  *uint64_t v2 = &unk_1EFA162D0;
}

CVBunchPair **CVPixelBufferPool::initBunchPair(CVPixelBufferPool *this, const __CFAllocator *a2)
{
  CVReturn result = CVLocklessBunchPair::alloc(a2, a2);
  if (result)
  {
    uint64_t v4 = result[2];
    *((void *)this + 2) = v4;
    unint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 272);
    return (CVBunchPair **)v5();
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  return result;
}

CVBunchPair **CVLocklessBunchPair::alloc(CVLocklessBunchPair *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVLocklessBunchPair *)_cvTrackingGetCFAllocator(@"CVLocklessBunchPair");
  }
  if (CVLocklessBunchPairGetTypeID(void)::once != -1) {
    dispatch_once_f(&CVLocklessBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLocklessBunchPair);
  }
  uint64_t v3 = (CVBunchPair **)CVObject::alloc((CVObject *)kCVLocklessBunchPairID, (unint64_t)this, (const __CFAllocator *)0x18, 0x100uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    CVBunchPair::CVBunchPair(v3[2], v3);
    *(void *)uint64_t v5 = &unk_1EFA16F98;
    *(void *)(v5 + 2CVBitOrAtomic(1, this + 24) = 0;
    *(void *)(v5 + 232) = 0;
    *(void *)(v5 + 24pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
    *(_DWORD *)(v5 + 248) = 0;
  }
  return v4;
}

void CVBunchPair::CVBunchPair(CVBunchPair *this, const void *a2)
{
  CVObject::CVObject(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA161B0;
  pthread_rwlock_init((pthread_rwlock_t *)(v2 + 16), 0);
}

uint64_t CVPixelBufferPool::setMinimumBufferCount(pthread_mutex_t *this, uint64_t a2, const void *a3, int a4, const __CFAllocator *a5)
{
  unint64_t v10 = this + 1;
  pthread_mutex_lock(this + 1);
  uint64_t v11 = *(unsigned int *)&this->__opaque[48];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)(this[2].__sig + 8);
    uint64_t v13 = *(unsigned int *)&this->__opaque[48];
    while ((const void *)*(v12 - 1) != a3)
    {
      v12 += 2;
      if (!--v13) {
        goto LABEL_5;
      }
    }
    uint64_t v17 = a2 - *v12;
    *uint64_t v12 = a2;
  }
  else
  {
LABEL_5:
    sig = (char *)this[2].__sig;
    if (*(_DWORD *)&this->__opaque[52] == v11)
    {
      unsigned int v15 = v11 + 16;
      *(_DWORD *)&this->__opaque[52] = v15;
      sig = (char *)malloc_type_realloc(sig, 16 * v15, 0x10C004028F705ECuLL);
      this[2].__sig = (uint64_t)sig;
      uint64_t v11 = *(unsigned int *)&this->__opaque[48];
    }
    CFStringRef v16 = &sig[16 * v11];
    *(void *)CFStringRef v16 = a3;
    *((void *)v16 + 1) = a2;
    *(_DWORD *)&this->__opaque[48] = v11 + 1;
    uint64_t v17 = a2;
  }
  pthread_mutex_unlock(v10);
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)&this->__opaque[8] + 216))(*(void *)&this->__opaque[8], a2);
  if (result) {
    BOOL v19 = 1;
  }
  else {
    BOOL v19 = a4 == 0;
  }
  if (!v19)
  {
    if (v17 < 1)
    {
      if (v17 < 0) {
        (*(void (**)(pthread_mutex_t *, uint64_t))(this->__sig + 184))(this, 1);
      }
      return 0;
    }
    else
    {
      int v20 = *(uint64_t (**)(pthread_mutex_t *, const __CFAllocator *, uint64_t))(this->__sig + 160);
      return v20(this, a5, 1);
    }
  }
  return result;
}

uint64_t CVLocklessBunchPair::setMinimumBufferCount(CVLocklessBunchPair *this, uint64_t a2)
{
  do
  {
    uint64_t v4 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(void *)this + 232))(this);
    int v5 = (a2 - v4) << 16;
    if (a2 < v4) {
      int v5 = 0;
    }
    unsigned int v9 = (((*((_DWORD *)this + 62) & 0xFFFF0000) + a2) & 0xFF00FFFF) + v5;
    int v6 = *((_DWORD *)this + 62);
    int v7 = v6;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)this + 62, (unsigned int *)&v7, v9, memory_order_relaxed, memory_order_relaxed);
  }
  while (v7 != v6);
  return 0;
}

uint64_t CVLocklessBunchPair::getTotalBufferCount(CVLocklessBunchPair *this)
{
  return (int)CVAtomicBunchGetSharedCount(*((void *)this + 28));
}

uint64_t CVAtomicBunchGetSharedCount(uint64_t a1)
{
  return HIWORD(**(_DWORD **)(a1 + 32)) + (unsigned __int16)**(_DWORD **)(a1 + 32);
}

uint64_t CVLocklessBunchPair::getTargetBufferCountsBitfield(CVLocklessBunchPair *this)
{
  return *((unsigned int *)this + 62);
}

void CVAtomicBunchDestroy(OSQueueHead *__list)
{
  if (__list)
  {
    while (1)
    {
      uint64_t v2 = OSAtomicDequeue(__list, 0);
      if (!v2) {
        break;
      }
      free(v2);
    }
    free(__list);
  }
}

uint64_t CVBunchPair::enterBackingsCriticalWriteSection(CVBunchPair *this)
{
  return pthread_rwlock_wrlock((pthread_rwlock_t *)((char *)this + 16));
}

uint64_t CVLocklessBunchPair::getMinimumBufferCount(CVLocklessBunchPair *this)
{
  return (unsigned __int16)*((_DWORD *)this + 62);
}

CFMutableArrayRef CVLockingBunchPair::init(void *a1, uint64_t a2, const __CFAllocator *a3)
{
  (*(void (**)(void *))(*a1 + 152))(a1);
  CFMutableArrayRef result = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
  a1[28] = result;
  if (result)
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
    a1[29] = Mutable;
    return (CFMutableArrayRef)(Mutable != 0);
  }
  return result;
}

CVLockingBunchPair **CVBufferPool::initBunchPair(CVBufferPool *this, const __CFAllocator *a2)
{
  CFMutableArrayRef result = CVLockingBunchPair::alloc(a2, a2);
  if (result)
  {
    uint64_t v4 = result[2];
    *((void *)this + 2) = v4;
    int v5 = *(uint64_t (**)(void))(*(void *)v4 + 272);
    return (CVLockingBunchPair **)v5();
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  return result;
}

CVLockingBunchPair **CVLockingBunchPair::alloc(CVLockingBunchPair *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVLockingBunchPair *)_cvTrackingGetCFAllocator(@"CVLockingBunchPair");
  }
  if (CVLockingBunchPairGetTypeID(void)::once != -1) {
    dispatch_once_f(&CVLockingBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLockingBunchPair);
  }
  uint64_t v3 = (CVLockingBunchPair **)CVObject::alloc((CVObject *)kCVLockingBunchPairID, (unint64_t)this, (const __CFAllocator *)0x18, 0x138uLL);
  uint64_t v4 = v3;
  if (v3) {
    CVLockingBunchPair::CVLockingBunchPair(v3[2], v3);
  }
  return v4;
}

void CVLockingBunchPair::CVLockingBunchPair(CVLockingBunchPair *this, const void *a2)
{
  CVBunchPair::CVBunchPair(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA16CF8;
  *(_OWORD *)(v2 + 2CVBitOrAtomic(1, this + 24) = 0u;
  *(_OWORD *)(v2 + 24pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0u;
  *(_DWORD *)(v2 + 256) = 0;
  uint64_t v3 = (CVLockingBunchPair *)pthread_cond_init((pthread_cond_t *)(v2 + 264), 0);
  if (!CVLockingBunchPair::_bufferPoolMutex) {
    CVLockingBunchPair::initCVBufferPoolMutex(v3);
  }
}

uint64_t CVBunchPair::setBufferPool(uint64_t result, uint64_t a2)
{
  *(void *)(result + 216) = a2;
  return result;
}

CVBunchPair **CVDataBufferPool::initBunchPair(CVDataBufferPool *this, const __CFAllocator *a2)
{
  CFMutableArrayRef result = CVLocklessBunchPair::alloc(a2, a2);
  if (result)
  {
    uint64_t v4 = result[2];
    *((void *)this + 2) = v4;
    int v5 = *(uint64_t (**)(void))(*(void *)v4 + 272);
    return (CVBunchPair **)v5();
  }
  else
  {
    *((void *)this + 2) = 0;
  }
  return result;
}

uint64_t CVLockingBunchPair::initCVBufferPoolMutex(CVLockingBunchPair *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  int v1 = (pthread_mutex_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  pthread_mutex_init(v1, &v4);
  uint64_t v2 = 0;
  atomic_compare_exchange_strong_explicit(&CVLockingBunchPair::_bufferPoolMutex, (unint64_t *)&v2, (unint64_t)v1, memory_order_relaxed, memory_order_relaxed);
  if (v2)
  {
    pthread_mutex_destroy(v1);
    free(v1);
  }
  return pthread_mutexattr_destroy(&v4);
}

uint64_t CVPixelBuffer::setAttachment(CVPixelBuffer *this, const __CFString *a2, __CFString *a3, unsigned int a4)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t result = 4294960635;
    if (a4 <= 1 && a2 && a3)
    {
      unsigned int v9 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
      CFStringRef v10 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      CFNumberRef Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
      uint64_t v12 = Value;
      if (Value) {
        CFRetain(Value);
      }
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 10), a2);
      uint64_t v13 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2);
      CFNumberRef v14 = v13;
      if (v13) {
        CFRetain(v13);
      }
      CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 11), a2);
      if (a4 != 1 || (v9 ? (BOOL v15 = v10 == 0) : (BOOL v15 = 1), v15))
      {
        CFDictionarySetValue(*((CFMutableDictionaryRef *)this + a4 + 10), a2, a3);
      }
      else
      {
        if ((const __CFString *)*MEMORY[0x1E4F2F068] != v10)
        {
          CFStringRef v16 = 0;
LABEL_26:
          IOSurfaceSetValue(v9, v10, a3);
          goto LABEL_27;
        }
        CFTypeID TypeID = CGColorSpaceGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          setCGColorSpaceID(v9, a3);
          a3 = (__CFString *)CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace((CGColorSpace *)a3);
          CFStringRef v16 = a3;
          if (a3) {
            goto LABEL_26;
          }
LABEL_27:
          if (v12) {
            CFRelease(v12);
          }
          if (v14) {
            CFRelease(v14);
          }
          if (v16) {
            CFRelease(v16);
          }
          pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
          return 0;
        }
      }
      CFStringRef v16 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    int v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v22 = 0u;
    uint64_t v21 = 0;
    uint64_t result = CVBuffer::setAttachment(this, a2, a3, a4);
    if (a4 == 1 && !result)
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
      if (result)
      {
        uint64_t v17 = result;
        if (convertAttachmentToIOSurfaceStruct(a2, a3, (uint64_t)&v22, &v21))
        {
          v19[4] = v26;
          v19[5] = v27;
          v19[6] = v28;
          int v20 = v29;
          v19[0] = v22;
          v19[1] = v23;
          v19[2] = v24;
          v19[3] = v25;
          return setBulkAttachmentsOnIOSurface(v17, (uint64_t)v19, v21);
        }
        CVPixelBuffer::setIOSurfaceAttachmentForCVBufferKey(this, a2, (CGColorSpace *)a3);
        return 0;
      }
    }
  }
  return result;
}

void translateCoreVideoAttachmentKeyToIOSurfaceKeyAndStoreIt(const __CFString *a1, void *a2, void *a3)
{
  if (!a2) {
    return;
  }
  pthread_mutexattr_t v4 = a2;
  int v6 = (__IOSurface *)*((void *)a3 + 3);
  int v7 = CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a1);
  if (*(void *)a3)
  {
    CFNumberRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)a3, a1);
    unsigned int v9 = Value;
    if (Value) {
      CFRetain(Value);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)a3, a1);
  }
  else
  {
    unsigned int v9 = 0;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)*((void *)a3 + 1);
  if (v10)
  {
    uint64_t v11 = CFDictionaryGetValue(v10, a1);
    uint64_t v12 = v11;
    if (v11) {
      CFRetain(v11);
    }
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)a3 + 1), a1);
    if (v7) {
      goto LABEL_11;
    }
LABEL_14:
    CFNumberRef v14 = (__CFDictionary *)*((void *)a3 + 1);
    if (v14) {
      CFDictionarySetValue(v14, a1, v4);
    }
    goto LABEL_16;
  }
  uint64_t v12 = 0;
  if (!v7) {
    goto LABEL_14;
  }
LABEL_11:
  if ((const void *)*MEMORY[0x1E4F2F068] != v7)
  {
    uint64_t v13 = 0;
LABEL_24:
    CFDictionarySetValue(*((CFMutableDictionaryRef *)a3 + 2), v7, v4);
    goto LABEL_25;
  }
  CFTypeID TypeID = CGColorSpaceGetTypeID();
  if (TypeID == CFGetTypeID(v4))
  {
    if (_os_feature_enabled_impl())
    {
      CFTypeID v16 = CGColorSpaceGetTypeID();
      if (v16 == CFGetTypeID(v4) && (int ID = CGColorSpaceGetID()) != 0) {
        CVDictionarySetSInt32Value(*((__CFDictionary **)a3 + 2), (const void *)*MEMORY[0x1E4F2F070], ID);
      }
      else {
        IOSurfaceRemoveValue(v6, (CFStringRef)*MEMORY[0x1E4F2F070]);
      }
    }
    pthread_mutexattr_t v4 = (void *)CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace((CGColorSpace *)v4);
    uint64_t v13 = v4;
    if (!v4) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_16:
  uint64_t v13 = 0;
LABEL_25:
  if (v9) {
    CFRelease(v9);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v13)
  {
    CFRelease(v13);
  }
}

CFTypeRef CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace(CGColorSpace *a1)
{
  pthread_mutex_lock(&sCVPixelBufferGlobalCache_Mutex);
  if ((CGColorSpace *)sCVPixelBufferGlobalCache_ColorSpace == a1
    || a1 && sCVPixelBufferGlobalCache_ColorSpace && CFEqual((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace, a1))
  {
    if (sCVPixelBufferGlobalCache_CFPropertyList) {
      CFTypeRef v2 = CFRetain((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList);
    }
    else {
      CFTypeRef v2 = 0;
    }
  }
  else
  {
    CFPropertyListRef v3 = CGColorSpaceCopyPropertyList(a1);
    CFTypeRef v2 = v3;
    if (a1 && v3)
    {
      CFRetain(a1);
      if (sCVPixelBufferGlobalCache_ColorSpace) {
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_ColorSpace);
      }
      sCVPixelBufferGlobalCache_ColorSpace = (uint64_t)a1;
      CFRetain(v2);
      if (sCVPixelBufferGlobalCache_CFPropertyList) {
        CFRelease((CFTypeRef)sCVPixelBufferGlobalCache_CFPropertyList);
      }
      sCVPixelBufferGlobalCache_CFPropertyList = (uint64_t)v2;
    }
  }
  pthread_mutex_unlock(&sCVPixelBufferGlobalCache_Mutex);
  return v2;
}

uint64_t CVDictionarySetSInt32Value(__CFDictionary *a1, const void *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v6 = v5;
  if (a1 && v5)
  {
    CFDictionarySetValue(a1, a2, v5);
    uint64_t v7 = 0;
LABEL_5:
    CFRelease(v6);
    return v7;
  }
  uint64_t v7 = 4294960634;
  if (v5) {
    goto LABEL_5;
  }
  return v7;
}

__IOSurface *CVPixelBuffer::removeAllAttachments(CVPixelBuffer *this)
{
  if (_os_feature_enabled_impl())
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    if ((*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15))) {
      IOSurfaceRemoveCoreVideoBridgedValues();
    }
    CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)this + 10));
    CFDictionaryRemoveAllValues(*((CFMutableDictionaryRef *)this + 11));
    return (__IOSurface *)pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
  }
  else
  {
    CVBuffer::removeAllAttachments((CFMutableDictionaryRef *)this);
    uint64_t result = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    if (result)
    {
      CFPropertyListRef v3 = result;
      int v4 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
      if (v4 >= 1)
      {
        int v5 = v4;
        for (unsigned int i = 0; i != v5; ++i)
        {
          if (!CVDoesIOSurfacePropertyKeyAtIndexInMappingTableHaveCorrespondingBulkAttachment(i))
          {
            CFStringRef v7 = (const __CFString *)CVGetIOSurfacePropertyKeyAtIndexInMappingTable(i);
            IOSurfaceRemoveValue(v3, v7);
          }
        }
      }
      return (__IOSurface *)IOSurfaceSetBulkAttachments2();
    }
  }
  return result;
}

CVPixelBufferPoolRef CVPixelBufferPoolRetain(CVPixelBufferPoolRef pixelBufferPool)
{
  if (pixelBufferPool) {
    CFRetain(pixelBufferPool);
  }
  return pixelBufferPool;
}

uint64_t CVPixelBufferBacking::finalize(CVPixelBufferBacking *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    (*(void (**)(uint64_t, CVPixelBufferBacking *))(*(void *)v2 + 256))(v2, this);
  }
  if (*((unsigned char *)this + 1169))
  {
    int v3 = *((_DWORD *)this + 118);
    int v4 = *((_DWORD *)this + 122);
    pthread_once(&shouldTraceBackingSummary(void)::once, (void (*)(void))initPixelBufferBackingSummary);
    if (gPixelBufferBackingSummaryBag)
    {
      uint64_t v5 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 272))(this);
      uint64_t v6 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 280))(this);
      unsigned int v7 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 192))(this);
      uint64_t v8 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 304))(this);
      CFStringRef PoolName = (const __CFString *)CVBufferBacking::getPoolName((atomic_uint *)this);
      pthread_mutex_lock(&gPixelBufferBackingSummaryMutex);
      if (gPixelBufferBackingSummaryBag)
      {
        CFStringRef v10 = copyBackingSummaryString(v5, v6, v7, v3, v4, PoolName);
        CFBagRemoveValue((CFMutableBagRef)gPixelBufferBackingSummaryBag, v10);
        CFRelease(v10);
        unint64_t v11 = gPixelBufferBackingTotalDataSize;
        if ((v3 & 2) == 0)
        {
          unint64_t v11 = gPixelBufferBackingTotalDataSize - v8;
          gPixelBufferBackingTotalDataSize -= v8;
        }
        printPixelBufferBackingSummaryBag((const __CFBag *)gPixelBufferBackingSummaryBag, v11);
      }
      pthread_mutex_unlock(&gPixelBufferBackingSummaryMutex);
    }
  }
  if (!*((void *)this + 56)
    && (!*((void *)this + 130) || !*((void *)this + 62))
    && !*((void *)this + 57)
    && !*((void *)this + 142))
  {
    goto LABEL_27;
  }
  if (!*((unsigned char *)this + 1168))
  {
    uint64_t v13 = *((void *)this + 138);
    if (v13)
    {
      if (v13 == 3)
      {
        CFNumberRef v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))*((void *)this + 140);
        uint64_t v15 = *((void *)this + 141);
        uint64_t v19 = *((void *)this + 137);
        uint64_t v18 = *((void *)this + 57);
        uint64_t v17 = (char *)*((void *)this + 142);
        uint64_t v16 = *((void *)this + 56);
        goto LABEL_26;
      }
      if (v13 != 2) {
        goto LABEL_27;
      }
    }
    (*((void (**)(void, void, void, void))this + 140))(*((void *)this + 141), *((void *)this + 137), *((void *)this + 56), *((void *)this + 142));
    goto LABEL_27;
  }
  uint64_t v12 = (void (*)(void, void))*((void *)this + 143);
  if (v12)
  {
    v12(*((void *)this + 145), *((void *)this + 56));
    goto LABEL_27;
  }
  CFNumberRef v14 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, char *))*((void *)this + 144);
  if (v14)
  {
    uint64_t v15 = *((void *)this + 145);
    uint64_t v16 = *((void *)this + 129);
    uint64_t v17 = (char *)this + 496;
    uint64_t v18 = *((void *)this + 130);
    uint64_t v19 = *((void *)this + 56);
LABEL_26:
    v14(v15, v19, v16, v18, v17);
  }
LABEL_27:
  *((void *)this + 56) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 142) = 0;
  int v20 = (const void *)*((void *)this + 135);
  if (v20) {
    CFRelease(v20);
  }
  *((void *)this + 135) = 0;
  uint64_t v21 = (const void *)*((void *)this + 136);
  if (v21) {
    CFRelease(v21);
  }
  *((void *)this + 136) = 0;
  long long v22 = (const void *)*((void *)this + 137);
  if (v22) {
    CFRelease(v22);
  }
  *((void *)this + 137) = 0;
  long long v23 = (const void *)*((void *)this + 60);
  if (v23) {
    CFRelease(v23);
  }
  *((void *)this + 6pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0;
  *((_DWORD *)this + 122) = 1;
  long long v24 = (const void *)*((void *)this + 57);
  if (v24 && *((unsigned char *)this + 1168)) {
    CFRelease(v24);
  }
  *((void *)this + 57) = 0;
  long long v25 = (const void *)*((void *)this + 58);
  if (v25) {
    CFRelease(v25);
  }
  *((void *)this + 58) = 0;

  return CVImageBacking::finalize(this);
}

void _CVPixelBufferStandardMemoryDispose(void *a1, CFAllocatorRef allocator, void *a3, CFTypeRef cf, void *ptr)
{
  if (ptr) {
    CFAllocatorDeallocate(allocator, ptr);
  }
  if (cf)
  {
    CFRelease(cf);
  }
}

uint64_t CVBunchPair::invokeDestroyBackingkTrace(CVBunchPair *this, CVPixelBufferBacking *a2)
{
  if (a2)
  {
    uint64_t v4 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)a2 + 160))(a2);
    uint64_t v5 = *(void *)a2;
    if (v4)
    {
      uint64_t v6 = (__IOSurface *)(*(uint64_t (**)(CVPixelBufferBacking *))(v5 + 160))(a2);
      IOOrEXSurfaceGetID(v6);
    }
    else
    {
      (*(void (**)(CVPixelBufferBacking *))(v5 + 24))(a2);
    }
  }
  (*(void (**)(CVBunchPair *))(*(void *)this + 96))(this);
  (*(void (**)(CVBunchPair *))(*(void *)this + 104))(this);

  return kdebug_trace();
}

int CVColorPrimariesGetIntegerCodePointForString(CFStringRef colorPrimariesString)
{
  if (!colorPrimariesString) {
    return 2;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(colorPrimariesString)) {
    return 2;
  }
  if (CFEqual(colorPrimariesString, @"ITU_R_709_2")) {
    return 1;
  }
  if (CFEqual(colorPrimariesString, @"EBU_3213")) {
    return 5;
  }
  if (CFEqual(colorPrimariesString, @"SMPTE_C")) {
    return 6;
  }
  if (CFEqual(colorPrimariesString, @"DCI_P3")) {
    return 11;
  }
  if (CFEqual(colorPrimariesString, @"P3_D65")) {
    return 12;
  }
  if (CFEqual(colorPrimariesString, @"ITU_R_2020")) {
    return 9;
  }
  if (CFEqual(colorPrimariesString, @"P22")) {
    return 22;
  }
  if (!CFStringHasPrefix(colorPrimariesString, @"ColorPrimaries#")) {
    return 2;
  }
  CFIndex Length = CFStringGetLength(colorPrimariesString);
  v8.location = CFStringGetLength(@"ColorPrimaries#");
  v8.length = Length - v8.location;
  CFStringRef v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], colorPrimariesString, v8);
  if (!v5) {
    return 2;
  }
  CFStringRef v6 = v5;
  IntCFNumberRef Value = CFStringGetIntValue(v5);
  CFRelease(v6);
  return IntValue;
}

uint64_t classInitialize_CVPixelBuffer(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVPixelBufferint ID = result;
  return result;
}

uint64_t CVDataBufferBacking::getDataSize(CVDataBufferBacking *this)
{
  return *((void *)this + 18);
}

int CVTransferFunctionGetIntegerCodePointForString(CFStringRef transferFunctionString)
{
  if (!transferFunctionString) {
    return 2;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(transferFunctionString)) {
    return 2;
  }
  if (CFEqual(transferFunctionString, @"ITU_R_709_2")) {
    return 1;
  }
  if (CFEqual(transferFunctionString, @"UseGamma")) {
    return 2;
  }
  if (CFEqual(transferFunctionString, @"SMPTE_240M_1995")) {
    return 7;
  }
  if (CFEqual(transferFunctionString, @"SMPTE_ST_2084_PQ")) {
    return 16;
  }
  if (CFEqual(transferFunctionString, @"SMPTE_ST_428_1")) {
    return 17;
  }
  if (CFEqual(transferFunctionString, @"ITU_R_2100_HLG")) {
    return 18;
  }
  if (CFEqual(transferFunctionString, @"Linear")) {
    return 8;
  }
  if (CFEqual(transferFunctionString, @"IEC_sRGB") || CFEqual(transferFunctionString, @"sRGB")) {
    return 13;
  }
  if (CFEqual(transferFunctionString, @"ITU_R_2020")) {
    return 1;
  }
  if (!CFStringHasPrefix(transferFunctionString, @"TransferFunction#")) {
    return 2;
  }
  CFIndex Length = CFStringGetLength(transferFunctionString);
  v8.location = CFStringGetLength(@"TransferFunction#");
  v8.length = Length - v8.location;
  CFStringRef v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], transferFunctionString, v8);
  if (!v5) {
    return 2;
  }
  CFStringRef v6 = v5;
  IntCFNumberRef Value = CFStringGetIntValue(v5);
  CFRelease(v6);
  return IntValue;
}

uint64_t classFinalize_CVLocklessBunchPair(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

uint64_t classFinalize_CVPixelBufferPool(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

void _pixelFormatDictionaryInit(void)
{
  uint64_t v637 = *MEMORY[0x1E4F143B8];
  if ((areHTPCFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      CFDictionaryRef v0 = (const __CFDictionary *)MGCopyAnswer();
      if (v0)
      {
        CFDictionaryRef v1 = v0;
        uint64_t v2 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v2 == CFDictionaryGetValue(v0, @"media-compression")) {
          areHTPCFormatsSupported(void)::uint64_t result = 1;
        }
        CFRelease(v1);
      }
      areHTPCFormatsSupported(void)::didCheck = 1;
    }
  }
  int v629 = areHTPCFormatsSupported(void)::result;
  if ((areAGXFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      CFDictionaryRef v3 = (const __CFDictionary *)MGCopyAnswer();
      if (v3)
      {
        CFDictionaryRef v4 = v3;
        CFStringRef v5 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v5 == CFDictionaryGetValue(v3, @"buffer-compression")) {
          areAGXFormatsSupported(void)::uint64_t result = 1;
        }
        if (v5 == CFDictionaryGetValue(v4, @"universal-buffer-compression")) {
          areAGXFormatsSupported(void)::uint64_t result = 1;
        }
        CFRelease(v4);
      }
      areAGXFormatsSupported(void)::didCheck = 1;
    }
  }
  int v6 = areAGXFormatsSupported(void)::result;
  int v7 = areUniversalCompressionFormatsSupported();
  int v632 = areUniversalLossyCompressionFormatsSupported();
  if ((areUniversalMultiSliceFormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      CFDictionaryRef v8 = (const __CFDictionary *)MGCopyAnswer();
      if (v8)
      {
        CFDictionaryRef v9 = v8;
        CFStringRef v10 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v10 == CFDictionaryGetValue(v8, @"universal-multislice-buffer-compression")) {
          areUniversalMultiSliceFormatsSupported(void)::uint64_t result = 1;
        }
        CFRelease(v9);
      }
      if (!areUniversalMultiSliceFormatsSupported(void)::result)
      {
        keyExistsAndHasValidFormat[0] = 0;
        AppBooleanCFNumberRef Value = CFPreferencesGetAppBooleanValue(@"universal-multislice-buffer-compression", @"com.apple.corevideo", keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat[0])
        {
          char v12 = AppBooleanValue;
          uint64_t v13 = "enable";
          if (!AppBooleanValue) {
            uint64_t v13 = "disable";
          }
          CFNumberRef v14 = "YES";
          if (!AppBooleanValue) {
            CFNumberRef v14 = "NO";
          }
          syslog(3, "CoreVideo: Will %s universal multi-slice buffer compression -- thank you for setting \"defaults write com.apple.corevideo universal-multislice-buffer-compression -BOOL %s\"\n", v13, v14);
          areUniversalMultiSliceFormatsSupported(void)::uint64_t result = v12;
        }
      }
      areUniversalMultiSliceFormatsSupported(void)::didCheck = 1;
    }
  }
  int v631 = areUniversalMultiSliceFormatsSupported(void)::result;
  if ((areUniversalpARGB10101010FormatsSupported(void)::didCheck & 1) == 0 && !disableCompression())
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    if (!isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine)
    {
      CFDictionaryRef v15 = (const __CFDictionary *)MGCopyAnswer();
      if (v15)
      {
        CFDictionaryRef v16 = v15;
        uint64_t v17 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (v17 == CFDictionaryGetValue(v15, @"universal-pARGB10101010-buffer-compression")) {
          areUniversalpARGB10101010FormatsSupported(void)::uint64_t result = 1;
        }
        CFRelease(v16);
      }
      if (!areUniversalpARGB10101010FormatsSupported(void)::result)
      {
        keyExistsAndHasValidFormat[0] = 0;
        int v18 = CFPreferencesGetAppBooleanValue(@"universal-pARGB10101010-buffer-compression", @"com.apple.corevideo", keyExistsAndHasValidFormat);
        if (keyExistsAndHasValidFormat[0])
        {
          char v19 = v18;
          int v20 = "enable";
          if (!v18) {
            int v20 = "disable";
          }
          uint64_t v21 = "YES";
          if (!v18) {
            uint64_t v21 = "NO";
          }
          syslog(3, "CoreVideo: Will %s universal pARGB10101010 buffer compression -- thank you for setting \"defaults write com.apple.corevideo universal-pARGB10101010-buffer-compression -BOOL %s\"\n", v20, v21);
          areUniversalpARGB10101010FormatsSupported(void)::uint64_t result = v19;
        }
      }
      areUniversalpARGB10101010FormatsSupported(void)::didCheck = 1;
    }
  }
  int v630 = areUniversalpARGB10101010FormatsSupported(void)::result;
  int v22 = v6 ^ 1;
  if (v7) {
    int v22 = 1;
  }
  int v633 = v22;
  if (arePackedFormatsSupported(void)::didCheck == 1)
  {
    int v23 = arePackedFormatsSupported(void)::result;
  }
  else
  {
    if (isRunningInAppleVirtualMachine(void)::sCheckOnce != -1) {
      dispatch_once(&isRunningInAppleVirtualMachine(void)::sCheckOnce, &__block_literal_global_0);
    }
    int v23 = isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine == 0;
    arePackedFormatsSupported(void)::uint64_t result = isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine == 0;
    arePackedFormatsSupported(void)::didCheck = 1;
  }
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v25 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 400, 0, MEMORY[0x1E4F1D540]);
  long long v27 = CFArrayCreateMutable(v24, 400, MEMORY[0x1E4F1D510]);
  long long v28 = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], v25);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v29 = sGlobalVariantBitfield;
      goto LABEL_69;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v29 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_69:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent8(v29);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent8, "kCVPixelFormatType_OneComponent8", (void *)0x4C303038, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v31 = sGlobalVariantBitfield;
      goto LABEL_74;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v31 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_74:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent16(v31);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent16, "kCVPixelFormatType_OneComponent16", (void *)0x4C303136, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v33 = sGlobalVariantBitfield;
      goto LABEL_79;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v33 = sGlobalVariantBitfield | 2;
  sGlobalVariantBitfield |= 2u;
LABEL_79:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent16Half(v33);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent16Half, "kCVPixelFormatType_OneComponent16Half", (void *)0x4C303068, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_32ARGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_32ARGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_32ARGB, "kCVPixelFormatType_32ARGB", (void *)0x20, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_24RGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_24RGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_24RGB, "kCVPixelFormatType_24RGB", (void *)0x18, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16BE555 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16BE555(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16BE555, "kCVPixelFormatType_16BE555", (void *)0x10, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v38 = sGlobalVariantBitfield;
      goto LABEL_84;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v38 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_84:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16LE565 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16LE565(v38);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16LE565, "kCVPixelFormatType_16LE565", (void *)0x4C353635, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16LE5551 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16LE5551(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16LE5551, "kCVPixelFormatType_16LE5551", (void *)0x35353531, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16LE555 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16LE555(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16LE555, "kCVPixelFormatType_16LE555", (void *)0x4C353535, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v42 = sGlobalVariantBitfield;
      goto LABEL_89;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v42 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_89:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8(v42);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8, "kCVPixelFormatType_422YpCbCr8", (void *)0x32767579, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf, "kCVPixelFormatType_422YpCbCr8FullRange_2vuf", (void *)0x32767566, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v45 = sGlobalVariantBitfield;
      goto LABEL_94;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v45 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_94:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs(v45);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs, "kCVPixelFormatType_422YpCbCr8_yuvs", (void *)0x79757673, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8FullRange, "kCVPixelFormatType_422YpCbCr8FullRange", (void *)0x79757666, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero, "kCVPixelFormatType_8IndexedGray_WhiteIsZero", (void *)0x28, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent10 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent10(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent10, "kCVPixelFormatType_OneComponent10", (void *)0x4C303130, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent12 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent12(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent12, "kCVPixelFormatType_OneComponent12", (void *)0x4C303132, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent12LSB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent12LSB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent12LSB, "kCVPixelFormatType_OneComponent12LSB", (void *)0x4C31324C, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v52 = sGlobalVariantBitfield;
      goto LABEL_99;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v52 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_99:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent8(v52);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent8, "kCVPixelFormatType_TwoComponent8", (void *)0x32433038, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v54 = sGlobalVariantBitfield;
      goto LABEL_104;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v54 = sGlobalVariantBitfield | 1;
  sGlobalVariantBitfield |= 1u;
LABEL_104:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_TwoComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent16(v54);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent16, "kCVPixelFormatType_TwoComponent16", (void *)0x32433136, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  PixelFormat_kCVPixelFormatType_LuminanceAlpha8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_LuminanceAlpha8, "kCVPixelFormatType_LuminanceAlpha8", (void *)0x4C413038, Mutable, v27);
  PixelFormat_kCVPixelFormatType_LuminanceAlpha16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha16(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_LuminanceAlpha16, "kCVPixelFormatType_LuminanceAlpha16", (void *)0x4C413136, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_FiveComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FiveComponent16(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FiveComponent16, "kCVPixelFormatType_FiveComponent16", (void *)0x35433136, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_4444YpCbCrA8R = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8R(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444YpCbCrA8R, "kCVPixelFormatType_4444YpCbCrA8R", (void *)0x72343038, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_4444YpCbCrA8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444YpCbCrA8, "kCVPixelFormatType_4444YpCbCrA8", (void *)0x76343038, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_4444AYpCbCr8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444AYpCbCr8, "kCVPixelFormatType_4444AYpCbCr8", (void *)0x79343038, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((shouldSupporty416ForCoreAnimation(void)::sDidCheck & 1) == 0)
  {
    keyExistsAndHasValidFormat[0] = 0;
    int v62 = CFPreferencesGetAppBooleanValue(@"support_ca_y416", @"com.apple.corevideo", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
    {
      shouldSupporty416ForCoreAnimation(void)::sShouldSupport16Bit = v62;
      BOOL v63 = "enable";
      if (!v62) {
        BOOL v63 = "disable";
      }
      size_t v64 = "yes";
      if (!v62) {
        size_t v64 = "no";
      }
      syslog(3, "CoreVideo: Will %s (y416) YCbCr 16 bit support for CoreAnimation -- thank you for setting \"defaults write com.apple.corevideo support_ca_y416 -BOOL %s\"\n", v63, v64);
    }
    shouldSupporty416ForCoreAnimation(void)::sDidCheck = 1;
  }
  int v65 = sGlobalVariantBitfield;
  if (shouldSupporty416ForCoreAnimation(void)::sShouldSupport16Bit)
  {
    int v65 = sGlobalVariantBitfield | 1;
    sGlobalVariantBitfield |= 1u;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_4444AYpCbCr16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr16(v65);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444AYpCbCr16, "kCVPixelFormatType_4444AYpCbCr16", (void *)0x79343136, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v67 = sGlobalVariantBitfield;
      goto LABEL_119;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v67 = sGlobalVariantBitfield | 1;
LABEL_119:
  sGlobalVariantBitfield = v67 | 0x10;
  int v68 = areHTPCFormatsSupportedByCA();
  int v69 = sGlobalVariantBitfield;
  if (v68)
  {
    int v69 = sGlobalVariantBitfield | 0x20;
    sGlobalVariantBitfield |= 0x20u;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_32BGRA(v69);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_32BGRA, "kCVPixelFormatType_32BGRA", (void *)0x42475241, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_64ARGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64ARGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64ARGB, "kCVPixelFormatType_64ARGB", (void *)0x62363461, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_48RGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_48RGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_48RGB, "kCVPixelFormatType_48RGB", (void *)0x62343872, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_32AlphaGray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_32AlphaGray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_32AlphaGray, "kCVPixelFormatType_32AlphaGray", (void *)0x62333261, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16Gray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16Gray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16Gray, "kCVPixelFormatType_16Gray", (void *)0x62313667, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_30RGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGB, "kCVPixelFormatType_30RGB", (void *)0x5231306B, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_30RGBPad2Most = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBPad2Most(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBPad2Most, "kCVPixelFormatType_30RGBPad2Most", (void *)0x72323130, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8, "kCVPixelFormatType_444YpCbCr8", (void *)0x76333038, Mutable, v27);
  if ((shouldSupportv216ForCoreAnimation(void)::sDidCheck & 1) == 0)
  {
    keyExistsAndHasValidFormat[0] = 0;
    int v78 = CFPreferencesGetAppBooleanValue(@"support_ca_v216", @"com.apple.corevideo", keyExistsAndHasValidFormat);
    if (keyExistsAndHasValidFormat[0])
    {
      shouldSupportv216ForCoreAnimation(void)::sShouldSupport16Bit = v78;
      long long v79 = "enable";
      if (!v78) {
        long long v79 = "disable";
      }
      long long v80 = "yes";
      if (!v78) {
        long long v80 = "no";
      }
      syslog(3, "CoreVideo: Will %s (v216) YCbCr 16 bit 4:2:2 support for CoreAnimation -- thank you for setting \"defaults write com.apple.corevideo support_ca_v216 -BOOL %s\"\n", v79, v80);
    }
    shouldSupportv216ForCoreAnimation(void)::sDidCheck = 1;
  }
  int v81 = sGlobalVariantBitfield;
  CFDictionaryRef theDict = v28;
  if (shouldSupportv216ForCoreAnimation(void)::sShouldSupport16Bit)
  {
    int v81 = sGlobalVariantBitfield | 1;
    sGlobalVariantBitfield |= 1u;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16(v81);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16, "kCVPixelFormatType_422YpCbCr16", (void *)0x76323136, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10, "kCVPixelFormatType_422YpCbCr10", (void *)0x76323130, Mutable, v27);
  CFDictionaryRemoveAllValues(v28);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10, "kCVPixelFormatType_444YpCbCr10", (void *)0x76343130, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_4444AYpCbCrFloat = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_4444AYpCbCrFloat(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_4444AYpCbCrFloat, "kCVPixelFormatType_4444AYpCbCrFloat", (void *)0x7234666C, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_14Bayer_GRBG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_GRBG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_GRBG, "kCVPixelFormatType_14Bayer_GRBG", (void *)0x67726234, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_14Bayer_RGGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_RGGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_RGGB, "kCVPixelFormatType_14Bayer_RGGB", (void *)0x72676734, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_14Bayer_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_BGGR, "kCVPixelFormatType_14Bayer_BGGR", (void *)0x62676734, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_14Bayer_GBRG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_14Bayer_GBRG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_14Bayer_GBRG, "kCVPixelFormatType_14Bayer_GBRG", (void *)0x67627234, Mutable, v27);
  BOOL v90 = CFPreferencesGetAppBooleanValue(@"disable_420", @"com.apple.corevideo", 0) == 0;
  int v91 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(0, v90);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange(v91);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange", (void *)0x34323076, Mutable, v27);
  int v93 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(0, v90);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange(v93);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr8BiPlanarFullRange", (void *)0x34323066, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if (doesThisDeviceSupportOpenGLES(void)::supportOpenGLES) {
      int v95 = 0x80000;
    }
    else {
      int v95 = 0;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    int v95 = 0x80000;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange(v95);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange", (void *)0x34313176, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if (doesThisDeviceSupportOpenGLES(void)::supportOpenGLES) {
      int v97 = 0x80000;
    }
    else {
      int v97 = 0;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    int v97 = 0x80000;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange(v97);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_411YpCbCr8BiPlanarFullRange", (void *)0x34313166, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if (doesThisDeviceSupportOpenGLES(void)::supportOpenGLES) {
      int v99 = 0x80000;
    }
    else {
      int v99 = 0;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    int v99 = 0x80000;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange(v99);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange", (void *)0x34323276, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if (doesThisDeviceSupportOpenGLES(void)::supportOpenGLES) {
      int v101 = 0x80000;
    }
    else {
      int v101 = 0;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    int v101 = 0x80000;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange(v101);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr8BiPlanarFullRange", (void *)0x34323266, Mutable, v27);
  int v103 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(2, 1);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange(v103);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange", (void *)0x34343476, Mutable, v27);
  int v105 = calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice(2, 1);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange(v105);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr8BiPlanarFullRange", (void *)0x34343466, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v107 = 196608;
  }
  else {
    int v107 = 0x10000;
  }
  int v108 = v107 | 0x80000;
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0) {
      int v108 = v107;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar(v108);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar", (void *)0x76306138, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr8Planar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8Planar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8Planar, "kCVPixelFormatType_420YpCbCr8Planar", (void *)0x79343230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange, "kCVPixelFormatType_420YpCbCr8PlanarFullRange", (void *)0x66343230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar, "kCVPixelFormatType_422YpCbCr_4A_8BiPlanar", (void *)0x61327679, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v113 = sGlobalVariantBitfield;
      goto LABEL_163;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v113 = sGlobalVariantBitfield | 2;
LABEL_163:
  sGlobalVariantBitfield = v113 | 4;
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent32Float = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent32Float(v113 | 4u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent32Float, "kCVPixelFormatType_OneComponent32Float", (void *)0x4C303066, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v115 = sGlobalVariantBitfield;
      goto LABEL_168;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v115 = sGlobalVariantBitfield | 2;
  sGlobalVariantBitfield |= 2u;
LABEL_168:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent16Half(v115);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent16Half, "kCVPixelFormatType_TwoComponent16Half", (void *)0x32433068, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v117 = sGlobalVariantBitfield;
      goto LABEL_173;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v117 = sGlobalVariantBitfield | 2;
  sGlobalVariantBitfield |= 2u;
LABEL_173:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_TwoComponent32Float = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponent32Float(v117);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponent32Float, "kCVPixelFormatType_TwoComponent32Float", (void *)0x32433066, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar, "kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar", (void *)0x32314368, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v120 = sGlobalVariantBitfield;
      goto LABEL_178;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v120 = sGlobalVariantBitfield | 8;
LABEL_178:
  sGlobalVariantBitfield = v120 | 0x10;
  int v121 = areHTPCFormatsSupportedByCA();
  int v122 = sGlobalVariantBitfield;
  if (v121)
  {
    int v122 = sGlobalVariantBitfield | 0x20;
    sGlobalVariantBitfield |= 0x20u;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64RGBAHalf(v122);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64RGBAHalf, "kCVPixelFormatType_64RGBAHalf", (void *)0x52476841, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  sGlobalVariantBitfield |= 1u;
  int v124 = areHTPCFormatsSupportedByCA();
  unsigned int v125 = sGlobalVariantBitfield;
  if (v124)
  {
    unsigned int v125 = sGlobalVariantBitfield | 2;
    sGlobalVariantBitfield |= 2u;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_RGBPlanarHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_RGBPlanarHalf(v125);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_RGBPlanarHalf, "kCVPixelFormatType_RGBPlanarHalf", (void *)0x72673368, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((doesThisDeviceSupportOpenGLES(void)::supportOpenGLES & 1) == 0)
    {
      int v127 = sGlobalVariantBitfield;
      goto LABEL_187;
    }
  }
  else
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v127 = sGlobalVariantBitfield | 8;
LABEL_187:
  sGlobalVariantBitfield = v127 | 0x20;
  CFDictionaryRef PixelFormat_kCVPixelFormatType_128RGBAFloat = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_128RGBAFloat(v127 | 0x20u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_128RGBAFloat, "kCVPixelFormatType_128RGBAFloat", (void *)0x52476641, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_RGBPlanarFloat = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_RGBPlanarFloat(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_RGBPlanarFloat, "kCVPixelFormatType_RGBPlanarFloat", (void *)0x72673366, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_ARGB2101010LEPacked = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_ARGB2101010LEPacked(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_ARGB2101010LEPacked, "kCVPixelFormatType_ARGB2101010LEPacked", (void *)0x6C313072, Mutable, v27);
  if (isCoreAnimation_10BitRGBCapable(void)::didCheck == 1)
  {
    int v131 = isCoreAnimation_10BitRGBCapable(void)::result;
  }
  else
  {
    int v131 = MGGetBoolAnswer();
    isCoreAnimation_10BitRGBCapable(void)::uint64_t result = v131;
    isCoreAnimation_10BitRGBCapable(void)::didCheck = 1;
  }
  int v132 = sGlobalVariantBitfield;
  if (v131)
  {
    sGlobalVariantBitfield |= 4u;
    int v133 = areHTPCFormatsSupportedByCA();
    int v132 = sGlobalVariantBitfield;
    if (v133)
    {
      int v132 = sGlobalVariantBitfield | 8;
      sGlobalVariantBitfield |= 8u;
    }
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut(v132);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut, "kCVPixelFormatType_30RGBLEPackedWideGamut", (void *)0x77333072, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    int v135 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    int v135 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v135;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  unsigned int v136 = sGlobalVariantBitfield;
  if (v135)
  {
    sGlobalVariantBitfield |= 1u;
    int v137 = areHTPCFormatsSupportedByCA();
    unsigned int v136 = sGlobalVariantBitfield;
    if (v137)
    {
      unsigned int v136 = sGlobalVariantBitfield | 2;
      sGlobalVariantBitfield |= 2u;
    }
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_40ARGBLEWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamut(v136);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_40ARGBLEWideGamut, "kCVPixelFormatType_40ARGBLEWideGamut", (void *)0x77343061, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied, "kCVPixelFormatType_40ARGBLEWideGamutPremultiplied", (void *)0x7734306D, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  if ((doesThisDeviceSupportOpenGLES(void)::didCheck & 1) == 0)
  {
    doesThisDeviceSupportOpenGLES(void)::supportOpenGLES = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    goto LABEL_203;
  }
  if (doesThisDeviceSupportOpenGLES(void)::supportOpenGLES == 1) {
LABEL_203:
  }
    sGlobalVariantBitfield |= 4u;
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    int v140 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    int v140 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v140;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  int v141 = sGlobalVariantBitfield;
  if (v140)
  {
    sGlobalVariantBitfield |= 8u;
    int v142 = areHTPCFormatsSupportedByCA();
    int v141 = sGlobalVariantBitfield;
    if (v142)
    {
      int v141 = sGlobalVariantBitfield | 0x10;
      sGlobalVariantBitfield |= 0x10u;
    }
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange(v141);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange", (void *)0x78343230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr10BiPlanarFullRange", (void *)0x78663230, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    int v145 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    int v145 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v145;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  unsigned int v146 = sGlobalVariantBitfield;
  if (v145)
  {
    sGlobalVariantBitfield |= 1u;
    int v147 = areHTPCFormatsSupportedByCA();
    unsigned int v146 = sGlobalVariantBitfield;
    if (v147)
    {
      unsigned int v146 = sGlobalVariantBitfield | 2;
      sGlobalVariantBitfield |= 2u;
    }
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange(v146);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange", (void *)0x78343232, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange", (void *)0x78343434, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut, "kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut", (void *)0x78773230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut, "kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut", (void *)0x78773232, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut, "kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut", (void *)0x78773434, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr10BiPlanarFullRange", (void *)0x78663232, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr10BiPlanarFullRange", (void *)0x78663434, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    int v155 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    int v155 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v155;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  unsigned int v156 = sGlobalVariantBitfield;
  if (v155)
  {
    sGlobalVariantBitfield |= 2u;
    int v157 = areHTPCFormatsSupportedByCA();
    unsigned int v156 = sGlobalVariantBitfield;
    if (v157)
    {
      unsigned int v156 = sGlobalVariantBitfield | 4;
      sGlobalVariantBitfield |= 4u;
    }
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange(v156);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange, "kCVPixelFormatType_444YpCbCr10PackedVideoRange", (void *)0x78343470, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange, "kCVPixelFormatType_444YpCbCr10PackedFullRange", (void *)0x78663470, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    int v160 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    int v160 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v160;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  char v161 = &kCVObjectID;
  unsigned int v162 = sGlobalVariantBitfield;
  if (v160)
  {
    sGlobalVariantBitfield |= 2u;
    int v163 = areHTPCFormatsSupportedByCA();
    unsigned int v162 = sGlobalVariantBitfield;
    if (v163)
    {
      unsigned int v162 = sGlobalVariantBitfield | 4;
      sGlobalVariantBitfield |= 4u;
    }
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut(v162);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut, "kCVPixelFormatType_444YpCbCr10PackedWideGamut", (void *)0x78773470, Mutable, v27);
  char v165 = theDict;
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange, "kCVPixelFormatType_422YpCbCr10PackedVideoRange", (void *)0x78323270, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange, "kCVPixelFormatType_422YpCbCr10PackedFullRange", (void *)0x78663270, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    int v168 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    int v168 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v168;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  if (v168)
  {
    sGlobalVariantBitfield |= 1u;
    if (areHTPCFormatsSupportedByCA()) {
      sGlobalVariantBitfield |= 2u;
    }
  }
  if (v23)
  {
    CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x70343230, Mutable, v27);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x70343232, Mutable, v27);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange", (void *)0x70343434, Mutable, v27);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange", (void *)0x70663230, Mutable, v27);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange", (void *)0x70663232, Mutable, v27);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange", (void *)0x70663434, Mutable, v27);
    cleanupContentsOfArrayOfVariants();
    CFDictionaryRef PixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange, "kCVPixelFormatType_400YpCbCr10PackedVideoRange", (void *)0x70343030, Mutable, v27);
  }
  else
  {
    cleanupContentsOfArrayOfVariants();
  }
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    if (!isCoreAnimation_10BitYCbCrCapable(void)::result) {
      goto LABEL_243;
    }
  }
  else
  {
    int v176 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v176;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
    if (!v176) {
      goto LABEL_243;
    }
  }
  sGlobalVariantBitfield |= 1u;
  if (areHTPCFormatsSupportedByCA()) {
    sGlobalVariantBitfield |= 2u;
  }
LABEL_243:
  if (v23)
  {
    CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange", (void *)0x70773230, Mutable, v27);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange", (void *)0x70773232, Mutable, v27);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange(sGlobalVariantBitfield);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange", (void *)0x70773434, Mutable, v27);
  }
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (isCoreAnimation_10BitYCbCrCapable(void)::didCheck == 1)
  {
    int v180 = isCoreAnimation_10BitYCbCrCapable(void)::result;
  }
  else
  {
    int v180 = MGGetBoolAnswer();
    isCoreAnimation_10BitYCbCrCapable(void)::uint64_t result = v180;
    isCoreAnimation_10BitYCbCrCapable(void)::didCheck = 1;
  }
  unsigned int v181 = sGlobalVariantBitfield;
  if (v180)
  {
    sGlobalVariantBitfield |= 1u;
    int v182 = areHTPCFormatsSupportedByCA();
    unsigned int v181 = sGlobalVariantBitfield;
    if (v182)
    {
      unsigned int v181 = sGlobalVariantBitfield | 2;
      sGlobalVariantBitfield |= 2u;
    }
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar(v181);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar, "kCVPixelFormatType_30RGBLE_8A_BiPlanar", (void *)0x62336138, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  CFDictionaryRef PixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR, "kCVPixelFormatType_160BayerPacked10_BGGR", (void *)0x62677030, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG, "kCVPixelFormatType_160BayerPacked10_GRBG", (void *)0x67727030, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB, "kCVPixelFormatType_160BayerPacked10_RGGB", (void *)0x72677030, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG, "kCVPixelFormatType_160BayerPacked10_GBRG", (void *)0x67627030, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR, "kCVPixelFormatType_96BayerPacked12_BGGR", (void *)0x62677032, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR, "kCVPixelFormatType_224BayerPacked14_BGGR", (void *)0x62677034, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR, "kCVPixelFormatType_12BayerCompandedIn8_BGGR", (void *)0x62676338, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG, "kCVPixelFormatType_12BayerCompandedIn8_GRBG", (void *)0x67726338, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB, "kCVPixelFormatType_12BayerCompandedIn8_RGGB", (void *)0x72676338, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG, "kCVPixelFormatType_12BayerCompandedIn8_GBRG", (void *)0x67626338, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_SpecialPassthrough1 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough1(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_SpecialPassthrough1, "kCVPixelFormatType_SpecialPassthrough1", (void *)0x3D3D3D31, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_SpecialPassthrough2 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough2(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_SpecialPassthrough2, "kCVPixelFormatType_SpecialPassthrough2", (void *)0x3D3D3D32, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_SpecialPassthrough3 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough3(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_SpecialPassthrough3, "kCVPixelFormatType_SpecialPassthrough3", (void *)0x3D3D3D33, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_64RGBALE = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64RGBALE(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64RGBALE, "kCVPixelFormatType_64RGBALE", (void *)0x6C363472, Mutable, v27);
  cleanupContentsOfArrayOfVariants();
  if ((isCoreAnimation_12BitYCbCrCapable(void)::didCheck & 1) == 0) {
    isCoreAnimation_12BitYCbCrCapable(void)::didCheck = 1;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange", (void *)0x74763230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange", (void *)0x74763232, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange", (void *)0x74763434, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr12BiPlanarFullRange", (void *)0x74663230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr12BiPlanarFullRange", (void *)0x74663232, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr12BiPlanarFullRange", (void *)0x74663434, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut, "kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut", (void *)0x74773230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut, "kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut", (void *)0x74773232, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut, "kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut", (void *)0x74773434, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if ((isCoreAnimation_12BitYCbCrCapable(void)::didCheck & 1) == 0) {
    isCoreAnimation_12BitYCbCrCapable(void)::didCheck = 1;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange", (void *)0x70747630, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange", (void *)0x70747632, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange", (void *)0x70747634, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange", (void *)0x70746630, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange", (void *)0x70746632, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange", (void *)0x70746634, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut, "kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut", (void *)0x70747730, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut, "kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut", (void *)0x70747732, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut, "kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut", (void *)0x70747734, Mutable, v27);
  CFDictionaryRemoveAllValues(theDict);
  cleanupContentsOfArrayOfVariants();
  if (v7) {
    int v216 = 1;
  }
  else {
    int v216 = v629;
  }
  if (v216 == 1)
  {
    int v217 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatLumaOnlyCompressed, 1);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR(v217);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR, "kCVPixelFormatType_HTPC128x1_14Bayer_BGGR", (void *)0x7B626734, Mutable, v27);
  }
  if (v629)
  {
    int v219 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange(v219);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange", (void *)0x7D387630, Mutable, v27);
    int v221 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange(v221);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange", (void *)0x7D386630, Mutable, v27);
    int v223 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange(v223);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange", (void *)0x7D387632, Mutable, v27);
    int v225 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange(v225);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange", (void *)0x7D386632, Mutable, v27);
    int v227 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange(v227);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange", (void *)0x7D787630, Mutable, v27);
    int v229 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange(v229);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange", (void *)0x7D786630, Mutable, v27);
    int v231 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange(v231);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange, "kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange", (void *)0x7D787730, Mutable, v27);
    int v233 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange(v233);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange", (void *)0x7D787632, Mutable, v27);
    int v235 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange(v235);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange", (void *)0x7D786632, Mutable, v27);
    int v237 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange(v237);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange, "kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange", (void *)0x7D787732, Mutable, v27);
    int v239 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange(v239);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange", (void *)0x7D787634, Mutable, v27);
    int v241 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange(v241);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange", (void *)0x7D786634, Mutable, v27);
    int v243 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange(v243);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange, "kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange", (void *)0x7D787734, Mutable, v27);
    int v245 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange(v245);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange", (void *)0x5D387630, Mutable, v27);
    int v247 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange(v247);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange", (void *)0x5D387632, Mutable, v27);
    int v249 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange(v249);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange", (void *)0x5D387634, Mutable, v27);
    int v251 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange(v251);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange", (void *)0x5D386630, Mutable, v27);
    int v253 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange(v253);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange", (void *)0x5D386632, Mutable, v27);
    int v255 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange(v255);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange", (void *)0x5D386634, Mutable, v27);
    int v257 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange(v257);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange", (void *)0x5D787630, Mutable, v27);
    int v259 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange(v259);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange", (void *)0x5D787632, Mutable, v27);
    int v261 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange(v261);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange", (void *)0x5D787634, Mutable, v27);
    int v263 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange(v263);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange", (void *)0x5D786630, Mutable, v27);
    int v265 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange(v265);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange", (void *)0x5D786632, Mutable, v27);
    char v165 = theDict;
    char v161 = &kCVObjectID;
    int v267 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaOnly, _pixelFormatDictionaryInit(void)::addressFormatAVEReference, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange(v267);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange", (void *)0x5D786634, Mutable, v27);
    int v269 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange(v269);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange", (void *)0x5B387630, Mutable, v27);
    int v271 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange(v271);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange", (void *)0x5B387632, Mutable, v27);
    int v273 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange(v273);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange", (void *)0x5B387634, Mutable, v27);
    int v275 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange(v275);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange", (void *)0x5B386630, Mutable, v27);
    int v277 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange(v277);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange", (void *)0x5B386632, Mutable, v27);
    int v279 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange(v279);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange", (void *)0x5B386634, Mutable, v27);
    int v281 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 18);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange(v281);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange", (void *)0x5B787630, Mutable, v27);
    int v283 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange(v283);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange", (void *)0x5B787632, Mutable, v27);
    int v285 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange(v285);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange", (void *)0x5B787634, Mutable, v27);
    int v287 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 18);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange(v287);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange", (void *)0x5B786630, Mutable, v27);
    int v289 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange(v289);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange", (void *)0x5B786632, Mutable, v27);
    int v291 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange(v291);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange", (void *)0x5B786634, Mutable, v27);
    int v293 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange(v293);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange", (void *)0x5B747630, Mutable, v27);
    int v295 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange(v295);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange", (void *)0x5B747632, Mutable, v27);
    int v297 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange(v297);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange", (void *)0x5B747634, Mutable, v27);
    int v299 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange(v299);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange", (void *)0x5B746630, Mutable, v27);
    int v301 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange(v301);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange", (void *)0x5B746632, Mutable, v27);
    int v303 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeCompressionLumaAndChroma, _pixelFormatDictionaryInit(void)::addressFormatLumaAndChroma, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange(v303);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange, "kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange", (void *)0x5B746634, Mutable, v27);
  }
  if (v633)
  {
    if (!v7) {
      goto LABEL_267;
    }
    int v305 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal(v305);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal, "kCVPixelFormatType_AGX_32BGRA", (void *)0x26424741, Mutable, v27);
    int v307 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal(v307);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal, "kCVPixelFormatType_AGX_30RGBLEPackedWideGamut", (void *)0x26773372, Mutable, v27);
    int v309 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal(v309);
  }
  else
  {
    int v311 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 1);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_16LE565 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_16LE565(v311);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_16LE565, "kCVPixelFormatType_AGX_16LE565", (void *)0x264C3536, Mutable, v27);
    int v313 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX(v313);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX, "kCVPixelFormatType_AGX_32BGRA", (void *)0x26424741, Mutable, v27);
    int v315 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX(v315);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX, "kCVPixelFormatType_AGX_30RGBLEPackedWideGamut", (void *)0x26773372, Mutable, v27);
    int v317 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_AGX(v317);
  }
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal, "kCVPixelFormatType_AGX_40ARGBLEWideGamut", (void *)0x26773461, Mutable, v27);
LABEL_267:
  if (v630)
  {
    int v318 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange(v318);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange, "kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange", (void *)0x266C3461, Mutable, v27);
  }
  if (v633)
  {
    if (!v7) {
      goto LABEL_274;
    }
    int v320 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal(v320);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal, "kCVPixelFormatType_AGX_OneComponent8", (void *)0x264C3038, Mutable, v27);
    int v322 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal(v322);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal, "kCVPixelFormatType_AGX_OneComponent10", (void *)0x264C3130, Mutable, v27);
    int v324 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal(v324);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal, "kCVPixelFormatType_AGX_64RGBAHalf", (void *)0x26526841, Mutable, v27);
    int v326 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal(v326);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange", (void *)0x26387630, Mutable, v27);
    int v328 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal(v328);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange", (void *)0x26387632, Mutable, v27);
    int v330 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal(v330);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal, "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange", (void *)0x26387634, Mutable, v27);
    int v332 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal(v332);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange", (void *)0x26386630, Mutable, v27);
    int v334 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal(v334);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange", (void *)0x26386632, Mutable, v27);
    int v336 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal(v336);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal, "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange", (void *)0x26386634, Mutable, v27);
    int v338 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange(v338);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x26787630, Mutable, v27);
    int v340 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange(v340);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x26787632, Mutable, v27);
    int v342 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange(v342);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange", (void *)0x26787634, Mutable, v27);
    int v344 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange(v344);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange", (void *)0x26786630, Mutable, v27);
    int v346 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange(v346);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange", (void *)0x26786632, Mutable, v27);
    int v348 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange(v348);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange", (void *)0x26786634, Mutable, v27);
    int v350 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange(v350);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange", (void *)0x26787730, Mutable, v27);
    int v352 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange(v352);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange", (void *)0x26787732, Mutable, v27);
    int v354 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange(v354);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange", (void *)0x26787734, Mutable, v27);
    int v356 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange(v356);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange", (void *)0x26747630, Mutable, v27);
    int v358 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange(v358);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange", (void *)0x26747632, Mutable, v27);
    int v360 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange(v360);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange, "kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange", (void *)0x26747634, Mutable, v27);
    int v362 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange(v362);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange", (void *)0x26746630, Mutable, v27);
    int v364 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange(v364);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange", (void *)0x26746632, Mutable, v27);
    int v366 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange(v366);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange, "kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange", (void *)0x26746634, Mutable, v27);
    int v368 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange(v368);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange", (void *)0x26736630, Mutable, v27);
    int v370 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange(v370);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange", (void *)0x26736632, Mutable, v27);
    int v372 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange(v372);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange", (void *)0x26736634, Mutable, v27);
    int v374 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange(v374);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange", (void *)0x26737630, Mutable, v27);
    int v376 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange(v376);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange", (void *)0x26737632, Mutable, v27);
    int v378 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange(v378);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange", (void *)0x26737634, Mutable, v27);
    int v380 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange(v380);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange", (void *)0x26343470, Mutable, v27);
    int v382 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange(v382);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange, "kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange", (void *)0x26663470, Mutable, v27);
    int v384 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange(v384);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange, "kCVPixelFormatType_AGX_422YpCbCr8VideoRange", (void *)0x26797573, Mutable, v27);
    int v386 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange(v386);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange, "kCVPixelFormatType_AGX_422YpCbCr8FullRange", (void *)0x26797566, Mutable, v27);
    int v388 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_OneComponent16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16(v388);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent16, "kCVPixelFormatType_AGX_OneComponent16", (void *)0x264C3136, Mutable, v27);
    int v390 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16Half(v390);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent16Half, "kCVPixelFormatType_AGX_OneComponent16Half", (void *)0x264C3068, Mutable, v27);
    int v392 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half(v392);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half, "kCVPixelFormatType_AGX_TwoComponent16Half", (void *)0x26323068, Mutable, v27);
    int v394 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked(v394);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked, "kCVPixelFormatType_AGX_ARGB2101010LEPacked", (void *)0x266C3172, Mutable, v27);
    int v396 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar(v396);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar, "kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar", (void *)0x26623338, Mutable, v27);
    int v398 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar(v398);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar, "kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar", (void *)0x26663338, Mutable, v27);
    int v400 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_OneComponent12 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent12(v400);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent12, "kCVPixelFormatType_AGX_OneComponent12", (void *)0x264C3132, Mutable, v27);
    int v402 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent8(v402);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_TwoComponent8, "kCVPixelFormatType_AGX_TwoComponent8", (void *)0x26323038, Mutable, v27);
    int v404 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar(v404);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar", (void *)0x26763038, Mutable, v27);
    int v406 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar(v406);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar", (void *)0x26763238, Mutable, v27);
    int v408 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar(v408);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar", (void *)0x26763438, Mutable, v27);
    int v410 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar(v410);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar", (void *)0x26783473, Mutable, v27);
    int v412 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar(v412);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar", (void *)0x26743473, Mutable, v27);
    int v414 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar(v414);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar", (void *)0x26733473, Mutable, v27);
    int v416 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar(v416);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar", (void *)0x26783273, Mutable, v27);
    int v418 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar(v418);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar", (void *)0x26743273, Mutable, v27);
    int v420 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar(v420);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar", (void *)0x26733273, Mutable, v27);
    int v422 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar(v422);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar", (void *)0x26783038, Mutable, v27);
    int v424 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar(v424);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar", (void *)0x26783238, Mutable, v27);
    int v426 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(3, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 42);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar(v426);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar", (void *)0x26783438, Mutable, v27);
    int v428 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeUncompressed, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange(v428);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange", (void *)0x23387630, Mutable, v27);
    char v165 = theDict;
    int v430 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeUncompressed, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange(v430);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange", (void *)0x23386630, Mutable, v27);
    int v432 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange(v432);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange", (void *)0x26686630, Mutable, v27);
    int v434 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange(v434);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange", (void *)0x26686632, Mutable, v27);
    int v436 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange(v436);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange", (void *)0x26686634, Mutable, v27);
    int v438 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray(v438);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray", (void *)0x26623668, Mutable, v27);
    int v440 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8(v440);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8, "kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8", (void *)0x26746338, Mutable, v27);
    int v442 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchange, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8(v442);
    v444 = "kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8";
    uint64_t v445 = 645423928;
  }
  else
  {
    int v446 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX(v446);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX, "kCVPixelFormatType_AGX_OneComponent8", (void *)0x264C3038, Mutable, v27);
    int v448 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX(v448);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX, "kCVPixelFormatType_AGX_OneComponent10", (void *)0x264C3130, Mutable, v27);
    int v450 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX(v450);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX, "kCVPixelFormatType_AGX_64RGBAHalf", (void *)0x26526841, Mutable, v27);
    int v452 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX(v452);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange", (void *)0x26387630, Mutable, v27);
    int v454 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX(v454);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange", (void *)0x26387632, Mutable, v27);
    int v456 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX(v456);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX, "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange", (void *)0x26387634, Mutable, v27);
    int v458 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX(v458);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX, "kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange", (void *)0x26386630, Mutable, v27);
    int v460 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX(v460);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX, "kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange", (void *)0x26386632, Mutable, v27);
    int v462 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeAGX, _pixelFormatDictionaryInit(void)::addressFormatAGX, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_AGX(v462);
    uint64_t v445 = 641230388;
    v444 = "kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange";
  }
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8, v444, (void *)v445, Mutable, v27);
LABEL_274:
  if (v631)
  {
    int v463 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeMultiSlice, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half(v463);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half, "kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half", (void *)0x2A264C68, Mutable, v27);
    int v465 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeUncompressedMultiSlice, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half(v465);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half, "kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half", (void *)0x2A234C68, Mutable, v27);
  }
  if (v632)
  {
    int v467 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange(v467);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange", (void *)0x2D387630, Mutable, v27);
    int v469 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange(v469);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange", (void *)0x2D386630, Mutable, v27);
    int v471 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange(v471);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange", (void *)0x2D686630, Mutable, v27);
    int v473 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange(v473);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange", (void *)0x2F686630, Mutable, v27);
    int v475 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 2);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange(v475);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange", (void *)0x7C686630, Mutable, v27);
    int v477 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62_8bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange(v477);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange", (void *)0x2F387630, Mutable, v27);
    int v479 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62_8bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange(v479);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange", (void *)0x2F386630, Mutable, v27);
    int v481 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange(v481);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange, "kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange", (void *)0x7C387630, Mutable, v27);
    int v483 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange(v483);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange, "kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange", (void *)0x7C386630, Mutable, v27);
    int v485 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange(v485);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x2D787630, Mutable, v27);
    int v487 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange(v487);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange", (void *)0x2D786630, Mutable, v27);
    int v489 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange(v489);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x2F787630, Mutable, v27);
    int v491 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange(v491);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange", (void *)0x2F786630, Mutable, v27);
    int v493 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange(v493);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange", (void *)0x7C787630, Mutable, v27);
    int v495 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange(v495);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange", (void *)0x7C786630, Mutable, v27);
    int v497 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange(v497);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x2D787632, Mutable, v27);
    int v499 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange(v499);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange", (void *)0x2D786632, Mutable, v27);
    int v501 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange(v501);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x2F787632, Mutable, v27);
    int v503 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange(v503);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange", (void *)0x2F786632, Mutable, v27);
    int v505 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange(v505);
    char v165 = theDict;
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange, "kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange", (void *)0x7C787632, Mutable, v27);
    int v507 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(2, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50_10bit, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 34);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange(v507);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange, "kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange", (void *)0x7C786632, Mutable, v27);
    int v509 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_32BGRA(v509);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_32BGRA, "kCVPixelFormatType_Lossy75_32BGRA", (void *)0x2D424741, Mutable, v27);
    int v511 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_32BGRA(v511);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_32BGRA, "kCVPixelFormatType_Lossy62_32BGRA", (void *)0x2F424741, Mutable, v27);
    int v513 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_32BGRA = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_32BGRA(v513);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_32BGRA, "kCVPixelFormatType_Lossy50_32BGRA", (void *)0x7C424741, Mutable, v27);
    int v515 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half(v515);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half, "kCVPixelFormatType_Lossy75_OneComponent16Half", (void *)0x2D4C3068, Mutable, v27);
    int v517 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half(v517);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half, "kCVPixelFormatType_Lossy62_OneComponent16Half", (void *)0x2F4C3068, Mutable, v27);
    int v519 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half(v519);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half, "kCVPixelFormatType_Lossy50_OneComponent16Half", (void *)0x7C4C3068, Mutable, v27);
    int v521 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent8(v521);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_OneComponent8, "kCVPixelFormatType_Lossy75_OneComponent8", (void *)0x2D4C3038, Mutable, v27);
    int v523 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent8(v523);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_OneComponent8, "kCVPixelFormatType_Lossy62_OneComponent8", (void *)0x2F4C3038, Mutable, v27);
    int v525 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_OneComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent8(v525);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_OneComponent8, "kCVPixelFormatType_Lossy50_OneComponent8", (void *)0x7C4C3038, Mutable, v27);
    int v527 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8(v527);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8, "kCVPixelFormatType_Lossy75_TwoComponent8", (void *)0x2D323038, Mutable, v27);
    int v529 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8(v529);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8, "kCVPixelFormatType_Lossy50_TwoComponent8", (void *)0x7C323038, Mutable, v27);
    int v531 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half(v531);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half, "kCVPixelFormatType_Lossy75_TwoComponent16Half", (void *)0x2D323068, Mutable, v27);
    int v533 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half(v533);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half, "kCVPixelFormatType_Lossy62_TwoComponent16Half", (void *)0x2F323068, Mutable, v27);
    int v535 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 4);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half(v535);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half, "kCVPixelFormatType_Lossy50_TwoComponent16Half", (void *)0x7C323068, Mutable, v27);
    int v537 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf(v537);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf, "kCVPixelFormatType_Lossy75_64RGBAHalf", (void *)0x2D526841, Mutable, v27);
    int v539 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf(v539);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf, "kCVPixelFormatType_Lossy62_64RGBAHalf", (void *)0x2F526841, Mutable, v27);
    char v161 = &kCVObjectID;
    int v541 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 41);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf(v541);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf, "kCVPixelFormatType_Lossy50_64RGBAHalf", (void *)0x7C526841, Mutable, v27);
  }
  if (v7)
  {
    int v543 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy75, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray(v543);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray", (void *)0x2D623668, Mutable, v27);
    int v545 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy62, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray(v545);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray", (void *)0x2F623668, Mutable, v27);
    int v547 = calculatePixelFormatVariantBitfieldForCompressedTiledFormatOnThisDevice(1, (uint64_t)&_pixelFormatDictionaryInit(void)::planeInterchangeLossy50, _pixelFormatDictionaryInit(void)::addressFormatInterchange, 64);
    CFDictionaryRef PixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray(v547);
    registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray, "kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray", (void *)0x7C623668, Mutable, v27);
  }
  if (areHTPCFormatsSupportedByCA()) {
    int v549 = 983040;
  }
  else {
    int v549 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar(v549 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar", (void *)0x76326138, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v551 = 983040;
  }
  else {
    int v551 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar(v551 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar, "kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar", (void *)0x76346138, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange, "kCVPixelFormatType_444YpCbCr8PackedFullRange", (void *)0x66333038, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v554 = 983040;
  }
  else {
    int v554 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar(v554 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar, "kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar", (void *)0x78346173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v556 = 983040;
  }
  else {
    int v556 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar(v556 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar, "kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar", (void *)0x74346173, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_294;
    }
  }
  else
  {
    int v559 = areUniversalCompressionFormatsSupported();
    isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v559;
    isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
    if (v559)
    {
LABEL_294:
      if (areHTPCFormatsSupportedByCA()) {
        int v558 = 983040;
      }
      else {
        int v558 = 720896;
      }
      goto LABEL_299;
    }
  }
  int v558 = 196608;
LABEL_299:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar(sGlobalVariantBitfield | v558);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar", (void *)0x73346173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v561 = 983040;
  }
  else {
    int v561 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar(v561 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar, "kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar", (void *)0x78326173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v563 = 983040;
  }
  else {
    int v563 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar(v563 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar, "kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar", (void *)0x74326173, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_307;
    }
  }
  else
  {
    int v566 = areUniversalCompressionFormatsSupported();
    isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v566;
    isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
    if (v566)
    {
LABEL_307:
      if (areHTPCFormatsSupportedByCA()) {
        int v565 = 983040;
      }
      else {
        int v565 = 720896;
      }
      goto LABEL_312;
    }
  }
  int v565 = 196608;
LABEL_312:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar(sGlobalVariantBitfield | v565);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar, "kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar", (void *)0x73326173, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v568 = 983040;
  }
  else {
    int v568 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar(v568 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar", (void *)0x78306138, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v570 = 983040;
  }
  else {
    int v570 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar(v570 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar", (void *)0x78326138, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v572 = 983040;
  }
  else {
    int v572 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar(v572 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar, "kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar", (void *)0x78346138, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_323;
    }
LABEL_327:
    int v574 = 196608;
    goto LABEL_328;
  }
  int v575 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v575;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v575) {
    goto LABEL_327;
  }
LABEL_323:
  if (areHTPCFormatsSupportedByCA()) {
    int v574 = 983040;
  }
  else {
    int v574 = 720896;
  }
LABEL_328:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange(sGlobalVariantBitfield | v574);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange", (void *)0x73763230, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_330;
    }
LABEL_334:
    int v577 = 196608;
    goto LABEL_335;
  }
  int v578 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v578;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v578) {
    goto LABEL_334;
  }
LABEL_330:
  if (areHTPCFormatsSupportedByCA()) {
    int v577 = 983040;
  }
  else {
    int v577 = 720896;
  }
LABEL_335:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange(sGlobalVariantBitfield | v577);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange", (void *)0x73763232, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_337;
    }
LABEL_341:
    int v580 = 196608;
    goto LABEL_342;
  }
  int v581 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v581;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v581) {
    goto LABEL_341;
  }
LABEL_337:
  if (areHTPCFormatsSupportedByCA()) {
    int v580 = 983040;
  }
  else {
    int v580 = 720896;
  }
LABEL_342:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange(sGlobalVariantBitfield | v580);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange, "kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange", (void *)0x73763434, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_344;
    }
LABEL_348:
    int v583 = 196608;
    goto LABEL_349;
  }
  int v584 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v584;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v584) {
    goto LABEL_348;
  }
LABEL_344:
  if (areHTPCFormatsSupportedByCA()) {
    int v583 = 983040;
  }
  else {
    int v583 = 720896;
  }
LABEL_349:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange(sGlobalVariantBitfield | v583);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_420YpCbCr16BiPlanarFullRange", (void *)0x73663230, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_351;
    }
LABEL_355:
    int v586 = 196608;
    goto LABEL_356;
  }
  int v587 = areUniversalCompressionFormatsSupported();
  isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v587;
  isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
  if (!v587) {
    goto LABEL_355;
  }
LABEL_351:
  if (areHTPCFormatsSupportedByCA()) {
    int v586 = 983040;
  }
  else {
    int v586 = 720896;
  }
LABEL_356:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange(sGlobalVariantBitfield | v586);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_422YpCbCr16BiPlanarFullRange", (void *)0x73663232, Mutable, v27);
  if (isCoreAnimation_YCbCr16Capable(void)::didCheck == 1)
  {
    if (isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr) {
      goto LABEL_358;
    }
  }
  else
  {
    int v590 = areUniversalCompressionFormatsSupported();
    isCoreAnimation_YCbCr16Capable(void)::deviceSupports16bitYCbCr = v590;
    isCoreAnimation_YCbCr16Capable(void)::didCheck = 1;
    if (v590)
    {
LABEL_358:
      if (areHTPCFormatsSupportedByCA()) {
        int v589 = 983040;
      }
      else {
        int v589 = 720896;
      }
      goto LABEL_363;
    }
  }
  int v589 = 196608;
LABEL_363:
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange(sGlobalVariantBitfield | v589);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange, "kCVPixelFormatType_444YpCbCr16BiPlanarFullRange", (void *)0x73663434, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB, "kCVPixelFormatType_12RLSB_12G12BMSB", (void *)0x72746762, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16VersatileBayer = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16VersatileBayer(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16VersatileBayer, "kCVPixelFormatType_16VersatileBayer", (void *)0x62703136, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar, "kCVPixelFormatType_16VersatileBayerQuadPlanar", (void *)0x62313671, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW, "kCVPixelFormatType_64RGBA_DownscaledProResRAW", (void *)0x62703634, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer, "kCVPixelFormatType_30RGB_DownscaledBayer", (void *)0x62703330, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange", (void *)0x68663230, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange", (void *)0x68663232, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange, "kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange", (void *)0x68663434, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222, "kCVPixelFormatType_OneComponent10_Packed88882222", (void *)0x71387132, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB, "kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB", (void *)0x62753130, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222, "kCVPixelFormatType_VersatileSenselArrayPacked10_88882222", (void *)0x62713832, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray, "kCVPixelFormatType_16HalfVersatileSenselArray", (void *)0x62766568, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray, "kCVPixelFormatType_64HalfRegroupedSenselArray", (void *)0x62363468, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar, "kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar", (void *)0x62766871, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8, "kCVPixelFormatType_VersatileSenselArray12CompandedIn8", (void *)0x62766338, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8, "kCVPixelFormatType_VersatileSenselArray10CompandedIn8", (void *)0x62786338, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_48RGBLE = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_48RGBLE(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_48RGBLE, "kCVPixelFormatType_48RGBLE", (void *)0x6C343872, Mutable, v27);
  if (areHTPCFormatsSupportedByCA()) {
    int v609 = 983040;
  }
  else {
    int v609 = 720896;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar(v609 | sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar, "kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar", (void *)0x66336138, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_40ARGBLEFullRange = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_40ARGBLEFullRange(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_40ARGBLEFullRange, "kCVPixelFormatType_40ARGBLEFullRange", (void *)0x6C343061, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_OneComponent1 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_OneComponent1(sGlobalVariantBitfield | 0x30000u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_OneComponent1, "kCVPixelFormatType_OneComponent1", (void *)0x4C303031, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_1VersatileSensel = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_1VersatileSensel(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_1VersatileSensel, "kCVPixelFormatType_1VersatileSensel", (void *)0x62703031, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L, "kCVPixelFormatType_12RGBLEPacked_R12L", (void *)0x5231324C, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_12RGBPacked_R12B = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_12RGBPacked_R12B(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_12RGBPacked_R12B, "kCVPixelFormatType_12RGBPacked_R12B", (void *)0x52313242, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck == 1)
  {
    if (*((unsigned char *)v161 + 171)) {
      int v616 = 0x20000;
    }
    else {
      int v616 = 0;
    }
  }
  else
  {
    *((unsigned char *)v161 + 171) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    int v616 = 0x20000;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3(v616);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3, "kCVPixelFormatType_FixedPointUnsigned13_3", (void *)0x31332E33, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck == 1)
  {
    if (*((unsigned char *)v161 + 171)) {
      int v618 = 0x20000;
    }
    else {
      int v618 = 0;
    }
  }
  else
  {
    *((unsigned char *)v161 + 171) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    int v618 = 0x20000;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5(v618);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5, "kCVPixelFormatType_FixedPointUnsigned11_5", (void *)0x31312E35, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck == 1)
  {
    if (*((unsigned char *)v161 + 171)) {
      int v620 = 0x20000;
    }
    else {
      int v620 = 0;
    }
  }
  else
  {
    *((unsigned char *)v161 + 171) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
    int v620 = 0x20000;
  }
  CFDictionaryRef PixelFormat_kCVPixelFormatType_FixedPointSigned7_5 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_FixedPointSigned7_5(v620);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_FixedPointSigned7_5, "kCVPixelFormatType_FixedPointSigned7_5", (void *)0x73372E35, Mutable, v27);
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((*((unsigned char *)v161 + 171) & 1) == 0)
    {
      int v622 = sGlobalVariantBitfield;
      goto LABEL_386;
    }
  }
  else
  {
    *((unsigned char *)v161 + 171) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v622 = sGlobalVariantBitfield | 4;
LABEL_386:
  sGlobalVariantBitfield = v622 | 8;
  CFDictionaryRef PixelFormat_kCVPixelFormatType_DisparityFloat16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DisparityFloat16(v622 | 8u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DisparityFloat16, "kCVPixelFormatType_DisparityFloat16", (void *)0x68646973, Mutable, v27);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_DepthFloat16 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DepthFloat16(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DepthFloat16, "kCVPixelFormatType_DepthFloat16", (void *)0x68646570, Mutable, v27);
  CFDictionaryRemoveAllValues(v165);
  cleanupContentsOfArrayOfVariants();
  if (doesThisDeviceSupportOpenGLES(void)::didCheck)
  {
    if ((*((unsigned char *)v161 + 171) & 1) == 0)
    {
      int v625 = sGlobalVariantBitfield;
      goto LABEL_391;
    }
  }
  else
  {
    *((unsigned char *)v161 + 171) = 1;
    doesThisDeviceSupportOpenGLES(void)::didCheck = 1;
  }
  int v625 = sGlobalVariantBitfield | 4;
LABEL_391:
  sGlobalVariantBitfield = v625 | 8;
  CFDictionaryRef PixelFormat_kCVPixelFormatType_DisparityFloat32 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DisparityFloat32(v625 | 8u);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DisparityFloat32, "kCVPixelFormatType_DisparityFloat32", (void *)0x66646973, Mutable, v27);
  *(_DWORD *)Boolean keyExistsAndHasValidFormat = 1717855600;
  CFNumberRef v627 = CFNumberCreate(v24, kCFNumberSInt32Type, keyExistsAndHasValidFormat);
  CFDictionarySetValue(v165, @"PixelFormat", v627);
  CFRelease(v627);
  CFDictionaryRef PixelFormat_kCVPixelFormatType_DepthFloat32 = (const __CFDictionary *)retrievePixelFormat_kCVPixelFormatType_DepthFloat32(sGlobalVariantBitfield);
  registerConstantClassesPixelFormat(PixelFormat_kCVPixelFormatType_DepthFloat32, "kCVPixelFormatType_DepthFloat32", (void *)0x66646570, Mutable, v27);
  CFRelease(v165);
  CFRelease((CFTypeRef)sGlobalArrayOfVariants);
  sGlobalArrayOfVariants = 0;
  _pixelFormatDictionary = (uint64_t)Mutable;
  _pixelFormatTypes = (uint64_t)v27;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)Boolean keyExistsAndHasValidFormat = 136315138;
    v636 = "Pixel format registry initialized. Constant classes enabled.";
    _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", keyExistsAndHasValidFormat, 0xCu);
  }
}

void registerDescriptionWithPixelFormatTypeInPixelFormatDictionaryAndArray(const __CFDictionary *a1, void *key, CFDictionaryRef theDict, __CFArray *a4)
{
  unsigned int v6 = key;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int valuePtr = (int)key;
  unint64_t v8 = key;
  if (CFDictionaryGetValue(theDict, (const void *)key))
  {
    if (v6 < 0x65) {
      snprintf(__str, 0x80uLL, "Warning: Re-registering an existing pixelformat %d.");
    }
    else {
      snprintf(__str, 0x80uLL, "Warning: Re-registering an existing pixelformat %c%c%c%c.");
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      CFDictionaryRef v15 = __str;
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
  }
  else
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1);
    if (Copy)
    {
      CFDictionaryRef v11 = Copy;
      CFDictionarySetValue(theDict, (const void *)v8, Copy);
      CFNumberRef v12 = CFNumberCreate(v9, kCFNumberSInt32Type, &valuePtr);
      v18.length = CFArrayGetCount(a4);
      v18.location = 0;
      if (!CFArrayContainsValue(a4, v18, v12)) {
        CFArrayAppendValue(a4, v12);
      }
      if (v12) {
        CFRelease(v12);
      }
      CFRelease(v11);
    }
  }
}

void registerConstantClassesPixelFormat(const __CFDictionary *a1, const char *a2, void *key, CFDictionaryRef theDict, __CFArray *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    registerDescriptionWithPixelFormatTypeInPixelFormatDictionaryAndArray(a1, key, theDict, a5);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    *(_OWORD *)__str = 0u;
    long long v8 = 0u;
    snprintf(__str, 0x100uLL, "Warning: Could not initialize pixel format: %s", a2);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      unsigned int v6 = __str;
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
  }
}

void cleanupContentsOfArrayOfVariants(void)
{
  CFArrayRef Mutable = (const __CFArray *)sGlobalArrayOfVariants;
  if (!sGlobalArrayOfVariants)
  {
    CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    sGlobalArrayOfVariants = (uint64_t)Mutable;
  }
  v1.length = CFArrayGetCount(Mutable);
  v1.location = 0;
  CFArrayApplyFunction(Mutable, v1, (CFArrayApplierFunction)cleanupContentsOfArrayOfVariantsApplierFunction, 0);
  sGlobalVariantBitfield = 0;
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponentHalfAndOneComponentHalfBiPlanar(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1BC08;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent8(int a1)
{
  CFRange v1 = &unk_1EFA1AC18;
  if (a1) {
    CFRange v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1ABF0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent32Float(int a1)
{
  CFRange v1 = &unk_1EFA1BBE0;
  if (a1) {
    CFRange v1 = 0;
  }
  if (a1 == 2) {
    return &unk_1EFA1BBB8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent16Half(int a1)
{
  CFRange v1 = &unk_1EFA1BB90;
  if (a1) {
    CFRange v1 = 0;
  }
  if (a1 == 2) {
    return &unk_1EFA1BB68;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_TwoComponent16(int a1)
{
  CFRange v1 = &unk_1EFA1AC68;
  if (a1) {
    CFRange v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1AC40;
  }
  else {
    return v1;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_RGBPlanarHalf(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3968[a1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_RGBPlanarFloat(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1BE38;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent8(int a1)
{
  CFRange v1 = &unk_1EFA1A808;
  if (a1) {
    CFRange v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1A7E0;
  }
  else {
    return v1;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_OneComponent32Float(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return qword_1E5BD38F0[a1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent16Half(int a1)
{
  CFRange v1 = &unk_1EFA1A8A8;
  if (a1) {
    CFRange v1 = 0;
  }
  if (a1 == 2) {
    return &unk_1EFA1A880;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent16(int a1)
{
  CFRange v1 = &unk_1EFA1A858;
  if (a1) {
    CFRange v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1A830;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent12LSB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1ABC8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent12(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1ABA0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent10(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AB78;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha8(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AC90;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_LuminanceAlpha16(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1ACB8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_FiveComponent16(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1ACE0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_ARGB2101010LEPacked(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1BE60;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_8IndexedGray_WhiteIsZero(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AB50;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_64RGBAHalf(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 3;
  if (v1 > 7) {
    return 0;
  }
  else {
    return qword_1E5BD3928[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_64ARGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AEC0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_48RGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AEE8;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarVideoRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD3790[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr8BiPlanarFullRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD3810[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCr8(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AFB0;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedWideGamut(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return qword_1E5BD3BA8[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedVideoRange(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return qword_1E5BD3B38[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedFullRange(unsigned int a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return qword_1E5BD3B70[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarWideRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3CE0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3C20[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3C80[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3AD8[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3A78[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3B18[a1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCr10(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1B050;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8R(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AD08;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_4444YpCbCrA8(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AD30;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_4444AYpCbCrFloat(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1B078;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr8(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AD58;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_4444AYpCbCr16(int a1)
{
  unsigned int v1 = &unk_1EFA1ADA8;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1AD80;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr_4A_8BiPlanar(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1BAA0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8_yuvs(int a1)
{
  unsigned int v1 = &unk_1EFA1AAD8;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1AAB0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange_2vuf(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AA88;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8FullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1AB28;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1AB00;
  }
  else {
    return v1;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarVideoRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xB) {
    return 0;
  }
  else {
    return qword_1E5BD36D0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr8BiPlanarFullRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xB) {
    return 0;
  }
  else {
    return qword_1E5BD3730[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr8(int a1)
{
  unsigned int v1 = &unk_1EFA1AA60;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1AA38;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr16(int a1)
{
  unsigned int v1 = &unk_1EFA1B000;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1AFD8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1C630;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1C658;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarWideRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3CC0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3C00[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3C60[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3AB8[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3A58[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3AF8[a1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCr10(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1B028;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xB) {
    return 0;
  }
  else {
    return qword_1E5BD3890[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_420YpCbCr8PlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1BA78;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_420YpCbCr8Planar(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1BA50;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarVideoRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xB) {
    return 0;
  }
  else {
    return qword_1E5BD3610[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr8BiPlanarFullRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xB) {
    return 0;
  }
  else {
    return qword_1E5BD3670[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarWideRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3CA0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3BE0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3C40[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3A98[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarVideoRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 2;
  if (v1 > 7) {
    return 0;
  }
  else {
    return qword_1E5BD39D8[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10BiPlanarFullRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 2;
  if (v1 > 7) {
    return 0;
  }
  else {
    return qword_1E5BD3A18[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1B348;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x80000) {
    return &unk_1EFA1B320;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_411YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1B398;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x80000) {
    return &unk_1EFA1B370;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamutPremultiplied(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1BF78;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_40ARGBLEWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD39B8[a1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_400YpCbCr10PackedVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1C950;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_32BGRA(int a1)
{
  if (a1 > 16)
  {
    switch(a1)
    {
      case 17:
        return &unk_1EFA1AE20;
      case 48:
        return &unk_1EFA1AE48;
      case 49:
        return &unk_1EFA1AE70;
    }
  }
  else
  {
    switch(a1)
    {
      case 0:
        return &unk_1EFA1AE98;
      case 1:
        return &unk_1EFA1ADD0;
      case 16:
        return &unk_1EFA1ADF8;
    }
  }
  return 0;
}

void *retrievePixelFormat_kCVPixelFormatType_32AlphaGray(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AF10;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_32ARGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1A8D0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_30RGBPad2Most(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AF88;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_30RGBLE_8A_BiPlanar(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3D00[a1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_30RGBLEPackedWideGamut(int a1)
{
  unsigned int v1 = &unk_1EFA1BE88;
  unint64_t v2 = &unk_1EFA1BEB0;
  if (a1 != 12) {
    unint64_t v2 = 0;
  }
  if (a1 != 4) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA1BED8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_30RGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AF60;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_24RGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1A8F8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16LE565(int a1)
{
  unsigned int v1 = &unk_1EFA1A970;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1A948;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16LE5551(int a1)
{
  unsigned int v1 = &unk_1EFA1A9C0;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1A998;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16LE555(int a1)
{
  unsigned int v1 = &unk_1EFA1AA10;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 1) {
    return &unk_1EFA1A9E8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16Gray(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1AF38;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16BE555(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1A920;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_BGGR(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CB58;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_RGGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1B0C8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_GRBG(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1B0A0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_GBRG(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1B118;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_14Bayer_BGGR(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1B0F0;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_128RGBAFloat(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 3;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD3988[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray10CompandedIn8(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA23188;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1FD80;
  if (a1 != 0x20000) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x10000) {
    return &unk_1EFA1FD58;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_UncompressedTiled_420YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1FDD0;
  if (a1 != 0x20000) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x10000) {
    return &unk_1EFA1FDA8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough3(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CD38;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough2(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CD10;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_SpecialPassthrough1(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CCE8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent1(int a1)
{
  unsigned int v1 = &unk_1EFA23480;
  unint64_t v2 = &unk_1EFA234A8;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA234D0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_MultiSlice_UncompressedTiled_OneComponent16Half(int a1)
{
  unsigned int v1 = &unk_1EFA1FF38;
  if (a1 != 0x20000) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x10000) {
    return &unk_1EFA1FF10;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_MultiSlice_Lossless_OneComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1FEE8;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1FFB0;
  unint64_t v2 = &unk_1EFA1FF88;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FF60;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20028;
  unint64_t v2 = &unk_1EFA20000;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FFD8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray12CompandedIn8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1FE98;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_RegroupedSenselArray10CompandedIn8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1FEC0;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1FE70;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_444YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1FE48;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_422YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1FE20;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1FDF8;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC128x1_14Bayer_BGGR(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D5F8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned13_3(int a1)
{
  unsigned int v1 = &unk_1EFA23598;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA23570;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_FixedPointUnsigned11_5(int a1)
{
  unsigned int v1 = &unk_1EFA235E8;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA235C0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_FixedPointSigned7_5(int a1)
{
  unsigned int v1 = &unk_1EFA23638;
  if (a1) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA23610;
  }
  else {
    return v1;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DisparityFloat32(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 2;
  if (v1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD4A80[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DisparityFloat16(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 2;
  if (v1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD4A40[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DepthFloat32(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 2;
  if (v1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD4AA0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_DepthFloat16(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 2;
  if (v1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD4A60[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1F790;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1F5D8;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_Universal(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1E188;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1F5B0;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent16(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1F588;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent12(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1F768;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_Universal(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA1E200;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_ARGB2101010LEPacked(int a1)
{
  unsigned int v1 = &unk_1EFA1F650;
  unint64_t v2 = &unk_1EFA1F628;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F600;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E318;
  unint64_t v2 = &unk_1EFA1E2F0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E2C8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1F8F8;
  unint64_t v2 = &unk_1EFA1F8D0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F8A8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E660;
  unint64_t v2 = &unk_1EFA1E638;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E610;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E9A8;
  unint64_t v2 = &unk_1EFA1E980;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E958;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1FA60;
  unint64_t v2 = &unk_1EFA1FA38;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FA10;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F380;
  unint64_t v2 = &unk_1EFA1F358;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F330;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr16BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F218;
  unint64_t v2 = &unk_1EFA1F1F0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F1C8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedVideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1F9E8;
  unint64_t v2 = &unk_1EFA1F9C0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F998;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EF48;
  unint64_t v2 = &unk_1EFA1EF20;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EEF8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr12PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F0B0;
  unint64_t v2 = &unk_1EFA1F088;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F060;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1FD30;
  unint64_t v2 = &unk_1EFA1FD08;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FCE0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1F970;
  unint64_t v2 = &unk_1EFA1F948;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F920;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F3F8;
  unint64_t v2 = &unk_1EFA1F3D0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F3A8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F470;
  unint64_t v2 = &unk_1EFA1F448;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F420;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarWideRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EDE0;
  unint64_t v2 = &unk_1EFA1EDB8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1ED90;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EB10;
  unint64_t v2 = &unk_1EFA1EAE8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EAC0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EC78;
  unint64_t v2 = &unk_1EFA1EC50;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EC28;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1F880;
  unint64_t v2 = &unk_1EFA1F858;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F830;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8VideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F4E8;
  unint64_t v2 = &unk_1EFA1F4C0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F498;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8FullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F560;
  unint64_t v2 = &unk_1EFA1F538;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F510;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E548;
  unint64_t v2 = &unk_1EFA1E520;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E4F8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E890;
  unint64_t v2 = &unk_1EFA1E868;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E840;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1FBC8;
  unint64_t v2 = &unk_1EFA1FBA0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FB78;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F308;
  unint64_t v2 = &unk_1EFA1F2E0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F2B8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr16BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F1A0;
  unint64_t v2 = &unk_1EFA1F178;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F150;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedVideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1FB50;
  unint64_t v2 = &unk_1EFA1FB28;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FB00;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EED0;
  unint64_t v2 = &unk_1EFA1EEA8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EE80;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr12PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F038;
  unint64_t v2 = &unk_1EFA1F010;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EFE8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1FCB8;
  unint64_t v2 = &unk_1EFA1FC90;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FC68;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedVideoRange_16A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1FAD8;
  unint64_t v2 = &unk_1EFA1FAB0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FA88;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarWideRange(int a1)
{
  unsigned int v1 = &unk_1EFA1ED68;
  unint64_t v2 = &unk_1EFA1ED40;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1ED18;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EA98;
  unint64_t v2 = &unk_1EFA1EA70;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EA48;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EC00;
  unint64_t v2 = &unk_1EFA1EBD8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EBB0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1F808;
  unint64_t v2 = &unk_1EFA1F7E0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F7B8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E430;
  unint64_t v2 = &unk_1EFA1E408;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E3E0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E778;
  unint64_t v2 = &unk_1EFA1E750;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E728;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F290;
  unint64_t v2 = &unk_1EFA1F268;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F240;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr16BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1F128;
  unint64_t v2 = &unk_1EFA1F100;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F0D8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EE58;
  unint64_t v2 = &unk_1EFA1EE30;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EE08;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr12PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EFC0;
  unint64_t v2 = &unk_1EFA1EF98;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EF70;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1FC40;
  unint64_t v2 = &unk_1EFA1FC18;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1FBF0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarWideRange(int a1)
{
  unsigned int v1 = &unk_1EFA1ECF0;
  unint64_t v2 = &unk_1EFA1ECC8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1ECA0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EA20;
  unint64_t v2 = &unk_1EFA1E9F8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E9D0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1EB88;
  unint64_t v2 = &unk_1EFA1EB60;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1EB38;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1E098;
  unint64_t v2 = &unk_1EFA1E070;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E048;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1DE68;
  unint64_t v2 = &unk_1EFA1DE40;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1DE18;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLE_8A_BiPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1F6C8;
  unint64_t v2 = &unk_1EFA1F6A0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F678;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_Universal(int a1)
{
  unsigned int v1 = &unk_1EFA1DF80;
  unint64_t v2 = &unk_1EFA1DF58;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1DF30;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEFullRange_8A_BiPlanar(int a1)
{
  unsigned int v1 = &unk_1EFA1F740;
  unint64_t v2 = &unk_1EFA1F718;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1F6F0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_96BayerPacked12_BGGR(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CBF8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_64RGBALE(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CD60;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_48RGBLE(int a1)
{
  unsigned int v1 = &unk_1EFA231B0;
  unint64_t v2 = &unk_1EFA231D8;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA23200;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3F40[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3E80[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3EE0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3E20[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3D60[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3DC0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3F20[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3E60[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3EC0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3E00[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3D40[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3DA0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3F00[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3E40[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12PackedBiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3EA0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarWideGamut(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3DE0[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarVideoRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3D20[a1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr12BiPlanarFullRange(unsigned int a1)
{
  if (a1 > 3) {
    return 0;
  }
  else {
    return qword_1E5BD3D80[a1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_40ARGBLEFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA23408;
  unint64_t v2 = &unk_1EFA23430;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA23458;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_30RGBLEFullRange_8A_BiPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD49C0[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_224BayerPacked14_BGGR(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CC20;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_1VersatileSensel(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA234F8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_RGGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CBA8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GRBG(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CB80;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_160BayerPacked10_GBRG(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CBD0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_12RGBPacked_R12B(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA23548;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_12RGBLEPacked_R12L(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA23520;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_RGGB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CC98;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GRBG(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CC70;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_GBRG(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CCC0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_12BayerCompandedIn8_BGGR(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1CC48;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayUnpacked10LSB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA23098;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArrayPacked10_88882222(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA230C0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_VersatileSenselArray12CompandedIn8(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA23160;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_OneComponent10_Packed88882222(int a1)
{
  unsigned int v1 = &unk_1EFA23020;
  unint64_t v2 = &unk_1EFA23048;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA23070;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20AA0;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20AF0;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20A28;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_OneComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA209B0;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_64RGBAHalf(int a1)
{
  unsigned int v1 = &unk_1EFA20BB8;
  unint64_t v2 = &unk_1EFA20B90;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20B68;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20CD0;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA205C8;
  unint64_t v2 = &unk_1EFA205A0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20578;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20640;
  unint64_t v2 = &unk_1EFA20618;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA205F0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20050;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA202F8;
  unint64_t v2 = &unk_1EFA202D0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA202A8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20370;
  unint64_t v2 = &unk_1EFA20348;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20320;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy75_32BGRA(int a1)
{
  unsigned int v1 = &unk_1EFA20898;
  unint64_t v2 = &unk_1EFA20870;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20848;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20B18;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20A50;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_OneComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA209D8;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_64RGBAHalf(int a1)
{
  unsigned int v1 = &unk_1EFA20C30;
  unint64_t v2 = &unk_1EFA20C08;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20BE0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20CF8;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA206B8;
  unint64_t v2 = &unk_1EFA20690;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20668;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20730;
  unint64_t v2 = &unk_1EFA20708;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA206E0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20078;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA20118;
  unint64_t v2 = &unk_1EFA200F0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA200C8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20190;
  unint64_t v2 = &unk_1EFA20168;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20140;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA203E8;
  unint64_t v2 = &unk_1EFA203C0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20398;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20460;
  unint64_t v2 = &unk_1EFA20438;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20410;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy62_32BGRA(int a1)
{
  unsigned int v1 = &unk_1EFA20910;
  unint64_t v2 = &unk_1EFA208E8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA208C0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20AC8;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_TwoComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20B40;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent8(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20A78;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_OneComponent16Half(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20A00;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_64RGBAHalf(int a1)
{
  unsigned int v1 = &unk_1EFA20CA8;
  unint64_t v2 = &unk_1EFA20C80;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20C58;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_64HalfRegroupedSenselArray(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA20D20;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA207A8;
  unint64_t v2 = &unk_1EFA20780;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20758;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_422YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20820;
  unint64_t v2 = &unk_1EFA207F8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA207D0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  if (a1 == 0x20000) {
    return &unk_1EFA200A0;
  }
  else {
    return 0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA20208;
  unint64_t v2 = &unk_1EFA201E0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA201B8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr8BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20280;
  unint64_t v2 = &unk_1EFA20258;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20230;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarVideoRange(int a1)
{
  unsigned int v1 = &unk_1EFA204D8;
  unint64_t v2 = &unk_1EFA204B0;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20488;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_420YpCbCr10PackedBiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA20550;
  unint64_t v2 = &unk_1EFA20528;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20500;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossy50_32BGRA(int a1)
{
  unsigned int v1 = &unk_1EFA20988;
  unint64_t v2 = &unk_1EFA20960;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA20938;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_64RGBA_DownscaledProResRAW(int a1)
{
  unsigned int v1 = &unk_1EFA22E18;
  unint64_t v2 = &unk_1EFA22E40;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA22E68;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_64HalfRegroupedSenselArray(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA23110;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCrFloat16BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA22FA8;
  unint64_t v2 = &unk_1EFA22FD0;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA22FF8;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD41C0[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_444YpCbCr8PackedFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA21108;
  unint64_t v2 = &unk_1EFA21130;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA21158;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4340[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarVideoRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD47C0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr16BiPlanarFullRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4940[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr12VideoRange_16A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD42C0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4640[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_444YpCbCr10VideoRange_16A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4240[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_422YpCbCrFloat16BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA22F30;
  unint64_t v2 = &unk_1EFA22F58;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA22F80;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr8VideoRange_8A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4140[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr16VideoRange_16A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD44C0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarVideoRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4740[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr16BiPlanarFullRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD48C0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr12VideoRange_16A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4440[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD45C0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_422YpCbCr10VideoRange_16A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD43C0[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_420YpCbCrFloat16BiPlanarFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA22EB8;
  unint64_t v2 = &unk_1EFA22EE0;
  if (a1 != 196608) {
    unint64_t v2 = 0;
  }
  if (a1 != 0x10000) {
    unsigned int v1 = v2;
  }
  if (a1) {
    return v1;
  }
  else {
    return &unk_1EFA22F08;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarVideoRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD46C0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr16BiPlanarFullRange(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4840[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_420YpCbCr10VideoRange_8A_TriPlanar(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1;
  unsigned int v1 = v2 >> 16;
  if (v1 > 0xF) {
    return 0;
  }
  else {
    return qword_1E5BD4540[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_30RGB_DownscaledBayer(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA22E90;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16VersatileBayerQuadPlanar(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA22DF0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16VersatileBayer(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA22DC8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArrayQuadPlanar(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA23138;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_16HalfVersatileSenselArray(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA230E8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_12RLSB_12G12BMSB(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA22DA0;
  }
}

uint64_t classFinalize_CVMetalTexture(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

uint64_t CVPixelBufferPool::scanIOSurfaces(CVPixelBufferPool *this, void (*a2)(__IOSurface *, void *), void *a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return (*(uint64_t (**)(void, uint64_t (*)(void *, void *), void *))(**((void **)this + 2)
                                                                                                 + 248))(*((void *)this + 2), scanIOSurfacesCallback, v4);
}

uint64_t CVLocklessBunchPair::applyFunction(CVLocklessBunchPair *this, void (*a2)(const void *, void *), void *a3, char a4)
{
  v8[0] = a2;
  v8[1] = a3;
  if ((a4 & 2) != 0)
  {
    uint64_t v6 = *((void *)this + 28);
    if (v6)
    {
      if (CVAtomicBunchApply(v6, (uint64_t (*)(uint64_t, void))_applyFunction, (uint64_t)v8) == 2) {
        return 4294960604;
      }
    }
  }
  if ((a4 & 4) == 0) {
    return 0;
  }
  uint64_t result = *((void *)this + 29);
  if (result)
  {
    if (CVAtomicBunchApply(result, (uint64_t (*)(uint64_t, void))_applyFunction, (uint64_t)v8) == 2) {
      return 4294960604;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CVBunchPair::finalize(CVBunchPair *this)
{
  pthread_rwlock_destroy((pthread_rwlock_t *)((char *)this + 16));

  return CVObject::finalize(this);
}

uint64_t CVPixelBufferPool::getMinimumBufferCount(pthread_mutex_t *this, const void *a2)
{
  CFDictionaryRef v4 = this + 1;
  pthread_mutex_lock(this + 1);
  uint64_t v5 = *(unsigned int *)&this->__opaque[48];
  if (v5)
  {
    uint64_t v6 = 0;
    int v7 = (uint64_t *)(this[2].__sig + 8);
    do
    {
      if ((const void *)*(v7 - 1) == a2) {
        uint64_t v6 = *v7;
      }
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  pthread_mutex_unlock(v4);
  return v6;
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  id result = _getCVMetalTexture(image);
  if (result)
  {
    unint64_t v2 = *(uint64_t (**)(void))(**((void **)result + 13) + 264);
    return (id)v2();
  }
  return result;
}

void *_getCVMetalTexture(void *result)
{
  if (result)
  {
    unsigned int v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVMetalTextureGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

CFTypeID CVMetalTextureGetTypeID(void)
{
  if (CVMetalTextureGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalTexture);
  }
  return kCVMetalTextureID;
}

BOOL CVPixelBuffer::hasAttachment(CVPixelBuffer *this, const __CFString *a2)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    if (v4)
    {
      uint64_t v5 = (__IOSurface *)v4;
      CFStringRef v6 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
      pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
      if (v6)
      {
        if (_os_feature_enabled_impl() && CFEqual(v6, (CFTypeRef)*MEMORY[0x1E4F2F068]))
        {
          CFNumberRef v7 = (const __CFNumber *)IOSurfaceCopyValue(v5, (CFStringRef)*MEMORY[0x1E4F2F070]);
          CFNumberRef v8 = v7;
          if (v7)
          {
            CFTypeID v9 = CFGetTypeID(v7);
            if (v9 == CFNumberGetTypeID())
            {
              int valuePtr = 0;
              CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
              if (valuePtr)
              {
                pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
                BOOL v10 = 1;
                goto LABEL_21;
              }
            }
          }
        }
        else
        {
          CFNumberRef v8 = 0;
        }
        CFTypeRef v12 = IOSurfaceCopyValue(v5, v6);
        if (v12)
        {
          CFRelease(v12);
          goto LABEL_18;
        }
      }
      else
      {
        CFNumberRef v8 = 0;
      }
      if (!CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2))
      {
        BOOL v10 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2) != 0;
LABEL_20:
        pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
        if (!v8) {
          return v10;
        }
LABEL_21:
        CFRelease(v8);
        return v10;
      }
LABEL_18:
      BOOL v10 = 1;
      goto LABEL_20;
    }
  }

  return CVBuffer::hasAttachment((CFDictionaryRef *)this, a2);
}

uint64_t classInitialize_CVPixelBufferBacking(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVPixelBufferBackingint ID = result;
  return result;
}

uint64_t CVDataBufferBacking::getDataFormatType(CVDataBufferBacking *this)
{
  return *((unsigned int *)this + 39);
}

uint64_t CVPixelBufferPool::finalize(CVPixelBufferPool *this)
{
  (*(void (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
  kdebug_trace();
  CFTypeID v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 4) = 0;
  CFDictionaryRef v3 = (const void *)*((void *)this + 5);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 5) = 0;
  uint64_t v4 = (void *)*((void *)this + 16);
  if (v4) {
    free(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)this + 1);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 12pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 0) = 0u;

  return CVBufferPool::finalize(this);
}

void ___ZL30isRunningInAppleVirtualMachinev_block_invoke()
{
  size_t v1 = 4;
  int v0 = sysctlbyname("kern.hv_vmm_present", &isRunningInAppleVirtualMachine(void)::isAppleVirtualMachine, &v1, 0, 0);
  if (v0) {
    syslog(3, "sysctlbyname for kern.hv_vmm_present failed with status %d", v0);
  }
}

uint64_t CVPixelBufferCreateWithBufferBacking(CVPixelBuffer *a1, void **a2, void *a3)
{
  char v6 = _os_feature_enabled_impl();
  CFTypeID v7 = CFGetTypeID(a2);
  if (v7 != CVPixelBufferBackingGetTypeID()) {
    return 4294960635;
  }
  CFNumberRef v8 = (__IOSurface *)(*(uint64_t (**)(void *))(*a2[2] + 152))(a2[2]);
  if (v8) {
    char v10 = v6;
  }
  else {
    char v10 = 1;
  }
  if (v10)
  {
    if (!v8) {
      return 4294960633;
    }
    CFDictionaryRef v11 = 0;
  }
  else
  {
    CFDictionaryRef v11 = IOSurfaceCopyAllValues(v8);
  }
  CFTypeRef v12 = CVPixelBuffer::alloc(a1, v9);
  long long v13 = v12;
  if (v12)
  {
    if ((*(uint64_t (**)(void, void *))(*(void *)v12[2] + 248))(v12[2], a2[2]))
    {
      if ((v6 & 1) == 0)
      {
        CFTypeID v14 = CFGetTypeID(v13);
        if (v14 == CVPixelBufferGetTypeID())
        {
          long long v15 = (CVPixelBuffer *)v13[2];
          if (v15) {
            CVPixelBuffer::pullAttachmentsFromIOSurface(v15, v11);
          }
        }
      }
      uint64_t v16 = 0;
      *a3 = v13;
      long long v13 = 0;
      if (!v11) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v16 = 4294960636;
      if (!v11) {
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  uint64_t v16 = 4294960634;
  if (v11) {
LABEL_18:
  }
    CFRelease(v11);
LABEL_19:
  if (v13) {
    CFRelease(v13);
  }
  return v16;
}

uint64_t CVPixelBufferBackingGetTypeID(void)
{
  if (CVPixelBufferBackingGetTypeID(void)::once != -1) {
    dispatch_once_f(&CVPixelBufferBackingGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVPixelBufferBacking);
  }
  return kCVPixelBufferBackingID;
}

uint64_t CVDataBufferBacking::getIOSurface(CVDataBufferBacking *this)
{
  return *((void *)this + 20);
}

uint64_t CVDataBufferPool::getDataBufferAttributes(CVDataBufferPool *this)
{
  return *((void *)this + 5);
}

uint64_t CVMetalTextureCache::bufferBackingInUse(CVMetalTextureCache *this, CVBufferBacking *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
  CFIndex v5 = CFArrayGetCount(*((CFArrayRef *)this + 5));
  char v6 = *(__CFArray **)(*((void *)this + 2) + 232);
  CFTypeID v7 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  CFArrayAppendValue(v6, v7);
  CFIndex v8 = CFArrayGetCount(*((CFArrayRef *)this + 8));
  CFArrayRef v9 = (const __CFArray *)*((void *)this + 8);
  char v10 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v26.location = 0;
  v26.length = v8;
  if (CFArrayContainsValue(v9, v26, v10))
  {
    CFDictionaryRef v11 = (__CFArray *)*((void *)this + 8);
    CFTypeRef v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFArrayRef v13 = v11;
    v14.location = 0;
    v14.length = v8;
LABEL_5:
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v13, v14, v12);
    CFArrayRemoveValueAtIndex(v11, FirstIndexOfValue);
    (*(void (**)(CVBufferBacking *))(*(void *)a2 + 312))(a2);
    goto LABEL_6;
  }
  CFArrayRef v15 = *(const __CFArray **)(*((void *)this + 2) + 224);
  uint64_t v16 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v27.location = 0;
  v27.length = Count;
  if (CFArrayContainsValue(v15, v27, v16))
  {
    CFDictionaryRef v11 = *(__CFArray **)(*((void *)this + 2) + 224);
    CFTypeRef v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFArrayRef v13 = v11;
    v14.location = 0;
    v14.length = Count;
    goto LABEL_5;
  }
  CFArrayRef v20 = (const __CFArray *)*((void *)this + 5);
  long long v21 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v28.location = 0;
  v28.length = v5;
  if (CFArrayContainsValue(v20, v28, v21))
  {
    CFArrayRef v22 = (const __CFArray *)*((void *)this + 5);
    uint64_t v23 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    v29.location = 0;
    v29.length = v5;
    CFIndex v24 = CFArrayGetFirstIndexOfValue(v22, v29, v23);
    CFArrayRemoveValueAtIndex(v22, v24);
  }
LABEL_6:
  long long v18 = (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex;

  return pthread_mutex_unlock(v18);
}

uint64_t CVMetalTextureBacking::retainBackingUsage(CVMetalTextureBacking *this)
{
  uint64_t result = *((void *)this + 21);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t CVPixelBufferPool::getMaximumBufferAge(CVPixelBufferPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 200))();
}

uint64_t classInitialize_CVMetalTexture(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVMetalTextureint ID = result;
  return result;
}

uint64_t classInitialize_CVDataBuffer(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVDataBufferint ID = result;
  return result;
}

uint64_t classInitialize_CVObject(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVObjectint ID = result;
  return result;
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  CVReturn v27 = 0;
  {
    CVPixelBufferCreate::ktrace_seed = arc4random();
  }
  if (gCVKTraceEnabled)
  {
    ++CVPixelBufferCreate::ktrace_seed;
    kdebug_trace();
  }
  if (!pixelBufferOut || !width || !height)
  {
    CFArrayRef v13 = 0;
    long long v17 = 0;
    CFArrayRef v20 = 0;
    int v25 = -6661;
    goto LABEL_34;
  }
  *pixelBufferOut = 0;
  if (pixelBufferAttributes) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFArrayRef v13 = MutableCopy;
  if (!MutableCopy)
  {
    long long v17 = 0;
LABEL_46:
    CFArrayRef v20 = 0;
    int v25 = -6662;
    goto LABEL_34;
  }
  if (!pixelFormatType)
  {
    if (CFDictionaryGetValue(MutableCopy, @"PixelFormatDescription")) {
      goto LABEL_15;
    }
LABEL_32:
    long long v17 = 0;
    CFArrayRef v20 = 0;
    int v25 = -6680;
    goto LABEL_34;
  }
  DescriptionWithOSType PixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
  if (!DescriptionWithPixelFormatType) {
    goto LABEL_32;
  }
  CFDictionarySetValue(v13, @"PixelFormatDescription", DescriptionWithPixelFormatType);
LABEL_15:
  if (!CFDictionaryGetValue(v13, @"IOSurfaceProperties")
    && CVIsPixelFormatCompressed(pixelFormatType))
  {
    CVReturn v27 = -6662;
    snprintf(__str, 0x80uLL, "CoreVideo: Error, CVPixelBufferCreate() for non-IOSurface backed compressed format %c%c%c%c is not allowed.", HIBYTE(pixelFormatType), BYTE2(pixelFormatType), BYTE1(pixelFormatType), pixelFormatType);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      CFRange v29 = __str;
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
    }
    goto LABEL_25;
  }
  uint64_t v16 = CVPixelBufferBacking::alloc(allocator, v15);
  long long v17 = v16;
  if (!v16) {
    goto LABEL_46;
  }
  if (!(*(uint64_t (**)(CVImageBacking *, size_t, size_t, void, void, void, void, void, void, void, void, void, void, void, __CFDictionary *, void, void, void, void, void, CVReturn *))(*(void *)v16[2] + 248))(v16[2], width, height, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v13, 0, 0, 0, 0,
          0,
          &v27))
  {
    if (v27)
    {
LABEL_25:
      long long v17 = 0;
      CFArrayRef v20 = 0;
LABEL_35:
      char v24 = 1;
      goto LABEL_36;
    }
    long long v17 = 0;
    CFArrayRef v20 = 0;
    int v25 = -6660;
LABEL_34:
    CVReturn v27 = v25;
    goto LABEL_35;
  }
  long long v19 = (__CVBuffer *)CVPixelBuffer::alloc(allocator, v18);
  CFArrayRef v20 = v19;
  if (v19)
  {
    if ((*(uint64_t (**)(void, CVImageBacking *))(**((void **)v19 + 2) + 248))(*((void *)v19 + 2), v17[2]))
    {
      *pixelBufferOut = v20;
      CFArrayRef v20 = 0;
      goto LABEL_28;
    }
    int v21 = -6660;
  }
  else
  {
    int v21 = -6662;
  }
  CVReturn v27 = v21;
LABEL_28:
  CFArrayRef v22 = v17[2];
  if (v22 && (*(uint64_t (**)(CVImageBacking *))(*(void *)v22 + 160))(v22))
  {
    uint64_t v23 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(void *)v17[2] + 160))(v17[2]);
    IOOrEXSurfaceGetID(v23);
    kdebug_trace();
    char v24 = 0;
    goto LABEL_37;
  }
  char v24 = 0;
LABEL_36:
  kdebug_trace();
LABEL_37:
  if (v20) {
    CFRelease(v20);
  }
  if ((v24 & 1) == 0) {
    CFRelease(v17);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v27;
}

void sub_1A585F718(_Unwind_Exception *a1)
{
}

const void *CVBuffer::getAttachment(CFDictionaryRef *this, const __CFString *a2, CVAttachmentMode *a3)
{
  char v6 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  uint64_t v7 = 0;
  char v8 = 1;
  while (1)
  {
    char v9 = v8;
    CFNumberRef Value = CFDictionaryGetValue(this[v7 + 10], a2);
    if (Value) {
      break;
    }
    char v8 = 0;
    uint64_t v7 = 1;
    if ((v9 & 1) == 0) {
      goto LABEL_7;
    }
  }
  if (a3) {
    *a3 = v7;
  }
LABEL_7:
  pthread_mutex_unlock(v6);
  return Value;
}

uint64_t classInitialize_CVMetalTextureCache(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVMetalTextureCacheint ID = result;
  return result;
}

uint64_t classInitialize_CVLockingBunchPair(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVLockingBunchPairint ID = result;
  return result;
}

void fig_ktrace_initialize()
{
  CFStringRef v0 = (const __CFString *)CFPreferencesCopyAppValue(@"ktrace", @"com.apple.corevideo");
  if (v0)
  {
    CFStringRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFStringGetTypeID())
    {
      IntCFNumberRef Value = CFStringGetIntValue(v1);
      if (IntValue) {
        goto LABEL_17;
      }
      IntCFNumberRef Value = 1;
      if (CFStringCompare(v1, @"true", 1uLL) == kCFCompareEqualTo) {
        goto LABEL_17;
      }
      IntCFNumberRef Value = 1;
      if (CFStringCompare(v1, @"yes", 1uLL) == kCFCompareEqualTo) {
        goto LABEL_17;
      }
      if (CFStringCompare(v1, @"false", 1uLL) && CFStringCompare(v1, @"no", 1uLL)) {
        CFStringCompare(v1, @"0", 1uLL);
      }
    }
    else
    {
      CFTypeID v4 = CFGetTypeID(v1);
      if (v4 == CFNumberGetTypeID())
      {
        int valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v1, kCFNumberIntType, &valuePtr)) {
          IntCFNumberRef Value = valuePtr;
        }
        else {
          IntCFNumberRef Value = 0;
        }
        goto LABEL_17;
      }
      CFTypeID v5 = CFGetTypeID(v1);
      if (v5 == CFBooleanGetTypeID())
      {
        IntCFNumberRef Value = CFEqual(v1, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
LABEL_17:
        CFRelease(v1);
        goto LABEL_18;
      }
    }
    IntCFNumberRef Value = 0;
    goto LABEL_17;
  }
  IntCFNumberRef Value = 0;
LABEL_18:
  gCVKTraceEnabled = IntValue;
}

void initCVBufferKeyToIOSurfaceKeyDictionary(void)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)keys = 0u;
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v2 = 0;
  CFDictionaryRef v3 = (const void ***)&qword_1E5BD1690;
  do
  {
    keys[v2] = (void *)**(v3 - 1);
    CFTypeID v4 = **v3;
    *((void *)v7 + v2) = v4;
    if ((0x7FD8041uLL >> v2)) {
      CFArrayAppendValue(Mutable, v4);
    }
    ++v2;
    v3 += 3;
  }
  while (v2 != 27);
  CFTypeID v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  char v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  cvBufferKeyToIOSurfaceKeyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)keys, (const void **)v7, 27, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  iosurfaceKeyToCVBufferKeyDictionary = (uint64_t)CFDictionaryCreate(v0, (const void **)v7, (const void **)keys, 27, v5, v6);
  IOSurfaceSetCoreVideoBridgedKeys();
  CFRelease(Mutable);
}

CVReturn CVPixelBufferCreateResolvedAttributesDictionary(CFAllocatorRef allocator, CFArrayRef attributes, CFDictionaryRef *resolvedDictionaryOut)
{
  CFAllocatorRef v5 = allocator;
  uint64_t v288 = *MEMORY[0x1E4F143B8];
  *resolvedDictionaryOut = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return -6662;
  }
  uint64_t v7 = Mutable;
  CFIndex Count = CFArrayGetCount(attributes);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, i);
      long long v11 = (void *)CFDictionaryGetValue(ValueAtIndex, @"PixelFormatType");
      if (v11 && restrictToPixelFormatTypeListIntersection(v5, v7, v11, @"PixelFormatType"))
      {
        long long v13 = "no common pixel format type";
        goto LABEL_60;
      }
    }
  }
  PixelFormatTypes = (void *)CVPixelFormatDescriptionGetPixelFormatTypes();
  if (restrictToPixelFormatTypeListIntersection(v5, v7, PixelFormatTypes, @"PixelFormatType"))
  {
    long long v13 = "no known common pixel format type";
    goto LABEL_60;
  }
  int v269 = resolvedDictionaryOut;
  CFDictionaryRef theDict = v7;
  CFArrayRef theArray = attributes;
  if (Count < 1) {
    goto LABEL_66;
  }
  for (CFIndex j = 0; j != Count; ++j)
  {
    CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, j);
    long long v16 = CFDictionaryGetValue(v15, @"MemoryAllocator");
    if (v16)
    {
      long long v17 = v16;
      long long v18 = CFDictionaryGetValue(v7, @"MemoryAllocator");
      if (v18)
      {
        if (!CFEqual(v17, v18))
        {
          long long v13 = "allocator mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, @"MemoryAllocator", v17);
      }
    }
  }
  for (CFIndex k = 0; k != Count; ++k)
  {
    CFDictionaryRef v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, k);
    CFDataRef v21 = (const __CFData *)CFDictionaryGetValue(v20, @"CustomMemoryLayoutCallBacks");
    if (v21)
    {
      CFDataRef v22 = v21;
      CFDataRef v23 = (const __CFData *)CFDictionaryGetValue(v7, @"CustomMemoryLayoutCallBacks");
      if (v23)
      {
        CFDataRef v24 = v23;
        CFIndex Length = CFDataGetLength(v22);
        if (Length != CFDataGetLength(v24))
        {
          long long v13 = "custom layout size mismatch";
LABEL_60:
          reportResolutionFailure(attributes, v13);
          goto LABEL_61;
        }
        BytePtr = CFDataGetBytePtr(v22);
        CVReturn v27 = CFDataGetBytePtr(v24);
        size_t v28 = CFDataGetLength(v22);
        if (!memcmp(BytePtr, v27, v28))
        {
          long long v13 = "custom layout mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, @"CustomMemoryLayoutCallBacks", v22);
      }
    }
  }
  CFIndex v29 = 0;
  int value = 0;
  int v273 = 0;
  key = (void *)*MEMORY[0x1E4F2EFE8];
  double v30 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFAllocatorRef v270 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    CFDictionaryRef v31 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v29);
    CFDictionaryRef v32 = (const __CFDictionary *)CFDictionaryGetValue(v31, @"IOSurfaceProperties");
    CFArrayRef v33 = (const __CFArray *)CFDictionaryGetValue(v31, @"CacheMode");
    if (v33)
    {
      CFArrayRef v34 = v33;
      CFRetain(v33);
    }
    else
    {
      if (!v32)
      {
        CFArrayRef v34 = 0;
        if (v30 != CFDictionaryGetValue(v31, @"PreferRealTimeCacheModeIfEveryoneDoes")) {
          goto LABEL_37;
        }
LABEL_39:
        ++v273;
        if (!v34) {
          goto LABEL_50;
        }
        goto LABEL_40;
      }
      *(void *)&valuePtr[0] = 0;
      *(void *)&valuePtr[0] = CFDictionaryGetValue(v32, key);
      if (*(void *)&valuePtr[0]) {
        CFArrayRef v34 = CFArrayCreate(v5, (const void **)valuePtr, 1, MEMORY[0x1E4F1D510]);
      }
      else {
        CFArrayRef v34 = 0;
      }
    }
    if (v30 == CFDictionaryGetValue(v31, @"PreferRealTimeCacheModeIfEveryoneDoes")) {
      goto LABEL_39;
    }
    if (!v34
      || CFArrayGetCount(v34) < 1
      || (CFNumberRef v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v34, 0),
          LODWORD(valuePtr[0]) = 0,
          CFNumberGetValue(v35, kCFNumberSInt32Type, valuePtr),
          LODWORD(valuePtr[0]) != 1792))
    {
LABEL_37:
      ++value;
      if (!v34) {
        goto LABEL_50;
      }
    }
LABEL_40:
    CFArrayRef v36 = (const __CFArray *)CFDictionaryGetValue(v7, @"CacheMode");
    if (v36)
    {
      CFArrayRef v37 = v36;
      CFIndex v38 = CFArrayGetCount(v36);
      if (v38 >= 1)
      {
        unint64_t v39 = v38 + 1;
        do
        {
          CFIndex v40 = CFArrayGetCount(v34);
          uint64_t v41 = CFArrayGetValueAtIndex(v37, v39 - 2);
          v289.locatioCFIndex n = 0;
          v289.length = v40;
          if (!CFArrayContainsValue(v34, v289, v41)) {
            CFArrayRemoveValueAtIndex(v37, v39 - 2);
          }
          --v39;
        }
        while (v39 > 1);
      }
      uint64_t v7 = theDict;
      attributes = theArray;
      if (!CFArrayGetCount(v37))
      {
        reportResolutionFailure(theArray, "no common cache mode");
        CFRelease(v34);
LABEL_61:
        int v45 = v7;
LABEL_62:
        CFRelease(v45);
        return -6660;
      }
    }
    else
    {
      MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(v270, 0, v34);
      CFDictionarySetValue(v7, @"CacheMode", MutableCopy);
      CFRelease(MutableCopy);
    }
    CFRelease(v34);
LABEL_50:
    if (v32)
    {
      BOOL v43 = (__CFDictionary *)CFDictionaryGetValue(v7, @"IOSurfaceProperties");
      if (v43)
      {
        CFMutableDictionaryRef v44 = v43;
        valuePtr[0] = (unint64_t)v43;
        CFDictionaryApplyFunction(v32, (CFDictionaryApplierFunction)mergeCFDictionariesUnlessTheyConflict, valuePtr);
        if (BYTE8(valuePtr[0]))
        {
          long long v13 = "unmergeable IOSurfaceProperties";
          goto LABEL_60;
        }
      }
      else
      {
        CFMutableDictionaryRef v44 = CFDictionaryCreateMutableCopy(0, 0, v32);
        CFDictionarySetValue(v7, @"IOSurfaceProperties", v44);
        CFRelease(v44);
      }
      CFDictionaryRemoveValue(v44, key);
    }
    ++v29;
  }
  while (v29 != Count);
  if (v273 >= 1 && !value)
  {
    LODWORD(valuePtr[0]) = 1792;
    CFNumberRef v47 = CFNumberCreate(v270, kCFNumberSInt32Type, valuePtr);
    uint64_t v48 = CFArrayCreateMutable(v270, 1, MEMORY[0x1E4F1D510]);
    CFArrayAppendValue(v48, v47);
    CFDictionarySetValue(v7, @"CacheMode", v48);
    CFRelease(v48);
    CFRelease(v47);
    CFDictionarySetValue(v7, @"PreferRealTimeCacheModeIfEveryoneDoes", v30);
    goto LABEL_67;
  }
LABEL_66:
  CFDictionaryRemoveValue(v7, @"PreferRealTimeCacheModeIfEveryoneDoes");
LABEL_67:
  if (Count < 1)
  {
LABEL_298:
    CFNumberRef v205 = (const __CFNumber *)CFDictionaryGetValue(v7, @"ExactHeight");
    CFAllocatorRef allocatorb = v5;
    if (v205)
    {
      *(void *)&valuePtr[0] = 0;
      CFNumberGetValue(v205, kCFNumberLongType, valuePtr);
      if (Count >= 1)
      {
        CFIndex v206 = 0;
        do
        {
          CFDictionaryRef v207 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v206);
          CFNumberRef v208 = (const __CFNumber *)CFDictionaryGetValue(v207, @"Height");
          if (v208)
          {
            CFNumberRef v209 = v208;
            CFNumberRef v210 = (const __CFNumber *)CFDictionaryGetValue(v207, @"ExtendedPixelsTop");
            CFNumberRef v211 = (const __CFNumber *)CFDictionaryGetValue(v207, @"ExtendedPixelsBottom");
            uint64_t v285 = 0;
            uint64_t v286 = 0;
            uint64_t v284 = 0;
            CFNumberGetValue(v209, kCFNumberLongType, &v286);
            if (v210)
            {
              CFNumberGetValue(v210, kCFNumberLongType, &v285);
              v286 += v285;
            }
            if (v211)
            {
              CFNumberGetValue(v211, kCFNumberLongType, &v284);
              uint64_t v212 = v286 + v284;
              v286 += v284;
            }
            else
            {
              uint64_t v212 = v286;
            }
            if (*(void *)&valuePtr[0] != v212) {
              goto LABEL_384;
            }
          }
          int v275 = (char *)v206;
          CFNumberRef v213 = (const __CFNumber *)CFDictionaryGetValue(v7, @"PlaneAlignment");
          CFNumberRef v214 = (const __CFNumber *)CFDictionaryGetValue(v207, @"Width");
          if (v213)
          {
            CFNumberRef v215 = v214;
            if (v214)
            {
              CFNumberRef v216 = (const __CFNumber *)CFDictionaryGetValue(v207, @"ExtendedPixelsLeft");
              CFNumberRef v217 = (const __CFNumber *)CFDictionaryGetValue(v207, @"ExtendedPixelsRight");
              uint64_t v285 = 0;
              uint64_t v286 = 0;
              uint64_t v283 = 16;
              uint64_t v284 = 0;
              uint64_t v282 = 0;
              CFNumberGetValue(v213, kCFNumberLongType, &v282);
              if (v282 >= 2)
              {
                CFNumberGetValue(v215, kCFNumberLongType, &v286);
                if (v216)
                {
                  CFNumberGetValue(v216, kCFNumberLongType, &v285);
                  v286 += v285;
                }
                if (v217)
                {
                  CFNumberGetValue(v217, kCFNumberLongType, &v284);
                  v286 += v284;
                }
                CFNumberRef v218 = (const __CFNumber *)CFDictionaryGetValue(v7, @"BytesPerRowAlignment");
                if (v218) {
                  CFNumberGetValue(v218, kCFNumberLongType, &v283);
                }
                CFArrayRef v219 = (const __CFArray *)CFDictionaryGetValue(v7, @"PixelFormatType");
                CFIndex v220 = CFArrayGetCount(v219);
                CFMutableArrayRef v221 = CFArrayCreateMutable(allocatorb, 0, MEMORY[0x1E4F1D510]);
                if (!v221)
                {
                  CVReturn v46 = -6662;
LABEL_394:
                  int v268 = v7;
                  goto LABEL_395;
                }
                uint64_t v222 = v221;
                if (v220 >= 1)
                {
                  for (CFIndex m = 0; m != v220; ++m)
                  {
                    unsigned int v281 = 0;
                    uint64_t v280 = 0;
                    CFNumberRef v224 = (const __CFNumber *)CFArrayGetValueAtIndex(v219, m);
                    CFNumberGetValue(v224, kCFNumberSInt32Type, &v281);
                    DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v281);
                    if (DescriptionWithPixelFormatType)
                    {
                      CFArrayRef v226 = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, @"Planes");
                      if (v226 && (CFArrayRef v227 = v226, v228 = CFArrayGetCount(v226), v228 >= 2))
                      {
                        CFIndex v229 = 0;
                        uint64_t v230 = (v228 - 1);
                        while (1)
                        {
                          CFDictionaryRef v231 = (const __CFDictionary *)CFArrayGetValueAtIndex(v227, v229);
                          CFNumberRef v232 = (const __CFNumber *)CFDictionaryGetValue(v231, @"BitsPerBlock");
                          CFNumberGetValue(v232, kCFNumberLongType, &v280);
                          uint64_t v233 = (v280 * v286 + 8 * v283 - 1) / (8 * v283) * 8 * v283;
                          if (v233 < 0) {
                            v233 |= 7uLL;
                          }
                          if ((v233 >> 3) * *(void *)&valuePtr[0] % v282) {
                            break;
                          }
                          if (v230 == ++v229) {
                            goto LABEL_328;
                          }
                        }
                      }
                      else
                      {
LABEL_328:
                        CFArrayAppendValue(v222, v224);
                      }
                    }
                  }
                }
                if (!CFArrayGetCount(v222))
                {
                  reportResolutionFailure(theArray, "exact height incompatible with other attributes");
                  CFRelease(v222);
                  CVReturn v46 = -6660;
                  uint64_t v7 = theDict;
                  goto LABEL_394;
                }
                uint64_t v7 = theDict;
                CFDictionarySetValue(theDict, @"PixelFormatType", v222);
                CFRelease(v222);
                attributes = theArray;
                CFAllocatorRef v5 = allocatorb;
              }
            }
          }
          CFIndex v206 = (CFIndex)(v275 + 1);
        }
        while (v275 + 1 != (char *)Count);
      }
    }
    CFArrayRef v234 = CFSetCreateMutable(v5, 0, MEMORY[0x1E4F1D050]);
    if (Count >= 1)
    {
      for (CFIndex n = 0; n != Count; ++n)
      {
        CFDictionaryRef v236 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, n);
        CFBooleanRef v237 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"QDCompatibility");
        if (v237 && CFBooleanGetValue(v237)) {
          CFSetAddValue(v234, @"QDCompatibility");
        }
        CFBooleanRef v238 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"CGBitmapContextCompatibility");
        if (v238 && CFBooleanGetValue(v238)) {
          CFSetAddValue(v234, @"CGBitmapContextCompatibility");
        }
        CFBooleanRef v239 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"CGImageCompatibility");
        if (v239 && CFBooleanGetValue(v239)) {
          CFSetAddValue(v234, @"CGImageCompatibility");
        }
        CFBooleanRef v240 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"IOSurfaceCoreAnimationCompatibility");
        if (v240 && CFBooleanGetValue(v240)) {
          CFSetAddValue(v234, @"IOSurfaceCoreAnimationCompatibility");
        }
        CFBooleanRef v241 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"IOSurfaceCoreAnimationCompatibilityHTPCOK");
        if (v241 && CFBooleanGetValue(v241)) {
          CFSetAddValue(v234, @"IOSurfaceCoreAnimationCompatibilityHTPCOK");
        }
        CFBooleanRef v242 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"OpenGLESCompatibility");
        if (v242 && CFBooleanGetValue(v242)) {
          CFSetAddValue(v234, @"OpenGLESCompatibility");
        }
        CFBooleanRef v243 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"IOSurfaceOpenGLESTextureCompatibility");
        if (v243 && CFBooleanGetValue(v243)) {
          CFSetAddValue(v234, @"IOSurfaceOpenGLESTextureCompatibility");
        }
        CFBooleanRef v244 = (const __CFBoolean *)CFDictionaryGetValue(v236, @"IOSurfaceOpenGLESFBOCompatibility");
        if (v244 && CFBooleanGetValue(v244)) {
          CFSetAddValue(v234, @"IOSurfaceOpenGLESFBOCompatibility");
        }
      }
    }
    CFIndex v245 = CFSetGetCount(v234);
    if (!v245) {
      goto LABEL_379;
    }
    uint64_t v246 = v245;
    memset(valuePtr, 0, sizeof(valuePtr));
    CFSetGetValues(v234, (const void **)valuePtr);
    CFArrayRef v247 = (const __CFArray *)CFDictionaryGetValue(theDict, @"PixelFormatType");
    CFIndex v248 = CFArrayGetCount(v247);
    if (v246 >= 1)
    {
      int v249 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v250 = (const void **)valuePtr;
      uint64_t v251 = v246;
      do
      {
        v252 = *v250++;
        CFDictionarySetValue(theDict, v252, v249);
        --v251;
      }
      while (v251);
    }
    CFMutableArrayRef v253 = CFArrayCreateMutable(allocatorb, 0, MEMORY[0x1E4F1D510]);
    if (v253)
    {
      v254 = v253;
      CFArrayRef v255 = theArray;
      if (v248 >= 1)
      {
        CFIndex v256 = 0;
        valuea = (void *)v248;
        do
        {
          LODWORD(v286) = 0;
          CFNumberRef v257 = (const __CFNumber *)CFArrayGetValueAtIndex(v247, v256);
          CFNumberGetValue(v257, kCFNumberSInt32Type, &v286);
          CFDictionaryRef v258 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v286);
          if (v258)
          {
            if (v246 < 1) {
              goto LABEL_375;
            }
            CFDictionaryRef v259 = v258;
            CFArrayRef v260 = v247;
            int v261 = v254;
            int v262 = 1;
            int v263 = (const void **)valuePtr;
            uint64_t v264 = v246;
            do
            {
              CFBooleanRef v265 = (const __CFBoolean *)CFDictionaryGetValue(v259, *v263);
              if (!v265 || !CFBooleanGetValue(v265)) {
                int v262 = 0;
              }
              ++v263;
              --v264;
            }
            while (v264);
            v254 = v261;
            CFArrayRef v247 = v260;
            CFIndex v248 = (CFIndex)valuea;
            CFArrayRef v255 = theArray;
            if (v262) {
LABEL_375:
            }
              CFArrayAppendValue(v254, v257);
          }
          ++v256;
        }
        while (v256 != v248);
      }
      if (CFArrayGetCount(v254))
      {
        CFDictionarySetValue(theDict, @"PixelFormatType", v254);
        CFRelease(v254);
LABEL_379:
        CFRelease(v234);
        CVReturn v46 = 0;
        *int v269 = theDict;
        return v46;
      }
      reportResolutionFailure(v255, "no compatible pixel format");
      CFRelease(v234);
      CFRelease(v254);
      CVReturn v46 = -6660;
    }
    else
    {
      CFRelease(v234);
      CVReturn v46 = -6662;
    }
    int v268 = theDict;
LABEL_395:
    CFRelease(v268);
    return v46;
  }
  CFIndex v49 = 0;
  while (1)
  {
    CFDictionaryRef v50 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v49);
    CFBooleanRef v51 = (const __CFBoolean *)CFDictionaryGetValue(v50, @"IOSurfaceWiringAssertion");
    if (v51)
    {
      if (CFBooleanGetValue(v51)) {
        break;
      }
    }
    if (Count == ++v49) {
      goto LABEL_74;
    }
  }
  CFDictionarySetValue(v7, @"IOSurfaceWiringAssertion", (const void *)*MEMORY[0x1E4F1CFD0]);
LABEL_74:
  CFIndex v52 = 0;
  while (1)
  {
    CFDictionaryRef v53 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, v52);
    CFBooleanRef v54 = (const __CFBoolean *)CFDictionaryGetValue(v53, @"MetalCompatibility");
    if (v54)
    {
      if (CFBooleanGetValue(v54)) {
        break;
      }
    }
    if (Count == ++v52) {
      goto LABEL_80;
    }
  }
  CFDictionarySetValue(v7, @"MetalCompatibility", (const void *)*MEMORY[0x1E4F1CFD0]);
LABEL_80:
  for (iCFIndex i = 0; ii != Count; ++ii)
  {
    CFDictionaryRef v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, ii);
    CFDictionaryRef v57 = (const __CFDictionary *)CFDictionaryGetValue(v56, @"PropagatedAttachments");
    if (v57)
    {
      CFDictionaryRef v58 = v57;
      CFTypeID v59 = (void *)CFDictionaryGetValue(v7, @"PropagatedAttachments");
      if (v59)
      {
        CFDictionaryApplyFunction(v58, (CFDictionaryApplierFunction)mergeCFDictionaries, v59);
      }
      else
      {
        CFMutableDictionaryRef v60 = CFDictionaryCreateMutableCopy(0, 0, v58);
        CFDictionarySetValue(v7, @"PropagatedAttachments", v60);
        CFRelease(v60);
      }
    }
    CFDictionaryRef v61 = (const __CFDictionary *)CFDictionaryGetValue(v56, @"NonPropagatedAttachments");
    if (v61)
    {
      CFDictionaryRef v62 = v61;
      BOOL v63 = (void *)CFDictionaryGetValue(v7, @"NonPropagatedAttachments");
      if (v63)
      {
        CFDictionaryApplyFunction(v62, (CFDictionaryApplierFunction)mergeCFDictionaries, v63);
      }
      else
      {
        CFMutableDictionaryRef v64 = CFDictionaryCreateMutableCopy(0, 0, v62);
        CFDictionarySetValue(v7, @"NonPropagatedAttachments", v64);
        CFRelease(v64);
      }
    }
  }
  for (jCFIndex j = 0; jj != Count; ++jj)
  {
    CFDictionaryRef v66 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, jj);
    int v67 = CFDictionaryGetValue(v66, @"Width");
    if (v67)
    {
      int v68 = v67;
      int v69 = CFDictionaryGetValue(v7, @"Width");
      if (v69)
      {
        if (!CFEqual(v68, v69))
        {
          long long v13 = "width mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, @"Width", v68);
      }
    }
  }
  for (kCFIndex k = 0; kk != Count; ++kk)
  {
    CFDictionaryRef v71 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, kk);
    uint64_t v72 = CFDictionaryGetValue(v71, @"Height");
    if (v72)
    {
      uint64_t v73 = v72;
      uint64_t v74 = CFDictionaryGetValue(v7, @"Height");
      if (v74)
      {
        if (!CFEqual(v73, v74))
        {
          long long v13 = "height mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(v7, @"Height", v73);
      }
    }
  }
  CFAllocatorRef allocatora = v5;
  for (CFIndex mm = 0; mm != Count; ++mm)
  {
    CFDictionaryRef v76 = (const __CFDictionary *)CFArrayGetValueAtIndex(attributes, mm);
    uint64_t v77 = CFDictionaryGetValue(v76, @"ExactBytesPerRow");
    if (v77)
    {
      int v78 = v77;
      long long v79 = CFDictionaryGetValue(v7, @"ExactBytesPerRow");
      if (v79)
      {
        if (!CFEqual(v78, v79))
        {
          long long v13 = "exact bytes per row mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        uint64_t v286 = 0;
        *(void *)&valuePtr[0] = 0;
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v78) && CFArrayGetCount((CFArrayRef)v78) == 2)
        {
          CFNumberRef v81 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v78, 0);
          CFNumberRef v82 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v78, 1);
          CFTypeID v83 = CFNumberGetTypeID();
          if (v83 == CFGetTypeID(v81))
          {
            CFTypeID v84 = CFNumberGetTypeID();
            if (v84 == CFGetTypeID(v82))
            {
              CFNumberGetValue(v81, kCFNumberLongType, valuePtr);
              CFNumberGetValue(v82, kCFNumberLongType, &v286);
            }
          }
        }
        CFArrayRef v85 = (const __CFArray *)CFDictionaryGetValue(v7, @"PixelFormatType");
        CFIndex v86 = CFArrayGetCount(v85);
        uint64_t v87 = CFArrayCreateMutable(allocatora, 0, MEMORY[0x1E4F1D510]);
        if (v86 >= 1)
        {
          for (CFIndex nn = 0; nn != v86; ++nn)
          {
            LODWORD(v284) = 0;
            CFNumberRef v89 = (const __CFNumber *)CFArrayGetValueAtIndex(v85, nn);
            CFNumberGetValue(v89, kCFNumberSInt32Type, &v284);
            CFDictionaryRef v90 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v284);
            if (v90)
            {
              int v91 = CFDictionaryGetValue(v90, @"ExactRatioBetweenBytesPerRowOfPlanes");
              if (v91)
              {
                CFArrayRef v92 = v91;
                CFTypeID v93 = CFNumberGetTypeID();
                BOOL v94 = v93 == CFGetTypeID(v92);
                attributes = theArray;
                if (v94)
                {
                  uint64_t v285 = 0;
                  CFNumberGetValue((CFNumberRef)v92, kCFNumberLongType, &v285);
                  if (*(void *)&valuePtr[0])
                  {
                    if (v286 && v285 * *(void *)&valuePtr[0] != v286) {
                      continue;
                    }
                  }
                }
              }
            }
            CFArrayAppendValue(v87, v89);
          }
        }
        if (!CFArrayGetCount(v87))
        {
          reportResolutionFailure(attributes, "exact rowbytes incompatible with exact rowbytes ratio.");
          CFRelease(v87);
          int v45 = theDict;
          goto LABEL_62;
        }
        uint64_t v7 = theDict;
        CFDictionarySetValue(theDict, @"PixelFormatType", v87);
        CFRelease(v87);
        CFDictionarySetValue(theDict, @"ExactBytesPerRow", v78);
      }
    }
  }
  CFIndex v95 = 0;
  uint64_t v96 = "bytes per row alignemnt vs exact bytes per row mismatch";
  CFAllocatorRef v5 = allocatora;
  do
  {
    CFDictionaryRef v97 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v95);
    CFNumberRef v98 = (const __CFNumber *)CFDictionaryGetValue(v97, @"BytesPerRowAlignment");
    if (v98)
    {
      CFNumberRef v99 = v98;
      CFNumberRef v100 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ExactBytesPerRow");
      if (v100)
      {
        CFNumberRef v101 = v100;
        uint64_t v286 = 0;
        *(void *)&valuePtr[0] = 0;
        CFNumberGetValue(v99, kCFNumberLongType, valuePtr);
        CFTypeID v102 = CFNumberGetTypeID();
        if (v102 == CFGetTypeID(v101))
        {
          CFNumberGetValue(v101, kCFNumberLongType, &v286);
          if (*(uint64_t *)&valuePtr[0] < 1 || v286 % *(void *)&valuePtr[0]) {
            goto LABEL_382;
          }
        }
        else
        {
          CFTypeID v109 = CFArrayGetTypeID();
          if (v109 == CFGetTypeID(v101))
          {
            CFIndex v110 = CFArrayGetCount(v101);
            if (v110 >= 1)
            {
              CFIndex v111 = v110;
              CFIndex v112 = 0;
              while (1)
              {
                CFNumberRef v113 = (const __CFNumber *)CFArrayGetValueAtIndex(v101, v112);
                CFNumberGetValue(v113, kCFNumberLongType, &v286);
                if (*(uint64_t *)&valuePtr[0] < 1 || v286 % *(void *)&valuePtr[0]) {
                  break;
                }
                if (v111 == ++v112) {
                  goto LABEL_165;
                }
              }
              uint64_t v96 = "planar bytes per row alignemnt vs exact bytes per row mismatch";
LABEL_382:
              reportResolutionFailure(theArray, v96);
LABEL_383:
              v266 = theDict;
              goto LABEL_385;
            }
          }
        }
      }
      else
      {
        CFNumberRef v103 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"BytesPerRowAlignment");
        if (v103)
        {
          CFNumberRef v104 = v103;
          uint64_t v286 = 0;
          *(void *)&valuePtr[0] = 0;
          uint64_t v285 = 0;
          CFNumberGetValue(v99, kCFNumberLongType, valuePtr);
          CFNumberGetValue(v104, kCFNumberLongType, &v286);
          if (*(uint64_t *)&valuePtr[0] >= 0) {
            uint64_t v105 = *(void *)&valuePtr[0];
          }
          else {
            uint64_t v105 = -*(void *)&valuePtr[0];
          }
          if (v286 >= 0) {
            uint64_t v106 = v286;
          }
          else {
            uint64_t v106 = -v286;
          }
          if (v105 <= v106) {
            uint64_t v107 = v106;
          }
          else {
            uint64_t v107 = v105;
          }
          if (v105 >= v106) {
            uint64_t v105 = v106;
          }
          if (v105)
          {
            uint64_t v108 = v107;
            if (v105 >= 1)
            {
              do
              {
                uint64_t v108 = v105;
                uint64_t v105 = v107 % v105;
                uint64_t v107 = v108;
              }
              while (v105 > 0);
            }
          }
          else if ((unint64_t)v107 <= 1)
          {
            uint64_t v108 = 1;
          }
          else
          {
            uint64_t v108 = v107;
          }
          uint64_t v285 = v286 * *(void *)&valuePtr[0] / v108;
          CFNumberRef v114 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
          if (!v114) {
            goto LABEL_383;
          }
          CFNumberRef v115 = v114;
          CFDictionarySetValue(theDict, @"BytesPerRowAlignment", v114);
          CFRelease(v115);
        }
        else
        {
          CFDictionarySetValue(theDict, @"BytesPerRowAlignment", v99);
        }
      }
    }
LABEL_165:
    ++v95;
  }
  while (v95 != Count);
  CFIndex v116 = 0;
  uint64_t v7 = theDict;
  attributes = theArray;
  do
  {
    CFDictionaryRef v117 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v116);
    uint64_t v118 = CFDictionaryGetValue(v117, @"ExactHeight");
    if (v118)
    {
      uint64_t v119 = v118;
      int v120 = CFDictionaryGetValue(theDict, @"ExactHeight");
      if (v120)
      {
        if (!CFEqual(v119, v120))
        {
          long long v13 = "exact height mismatch";
          goto LABEL_60;
        }
      }
      else
      {
        CFDictionarySetValue(theDict, @"ExactHeight", v119);
      }
    }
    ++v116;
  }
  while (Count != v116);
  CFIndex v121 = 0;
  while (2)
  {
    CFDictionaryRef v122 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v121);
    unint64_t v123 = CFDictionaryGetValue(v122, @"PlaneAlignment");
    if (!v123)
    {
LABEL_197:
      if (++v121 == Count)
      {
        CFIndex v133 = 0;
        while (1)
        {
          CFDictionaryRef v134 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v133);
          CFNumberRef v135 = (const __CFNumber *)CFDictionaryGetValue(v134, @"CompressedDataRegionAlignment");
          if (v135)
          {
            CFNumberRef v136 = v135;
            CFNumberRef v137 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CompressedDataRegionAlignment");
            if (v137)
            {
              CFNumberRef v138 = v137;
              uint64_t v286 = 0;
              *(void *)&valuePtr[0] = 0;
              uint64_t v285 = 0;
              CFNumberGetValue(v136, kCFNumberLongType, valuePtr);
              CFNumberGetValue(v138, kCFNumberLongType, &v286);
              if (*(uint64_t *)&valuePtr[0] >= 0) {
                uint64_t v139 = *(void *)&valuePtr[0];
              }
              else {
                uint64_t v139 = -*(void *)&valuePtr[0];
              }
              if (v286 >= 0) {
                uint64_t v140 = v286;
              }
              else {
                uint64_t v140 = -v286;
              }
              if (v139 <= v140) {
                uint64_t v141 = v140;
              }
              else {
                uint64_t v141 = v139;
              }
              if (v139 >= v140) {
                uint64_t v139 = v140;
              }
              if (v139)
              {
                uint64_t v142 = v141;
                if (v139 >= 1)
                {
                  do
                  {
                    uint64_t v142 = v139;
                    uint64_t v139 = v141 % v139;
                    uint64_t v141 = v142;
                  }
                  while (v139 > 0);
                }
              }
              else if ((unint64_t)v141 <= 1)
              {
                uint64_t v142 = 1;
              }
              else
              {
                uint64_t v142 = v141;
              }
              uint64_t v285 = v286 * *(void *)&valuePtr[0] / v142;
              CFNumberRef v143 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
              if (!v143) {
                goto LABEL_384;
              }
              CFNumberRef v144 = v143;
              CFDictionarySetValue(theDict, @"CompressedDataRegionAlignment", v143);
              CFRelease(v144);
            }
            else
            {
              CFDictionarySetValue(theDict, @"CompressedDataRegionAlignment", v136);
            }
          }
          if (++v133 == Count)
          {
            CFIndex v145 = 0;
            while (1)
            {
              CFDictionaryRef v146 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v145);
              CFNumberRef v147 = (const __CFNumber *)CFDictionaryGetValue(v146, @"CompressedTileHeaderGroupBytesPerRowAlignment");
              if (v147)
              {
                CFNumberRef v148 = v147;
                CFNumberRef v149 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"CompressedTileHeaderGroupBytesPerRowAlignment");
                if (v149)
                {
                  CFNumberRef v150 = v149;
                  uint64_t v286 = 0;
                  *(void *)&valuePtr[0] = 0;
                  uint64_t v285 = 0;
                  CFNumberGetValue(v148, kCFNumberLongType, valuePtr);
                  CFNumberGetValue(v150, kCFNumberLongType, &v286);
                  if (*(uint64_t *)&valuePtr[0] >= 0) {
                    uint64_t v151 = *(void *)&valuePtr[0];
                  }
                  else {
                    uint64_t v151 = -*(void *)&valuePtr[0];
                  }
                  if (v286 >= 0) {
                    uint64_t v152 = v286;
                  }
                  else {
                    uint64_t v152 = -v286;
                  }
                  if (v151 <= v152) {
                    uint64_t v153 = v152;
                  }
                  else {
                    uint64_t v153 = v151;
                  }
                  if (v151 >= v152) {
                    uint64_t v151 = v152;
                  }
                  if (v151)
                  {
                    uint64_t v154 = v153;
                    if (v151 >= 1)
                    {
                      do
                      {
                        uint64_t v154 = v151;
                        uint64_t v151 = v153 % v151;
                        uint64_t v153 = v154;
                      }
                      while (v151 > 0);
                    }
                  }
                  else if ((unint64_t)v153 <= 1)
                  {
                    uint64_t v154 = 1;
                  }
                  else
                  {
                    uint64_t v154 = v153;
                  }
                  uint64_t v285 = v286 * *(void *)&valuePtr[0] / v154;
                  CFNumberRef v155 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
                  if (!v155) {
                    goto LABEL_384;
                  }
                  CFNumberRef v156 = v155;
                  CFDictionarySetValue(theDict, @"CompressedTileHeaderGroupBytesPerRowAlignment", v155);
                  CFRelease(v156);
                }
                else
                {
                  CFDictionarySetValue(theDict, @"CompressedTileHeaderGroupBytesPerRowAlignment", v148);
                }
              }
              if (++v145 == Count)
              {
                CFIndex v157 = 0;
                unsigned int v158 = (const void *)*MEMORY[0x1E4F2F230];
                do
                {
                  CFDictionaryRef v159 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v157);
                  int v160 = CFDictionaryGetValue(v159, v158);
                  if (v160)
                  {
                    char v161 = v160;
                    unsigned int v162 = CFDictionaryGetValue(theDict, v158);
                    if (v162)
                    {
                      if (!CFEqual(v161, v162))
                      {
                        long long v13 = "kIOSurfacePlaneHorizontalPixelOffsetWithinCompressedTileArray mismatch";
                        goto LABEL_60;
                      }
                    }
                    else
                    {
                      CFDictionarySetValue(theDict, v158, v161);
                    }
                  }
                  ++v157;
                }
                while (Count != v157);
                CFIndex v163 = 0;
                unsigned int v164 = (const void *)*MEMORY[0x1E4F2F250];
                while (1)
                {
                  CFDictionaryRef v165 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v163);
                  char v166 = CFDictionaryGetValue(v165, v164);
                  if (v166)
                  {
                    uint64_t v167 = v166;
                    int v168 = CFDictionaryGetValue(theDict, v164);
                    if (v168)
                    {
                      if (!CFEqual(v167, v168))
                      {
                        long long v13 = "kIOSurfacePlaneVerticalPixelOffsetWithinCompressedTileArray mismatch";
                        goto LABEL_60;
                      }
                    }
                    else
                    {
                      CFDictionarySetValue(theDict, v164, v167);
                    }
                  }
                  if (Count == ++v163)
                  {
                    CFIndex v169 = 0;
                    while (1)
                    {
                      CFDictionaryRef v170 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v169);
                      CFNumberRef v171 = (const __CFNumber *)CFDictionaryGetValue(v170, @"ExtendedPixelsLeft");
                      if (v171)
                      {
                        CFNumberRef v172 = v171;
                        CFNumberRef v173 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ExtendedPixelsLeft");
                        if (v173)
                        {
                          CFNumberRef v174 = v173;
                          uint64_t v286 = 0;
                          *(void *)&valuePtr[0] = 0;
                          uint64_t v285 = 0;
                          CFNumberGetValue(v172, kCFNumberLongType, valuePtr);
                          CFNumberGetValue(v174, kCFNumberLongType, &v286);
                          uint64_t v175 = *(void *)&valuePtr[0];
                          if (*(uint64_t *)&valuePtr[0] <= v286) {
                            uint64_t v175 = v286;
                          }
                          uint64_t v285 = v175;
                          CFNumberRef v176 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
                          if (!v176) {
                            goto LABEL_384;
                          }
                          CFNumberRef v177 = v176;
                          CFDictionarySetValue(theDict, @"ExtendedPixelsLeft", v176);
                          CFRelease(v177);
                        }
                        else
                        {
                          CFDictionarySetValue(theDict, @"ExtendedPixelsLeft", v172);
                        }
                      }
                      if (Count == ++v169)
                      {
                        CFIndex v178 = 0;
                        while (1)
                        {
                          CFDictionaryRef v179 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v178);
                          CFNumberRef v180 = (const __CFNumber *)CFDictionaryGetValue(v179, @"ExtendedPixelsRight");
                          if (v180)
                          {
                            CFNumberRef v181 = v180;
                            CFNumberRef v182 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ExtendedPixelsRight");
                            if (v182)
                            {
                              CFNumberRef v183 = v182;
                              uint64_t v286 = 0;
                              *(void *)&valuePtr[0] = 0;
                              uint64_t v285 = 0;
                              CFNumberGetValue(v181, kCFNumberLongType, valuePtr);
                              CFNumberGetValue(v183, kCFNumberLongType, &v286);
                              uint64_t v184 = *(void *)&valuePtr[0];
                              if (*(uint64_t *)&valuePtr[0] <= v286) {
                                uint64_t v184 = v286;
                              }
                              uint64_t v285 = v184;
                              CFNumberRef v185 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
                              if (!v185) {
                                goto LABEL_384;
                              }
                              CFNumberRef v186 = v185;
                              CFDictionarySetValue(theDict, @"ExtendedPixelsRight", v185);
                              CFRelease(v186);
                            }
                            else
                            {
                              CFDictionarySetValue(theDict, @"ExtendedPixelsRight", v181);
                            }
                          }
                          if (Count == ++v178)
                          {
                            CFIndex v187 = 0;
                            while (1)
                            {
                              CFDictionaryRef v188 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v187);
                              CFNumberRef v189 = (const __CFNumber *)CFDictionaryGetValue(v188, @"ExtendedPixelsTop");
                              if (v189)
                              {
                                CFNumberRef v190 = v189;
                                CFNumberRef v191 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ExtendedPixelsTop");
                                if (v191)
                                {
                                  CFNumberRef v192 = v191;
                                  uint64_t v286 = 0;
                                  *(void *)&valuePtr[0] = 0;
                                  uint64_t v285 = 0;
                                  CFNumberGetValue(v190, kCFNumberLongType, valuePtr);
                                  CFNumberGetValue(v192, kCFNumberLongType, &v286);
                                  uint64_t v193 = *(void *)&valuePtr[0];
                                  if (*(uint64_t *)&valuePtr[0] <= v286) {
                                    uint64_t v193 = v286;
                                  }
                                  uint64_t v285 = v193;
                                  CFNumberRef v194 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
                                  if (!v194) {
                                    goto LABEL_384;
                                  }
                                  CFNumberRef v195 = v194;
                                  CFDictionarySetValue(theDict, @"ExtendedPixelsTop", v194);
                                  CFRelease(v195);
                                }
                                else
                                {
                                  CFDictionarySetValue(theDict, @"ExtendedPixelsTop", v190);
                                }
                              }
                              if (Count == ++v187)
                              {
                                CFIndex v196 = 0;
                                while (1)
                                {
                                  CFDictionaryRef v197 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v196);
                                  CFNumberRef v198 = (const __CFNumber *)CFDictionaryGetValue(v197, @"ExtendedPixelsBottom");
                                  if (v198)
                                  {
                                    CFNumberRef v199 = v198;
                                    CFNumberRef v200 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"ExtendedPixelsBottom");
                                    if (v200)
                                    {
                                      CFNumberRef v201 = v200;
                                      uint64_t v286 = 0;
                                      *(void *)&valuePtr[0] = 0;
                                      uint64_t v285 = 0;
                                      CFNumberGetValue(v199, kCFNumberLongType, valuePtr);
                                      CFNumberGetValue(v201, kCFNumberLongType, &v286);
                                      uint64_t v202 = *(void *)&valuePtr[0];
                                      if (*(uint64_t *)&valuePtr[0] <= v286) {
                                        uint64_t v202 = v286;
                                      }
                                      uint64_t v285 = v202;
                                      CFNumberRef v203 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
                                      if (!v203) {
                                        goto LABEL_384;
                                      }
                                      CFNumberRef v204 = v203;
                                      CFDictionarySetValue(theDict, @"ExtendedPixelsBottom", v203);
                                      CFRelease(v204);
                                    }
                                    else
                                    {
                                      CFDictionarySetValue(theDict, @"ExtendedPixelsBottom", v199);
                                    }
                                  }
                                  if (Count == ++v196) {
                                    goto LABEL_298;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      continue;
    }
    break;
  }
  int v124 = v123;
  CFNumberRef v125 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"PlaneAlignment");
  if (!v125)
  {
    CFDictionarySetValue(theDict, @"PlaneAlignment", v124);
    goto LABEL_197;
  }
  CFNumberRef v126 = v125;
  uint64_t v286 = 0;
  *(void *)&valuePtr[0] = 0;
  uint64_t v285 = 0;
  CFNumberGetValue((CFNumberRef)v124, kCFNumberLongType, valuePtr);
  CFNumberGetValue(v126, kCFNumberLongType, &v286);
  if (*(uint64_t *)&valuePtr[0] >= 0) {
    uint64_t v127 = *(void *)&valuePtr[0];
  }
  else {
    uint64_t v127 = -*(void *)&valuePtr[0];
  }
  if (v286 >= 0) {
    uint64_t v128 = v286;
  }
  else {
    uint64_t v128 = -v286;
  }
  if (v127 <= v128) {
    uint64_t v129 = v128;
  }
  else {
    uint64_t v129 = v127;
  }
  if (v127 >= v128) {
    uint64_t v127 = v128;
  }
  if (v127)
  {
    uint64_t v130 = v129;
    if (v127 >= 1)
    {
      do
      {
        uint64_t v130 = v127;
        uint64_t v127 = v129 % v127;
        uint64_t v129 = v130;
      }
      while (v127 > 0);
    }
  }
  else if ((unint64_t)v129 <= 1)
  {
    uint64_t v130 = 1;
  }
  else
  {
    uint64_t v130 = v129;
  }
  uint64_t v285 = v286 * *(void *)&valuePtr[0] / v130;
  CFNumberRef v131 = CFNumberCreate(allocatora, kCFNumberLongType, &v285);
  if (v131)
  {
    CFNumberRef v132 = v131;
    CFDictionarySetValue(theDict, @"PlaneAlignment", v131);
    CFRelease(v132);
    goto LABEL_197;
  }
LABEL_384:
  v266 = v7;
LABEL_385:
  CFRelease(v266);
  return -6662;
}

BOOL restrictToPixelFormatTypeListIntersection(const __CFAllocator *a1, __CFDictionary *a2, void *cf, const __CFString *a4)
{
  values = cf;
  CFTypeID v8 = CFGetTypeID(cf);
  if (v8 == CFArrayGetTypeID())
  {
    CFArrayRef v9 = (const __CFArray *)CFRetain(cf);
  }
  else
  {
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 != CFNumberGetTypeID()) {
      return 0;
    }
    CFArrayRef v9 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  }
  CFArrayRef v11 = v9;
  if (!v9) {
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a2, a4);
  if (Value)
  {
    CFArrayRef v13 = Value;
    CFIndex Count = CFArrayGetCount(v11);
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
    CFIndex v16 = CFArrayGetCount(v13);
    if (v16 >= 1)
    {
      CFIndex v17 = v16;
      for (CFIndex i = 0; i != v17; ++i)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v13, i);
        v23.locatioCFIndex n = 0;
        v23.length = Count;
        if (CFArrayContainsValue(v11, v23, ValueAtIndex)) {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
      }
    }
    CFDictionarySetValue(a2, a4, Mutable);
    CFRelease(Mutable);
  }
  else
  {
    CFDictionarySetValue(a2, a4, v11);
  }
  CFRelease(v11);
  CFArrayRef v21 = (const __CFArray *)CFDictionaryGetValue(a2, a4);
  return !v21 || CFArrayGetCount(v21) == 0;
}

uint64_t CVPixelFormatDescriptionGetPixelFormatTypes()
{
  uint64_t result = _pixelFormatTypes;
  if (!_pixelFormatTypes)
  {
    pthread_once(&once, _pixelFormatDictionaryInit);
    return _pixelFormatTypes;
  }
  return result;
}

void reportResolutionFailure(const __CFArray *a1, const char *a2)
{
  if ((reportResolutionFailure(__CFArray const*,char const*)::sDidCheck & 1) == 0)
  {
    AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"verbose_resolve", @"com.apple.corevideo", 0);
    reportResolutionFailure(__CFArray const*,char const*)::sVerboseCompatibility = AppBooleanValue != 0;
    if (AppBooleanValue) {
      syslog(3, "CoreVideo: will explain CVPixelBufferCreateResolvedAttributesDictionary' decisions -- thank you for setting \"defaults write com.apple.corevideo verbose_resolve -BOOL YES\"\n");
    }
    reportResolutionFailure(__CFArray const*,char const*)::sDidChecCFIndex k = 1;
  }
  if (reportResolutionFailure(__CFArray const*,char const*)::sVerboseCompatibility) {
    syslog(3, "CVPixelBufferCreateResolvedAttributesDictionary: (%p) %s\n", a1, a2);
  }
}

double CVLocklessBunchPair::getMaximumBufferAge(atomic_ullong *this, double a2, double a3)
{
  unint64_t add_explicit = atomic_fetch_add_explicit(this + 30, 0, memory_order_relaxed);
  if (!CVHostTimeBase::sIsInited) {
    a2 = CVHostTimeBase::Initialize((CVHostTimeBase *)this);
  }
  LODWORD(a2) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(a3) = CVHostTimeBase::sToNanosDenominator;
  return (double)(unint64_t)((double)add_explicit
                                  / (double)*(unint64_t *)&a3
                                  * (double)*(unint64_t *)&a2)
       / 1000000000.0;
}

const void *CVBuffer::copyAttachment(CFDictionaryRef *this, const __CFString *a2, CVAttachmentMode *a3)
{
  char v6 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  uint64_t v7 = 0;
  char v8 = 1;
  while (1)
  {
    char v9 = v8;
    CFArrayRef Value = CFDictionaryGetValue(this[v7 + 10], a2);
    CFArrayRef v11 = Value;
    if (Value) {
      break;
    }
    char v8 = 0;
    uint64_t v7 = 1;
    if ((v9 & 1) == 0) {
      goto LABEL_8;
    }
  }
  if (a3) {
    *a3 = v7;
  }
  CFRetain(Value);
LABEL_8:
  pthread_mutex_unlock(v6);
  return v11;
}

void mergeCFDictionariesUnlessTheyConflict(const void *key, const void *a2, CFDictionaryRef *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFArrayRef Value = CFDictionaryGetValue(*a3, key);
  if (Value)
  {
    uint64_t v7 = Value;
    if (!CFEqual(Value, a2))
    {
      CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"CVPixelBufferCreateResolvedAttributesDictionary: conflict merging IOSurfaceProperties: key %@, values %@ and %@", key, v7, a2);
      CFStringGetCString(v8, buffer, 300, 0x600u);
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "%s\n", buffer);
      CFRelease(v8);
      *((unsigned char *)a3 + 8) = 1;
    }
  }
  else
  {
    char v9 = *a3;
    CFDictionarySetValue(v9, key, a2);
  }
}

uint64_t CVDataBuffer::setAttachment(CVDataBuffer *this, const __CFString *a2, const void *a3, unsigned int a4)
{
  uint64_t v8 = CVBuffer::setAttachment(this, a2, a3, a4);
  uint64_t v9 = v8;
  if (a4 == 1 && !v8)
  {
    CFTypeID v10 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 14) + 208))(*((void *)this + 14));
    if (v10) {
      IOSurfaceSetValue(v10, a2, a3);
    }
  }
  return v9;
}

uint64_t CVBuffer::setAttachment(CVBuffer *this, const __CFString *a2, const void *a3, unsigned int a4)
{
  if (a4 > 1) {
    return 4294960635;
  }
  uint64_t result = 4294960635;
  if (a2 && a3)
  {
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    CFArrayRef Value = CFDictionaryGetValue(*((CFDictionaryRef *)this + 10), a2);
    CFTypeID v10 = Value;
    if (Value) {
      CFRetain(Value);
    }
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 10), a2);
    uint64_t v11 = CFDictionaryGetValue(*((CFDictionaryRef *)this + 11), a2);
    long long v12 = v11;
    if (v11) {
      CFRetain(v11);
    }
    CFDictionaryRemoveValue(*((CFMutableDictionaryRef *)this + 11), a2);
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + a4 + 10), a2, a3);
    if (v10) {
      CFRelease(v10);
    }
    if (v12) {
      CFRelease(v12);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 16));
    return 0;
  }
  return result;
}

uint64_t CVPixelBuffer::getAttachments(CVPixelBuffer *this, unsigned int a2)
{
  if (_os_feature_enabled_impl())
  {
    uint64_t context = 0;
    CFTypeID v4 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
    CFAllocatorRef v5 = (pthread_mutex_t *)((char *)this + 16);
    pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
    if (a2 == 1 && v4 && (CFDictionaryRef v6 = IOSurfaceCopyAllValues(v4)) != 0)
    {
      CFDictionaryRef v7 = v6;
      uint64_t context = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      insertColorSpaceIntoDictionaryUsingID(v7, context);
      CFDictionaryApplyFunction(v7, (CFDictionaryApplierFunction)translateIOSurfaceKeyToCoreVideoAttachmentKeyAndStoreIt, &context);
      CVBuffer::setAttachments(this, context, 1u);
      uint64_t Attachments = CVBuffer::getAttachments(this, 1u);
      CFRelease(v7);
      if (context) {
        CFRelease(context);
      }
    }
    else
    {
      uint64_t Attachments = CVBuffer::getAttachments(this, a2);
    }
    pthread_mutex_unlock(v5);
    return Attachments;
  }
  else
  {
    return CVBuffer::getAttachments(this, a2);
  }
}

uint64_t CVBuffer::getAttachments(CVBuffer *this, unsigned int a2)
{
  if (a2 <= 1) {
    return *((void *)this + a2 + 10);
  }
  else {
    return 0;
  }
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  CVReturn v33 = 0;
  if (pixelBufferOut) {
    BOOL v10 = baseAddress == 0;
  }
  else {
    BOOL v10 = 1;
  }
  BOOL v13 = v10 || width == 0 || height == 0 || bytesPerRow == 0;
  if (v13 || !is_mul_ok(height, bytesPerRow)) {
    return -6661;
  }
  *pixelBufferOut = 0;
  if (pixelBufferAttributes) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFRange v23 = MutableCopy;
  if (!MutableCopy) {
    return -6662;
  }
  if (!pixelFormatType)
  {
    if (CFDictionaryGetValue(MutableCopy, @"PixelFormatDescription")) {
      goto LABEL_23;
    }
LABEL_30:
    int v31 = -6680;
    goto LABEL_31;
  }
  DescriptionWithOSType PixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
  if (!DescriptionWithPixelFormatType) {
    goto LABEL_30;
  }
  CFDictionarySetValue(v23, @"PixelFormatDescription", DescriptionWithPixelFormatType);
LABEL_23:
  CFRange v26 = CVPixelBufferBacking::alloc(allocator, v25);
  if (v26)
  {
    CVReturn v27 = v26;
    if ((*(uint64_t (**)(CVImageBacking *, size_t, size_t, void *, size_t, size_t, void, void, void, void, void, CVPixelBufferReleaseBytesCallback, void, void *, __CFDictionary *, void, void, void, void, void, CVReturn *))(*(void *)v26[2] + 248))(v26[2], width, height, baseAddress, bytesPerRow * height, bytesPerRow, 0, 0, 0, 0, 0, releaseCallback, 0, releaseRefCon, v23, 0, 0, 0, 0,
           0,
           &v33))
    {
      kdebug_trace();
      CFIndex v29 = (__CVBuffer *)CVPixelBuffer::alloc(allocator, v28);
      if (v29)
      {
        double v30 = v29;
        if ((*(uint64_t (**)(void, CVImageBacking *))(**((void **)v29 + 2) + 248))(*((void *)v29 + 2), v27[2]))
        {
          *pixelBufferOut = v30;
        }
        else
        {
          CVReturn v33 = -6660;
          CFRelease(v30);
        }
      }
      else
      {
        CVReturn v33 = -6662;
      }
      CFRelease(v27);
    }
    goto LABEL_32;
  }
  int v31 = -6662;
LABEL_31:
  CVReturn v33 = v31;
LABEL_32:
  CFRelease(v23);
  return v33;
}

uint64_t CVBuffer::removeAttachment(CFMutableDictionaryRef *this, const __CFString *a2)
{
  CFTypeID v4 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  CFDictionaryRemoveValue(this[10], a2);
  CFDictionaryRemoveValue(this[11], a2);

  return pthread_mutex_unlock(v4);
}

uint64_t CVDataBufferPool::finalize(CVDataBufferPool *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 4) = 0;
  CFDictionaryRef v3 = (const void *)*((void *)this + 5);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 5) = 0;
  CFTypeID v4 = (void *)*((void *)this + 15);
  if (v4) {
    free(v4);
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;

  return CVBufferPool::finalize(this);
}

void CVDataBuffer::removeAttachment(CFMutableDictionaryRef *this, const __CFString *a2)
{
  CVBuffer::removeAttachment(this, a2);
  CFTypeID v4 = (__IOSurface *)(*(uint64_t (**)(CFMutableDictionaryRef))(*(void *)this[14] + 208))(this[14]);
  if (v4)
  {
    IOSurfaceRemoveValue(v4, a2);
  }
}

uint64_t classInitialize_CVLocklessBunchPair(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVLocklessBunchPairint ID = result;
  return result;
}

uint64_t classInitialize_CVPixelBufferPool(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVPixelBufferPoolint ID = result;
  return result;
}

uint64_t classFinalize_CVDataBufferPool(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

uint64_t initPixelBufferBackingSummary(void)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t result = CFPreferencesGetAppBooleanValue(@"backings_trace", @"com.apple.corevideo", 0);
  if (result)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v1 = 136315138;
      uint64_t v2 = "CoreVideo: will trace total backings -- thank you for setting \"defaults write com.apple.corevideo backings_t"
           "race -BOOL YES\"";
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v1, 0xCu);
    }
    uint64_t result = (uint64_t)CFBagCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D520]);
    gPixelBufferBackingSummaryBag = result;
  }
  return result;
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D620;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D648;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D670;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D698;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D6C0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D6E8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_420YpCbCr10BiPlanarWideRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D710;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D738;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D760;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_422YpCbCr10BiPlanarWideRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D788;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D7B0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D7D8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC32x4_444YpCbCr10BiPlanarWideRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D800;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D828;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D850;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D878;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D8A0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D8C8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D8F0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D918;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D940;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D968;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_420YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D990;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_422YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D9B8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8LumaOnly_444YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1D9E0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DA08;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DA30;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DA58;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DA80;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DAA8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr8BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DAD0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarVideoRange(int a1)
{
  int v1 = &unk_1EFA1DB20;
  if (a1) {
    int v1 = 0;
  }
  if (a1 == 0x80000) {
    return &unk_1EFA1DAF8;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DB48;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DB70;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr10BiPlanarFullRange(int a1)
{
  int v1 = &unk_1EFA1DBC0;
  if (a1) {
    int v1 = 0;
  }
  if (a1 == 0x80000) {
    return &unk_1EFA1DB98;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DBE8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr10BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DC10;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DC38;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DC60;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarVideoRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DC88;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_420YpCbCr12BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DCB0;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_422YpCbCr12BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DCD8;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_HTPC16x8_444YpCbCr12BiPlanarFullRange(int a1)
{
  if (a1) {
    return 0;
  }
  else {
    return &unk_1EFA1DD00;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_16LE565(int a1)
{
  int v1 = &unk_1EFA1DD50;
  if (a1 != 0x20000) {
    int v1 = 0;
  }
  if (a1 == 0x10000) {
    return &unk_1EFA1DD28;
  }
  else {
    return v1;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_32BGRA_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD3F60[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_30RGBLEPackedWideGamut_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD3F90[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_40ARGBLEWideGamut_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD3FC0[v1];
  }
}

void *retrievePixelFormat_kCVPixelFormatType_Lossless_Packed40ARGBLEFullRange(int a1)
{
  unsigned int v1 = &unk_1EFA1E110;
  unint64_t v2 = &unk_1EFA1E0E8;
  if (a1 != 0x40000) {
    unint64_t v2 = 0;
  }
  if (a1 != 393216) {
    unsigned int v1 = v2;
  }
  if (a1 == 0x20000) {
    return &unk_1EFA1E0C0;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent8_AGX(int a1)
{
  unsigned int v1 = &unk_1EFA1E160;
  if (a1 != 0x20000) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x10000) {
    return &unk_1EFA1E138;
  }
  else {
    return v1;
  }
}

void *retrievePixelFormat_kCVPixelFormatType_AGX_OneComponent10_AGX(int a1)
{
  unsigned int v1 = &unk_1EFA1E1D8;
  if (a1 != 0x20000) {
    unsigned int v1 = 0;
  }
  if (a1 == 0x10000) {
    return &unk_1EFA1E1B0;
  }
  else {
    return v1;
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_64RGBAHalf_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD3FF0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarVideoRange_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD4020[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarVideoRange_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD4050[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarVideoRange_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD4080[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_420YpCbCr8BiPlanarFullRange_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD40B0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_422YpCbCr8BiPlanarFullRange_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD40E0[v1];
  }
}

uint64_t retrievePixelFormat_kCVPixelFormatType_AGX_444YpCbCr8BiPlanarFullRange_AGX(int a1)
{
  HIDWORD(v2) = a1;
  LODWORD(v2) = a1 - 0x10000;
  unsigned int v1 = v2 >> 16;
  if (v1 > 5) {
    return 0;
  }
  else {
    return qword_1E5BD4110[v1];
  }
}

IOSurfaceRef IOOrEXSurfaceGetUseCount(IOSurfaceRef buffer)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetUseCount(buffer);
  }
  return buffer;
}

IOSurfaceRef IOOrEXSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  if (buffer) {
    return (IOSurfaceRef)IOSurfaceGetElementHeightOfPlane(buffer, planeIndex);
  }
  return buffer;
}

void *CVDataBufferPoolGetAttributes(void *a1)
{
  uint64_t result = _getCVDataBufferPool(a1);
  if (result)
  {
    unint64_t v2 = *(uint64_t (**)(void))(*result + 112);
    return (void *)v2();
  }
  return result;
}

uint64_t CVDataBufferPoolCreateDataBufferWithAuxAttributes(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  unsigned int v10 = -6660;
  CVDataBufferPool = _getCVDataBufferPool(a2);
  uint64_t v8 = 4294960635;
  if (a4 && CVDataBufferPool)
  {
    *a4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, unsigned int *))(*CVDataBufferPool + 104))(CVDataBufferPool, a1, a3, &v10);
    return v10;
  }
  return v8;
}

uint64_t CVDataBufferPoolScanIOSurfaces(void *a1)
{
  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (!CVDataBufferPool) {
    return 4294960635;
  }
  unint64_t v2 = *(uint64_t (**)(void))(*CVDataBufferPool + 192);

  return v2();
}

uint64_t CVDataBufferPoolScanIOSurfacesWithOptions(void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (!CVDataBufferPool) {
    return 4294960635;
  }
  uint64_t v8 = CVDataBufferPool;
  if (a4)
  {
    int BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(a4, @"ScanFreeIOSurfaces", 0);
    int v10 = CVDictionaryGetBoolValueWithDefault(a4, @"ScanUsedIOSurfaces", 0);
    if (!(v10 | BoolValueWithDefault)) {
      return 4294960635;
    }
    if (v10) {
      uint64_t v12 = (2 * (BoolValueWithDefault != 0)) | 4u;
    }
    else {
      uint64_t v12 = 2 * (BoolValueWithDefault != 0);
    }
  }
  else
  {
    uint64_t v12 = 2;
  }
  BOOL v13 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v8 + 192);

  return v13(v8, a2, a3, v12);
}

uint64_t CVDataBufferPoolPrefetchPages(void *a1)
{
  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (!CVDataBufferPool) {
    return 4294960635;
  }
  unint64_t v2 = *(uint64_t (**)(void))(*CVDataBufferPool + 176);

  return v2();
}

uint64_t CVDataBufferPoolFlush(void *a1, uint64_t a2)
{
  CVDataBufferPool = _getCVDataBufferPool(a1);
  uint64_t result = kdebug_trace();
  if (CVDataBufferPool)
  {
    CFAllocatorRef v5 = *(uint64_t (**)(void *, uint64_t))(*CVDataBufferPool + 184);
    return v5(CVDataBufferPool, a2);
  }
  return result;
}

uint64_t CVDataBufferPoolSetMinBufferCount(void *a1)
{
  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (!CVDataBufferPool) {
    return 4294960635;
  }
  unint64_t v2 = *(uint64_t (**)(void))(*CVDataBufferPool + 144);

  return v2();
}

uint64_t CVDataBufferPoolGetMinBufferCount(void *a1)
{
  CVDataBufferPool = _getCVDataBufferPool(a1);
  if (!CVDataBufferPool) {
    return -6661;
  }
  unint64_t v2 = *(uint64_t (**)(void))(*CVDataBufferPool + 152);

  return v2();
}

uint64_t CVDataBufferPoolTakeOwnershipOfIOSurface(const __CFAllocator *a1, CFTypeRef cf, __IOSurface *a3)
{
  unsigned int v25 = 0;
  uint64_t result = 4294960635;
  if (cf && a3)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 != CVDataBufferPoolGetTypeID()) {
      return 4294960635;
    }
    uint64_t v8 = *((void *)cf + 2);
    if (!v8) {
      return 4294960635;
    }
    CFDictionaryRef v9 = (const __CFDictionary *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 120))(v8);
    if (!v9) {
      return 4294960635;
    }
    CFDictionaryRef v10 = v9;
    CFArrayRef Value = CFDictionaryGetValue(v9, @"IOSurfaceProperties");
    uint64_t v12 = Value;
    if (Value)
    {
      CFTypeID v13 = CFGetTypeID(Value);
      if (v13 != CFDictionaryGetTypeID()) {
        return 4294960635;
      }
    }
    uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v12, (const void *)*MEMORY[0x1E4F2EFB8], 0);
    BOOL v15 = IntValueWithDefault != IOSurfaceGetAllocSize(a3) || IntValueWithDefault == 0;
    if (!v15
      && (uint64_t v16 = CVDictionaryGetIntValueWithDefault(v12, (const void *)*MEMORY[0x1E4F2F150], 0),
          IOSurfaceGetPixelFormat(a3) == v16))
    {
      if (!IOSurfaceGetWidth(a3)
        && !IOSurfaceGetHeight(a3)
        && !IOSurfaceGetBytesPerRow(a3)
        && IOSurfaceGetBytesPerElement(a3) == 1
        && IOSurfaceGetElementWidth(a3) == 1
        && IOSurfaceGetElementHeight(a3) == 1)
      {
        MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(a1, 0, v10);
        if (MutableCopy)
        {
          CFMutableDictionaryRef v18 = MutableCopy;
          uint64_t ID = IOSurfaceGetID(a3);
          char v24 = 0;
          (*(void (**)(uint64_t, __IOSurface *(*)(__IOSurface *, unsigned char *), uint64_t *, uint64_t))(*(void *)v8 + 192))(v8, dataBufferPoolScanIOSurfacesCallback, &ID, 6);
          if (v24)
          {
            int v20 = -6661;
          }
          else
          {
            CFArrayRef v21 = CVDataBufferBacking::alloc(a1, v19);
            if (v21)
            {
              CFDataRef v22 = v21;
              if ((*(uint64_t (**)(CVBufferBacking *, uint64_t, uint64_t, CFMutableDictionaryRef, void, __IOSurface *, unsigned int *))(*(void *)v21[2] + 176))(v21[2], v16, IntValueWithDefault, v18, 0, a3, &v25))
              {
                unsigned int v25 = (*(uint64_t (**)(uint64_t, CVBufferBacking **))(*(void *)v8 + 200))(v8, v22);
                if (v25) {
                  CFRelease(v22);
                }
              }
              goto LABEL_23;
            }
            int v20 = -6662;
          }
          unsigned int v25 = v20;
LABEL_23:
          CFRelease(v18);
          return v25;
        }
      }
      return 4294960634;
    }
    else
    {
      return 4294960635;
    }
  }
  return result;
}

__IOSurface *dataBufferPoolScanIOSurfacesCallback(__IOSurface *result, unsigned char *a2)
{
  if (result && a2)
  {
    uint64_t result = (__IOSurface *)IOSurfaceGetID(result);
    if (*(void *)a2 == result) {
      a2[8] = 1;
    }
  }
  return result;
}

uint64_t CVDataBufferCreateWithIOSurface(CFAllocatorRef allocator, __IOSurface *a2, const __CFDictionary *a3, CVBuffer ***a4)
{
  unsigned int v32 = 0;
  if (!a4 || !a2) {
    return -6661;
  }
  *a4 = 0;
  if (a3) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(allocator, 0, a3);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  CFDictionaryRef v8 = MutableCopy;
  if (!MutableCopy) {
    return -6662;
  }
  size_t AllocSize = IOSurfaceGetAllocSize(a2);
  if (!AllocSize || (size_t v10 = AllocSize, PixelFormat = IOSurfaceGetPixelFormat(a2), !PixelFormat))
  {
    int v22 = -6680;
LABEL_22:
    unsigned int v32 = v22;
    CFRange v23 = v8;
LABEL_42:
    CFRelease(v23);
    return v32;
  }
  uint64_t v12 = PixelFormat;
  if (IOSurfaceGetWidth(a2)
    || IOSurfaceGetHeight(a2)
    || IOSurfaceGetBytesPerRow(a2)
    || IOSurfaceGetBytesPerElement(a2) != 1
    || IOSurfaceGetElementWidth(a2) != 1
    || IOSurfaceGetElementHeight(a2) != 1)
  {
    int v22 = -6662;
    goto LABEL_22;
  }
  CFDictionaryRef v13 = IOSurfaceCopyAllValues(a2);
  BOOL v15 = CVDataBufferBacking::alloc(allocator, v14);
  if (v15)
  {
    uint64_t v16 = v15;
    if (!(*(uint64_t (**)(CVBufferBacking *, uint64_t, size_t, const __CFDictionary *, void, __IOSurface *, unsigned int *))(*(void *)v15[2] + 176))(v15[2], v12, v10, v8, 0, a2, &v32))
    {
      CFMutableDictionaryRef v18 = 0;
      goto LABEL_38;
    }
    CFMutableDictionaryRef v18 = CVDataBuffer::alloc(allocator, v17);
    if (v18)
    {
      CFAllocatorRef v19 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v19 == CFDictionaryGetValue(v8, @"IOSurfaceDoNotIncrementUseCount"))
      {
        CFTypeID v20 = CFGetTypeID(v18);
        if (v20 == CVDataBufferGetTypeID()) {
          uint64_t v21 = (uint64_t)v18[2];
        }
        else {
          uint64_t v21 = 0;
        }
        CVDataBuffer::setDoNotAutomaticallyBumpUseCount(v21);
      }
      if ((*(uint64_t (**)(CVBuffer *, CVBufferBacking *))(*(void *)v18[2] + 160))(v18[2], v16[2]))
      {
        CFTypeID v24 = CFGetTypeID(v18);
        if (v24 == CVDataBufferGetTypeID())
        {
          unsigned int v25 = v18[2];
          if (v25) {
            CVDataBuffer::pullAttachmentsFromIOSurface(v25, v13);
          }
        }
        CVTracePoolAction(1, 0, (void **)v16, "CVDataBuffer created from IOSurface", 0, 0);
        if (v13)
        {
          CFArrayRef Value = CFDictionaryGetValue(v13, (const void *)*MEMORY[0x1E4F2F128]);
          if (Value)
          {
            CVReturn v27 = Value;
            CFTypeID v28 = CFGetTypeID(Value);
            if (v28 == CFStringGetTypeID()) {
              CVBufferBacking::setPoolName((atomic_uint *)v16[2], v27);
            }
          }
        }
        *a4 = v18;
        CFMutableDictionaryRef v18 = 0;
        goto LABEL_37;
      }
      int v29 = -6660;
    }
    else
    {
      int v29 = -6662;
    }
    unsigned int v32 = v29;
LABEL_37:
    CFRelease(v16);
    goto LABEL_38;
  }
  CFMutableDictionaryRef v18 = 0;
  unsigned int v32 = -6662;
LABEL_38:
  CFRelease(v8);
  if (v13) {
    CFRelease(v13);
  }
  if (v18)
  {
    CFRange v23 = v18;
    goto LABEL_42;
  }
  return v32;
}

uint64_t CVDataBufferIncrementUseCountForCategory(void *a1, unsigned int a2)
{
  CVDataBuffer = (CVDataBuffer *)_getCVDataBuffer(a1);
  if (a2 > 1 || !CVDataBuffer) {
    return 4294960635;
  }

  return CVDataBuffer::incrementUseCountForCategory(CVDataBuffer, a2);
}

uint64_t CVDataBufferDecrementUseCountForCategory(void *a1, unsigned int a2)
{
  CVDataBuffer = (CVDataBuffer *)_getCVDataBuffer(a1);
  if (a2 > 1 || !CVDataBuffer) {
    return 4294960635;
  }

  return CVDataBuffer::decrementUseCountForCategory(CVDataBuffer, a2);
}

uint64_t CVAtomicBunchGetAndRemoveAnyObject(uint64_t result)
{
  *(void *)&v6[4] = 0;
  if (result)
  {
    uint64_t v1 = result;
    for (uint64_t i = *(void *)(result + 16); i; uint64_t i = *(void *)i)
    {
      if (*(void *)&v6[4]) {
        break;
      }
      *(void *)CFDictionaryRef v6 = *(unsigned int *)(i + 16);
      if ((v6[0] & 1) == 0 && (v6[0] & 4) != 0)
      {
        char v3 = 1;
        char v7 = ElementModifyFlags(i, 1, 0x10000);
        if ((v7 & 1) == 0 && (v7 & 4) != 0)
        {
          char v3 = 0;
          *(void *)&v6[4] = *(void *)(i + 8);
          atomic_fetch_add_explicit(*(atomic_uint *volatile *)(v1 + 32), -1 << *(unsigned char *)(v1 + 40), memory_order_relaxed);
        }
        do
        {
          unsigned int v8 = *(_DWORD *)(i + 16) - 0x10000;
          if ((v3 & 1) == 0) {
            v8 &= 0xFFFFFFF8;
          }
          int v4 = *(_DWORD *)(i + 16);
          int v5 = v4;
          atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(i + 16), (unsigned int *)&v5, v8, memory_order_relaxed, memory_order_relaxed);
        }
        while (v5 != v4);
      }
    }
    return *(void *)&v6[4];
  }
  return result;
}

uint64_t CVOpenGLESContext::operator new(CVOpenGLESContext *this, uint64_t a2, void *a3)
{
  return a2;
}

CVObject **CVOpenGLESContext::alloc(CVOpenGLESContext *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVOpenGLESContext *)_cvTrackingGetCFAllocator(@"CVOpenGLESContext");
  }
  CFTypeID TypeID = (CVObject *)CVObjectGetTypeID();
  int v4 = (CVObject **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  int v5 = v4;
  if (v4)
  {
    CVObject::CVObject(v4[2], v4);
    void *v6 = &unk_1EFA16AA0;
  }
  return v5;
}

void CVOpenGLESContext::CVOpenGLESContext(CVOpenGLESContext *this, const void *a2)
{
  CVObject::CVObject(this, a2);
  *unint64_t v2 = &unk_1EFA16AA0;
}

uint64_t CVOpenGLESContext::finalize(CVOpenGLESContext *this)
{
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2 && *((unsigned char *)this + 96)) {

  }
  return CVObject::finalize(this);
}

CVOpenGLESContext *CVOpenGLESContext::initWithContext(CVOpenGLESContext *this, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  pthread_mutexattr_init(&v6);
  pthread_mutexattr_settype(&v6, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), &v6);
  pthread_mutexattr_destroy(&v6);
  *((unsigned char *)this + 96) = 1;
  if (CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextOnce != -1) {
    dispatch_once(&CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextOnce, &__block_literal_global);
  }
  int v4 = objc_msgSend(objc_alloc((Class)CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextClass), "initWithAPI:sharegroup:", objc_msgSend(a2, "API"), objc_msgSend(a2, "sharegroup"));
  *((void *)this + 1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = v4;
  if (v4)
  {
    *((void *)this + 11) = [v4 getMacroContextPrivate];
  }
  else
  {
    (*(void (**)(CVOpenGLESContext *))(*(void *)this + 40))(this);
    return 0;
  }
  return this;
}

Class ___ZN17CVOpenGLESContext15initWithContextEPv_block_invoke()
{
  Class result = NSClassFromString(&cfstr_Eaglcontext.isa);
  CVOpenGLESContext::initWithContext(void *)::sCVEAGLContextClass = (uint64_t)result;
  return result;
}

CVOpenGLESContext *CVOpenGLESContext::initWithNonRetainedContext(CVOpenGLESContext *this, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  pthread_mutexattr_init(&v5);
  pthread_mutexattr_settype(&v5, 2);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 16), &v5);
  pthread_mutexattr_destroy(&v5);
  *((unsigned char *)this + 96) = 0;
  *((void *)this + 1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = a2;
  *((void *)this + 11) = [a2 getMacroContextPrivate];
  return this;
}

uint64_t CVOpenGLESContext::texImageIOSurface(id *this, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7, __IOSurface *a8, unsigned int a9)
{
  BYTE4(v1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  LODWORD(v1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = a9;
  return objc_msgSend(this[10], "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", a8, a2, a3, a4, a5, a6, a7, v10);
}

uint64_t CVBufferBacking::enterCriticalReadSection(CVBufferBacking *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 176))();
  }
  return result;
}

uint64_t CVBufferBacking::enterCriticalWriteSection(CVBufferBacking *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 184))();
  }
  return result;
}

uint64_t CVBufferBacking::exitCriticalSection(CVBufferBacking *this)
{
  uint64_t result = *((void *)this + 11);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 192))();
  }
  return result;
}

uint64_t CVBufferBacking::hasIOSurfaceWiringAssertionBeenCreated(CVBufferBacking *this)
{
  return 0;
}

uint64_t CVBufferBacking::bunchPair(CVBufferBacking *this)
{
  return *((void *)this + 11);
}

uint64_t CVBufferBacking::createCVBuffer(CVBufferBacking *this, const __CFAllocator *a2)
{
  return 0;
}

uint64_t CVBufferBacking::getIOOrEXSurface(CVBufferBacking *this)
{
  return 0;
}

uint64_t CVBufferBacking::getIOOrEXSurfaceWithoutAssertion(CVBufferBacking *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 152))();
}

uint64_t CVBufferBacking::setNeverAgeOutBacking(uint64_t this)
{
  *(unsigned char *)(this + 113) = 1;
  return this;
}

BOOL CVBufferBacking::okToAgeOutBacking(CVBufferBacking *this)
{
  return *((unsigned char *)this + 113) == 0;
}

void CVBufferBacking::initPoolName(atomic_uint *this)
{
  if (!this[32])
  {
    unint64_t v2 = (__IOSurface *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 152))(this);
    if (v2)
    {
      CFTypeRef v3 = IOSurfaceCopyValue(v2, (CFStringRef)*MEMORY[0x1E4F2F128]);
      if (v3)
      {
        int v4 = v3;
        CFTypeID v5 = CFGetTypeID(v3);
        if (v5 == CFStringGetTypeID()) {
          CVBufferBacking::setPoolName(this, v4);
        }
        CFRelease(v4);
      }
    }
  }
}

uint64_t CVBufferBacking::getPoolName(atomic_uint *this)
{
  int v2 = 0;
  atomic_compare_exchange_strong_explicit(this + 32, (unsigned int *)&v2, 1u, memory_order_relaxed, memory_order_relaxed);
  if (!v2) {
    CVBufferBacking::initPoolName(this);
  }
  return *((void *)this + 15);
}

CFTypeRef CVMetalBufferRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

void CVMetalBufferRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t CVMetalBufferGetTypeID()
{
  if (CVMetalBufferGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBuffer);
  }
  return kCVMetalBufferID;
}

uint64_t classInitialize_CVMetalBuffer(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVMetalBufferuint64_t ID = result;
  return result;
}

CVBuffer **CVMetalBuffer::alloc(CVMetalBuffer *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVMetalBuffer *)_cvTrackingGetCFAllocator(@"CVMetalBuffer");
  }
  if (CVMetalBufferGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalBufferGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBuffer);
  }
  CFTypeRef v3 = (CVBuffer **)CVObject::alloc((CVObject *)kCVMetalBufferID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  int v4 = v3;
  if (v3)
  {
    CVBuffer::CVBuffer(v3[2], v3);
    void *v5 = &unk_1EFA16500;
    v5[12] = 0;
  }
  return v4;
}

void CVMetalBuffer::CVMetalBuffer(CVMetalBuffer *this, const void *a2)
{
  CVBuffer::CVBuffer(this, a2);
  *int v2 = &unk_1EFA16500;
  v2[12] = 0;
}

uint64_t CVMetalBuffer::finalize(CVMetalBuffer *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 72))(v2);
    (*(void (**)(void))(**((void **)this + 12) + 40))(*((void *)this + 12));
    *((void *)this + 12) = 0;
  }

  return CVBuffer::finalize(this);
}

CFTypeRef *CVMetalBuffer::initWithBufferBacking(CFTypeRef *this, CVMetalBufferBacking *a2)
{
  CFTypeRef v3 = this;
  if (!CVBuffer::init(this)) {
    return 0;
  }
  uint64_t v4 = (*(uint64_t (**)(CVMetalBufferBacking *))(*(void *)a2 + 32))(a2);
  v3[12] = (CFTypeRef)v4;
  (*(void (**)(uint64_t))(*(void *)v4 + 64))(v4);
  return v3;
}

uint64_t CVMetalBuffer::getBacking(CVMetalBuffer *this)
{
  return *((void *)this + 12);
}

CFStringRef CVMetalBuffer::copyDebugDescription(CVMetalBuffer *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVMetalBuffer *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVMetalBuffer *))(*(void *)this + 24))(this);
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 12) + 184))(*((void *)this + 12));
  CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"<%@Ref %p buffer=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>", v4, v5, v6, *((void *)this + 11), *((void *)this + 10));
  CFRelease(v4);
  return v7;
}

uint64_t classFinalize_CVMetalBuffer(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVMetalBuffer(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVMetalBufferRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalBuffer(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

CFTypeID CVOpenGLESTextureGetTypeID(void)
{
  if (CVOpenGLESTextureGetTypeID::once != -1) {
    dispatch_once_f(&CVOpenGLESTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTexture);
  }
  return kCVOpenGLESTextureID;
}

uint64_t classInitialize_CVOpenGLESTexture(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVOpenGLESTextureuint64_t ID = result;
  return result;
}

CVImageBuffer **CVOpenGLESTexture::alloc(CVOpenGLESTexture *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVOpenGLESTexture *)_cvTrackingGetCFAllocator(@"CVOpenGLESTexture");
  }
  if (CVOpenGLESTextureGetTypeID::once != -1) {
    dispatch_once_f(&CVOpenGLESTextureGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTexture);
  }
  CFTypeID v3 = (CVImageBuffer **)CVObject::alloc((CVObject *)kCVOpenGLESTextureID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    CVImageBuffer::CVImageBuffer(v3[2], v3);
    void *v5 = &unk_1EFA16AF8;
    v5[12] = 0;
  }
  return v4;
}

void CVOpenGLESTexture::CVOpenGLESTexture(CVOpenGLESTexture *this, const void *a2)
{
  CVImageBuffer::CVImageBuffer(this, a2);
  *uint64_t v2 = &unk_1EFA16AF8;
  v2[12] = 0;
}

uint64_t CVOpenGLESTexture::finalize(CVOpenGLESTexture *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v2)) {
      (*(void (**)(void))(**((void **)this + 12) + 72))(*((void *)this + 12));
    }
    (*(void (**)(void))(**((void **)this + 12) + 40))(*((void *)this + 12));
    *((void *)this + 12) = 0;
  }

  return CVImageBuffer::finalize(this);
}

CFTypeRef *CVOpenGLESTexture::initWithTextureBacking(CFTypeRef *this, CVOpenGLESTextureBacking *a2)
{
  CFTypeID v3 = this;
  if (!CVImageBuffer::init(this)) {
    return 0;
  }
  (*(void (**)(CVOpenGLESTextureBacking *))(*(void *)a2 + 32))(a2);
  v3[12] = a2;
  if ((*(uint64_t (**)(CVOpenGLESTextureBacking *))(*(void *)a2 + 344))(a2)) {
    (*(void (**)(CFTypeRef))(*(void *)v3[12] + 64))(v3[12]);
  }
  return v3;
}

uint64_t CVOpenGLESTexture::getBacking(CVOpenGLESTexture *this)
{
  return *((void *)this + 12);
}

uint64_t CVOpenGLESTexture::getImageBacking(CVOpenGLESTexture *this)
{
  return *((void *)this + 12);
}

float CVOpenGLESTexture::getCleanTexCoords(CVOpenGLESTexture *this, float *a2, float *a3, float *a4, float *a5)
{
  double v10 = (*(double (**)(CVOpenGLESTexture *))(*(void *)this + 192))(this);
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v17 = (*(double (**)(void))(**((void **)this + 12) + 176))(*((void *)this + 12));
  double v19 = v18;
  float v20 = v12;
  float v21 = v12 + v16;
  if ((*(unsigned int (**)(void))(**((void **)this + 12) + 200))(*((void *)this + 12)))
  {
    float v20 = v19 - v20;
    float v21 = v19 - v21;
  }
  float v22 = v10 / v17;
  *a5 = v22;
  *a2 = v22;
  float v23 = (v10 + v14) / v17;
  *a4 = v23;
  float v24 = v20 / v19;
  *a3 = v23;
  a3[1] = v24;
  a2[1] = v24;
  float result = v21 / v19;
  a4[1] = result;
  a5[1] = result;
  return result;
}

CFStringRef CVOpenGLESTexture::copyDebugDescription(CVOpenGLESTexture *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVOpenGLESTexture *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVOpenGLESTexture *))(*(void *)this + 24))(this);
  double v6 = (*(double (**)(void))(**((void **)this + 12) + 176))(*((void *)this + 12));
  (*(void (**)(void))(**((void **)this + 12) + 176))(*((void *)this + 12));
  uint64_t v8 = v7;
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 12) + 264))();
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 12) + 272))();
  int v11 = (*(uint64_t (**)(void))(**((void **)this + 12) + 200))(*((void *)this + 12));
  double v12 = "YES";
  if (!v11) {
    double v12 = "NO";
  }
  CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"< %@Ref %p size=%g,%g target=%04x name=%u isFlipped=%s propagatedAttachments=%@ nonPropagatedAttachments=%@>", v4, v5, *(void *)&v6, v8, v9, v10, v12, *((void *)this + 11), *((void *)this + 10));
  CFRelease(v4);
  return v13;
}

uint64_t classFinalize_CVOpenGLESTexture(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVOpenGLESTexture(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVOpenGLESTextureRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVOpenGLESTexture(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

uint64_t CVBufferPool::getName(CVBufferPool *this)
{
  return *((void *)this + 3);
}

uint64_t dumpToQTESWithParams(const char *a1, signed int a2, int a3, _DWORD *a4, _DWORD *a5, uint64_t a6, uint64_t a7, const __CFDictionary *a8)
{
  double v12 = a1;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  int v49 = 1;
  int valuePtr = 8;
  size_t v13 = strlen(a1);
  double v14 = (char *)malloc_type_malloc(v13 + 5, 0x7E97318BuLL);
  sprintf(v14, "%s.vid", v12);
  double v15 = fopen(v14, "wb");
  free(v14);
  if (!v15)
  {
    printf("Failed to open file for writing: %s", 0);
    int v19 = 0;
    uint64_t v20 = 0xFFFFFFFFLL;
    goto LABEL_21;
  }
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a2);
  if (!DescriptionWithPixelFormatType) {
    goto LABEL_6;
  }
  CFDictionaryRef ValueAtIndex = DescriptionWithPixelFormatType;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, @"Planes");
  CFArrayRef theArray = Value;
  if (!Value)
  {
    if (a3 == 1)
    {
LABEL_9:
      uint64_t v41 = v12;
      signed int v42 = a2;
      CFDictionaryRef v43 = a8;
      CFIndex v21 = 0;
      int v19 = 0;
      uint64_t v45 = a3;
      do
      {
        int v49 = 1;
        int valuePtr = 8;
        CFDictionaryRef v22 = ValueAtIndex;
        if (theArray) {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v21);
        }
        CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"BitsPerBlock");
        if (v23) {
          CFNumberGetValue(v23, kCFNumberIntType, &valuePtr);
        }
        CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"BlockWidth");
        if (v24) {
          CFNumberGetValue(v24, kCFNumberIntType, &v49);
        }
        int v25 = a5[v21];
        int v26 = valuePtr / 8 * ((a4[v21] + v49 - 1) / v49);
        if (v25 >= 1)
        {
          CVReturn v27 = *(char **)(a7 + 8 * v21);
          int v28 = a5[v21];
          do
          {
            fwrite(v27, 1uLL, v26, v15);
            v27 += *(int *)(a6 + 4 * v21);
            --v28;
          }
          while (v28);
        }
        v19 += v26 * v25;
        ++v21;
        CFDictionaryRef ValueAtIndex = v22;
      }
      while (v21 != v45);
      goto LABEL_20;
    }
    unint64_t v39 = "pixel format only expects one plane.";
LABEL_38:
    puts(v39);
    return 0xFFFFFFFFLL;
  }
  if (CFArrayGetCount(Value) != a3)
  {
    unint64_t v39 = "Number planes doesn't match the number of planes expected for this pixel format.";
    goto LABEL_38;
  }
  if (a3 >= 1) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v41 = v12;
  signed int v42 = a2;
  CFDictionaryRef v43 = a8;
  int v19 = 0;
LABEL_20:
  fclose(v15);
  uint64_t v20 = 0;
  a2 = v42;
  a8 = v43;
  double v12 = v41;
LABEL_21:
  int v29 = fopen(v12, "w");
  if (!v29)
  {
    printf("Failed to open file for writing: %s", v12);
    return 0xFFFFFFFFLL;
  }
  double v30 = v29;
  fwrite("<?xml version=\"1.0\"?>\n", 0x16uLL, 1uLL, v29);
  fwrite("<?quicktime type=\"application/x-qt-qtes\"?>\n\n", 0x2CuLL, 1uLL, v30);
  fwrite("<elementary_streams>\n", 0x15uLL, 1uLL, v30);
  fwrite("\t<video\n", 8uLL, 1uLL, v30);
  fprintf(v30, "\t\tsrc=\"file://localhost%s.vid\"\n", v12);
  if (a2 > 0x28)
  {
    fprintf(v30, "\t\tcodec=\"%c%c%c%c\"\n", (a2 >> 24), (a2 << 8 >> 24), ((__int16)a2 >> 8), (char)a2);
    a2 = 24;
  }
  else
  {
    fwrite("\t\tcodec=\"raw \"\n", 0xFuLL, 1uLL, v30);
  }
  fprintf(v30, "\t\twidth=\"%d\"\n", *a4);
  fprintf(v30, "\t\theight=\"%d\"\n", *a5);
  fprintf(v30, "\t\tbytes_per_frame=\"%d\"\n", v19);
  fprintf(v30, "\t\tdepth=\"%d\"\n", a2);
  fprintf(v30, "\t\ttimescale=\"%d\"\n", 600);
  fprintf(v30, "\t\tframeduration=\"%d\"\n", 20);
  if (a8)
  {
    CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(a8, @"CVImageBufferYCbCrMatrix");
    if (v31)
    {
      CFStringRef v32 = v31;
      CFStringGetCString(@"CVImageBufferYCbCrMatrix", buffer, 512, 0x600u);
      CFStringGetCString(v32, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
    CFStringRef v33 = (const __CFString *)CFDictionaryGetValue(a8, @"CVImageBufferChromaLocationTopField");
    if (v33)
    {
      CFStringRef v34 = v33;
      CFStringGetCString(@"CVImageBufferChromaLocationTopField", buffer, 512, 0x600u);
      CFStringGetCString(v34, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
    CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(a8, @"CVImageBufferChromaLocationBottomField");
    if (v35)
    {
      CFStringRef v36 = v35;
      CFStringGetCString(@"CVImageBufferChromaLocationBottomField", buffer, 512, 0x600u);
      CFStringGetCString(v36, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
    CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(a8, @"CVImageBufferChromaSubsampling");
    if (v37)
    {
      CFStringRef v38 = v37;
      CFStringGetCString(@"CVImageBufferChromaSubsampling", buffer, 512, 0x600u);
      CFStringGetCString(v38, v51, 512, 0x600u);
      fprintf(v30, "\t\t%s=\"%s\"\n", buffer, v51);
    }
  }
  fwrite("\t/>\n", 4uLL, 1uLL, v30);
  fwrite("</elementary_streams>\n", 0x16uLL, 1uLL, v30);
  fclose(v30);
  return v20;
}

double CVMetalTextureGetSize(void *a1)
{
  CVMetalTexture = _getCVMetalTexture(a1);
  if (!CVMetalTexture) {
    return 0.0;
  }
  (*(void (**)(void))(*(void *)CVMetalTexture[13] + 176))(CVMetalTexture[13]);
  return result;
}

Boolean CVMetalTextureIsFlipped(CVMetalTextureRef image)
{
  CVMetalTexture = _getCVMetalTexture(image);
  if (CVMetalTexture)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)CVMetalTexture[13] + 200);
    LOBYTE(CVMetalTexture) = v2();
  }
  return CVMetalTexture;
}

double CVMetalTextureGetCleanRect(void *a1)
{
  CVMetalTexture = _getCVMetalTexture(a1);
  if (!CVMetalTexture) {
    return 0.0;
  }
  (*(void (**)(void *))(*CVMetalTexture + 192))(CVMetalTexture);
  return result;
}

void CVMetalTextureGetCleanTexCoords(CVMetalTextureRef image, float *lowerLeft, float *lowerRight, float *upperRight, float *upperLeft)
{
  CVMetalTexture = _getCVMetalTexture(image);
  if (CVMetalTexture)
  {
    uint64_t v10 = *(void (**)(void))(*CVMetalTexture + 256);
    v10();
  }
  else
  {
    *(void *)lowerLeft = 0;
    *(void *)lowerRight = 0;
    *(void *)upperRight = 0;
    *(void *)upperLeft = 0;
  }
}

void *CVMetalTextureBackingImage(void *a1)
{
  double result = _getCVMetalTexture(a1);
  if (result) {
    return *(void **)(result[13] + 168);
  }
  return result;
}

void *CVMetalTextureBufferBackingImage(void *a1)
{
  double result = _getCVMetalTexture(a1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*result + 160);
    return (void *)v2();
  }
  return result;
}

__CVBuffer *CVMetalTextureCopyBacking(void *a1)
{
  CVMetalTexture = _getCVMetalTexture(a1);
  if (!CVMetalTexture) {
    return 0;
  }
  uint64_t v3 = *(void *)(CVMetalTexture[13] + 168);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFIndex v5 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, CFAllocatorRef))(*(void *)v3 + 144))(v3, v4);
  if (v5) {
    CVBufferPropagateAttachments((CVBufferRef)a1, v5);
  }
  return v5;
}

uint64_t CVGreatestCommonDivisor(int a1, int a2)
{
  if (a1 >= 0) {
    LODWORD(v2) = a1;
  }
  else {
    LODWORD(v2) = -a1;
  }
  if (a2 >= 0) {
    int v3 = a2;
  }
  else {
    int v3 = -a2;
  }
  if ((int)v2 <= v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = v2;
  }
  if ((int)v2 >= v3) {
    uint64_t v2 = v3;
  }
  else {
    uint64_t v2 = v2;
  }
  if (v2)
  {
    if ((int)v2 < 1)
    {
      return v4;
    }
    else
    {
      do
      {
        uint64_t result = v2;
        uint64_t v2 = ((int)v4 % (int)v2);
        LODWORD(v4) = result;
      }
      while ((int)v2 > 0);
    }
  }
  else if (v4 <= 1)
  {
    return 1;
  }
  else
  {
    return v4;
  }
  return result;
}

uint64_t CVDictionaryGetSizeTFromDataValueInDictionaryWithDefault(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFDataRef v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == CFDataGetTypeID())
    {
      BytePtr = CFDataGetBytePtr(v5);
      if (BytePtr) {
        return *(void *)BytePtr;
      }
    }
  }
  return a3;
}

void cvDictionaryMerger(const void *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID == CFGetTypeID(a2) && CFDictionaryContainsKey(a3, a1))
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a3, a1);
    MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(v7, 0, Value);
    if (CFArrayGetCount(MutableCopy) >= 1)
    {
      CFIndex v10 = 0;
      do
      {
        if (v10 >= CFArrayGetCount(a2)) {
          break;
        }
        CFTypeID v11 = CFDictionaryGetTypeID();
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(MutableCopy, v10);
        if (v11 == CFGetTypeID(ValueAtIndex))
        {
          CFTypeID v13 = CFDictionaryGetTypeID();
          double v14 = CFArrayGetValueAtIndex(a2, v10);
          if (v13 == CFGetTypeID(v14))
          {
            CFDictionaryRef v15 = (const __CFDictionary *)CFArrayGetValueAtIndex(MutableCopy, v10);
            CFMutableDictionaryRef v16 = CFDictionaryCreateMutableCopy(v7, 0, v15);
            CFDictionaryRef v17 = (const __CFDictionary *)CFArrayGetValueAtIndex(a2, v10);
            CFDictionaryApplyFunction(v17, (CFDictionaryApplierFunction)cvDictionaryMerger, v16);
            CFArraySetValueAtIndex(MutableCopy, v10, v16);
            CFRelease(v16);
          }
        }
        ++v10;
      }
      while (v10 < CFArrayGetCount(MutableCopy));
    }
    CFDictionarySetValue(a3, a1, MutableCopy);
    CFArrayRef v18 = MutableCopy;
    goto LABEL_14;
  }
  CFTypeID v19 = CFDictionaryGetTypeID();
  if (v19 == CFGetTypeID(a2) && CFDictionaryContainsKey(a3, a1))
  {
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(a3, a1);
    CFMutableDictionaryRef v22 = CFDictionaryCreateMutableCopy(v20, 0, v21);
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)cvDictionaryMerger, v22);
    CFDictionarySetValue(a3, a1, v22);
    CFArrayRef v18 = v22;
LABEL_14:
    CFRelease(v18);
    return;
  }

  CFDictionarySetValue(a3, a1, a2);
}

uint64_t CVCFDictionaryMergeDictionaryInPlace(void *context, CFDictionaryRef theDict)
{
  return 0;
}

uint64_t CVSetValueFromDictToDict(CFDictionaryRef theDict, const void *a2, __CFDictionary *a3, const void *a4)
{
  uint64_t result = 0;
  if (a4 && a2 && theDict && a3)
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, a2);
    if (result)
    {
      CFDictionarySetValue(a3, a4, (const void *)result);
      return 1;
    }
  }
  return result;
}

__CFString *CVCreateHexDumpString(const unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  for (uint64_t i = CFStringCreateMutable(0, (2 * a2) | 1); v2; --v2)
  {
    unsigned int v5 = *a1++;
    CFStringAppendFormat(i, 0, @"%02X", v5);
  }
  return i;
}

__CFString *CVCreateSHA1DigestString(const void *a1, CC_LONG a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CC_SHA1_Init(&c);
  CC_SHA1_Update(&c, a1, a2);
  CC_SHA1_Final(md, &c);
  return CVCreateHexDumpString(md, 20);
}

__CFString *CVCreateSHA1DigestStringFromData(const __CFData *a1)
{
  CFIndex Length = CFDataGetLength(a1);
  int v3 = (UInt8 *)malloc_type_malloc(Length, 0x4675226CuLL);
  v6.locatioCFIndex n = 0;
  v6.length = Length;
  CFDataGetBytes(a1, v6, v3);
  uint64_t v4 = CVCreateSHA1DigestString(v3, Length);
  free(v3);
  return v4;
}

uint64_t CVGetPermanentAllocator()
{
  return *MEMORY[0x1E4F1CF80];
}

CFDictionaryRef CVIsPixelFormatCompressed(unsigned int a1)
{
  CFDictionaryRef result = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a1);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"Planes");
    if (result)
    {
      CFArrayRef v2 = result;
      CFTypeID v3 = CFGetTypeID(result);
      if (v3 == CFArrayGetTypeID())
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v2, 0);
        unint64_t Count = CFArrayGetCount(v2);
        if (Count <= 1) {
          uint64_t v6 = 1;
        }
        else {
          uint64_t v6 = Count;
        }
        while (1)
        {
          int IntValueWithDefault = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"CompressionType", 0);
          int v8 = CVDictionaryGetIntValueWithDefault(ValueAtIndex, @"TiledAddressFormat", 0);
          if (IntValueWithDefault >= 1)
          {
            if (v8) {
              break;
            }
          }
          if (!IntValueWithDefault && v8 == 5) {
            break;
          }
          if (!--v6) {
            return 0;
          }
        }
        return (const __CFDictionary *)1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t CVLockingBunchPairGetTypeID(void)
{
  if (CVLockingBunchPairGetTypeID(void)::once != -1) {
    dispatch_once_f(&CVLockingBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLockingBunchPair);
  }
  return kCVLockingBunchPairID;
}

uint64_t CVLockingBunchPair::finalize(CVLockingBunchPair *this)
{
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 56))(this);
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 168))(this);
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 264));

  return CVBunchPair::finalize(this);
}

uint64_t CVLockingBunchPair::cleanup(CVLockingBunchPair *this)
{
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 184))(this);
  CFArrayRef v2 = (void *)*((void *)this + 27);
  uint64_t v3 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 96))(this);
  uint64_t v4 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
  CVTracePoolAction(1, v2, 0, "being deallocated", v3, v4);
  CFArrayRef v5 = (const __CFArray *)*((void *)this + 28);
  if (v5)
  {
    v12.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
    v12.locatioCFIndex n = 0;
    CFArrayApplyFunction(v5, v12, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  CFArrayRef v6 = (const __CFArray *)*((void *)this + 29);
  if (v6)
  {
    v13.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 96))(this);
    v13.locatioCFIndex n = 0;
    CFArrayApplyFunction(v6, v13, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  (*(void (**)(CVLockingBunchPair *, void))(*(void *)this + 152))(this, 0);
  uint64_t v7 = (__CFArray *)*((void *)this + 28);
  if (v7)
  {
    CFArrayRemoveAllValues(v7);
    CFRelease(*((CFTypeRef *)this + 28));
  }
  *((void *)this + 28) = 0;
  int v8 = (__CFArray *)*((void *)this + 29);
  if (v8)
  {
    CFArrayRemoveAllValues(v8);
    CFRelease(*((CFTypeRef *)this + 29));
  }
  *((void *)this + 29) = 0;
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 192))(this);
  uint64_t v9 = *(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 168);

  return v9(this);
}

void *CVLockingBunchPair::freeAgedOutBackings(void *this)
{
  if (this[30])
  {
    uint64_t v1 = this;
    (*(void (**)(void *))(*this + 160))(this);
    uint64_t v14 = v1[27];
    uint64_t v2 = CVGetCurrentHostTime();
    uint64_t v3 = v1[29];
    uint64_t v4 = v2 - v1[30];
    v11[0] = v1[28];
    v11[1] = v4;
    uint64_t v15 = v3;
    char v12 = 0;
    uint64_t v5 = (*(uint64_t (**)(void *))(*v1 + 104))(v1);
    uint64_t v6 = v1[31];
    BOOL v7 = __OFSUB__(v5, v6);
    uint64_t v8 = v5 - v6;
    if (!((v8 < 0) ^ v7 | (v8 == 0)))
    {
      uint64_t v13 = v8;
      CFArrayRef v9 = (const __CFArray *)v1[28];
      uint64_t v10 = (*(uint64_t (**)(void *))(*v1 + 104))(v1);
      CFArrayApplyFunctionReverse(v9, 0, v10, (uint64_t (*)(const void *, uint64_t))_freeAgedOutBackings, (uint64_t)v11);
    }
    return (void *)(*(uint64_t (**)(void *))(*v1 + 168))(v1);
  }
  return this;
}

uint64_t CVLockingBunchPair::freeExcessBackingsNotInUse(CVLockingBunchPair *this)
{
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  uint64_t v2 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 232))(this) - *((void *)this + 31);
  if (v2 >= 1)
  {
    v8[1] = 0;
    void v8[2] = 0;
    uint64_t v3 = *((void *)this + 27);
    CFArrayRef v5 = (const __CFArray *)*((void *)this + 28);
    uint64_t v4 = *((void *)this + 29);
    v8[3] = v2;
    v8[4] = v3;
    v8[0] = v5;
    v8[5] = v4;
    uint64_t v6 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
    CFArrayApplyFunctionReverse(v5, 0, v6, (uint64_t (*)(const void *, uint64_t))_freeExcessBackings, (uint64_t)v8);
  }
  return (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 168))(this);
}

void _freeExcessBackings(void **a1, void *a2)
{
  if (*((void *)a2 + 3))
  {
    (*(void (**)(void *))(*a1[2] + 112))(a1[2]);
    uint64_t v4 = (void *)*((void *)a2 + 4);
    CFIndex Count = CFArrayGetCount(*((CFArrayRef *)a2 + 5));
    CFIndex v6 = CFArrayGetCount(*(CFArrayRef *)a2);
    CVTracePoolAction(1, v4, a1, "-> is in excess, freed", Count, v6 - 1);
    CFArrayRef v7 = *(const __CFArray **)a2;
    v9.length = CFArrayGetCount(*(CFArrayRef *)a2);
    v9.locatioCFIndex n = 0;
    FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v7, v9, a1);
    CFArrayRemoveValueAtIndex(v7, FirstIndexOfValue);
    --*((void *)a2 + 3);
  }
}

uint64_t CVLockingBunchPair::bufferBackingInUse(CVLockingBunchPair *this, CVBufferBacking *a2)
{
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  uint64_t v4 = (__CFArray *)*((void *)this + 29);
  CFArrayRef v5 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  CFArrayRef v6 = (const __CFArray *)*((void *)this + 28);
  CFIndex v7 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
  uint64_t v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v17.locatioCFIndex n = 0;
  v17.length = v7;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v6, v17, v8);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
    CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)this + 28), FirstIndexOfValue);
  }
  uint64_t v10 = (void *)*((void *)this + 27);
  CFTypeID v11 = (void **)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  uint64_t v12 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 96))(this);
  uint64_t v13 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
  CVTracePoolAction(2, v10, v11, "-> in use", v12, v13);
  uint64_t v14 = *(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 168);

  return v14(this);
}

uint64_t CVLockingBunchPair::bufferBackingNotInUse(CVLockingBunchPair *this, CVBufferBacking *a2)
{
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  uint64_t v4 = (__CFArray *)*((void *)this + 28);
  CFArrayRef v5 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  CFArrayRef v6 = (const __CFArray *)*((void *)this + 29);
  CFIndex v7 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 96))(this);
  uint64_t v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v18.locatioCFIndex n = 0;
  v18.length = v7;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v6, v18, v8);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
    CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)this + 29), FirstIndexOfValue);
  }
  uint64_t v10 = (void *)*((void *)this + 27);
  CFTypeID v11 = (void **)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  if ((*(unsigned int (**)(CVBufferBacking *))(*(void *)a2 + 80))(a2)) {
    uint64_t v12 = "-> not in use";
  }
  else {
    uint64_t v12 = "-> not in use [but IOSurface is in use elsewhere]";
  }
  uint64_t v13 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 96))(this);
  uint64_t v14 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
  CVTracePoolAction(2, v10, v11, v12, v13, v14);
  uint64_t v15 = *(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 168);

  return v15(this);
}

uint64_t CVLockingBunchPair::setMaximumBufferAge(CVLockingBunchPair *this, double a2)
{
  uint64_t v4 = (CVHostTimeBase *)(*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  if (!CVHostTimeBase::sIsInited) {
    CVHostTimeBase::Initialize(v4);
  }
  LODWORD(v5) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v6) = CVHostTimeBase::sToNanosDenominator;
  *((void *)this + 3pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = (unint64_t)((double)(unint64_t)(a2 * 1000000000.0) / (double)v5 * (double)v6);
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 136))(this);
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 168))(this);
  return 0;
}

uint64_t CVLockingBunchPair::setMinimumBufferCount(CVLockingBunchPair *this, uint64_t a2)
{
  *((void *)this + 31) = a2;
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 168))(this);
  return 0;
}

uint64_t CVLockingBunchPair::getMinimumBufferCount(CVLockingBunchPair *this)
{
  return *((void *)this + 31);
}

double CVLockingBunchPair::getMaximumBufferAge(CVLockingBunchPair *this, double a2, double a3)
{
  unint64_t v3 = *((void *)this + 30);
  if (!CVHostTimeBase::sIsInited) {
    a2 = CVHostTimeBase::Initialize(this);
  }
  LODWORD(a2) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(a3) = CVHostTimeBase::sToNanosDenominator;
  return (double)(unint64_t)((double)v3 / (double)*(unint64_t *)&a3 * (double)*(unint64_t *)&a2)
       / 1000000000.0;
}

uint64_t CVLockingBunchPair::tryToReuseABacking(CFArrayRef *this, CVBufferBacking **a2)
{
  uint64_t v4 = (*((uint64_t (**)(CFArrayRef *))*this + 13))(this);
  if (v4 < 1)
  {
    uint64_t v5 = 0;
LABEL_7:
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v5 = v4;
    uint64_t v6 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(this[28], v5 + v6 - 1);
      if ((*(uint64_t (**)(void))(**((void **)ValueAtIndex + 2) + 80))(*((void *)ValueAtIndex + 2))) {
        break;
      }
      --v6;
      if ((unint64_t)(v5 + v6 + 1) <= 1) {
        goto LABEL_7;
      }
    }
    uint64_t v8 = (CVBufferBacking *)*((void *)ValueAtIndex + 2);
    uint64_t v5 = -(int)v6;
  }
  *a2 = v8;
  return v5;
}

uint64_t CVLockingBunchPair::initNewBacking(CVLockingBunchPair *this, CVBufferBacking *a2, char a3, int a4)
{
  if (a4)
  {
    uint64_t v7 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 224))(this);
    if (v7 >= (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 232))(this)) {
      return 4294960597;
    }
  }
  if (a2)
  {
    (*(void (**)(CVBufferBacking *, CVLockingBunchPair *))(*(void *)a2 + 96))(a2, this);
    if ((a3 & 1) == 0) {
      pthread_mutex_lock(&_freeBackingsMutex);
    }
    uint64_t v8 = (__CFArray *)*((void *)this + 28);
    CFRange v9 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFArrayAppendValue(v8, v9);
    if ((a3 & 1) == 0) {
      pthread_mutex_unlock(&_freeBackingsMutex);
    }
    uint64_t v10 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFRelease(v10);
  }
  return 0;
}

uint64_t CVLockingBunchPair::enterCriticalSection(CVLockingBunchPair *this)
{
  return pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVLockingBunchPair::exitCriticalSection(CVLockingBunchPair *this)
{
  return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
}

uint64_t CVLockingBunchPair::enterBackingsCriticalWriteSection(atomic_uint *this)
{
  uint64_t v2 = this + 64;
  CVIncrementAtomic(this + 64);
  unint64_t v3 = (pthread_rwlock_t *)(this + 4);
  uint64_t v4 = pthread_rwlock_trywrlock((pthread_rwlock_t *)(this + 4));
  if (v4 == 16)
  {
    uint64_t v5 = (pthread_cond_t *)(this + 66);
    do
    {
      pthread_cond_wait(v5, (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
      uint64_t v6 = pthread_rwlock_trywrlock(v3);
    }
    while (v6 == 16);
    uint64_t v4 = v6;
  }
  CVDecrementAtomic(v2);
  return v4;
}

const __CFArray *CVLockingBunchPair::getUsedBackingsCount(CVLockingBunchPair *this)
{
  CFArrayRef result = (const __CFArray *)*((void *)this + 29);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

const __CFArray *CVLockingBunchPair::getFreeBackingsCount(CVLockingBunchPair *this)
{
  CFArrayRef result = (const __CFArray *)*((void *)this + 28);
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

uint64_t CVLockingBunchPair::getTotalBufferCount(CVLockingBunchPair *this)
{
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  uint64_t v2 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 96))(this);
  uint64_t v3 = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this) + v2;
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 168))(this);
  return v3;
}

uint64_t CVLockingBunchPair::getTargetBufferCountsBitfield(CVLockingBunchPair *this)
{
  return 0;
}

void CVLockingBunchPair::prefetchPages(CVLockingBunchPair *this)
{
  CFArrayRef v1 = (const __CFArray *)*((void *)this + 28);
  v2.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
  v2.locatioCFIndex n = 0;

  CFArrayApplyFunction(v1, v2, (CFArrayApplierFunction)_prefetchBacking, 0);
}

uint64_t _prefetchBacking(void **a1, void *a2)
{
  return (*(uint64_t (**)(void))(*a1[2] + 88))();
}

uint64_t CVLockingBunchPair::applyFunction(CVLockingBunchPair *this, void (*a2)(const void *, void *), void *a3, char a4)
{
  v9[0] = a2;
  v9[1] = a3;
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 160))(this);
  if ((a4 & 2) != 0)
  {
    CFArrayRef v6 = (const __CFArray *)*((void *)this + 28);
    if (v6)
    {
      v10.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 104))(this);
      v10.locatioCFIndex n = 0;
      CFArrayApplyFunction(v6, v10, (CFArrayApplierFunction)_applyFunction, v9);
    }
  }
  if ((a4 & 4) != 0)
  {
    CFArrayRef v7 = (const __CFArray *)*((void *)this + 29);
    if (v7)
    {
      v11.length = (*(uint64_t (**)(CVLockingBunchPair *))(*(void *)this + 96))(this);
      v11.locatioCFIndex n = 0;
      CFArrayApplyFunction(v7, v11, (CFArrayApplierFunction)_applyFunction, v9);
    }
  }
  (*(void (**)(CVLockingBunchPair *))(*(void *)this + 168))(this);
  return 0;
}

uint64_t classFinalize_CVLockingBunchPair(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVLockingBunchPair(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVLockingBunchPairRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVLockingBunchPair(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

uint64_t CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable(void)
{
  return 27;
}

uint64_t CVGetCVBufferAttachmentKeyAtIndexInMappingTable(unsigned int a1)
{
  if (a1 > 0x1A) {
    return 0;
  }
  else {
    return (uint64_t)*(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[3 * a1];
  }
}

uint64_t CVGetIOSurfacePropertyKeyAtIndexInMappingTable(unsigned int a1)
{
  if (a1 > 0x1A) {
    return 0;
  }
  else {
    return (uint64_t)*(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[3 * a1 + 1];
  }
}

uint64_t CVDoesIOSurfacePropertyKeyAtIndexInMappingTableHaveCorrespondingBulkAttachment(unsigned int a1)
{
  if (a1 > 0x1A) {
    return 0;
  }
  else {
    return LOBYTE((&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[3 * a1 + 2]);
  }
}

__CFDictionary *CVCreateIOSurfacePropertyDictionaryFromCVBufferAttachmentDictionary(const __CFDictionary *a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  for (uint64_t i = 0; i != 81; i += 3)
  {
    CFArrayRef Value = CFDictionaryGetValue(a1, *(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[i]);
    if (Value) {
      CFDictionarySetValue(Mutable, *(&sCorrespondingCoreVideoAndIOSurfaceAttachmentKeys)[i + 1], Value);
    }
  }
  return Mutable;
}

uint64_t convertAttachmentToIOSurfaceStruct(const void *a1, const __CFString *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (CFEqual(a1, @"CVCleanAperture"))
  {
    double v37 = 0.0;
    double valuePtr = 0.0;
    double v35 = 0.0;
    double v36 = 0.0;
    if (!a2)
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      goto LABEL_18;
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a2)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, @"Width", &valuePtr)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, @"Height", &v37)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, @"HorizontalOffset", &v36)
      && cvGetDoubleFromDictionary((const __CFDictionary *)a2, @"VerticalOffset", &v35))
    {
      unsigned int v9 = llround(v37 * 16.0);
      *(_DWORD *)a3 = llround(valuePtr * 16.0);
      *(_DWORD *)(a3 + 4) = 16;
      unsigned int v10 = llround(v36 * 16.0);
      *(_DWORD *)(a3 + 8) = v9;
      *(_DWORD *)(a3 + 12) = 16;
      unsigned int v11 = llround(v35 * 16.0);
      *(_DWORD *)(a3 + 16) = v10;
      *(_DWORD *)(a3 + 2pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 16;
      *(_DWORD *)(a3 + CVBitOrAtomic(1, this + 24) = v11;
      *(_DWORD *)(a3 + 28) = 16;
LABEL_18:
      uint64_t v15 = *a4 | 1;
LABEL_86:
      *a4 = v15;
      return 1;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferCleanApertureKey, attachmentValue is invalid.";
      uint64_t v14 = MEMORY[0x1E4F14500];
LABEL_25:
      _os_log_impl(&dword_1A5841000, v14, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      return 1;
    }
    return 1;
  }
  if (CFEqual(a1, @"CVPixelAspectRatio"))
  {
    double v37 = 0.0;
    double valuePtr = 0.0;
    if (a2)
    {
      CFTypeID v12 = CFDictionaryGetTypeID();
      if (v12 != CFGetTypeID(a2)
        || !cvGetDoubleFromDictionary((const __CFDictionary *)a2, @"HorizontalSpacing", &v37)
        || !cvGetDoubleFromDictionary((const __CFDictionary *)a2, @"VerticalSpacing", &valuePtr))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315138;
          CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferPixelAspectRatioKey, attachmentValue is invalid.";
          uint64_t v14 = MEMORY[0x1E4F14500];
          goto LABEL_25;
        }
        return 1;
      }
      unsigned int v13 = llround(valuePtr * 16.0);
      *(_DWORD *)(a3 + 32) = llround(v37 * 16.0);
      *(_DWORD *)(a3 + 36) = 16;
      *(_DWORD *)(a3 + 4pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = v13;
      *(_DWORD *)(a3 + 44) = 16;
    }
    else
    {
      *(void *)(a3 + 32) = 0;
      *(void *)(a3 + 4pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
    }
    uint64_t v15 = *a4 | 2;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVImageBufferGammaLevel"))
  {
    double valuePtr = 0.0;
    if (a2)
    {
      CFTypeID v16 = CFGetTypeID(a2);
      if (v16 != CFNumberGetTypeID())
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferGammaLevelKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      CFNumberGetValue((CFNumberRef)a2, kCFNumberDoubleType, &valuePtr);
      *(_DWORD *)(a3 + 48) = llround(valuePtr * 268435456.0);
      *(_DWORD *)(a3 + 52) = 0x10000000;
    }
    else
    {
      *(void *)(a3 + 48) = 0;
    }
    uint64_t v15 = *a4 | 4;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVFieldCount"))
  {
    LOBYTE(valuePtr) = 0;
    if (a2)
    {
      CFTypeID v17 = CFGetTypeID(a2);
      if (v17 != CFNumberGetTypeID())
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferFieldCountKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt8Type, &valuePtr);
      if (SLOBYTE(valuePtr) < 1) {
        return 1;
      }
      *(unsigned char *)(a3 + 56) = LOBYTE(valuePtr);
    }
    else
    {
      *(unsigned char *)(a3 + 56) = 0;
    }
    uint64_t v15 = *a4 | 8;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVFieldDetail"))
  {
    if (a2)
    {
      CFTypeID v18 = CFStringGetTypeID();
      if (v18 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferFieldDetailKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      if (CFEqual(a2, @"TemporalTopFirst"))
      {
        uint64_t result = 1;
        *(unsigned char *)(a3 + 57) = 1;
        uint64_t v20 = *a4 | 0x10;
LABEL_42:
        *a4 = v20;
        return result;
      }
      if (CFEqual(a2, @"TemporalBottomFirst"))
      {
        char v23 = 6;
      }
      else if (CFEqual(a2, @"SpatialFirstLineEarly"))
      {
        char v23 = 9;
      }
      else
      {
        if (!CFEqual(a2, @"SpatialFirstLineLate")) {
          return 1;
        }
        char v23 = 14;
      }
      *(unsigned char *)(a3 + 57) = v23;
    }
    else
    {
      *(unsigned char *)(a3 + 57) = 0;
    }
    uint64_t v15 = *a4 | 0x10;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVImageBufferYCbCrMatrix"))
  {
    if (a2)
    {
      int IntegerCodePointForString = CVYCbCrMatrixGetIntegerCodePointForString(a2);
      if ((IntegerCodePointForString & 0xFFFFFFFD) == 0)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferYCbCrMatrixKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      *(unsigned char *)(a3 + 58) = IntegerCodePointForString;
    }
    else
    {
      *(unsigned char *)(a3 + 58) = 0;
    }
    uint64_t v15 = *a4 | 0x20;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVImageBufferColorPrimaries"))
  {
    if (a2)
    {
      int v22 = CVColorPrimariesGetIntegerCodePointForString(a2);
      if ((v22 & 0xFFFFFFFD) == 0)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferColorPrimariesKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      *(unsigned char *)(a3 + 59) = v22;
    }
    else
    {
      *(unsigned char *)(a3 + 59) = 0;
    }
    uint64_t v15 = *a4 | 0x40;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVImageBufferTransferFunction"))
  {
    if (a2)
    {
      int v24 = CVTransferFunctionGetIntegerCodePointForString(a2);
      char v25 = v24;
      if ((v24 & 0xFFFFFFFD) == 0 && !CFEqual(@"UseGamma", a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferTransferFunctionKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      *(unsigned char *)(a3 + 6pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = v25;
    }
    else
    {
      *(unsigned char *)(a3 + 6pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
    }
    uint64_t v15 = *a4 | 0x80;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVImageBufferChromaLocationTopField"))
  {
    if (a2)
    {
      CFTypeID v26 = CFStringGetTypeID();
      if (v26 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferChromaLocationTopFieldKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      if (CFEqual(a2, @"Left"))
      {
        uint64_t result = 1;
        *(unsigned char *)(a3 + 61) = 1;
        uint64_t v20 = *a4 | 0x100;
        goto LABEL_42;
      }
      if (CFEqual(a2, @"Center"))
      {
        char v29 = 2;
      }
      else if (CFEqual(a2, @"TopLeft"))
      {
        char v29 = 3;
      }
      else if (CFEqual(a2, @"Top"))
      {
        char v29 = 4;
      }
      else if (CFEqual(a2, @"BottomLeft"))
      {
        char v29 = 5;
      }
      else if (CFEqual(a2, @"Bottom"))
      {
        char v29 = 6;
      }
      else
      {
        if (!CFEqual(a2, @"DV 4:2:0")) {
          return 1;
        }
        char v29 = 7;
      }
      *(unsigned char *)(a3 + 61) = v29;
    }
    else
    {
      *(unsigned char *)(a3 + 61) = 0;
    }
    uint64_t v15 = *a4 | 0x100;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVImageBufferChromaLocationBottomField"))
  {
    if (a2)
    {
      CFTypeID v27 = CFStringGetTypeID();
      if (v27 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferChromaLocationBottomFieldKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      if (CFEqual(a2, @"Left"))
      {
        uint64_t result = 1;
        *(unsigned char *)(a3 + 62) = 1;
        uint64_t v20 = *a4 | 0x200;
        goto LABEL_42;
      }
      if (CFEqual(a2, @"Center"))
      {
        char v32 = 2;
      }
      else if (CFEqual(a2, @"TopLeft"))
      {
        char v32 = 3;
      }
      else if (CFEqual(a2, @"Top"))
      {
        char v32 = 4;
      }
      else if (CFEqual(a2, @"BottomLeft"))
      {
        char v32 = 5;
      }
      else if (CFEqual(a2, @"Bottom"))
      {
        char v32 = 6;
      }
      else
      {
        if (!CFEqual(a2, @"DV 4:2:0")) {
          return 1;
        }
        char v32 = 7;
      }
      *(unsigned char *)(a3 + 62) = v32;
    }
    else
    {
      *(unsigned char *)(a3 + 62) = 0;
    }
    uint64_t v15 = *a4 | 0x200;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"CVImageBufferChromaSubsampling"))
  {
    if (a2)
    {
      CFTypeID v28 = CFStringGetTypeID();
      if (v28 != CFGetTypeID(a2))
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferChromaSubsamplingKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      if (CFEqual(a2, @"4:2:0"))
      {
        uint64_t result = 1;
        *(unsigned char *)(a3 + 63) = 1;
        uint64_t v20 = *a4 | 0x400;
        goto LABEL_42;
      }
      if (CFEqual(a2, @"4:2:2"))
      {
        char v34 = 2;
      }
      else
      {
        if (!CFEqual(a2, @"4:1:1")) {
          return 1;
        }
        char v34 = 3;
      }
      *(unsigned char *)(a3 + 63) = v34;
    }
    else
    {
      *(unsigned char *)(a3 + 63) = 0;
    }
    uint64_t v15 = *a4 | 0x400;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"MasteringDisplayColorVolume"))
  {
    if (a2)
    {
      CFTypeID v30 = CFDataGetTypeID();
      if (v30 != CFGetTypeID(a2) || CFDataGetLength((CFDataRef)a2) != 24)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferMasteringDisplayColorVolumeKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      v46.locatioCFIndex n = 0;
      v46.length = 24;
      CFDataGetBytes((CFDataRef)a2, v46, buf);
      *(_WORD *)(a3 + 64) = bswap32(*(unsigned __int16 *)buf) >> 16;
      *(_WORD *)(a3 + 66) = bswap32(*(unsigned __int16 *)&buf[2]) >> 16;
      *(_WORD *)(a3 + 68) = bswap32((unsigned __int16)v40) >> 16;
      *(_WORD *)(a3 + 7pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = bswap32(WORD1(v40)) >> 16;
      *(_WORD *)(a3 + 72) = bswap32(WORD2(v40)) >> 16;
      *(_WORD *)(a3 + 74) = bswap32(HIWORD(v40)) >> 16;
      *(_WORD *)(a3 + 76) = bswap32(v41) >> 16;
      *(_WORD *)(a3 + 78) = bswap32(v42) >> 16;
      unsigned int v31 = bswap32(v44);
      *(_DWORD *)(a3 + 8pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = bswap32(v43);
      *(_DWORD *)(a3 + 84) = v31;
    }
    else
    {
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 8pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
    }
    uint64_t v15 = *a4 | 0x800;
    goto LABEL_86;
  }
  if (CFEqual(a1, @"ContentLightLevelInfo"))
  {
    if (a2)
    {
      CFTypeID v33 = CFDataGetTypeID();
      if (v33 != CFGetTypeID(a2) || CFDataGetLength((CFDataRef)a2) != 4)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
          return 1;
        }
        *(_DWORD *)buf = 136315138;
        CFIndex v40 = "convertAttachmentToIOSurfaceStruct Error: For kCVImageBufferContentLightLevelInfoKey, attachmentValue is invalid.";
        uint64_t v14 = MEMORY[0x1E4F14500];
        goto LABEL_25;
      }
      v47.locatioCFIndex n = 0;
      v47.length = 4;
      CFDataGetBytes((CFDataRef)a2, v47, buf);
      *(_WORD *)(a3 + 88) = bswap32(*(unsigned __int16 *)buf) >> 16;
      *(_WORD *)(a3 + 9pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = bswap32(*(unsigned __int16 *)&buf[2]) >> 16;
    }
    else
    {
      *(_DWORD *)(a3 + 88) = 0;
    }
    uint64_t v15 = *a4 | 0x1000;
    goto LABEL_86;
  }
  uint64_t result = CFEqual(a1, @"AlphaChannelMode");
  if (result)
  {
    if (a2)
    {
      if (CFEqual(a2, @"StraightAlpha"))
      {
        *(unsigned char *)(a3 + 10pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 1;
        *a4 |= 0x4000uLL;
      }
      if (!CFEqual(a2, @"PremultipliedAlpha")) {
        return 1;
      }
      *(unsigned char *)(a3 + 10pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 2;
    }
    else
    {
      *(unsigned char *)(a3 + 10pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
    }
    uint64_t v15 = *a4 | 0x4000;
    goto LABEL_86;
  }
  return result;
}

uint64_t cvGetDoubleFromDictionary(const __CFDictionary *a1, const __CFString *a2, double *a3)
{
  int value = 0;
  uint64_t result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if (result)
  {
    CFTypeID v5 = CFGetTypeID(value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)value, kCFNumberDoubleType, a3);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void createAttachmentsDictionaryFromIOSurfaceStruct(uint64_t a1, __CFDictionary **a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  if (*(_DWORD *)(a1 + 4))
  {
    if (*(_DWORD *)(a1 + 12))
    {
      if (*(_DWORD *)(a1 + 20))
      {
        if (*(_DWORD *)(a1 + 28))
        {
          double v52 = 0.0;
          double v53 = 0.0;
          double v51 = 0.0;
          CFMutableDictionaryRef v6 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v6)
          {
            CFArrayRef v7 = v6;
            double valuePtr = (double)*(int *)a1 / (double)*(int *)(a1 + 4);
            CFNumberRef v8 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
            if (v8)
            {
              CFNumberRef v9 = v8;
              CFDictionarySetValue(v7, @"Width", v8);
              CFRelease(v9);
            }
            double v53 = (double)*(int *)(a1 + 8) / (double)*(int *)(a1 + 12);
            CFNumberRef v10 = CFNumberCreate(v4, kCFNumberDoubleType, &v53);
            if (v10)
            {
              CFNumberRef v11 = v10;
              CFDictionarySetValue(v7, @"Height", v10);
              CFRelease(v11);
            }
            double v52 = (double)*(int *)(a1 + 16) / (double)*(int *)(a1 + 20);
            CFNumberRef v12 = CFNumberCreate(v4, kCFNumberDoubleType, &v52);
            if (v12)
            {
              CFNumberRef v13 = v12;
              CFDictionarySetValue(v7, @"HorizontalOffset", v12);
              CFRelease(v13);
            }
            double v51 = (double)*(int *)(a1 + 24) / (double)*(int *)(a1 + 28);
            CFNumberRef v14 = CFNumberCreate(v4, kCFNumberDoubleType, &v51);
            if (v14)
            {
              CFNumberRef v15 = v14;
              CFDictionarySetValue(v7, @"VerticalOffset", v14);
              CFRelease(v15);
            }
            CFDictionarySetValue(Mutable, @"CVCleanAperture", v7);
            CFRelease(v7);
          }
        }
      }
    }
  }
  if (*(_DWORD *)(a1 + 36))
  {
    if (*(_DWORD *)(a1 + 44))
    {
      double v53 = 0.0;
      double valuePtr = 0.0;
      CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v16)
      {
        CFTypeID v17 = v16;
        double valuePtr = (double)*(int *)(a1 + 32) / (double)*(int *)(a1 + 36);
        CFNumberRef v18 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
        if (v18)
        {
          CFNumberRef v19 = v18;
          CFDictionarySetValue(v17, @"HorizontalSpacing", v18);
          CFRelease(v19);
        }
        double v53 = (double)*(int *)(a1 + 40) / (double)*(int *)(a1 + 44);
        CFNumberRef v20 = CFNumberCreate(v4, kCFNumberDoubleType, &v53);
        if (v20)
        {
          CFNumberRef v21 = v20;
          CFDictionarySetValue(v17, @"VerticalSpacing", v20);
          CFRelease(v21);
        }
        CFDictionarySetValue(Mutable, @"CVPixelAspectRatio", v17);
        CFRelease(v17);
      }
    }
  }
  int v22 = *(_DWORD *)(a1 + 52);
  if (v22)
  {
    double valuePtr = (double)*(int *)(a1 + 48) / (double)v22;
    CFNumberRef v23 = CFNumberCreate(v4, kCFNumberDoubleType, &valuePtr);
    if (v23)
    {
      CFNumberRef v24 = v23;
      CFDictionarySetValue(Mutable, @"CVImageBufferGammaLevel", v23);
      CFRelease(v24);
    }
  }
  if (*(unsigned char *)(a1 + 56))
  {
    CFNumberRef v25 = CFNumberCreate(v4, kCFNumberSInt8Type, (const void *)(a1 + 56));
    if (v25)
    {
      CFNumberRef v26 = v25;
      CFDictionarySetValue(Mutable, @"CVFieldCount", v25);
      CFRelease(v26);
    }
  }
  unsigned int v27 = *(unsigned __int8 *)(a1 + 57);
  if (v27 > 8)
  {
    if (v27 == 9)
    {
      CFTypeID v28 = (const void **)&kCVImageBufferFieldDetailSpatialFirstLineEarly;
    }
    else
    {
      if (v27 != 14) {
        goto LABEL_39;
      }
      CFTypeID v28 = (const void **)&kCVImageBufferFieldDetailSpatialFirstLineLate;
    }
  }
  else if (v27 == 1)
  {
    CFTypeID v28 = (const void **)&kCVImageBufferFieldDetailTemporalTopFirst;
  }
  else
  {
    if (v27 != 6) {
      goto LABEL_39;
    }
    CFTypeID v28 = (const void **)&kCVImageBufferFieldDetailTemporalBottomFirst;
  }
  CFDictionarySetValue(Mutable, @"CVFieldDetail", *v28);
LABEL_39:
  CFStringRef StringForIntegerCodePoint = CVYCbCrMatrixGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 58));
  if (StringForIntegerCodePoint) {
    CFDictionarySetValue(Mutable, @"CVImageBufferYCbCrMatrix", StringForIntegerCodePoint);
  }
  CFStringRef v30 = CVColorPrimariesGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 59));
  if (v30) {
    CFDictionarySetValue(Mutable, @"CVImageBufferColorPrimaries", v30);
  }
  CFStringRef v31 = CVTransferFunctionGetStringForIntegerCodePoint(*(unsigned __int8 *)(a1 + 60));
  if (v31)
  {
    char v32 = (__CFString *)v31;
LABEL_45:
    CFDictionarySetValue(Mutable, @"CVImageBufferTransferFunction", v32);
    goto LABEL_49;
  }
  if (*(unsigned char *)(a1 + 60) == 2 && *(_DWORD *)(a1 + 52))
  {
    char v32 = @"UseGamma";
    goto LABEL_45;
  }
LABEL_49:
  unsigned int v33 = *(unsigned __int8 *)(a1 + 61) - 1;
  if (v33 <= 6) {
    CFDictionarySetValue(Mutable, @"CVImageBufferChromaLocationTopField", *off_1E5BD5250[(char)v33]);
  }
  unsigned int v34 = *(unsigned __int8 *)(a1 + 62) - 1;
  if (v34 <= 6) {
    CFDictionarySetValue(Mutable, @"CVImageBufferChromaLocationBottomField", *off_1E5BD5250[(char)v34]);
  }
  unsigned int v35 = *(unsigned __int8 *)(a1 + 63) - 1;
  if (v35 <= 2) {
    CFDictionarySetValue(Mutable, @"CVImageBufferChromaSubsampling", *off_1E5BD5288[(char)v35]);
  }
  __int16 v36 = *(_WORD *)(a1 + 64);
  if (v36)
  {
    __int16 v37 = *(_WORD *)(a1 + 66);
    if (v37)
    {
      __int16 v38 = *(_WORD *)(a1 + 68);
      if (v38)
      {
        __int16 v39 = *(_WORD *)(a1 + 70);
        if (v39)
        {
          __int16 v40 = *(_WORD *)(a1 + 72);
          if (v40)
          {
            __int16 v41 = *(_WORD *)(a1 + 74);
            if (v41)
            {
              __int16 v42 = *(_WORD *)(a1 + 76);
              if (v42)
              {
                __int16 v43 = *(_WORD *)(a1 + 78);
                if (v43)
                {
                  int v44 = *(_DWORD *)(a1 + 80);
                  if (v44)
                  {
                    LOBYTE(valuePtr) = HIBYTE(v36);
                    BYTE1(valuePtr) = v36;
                    BYTE2(valuePtr) = HIBYTE(v37);
                    BYTE3(valuePtr) = v37;
                    BYTE4(valuePtr) = HIBYTE(v38);
                    BYTE5(valuePtr) = v38;
                    BYTE6(valuePtr) = HIBYTE(v39);
                    HIBYTE(valuePtr) = v39;
                    char v55 = HIBYTE(v40);
                    char v56 = v40;
                    char v57 = HIBYTE(v41);
                    char v58 = v41;
                    char v59 = HIBYTE(v42);
                    char v60 = v42;
                    char v61 = HIBYTE(v43);
                    char v62 = v43;
                    char v63 = HIBYTE(v44);
                    char v64 = BYTE2(v44);
                    char v65 = BYTE1(v44);
                    char v66 = v44;
                    unsigned int v67 = bswap32(*(_DWORD *)(a1 + 84));
                    CFDataRef v45 = CFDataCreate(v4, (const UInt8 *)&valuePtr, 24);
                    CFDictionarySetValue(Mutable, @"MasteringDisplayColorVolume", v45);
                    CFRelease(v45);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  __int16 v46 = *(_WORD *)(a1 + 88);
  if (v46)
  {
    __int16 v47 = *(_WORD *)(a1 + 90);
    if (v47)
    {
      LOBYTE(valuePtr) = HIBYTE(v46);
      BYTE1(valuePtr) = v46;
      BYTE2(valuePtr) = HIBYTE(v47);
      BYTE3(valuePtr) = v47;
      CFDataRef v48 = CFDataCreate(v4, (const UInt8 *)&valuePtr, 4);
      CFDictionarySetValue(Mutable, @"ContentLightLevelInfo", v48);
      CFRelease(v48);
    }
  }
  int v49 = *(unsigned __int8 *)(a1 + 100);
  if (v49 == 1)
  {
    CFDictionaryRef v50 = (const void **)&kCVImageBufferAlphaChannelMode_StraightAlpha;
  }
  else
  {
    if (v49 != 2) {
      goto LABEL_73;
    }
    CFDictionaryRef v50 = (const void **)&kCVImageBufferAlphaChannelMode_PremultipliedAlpha;
  }
  CFDictionarySetValue(Mutable, @"AlphaChannelMode", *v50);
LABEL_73:
  if (a2) {
    *a2 = Mutable;
  }
}

uint64_t CVMetalBufferGetBuffer(void *a1)
{
  if (!a1) {
    return 0;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 != CVMetalBufferGetTypeID()) {
    return 0;
  }
  uint64_t v3 = a1[2];
  if (!v3) {
    return 0;
  }
  CFAllocatorRef v4 = *(uint64_t (**)(void))(**(void **)(v3 + 96) + 184);

  return v4();
}

void CVDataBuffer::CVDataBuffer(CVDataBuffer *this, const void *a2)
{
  CVBuffer::CVBuffer(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA16340;
  *(void *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 96) = 1;
  *(void *)(v2 + 10pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
}

uint64_t CVDataBuffer::finalize(CVDataBuffer *this)
{
  uint64_t v2 = *((void *)this + 14);
  if (v2)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 208))(v2))
    {
      uint64_t v3 = 0;
      char v4 = 1;
      do
      {
        char v5 = v4;
        BOOL v7 = 0;
        do
        {
          CVDecrementAtomicCounter((atomic_uint *)this + v3 + 25, &v7);
          if (!v7) {
            break;
          }
          IOSurfaceDecrementUseCountForCategory();
        }
        while (v7);
        char v4 = 0;
        uint64_t v3 = 1;
      }
      while ((v5 & 1) != 0);
    }
    if (*((unsigned char *)this + 96)) {
      (*(void (**)(void))(**((void **)this + 14) + 72))(*((void *)this + 14));
    }
    (*(void (**)(void))(**((void **)this + 14) + 40))(*((void *)this + 14));
    *((void *)this + 14) = 0;
  }
  return CVBuffer::finalize(this);
}

uint64_t CVDataBuffer::getBacking(CVDataBuffer *this)
{
  return *((void *)this + 14);
}

CFStringRef CVDataBuffer::copyDebugDescription(CVDataBuffer *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVDataBuffer *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 14) + 192))(*((void *)this + 14));
  CFStringRef PoolName = (__CFString *)CVBufferBacking::getPoolName(*((atomic_uint **)this + 14));
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 14) + 208))(*((void *)this + 14));
  uint64_t v8 = (*(uint64_t (**)(CVDataBuffer *))(*(void *)this + 24))(this);
  if (PoolName) {
    CFNumberRef v9 = " poolName=";
  }
  else {
    CFNumberRef v9 = "";
  }
  if (!PoolName) {
    CFStringRef PoolName = &stru_1EFA19840;
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 14) + 184))(*((void *)this + 14));
  CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"<%@ %p pixelFormat=%c%c%c%c iosurface=%p%s%@ attributes=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>", v4, v8, HIBYTE(v5), BYTE2(v5), BYTE1(v5), v5, v7, v9, PoolName, v10, *((void *)this + 11), *((void *)this + 10));
  CFRelease(v4);
  return v11;
}

uint64_t CVDataBuffer::setAttachments(CVDataBuffer *this, const __CFDictionary *a2, unsigned int a3)
{
  uint64_t v6 = CVBuffer::setAttachments(this, a2, a3);
  uint64_t v7 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 14) + 208))(*((void *)this + 14));
  if (a2 && a3 == 1 && !v6 && v7) {
    IOSurfaceSetValues(v7, a2);
  }
  return v6;
}

uint64_t CVDataBuffer::pullAttachmentsFromIOSurface(CVDataBuffer *this, const __CFDictionary *a2)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 208))();
}

uint64_t CVDataBuffer::setDoNotAutomaticallyBumpUseCount(uint64_t this)
{
  *(unsigned char *)(this + 96) = 0;
  return this;
}

uint64_t CVDataBuffer::incrementUseCountForCategory(CVDataBuffer *this, unsigned int a2)
{
  BOOL v5 = 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 14) + 208))(*((void *)this + 14));
  if (result)
  {
    CVIncrementAtomicCounter((atomic_uint *)this + a2 + 25, &v5);
    if (v5)
    {
      IOSurfaceIncrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t CVDataBuffer::decrementUseCountForCategory(CVDataBuffer *this, unsigned int a2)
{
  BOOL v5 = 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 14) + 208))(*((void *)this + 14));
  if (result)
  {
    CVDecrementAtomicCounter((atomic_uint *)this + a2 + 25, &v5);
    if (v5)
    {
      IOSurfaceDecrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t classFinalize_CVDataBuffer(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVDataBuffer(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVDataBufferRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVDataBuffer(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

uint64_t CVMetalTextureCacheCreateTextureFromSliceOfImage(uint64_t a1, __CVMetalTextureCache *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  CVMetalTextureCache = _getCVMetalTextureCache(a2);
  CVImageBuffer = _getCVImageBuffer(a3);
  unsigned int v27 = -6660;
  if (a10) {
    BOOL v19 = CVMetalTextureCache == 0;
  }
  else {
    BOOL v19 = 1;
  }
  if (v19 || CVImageBuffer == 0) {
    return 4294960635;
  }
  CFNumberRef v21 = CVImageBuffer;
  uint64_t v22 = (*(uint64_t (**)(void *))(*CVImageBuffer + 160))(CVImageBuffer);
  unsigned int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 192))(v22);
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v23);
  if (!DescriptionWithPixelFormatType) {
    return 4294960635;
  }
  CFNumberRef v25 = (const void *)*MEMORY[0x1E4F1CFD0];
  if (v25 != CFDictionaryGetValue(DescriptionWithPixelFormatType, @"MultiSlice")) {
    return 4294960635;
  }
  *a10 = (*(uint64_t (**)(void *, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, unsigned int *))(*CVMetalTextureCache + 104))(CVMetalTextureCache, a1, v21, a4, a5, a6, a7, a8, a9, 1, &v27);
  (*(void (**)(void *, void, void))(*CVMetalTextureCache + 120))(CVMetalTextureCache, 0, 0);
  return v27;
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
  CVMetalTextureCache = _getCVMetalTextureCache(textureCache);
  if (CVMetalTextureCache)
  {
    CFTypeID v3 = *(void (**)(void))(*CVMetalTextureCache + 120);
    v3();
  }
}

uint64_t _CVXFillExtended128(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  uint64_t v7 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended128(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended128(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10 = a7;
  CFNumberRef v14 = result;
  if (a5 && a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      CFMutableDictionaryRef v16 = &result[i * __n + -16 * a5];
      long long v25 = *(_OWORD *)&v16[16 * a5];
      uint64_t v17 = a5;
      do
      {
        *(_OWORD *)CFMutableDictionaryRef v16 = v25;
        v16 += 16;
        --v17;
      }
      while (v17);
    }
  }
  if (a6 && a3)
  {
    for (uint64_t j = 0; j != a3; ++j)
    {
      BOOL v19 = &result[16 * a2 + j * __n];
      long long v26 = *((_OWORD *)v19 - 1);
      uint64_t v20 = a6;
      do
      {
        *(_OWORD *)BOOL v19 = v26;
        v19 += 16;
        --v20;
      }
      while (v20);
    }
  }
  if (a7)
  {
    CFNumberRef v21 = &result[-(a7 * __n) + -16 * a5];
    do
    {
      uint64_t result = (char *)memcpy(v21, &v14[-16 * a5], __n);
      v21 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    uint64_t v22 = &v14[(a3 - 1) * __n + -16 * a5];
    unsigned int v23 = &v14[__n * a3 + -16 * a5];
    unint64_t v24 = 1;
    do
    {
      uint64_t result = (char *)memcpy(v23, v22, __n);
      ++v24;
      v23 += __n;
    }
    while (v24 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended64(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  uint64_t v7 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended64(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended64(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10 = a7;
  CFNumberRef v14 = result;
  if (a5 && a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      CFMutableDictionaryRef v16 = &result[i * __n + -8 * a5];
      uint64_t v17 = *(void *)&v16[8 * a5];
      uint64_t v18 = a5;
      do
      {
        *(void *)CFMutableDictionaryRef v16 = v17;
        v16 += 8;
        --v18;
      }
      while (v18);
    }
  }
  if (a6 && a3)
  {
    for (uint64_t j = 0; j != a3; ++j)
    {
      uint64_t v20 = &result[8 * a2 + j * __n];
      uint64_t v21 = *((void *)v20 - 1);
      uint64_t v22 = a6;
      do
      {
        *(void *)uint64_t v20 = v21;
        v20 += 8;
        --v22;
      }
      while (v22);
    }
  }
  if (a7)
  {
    unsigned int v23 = &result[-(a7 * __n) + -8 * a5];
    do
    {
      uint64_t result = (char *)memcpy(v23, &v14[-8 * a5], __n);
      v23 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    unint64_t v24 = &v14[(a3 - 1) * __n + -8 * a5];
    long long v25 = &v14[__n * a3 + -8 * a5];
    unint64_t v26 = 1;
    do
    {
      uint64_t result = (char *)memcpy(v25, v24, __n);
      ++v26;
      v25 += __n;
    }
    while (v26 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended48(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v29 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = extraColumnsOnRight;
  size_t v7 = extraColumnsOnLeft;
  size_t v8 = v29;
  size_t v9 = extraRowsOnTop;
  if (Height && extraColumnsOnLeft)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      uint64_t v11 = (uint64_t)&BaseAddress[i * BytesPerRow + -6 * v7];
      __int16 v12 = *(_WORD *)(v11 + 6 * v7);
      __int16 v13 = *(_WORD *)(v11 + 2 * (3 * v7 + 1));
      __int16 v14 = *(_WORD *)(v11 + 2 * (3 * v7 + 2));
      CFNumberRef v15 = (_WORD *)(v11 + 4);
      size_t v16 = v7;
      do
      {
        *(v15 - 2) = v12;
        *(v15 - 1) = v13;
        *CFNumberRef v15 = v14;
        v15 += 3;
        --v16;
      }
      while (v16);
    }
  }
  if (Height && v6)
  {
    for (uint64_t j = 0; j != Height; ++j)
    {
      uint64_t v18 = (uint64_t)&BaseAddress[6 * Width + j * BytesPerRow];
      __int16 v19 = *(_WORD *)(v18 - 6);
      __int16 v20 = *(_WORD *)(v18 - 4);
      __int16 v21 = *(_WORD *)(v18 - 2);
      uint64_t v22 = (_WORD *)(v18 + 4);
      size_t v23 = v6;
      do
      {
        *(v22 - 2) = v19;
        *(v22 - 1) = v20;
        *uint64_t v22 = v21;
        v22 += 3;
        --v23;
      }
      while (v23);
    }
  }
  if (v9)
  {
    unint64_t v24 = &BaseAddress[-(BytesPerRow * v9) + -6 * v7];
    do
    {
      memcpy(v24, &BaseAddress[-6 * v7], BytesPerRow);
      v24 += BytesPerRow;
      --v9;
    }
    while (v9);
  }
  if (v8)
  {
    long long v25 = &BaseAddress[(Height - 1) * BytesPerRow + -6 * v7];
    unint64_t v26 = &BaseAddress[Height * BytesPerRow + -6 * v7];
    for (unint64_t k = 1; k <= v8; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended80(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v28 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v28);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = BaseAddress;
  size_t v7 = extraColumnsOnRight;
  size_t v8 = extraColumnsOnLeft;
  size_t v9 = v28;
  size_t v10 = extraRowsOnTop;
  if (Height && extraColumnsOnLeft)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      uint64_t v12 = (uint64_t)&BaseAddress[i * BytesPerRow + -10 * v8];
      uint64_t v13 = *(void *)(v12 + 10 * v8);
      __int16 v14 = *(_WORD *)(v12 + 2 * (5 * v8 + 4));
      CFNumberRef v15 = (_WORD *)(v12 + 8);
      size_t v16 = v8;
      do
      {
        *((void *)v15 - 1) = v13;
        *CFNumberRef v15 = v14;
        v15 += 5;
        --v16;
      }
      while (v16);
    }
  }
  if (Height && v7)
  {
    for (uint64_t j = 0; j != Height; ++j)
    {
      uint64_t v18 = (uint64_t)&BaseAddress[10 * Width + j * BytesPerRow];
      uint64_t v19 = *(void *)(v18 - 10);
      __int16 v20 = *(_WORD *)(v18 - 2);
      __int16 v21 = (_WORD *)(v18 + 8);
      size_t v22 = v7;
      do
      {
        *((void *)v21 - 1) = v19;
        *__int16 v21 = v20;
        v21 += 5;
        --v22;
      }
      while (v22);
    }
  }
  if (v10)
  {
    size_t v23 = &BaseAddress[-(BytesPerRow * v10) + -10 * v8];
    do
    {
      memcpy(v23, &v6[-10 * v8], BytesPerRow);
      v23 += BytesPerRow;
      --v10;
    }
    while (v10);
  }
  if (v9)
  {
    unint64_t v24 = &v6[(Height - 1) * BytesPerRow + -10 * v8];
    long long v25 = &v6[Height * BytesPerRow + -10 * v8];
    for (unint64_t k = 1; k <= v9; ++k)
    {
      memcpy(v25, v24, BytesPerRow);
      v25 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended32(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v7 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended32(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended32(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10 = a7;
  __int16 v14 = result;
  if (a5 && a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      size_t v16 = &result[i * __n + -4 * a5];
      int v17 = *(_DWORD *)&v16[4 * a5];
      uint64_t v18 = a5;
      do
      {
        *(_DWORD *)size_t v16 = v17;
        v16 += 4;
        --v18;
      }
      while (v18);
    }
  }
  if (a6 && a3)
  {
    for (uint64_t j = 0; j != a3; ++j)
    {
      __int16 v20 = &result[4 * a2 + j * __n];
      int v21 = *((_DWORD *)v20 - 1);
      uint64_t v22 = a6;
      do
      {
        *(_DWORD *)__int16 v20 = v21;
        v20 += 4;
        --v22;
      }
      while (v22);
    }
  }
  if (a7)
  {
    size_t v23 = &result[-(a7 * __n) + -4 * a5];
    do
    {
      uint64_t result = (char *)memcpy(v23, &v14[-4 * a5], __n);
      v23 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    unint64_t v24 = &v14[(a3 - 1) * __n + -4 * a5];
    long long v25 = &v14[__n * a3 + -4 * a5];
    unint64_t v26 = 1;
    do
    {
      uint64_t result = (char *)memcpy(v25, v24, __n);
      ++v26;
      v25 += __n;
    }
    while (v26 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended_10packed(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v7 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended32(BaseAddress, (Width + 2) / 3, (Height + 2) / 3, BytesPerRow, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v7 + 2) / 3, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended24(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v29 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = extraColumnsOnRight;
  size_t v7 = extraColumnsOnLeft;
  size_t v8 = v29;
  size_t v9 = extraRowsOnTop;
  if (Height && extraColumnsOnLeft)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      uint64_t v11 = (uint64_t)&BaseAddress[i * BytesPerRow + -3 * v7];
      char v12 = *(unsigned char *)(v11 + 3 * v7);
      char v13 = *(unsigned char *)(v11 + 3 * v7 + 1);
      char v14 = *(unsigned char *)(v11 + 3 * v7 + 2);
      CFNumberRef v15 = (unsigned char *)(v11 + 2);
      size_t v16 = v7;
      do
      {
        *(v15 - 2) = v12;
        *(v15 - 1) = v13;
        *CFNumberRef v15 = v14;
        v15 += 3;
        --v16;
      }
      while (v16);
    }
  }
  if (Height && v6)
  {
    for (uint64_t j = 0; j != Height; ++j)
    {
      uint64_t v18 = (uint64_t)&BaseAddress[3 * Width + j * BytesPerRow];
      char v19 = *(unsigned char *)(v18 - 3);
      char v20 = *(unsigned char *)(v18 - 2);
      char v21 = *(unsigned char *)(v18 - 1);
      uint64_t v22 = (unsigned char *)(v18 + 2);
      size_t v23 = v6;
      do
      {
        *(v22 - 2) = v19;
        *(v22 - 1) = v20;
        *uint64_t v22 = v21;
        v22 += 3;
        --v23;
      }
      while (v23);
    }
  }
  if (v9)
  {
    unint64_t v24 = &BaseAddress[-(BytesPerRow * v9) + -3 * v7];
    do
    {
      memcpy(v24, &BaseAddress[-3 * v7], BytesPerRow);
      v24 += BytesPerRow;
      --v9;
    }
    while (v9);
  }
  if (v8)
  {
    long long v25 = &BaseAddress[(Height - 1) * BytesPerRow + -3 * v7];
    unint64_t v26 = &BaseAddress[Height * BytesPerRow + -3 * v7];
    for (unint64_t k = 1; k <= v8; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended16(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v7 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended16(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended16(char *result, uint64_t a2, uint64_t a3, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  uint64_t v10 = a7;
  char v14 = result;
  if (a5 && a3)
  {
    for (uint64_t i = 0; i != a3; ++i)
    {
      size_t v16 = &result[i * __n + -2 * a5];
      __int16 v17 = *(_WORD *)&v16[2 * a5];
      uint64_t v18 = a5;
      do
      {
        *(_WORD *)size_t v16 = v17;
        v16 += 2;
        --v18;
      }
      while (v18);
    }
  }
  if (a6 && a3)
  {
    for (uint64_t j = 0; j != a3; ++j)
    {
      char v20 = &result[2 * a2 + j * __n];
      __int16 v21 = *((_WORD *)v20 - 1);
      uint64_t v22 = a6;
      do
      {
        *(_WORD *)char v20 = v21;
        v20 += 2;
        --v22;
      }
      while (v22);
    }
  }
  if (a7)
  {
    size_t v23 = &result[-(a7 * __n) + -2 * a5];
    do
    {
      uint64_t result = (char *)memcpy(v23, &v14[-2 * a5], __n);
      v23 += __n;
      --v10;
    }
    while (v10);
  }
  if (a8)
  {
    unint64_t v24 = &v14[(a3 - 1) * __n + -2 * a5];
    long long v25 = &v14[__n * a3 + -2 * a5];
    unint64_t v26 = 1;
    do
    {
      uint64_t result = (char *)memcpy(v25, v24, __n);
      ++v26;
      v25 += __n;
    }
    while (v26 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended8(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v7 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v7);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  fillExtended8(BaseAddress, Width, Height, BytesPerRow, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v7, v7);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

char *fillExtended8(char *result, uint64_t a2, uint64_t a3, size_t __n, size_t __len, size_t a6, uint64_t a7, unint64_t a8, void *a9)
{
  size_t v16 = result;
  if (__len && a3)
  {
    __int16 v17 = &result[-__len];
    uint64_t v18 = a3;
    do
    {
      uint64_t result = (char *)memset(v17, v17[__len], __len);
      v17 += __n;
      --v18;
    }
    while (v18);
  }
  if (a6 && a3)
  {
    char v19 = &v16[a2];
    uint64_t v20 = a3;
    do
    {
      uint64_t result = (char *)memset(v19, *(v19 - 1), a6);
      v19 += __n;
      --v20;
    }
    while (v20);
  }
  if (a7)
  {
    __int16 v21 = &v16[-(a7 * __n) - __len];
    do
    {
      uint64_t result = (char *)memcpy(v21, &v16[-__len], __n);
      v21 += __n;
      --a7;
    }
    while (a7);
  }
  if (a8)
  {
    uint64_t v22 = &v16[(a3 - 1) * __n - __len];
    size_t v23 = &v16[__n * a3 - __len];
    unint64_t v24 = 1;
    do
    {
      uint64_t result = (char *)memcpy(v23, v22, __n);
      ++v24;
      v23 += __n;
    }
    while (v24 <= a8);
  }
  return result;
}

uint64_t _CVXFillExtended3216(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  uint64_t v11 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v11);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  size_t v6 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v7 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  size_t v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v9, v6, v7, v8, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended2vuy(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v31 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v31);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = BaseAddress;
  size_t v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      if (v7)
      {
        size_t v9 = 0;
        uint64_t v10 = &BaseAddress[i * BytesPerRow];
        uint64_t v11 = &v10[-2 * v7];
        char v12 = *v10;
        char v13 = v10[1];
        char v14 = v10[2];
        CFNumberRef v15 = v11 + 3;
        do
        {
          *(v15 - 3) = v12;
          *(v15 - 2) = v13;
          *(v15 - 1) = v14;
          *CFNumberRef v15 = v13;
          v15 += 4;
          v9 += 2;
          size_t v7 = extraColumnsOnLeft;
        }
        while (v9 < extraColumnsOnLeft);
      }
    }
  }
  if (extraColumnsOnRight && Height)
  {
    uint64_t v16 = 0;
    size_t v17 = 1;
    do
    {
      if (v17)
      {
        size_t v18 = 0;
        uint64_t v19 = (uint64_t)&BaseAddress[2 * Width + v16 * BytesPerRow];
        char v20 = *(unsigned char *)(v19 - 4);
        char v21 = *(unsigned char *)(v19 - 1);
        char v22 = *(unsigned char *)(v19 - 2);
        size_t v23 = (unsigned char *)(v19 + 3);
        do
        {
          *(v23 - 3) = v20;
          *(v23 - 2) = v21;
          *(v23 - 1) = v22;
          *size_t v23 = v21;
          v23 += 4;
          v18 += 2;
          size_t v17 = extraColumnsOnRight;
        }
        while (v18 < extraColumnsOnRight);
      }
      ++v16;
    }
    while (v16 != Height);
  }
  size_t v24 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    long long v25 = &BaseAddress[-2 * extraColumnsOnLeft];
    unint64_t v26 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -2 * extraColumnsOnLeft];
    do
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
      --v24;
    }
    while (v24);
  }
  if (v31)
  {
    unsigned int v27 = &v6[(Height - 1) * BytesPerRow + -2 * extraColumnsOnLeft];
    size_t v28 = &v6[Height * BytesPerRow + -2 * extraColumnsOnLeft];
    for (size_t j = 1; j <= v31; ++j)
    {
      memcpy(v28, v27, BytesPerRow);
      v28 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedyuvs(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v31 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v31);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = BaseAddress;
  size_t v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      if (v7)
      {
        size_t v9 = 0;
        uint64_t v10 = &BaseAddress[i * BytesPerRow];
        uint64_t v11 = &v10[-2 * v7];
        char v12 = *v10;
        char v13 = v10[1];
        char v14 = v10[3];
        CFNumberRef v15 = v11 + 3;
        do
        {
          *(v15 - 3) = v12;
          *(v15 - 2) = v13;
          *(v15 - 1) = v12;
          *CFNumberRef v15 = v14;
          v15 += 4;
          v9 += 2;
          size_t v7 = extraColumnsOnLeft;
        }
        while (v9 < extraColumnsOnLeft);
      }
    }
  }
  if (extraColumnsOnRight && Height)
  {
    uint64_t v16 = 0;
    size_t v17 = 1;
    do
    {
      if (v17)
      {
        size_t v18 = 0;
        uint64_t v19 = (uint64_t)&BaseAddress[2 * Width + v16 * BytesPerRow];
        char v20 = *(unsigned char *)(v19 - 3);
        char v21 = *(unsigned char *)(v19 - 2);
        char v22 = *(unsigned char *)(v19 - 1);
        size_t v23 = (unsigned char *)(v19 + 3);
        do
        {
          *(v23 - 3) = v21;
          *(v23 - 2) = v20;
          *(v23 - 1) = v21;
          *size_t v23 = v22;
          v23 += 4;
          v18 += 2;
          size_t v17 = extraColumnsOnRight;
        }
        while (v18 < extraColumnsOnRight);
      }
      ++v16;
    }
    while (v16 != Height);
  }
  size_t v24 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    long long v25 = &BaseAddress[-2 * extraColumnsOnLeft];
    unint64_t v26 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -2 * extraColumnsOnLeft];
    do
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
      --v24;
    }
    while (v24);
  }
  if (v31)
  {
    unsigned int v27 = &v6[(Height - 1) * BytesPerRow + -2 * extraColumnsOnLeft];
    size_t v28 = &v6[Height * BytesPerRow + -2 * extraColumnsOnLeft];
    for (size_t j = 1; j <= v31; ++j)
    {
      memcpy(v28, v27, BytesPerRow);
      v28 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended444_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended444_8_common(__CVBuffer *a1, int a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v18 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v18);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v12, v9, v10, v11, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  if (a2)
  {
    size_t v13 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    size_t v14 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    size_t v15 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    uint64_t v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(v16, v13, v14, v15, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended444A_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_8_common(__CVBuffer *a1, int a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v18 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v18);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop, (unint64_t)v18, v18);
  if (a2)
  {
    size_t v13 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    size_t v14 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    size_t v15 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    uint64_t v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(v16, v13, v14, v15, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended422A_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_8_common(__CVBuffer *a1, int a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v18 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v18);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended16(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop >> 1, (unint64_t)v18 >> 1, v18);
  if (a2)
  {
    size_t v13 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    size_t v14 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    size_t v15 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    uint64_t v16 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(v16, v13, v14, v15, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v18, v18);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended420A_8(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended444_16_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended16(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended32(v12, v9, v10, v11, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedAlpha(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v14 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v14);
  CVPixelBufferLockBaseAddress(a1, 0);
  if (a2 == 8)
  {
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended8(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v14, v14);
  }
  else if (a2 == 16)
  {
    size_t v5 = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
    size_t v6 = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
    size_t v7 = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
    size_t v8 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
    fillExtended16(v8, v5, v6, v7, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v14, v14);
  }
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t _CVXFillExtended444_16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended444_16_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_16_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended16(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended32(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop, (unint64_t)v15, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended422_16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_16_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_16_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended16(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v15, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended32(v12, v9, v10, v11, extraColumnsOnLeft >> 1, extraColumnsOnRight >> 1, extraRowsOnTop >> 1, (unint64_t)v15 >> 1, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended420_16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_16_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended444_10packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, (WidthOfPlane + 2) / 3, (HeightOfPlane + 2) / 3, BytesPerRowOfPlane, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended64(v12, (v9 + 2) / 3, (v10 + 2) / 3, v11, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended444_10packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended444_10packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_10packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, (WidthOfPlane + 2) / 3, (HeightOfPlane + 2) / 3, BytesPerRowOfPlane, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended64(v12, (v9 + 2) / 3, (v10 + 2) / 3, v11, (extraColumnsOnLeft + 5) / 6, (extraColumnsOnRight + 5) / 6, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended422_10packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_10packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_10packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, (WidthOfPlane + 2) / 3, (HeightOfPlane + 2) / 3, BytesPerRowOfPlane, (extraColumnsOnLeft + 2) / 3, (extraColumnsOnRight + 2) / 3, (extraRowsOnTop + 2) / 3, ((unint64_t)v15 + 2) / 3, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended64(v12, (v9 + 2) / 3, (v10 + 2) / 3, v11, (extraColumnsOnLeft + 5) / 6, (extraColumnsOnRight + 5) / 6, (extraRowsOnTop + 5) / 6, ((unint64_t)v15 + 5) / 6, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended420_10packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_10packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended444_12packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended64(BaseAddressOfPlane, (WidthOfPlane + 4) / 5, (HeightOfPlane + 4) / 5, BytesPerRowOfPlane, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended128(v12, (v9 + 4) / 5, (v10 + 4) / 5, v11, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended444_12packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended444_12packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_12packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended64(BaseAddressOfPlane, (WidthOfPlane + 4) / 5, (HeightOfPlane + 4) / 5, BytesPerRowOfPlane, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended128(v12, (v9 + 4) / 5, (v10 + 4) / 5, v11, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 9) / 0xA, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 9) / 0xA, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended422_12packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended422_12packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_12packed_common(__CVBuffer *a1, uint64_t a2, void *a3)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v15 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v15);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended64(BaseAddressOfPlane, (WidthOfPlane + 4) / 5, (HeightOfPlane + 4) / 5, BytesPerRowOfPlane, (extraColumnsOnLeft + 4) / 5, (extraColumnsOnRight + 4) / 5, (extraRowsOnTop + 4) / 5, ((unint64_t)v15 + 4) / 5, v15);
  size_t v9 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v10 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v11 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  char v12 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended128(v12, (v9 + 4) / 5, (v10 + 4) / 5, v11, (extraColumnsOnLeft + 9) / 0xA, (extraColumnsOnRight + 9) / 0xA, (extraRowsOnTop + 9) / 0xA, ((unint64_t)v15 + 9) / 0xA, v15);
  _CVXFillExtendedAlpha(a1, a2, v13);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtended420_12packed(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtended420_12packed_Alpha16(__CVBuffer *a1, uint64_t a2, void *a3)
{
  return 1;
}

uint64_t _CVXFillExtendedb3a8(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v11 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, (size_t *)&v11);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, 0);
  size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, 0);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  fillExtended32(BaseAddressOfPlane, WidthOfPlane, HeightOfPlane, BytesPerRowOfPlane, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  size_t v6 = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  size_t v7 = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  size_t v8 = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  size_t v9 = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  fillExtended8(v9, v6, v7, v8, extraColumnsOnLeft, extraColumnsOnRight, extraRowsOnTop, (unint64_t)v11, v11);
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedx22p(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v29 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      size_t v8 = 0;
      uint64_t v9 = (uint64_t)&BaseAddress[i * BytesPerRow + -2 * v6];
      __int16 v10 = *(_WORD *)(v9 + 4 * v6);
      __int16 v11 = *(_WORD *)(v9 + 2 * ((2 * v6) | 1));
      __int16 v12 = *(_WORD *)(v9 + 2 * (2 * v6 + 2));
      size_t v13 = (_WORD *)(v9 + 4);
      do
      {
        *(v13 - 2) = v10;
        *(v13 - 1) = v11;
        *size_t v13 = v12;
        v13[1] = v11;
        v8 += 2;
        v13 += 4;
      }
      while (v8 < v6);
    }
  }
  size_t v14 = extraColumnsOnRight;
  if (extraColumnsOnRight && Height)
  {
    for (uint64_t j = 0; j != Height; ++j)
    {
      size_t v16 = 0;
      uint64_t v17 = (uint64_t)&BaseAddress[2 * Width + j * BytesPerRow];
      __int16 v18 = *(_WORD *)(v17 - 8);
      __int16 v19 = *(_WORD *)(v17 - 2);
      __int16 v20 = *(_WORD *)(v17 - 4);
      char v21 = (_WORD *)(v17 + 4);
      do
      {
        *(v21 - 2) = v18;
        *(v21 - 1) = v19;
        *char v21 = v20;
        v21[1] = v19;
        v16 += 2;
        v21 += 4;
      }
      while (v16 < v14);
    }
  }
  size_t v22 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    size_t v23 = &BaseAddress[-2 * v6];
    size_t v24 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -2 * v6];
    do
    {
      memcpy(v24, v23, BytesPerRow);
      v24 += BytesPerRow;
      --v22;
    }
    while (v22);
  }
  if (v29)
  {
    long long v25 = &BaseAddress[(Height - 1) * BytesPerRow + -2 * extraColumnsOnLeft];
    unint64_t v26 = &BaseAddress[Height * BytesPerRow + -2 * extraColumnsOnLeft];
    for (size_t k = 1; k <= v29; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedv216(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v29 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v29);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      size_t v8 = 0;
      uint64_t v9 = (uint64_t)&BaseAddress[i * BytesPerRow + -4 * v6];
      __int16 v10 = *(_WORD *)(v9 + 4 * v6);
      __int16 v11 = *(_WORD *)(v9 + 2 * ((2 * v6) | 1));
      __int16 v12 = *(_WORD *)(v9 + 2 * (2 * v6 + 2));
      size_t v13 = (_WORD *)(v9 + 4);
      do
      {
        *(v13 - 2) = v10;
        *(v13 - 1) = v11;
        *size_t v13 = v12;
        v13[1] = v11;
        v8 += 2;
        v13 += 4;
      }
      while (v8 < v6);
    }
  }
  size_t v14 = extraColumnsOnRight;
  if (extraColumnsOnRight && Height)
  {
    for (uint64_t j = 0; j != Height; ++j)
    {
      size_t v16 = 0;
      uint64_t v17 = (uint64_t)&BaseAddress[4 * Width + j * BytesPerRow];
      __int16 v18 = *(_WORD *)(v17 - 8);
      __int16 v19 = *(_WORD *)(v17 - 2);
      __int16 v20 = *(_WORD *)(v17 - 4);
      char v21 = (_WORD *)(v17 + 4);
      do
      {
        *(v21 - 2) = v18;
        *(v21 - 1) = v19;
        *char v21 = v20;
        v21[1] = v19;
        v16 += 2;
        v21 += 4;
      }
      while (v16 < v14);
    }
  }
  size_t v22 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    size_t v23 = &BaseAddress[-4 * v6];
    size_t v24 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -4 * v6];
    do
    {
      memcpy(v24, v23, BytesPerRow);
      v24 += BytesPerRow;
      --v22;
    }
    while (v22);
  }
  if (v29)
  {
    long long v25 = &BaseAddress[(Height - 1) * BytesPerRow + -4 * extraColumnsOnLeft];
    unint64_t v26 = &BaseAddress[Height * BytesPerRow + -4 * extraColumnsOnLeft];
    for (size_t k = 1; k <= v29; ++k)
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedv210(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t extraRowsOnBottom = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &extraRowsOnBottom);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  char v57 = a1;
  if (extraColumnsOnLeft)
  {
    size_t v6 = extraColumnsOnLeft + 5;
    size_t v7 = (extraColumnsOnLeft + 5) / 6;
    size_t v56 = v7;
    if (Height)
    {
      uint64_t v8 = 0;
      size_t v9 = 6 * v7 - extraColumnsOnLeft;
      size_t v10 = 2;
      if (v7 > 2) {
        size_t v10 = (extraColumnsOnLeft + 5) / 6;
      }
      size_t v11 = v10 - 1;
      do
      {
        __int16 v12 = (int *)&BaseAddress[v8 * BytesPerRow];
        size_t v13 = &v12[-4 * v7];
        unsigned int v14 = *v12;
        int v15 = (unsigned __int16)*v12 >> 10;
        unsigned int v16 = *v12 >> 20;
        switch(v9)
        {
          case 0uLL:
            int v17 = *v12 & 0x3F | (((*v12 >> 20) & 0x3F) << 20) | ((v15 & 0x3F) << 10);
            int v18 = v15 << 20;
            int v19 = ((unsigned __int16)v14 >> 10) & 0xFC0F03FF | ((v14 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            unsigned int v20 = v15 & 0xFC0F03FF | ((v16 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            int v21 = ((v14 & 0x3F) << 20) | (v14 >> 20) & 0x3F | (v15 << 10);
            break;
          case 1uLL:
            int v18 = v15 << 20;
            int v19 = ((unsigned __int16)v14 >> 10) & 0xFC0F03FF | ((v14 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            int v17 = v14 & 0x3F | ((v16 & 0x3F) << 20);
            int v21 = ((v14 & 0x3F) << 20) | (v15 << 10) | (v14 >> 20) & 0x3F;
            unsigned int v20 = v15 & 0xFC0F03FF | ((v16 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            break;
          case 2uLL:
            int v18 = v15 << 20;
            int v19 = (v15 << 20) | ((*v12 & 0x3F) << 10);
            int v21 = ((v14 & 0x3F) << 20) | (v15 << 10) | (v14 >> 20) & 0x3F;
            unsigned int v20 = v15 & 0xFC0F03FF | ((v16 & 0x3F) << 10) | ((v15 & 0x3F) << 20);
            goto LABEL_15;
          case 3uLL:
            int v19 = (*v12 & 0x3F) << 10;
            int v21 = ((v14 & 0x3F) << 20) | (v15 << 10) | (v14 >> 20) & 0x3F;
            int v18 = v15 << 20;
            unsigned int v20 = (v15 << 20) | ((v16 & 0x3F) << 10) | v15;
            goto LABEL_15;
          case 4uLL:
            int v21 = ((*v12 & 0x3F) << 20) | 0x200;
            int v18 = v15 << 20;
            unsigned int v20 = (v15 << 20) | (((*v12 >> 20) & 0x3F) << 10) | v15;
            goto LABEL_14;
          case 5uLL:
            int v21 = ((*v12 & 0x3F) << 20) | 0x200;
            int v18 = v15 << 20;
            unsigned int v20 = (v15 << 20) | (((*v12 >> 20) & 0x3F) << 10);
LABEL_14:
            int v19 = 0x80000;
LABEL_15:
            int v17 = 536871424;
            break;
          default:
            int v21 = v12[2];
            unsigned int v20 = v12[3];
            int v18 = v15 << 20;
            int v17 = *v12;
            int v19 = v12[1];
            break;
        }
        *size_t v13 = v17;
        v13[1] = v19;
        v13[2] = v21;
        v13[3] = v20;
        if (v6 >= 0xC)
        {
          int v22 = v14 & 0x3F | ((v16 & 0x3F) << 20) | ((v15 & 0x3F) << 10);
          unsigned int v23 = ((unsigned __int16)v14 >> 10) & 0xFFFF03FF | ((v14 & 0x3F) << 10) | v18;
          int v24 = ((v14 & 0x3F) << 20) | (v14 >> 20) & 0x3F | (v15 << 10);
          unsigned int v25 = v15 & 0xFFFF03FF | ((v16 & 0x3F) << 10) | v18;
          unint64_t v26 = (unsigned int *)(v13 + 7);
          size_t v27 = v11;
          do
          {
            *(v26 - 3) = v22;
            *(v26 - 2) = v23;
            *(v26 - 1) = v24;
            *unint64_t v26 = v25;
            v26 += 4;
            --v27;
          }
          while (v27);
        }
        ++v8;
      }
      while (v8 != Height);
    }
  }
  else
  {
    size_t v56 = 0;
  }
  if (extraColumnsOnRight && Height)
  {
    uint64_t v28 = 0;
    unint64_t v29 = (Width - 1) / 6;
    size_t v30 = Width - 1 + extraColumnsOnRight;
    unint64_t v31 = v30 / 6;
    unint64_t v32 = v30 % 6;
    do
    {
      unsigned int v33 = (unsigned int *)&BaseAddress[16 * v29 + v28 * BytesPerRow];
      unsigned int v34 = *v33;
      int v35 = *v33 & 0x3F;
      int v36 = (*v33 >> 20) & 0x3F;
      unsigned int v38 = v33[1];
      unsigned int v37 = v33[2];
      int v39 = (unsigned __int16)v38 >> 10;
      unsigned int v40 = v33[3];
      switch((Width - 1) % 6)
      {
        case 1uLL:
          unsigned int v41 = *v33 & 0xFC3F | (((*v33 >> 20) & 0x3F) << 20);
          unsigned int v42 = v33[1] & 0x3F | ((v34 & 0x3F) << 10) | ((v33[1] & 0x3F) << 20);
          int v43 = v33[1] & 0x3F;
          unsigned int v44 = ((*v33 & 0x3F) << 20) | (v43 << 10) | (*v33 >> 20) & 0x3F;
          int v45 = v43 | (((v34 >> 20) & 0x3F) << 10) & 0xFC0FFFFF | (v43 << 20);
          break;
        case 2uLL:
          int v43 = (v38 >> 20) & 0x3F;
          unsigned int v41 = v34 & 0x3F0FC3F;
          unsigned int v42 = v33[1] & 0x3F | (v39 << 10) & 0xFC0FFFFF | (v43 << 20);
          unsigned int v44 = (v43 << 10) | (v39 << 20) | v33[2] & 0x3F;
          int v35 = (unsigned __int16)v38 >> 10;
          int v36 = v33[2] & 0x3F;
          int v45 = v43 | ((v37 & 0x3F) << 10) | (v43 << 20);
          break;
        case 3uLL:
          int v43 = (unsigned __int16)v33[2] >> 10;
          unsigned int v41 = v34 & 0x3F0FC3F;
          unsigned int v42 = v38 & 0x3F0003F | (v39 << 10);
          unsigned int v44 = (v39 << 20) | (v43 << 10) | v33[2] & 0x3F;
          int v35 = (unsigned __int16)v38 >> 10;
          int v36 = v33[2] & 0x3F;
          int v45 = (v36 << 10) | (v43 << 20) | v43;
          break;
        case 4uLL:
          int v43 = v33[3] & 0x3F;
          unsigned int v41 = v34 & 0x3F0FC3F;
          unsigned int v42 = v38 & 0x3F0FC3F;
          unsigned int v44 = v37 & 0x3F0FC3F;
          int v45 = v33[3] & 0xFC3F | (v43 << 20);
          goto LABEL_32;
        case 5uLL:
          int v43 = (v40 >> 20) & 0x3F;
          unsigned int v41 = v34 & 0x3F0FC3F;
          unsigned int v42 = v38 & 0x3F0FC3F;
          unsigned int v44 = v37 & 0x3F0FC3F;
          int v45 = v40 & 0x3F0FC3F;
LABEL_32:
          int v35 = (v37 >> 20) & 0x3F;
          int v36 = (unsigned __int16)v40 >> 10;
          break;
        default:
          int v43 = (unsigned __int16)*v33 >> 10;
          unsigned int v41 = *v33 & 0x3F | (((v34 >> 20) & 0x3F) << 20) | (BYTE1(v34) >> 2 << 10);
          unsigned int v42 = v43 & 0xFFFF03FF | ((*v33 & 0x3F) << 10) | (v43 << 20);
          int v45 = v43 & 0xFC0F03FF | (((*v33 >> 20) & 0x3F) << 10) & 0xFC0FFFFF | (BYTE1(*v33) >> 2 << 20);
          unsigned int v44 = (v35 << 20) | (v34 >> 20) & 0x3F | (v43 << 10);
          break;
      }
      *unsigned int v33 = v41;
      v33[1] = v42;
      __int16 v46 = v33 + 4;
      v33[2] = v44;
      v33[3] = v45;
      if (v29 + 1 >= v31)
      {
        unint64_t v48 = (Width - 1) / 6;
      }
      else
      {
        unsigned int v41 = v35 | (v36 << 20) | (v43 << 10);
        unsigned int v44 = v36 & 0xFFFF03FF | (v35 << 20) | ((v43 & 0x3F) << 10);
        unint64_t v47 = v31 - 1 - v29;
        int v45 = v43 | (v36 << 10) | (v43 << 20);
        do
        {
          *__int16 v46 = v41;
          v46[1] = (v43 | (v35 << 10)) & 0xFC0FFFFF | ((v43 & 0x3F) << 20);
          v46[2] = v44;
          v46[3] = v45;
          v46 += 4;
          --v47;
        }
        while (v47);
        unsigned int v33 = v46 - 4;
        unint64_t v48 = v31 - 1;
      }
      if (v48 < v31)
      {
        while (1)
        {
          unsigned int v55 = v32;
          switch(v32)
          {
            case 0uLL:
              int v45 = 0x80000;
              unsigned int v44 = 536871424;
              unsigned int v55 = 0x80000;
              goto LABEL_51;
            case 1uLL:
              int v45 = 0x80000;
              unsigned int v44 = 536871424;
              unsigned int v55 = v43 | 0x80000;
              goto LABEL_51;
            case 2uLL:
              int v45 = 0x80000;
              unsigned int v44 = v36 | 0x20000000;
              unsigned int v55 = (v43 << 20) | (v35 << 10) | v43;
LABEL_51:
              unsigned int v41 = (v35 | (v43 << 10)) & 0xFC0FFFFF | ((v36 & 0x3F) << 20);
              break;
            case 3uLL:
              int v45 = 0x80000;
              unsigned int v44 = v36 & 0xDFFF03FF | 0x20000000 | ((v43 & 0x3F) << 10);
              goto LABEL_54;
            case 4uLL:
              int v45 = v43 | (v36 << 10);
              unsigned int v44 = v36 & 0xFFFF03FF | (v35 << 20) | ((v43 & 0x3F) << 10);
LABEL_54:
              unsigned int v55 = (v43 << 20) | (v35 << 10) | v43;
              goto LABEL_56;
            case 5uLL:
              int v45 = (v43 | (v36 << 10)) & 0xFC0FFFFF | ((v43 & 0x3F) << 20);
              unsigned int v44 = v36 & 0xFFFF03FF | (v35 << 20) | ((v43 & 0x3F) << 10);
              unsigned int v55 = v43 & 0xFC0F03FF | ((v35 & 0x3F) << 10) | ((v43 & 0x3F) << 20);
LABEL_56:
              unsigned int v41 = v35 & 0xFFFF03FF | (v36 << 20) | ((v43 & 0x3F) << 10);
              break;
            default:
              break;
          }
          *__int16 v46 = v41;
          v33[5] = v55;
          v33[6] = v44;
          v33[7] = v45;
        }
      }
      ++v28;
    }
    while (v28 != Height);
  }
  size_t v49 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    CFDictionaryRef v50 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -16 * v56];
    do
    {
      memcpy(v50, &BaseAddress[-16 * v56], BytesPerRow);
      v50 += BytesPerRow;
      --v49;
    }
    while (v49);
  }
  if (extraRowsOnBottom)
  {
    double v51 = &BaseAddress[(Height - 1) * BytesPerRow + -16 * v56];
    double v52 = &BaseAddress[Height * BytesPerRow + -16 * v56];
    for (size_t i = 1; i <= extraRowsOnBottom; ++i)
    {
      memcpy(v52, v51, BytesPerRow);
      v52 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(v57, 0);
  return 1;
}

uint64_t _CVXFillExtendedSpecial1(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v28 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v28);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = BaseAddress;
  size_t v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      size_t v9 = 0;
      uint64_t v10 = (uint64_t)&BaseAddress[i * BytesPerRow + -4 * v7];
      unsigned int v11 = *(_DWORD *)(v10 + 4 * v7) | 0xFF000000;
      unsigned int v12 = *(_DWORD *)(v10 + 4 * v7) & 0xFF0F | *(_DWORD *)(v10 + 4 * (v7 + 1)) & 0xFF00F0 | 0xFF000000;
      do
      {
        size_t v13 = (unsigned int *)(v10 + 4 * v9);
        *size_t v13 = v11;
        v13[1] = v12;
        v9 += 2;
      }
      while (v9 < v7);
    }
  }
  size_t v14 = extraColumnsOnRight;
  if (extraColumnsOnRight && Height)
  {
    for (uint64_t j = 0; j != Height; ++j)
    {
      size_t v16 = 0;
      uint64_t v17 = (uint64_t)&BaseAddress[4 * Width + j * BytesPerRow];
      unsigned int v18 = *(_DWORD *)(v17 - 8) & 0xFF00F0 | *(_DWORD *)(v17 - 4) & 0xFF0F | 0xFF000000;
      unsigned int v19 = *(_DWORD *)(v17 - 4) | 0xFF000000;
      do
      {
        unsigned int v20 = (unsigned int *)(v17 + 4 * v16);
        *unsigned int v20 = v18;
        v20[1] = v19;
        v16 += 4;
      }
      while (v16 < v14);
    }
  }
  size_t v21 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    int v22 = &BaseAddress[-4 * v7];
    unsigned int v23 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -4 * v7];
    do
    {
      memcpy(v23, v22, BytesPerRow);
      v23 += BytesPerRow;
      --v21;
    }
    while (v21);
  }
  if (v28)
  {
    int v24 = &v6[(Height - 1) * BytesPerRow + -4 * extraColumnsOnLeft];
    unsigned int v25 = &v6[Height * BytesPerRow + -4 * extraColumnsOnLeft];
    for (size_t k = 1; k <= v28; ++k)
    {
      memcpy(v25, v24, BytesPerRow);
      v25 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t _CVXFillExtendedSpecial3(__CVBuffer *a1)
{
  size_t extraColumnsOnRight = 0;
  size_t extraColumnsOnLeft = 0;
  size_t v31 = 0;
  size_t extraRowsOnTop = 0;
  CVPixelBufferGetExtendedPixels(a1, &extraColumnsOnLeft, &extraColumnsOnRight, &extraRowsOnTop, &v31);
  CVPixelBufferLockBaseAddress(a1, 0);
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
  IOSurfaceRef BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t v6 = BaseAddress;
  size_t v7 = extraColumnsOnLeft;
  if (extraColumnsOnLeft && Height)
  {
    for (uint64_t i = 0; i != Height; ++i)
    {
      if (v7)
      {
        size_t v9 = 0;
        uint64_t v10 = (uint64_t)&BaseAddress[i * BytesPerRow + -4 * v7];
        unsigned int v11 = &BaseAddress[i * BytesPerRow];
        __int16 v12 = *((_WORD *)v11 + 2);
        __int16 v13 = *((_WORD *)v11 + 1);
        __int16 v14 = *(_WORD *)v11;
        int v15 = (unsigned char *)(v10 + 3);
        do
        {
          *(v15 - 3) = v14;
          *(v15 - 2) = v13;
          *(v15 - 1) = v12;
          *int v15 = v13;
          v15 += 8;
          v9 += 2;
          size_t v7 = extraColumnsOnLeft;
        }
        while (v9 < extraColumnsOnLeft);
      }
    }
  }
  if (extraColumnsOnRight && Height)
  {
    uint64_t v16 = 0;
    size_t v17 = 1;
    do
    {
      if (v17)
      {
        size_t v18 = 0;
        uint64_t v19 = (uint64_t)&BaseAddress[4 * Width + v16 * BytesPerRow];
        __int16 v20 = *(_WORD *)(v19 - 8);
        __int16 v21 = *(_WORD *)(v19 - 2);
        __int16 v22 = *(_WORD *)(v19 - 4);
        unsigned int v23 = (unsigned char *)(v19 + 3);
        do
        {
          *(v23 - 3) = v20;
          *(v23 - 2) = v21;
          *(v23 - 1) = v22;
          *unsigned int v23 = v21;
          v23 += 16;
          v18 += 4;
          size_t v17 = extraColumnsOnRight;
        }
        while (v18 < extraColumnsOnRight);
      }
      ++v16;
    }
    while (v16 != Height);
  }
  size_t v24 = extraRowsOnTop;
  if (extraRowsOnTop)
  {
    unsigned int v25 = &BaseAddress[-4 * extraColumnsOnLeft];
    unint64_t v26 = &BaseAddress[-(BytesPerRow * extraRowsOnTop) + -4 * extraColumnsOnLeft];
    do
    {
      memcpy(v26, v25, BytesPerRow);
      v26 += BytesPerRow;
      --v24;
    }
    while (v24);
  }
  if (v31)
  {
    size_t v27 = &v6[(Height - 1) * BytesPerRow + -4 * extraColumnsOnLeft];
    size_t v28 = &v6[Height * BytesPerRow + -4 * extraColumnsOnLeft];
    for (size_t j = 1; j <= v31; ++j)
    {
      memcpy(v28, v27, BytesPerRow);
      v28 += BytesPerRow;
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  return 1;
}

uint64_t CVMetalTextureBacking::finalize(CVMetalTextureBacking *this)
{
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    *((void *)this + 21) = 0;
  }
  CFTypeID v3 = (const void *)*((void *)this + 25);
  if (v3)
  {
    CFRelease(v3);
    *((void *)this + 25) = 0;
  }
  uint64_t v4 = (const void *)*((void *)this + 24);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + CVBitOrAtomic(1, this + 24) = 0;
  }
  size_t v5 = (const void *)*((void *)this + 26);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 26) = 0;
  }
  size_t v6 = (const void *)*((void *)this + 28);
  if (v6)
  {
    CFRelease(v6);
    *((void *)this + 28) = 0;
  }

  return CVImageBacking::finalize(this);
}

uint64_t CVMetalTextureBacking::createTextureBackingForDevice(CVMetalTextureBacking *this, const __CFAllocator *a2, void *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  return (*(uint64_t (**)(void, const __CFAllocator *, void *, const __CFDictionary *, CVImageBuffer *, int *))(**((void **)this + 21) + 232))(*((void *)this + 21), a2, a3, a4, a5, a6);
}

uint64_t CVMetalTextureBacking::getDevice(CVMetalTextureBacking *this)
{
  return *((void *)this + 24);
}

uint64_t CVMetalTextureBacking::isFlipped(CVMetalTextureBacking *this)
{
  return *((unsigned __int8 *)this + 216);
}

double CVMetalTextureBacking::getSize(CVMetalTextureBacking *this)
{
  return (float)*((unint64_t *)this + 22);
}

uint64_t CVMetalTextureBacking::provideImageTexture(CVMetalTextureBacking *this, void *a2, int a3, int a4, unsigned int a5, CGRect *a6, const __CFDictionary *a7, CVImageBuffer *a8)
{
  a6->origin.x = 0.0;
  a6->origin.y = 0.0;
  a6->size.width = (*(double (**)(CVMetalTextureBacking *, void *))(*(void *)this + 176))(this, a2);
  a6->size.height = v9;
  return 0;
}

uint64_t CVMetalTextureBacking::provideImageData(CVMetalTextureBacking *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(**((void **)this + 21) + 184))(*((void *)this + 21), a2);
}

uint64_t CVMetalTextureBacking::getPixelFormatType(CVMetalTextureBacking *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 21) + 192))();
}

uint64_t CVMetalTextureBacking::uploadedCorrectly(CVMetalTextureBacking *this)
{
  return 1;
}

CVBufferBacking **CVMetalBufferBacking::alloc(CVMetalBufferBacking *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVMetalBufferBacking *)_cvTrackingGetCFAllocator(@"CVMetalBufferBacking");
  }
  CFTypeID TypeID = (CVObject *)CVObjectGetTypeID();
  uint64_t v4 = (CVBufferBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0xB0uLL);
  size_t v5 = v4;
  if (v4)
  {
    CVBufferBacking::CVBufferBacking(v4[2], v4);
    *(void *)uint64_t v6 = &unk_1EFA17150;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 16pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0u;
  }
  return v5;
}

void CVMetalBufferBacking::CVMetalBufferBacking(CVMetalBufferBacking *this, const void *a2)
{
  CVBufferBacking::CVBufferBacking(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA17150;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 16pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0u;
}

uint64_t CVMetalBufferBacking::finalize(CVMetalBufferBacking *this)
{
  uint64_t v2 = *((void *)this + 17);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    *((void *)this + 17) = 0;
  }
  uint64_t v3 = *((void *)this + 18);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    *((void *)this + 18) = 0;
  }
  uint64_t v4 = (const void *)*((void *)this + 20);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 2pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  }
  size_t v5 = (const void *)*((void *)this + 19);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 19) = 0;
  }
  uint64_t v6 = (const void *)*((void *)this + 21);
  if (v6)
  {
    CFRelease(v6);
    *((void *)this + 21) = 0;
  }

  return CVBufferBacking::finalize(this);
}

CVMetalBufferBacking *CVMetalBufferBacking::init(CVMetalBufferBacking *this, CVImageBuffer *a2, CVBufferBacking *a3, void *a4)
{
  size_t v7 = this;
  if (!CVBufferBacking::init(this)) {
    return 0;
  }
  *((void *)v7 + 17) = (*(uint64_t (**)(CVImageBuffer *))(*(void *)a2 + 32))(a2);
  *((void *)v7 + 18) = (*(uint64_t (**)(CVBufferBacking *))(*(void *)a3 + 32))(a3);
  *((void *)v7 + 19) = CFRetain(a4);
  uint64_t v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a3 + 152))(a3);
  if (!v8 {
    || (CFTypeRef v9 = CFRetain(v8),
  }
        *((void *)v7 + 21) = v9,
        uint64_t v10 = CVMTLBufferCreate(a4, (uint64_t)v9),
        (*((void *)v7 + 2pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = v10) == 0))
  {
    (*(void (**)(CVMetalBufferBacking *))(*(void *)v7 + 40))(v7);
    return 0;
  }
  return v7;
}

uint64_t CVMetalBufferBacking::retainBackingUsage(CVMetalBufferBacking *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 18) + 64))();
}

uint64_t CVMetalBufferBacking::releaseBackingUsage(CVMetalBufferBacking *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 18) + 72))();
}

CVBufferBacking *CVMetalBufferBacking::retainUsage(CVMetalBufferBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  uint64_t v2 = CVBufferBacking::retainUsage(this);
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v2;
}

uint64_t CVMetalBufferBacking::releaseUsage(atomic_uint *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CVBufferBacking::releaseUsage(this);
  uint64_t v2 = (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex;

  return pthread_mutex_unlock(v2);
}

CFStringRef CVMetalBufferBacking::copyDebugDescription(CVMetalBufferBacking *this)
{
  uint64_t v2 = (*(uint64_t (**)(CVMetalBufferBacking *))(*(void *)this + 24))(this);
  return CFStringCreateWithFormat(0, 0, @"<CVMetalBufferBackingRef %p surface:%@ buffer:%@>", v2, *((void *)this + 21), *((void *)this + 20));
}

uint64_t CVMetalBufferBacking::isInvalidated(CVMetalBufferBacking *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 18) + 120))();
}

uint64_t CVMetalBufferBacking::getBuffer(CVMetalBufferBacking *this)
{
  return *((void *)this + 20);
}

uint64_t CVMetalBufferBacking::getDevice(CVMetalBufferBacking *this)
{
  return *((void *)this + 19);
}

uint64_t CVMetalBufferBacking::getIOSurface(CVMetalBufferBacking *this)
{
  return *((void *)this + 21);
}

uint64_t CVMetalBufferBacking::uploadedCorrectly(CVMetalBufferBacking *this)
{
  return 1;
}

void CVMetalTexture::CVMetalTexture(CVMetalTexture *this, const void *a2)
{
  CVImageBuffer::CVImageBuffer(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA167E8;
  *(void *)(v2 + 104) = 0;
  *(unsigned char *)(v2 + 96) = 1;
}

uint64_t CVMetalTexture::getBacking(CVMetalTexture *this)
{
  return *((void *)this + 13);
}

uint64_t CVMetalTexture::getImageBacking(CVMetalTexture *this)
{
  return *((void *)this + 13);
}

float CVMetalTexture::getCleanTexCoords(CVMetalTexture *this, float *a2, float *a3, float *a4, float *a5)
{
  double v10 = (*(double (**)(CVMetalTexture *))(*(void *)this + 192))(this);
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v17 = (*(double (**)(void))(**((void **)this + 13) + 176))(*((void *)this + 13));
  double v19 = v18;
  float v20 = v12;
  float v21 = v12 + v16;
  if ((*(unsigned int (**)(void))(**((void **)this + 13) + 200))(*((void *)this + 13)))
  {
    float v20 = v19 - v20;
    float v21 = v19 - v21;
  }
  float v22 = v10 / v17;
  *a5 = v22;
  *a2 = v22;
  float v23 = (v10 + v14) / v17;
  *a4 = v23;
  float v24 = v20 / v19;
  *a3 = v23;
  a3[1] = v24;
  a2[1] = v24;
  float result = v21 / v19;
  a4[1] = result;
  a5[1] = result;
  return result;
}

CFStringRef CVMetalTexture::copyDebugDescription(CVMetalTexture *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVMetalTexture *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVMetalTexture *))(*(void *)this + 24))(this);
  double v6 = (*(double (**)(void))(**((void **)this + 13) + 176))(*((void *)this + 13));
  (*(void (**)(void))(**((void **)this + 13) + 176))(*((void *)this + 13));
  uint64_t v8 = v7;
  uint64_t v9 = (*(uint64_t (**)(void))(**((void **)this + 13) + 264))();
  uint64_t v10 = (*(uint64_t (**)(void))(**((void **)this + 13) + 192))(*((void *)this + 13));
  int v11 = (*(uint64_t (**)(void))(**((void **)this + 13) + 200))(*((void *)this + 13));
  double v12 = "YES";
  if (!v11) {
    double v12 = "NO";
  }
  CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"< %@Ref %p size=%g,%g texture=%p pixelFormatType=%08x isFlipped=%s propagatedAttachments=%@ nonPropagatedAttachments=%@>", v4, v5, *(void *)&v6, v8, v9, v10, v12, *((void *)this + 11), *((void *)this + 10));
  CFRelease(v4);
  return v13;
}

CFStringRef classCopyFormatDescription_CVMetalTexture(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVMetalTextureRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalTexture(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

void CVOpenGLESTextureBacking::CVOpenGLESTextureBacking(CVOpenGLESTextureBacking *this, const void *a2)
{
  CVImageBacking::CVImageBacking(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA17658;
  *(_DWORD *)(v2 + 192) = 0;
  *(void *)(v2 + 20pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  *(void *)(v2 + 216) = 0;
  *(void *)(v2 + 168) = 0;
  *(void *)(v2 + 176) = 0;
}

uint64_t CVOpenGLESTextureBacking::finalize(CVOpenGLESTextureBacking *this)
{
  uint64_t v2 = *((void *)this + 21);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    *((void *)this + 21) = 0;
  }
  uint64_t v3 = *((void *)this + 22);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    *((void *)this + 22) = 0;
  }
  uint64_t v4 = (const void *)*((void *)this + 25);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 25) = 0;
  }
  CFIndex v5 = (const void *)*((void *)this + 27);
  if (v5)
  {
    CFRelease(v5);
    *((void *)this + 27) = 0;
  }

  return CVImageBacking::finalize(this);
}

CVOpenGLESTextureBacking *CVOpenGLESTextureBacking::initWithBackingContext(CVOpenGLESTextureBacking *this, CVImageBacking *a2, CVOpenGLESContext *a3, int a4, int a5, char a6)
{
  int v11 = this;
  if (!CVBufferBacking::init(this)) {
    return 0;
  }
  *((void *)v11 + 21) = (*(uint64_t (**)(CVImageBacking *))(*(void *)a2 + 32))(a2);
  *((void *)v11 + 22) = (*(uint64_t (**)(CVOpenGLESContext *))(*(void *)a3 + 32))(a3);
  *((_DWORD *)v11 + 46) = a4;
  *((_DWORD *)v11 + 47) = a5;
  *((unsigned char *)v11 + 208) = a6;
  return v11;
}

uint64_t CVOpenGLESTextureBacking::createGLESTextureBackingForContext(CVOpenGLESTextureBacking *this, const __CFAllocator *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  return (*(uint64_t (**)(void, const __CFAllocator *, CVOpenGLESContext *, const __CFDictionary *, CVImageBuffer *, int *))(**((void **)this + 21) + 216))(*((void *)this + 21), a2, a3, a4, a5, a6);
}

uint64_t CVOpenGLESTextureBacking::setImageBacking(CVOpenGLESTextureBacking *this, CVImageBacking *a2)
{
  uint64_t v4 = *((void *)this + 21);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 40))(v4);
  }
  if (a2)
  {
    uint64_t result = (*(uint64_t (**)(CVImageBacking *))(*(void *)a2 + 32))(a2);
    atomic_fetch_and_explicit((atomic_uint *volatile)this + 24, 0xFFFFFFFE, memory_order_relaxed);
  }
  else
  {
    uint64_t result = 0;
  }
  *((void *)this + 21) = result;
  return result;
}

CFTypeRef CVOpenGLESTextureBacking::setIOSurface(CVOpenGLESTextureBacking *this, CFTypeRef cf)
{
  CFTypeRef result = CFRetain(cf);
  *((void *)this + 25) = cf;
  return result;
}

uint64_t CVOpenGLESTextureBacking::getIOSurface(CVOpenGLESTextureBacking *this)
{
  return *((void *)this + 25);
}

uint64_t CVOpenGLESTextureBacking::isInvalidated(CVOpenGLESTextureBacking *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 21) + 120))();
}

uint64_t CVOpenGLESTextureBacking::getTarget(CVOpenGLESTextureBacking *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t CVOpenGLESTextureBacking::getName(CVOpenGLESTextureBacking *this)
{
  return *((unsigned int *)this + 49);
}

uint64_t CVOpenGLESTextureBacking::isFlipped(CVOpenGLESTextureBacking *this)
{
  return *((unsigned __int8 *)this + 208);
}

double CVOpenGLESTextureBacking::getSize(CVOpenGLESTextureBacking *this)
{
  return (float)*((int *)this + 46);
}

uint64_t CVOpenGLESTextureBacking::getTextureContext(CVOpenGLESTextureBacking *this)
{
  return *((void *)this + 22);
}

uint64_t CVOpenGLESTextureBacking::finishTexture(CVOpenGLESTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  (*(void (**)(void, uint64_t, void))(*(void *)(*((void *)this + 22) + 88) + 3768))(**(void **)(*((void *)this + 22) + 88), 5890, *((unsigned int *)this + 49));
  uint64_t v2 = (pthread_mutex_t *)(*((void *)this + 22) + 16);

  return pthread_mutex_unlock(v2);
}

BOOL CVOpenGLESTextureBacking::testTexture(CVOpenGLESTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  BOOL v2 = (*(unsigned int (**)(void, uint64_t, void))(*(void *)(*((void *)this + 22) + 88) + 3760))(**(void **)(*((void *)this + 22) + 88), 5890, *((unsigned int *)this + 49)) != 0;
  pthread_mutex_unlock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  return v2;
}

uint64_t CVOpenGLESTextureBacking::retainBackingUsage(CVOpenGLESTextureBacking *this)
{
  uint64_t result = *((void *)this + 21);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

uint64_t CVOpenGLESTextureBacking::releaseBackingUsage(CVOpenGLESTextureBacking *this)
{
  uint64_t result = *((void *)this + 21);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  return result;
}

uint64_t CVOpenGLESTextureBacking::provideImageTexture(CVOpenGLESTextureBacking *this, void *a2, int a3, int a4, unsigned int a5, CGRect *a6, const __CFDictionary *a7, CVImageBuffer *a8)
{
  a6->origin.x = 0.0;
  a6->origin.y = 0.0;
  a6->size.width = (*(double (**)(CVOpenGLESTextureBacking *, void *))(*(void *)this + 176))(this, a2);
  a6->size.height = v9;
  return 0;
}

uint64_t CVOpenGLESTextureBacking::provideImageData(CVOpenGLESTextureBacking *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(**((void **)this + 21) + 184))(*((void *)this + 21), a2);
}

uint64_t CVOpenGLESTextureBacking::getPixelFormatType(CVOpenGLESTextureBacking *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 21) + 192))();
}

uint64_t CVOpenGLESTextureBacking::getTextureParams(CVOpenGLESTextureBacking *this)
{
  return *((void *)this + 27);
}

uint64_t CVOpenGLESTextureBacking::uploadedCorrectly(CVOpenGLESTextureBacking *this)
{
  return 1;
}

uint64_t forceIOSurfaceBackingByDefault(void)
{
  if ((forceIOSurfaceBackingByDefault(void)::sDidCheck & 1) == 0)
  {
    AppBooleanCFArrayRef Value = CFPreferencesGetAppBooleanValue(@"pool_iosurface_backing", @"com.apple.corevideo", 0);
    forceIOSurfaceBackingByDefault(void)::sForceIOSurfaceBacking = AppBooleanValue;
    if (AppBooleanValue) {
      syslog(3, "CoreVideo: Will enable CVPixelBufferPool OSurface backing by default -- thank you for setting \"defaults write com.apple.corevideo pool_iosurface_backing -BOOL YES\"\n");
    }
    forceIOSurfaceBackingByDefault(void)::sDidChecsize_t k = 1;
  }
  return forceIOSurfaceBackingByDefault(void)::sForceIOSurfaceBacking;
}

uint64_t CVPixelBufferPool::getAttributes(CVPixelBufferPool *this)
{
  return *((void *)this + 4);
}

uint64_t CVPixelBufferPool::assignNewBacking(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 4294960635;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 152))(*(void *)(a2 + 16));
  if (!v4) {
    return 4294960635;
  }
  CFIndex v5 = (__IOSurface *)v4;
  (*(void (**)(void, void, void, void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16), *(void *)(a2 + 16), 0, 0);
  double v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  CVTracePoolAction(1, v6, (void **)a2, "claimed", v7, v8);
  CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F2F128];
  CFStringRef v10 = (const __CFString *)IOSurfaceCopyValue(v5, (CFStringRef)*MEMORY[0x1E4F2F128]);
  CFStringRef v11 = v10;
  if (v10 && CFStringCompare(v10, @"CoreVideo", 0)) {
    goto LABEL_9;
  }
  if (*(void *)(a1 + 24))
  {
    CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Assigned-To-%@", *(void *)(a1 + 24));
    if (v12)
    {
      CFStringRef v13 = v12;
      IOSurfaceSetValue(v5, v9, v12);
      CFRelease(v13);
    }
  }
  if (v11) {
LABEL_9:
  }
    CFRelease(v11);
  if (*(unsigned char *)(a1 + 136)) {
    (*(void (**)(void))(**(void **)(a2 + 16) + 88))(*(void *)(a2 + 16));
  }
  CVBufferBacking::setNeverAgeOutBacking(*(void *)(a2 + 16));
  return 0;
}

uint64_t CVPixelBufferPool::prefetchPages(CVPixelBufferPool *this)
{
  return 0;
}

CFStringRef CVPixelBufferPool::copyDebugDescription(CVPixelBufferPool *this)
{
  BOOL v2 = (const void *)(*(uint64_t (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVPixelBufferPool *))(*(void *)this + 24))(this);
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    uint64_t v7 = " name=";
  }
  else {
    uint64_t v7 = "";
  }
  if (v6) {
    uint64_t v8 = (__CFString *)*((void *)this + 3);
  }
  else {
    uint64_t v8 = &stru_1EFA19840;
  }
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *((void *)this + 5);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"< %@Ref %p%s%@ poolAttributes=%@ pixelBufferAttributes=%@ inUse=%ld free=%ld>", v4, v5, v7, v8, v9, v10, v11, v12);
  CFRelease(v4);
  return v13;
}

uint64_t CVPixelBufferPool::flush(CVPixelBufferPool *this, char a2)
{
  uint64_t v2 = **((void **)this + 2);
  if (a2) {
    return (*(uint64_t (**)(void))(v2 + 144))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 136))();
  }
}

CFStringRef classCopyFormatDescription_CVPixelBufferPool(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVPixelBufferPoolRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVPixelBufferPool(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t CVMetalBufferCacheCreate(CVMetalBufferCache *this, CFTypeRef cf, uint64_t a3, CVBufferPool ***a4)
{
  if (!a4) {
    return 4294960635;
  }
  *a4 = 0;
  if (!a3) {
    return 4294960635;
  }
  if (cf)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 != CFDictionaryGetTypeID()) {
      return 4294960635;
    }
  }
  uint64_t v9 = CVMetalBufferCache::alloc(this, (const __CFAllocator *)cf);
  if (!v9) {
    return 4294960634;
  }
  uint64_t v10 = v9;
  if (!(*(uint64_t (**)(CVBufferPool *, uint64_t, CFTypeRef))(*(void *)v9[2] + 96))(v9[2], a3, cf)) {
    return 4294960634;
  }
  uint64_t result = 0;
  *a4 = v10;
  return result;
}

uint64_t CVMetalBufferCacheCreateBufferFromImage(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (!a4) {
    return 4294960635;
  }
  CVMetalBufferCache = _getCVMetalBufferCache(a2);
  uint64_t result = 4294960635;
  if (a3 && CVMetalBufferCache)
  {
    CFTypeID v9 = CFGetTypeID(a3);
    if (v9 == CVPixelBufferGetTypeID() && (uint64_t v10 = a3[2]) != 0)
    {
      unsigned int v11 = -6660;
      *a4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, unsigned int *))(*CVMetalBufferCache + 112))(CVMetalBufferCache, a1, v10, &v11);
      (*(void (**)(void *, void, void))(*CVMetalBufferCache + 104))(CVMetalBufferCache, 0, 0);
      return v11;
    }
    else
    {
      return 4294960635;
    }
  }
  return result;
}

void *_getCVMetalBufferCache(void *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVMetalBufferCacheGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

void *CVMetalBufferCacheFlush(void *a1)
{
  uint64_t result = _getCVMetalBufferCache(a1);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*result + 104);
    return (void *)v2();
  }
  return result;
}

CFIndex CVMetalBufferCacheGetUsedBackings(void *a1)
{
  CVMetalBufferCache = (CVMetalBufferCache *)_getCVMetalBufferCache(a1);
  if (!CVMetalBufferCache) {
    return -1;
  }

  return CVMetalBufferCache::usedBackingCount(CVMetalBufferCache);
}

CFIndex CVMetalBufferCache::usedBackingCount(CVMetalBufferCache *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 232));
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return Count;
}

CFIndex CVMetalBufferCacheGetFreeBackings(void *a1)
{
  CVMetalBufferCache = (CVMetalBufferCache *)_getCVMetalBufferCache(a1);
  if (!CVMetalBufferCache) {
    return -1;
  }

  return CVMetalBufferCache::freeBackingCount(CVMetalBufferCache);
}

CFIndex CVMetalBufferCache::freeBackingCount(CVMetalBufferCache *this)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return Count;
}

CVReturn CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *dataPtr, size_t dataSize, size_t numberOfPlanes, void **planeBaseAddress, size_t *planeWidth, size_t *planeHeight, size_t *planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  v41[0] = 0;
  if (pixelBufferOut) {
    BOOL v15 = width == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (v15
    || height == 0
    || numberOfPlanes - 17 < 0xFFFFFFFFFFFFFFF0
    || planeBytesPerRow == 0
    || planeWidth == 0
    || planeHeight == 0
    || planeBaseAddress == 0)
  {
    return -6661;
  }
  *pixelBufferOut = 0;
  if (pixelBufferAttributes) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(allocator, 0, pixelBufferAttributes);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  unint64_t v29 = MutableCopy;
  if (!MutableCopy) {
    return -6662;
  }
  if (!pixelFormatType)
  {
    if (CFDictionaryGetValue(MutableCopy, @"PixelFormatDescription")) {
      goto LABEL_31;
    }
LABEL_42:
    int v38 = -6680;
    goto LABEL_44;
  }
  DescriptionWithOSType PixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
  if (!DescriptionWithPixelFormatType) {
    goto LABEL_42;
  }
  CFDictionarySetValue(v29, @"PixelFormatDescription", DescriptionWithPixelFormatType);
LABEL_31:
  unint64_t v32 = CVPixelBufferBacking::alloc(allocator, v31);
  if (v32)
  {
    unsigned int v33 = v32;
    if ((*(uint64_t (**)(CVImageBacking *, size_t, size_t, void *, size_t, void, size_t, void **, size_t *, size_t *, size_t *, void, CVPixelBufferReleasePlanarBytesCallback, void *, __CFDictionary *, void, void, void, void, void, CVReturn *))(*(void *)v32[2] + 248))(v32[2], width, height, dataPtr, dataSize, 0, numberOfPlanes, planeBaseAddress, planeWidth, planeHeight, planeBytesPerRow, 0, releaseCallback, releaseRefCon, v29, 0, 0, 0, 0,
           0,
           v41))
    {
      kdebug_trace();
      int v35 = (__CVBuffer *)CVPixelBuffer::alloc(allocator, v34);
      if (v35)
      {
        int v36 = v35;
        if ((*(uint64_t (**)(void, CVImageBacking *))(**((void **)v35 + 2) + 248))(*((void *)v35 + 2), v33[2]))
        {
          *pixelBufferOut = v36;
        }
        else
        {
          v41[0] = -6660;
          CFRelease(v36);
        }
      }
      else
      {
        v41[0] = -6662;
      }
      CFRelease(v33);
    }
    goto LABEL_38;
  }
  int v38 = -6662;
LABEL_44:
  v41[0] = v38;
LABEL_38:
  CFRelease(v29);
  return v41[0];
}

uint64_t CVPixelBufferCreateWithParentIOSurface(CFAllocatorRef allocator, IOSurfaceRef buffer, uint64_t a3, uint64_t a4, unsigned int a5, unint64_t a6, uint64_t *a7, uint64_t *a8, CFDictionaryRef theDict, uint64_t **a10)
{
  v57[0] = 0;
  if (!buffer || (v10 = a3) == 0 || (uint64_t v11 = a4) == 0 || a6 - 17 <= 0xFFFFFFFFFFFFFFEFLL || !a7 || !a8 || !a10)
  {
    unsigned int v48 = -6661;
LABEL_51:
    v57[0] = v48;
    return v57[0];
  }
  *a10 = 0;
  if (gCVKTraceEnabled)
  {
    IOSurfaceGetID(buffer);
    kdebug_trace();
  }
  if (theDict) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(allocator, 0, theDict);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  double v19 = MutableCopy;
  if (!MutableCopy)
  {
    unsigned int v48 = -6662;
    goto LABEL_51;
  }
  if (!a5)
  {
    if (CFDictionaryGetValue(MutableCopy, @"PixelFormatDescription")) {
      goto LABEL_18;
    }
LABEL_53:
    int v44 = -6680;
    goto LABEL_38;
  }
  DescriptionWithOSType PixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a5);
  if (!DescriptionWithPixelFormatType) {
    goto LABEL_53;
  }
  CFDictionarySetValue(v19, @"PixelFormatDescription", DescriptionWithPixelFormatType);
LABEL_18:
  size_t v56 = a7;
  ProhibitUseCFIndex Count = IOSurfaceGetProhibitUseCount();
  float v21 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFArrayRef Value = CFDictionaryGetValue(v19, @"IOSurfaceDoNotIncrementUseCount");
  unsigned int v55 = v21;
  if ((ProhibitUseCount != 0) != (v21 == Value)) {
    goto LABEL_36;
  }
  double v53 = Value;
  CVDictionarySetSInt64Value(v19, @"BytesPerRowAlignment", *a8);
  CVDictionarySetSInt64Value(v19, @"Width", v10);
  CVDictionarySetSInt64Value(v19, @"Height", v11);
  CVDictionarySetSInt64Value(v19, @"PixelFormatType", a5);
  CFDictionaryRef v23 = (const __CFDictionary *)CFDictionaryGetValue(v19, @"IOSurfaceProperties");
  if (!v23)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_23;
  }
  CFDictionaryRef v24 = v23;
  uint64_t v25 = v10;
  CFTypeID v26 = CFGetTypeID(v23);
  if (v26 != CFDictionaryGetTypeID())
  {
LABEL_36:
    int v44 = -6661;
LABEL_38:
    v57[0] = v44;
    goto LABEL_39;
  }
  CFMutableDictionaryRef Mutable = CVDictionaryCreateMutableCopy((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v24);
  uint64_t v10 = v25;
LABEL_23:
  size_t v28 = Mutable;
  unint64_t v29 = v56;
  if (!Mutable) {
    goto LABEL_37;
  }
  CVDictionarySetSInt64Value(Mutable, (const void *)*MEMORY[0x1E4F2F138], *v56);
  if (a6 >= 2)
  {
    size_t v49 = v28;
    uint64_t v50 = v10;
    uint64_t v51 = v11;
    CFAllocatorRef v52 = allocator;
    size_t v30 = CFArrayCreateMutable(0, a6, MEMORY[0x1E4F1D510]);
    unint64_t v31 = 0;
    unsigned int v32 = 1;
    unsigned int v33 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFAllocatorRef v34 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      int v35 = CFDictionaryCreateMutable(0, 0, v33, v34);
      CVDictionarySetSInt64Value(v35, @"BytesPerRowAlignment", a8[v31]);
      CFArrayAppendValue(v30, v35);
      CFRelease(v35);
      unint64_t v31 = v32++;
    }
    while (v31 < a6);
    size_t v28 = v49;
    CFDictionarySetValue(v49, @"Planes", v30);
    CFRelease(v30);
    uint64_t v11 = v51;
    CFAllocatorRef allocator = v52;
    uint64_t v10 = v50;
    unint64_t v29 = v56;
  }
  if (ProhibitUseCount) {
    CFDictionarySetValue(v28, (const void *)*MEMORY[0x1E4F2F278], v55);
  }
  CFDictionarySetValue(v19, @"IOSurfaceProperties", v28);
  CFRelease(v28);
  unsigned int v37 = CVPixelBufferBacking::alloc(allocator, v36);
  if (!v37)
  {
LABEL_37:
    int v44 = -6662;
    goto LABEL_38;
  }
  int v38 = v37;
  if (!(*(uint64_t (**)(CVImageBacking *, uint64_t, uint64_t, void, void, uint64_t, unint64_t, void, void, void, uint64_t *, void, void, void, __CFDictionary *, void, void, IOSurfaceRef, void, uint64_t *, unsigned int *))(*(void *)v37[2] + 248))(v37[2], v10, v11, 0, 0, *a8, a6, 0, 0, 0, a8, 0, 0, 0, v19, 0, 0, buffer, 0,
          v29,
          v57))
  {
LABEL_39:
    int v45 = v19;
    goto LABEL_40;
  }
  unsigned int v40 = CVPixelBuffer::alloc(allocator, v39);
  unsigned int v41 = v40;
  if (!v40)
  {
    int v47 = -6662;
    goto LABEL_47;
  }
  if (v55 == v53)
  {
    CFTypeID v42 = CFGetTypeID(v40);
    if (v42 == CVPixelBufferGetTypeID()) {
      uint64_t v43 = v41[2];
    }
    else {
      uint64_t v43 = 0;
    }
    CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(v43);
  }
  if (!(*(uint64_t (**)(uint64_t, CVImageBacking *))(*(void *)v41[2] + 248))(v41[2], v38[2]))
  {
    int v47 = -6660;
LABEL_47:
    v57[0] = v47;
    goto LABEL_48;
  }
  CVTracePoolAction(1, 0, (void **)v38, "created from parent IOSurface", 0, 0);
  *a10 = v41;
  unsigned int v41 = 0;
LABEL_48:
  CFRelease(v38);
  CFRelease(v19);
  if (!v41) {
    return v57[0];
  }
  int v45 = (__CFDictionary *)v41;
LABEL_40:
  CFRelease(v45);
  return v57[0];
}

uint64_t CVPixelBufferCreateWithParentPixelBuffer(const __CFAllocator *a1, CVPixelBufferRef pixelBuffer, uint64_t a3, uint64_t a4, unsigned int a5, unint64_t a6, uint64_t *a7, uint64_t *a8, CFDictionaryRef theDict, void *a10)
{
  v55[0] = 0;
  if (!pixelBuffer
    || (uint64_t v10 = a3) == 0
    || !a4
    || a6 - 17 <= 0xFFFFFFFFFFFFFFEFLL
    || !a7
    || !a8
    || !a10
    || (IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(pixelBuffer)) == 0)
  {
    unsigned int v47 = -6661;
LABEL_52:
    v55[0] = v47;
    return v55[0];
  }
  *a10 = 0;
  if (gCVKTraceEnabled)
  {
    IOSurfaceGetID(IOSurface);
    kdebug_trace();
  }
  if (theDict) {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(a1, 0, theDict);
  }
  else {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  double v19 = MutableCopy;
  if (!MutableCopy)
  {
    unsigned int v47 = -6662;
    goto LABEL_52;
  }
  if (!a5)
  {
    if (CFDictionaryGetValue(MutableCopy, @"PixelFormatDescription")) {
      goto LABEL_19;
    }
LABEL_54:
    int v43 = -6680;
    goto LABEL_39;
  }
  DescriptionWithOSType PixelFormatType = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a5);
  if (!DescriptionWithPixelFormatType) {
    goto LABEL_54;
  }
  CFDictionarySetValue(v19, @"PixelFormatDescription", DescriptionWithPixelFormatType);
LABEL_19:
  uint64_t v54 = a4;
  CFAllocatorRef v21 = a1;
  float v22 = a10;
  ProhibitUseCFIndex Count = IOSurfaceGetProhibitUseCount();
  CFAllocatorRef v52 = (const void *)*MEMORY[0x1E4F1CFD0];
  if ((ProhibitUseCount != 0) != (v52 == CFDictionaryGetValue(v19, @"IOSurfaceDoNotIncrementUseCount"))) {
    goto LABEL_37;
  }
  CVDictionarySetSInt64Value(v19, @"BytesPerRowAlignment", *a8);
  CVDictionarySetSInt64Value(v19, @"Width", v10);
  CVDictionarySetSInt64Value(v19, @"Height", v54);
  CVDictionarySetSInt64Value(v19, @"PixelFormatType", a5);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v19, @"IOSurfaceProperties");
  if (!Value)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    goto LABEL_24;
  }
  CFDictionaryRef v24 = Value;
  uint64_t v25 = v10;
  CFTypeID v26 = CFGetTypeID(Value);
  if (v26 != CFDictionaryGetTypeID())
  {
LABEL_37:
    int v43 = -6661;
LABEL_39:
    v55[0] = v43;
    goto LABEL_40;
  }
  CFMutableDictionaryRef Mutable = CVDictionaryCreateMutableCopy((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v24);
  uint64_t v10 = v25;
LABEL_24:
  size_t v28 = Mutable;
  unint64_t v29 = a7;
  if (!Mutable) {
    goto LABEL_38;
  }
  CVDictionarySetSInt64Value(Mutable, (const void *)*MEMORY[0x1E4F2F138], *a7);
  if (a6 >= 2)
  {
    unsigned int v48 = v28;
    uint64_t v49 = v10;
    CFAllocatorRef v50 = v21;
    size_t v30 = CFArrayCreateMutable(0, a6, MEMORY[0x1E4F1D510]);
    unint64_t v31 = 0;
    unsigned int v32 = 1;
    unsigned int v33 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFAllocatorRef v34 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      int v35 = CFDictionaryCreateMutable(0, 0, v33, v34);
      CVDictionarySetSInt64Value(v35, @"BytesPerRowAlignment", a8[v31]);
      CFArrayAppendValue(v30, v35);
      CFRelease(v35);
      unint64_t v31 = v32++;
    }
    while (v31 < a6);
    size_t v28 = v48;
    CFDictionarySetValue(v48, @"Planes", v30);
    CFRelease(v30);
    CFAllocatorRef v21 = v50;
    float v22 = a10;
    uint64_t v10 = v49;
    unint64_t v29 = a7;
  }
  if (ProhibitUseCount) {
    CFDictionarySetValue(v28, (const void *)*MEMORY[0x1E4F2F278], v52);
  }
  CFDictionarySetValue(v19, @"IOSurfaceProperties", v28);
  CFRelease(v28);
  unsigned int v37 = CVPixelBufferBacking::alloc(v21, v36);
  if (!v37)
  {
LABEL_38:
    int v43 = -6662;
    goto LABEL_39;
  }
  int v38 = v37;
  if (!(*(uint64_t (**)(CVImageBacking *, uint64_t, uint64_t, void, void, uint64_t, unint64_t, void, void, void, uint64_t *, void, void, void, __CFDictionary *, void, void, void, CVPixelBufferRef, uint64_t *, unsigned int *))(*(void *)v37[2] + 248))(v37[2], v10, v54, 0, 0, *a8, a6, 0, 0, 0, a8, 0, 0, 0, v19, 0, 0, 0, pixelBuffer,
          v29,
          v55))
  {
LABEL_40:
    int v44 = v19;
    goto LABEL_41;
  }
  unsigned int v40 = CVPixelBuffer::alloc(v21, v39);
  if (!v40)
  {
    int v46 = -6662;
    goto LABEL_48;
  }
  if (v52 == CFDictionaryGetValue(v19, @"IOSurfaceDoNotIncrementUseCount"))
  {
    CFTypeID v41 = CFGetTypeID(v40);
    if (v41 == CVPixelBufferGetTypeID()) {
      uint64_t v42 = v40[2];
    }
    else {
      uint64_t v42 = 0;
    }
    CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(v42);
  }
  if (!(*(uint64_t (**)(void, CVImageBacking *))(*(void *)v40[2] + 248))(v40[2], v38[2]))
  {
    int v46 = -6660;
LABEL_48:
    v55[0] = v46;
    goto LABEL_49;
  }
  CVTracePoolAction(1, 0, (void **)v38, "created from parent IOSurface", 0, 0);
  *float v22 = v40;
  unsigned int v40 = 0;
LABEL_49:
  CFRelease(v38);
  CFRelease(v19);
  if (!v40) {
    return v55[0];
  }
  int v44 = (__CFDictionary *)v40;
LABEL_41:
  CFRelease(v44);
  return v55[0];
}

CVReturn CVPixelBufferFillExtendedPixels(CVPixelBufferRef pixelBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (!CVPixelBuffer) {
    return -6661;
  }
  if (!(*(unsigned int (**)(void, CVPixelBufferRef))(*(void *)CVPixelBuffer[15] + 408))(CVPixelBuffer[15], pixelBuffer))return -6660; {
  CVBufferSetAttachment(pixelBuffer, @"ExtendedPixelsFilledKey", (CFTypeRef)*MEMORY[0x1E4F1CFD0], kCVAttachmentMode_ShouldNotPropagate);
  }
  return 0;
}

CFDictionaryRef CVPixelBufferCopyCreationAttributes(CVPixelBufferRef pixelBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(pixelBuffer);
  if (CVPixelBuffer)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)CVPixelBuffer[15] + 264);
    return (CFDictionaryRef)v2();
  }
  else
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v5 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v6 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    return CFDictionaryCreateMutable(v4, 0, v5, v6);
  }
}

void reportIncompatiblePixelBuffer(__CVBuffer *a1, const __CFDictionary *a2, const char *a3)
{
  if ((reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sDidCheck & 1) == 0)
  {
    AppBooleanCFDictionaryRef Value = CFPreferencesGetAppBooleanValue(@"verbose_compatible", @"com.apple.corevideo", 0);
    reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sVerboseCompatibility = AppBooleanValue != 0;
    if (AppBooleanValue) {
      syslog(3, "CoreVideo: will explain CVPixelBufferIsCompatibleWithAttributes' decisions -- thank you for setting \"defaults write com.apple.corevideo verbose_compatible -BOOL YES\"\n");
    }
    reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sDidChecsize_t k = 1;
  }
  if (reportIncompatiblePixelBuffer(__CVBuffer *,__CFDictionary const*,char const*)::sVerboseCompatibility) {
    syslog(3, "CVPixelBufferIsCompatibleWithAttributes: (%p, %p) %s\n", a1, a2, a3);
  }
}

void *getBaseAddressOfPlaneWithoutLock(__CVBuffer *a1, uint64_t a2)
{
  uint64_t result = _getCVPixelBuffer(a1);
  if (result)
  {
    CFAllocatorRef v4 = result;
    uint64_t result = (void *)(*(uint64_t (**)(void, uint64_t, void))(*(void *)result[15] + 368))(result[15], a2, 0);
    if (!result)
    {
      CFIndex v5 = *(uint64_t (**)(void))(*(void *)v4[15] + 368);
      return (void *)v5();
    }
  }
  return result;
}

uint64_t numberIsInCFArrayOfCFNumbers(uint64_t a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v6);
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(ValueAtIndex))
    {
      uint64_t valuePtr = 0;
      if (CFNumberGetValue(ValueAtIndex, kCFNumberLongType, &valuePtr))
      {
        if (valuePtr == a1) {
          break;
        }
      }
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return 1;
}

BOOL numberIsMultipleOfCFNumber(uint64_t a1, CFNumberRef number)
{
  uint64_t valuePtr = 0;
  int Value = CFNumberGetValue(number, kCFNumberLongType, &valuePtr);
  BOOL result = 0;
  if (Value)
  {
    if (valuePtr) {
      return a1 % valuePtr == 0;
    }
  }
  return result;
}

BOOL addressIsMultipleOfCFNumber(uint64_t a1, CFNumberRef number)
{
  uint64_t valuePtr = 0;
  int Value = CFNumberGetValue(number, kCFNumberCFIndexType, &valuePtr);
  BOOL result = 0;
  if (Value)
  {
    if (valuePtr) {
      return a1 % valuePtr == 0;
    }
  }
  return result;
}

uint64_t CVPixelBufferCreateFromCVImageBufferRef(const __CFAllocator *a1, __CVBuffer *a2, CVPixelBufferRef *a3)
{
  char v6 = _os_feature_enabled_impl();
  uint64_t result = 4294960635;
  if (a2)
  {
    if (a3)
    {
      CGSize EncodedSize = CVImageBufferGetEncodedSize(a2);
      OSType PixelFormatType = CVImageBufferGetPixelFormatType(a2);
      uint64_t result = CVPixelBufferCreate(a1, (unint64_t)EncodedSize.width, (unint64_t)EncodedSize.height, PixelFormatType, 0, a3);
      if (!result)
      {
        CVPixelBufferLockBaseAddress(*a3, 0);
        IOSurfaceRef BaseAddress = CVPixelBufferGetBaseAddress(*a3);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(*a3);
        size_t Width = CVPixelBufferGetWidth(*a3);
        size_t Height = CVPixelBufferGetHeight(*a3);
        LODWORD(BaseAddress) = CVImageBufferProvideImageData(a2, (uint64_t)BaseAddress, BytesPerRow, 0, 0, Width, Height);
        CVPixelBufferUnlockBaseAddress(*a3, 0);
        CVPixelBufferRef v14 = *a3;
        if (BaseAddress)
        {
          uint64_t result = (uint64_t)_getCVPixelBuffer(v14);
          if (result)
          {
            BOOL v15 = (CVPixelBuffer *)result;
            uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
            uint64_t IsFlipped = CVImageBufferIsFlipped(a2);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 208))(v16, IsFlipped);
            if ((v6 & 1) == 0) {
              CVPixelBuffer::pushAttachmentsToIOSurface(v15);
            }
            return 0;
          }
        }
        else
        {
          CVPixelBufferRelease(v14);
          *a3 = 0;
          return 4294960636;
        }
      }
    }
  }
  return result;
}

BOOL CVPixelBufferWasAllocatedFromPool(void *a1)
{
  CVPixelBuffer = _getCVPixelBuffer(a1);
  return CVPixelBuffer && (*(uint64_t (**)(void))(*(void *)CVPixelBuffer[15] + 104))(CVPixelBuffer[15]);
}

uint64_t CVPixelBufferDrawColorBars(void *a1)
{
  CFArrayRef v1 = *(uint64_t (**)(void))(*_getCVPixelBuffer(a1) + 272);

  return v1();
}

uint64_t CVPixelBufferGetFixedPointFractionalBits(__CVBuffer *a1)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  switch(PixelFormatType)
  {
    case 0x73372E35u:
      return 5;
    case 0x31332E33u:
      return 3;
    case 0x31312E35u:
      return 5;
  }
  return 0;
}

uint64_t CVPixelBufferGetFixedPointIntegerBits(__CVBuffer *a1)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == 825306677) {
    int v2 = 11;
  }
  else {
    int v2 = 0;
  }
  if (PixelFormatType == 825437747) {
    unsigned int v3 = 13;
  }
  else {
    unsigned int v3 = v2;
  }
  if (PixelFormatType == 1932996149) {
    return 7;
  }
  else {
    return v3;
  }
}

BOOL CVPixelBufferGetFixedPointSignBits(__CVBuffer *a1)
{
  return CVPixelBufferGetPixelFormatType(a1) == 1932996149;
}

uint64_t CVPixelBufferGetFixedPointPaddingBits(__CVBuffer *a1)
{
  if (CVPixelBufferGetPixelFormatType(a1) == 1932996149) {
    return 3;
  }
  else {
    return 0;
  }
}

unint64_t CVPixelBufferCalculateCompressedTileDataRegionMemoryUsedOfPlane(__CVBuffer *a1, size_t a2)
{
  v4[16] = *MEMORY[0x1E4F143B8];
  unint64_t v3 = 0;
  calculateSparseHistogramAndSizeOfCompressedTileDataUsageOfPlane(a1, a2, 0, 0, 1uLL, 1uLL, v4, &v3, 0);
  return v3;
}

uint64_t calculateSparseHistogramAndSizeOfCompressedTileDataUsageOfPlane(__CVBuffer *a1, size_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t *a7, unint64_t *a8, BOOL a9)
{
  if (!a1) {
    return 4294960635;
  }
  BOOL v15 = a1;
  IOSurfaceRef IOSurface = CVPixelBufferGetIOSurface(a1);
  if (!IOSurface) {
    return 4294960635;
  }
  double v17 = IOSurface;
  if (IOSurfaceGetPlaneCount(IOSurface) < a2) {
    return 4294960635;
  }
  if (IOSurfaceGetProtectionOptions()) {
    return 4294960635;
  }
  unint64_t WidthInCompressedTilesOfPlane = IOSurfaceGetWidthInCompressedTilesOfPlane();
  if (WidthInCompressedTilesOfPlane <= a3) {
    return 4294960635;
  }
  unint64_t v19 = WidthInCompressedTilesOfPlane;
  unint64_t HeightInCompressedTilesOfPlane = IOSurfaceGetHeightInCompressedTilesOfPlane();
  uint64_t v21 = 4294960635;
  if (a5 < v19 >> 1 && a8 && a7 && HeightInCompressedTilesOfPlane > a4)
  {
    uint64_t v22 = a5 <= 1 ? 1 : a5;
    if (a6 < HeightInCompressedTilesOfPlane >> 1)
    {
      *((_OWORD *)a7 + 6) = 0u;
      *((_OWORD *)a7 + 7) = 0u;
      *((_OWORD *)a7 + 4) = 0u;
      *((_OWORD *)a7 + 5) = 0u;
      *((_OWORD *)a7 + 2) = 0u;
      *((_OWORD *)a7 + 3) = 0u;
      if (a6 <= 1) {
        a6 = 1;
      }
      *(_OWORD *)a7 = 0uLL;
      *((_OWORD *)a7 + 1) = 0uLL;
      if (CVPixelBufferLockBaseAddress(v15, 1uLL)) {
        return 4294960636;
      }
      if (IOSurfaceGetCompressionTypeOfPlane() - 3 > 1)
      {
        unint64_t v40 = 0;
        uint64_t v21 = 4294960633;
LABEL_144:
        *a8 = v40;
        goto LABEL_145;
      }
      unint64_t v150 = a6;
      uint64_t v151 = v22;
      uint64_t BaseAddressOfCompressedTileHeaderRegionOfPlane = IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane();
      uint64_t v24 = BaseAddressOfCompressedTileHeaderRegionOfPlane;
      if (a9)
      {
        if (!BaseAddressOfCompressedTileHeaderRegionOfPlane)
        {
LABEL_145:
          CVPixelBufferUnlockBaseAddress(v15, 1uLL);
          return v21;
        }
        uint64_t v153 = v15;
        uint64_t v148 = IOSurfaceGetWidthInCompressedTilesOfPlane();
        uint64_t v25 = IOSurfaceGetHeightInCompressedTilesOfPlane();
        CompressedTilesize_t WidthOfPlane = IOSurfaceGetCompressedTileWidthOfPlane();
        CompressedTilesize_t HeightOfPlane = IOSurfaceGetCompressedTileHeightOfPlane();
        uint64_t BytesPerCompressedTileHeaderOfPlane = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
        OSType PixelFormat = IOSurfaceGetPixelFormat(v17);
        DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(PixelFormat);
        if (!DescriptionWithPixelFormatType) {
          goto LABEL_98;
        }
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, @"Planes");
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(Value, a2);
        CFDataRef v33 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, @"CompressionMetadataPatternSignallingUncompressed");
        CFIndex Length = CFDataGetLength(v33);
        BytePtr = CFDataGetBytePtr(v33);
        unsigned int v36 = *BytePtr | (*BytePtr >> 1);
        unsigned int v37 = v36 | (v36 >> 2);
        if (Length == 2)
        {
          unsigned int v38 = BytePtr[1] | (BytePtr[1] >> 1);
          unsigned int v39 = v38 | (v38 >> 2) | ((v38 | (v38 >> 2)) >> 4);
        }
        else
        {
          unsigned int v39 = 0;
        }
        unsigned int v57 = 32 - __clz(CompressedTileWidthOfPlane);
        if (!CompressedTileWidthOfPlane) {
          LOBYTE(v57) = 0;
        }
        unsigned int v58 = 32 - __clz(CompressedTileHeightOfPlane);
        if (!CompressedTileHeightOfPlane) {
          LOBYTE(v58) = 0;
        }
        unint64_t v59 = CompressedTileHeightOfPlane * v25;
        uint64_t v60 = CompressedTileWidthOfPlane;
        unint64_t v61 = CompressedTileWidthOfPlane * v148;
        unsigned int v62 = v37 | (v37 >> 4);
        uint64_t v63 = (CompressedTileHeightOfPlane >> 2) * (CompressedTileWidthOfPlane >> 3);
        if (Length != 1)
        {
          if (Length == 2)
          {
            if (v59 > a4)
            {
              unsigned int v64 = 32 - __clz(v148);
              if (!v148) {
                unsigned int v64 = 0;
              }
              unsigned int v65 = 32 - __clz(v25);
              if (!v25) {
                unsigned int v65 = 0;
              }
              if (v64 >= v65) {
                LOBYTE(v64) = v65;
              }
              BOOL v15 = v153;
              uint64_t v66 = CompressedTileWidthOfPlane * v151;
              uint64_t v67 = v24 + 1;
              do
              {
                if (v61 > a3)
                {
                  int v68 = (*(unsigned __int16 *)((char *)twiddleLUT + ((a4 >> v58 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v58)]);
                  unint64_t v69 = a3;
                  do
                  {
                    int v70 = 0;
                    if (v63)
                    {
                      CFDictionaryRef v71 = (unsigned __int8 *)(v67
                                              + BytesPerCompressedTileHeaderOfPlane
                                              * ((v68 | (*(unsigned __int16 *)((char *)twiddleLUT
                                                                             + ((v69 >> v57 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v69 >> v57)]) & ~(-1 << (2 * v64)) | (((v69 >> v57) | (a4 >> v58)) << v64) & (-1 << (2 * v64))));
                      uint64_t v72 = v63;
                      do
                      {
                        int v73 = *(v71 - 1);
                        int v75 = *v71++;
                        int v74 = v75;
                        if (v73) {
                          ++v70;
                        }
                        BOOL v76 = v74 == 0;
                        int v77 = v39 & v74;
                        int v78 = v70 + (v73 & v62);
                        if (!v76) {
                          ++v78;
                        }
                        int v70 = v78 + v77;
                        --v72;
                      }
                      while (v72);
                    }
                    unsigned int v79 = ((v70 - 1 + ((v70 - 1) >> 31)) >> 7) & 0xF;
                    ++a7[v79];
                    v69 += v66;
                  }
                  while (v69 < v61);
                }
                a4 += CompressedTileHeightOfPlane * v150;
              }
              while (a4 < v59);
              uint64_t v21 = 0;
              goto LABEL_145;
            }
            goto LABEL_127;
          }
LABEL_98:
          uint64_t v21 = 4294960636;
LABEL_128:
          BOOL v15 = v153;
          goto LABEL_145;
        }
        if (v63 == 8)
        {
          if (v59 > a4)
          {
            unsigned int v127 = 32 - __clz(v148);
            if (!v148) {
              unsigned int v127 = 0;
            }
            unsigned int v128 = 32 - __clz(v25);
            if (!v25) {
              unsigned int v128 = 0;
            }
            if (v127 >= v128) {
              LOBYTE(v127) = v128;
            }
            int8x8_t v129 = vdup_n_s8(v62);
            v130.i64[0] = 0x1000100010001;
            v130.i64[1] = 0x1000100010001;
            BOOL v15 = v153;
            do
            {
              if (v61 > a3)
              {
                int v131 = (*(unsigned __int16 *)((char *)twiddleLUT + ((a4 >> v58 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v58)]);
                unint64_t v132 = a3;
                do
                {
                  int8x8_t v133 = *(int8x8_t *)(v24
                                     + BytesPerCompressedTileHeaderOfPlane
                                     * ((v131 | (*(unsigned __int16 *)((char *)twiddleLUT
                                                                     + ((v132 >> v57 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v132 >> v57)]) & ~(-1 << (2 * v127)) | (((v132 >> v57) | (a4 >> v58)) << v127) & (-1 << (2 * v127))));
                  int8x16_t v134 = (int8x16_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8((uint8x8_t)vtst_s8(v133, v133)), v130), (uint8x8_t)vand_s8(v133, v129));
                  *(int16x4_t *)v134.i8 = vadd_s16(*(int16x4_t *)v134.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL));
                  int8x16_t v135 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v134.i8);
                  uint32x4_t v136 = vaddw_u16((uint32x4_t)vextq_s8(v135, v135, 8uLL), *(uint16x4_t *)v134.i8);
                  unsigned int v137 = (((unsigned __int16)(v136.i16[0] + v136.i16[2])
                         - 1
                         + (((unsigned __int16)(v136.i16[0] + v136.i16[2]) - 1) >> 31)) >> 7) & 0xF;
                  ++a7[v137];
                  v132 += v60 * v151;
                }
                while (v132 < v61);
              }
              uint64_t v21 = 0;
              a4 += CompressedTileHeightOfPlane * v150;
            }
            while (a4 < v59);
            goto LABEL_145;
          }
        }
        else
        {
          if (v63 != 32) {
            goto LABEL_98;
          }
          if (v59 > a4)
          {
            unsigned int v98 = 32 - __clz(v148);
            if (!v148) {
              unsigned int v98 = 0;
            }
            unsigned int v99 = 32 - __clz(v25);
            if (!v25) {
              unsigned int v99 = 0;
            }
            if (v98 >= v99) {
              LOBYTE(v98) = v99;
            }
            int8x16_t v100 = vdupq_n_s8(v62);
            v101.i64[0] = 0x1000100010001;
            v101.i64[1] = 0x1000100010001;
            BOOL v15 = v153;
            do
            {
              if (v61 > a3)
              {
                int v102 = (*(unsigned __int16 *)((char *)twiddleLUT + ((a4 >> v58 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v58)]);
                unint64_t v103 = a3;
                do
                {
                  CFNumberRef v104 = (int8x16_t *)(v24
                                     + BytesPerCompressedTileHeaderOfPlane
                                     * ((v102 | (*(unsigned __int16 *)((char *)twiddleLUT
                                                                     + ((v103 >> v57 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v103 >> v57)]) & ~(-1 << (2 * v98)) | (((v103 >> v57) | (a4 >> v58)) << v98) & (-1 << (2 * v98))));
                  int8x16_t v105 = v104[1];
                  uint8x16_t v106 = (uint8x16_t)vandq_s8(v105, v100);
                  uint8x16_t v107 = (uint8x16_t)vandq_s8(*v104, v100);
                  uint8x16_t v108 = (uint8x16_t)vtstq_s8(*v104, *v104);
                  uint8x16_t v109 = (uint8x16_t)vtstq_s8(v105, v105);
                  int8x16_t v110 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v108.i8), v101), *(uint8x8_t *)v107.i8), (int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v109.i8), v101), *(uint8x8_t *)v106.i8)), vaddq_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v108), v101), v107), (int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v109), v101), v106)));
                  *(int16x4_t *)v110.i8 = vadd_s16(*(int16x4_t *)v110.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL));
                  int8x16_t v111 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v110.i8);
                  uint32x4_t v112 = vaddw_u16((uint32x4_t)vextq_s8(v111, v111, 8uLL), *(uint16x4_t *)v110.i8);
                  LODWORD(v104) = (((unsigned __int16)(v112.i16[0] + v112.i16[2])
                                  - 1
                                  + (((unsigned __int16)(v112.i16[0] + v112.i16[2]) - 1) >> 31)) >> 7) & 0xF;
                  ++a7[v104];
                  v103 += v60 * v151;
                }
                while (v103 < v61);
              }
              uint64_t v21 = 0;
              a4 += CompressedTileHeightOfPlane * v150;
            }
            while (a4 < v59);
            goto LABEL_145;
          }
        }
LABEL_127:
        uint64_t v21 = 0;
        goto LABEL_128;
      }
      if (BaseAddressOfCompressedTileHeaderRegionOfPlane)
      {
        uint64_t v149 = IOSurfaceGetWidthInCompressedTilesOfPlane();
        uint64_t v41 = IOSurfaceGetHeightInCompressedTilesOfPlane();
        unsigned int v42 = IOSurfaceGetCompressedTileWidthOfPlane();
        unsigned int v43 = IOSurfaceGetCompressedTileHeightOfPlane();
        uint64_t v44 = IOSurfaceGetBytesPerCompressedTileHeaderOfPlane();
        OSType v45 = IOSurfaceGetPixelFormat(v17);
        CFDictionaryRef v46 = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(v45);
        if (v46)
        {
          uint64_t v47 = v41;
          CFArrayRef v48 = (const __CFArray *)CFDictionaryGetValue(v46, @"Planes");
          CFDictionaryRef v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(v48, a2);
          CFDataRef v50 = (const __CFData *)CFDictionaryGetValue(v49, @"CompressionMetadataPatternSignallingUncompressed");
          CFIndex v51 = CFDataGetLength(v50);
          CFAllocatorRef v52 = CFDataGetBytePtr(v50);
          unsigned int v53 = *v52 | (*v52 >> 1);
          unsigned int v54 = v53 | (v53 >> 2);
          if (v51 == 2)
          {
            unsigned int v55 = v52[1] | (v52[1] >> 1);
            unsigned int v56 = v55 | (v55 >> 2) | ((v55 | (v55 >> 2)) >> 4);
          }
          else
          {
            unsigned int v56 = 0;
          }
          unsigned int v80 = 32 - __clz(v42);
          if (!v42) {
            LOBYTE(v8pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
          }
          unsigned int v81 = 32 - __clz(v43);
          if (!v43) {
            LOBYTE(v81) = 0;
          }
          unint64_t v82 = v43 * v47;
          uint64_t v83 = v42;
          unint64_t v84 = v42 * v149;
          unsigned int v85 = v54 | (v54 >> 4);
          uint64_t v86 = (v43 >> 2) * (v42 >> 3);
          if (v51 == 1)
          {
            if (v86 == 8)
            {
              if (v82 > a4)
              {
                unint64_t v40 = 0;
                unsigned int v138 = 32 - __clz(v149);
                unsigned int v139 = 32 - __clz(v47);
                if (!v149) {
                  unsigned int v138 = 0;
                }
                if (!v47) {
                  unsigned int v139 = 0;
                }
                if (v138 >= v139) {
                  LOBYTE(v138) = v139;
                }
                int8x8_t v140 = vdup_n_s8(v85);
                v141.i64[0] = 0x1000100010001;
                v141.i64[1] = 0x1000100010001;
                do
                {
                  if (v84 > a3)
                  {
                    unint64_t v142 = a3;
                    do
                    {
                      int8x8_t v143 = *(int8x8_t *)(v24
                                         + v44
                                         * (((*(unsigned __int16 *)((char *)twiddleLUT
                                                                  + ((a4 >> v81 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v81)]) | (*(unsigned __int16 *)((char *)twiddleLUT + ((v142 >> v80 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v142 >> v80)]) & ~(-1 << (2 * v138)) | (((v142 >> v80) | (a4 >> v81)) << v138) & (-1 << (2 * v138))));
                      int8x16_t v144 = (int8x16_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8((uint8x8_t)vtst_s8(v143, v143)), v141), (uint8x8_t)vand_s8(v143, v140));
                      *(int16x4_t *)v144.i8 = vadd_s16(*(int16x4_t *)v144.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL));
                      int8x16_t v145 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v144.i8);
                      uint32x4_t v146 = vaddw_u16((uint32x4_t)vextq_s8(v145, v145, 8uLL), *(uint16x4_t *)v144.i8);
                      v40 += ((unsigned __int16)(v146.i16[0] + v146.i16[2]) + 63) & 0x1FFC0;
                      v142 += v83 * v151;
                    }
                    while (v142 < v84);
                  }
                  uint64_t v21 = 0;
                  a4 += v43 * v150;
                }
                while (a4 < v82);
                goto LABEL_144;
              }
            }
            else if (v86 == 32 && v82 > a4)
            {
              unint64_t v40 = 0;
              unsigned int v113 = 32 - __clz(v149);
              unsigned int v114 = 32 - __clz(v47);
              if (!v149) {
                unsigned int v113 = 0;
              }
              if (!v47) {
                unsigned int v114 = 0;
              }
              if (v113 >= v114) {
                LOBYTE(v113) = v114;
              }
              int8x16_t v115 = vdupq_n_s8(v85);
              v116.i64[0] = 0x1000100010001;
              v116.i64[1] = 0x1000100010001;
              do
              {
                if (v84 > a3)
                {
                  unint64_t v117 = a3;
                  do
                  {
                    uint64_t v118 = (int8x16_t *)(v24
                                       + v44
                                       * (((*(unsigned __int16 *)((char *)twiddleLUT
                                                                + ((a4 >> v81 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v81)]) | (*(unsigned __int16 *)((char *)twiddleLUT + ((v117 >> v80 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v117 >> v80)]) & ~(-1 << (2 * v113)) | (((v117 >> v80) | (a4 >> v81)) << v113) & (-1 << (2 * v113))));
                    int8x16_t v119 = v118[1];
                    uint8x16_t v120 = (uint8x16_t)vandq_s8(v119, v115);
                    uint8x16_t v121 = (uint8x16_t)vandq_s8(*v118, v115);
                    uint8x16_t v122 = (uint8x16_t)vtstq_s8(*v118, *v118);
                    uint8x16_t v123 = (uint8x16_t)vtstq_s8(v119, v119);
                    int8x16_t v124 = (int8x16_t)vaddq_s16(vaddq_s16((int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v122.i8), v116), *(uint8x8_t *)v121.i8), (int16x8_t)vaddw_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_u8(*(uint8x8_t *)v123.i8), v116), *(uint8x8_t *)v120.i8)), vaddq_s16((int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v122), v116), v121), (int16x8_t)vaddw_high_u8((uint16x8_t)vandq_s8((int8x16_t)vmovl_high_u8(v123), v116), v120)));
                    *(int16x4_t *)v124.i8 = vadd_s16(*(int16x4_t *)v124.i8, (int16x4_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
                    int8x16_t v125 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v124.i8);
                    uint32x4_t v126 = vaddw_u16((uint32x4_t)vextq_s8(v125, v125, 8uLL), *(uint16x4_t *)v124.i8);
                    v40 += ((unsigned __int16)(v126.i16[0] + v126.i16[2]) + 63) & 0x1FFC0;
                    v117 += v83 * v151;
                  }
                  while (v117 < v84);
                }
                uint64_t v21 = 0;
                a4 += v43 * v150;
              }
              while (a4 < v82);
              goto LABEL_144;
            }
          }
          else if (v51 == 2 && v82 > a4)
          {
            unint64_t v40 = 0;
            unsigned int v87 = 32 - __clz(v149);
            unsigned int v88 = 32 - __clz(v47);
            if (!v149) {
              unsigned int v87 = 0;
            }
            if (!v47) {
              unsigned int v88 = 0;
            }
            if (v87 >= v88) {
              LOBYTE(v87) = v88;
            }
            uint64_t v89 = v42 * v151;
            uint64_t v90 = v24 + 1;
            do
            {
              if (v84 > a3)
              {
                unint64_t v91 = a3;
                do
                {
                  uint64_t v92 = 0;
                  if (v86)
                  {
                    CFTypeID v93 = (unsigned __int8 *)(v90
                                            + v44
                                            * (((*(unsigned __int16 *)((char *)twiddleLUT
                                                                     + ((a4 >> v81 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 17) | (2 * twiddleLUT[(a4 >> v81)]) | (*(unsigned __int16 *)((char *)twiddleLUT + ((v91 >> v80 >> 7) & 0x1FFFFFFFFFFFFFELL)) << 16) | twiddleLUT[(v91 >> v80)]) & ~(-1 << (2 * v87)) | (((v91 >> v80) | (a4 >> v81)) << v87) & (-1 << (2 * v87))));
                    uint64_t v94 = v86;
                    do
                    {
                      int v95 = *(v93 - 1);
                      int v96 = *v93++;
                      LODWORD(v97) = v56 & v96;
                      if (v96) {
                        uint64_t v97 = (v97 + 1);
                      }
                      else {
                        uint64_t v97 = v97;
                      }
                      if (v95) {
                        ++v92;
                      }
                      v92 += (v95 & v85) + v97;
                      --v94;
                    }
                    while (v94);
                  }
                  v40 += (v92 + 63) & 0xFFFFFFFFFFFFFFC0;
                  v91 += v89;
                }
                while (v91 < v84);
              }
              a4 += v43 * v150;
            }
            while (a4 < v82);
            goto LABEL_143;
          }
        }
      }
      unint64_t v40 = 0;
LABEL_143:
      uint64_t v21 = 0;
      goto LABEL_144;
    }
  }
  return v21;
}

uint64_t CVPixelBufferCalculateSparseHistogramOfCompressedTileDataUsageOfPlane(__CVBuffer *a1, size_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t *a7)
{
  unint64_t v8 = 0;
  return calculateSparseHistogramAndSizeOfCompressedTileDataUsageOfPlane(a1, a2, a3, a4, a5, a6, a7, &v8, 1);
}

uint64_t CVPixelBufferIncrementUseCountForCategory(void *a1, unsigned int a2)
{
  CVPixelBuffer = (CVPixelBuffer *)_getCVPixelBuffer(a1);
  if (a2 > 1 || !CVPixelBuffer) {
    return 4294960635;
  }

  return CVPixelBuffer::incrementUseCountForCategory(CVPixelBuffer, a2);
}

uint64_t CVPixelBufferDecrementUseCountForCategory(void *a1, unsigned int a2)
{
  CVPixelBuffer = (CVPixelBuffer *)_getCVPixelBuffer(a1);
  if (a2 > 1 || !CVPixelBuffer) {
    return 4294960635;
  }

  return CVPixelBuffer::decrementUseCountForCategory(CVPixelBuffer, a2);
}

CFTypeID CVOpenGLESTextureCacheGetTypeID(void)
{
  if (CVOpenGLESTextureCacheGetTypeID::once != -1) {
    dispatch_once_f(&CVOpenGLESTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTextureCache);
  }
  return kCVOpenGLESTextureCacheID;
}

uint64_t classInitialize_CVOpenGLESTextureCache(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVOpenGLESTextureCacheuint64_t ID = result;
  return result;
}

CVBufferPool **CVOpenGLESTextureCache::alloc(CVOpenGLESTextureCache *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVOpenGLESTextureCache *)_cvTrackingGetCFAllocator(@"CVOpenGLESTextureCache");
  }
  if (CVOpenGLESTextureCacheGetTypeID::once != -1) {
    dispatch_once_f(&CVOpenGLESTextureCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVOpenGLESTextureCache);
  }
  unint64_t v3 = (CVBufferPool **)CVObject::alloc((CVObject *)kCVOpenGLESTextureCacheID, (unint64_t)this, (const __CFAllocator *)0x18, 0x68uLL);
  CFAllocatorRef v4 = v3;
  if (v3)
  {
    CVBufferPool::CVBufferPool(v3[2], v3);
    void *v5 = &unk_1EFA175C0;
    v5[5] = 0;
    v5[6] = 0;
    v5[4] = 0;
  }
  return v4;
}

void CVOpenGLESTextureCache::CVOpenGLESTextureCache(CVOpenGLESTextureCache *this, const void *a2)
{
  CVBufferPool::CVBufferPool(this, a2);
  *int v2 = &unk_1EFA175C0;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
}

uint64_t CVOpenGLESTextureCache::finalize(CVOpenGLESTextureCache *this)
{
  int v2 = (const void *)*((void *)this + 8);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 8) = 0;
  unint64_t v3 = (const void *)*((void *)this + 7);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 7) = 0;
  CFArrayRef v4 = (const __CFArray *)*((void *)this + 5);
  if (v4)
  {
    v12.length = CFArrayGetCount(*((CFArrayRef *)this + 5));
    v12.locatioCFIndex n = 0;
    CFArrayApplyFunction(v4, v12, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  CFIndex v5 = (const void *)*((void *)this + 6);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 6) = 0;
  char v6 = (const void *)*((void *)this + 5);
  if (v6) {
    CFRelease(v6);
  }
  *((void *)this + 5) = 0;
  uint64_t v7 = (const void *)*((void *)this + 9);
  if (v7) {
    CFRelease(v7);
  }
  *((void *)this + 9) = 0;
  unint64_t v8 = (const void *)*((void *)this + 10);
  if (v8) {
    CFRelease(v8);
  }
  *((void *)this + 1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  uint64_t v9 = *((void *)this + 4);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 40))(v9);
  }
  *((void *)this + 4) = 0;

  return CVBufferPool::finalize(this);
}

CFTypeRef *CVOpenGLESTextureCache::initWithContext(CFTypeRef *this, void *a2, const __CFDictionary *a3, const __CFDictionary *a4)
{
  uint64_t v7 = this;
  unint64_t v8 = CFGetAllocator(this[1]);
  if (!CVBufferPool::init(v7)) {
    return 0;
  }
  uint64_t v10 = CVOpenGLESContext::alloc(v8, v9);
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = v10;
  if (!(*(uint64_t (**)(CVObject *, void *))(*(void *)v10[2] + 56))(v10[2], a2)) {
    goto LABEL_17;
  }
  v7[4] = v11[2];
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  v7[5] = Mutable;
  if (!Mutable) {
    goto LABEL_17;
  }
  CFMutableDictionaryRef v13 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E4F1D540]);
  v7[6] = v13;
  if (!v13) {
    goto LABEL_17;
  }
  CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v8, 0, 0, MEMORY[0x1E4F1D540]);
  v7[7] = v14;
  if (!v14) {
    goto LABEL_17;
  }
  BOOL v15 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
  v7[8] = v15;
  if (!v15) {
    goto LABEL_17;
  }
  if (!CVHostTimeBase::sIsInited) {
    double v16 = CVHostTimeBase::Initialize(v15);
  }
  LODWORD(v16) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v17) = CVHostTimeBase::sToNanosDenominator;
  v7[11] = (CFTypeRef)(1000000000.0 / (double)*(unint64_t *)&v16 * (double)v17);
  if (!a3) {
    goto LABEL_15;
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy(v8, a3);
  v7[9] = Copy;
  if (!Copy) {
    goto LABEL_17;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(Copy, @"MaximumTextureAge");
  if (!Value) {
    goto LABEL_15;
  }
  CFNumberRef v20 = Value;
  double valuePtr = 0.0;
  CFTypeID v21 = CFGetTypeID(Value);
  if (v21 != CFNumberGetTypeID())
  {
LABEL_17:
    (*((void (**)(CFTypeRef *))*v7 + 5))(v7);
    return 0;
  }
  CFNumberGetValue(v20, kCFNumberDoubleType, &valuePtr);
  v7[11] = (CFTypeRef)CVHostTimeBase::ConvertFromNanos((CVHostTimeBase *)(valuePtr * 1000000000.0), valuePtr * 1000000000.0, v22);
LABEL_15:
  if (a4) {
    v7[10] = CFRetain(a4);
  }
  return v7;
}

uint64_t CVOpenGLESTextureCache::bufferBackingInUse(CVOpenGLESTextureCache *this, CVBufferBacking *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
  CFIndex v5 = CFArrayGetCount(*((CFArrayRef *)this + 5));
  char v6 = *(__CFArray **)(*((void *)this + 2) + 232);
  uint64_t v7 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  CFArrayAppendValue(v6, v7);
  CFIndex v8 = CFArrayGetCount(*((CFArrayRef *)this + 8));
  CFArrayRef v9 = (const __CFArray *)*((void *)this + 8);
  uint64_t v10 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v26.locatioCFIndex n = 0;
  v26.length = v8;
  if (CFArrayContainsValue(v9, v26, v10))
  {
    uint64_t v11 = (__CFArray *)*((void *)this + 8);
    CFRange v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFArrayRef v13 = v11;
    v14.locatioCFIndex n = 0;
    v14.length = v8;
LABEL_5:
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v13, v14, v12);
    CFArrayRemoveValueAtIndex(v11, FirstIndexOfValue);
    (*(void (**)(CVBufferBacking *))(*(void *)a2 + 320))(a2);
    goto LABEL_6;
  }
  CFArrayRef v15 = *(const __CFArray **)(*((void *)this + 2) + 224);
  double v16 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v27.locatioCFIndex n = 0;
  v27.length = Count;
  if (CFArrayContainsValue(v15, v27, v16))
  {
    uint64_t v11 = *(__CFArray **)(*((void *)this + 2) + 224);
    CFRange v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFArrayRef v13 = v11;
    v14.locatioCFIndex n = 0;
    v14.length = Count;
    goto LABEL_5;
  }
  CFArrayRef v20 = (const __CFArray *)*((void *)this + 5);
  CFTypeID v21 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v28.locatioCFIndex n = 0;
  v28.length = v5;
  if (CFArrayContainsValue(v20, v28, v21))
  {
    CFArrayRef v22 = (const __CFArray *)*((void *)this + 5);
    CFDictionaryRef v23 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    v29.locatioCFIndex n = 0;
    v29.length = v5;
    CFIndex v24 = CFArrayGetFirstIndexOfValue(v22, v29, v23);
    CFArrayRemoveValueAtIndex(v22, v24);
  }
LABEL_6:
  double v18 = (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex;

  return pthread_mutex_unlock(v18);
}

uint64_t CVOpenGLESTextureCache::bufferBackingNotInUse(CVOpenGLESTextureCache *this, CVBufferBacking *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CFArrayRef v4 = (__CFArray *)*((void *)this + 5);
  CFIndex v5 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  CFArrayAppendValue(v4, v5);
  CFArrayRef v6 = *(const __CFArray **)(*((void *)this + 2) + 232);
  CFIndex Count = CFArrayGetCount(v6);
  CFIndex v8 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
  v20.locatioCFIndex n = 0;
  v20.length = Count;
  FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v6, v20, v8);
  CFArrayRemoveValueAtIndex(v6, FirstIndexOfValue);
  if ((*(unsigned int (**)(CVBufferBacking *))(*(void *)a2 + 312))(a2))
  {
    if ((*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 344))(a2)) {
      uint64_t v10 = (__CFArray **)((char *)this + 64);
    }
    else {
      uint64_t v10 = (__CFArray **)(*((void *)this + 2) + 224);
    }
    uint64_t v11 = *v10;
    CFRange v12 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    CFArrayAppendValue(v11, v12);
    CFArrayRef v13 = (const __CFArray *)*((void *)this + 5);
    CFIndex v14 = CFArrayGetCount(v13);
    CFArrayRef v15 = (const void *)(*(uint64_t (**)(CVBufferBacking *))(*(void *)a2 + 24))(a2);
    v21.locatioCFIndex n = 0;
    v21.length = v14;
    CFIndex v16 = CFArrayGetFirstIndexOfValue(v13, v21, v15);
    CFArrayRemoveValueAtIndex(v13, v16);
    (*(void (**)(CVBufferBacking *))(*(void *)a2 + 328))(a2);
  }
  unint64_t v17 = (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex;

  return pthread_mutex_unlock(v17);
}

uint64_t CVOpenGLESTextureCache::textureCacheRecycler(CVOpenGLESTextureCache *this, void *a2, void *a3)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v4 + 312))(v4, a2, a3);
  if (result)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344))(v4)) {
      CFArrayRef v6 = (__CFArray **)(a2 + 8);
    }
    else {
      CFArrayRef v6 = (__CFArray **)(a2[2] + 224);
    }
    uint64_t v7 = *v6;
    CFIndex v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    CFArrayAppendValue(v7, v8);
    CFArrayRef v9 = (const __CFArray *)a2[5];
    CFIndex Count = CFArrayGetCount(v9);
    uint64_t v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    v15.locatioCFIndex n = 0;
    v15.length = Count;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v9, v15, v11);
    CFArrayRemoveValueAtIndex(v9, FirstIndexOfValue);
    CFArrayRef v13 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 328);
    return v13(v4);
  }
  return result;
}

void CVOpenGLESTextureCache::freeInvalidTexture(CVOpenGLESTextureCache *this, void *a2, void *a3)
{
  uint64_t v4 = (void **)*((void *)this + 2);
  if (((unsigned int (*)(void **, void *, void *))(*v4)[15])(v4, a2, a3))
  {
    CFIndex v5 = (__CFDictionary *)a2[6];
    CFArrayRef v6 = (const void *)(*(uint64_t (**)(void *))(*v4[21] + 24))(v4[21]);
    CFDictionaryRemoveValue(v5, v6);
    CFArrayRef v7 = *(const __CFArray **)(a2[2] + 224);
    CFIndex Count = CFArrayGetCount(v7);
    CFArrayRef v9 = (const void *)((uint64_t (*)(void **))(*v4)[3])(v4);
    v12.locatioCFIndex n = 0;
    v12.length = Count;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v7, v12, v9);
    CFArrayRemoveValueAtIndex(v7, FirstIndexOfValue);
  }
}

void CVOpenGLESTextureCache::freeUnusedIOSurfaceTextureBackings(CVOpenGLESTextureCache *this, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  CFArrayRef v6 = (void *)*((void *)this + 2);
  if ((*(unsigned int (**)(void *))(*v6 + 120))(v6) && v6[13] < (unint64_t)a2[1])
  {
    CFArrayRef v7 = *(__CFDictionary **)(v5 + 56);
    CFIndex v8 = (__IOSurface *)(*(uint64_t (**)(void *))(*v6 + 344))(v6);
    IOSurfaceID ID = IOSurfaceGetID(v8);
    CFDictionaryRemoveValue(v7, (const void *)ID);
    CFArrayRef v10 = *(const __CFArray **)(v5 + 64);
    v13.length = CFArrayGetCount(v10);
    v13.locatioCFIndex n = 0;
    FirstIndexOfCFNumberRef Value = CFArrayGetFirstIndexOfValue(v10, v13, this);
    CFArrayRemoveValueAtIndex(v10, FirstIndexOfValue);
  }
}

uint64_t CVOpenGLESTextureCache::flushTextures(uint64_t this, char a2)
{
  uint64_t v2 = this;
  if ((a2 & 1) != 0 || *(void *)(this + 88))
  {
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 40)))
    {
      CFArrayRef v3 = *(const __CFArray **)(v2 + 40);
      CFIndex Count = CFArrayGetCount(v3);
      CFArrayApplyFunctionReverse(v3, 0, Count, (uint64_t (*)(const void *, uint64_t))CVOpenGLESTextureCache::textureCacheRecycler, v2);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(*(void *)(v2 + 16) + 224)))
    {
      CFArrayRef v5 = *(const __CFArray **)(*(void *)(v2 + 16) + 224);
      CFIndex v6 = CFArrayGetCount(v5);
      CFArrayApplyFunctionReverse(v5, 0, v6, (uint64_t (*)(const void *, uint64_t))CVOpenGLESTextureCache::freeInvalidTexture, v2);
    }
    if (CFArrayGetCount(*(CFArrayRef *)(v2 + 64)))
    {
      v9[0] = v2;
      v9[1] = CVGetCurrentHostTime() - *(void *)(v2 + 88);
      CFArrayRef v7 = *(const __CFArray **)(v2 + 64);
      CFIndex v8 = CFArrayGetCount(v7);
      CFArrayApplyFunctionReverse(v7, 0, v8, (uint64_t (*)(const void *, uint64_t))CVOpenGLESTextureCache::freeUnusedIOSurfaceTextureBackings, (uint64_t)v9);
    }
    return pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  }
  return this;
}

CVImageBuffer **CVOpenGLESTextureCache::createTextureFromImageWithParams(CVOpenGLESTextureCache *this, const __CFAllocator *a2, CVImageBuffer *a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unint64_t a10, int *a11)
{
  if (a4 == 3553 || a4 == 36161)
  {
    int v27 = a4;
    int v28 = a5;
    int v29 = a6;
    int v30 = a7;
    int v31 = a8;
    unsigned int v32 = a9;
    unint64_t v26 = a10;
    CFDataRef v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)&v26, 32);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"TextureParams", v14);
    CFRelease(v14);
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    uint64_t v16 = (*(uint64_t (**)(CVImageBuffer *))(*(void *)a3 + 160))(a3);
    uint64_t v17 = (*(uint64_t (**)(CVOpenGLESTextureCache *, const __CFAllocator *, uint64_t, CVImageBuffer *, __CFDictionary *, int *))(*(void *)this + 112))(this, a2, v16, a3, Mutable, a11);
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
      CFRange v21 = CVOpenGLESTexture::alloc(a2, v20);
      CFArrayRef v22 = v21;
      if (v21)
      {
        if ((*(uint64_t (**)(CVImageBuffer *, void))(*(void *)v21[2] + 248))(v21[2], *(void *)(v19 + 16)))
        {
          (*(void (**)(CVImageBuffer *, void))(*(void *)v22[2] + 144))(v22[2], *((void *)this + 10));
          CFDictionaryRef v23 = (__CVBuffer *)(*(uint64_t (**)(CVImageBuffer *))(*(void *)a3 + 24))(a3);
          CVBufferPropagateAttachments(v23, (CVBufferRef)v22);
          (*(void (**)(uint64_t, CVImageBuffer *, CVImageBuffer *))(*(void *)v18 + 296))(v18, a3, v22[2]);
          int v24 = 0;
        }
        else
        {
          int v24 = -6660;
        }
      }
      else
      {
        int v24 = -6690;
      }
      *a11 = v24;
    }
    else
    {
      CFArrayRef v22 = 0;
    }
    pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  else
  {
    CFArrayRef v22 = 0;
    *a11 = -6683;
  }
  return v22;
}

void *CVOpenGLESTextureCache::createTextureBackingFromImageBacking(CVOpenGLESTextureCache *this, const __CFAllocator *a2, CVImageBacking *a3, CVImageBuffer *a4, CFDictionaryRef theDict, int *a6)
{
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(theDict, @"TextureParams");
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CFRange v12 = (__IOSurface *)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 152))(a3);
  if (v12)
  {
    CFRange v13 = v12;
    CFDictionaryRef v14 = (const __CFDictionary *)*((void *)this + 7);
    IOSurfaceID ID = IOSurfaceGetID(v12);
    CFArrayRef v16 = (const __CFArray *)CFDictionaryGetValue(v14, (const void *)ID);
    if (v16)
    {
      CFMutableArrayRef Mutable = v16;
      BackingEntry = findBackingEntry(v16, Value);
      if (BackingEntry)
      {
        uint64_t v19 = BackingEntry;
        CFAllocatorRef v20 = (void *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(void *)this + 24))(this);
        CFRange v21 = (void **)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
        CFIndex Count = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
        CFIndex v23 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
        CVTracePoolAction(1, v20, v21, "CVOpenGLESTextureCache: [IOSurface] Cache hit", Count, v23);
        (*(void (**)(void))(*v19[2] + 256))();
LABEL_8:
        CFDataRef v33 = a6;
LABEL_27:
        unint64_t v59 = v19[2];
        *CFDataRef v33 = 0;
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v34 = (*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 344))(a3);
      if (v34) {
        CFIndex v35 = 2 * v34;
      }
      else {
        CFIndex v35 = 2;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a2, v35, MEMORY[0x1E4F1D510]);
      unsigned int v36 = (__CFDictionary *)*((void *)this + 7);
      IOSurfaceID v37 = IOSurfaceGetID(v13);
      CFDictionarySetValue(v36, (const void *)v37, Mutable);
      CFRelease(Mutable);
    }
    unsigned int v38 = (void *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(void *)this + 24))(this);
    unsigned int v39 = (void **)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
    CFIndex v40 = CFDictionaryGetCount(*((CFDictionaryRef *)this + 7));
    CFIndex v41 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
    CVTracePoolAction(1, v38, v39, "CVOpenGLESTextureCache: [IOSurface] Cache miss", v40, v41);
    unsigned int v42 = a4;
    CFDataRef v33 = a6;
    uint64_t v43 = (*(uint64_t (**)(CVImageBacking *, const __CFAllocator *, void, CFDictionaryRef, CVImageBuffer *, int *))(*(void *)a3 + 216))(a3, a2, *((void *)this + 4), theDict, v42, a6);
    if (!v43)
    {
      unint64_t v59 = 0;
      goto LABEL_28;
    }
    uint64_t v44 = v43;
    int v45 = *a6;
    uint64_t v19 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 24))(v43);
    if (!v45)
    {
      (*(void (**)(uint64_t, void))(*(void *)v44 + 96))(v44, *((void *)this + 2));
      (*(void (**)(uint64_t, __IOSurface *))(*(void *)v44 + 336))(v44, v13);
      CFArrayAppendValue(Mutable, v19);
      CFDictionaryRef v46 = (__CFArray *)*((void *)this + 8);
LABEL_26:
      CFArrayAppendValue(v46, v19);
      CFRelease(v19);
      goto LABEL_27;
    }
  }
  else
  {
    CFDictionaryRef v24 = (const __CFDictionary *)*((void *)this + 6);
    uint64_t v25 = (const void *)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
    CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(v24, v25);
    if (v26)
    {
      CFMutableArrayRef v27 = v26;
      int v28 = findBackingEntry(v26, Value);
      if (v28)
      {
        uint64_t v19 = v28;
        int v29 = (void *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(void *)this + 24))(this);
        int v30 = (void **)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
        CFIndex v31 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 232));
        CFIndex v32 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
        CVTracePoolAction(1, v29, v30, "CVOpenGLESTextureCache: Cache hit", v31, v32);
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v47 = (*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 344))(a3);
      if (v47) {
        CFIndex v48 = 2 * v47;
      }
      else {
        CFIndex v48 = 2;
      }
      CFMutableArrayRef v27 = CFArrayCreateMutable(a2, v48, MEMORY[0x1E4F1D510]);
      CFDictionaryRef v49 = (__CFDictionary *)*((void *)this + 6);
      CFDataRef v50 = (const void *)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
      CFDictionarySetValue(v49, v50, v27);
      CFRelease(v27);
    }
    CFIndex v51 = (void *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(void *)this + 24))(this);
    CFAllocatorRef v52 = (void **)(*(uint64_t (**)(CVImageBacking *))(*(void *)a3 + 24))(a3);
    CFIndex v53 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 232));
    CFIndex v54 = CFArrayGetCount(*(CFArrayRef *)(*((void *)this + 2) + 224));
    CVTracePoolAction(1, v51, v52, "CVOpenGLESTextureCache: Cache miss", v53, v54);
    unsigned int v55 = a4;
    CFDataRef v33 = a6;
    uint64_t v56 = (*(uint64_t (**)(CVImageBacking *, const __CFAllocator *, void, CFDictionaryRef, CVImageBuffer *, int *))(*(void *)a3 + 216))(a3, a2, *((void *)this + 4), theDict, v55, a6);
    if (!v56) {
      goto LABEL_23;
    }
    uint64_t v57 = v56;
    int v58 = *a6;
    uint64_t v19 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v56 + 24))(v56);
    if (!v58)
    {
      (*(void (**)(uint64_t, void))(*(void *)v57 + 96))(v57, *((void *)this + 2));
      CFArrayAppendValue(v27, v19);
      CFDictionaryRef v46 = *(__CFArray **)(*((void *)this + 2) + 224);
      goto LABEL_26;
    }
  }
  CFRelease(v19);
LABEL_23:
  unint64_t v59 = 0;
LABEL_28:
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return v59;
}

void **findBackingEntry(const __CFArray *a1, const __CFData *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (void **)CFArrayGetValueAtIndex(a1, v6);
    CFIndex v8 = (const void *)(*(uint64_t (**)(void *))(*ValueAtIndex[2] + 368))(ValueAtIndex[2]);
    if (CFEqual(v8, a2)) {
      break;
    }
    if (v5 == ++v6) {
      return 0;
    }
  }
  return ValueAtIndex;
}

CFStringRef CVOpenGLESTextureCache::copyDebugDescription(CVOpenGLESTextureCache *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVOpenGLESTextureCache *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVOpenGLESTextureCache *))(*(void *)this + 24))(this);
  uint64_t v6 = *((void *)this + 10);
  uint64_t v7 = *((void *)this + 2);
  CFArrayRef v8 = *(const __CFArray **)(v7 + 232);
  if (v8)
  {
    CFIndex Count = CFArrayGetCount(v8);
    uint64_t v7 = *((void *)this + 2);
  }
  else
  {
    CFIndex Count = -1;
  }
  CFArrayRef v10 = *(const __CFArray **)(v7 + 224);
  if (v10) {
    CFIndex v11 = CFArrayGetCount(v10);
  }
  else {
    CFIndex v11 = -1;
  }
  CFArrayRef v12 = (const __CFArray *)*((void *)this + 5);
  if (v12) {
    CFIndex v13 = CFArrayGetCount(v12);
  }
  else {
    CFIndex v13 = -1;
  }
  CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"< %@Ref %p cacheAttributes=nil openGLBufferAttributes=%@ inUse=%ld free=%ld dirty=%ld>", v4, v5, v6, Count, v11, v13);
  CFRelease(v4);
  return v14;
}

uint64_t CVOpenGLESTextureCache::context(CVOpenGLESTextureCache *this)
{
  return *((void *)this + 4);
}

uint64_t classFinalize_CVOpenGLESTextureCache(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVOpenGLESTextureCache(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVOpenGLESTextureCacheRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVOpenGLESTextureCache(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

GLenum CVOpenGLESTextureGetTarget(CVOpenGLESTextureRef image)
{
  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)CVOpenGLESTexture[12] + 264);
    LODWORD(CVOpenGLESTexture) = v2();
  }
  return CVOpenGLESTexture;
}

void *_getCVOpenGLESTexture(void *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVOpenGLESTextureGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

GLuint CVOpenGLESTextureGetName(CVOpenGLESTextureRef image)
{
  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)CVOpenGLESTexture[12] + 272);
    LODWORD(CVOpenGLESTexture) = v2();
  }
  return CVOpenGLESTexture;
}

double CVOpenGLESTextureGetSize(void *a1)
{
  CVOpenGLESTexture = _getCVOpenGLESTexture(a1);
  if (!CVOpenGLESTexture) {
    return 0.0;
  }
  (*(void (**)(void))(*(void *)CVOpenGLESTexture[12] + 176))(CVOpenGLESTexture[12]);
  return result;
}

Boolean CVOpenGLESTextureIsFlipped(CVOpenGLESTextureRef image)
{
  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*(void *)CVOpenGLESTexture[12] + 200);
    LOBYTE(CVOpenGLESTexture) = v2();
  }
  return CVOpenGLESTexture;
}

double CVOpenGLESTextureGetCleanRect(void *a1)
{
  CVOpenGLESTexture = _getCVOpenGLESTexture(a1);
  if (!CVOpenGLESTexture) {
    return 0.0;
  }
  (*(void (**)(void *))(*CVOpenGLESTexture + 192))(CVOpenGLESTexture);
  return result;
}

void CVOpenGLESTextureGetCleanTexCoords(CVOpenGLESTextureRef image, GLfloat *lowerLeft, GLfloat *lowerRight, GLfloat *upperRight, GLfloat *upperLeft)
{
  CVOpenGLESTexture = _getCVOpenGLESTexture(image);
  if (CVOpenGLESTexture)
  {
    CFArrayRef v10 = *(void (**)(void))(*CVOpenGLESTexture + 256);
    v10();
  }
  else
  {
    *(void *)lowerLeft = 0;
    *(void *)lowerRight = 0;
    *(void *)upperRight = 0;
    *(void *)upperLeft = 0;
  }
}

GLfloat CVOpenGLESTextureGetBounds(__CVBuffer *a1, GLfloat *a2, GLfloat *a3, float *a4, float *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CVOpenGLESTextureGetCleanTexCoords(a1, &lowerLeft, &lowerRight, &upperRight, &upperLeft);
  if (a2)
  {
    GLfloat result = lowerLeft;
    *a2 = lowerLeft;
  }
  if (a3)
  {
    GLfloat result = upperRight;
    *a3 = upperRight;
  }
  if (a4)
  {
    GLfloat result = v12;
    *a4 = v12;
  }
  if (a5)
  {
    GLfloat result = v15;
    *a5 = v15;
  }
  return result;
}

void *CVOpenGLESTextureBackingImage(void *a1)
{
  GLfloat result = _getCVOpenGLESTexture(a1);
  if (result) {
    return *(void **)(result[12] + 168);
  }
  return result;
}

void *CVOpenGLESTextureBufferBackingImage(void *a1)
{
  GLfloat result = _getCVOpenGLESTexture(a1);
  if (result)
  {
    CFTypeID v2 = *(uint64_t (**)(void))(*result + 160);
    return (void *)v2();
  }
  return result;
}

__CVBuffer *CVOpenGLESTextureCopyBacking(void *a1)
{
  CVOpenGLESTexture = _getCVOpenGLESTexture(a1);
  if (!CVOpenGLESTexture) {
    return 0;
  }
  uint64_t v3 = *(void *)(CVOpenGLESTexture[12] + 168);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFIndex v5 = (__CVBuffer *)(*(uint64_t (**)(uint64_t, CFAllocatorRef))(*(void *)v3 + 144))(v3, v4);
  if (v5) {
    CVBufferPropagateAttachments((CVBufferRef)a1, v5);
  }
  return v5;
}

CVReturn CVOpenGLESTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, CVEAGLContext eaglContext, CFDictionaryRef textureAttributes, CVOpenGLESTextureCacheRef *cacheOut)
{
  CVReturn result = -6661;
  if (eaglContext && cacheOut)
  {
    if (cacheAttributes)
    {
      CFTypeID v11 = CFGetTypeID(cacheAttributes);
      if (v11 != CFDictionaryGetTypeID()) {
        return -6661;
      }
    }
    if (textureAttributes && (CFTypeID v12 = CFGetTypeID(textureAttributes), v12 != CFDictionaryGetTypeID()))
    {
      return -6661;
    }
    else
    {
      *cacheOut = 0;
      CFIndex v13 = CVOpenGLESTextureCache::alloc(allocator, cacheAttributes);
      if (v13
        && (CFStringRef v14 = (__CVOpenGLESTextureCache *)v13,
            (*(uint64_t (**)(CVBufferPool *, CVEAGLContext, CFDictionaryRef, CFDictionaryRef))(*(void *)v13[2] + 96))(v13[2], eaglContext, cacheAttributes, textureAttributes)))
      {
        CVReturn result = 0;
        *cacheOut = v14;
      }
      else
      {
        return -6662;
      }
    }
  }
  return result;
}

CVReturn CVOpenGLESTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVOpenGLESTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, GLenum target, GLint internalFormat, GLsizei width, GLsizei height, GLenum format, GLenum type, size_t planeIndex, CVOpenGLESTextureRef *textureOut)
{
  uint64_t v12 = *(void *)&height;
  uint64_t v13 = *(void *)&width;
  uint64_t v14 = *(void *)&internalFormat;
  uint64_t v15 = *(void *)&target;
  CVOpenGLESTextureCache = _getCVOpenGLESTextureCache(textureCache);
  if (!sourceImage) {
    return -6661;
  }
  uint64_t v19 = CVOpenGLESTextureCache;
  CFTypeID v20 = CFGetTypeID(sourceImage);
  if (v20 != CVPixelBufferGetTypeID() && v20 != CVOpenGLESTextureGetTypeID()) {
    return -6661;
  }
  uint64_t v21 = *((void *)sourceImage + 2);
  CVReturn v23 = -6660;
  CVReturn result = -6661;
  if (textureOut && v19)
  {
    if (v21)
    {
      *textureOut = (CVOpenGLESTextureRef)(*(uint64_t (**)(void *, CFAllocatorRef, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, GLenum, size_t, CVReturn *))(*v19 + 104))(v19, allocator, v21, v15, v14, v13, v12, format, type, planeIndex, &v23);
      (*(void (**)(void *, void))(*v19 + 120))(v19, 0);
      return v23;
    }
  }
  return result;
}

void *_getCVOpenGLESTextureCache(void *result)
{
  if (result)
  {
    CFArrayRef v1 = result;
    CFTypeID v2 = CFGetTypeID(result);
    if (v2 == CVOpenGLESTextureCacheGetTypeID()) {
      return (void *)v1[2];
    }
    else {
      return 0;
    }
  }
  return result;
}

void CVOpenGLESTextureCacheFlush(CVOpenGLESTextureCacheRef textureCache, CVOptionFlags options)
{
  CVOpenGLESTextureCache = _getCVOpenGLESTextureCache(textureCache);
  if (CVOpenGLESTextureCache)
  {
    uint64_t v3 = *(void (**)(void))(*CVOpenGLESTextureCache + 120);
    v3();
  }
}

_OWORD *ConvertFromEncodingRange(_OWORD *result, unsigned int a2)
{
  if (a2 <= 4)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (double *)*(&off_1E5BD52A0 + (int)a2);
    double v4 = v3[4];
    double v6 = *v3;
    double v5 = v3[1];
    v21[0] = v4 / v5;
    v21[1] = 0.0;
    v21[2] = 0.0;
    v21[3] = -v6 / v5;
    v21[4] = 0.0;
    double v8 = v3[2];
    double v7 = v3[3];
    v21[5] = v4 / v7;
    v21[6] = 0.0;
    double v22 = -v8 / v7;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    double v25 = v4 / v7;
    double v26 = v22;
    long long v27 = xmmword_1A5885200;
    long long v28 = unk_1A5885210;
    long long v9 = result[5];
    v20[4] = result[4];
    v20[5] = v9;
    long long v10 = result[7];
    v20[6] = result[6];
    v20[7] = v10;
    long long v11 = result[1];
    v20[0] = *result;
    v20[1] = v11;
    long long v12 = result[3];
    v20[2] = result[2];
    v20[3] = v12;
    uint64_t v13 = v20;
    do
    {
      uint64_t v14 = 0;
      uint64_t v15 = v21;
      do
      {
        uint64_t v16 = 0;
        double v17 = 0.0;
        uint64_t v18 = v15;
        do
        {
          double v19 = *v18;
          v18 += 4;
          double v17 = v17 + v19 * *(double *)((char *)v13 + v16);
          v16 += 8;
        }
        while (v16 != 32);
        *((double *)&result[2 * v2] + v14++) = v17;
        ++v15;
      }
      while (v14 != 4);
      ++v2;
      v13 += 2;
    }
    while (v2 != 4);
  }
  return result;
}

uint64_t LookupYCbCrMatrixType(uint64_t a1)
{
  if (!a1) {
    return 6;
  }
  CFArrayRef v1 = (const void *)(*(uint64_t (**)(uint64_t, __CFString *, void))(*(void *)a1 + 96))(a1, @"CVImageBufferYCbCrMatrix", 0);
  if (!v1) {
    return 6;
  }
  uint64_t v2 = v1;
  if (CFEqual(v1, @"ITU_R_709_2")) {
    return 1;
  }
  if (CFEqual(v2, @"SMPTE_240M_1995")) {
    return 7;
  }
  if (CFEqual(v2, @"ITU_R_2020")) {
    return 9;
  }
  else {
    return 6;
  }
}

double CalculateRGBToYCbCrMatrix(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xB) {
    uint64_t v2 = (double *)&qword_1A5885230;
  }
  else {
    uint64_t v2 = (double *)*(&off_1E5BD52C8 + a2 - 1);
  }
  double v3 = v2[1];
  *(double *)a1 = v3;
  double v4 = *v2;
  double v5 = 1.0 - *v2;
  double v6 = v5 - v3;
  *(double *)(a1 + 8) = v5 - v3;
  *(double *)(a1 + 16) = v4;
  *(double *)(a1 + 32) = -(v3 * (0.5 / v5));
  *(double *)(a1 + 4pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = -((v5 - v3) * (0.5 / v5));
  *(double *)(a1 + 48) = v5 * (0.5 / v5);
  double v7 = 1.0 - v3;
  *(double *)(a1 + 64) = v7 * (0.5 / v7);
  *(double *)(a1 + 72) = -(v6 * (0.5 / v7));
  *(double *)(a1 + 8pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = -(v4 * (0.5 / v7));
  *(void *)(a1 + CVBitOrAtomic(1, this + 24) = 0;
  *(void *)(a1 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 12pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0x3FF0000000000000;
  return result;
}

double CalculateYCbCrToRGBMatrix(uint64_t a1, int a2)
{
  CalculateRGBToYCbCrMatrix((uint64_t)&v15, a2);
  double v3 = v15;
  double v4 = v16;
  double v5 = v19;
  double v6 = v20;
  double v8 = v22;
  double v7 = v23;
  double v9 = v21;
  double v10 = v17;
  double v11 = v18;
  double v12 = v16 * v20 * v21
      + v15 * v19 * v23
      + v17 * v18 * v22
      + -(v21 * v19) * v17
      + -(v22 * v20) * v15
      + -(v23 * v18) * v16;
  double v13 = (v17 * v22 - v16 * v23) / v12;
  *(double *)a1 = (v19 * v23 - v22 * v20) / v12;
  *(double *)(a1 + 8) = v13;
  *(double *)(a1 + 16) = (v4 * v6 - v10 * v5) / v12;
  *(double *)(a1 + 32) = (v6 * v9 - v11 * v7) / v12;
  *(double *)(a1 + 4pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = (v3 * v7 - v10 * v9) / v12;
  *(double *)(a1 + 48) = (v10 * v11 - v3 * v6) / v12;
  *(double *)(a1 + 64) = (v11 * v8 - v5 * v9) / v12;
  *(double *)(a1 + 72) = (v4 * v9 - v3 * v8) / v12;
  *(double *)(a1 + 8pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = (v3 * v5 - v4 * v11) / v12;
  *(void *)(a1 + CVBitOrAtomic(1, this + 24) = 0;
  *(void *)(a1 + 56) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 12pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0x3FF0000000000000;
  return result;
}

void *CVBufferDumpToQTES(void *a1)
{
  double result = _getCVBuffer(a1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*result + 152);
    return (void *)v2();
  }
  return result;
}

CFDictionaryRef CVPixelBufferPoolGetAttributes(CVPixelBufferPoolRef pool)
{
  CFDictionaryRef result = (CFDictionaryRef)_getCVPixelBufferPool(pool);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 112);
    return (CFDictionaryRef)v2();
  }
  return result;
}

uint64_t CVPixelBufferPoolSetMaxBufferAge(void *a1, double a2)
{
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool) {
    return 4294960635;
  }
  double v5 = *(uint64_t (**)(__n128))(*CVPixelBufferPool + 128);
  v4.n128_f64[0] = a2;

  return v5(v4);
}

uint64_t CVPixelBufferPoolScanIOSurfacesWithOptions(void *a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool) {
    return 4294960635;
  }
  double v8 = CVPixelBufferPool;
  if (a4)
  {
    int BoolValueWithDefault = CVDictionaryGetBoolValueWithDefault(a4, @"ScanFreeIOSurfaces", 0);
    int v10 = CVDictionaryGetBoolValueWithDefault(a4, @"ScanUsedIOSurfaces", 0);
    if (!(v10 | BoolValueWithDefault)) {
      return 4294960635;
    }
    if (v10) {
      uint64_t v12 = (2 * (BoolValueWithDefault != 0)) | 4u;
    }
    else {
      uint64_t v12 = 2 * (BoolValueWithDefault != 0);
    }
  }
  else
  {
    uint64_t v12 = 2;
  }
  double v13 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*v8 + 192);

  return v13(v8, a2, a3, v12);
}

uint64_t CVPixelBufferPoolPrefetchPages(void *a1)
{
  CVPixelBufferPool = _getCVPixelBufferPool(a1);
  if (!CVPixelBufferPool) {
    return 4294960635;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*CVPixelBufferPool + 176);

  return v2();
}

void CVPixelBufferPoolFlush(CVPixelBufferPoolRef pool, CVPixelBufferPoolFlushFlags options)
{
  CVPixelBufferPool = _getCVPixelBufferPool(pool);
  kdebug_trace();
  if (CVPixelBufferPool)
  {
    __n128 v4 = *(void (**)(void *, CVPixelBufferPoolFlushFlags))(*CVPixelBufferPool + 184);
    v4(CVPixelBufferPool, options);
  }
}

uint64_t CVPixelBufferPoolTakeOwnershipOfIOSurface(const __CFAllocator *a1, CFTypeRef cf, __IOSurface *a3)
{
  CFTypeRef cfa = 0;
  int valuePtr = 0;
  uint64_t v3 = 4294960635;
  if (!cf || !a3) {
    return v3;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 != CVPixelBufferPoolGetTypeID()) {
    return 4294960635;
  }
  uint64_t v8 = *((void *)cf + 2);
  if (!v8) {
    return 4294960635;
  }
  double v9 = (const void *)(*(uint64_t (**)(void))(*(void *)v8 + 120))(*((void *)cf + 2));
  if (!v9) {
    return 4294960635;
  }
  int v10 = v9;
  uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v9, @"Width", 0);
  if (IntValueWithDefault != IOSurfaceGetWidth(a3)) {
    return 4294960635;
  }
  uint64_t v12 = CVDictionaryGetIntValueWithDefault(v10, @"Height", 0);
  if (v12 != IOSurfaceGetHeight(a3)) {
    return 4294960635;
  }
  CFDataRef Value = CFDictionaryGetValue((CFDictionaryRef)v10, @"PixelFormatType");
  CFDictionaryRef ValueAtIndex = Value;
  if (Value)
  {
    CFTypeID v15 = CFGetTypeID(Value);
    if (v15 != CFArrayGetTypeID()
      || !CFArrayGetCount((CFArrayRef)ValueAtIndex)
      || (CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)ValueAtIndex, 0)) != 0)
    {
      CFTypeID v16 = CFGetTypeID(ValueAtIndex);
      if (v16 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        LODWORD(ValueAtIndex) = valuePtr;
      }
      else
      {
        LODWORD(ValueAtIndex) = 0;
      }
    }
  }
  if (ValueAtIndex != IOSurfaceGetPixelFormat(a3)) {
    return 4294960635;
  }
  CFDictionaryRef v17 = IOSurfaceCopyAllValues(a3);
  uint64_t v18 = CVDictionaryGetIntValueWithDefault(v10, @"ExtendedPixelsLeft", 0);
  if (v18 == CVDictionaryGetIntValueWithDefault(v17, @"ExtendedPixelsLeft", 0)
    && (uint64_t v19 = CVDictionaryGetIntValueWithDefault(v10, @"ExtendedPixelsTop", 0),
        v19 == CVDictionaryGetIntValueWithDefault(v17, @"ExtendedPixelsTop", 0))
    && (uint64_t v20 = CVDictionaryGetIntValueWithDefault(v10, @"ExtendedPixelsRight", 0),
        v20 == CVDictionaryGetIntValueWithDefault(v17, @"ExtendedPixelsRight", 0))
    && (uint64_t v21 = CVDictionaryGetIntValueWithDefault(v10, @"ExtendedPixelsBottom", 0),
        v21 == CVDictionaryGetIntValueWithDefault(v17, @"ExtendedPixelsBottom", 0)))
  {
    MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy(a1, 0, (CFDictionaryRef)v10);
    if (MutableCopy)
    {
      CFDictionaryRef v23 = MutableCopy;
      uint64_t ID = IOSurfaceGetID(a3);
      char v27 = 0;
      (*(void (**)(uint64_t, __IOSurface *(*)(__IOSurface *, unsigned char *), uint64_t *, uint64_t))(*(void *)v8 + 192))(v8, pixelBufferPoolScanIOSurfacesCallback, &ID, 6);
      if (!v27)
      {
        CFTypeRef cfa = CVPixelBufferBacking::alloc(a1, v24);
        if (!cfa)
        {
          uint64_t v3 = 4294960634;
          goto LABEL_28;
        }
        if (!checkIOOrEXSurfaceAndCreatePixelBufferBacking(a3, v23, &cfa))
        {
          uint64_t v3 = (*(uint64_t (**)(uint64_t, CFTypeRef))(*(void *)v8 + 200))(v8, cfa);
          if (v3)
          {
            CFRelease(cfa);
            CFTypeRef cfa = 0;
          }
          goto LABEL_28;
        }
      }
      uint64_t v3 = 4294960635;
LABEL_28:
      CFRelease(v23);
      goto LABEL_29;
    }
    uint64_t v3 = 4294960634;
  }
  else
  {
    uint64_t v3 = 4294960635;
  }
LABEL_29:
  if (v17) {
    CFRelease(v17);
  }
  return v3;
}

__IOSurface *pixelBufferPoolScanIOSurfacesCallback(__IOSurface *result, unsigned char *a2)
{
  if (result && a2)
  {
    CFDictionaryRef result = (__IOSurface *)IOSurfaceGetID(result);
    if (*(void *)a2 == result) {
      a2[8] = 1;
    }
  }
  return result;
}

uint64_t CVPixelBufferPoolCopyArrayOfCVPixelBuffers(const __CFAllocator *a1, __CVPixelBufferPool *a2, const __CFDictionary *a3, CFMutableArrayRef *a4)
{
  int value = 0;
  CFArrayRef theArray = 0;
  if (!_getCVPixelBufferPool(a2)) {
    return 4294960635;
  }
  CVPixelBufferPool = _getCVPixelBufferPool(a2);
  if (CVPixelBufferPool) {
    uint64_t v9 = (*(uint64_t (**)(void *))(*CVPixelBufferPool + 120))(CVPixelBufferPool);
  }
  else {
    uint64_t v9 = 0;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    return 4294960634;
  }
  CFMutableArrayRef v13 = Mutable;
  uint64_t v14 = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v14)
  {
    uint64_t v10 = 4294960634;
LABEL_19:
    CFRelease(v13);
    return v10;
  }
  CFTypeID v15 = v14;
  CFTypeID v16 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(v14, @"ScanFreeIOSurfaces", (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(v15, @"ScanUsedIOSurfaces", v16);
  CFArrayRef theArray = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (theArray)
  {
    uint64_t v17 = CVPixelBufferPoolScanIOSurfacesWithOptions(a2, (uint64_t)poolScanIOSurfacesCallback, (uint64_t)&theArray, v15);
    if (!v17)
    {
      CFIndex Count = CFArrayGetCount(theArray);
      if (Count < 1)
      {
LABEL_15:
        uint64_t v10 = 0;
        *a4 = v13;
        CFMutableArrayRef v13 = 0;
        goto LABEL_16;
      }
      uint64_t v19 = Count;
      CFIndex v20 = 0;
      unsigned int v21 = 1;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (__IOSurface *)CFArrayGetValueAtIndex(theArray, v20);
        uint64_t v17 = CVPixelBufferCreateWithIOSurface(v11, ValueAtIndex, a3, (CVPixelBufferRef *)&value);
        if (v17) {
          break;
        }
        (*(void (**)(void, uint64_t))(**((void **)value + 2) + 144))(*((void *)value + 2), v9);
        CFArrayAppendValue(v13, value);
        CFRelease(value);
        CFIndex v20 = v21;
        if (v19 <= v21++) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v10 = v17;
  }
  else
  {
    uint64_t v10 = 4294960634;
  }
LABEL_16:
  CFRelease(v15);
  if (theArray) {
    CFRelease(theArray);
  }
  if (v13) {
    goto LABEL_19;
  }
  return v10;
}

void poolScanIOSurfacesCallback(__IOSurface *value, CFMutableArrayRef *a2)
{
  if (value)
  {
    if (a2) {
      CFArrayAppendValue(*a2, value);
    }
  }
}

CGSize CVImageBufferGetDisplaySize(CVImageBufferRef imageBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    (*(void (**)(void *))(*CVPixelBuffer + 184))(CVPixelBuffer);
  }
  else
  {
    double v2 = 0.0;
    double v3 = 0.0;
  }
  result.height = v3;
  result.width = v2;
  return result;
}

CGRect CVImageBufferGetCleanRect(CVImageBufferRef imageBuffer)
{
  CVPixelBuffer = _getCVPixelBuffer(imageBuffer);
  if (CVPixelBuffer)
  {
    (*(void (**)(void *))(*CVPixelBuffer + 192))(CVPixelBuffer);
  }
  else
  {
    double v4 = 0.0;
    double v3 = 0.0;
    double v2 = 0.0;
    double v5 = 0.0;
  }
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

CGColorSpaceRef CVImageBufferGetColorSpace(CVImageBufferRef imageBuffer)
{
  CGColorSpaceRef result = (CGColorSpaceRef)_getCVPixelBuffer(imageBuffer);
  if (result)
  {
    double v2 = *(uint64_t (**)(void))(*(void *)result + 168);
    return (CGColorSpaceRef)v2();
  }
  return result;
}

uint64_t CVImageBufferSetColorSpace(void *a1)
{
  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer) {
    return 4294960635;
  }
  double v2 = *(uint64_t (**)(void))(*CVPixelBuffer + 208);

  return v2();
}

void _releaseCFDataForCGDataProvider(CFTypeRef cf, const void *a2)
{
  if (cf) {
    CFRelease(cf);
  }
}

CGColorSpaceRef CVCreateColorSpaceFromIOSurfaceBulkAttachments(uint64_t a1)
{
  CFDictionaryRef attachments = 0;
  createAttachmentsDictionaryFromIOSurfaceStruct(a1, &attachments);
  if (!attachments) {
    return 0;
  }
  ColorSpaceFromuint64_t Attachments = CVImageBufferCreateColorSpaceFromAttachments(attachments);
  CFRelease(attachments);
  return ColorSpaceFromAttachments;
}

uint64_t CVImageBufferSetCleanAperture(void *a1, double a2, double a3, double a4, double a5)
{
  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer) {
    return 4294960635;
  }
  uint64_t v14 = *(uint64_t (**)(__n128, __n128, __n128, __n128))(*CVPixelBuffer + 216);
  v10.n128_f64[0] = a2;
  v11.n128_f64[0] = a3;
  v12.n128_f64[0] = a4;
  v13.n128_f64[0] = a5;

  return v14(v10, v11, v12, v13);
}

uint64_t CVImageBufferSetFieldCount(void *a1)
{
  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer) {
    return 4294960635;
  }
  double v2 = *(uint64_t (**)(void))(*CVPixelBuffer + 224);

  return v2();
}

uint64_t CVImageBufferSetPixelAspectRatio(void *a1)
{
  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer) {
    return 4294960635;
  }
  double v2 = *(uint64_t (**)(void))(*CVPixelBuffer + 232);

  return v2();
}

uint64_t CVImageBufferSetDisplayDimensions(void *a1)
{
  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer) {
    return 4294960635;
  }
  double v2 = *(uint64_t (**)(void))(*CVPixelBuffer + 240);

  return v2();
}

double CVImageBufferGetBufferBackingSize(void *a1)
{
  CVPixelBuffer = _getCVPixelBuffer(a1);
  if (!CVPixelBuffer) {
    return 0.0;
  }
  uint64_t v2 = (*(uint64_t (**)(void *))(*CVPixelBuffer + 160))(CVPixelBuffer);
  (*(void (**)(uint64_t))(*(void *)v2 + 176))(v2);
  return result;
}

void *CVImageBufferProvideImageData(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double result = _getCVPixelBuffer(a1);
  if (result)
  {
    uint64_t v14 = (*(uint64_t (**)(void *))(*result + 160))(result);
    return (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 184))(v14, a2, a3, a4, a5, a6, a7);
  }
  return result;
}

void *CVImageBufferGetPixelFormatType(void *a1)
{
  double result = _getCVPixelBuffer(a1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(void *))(*result + 160))(result) + 192);
    return (void *)v2();
  }
  return result;
}

void *CVImageBufferHasCleanRect(void *a1)
{
  double result = _getCVPixelBuffer(a1);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*result + 200);
    return (void *)v2();
  }
  return result;
}

CFMutableDictionaryRef cvSetUpUnrecognizedCodePointDictionariesOnce(void *a1)
{
  sCVUnrecognizedCodePointDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.corevideo.unrecognized-code-points", 0);
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  sCVStringsForUnrecognizedYCbCrMatrixCodePoints = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  sCVStringsForUnrecognizedColorPrimariesCodePoints = (uint64_t)CFDictionaryCreateMutable(v1, 0, 0, v2);
  CFMutableDictionaryRef result = CFDictionaryCreateMutable(v1, 0, 0, v2);
  sCVStringsForUnrecognizedTransferFunctionCodePoints = (uint64_t)result;
  return result;
}

void cvGetUnrecognizedCodePointString(CFDictionaryRef *a1)
{
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1[2], (const void *)*((int *)a1 + 2));
  a1[3] = Value;
  if (!Value)
  {
    CFStringRef v3 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@%d", *a1, *((unsigned int *)a1 + 2));
    a1[3] = (CFDictionaryRef)v3;
    if (v3)
    {
      CFDictionarySetValue(a1[2], (const void *)*((int *)a1 + 2), v3);
      CFDictionaryRef v4 = a1[3];
      CFRelease(v4);
    }
  }
}

CVOpenGLESTextureBacking **CVPixelBufferOpenGLESTextureBacking::alloc(CVPixelBufferOpenGLESTextureBacking *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVPixelBufferOpenGLESTextureBacking *)_cvTrackingGetCFAllocator(@"CVPixelBufferOpenGLESTextureBacking");
  }
  CFTypeID TypeID = (CVObject *)CVObjectGetTypeID();
  CFDictionaryRef v4 = (CVOpenGLESTextureBacking **)CVObject::alloc(TypeID, (unint64_t)this, (const __CFAllocator *)0x18, 0x210uLL);
  double v5 = v4;
  if (v4)
  {
    CVOpenGLESTextureBacking::CVOpenGLESTextureBacking(v4[2], v4);
    void *v6 = &unk_1EFA17968;
  }
  return v5;
}

void CVPixelBufferOpenGLESTextureBacking::CVPixelBufferOpenGLESTextureBacking(CVPixelBufferOpenGLESTextureBacking *this, const void *a2)
{
  CVOpenGLESTextureBacking::CVOpenGLESTextureBacking(this, a2);
  *uint64_t v2 = &unk_1EFA17968;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::isPixelBufferBackingSupported(CVPixelBufferOpenGLESTextureBacking *this, CVPixelBufferBacking *a2, CVOpenGLESContext *a3)
{
  if (!(*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVPixelBufferBacking *, CVOpenGLESContext *))(*(void *)this + 152))(this, a2, a3))
  {
    int v6 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(void *)this + 312))(this);
    uint64_t v7 = *(void *)this;
    if (v6)
    {
      uint64_t v8 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(v7 + 344))(this);
      if (!v8) {
        goto LABEL_2;
      }
      uint64_t v9 = v8;
      uint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, uint64_t))(*(void *)this + 352))(this, v10);
        unint64_t v12 = ((unint64_t)(*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, uint64_t))(*(void *)this + 392))(this, v10) >> 3)* v11;
        if (v12 != (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, uint64_t))(*(void *)this + 376))(this, v10))break; {
        if (v9 == ++v10)
        }
          goto LABEL_2;
      }
    }
    else
    {
      uint64_t v13 = (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(v7 + 272))(this);
      unint64_t v14 = ((unint64_t)(*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(void *)this + 336))(this) >> 3)
          * v13;
      if (v14 == (*(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(void *)this + 296))(this)) {
        goto LABEL_2;
      }
    }
    return 0;
  }
LABEL_2:
  CFDictionaryRef v4 = *(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *))(*(void *)this + 472);

  return v4(this);
}

uint64_t CVPixelBufferOpenGLESTextureBacking::finalize(CVPixelBufferOpenGLESTextureBacking *this)
{
  if (*((void *)this + 22))
  {
    unint64_t v2 = *((void *)this + 64);
    uint64_t v3 = *((void *)this + 65);
    if (v3 & 1 | v2)
    {
      CFDictionaryRef v4 = (void *)((char *)this + (v3 >> 1));
      if (v3) {
        unint64_t v2 = *(void *)(*v4 + v2);
      }
      ((void (*)(void *))v2)(v4);
    }
  }
  uint64_t v5 = *((void *)this + 21);
  if (v5 && !(*(uint64_t (**)(uint64_t))(*(void *)v5 + 152))(v5)) {
    (*(void (**)(void, void))(**((void **)this + 21) + 424))(*((void *)this + 21), 0);
  }
  int v6 = (const void *)*((void *)this + 59);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 28);
  if (v7) {
    CFRelease(v7);
  }

  return CVOpenGLESTextureBacking::finalize(this);
}

void CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat()
{
  if ((CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat::didComplain & 1) == 0) {
    CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat::didComplaiCFIndex n = 1;
  }
}

uint64_t CVPixelBufferOpenGLESTextureBacking::createStandardTexture(CVPixelBufferOpenGLESTextureBacking *this, CVImageBuffer *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 21);
  *((_DWORD *)this + 65) = (*(uint64_t (**)(uint64_t, CVImageBuffer *))(*(void *)v3 + 432))(v3, a2);
  *((_DWORD *)this + 66) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 440))(v3);
  *((_DWORD *)this + 67) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 448))(v3);
  *((_DWORD *)this + 76) = 0;
  *((void *)this + 35) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 320))(v3, 1);
  *((_DWORD *)this + 72) = 0;
  *((void *)this + 37) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 296))(v3);
  *((_DWORD *)this + 68) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3);
  *((_DWORD *)this + 69) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 280))(v3);
  *((void *)this + 31) = 0x806900000DE1;
  *((void *)this + 39) = 0;
  CFDictionaryRef v4 = (const __CFDictionary *)*((void *)this + 59);
  if (v4)
  {
    CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v4, @"TextureParams");
    if (Value)
    {
      CFDataRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFDataGetTypeID() && CFDataGetLength(v6) == 32)
      {
        v30.length = CFDataGetLength(v6);
        v30.locatioCFIndex n = 0;
        CFDataGetBytes(v6, v30, buffer);
        *((_DWORD *)this + 62) = v25;
        *(void *)&long long v8 = v28;
        *((void *)&v8 + 1) = v26;
        *((_DWORD *)this + 69) = v27;
        *(_OWORD *)((char *)this + 26pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = v8;
        *((void *)this + 39) = *(void *)buffer;
        if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3) < (unint64_t)SHIDWORD(v8)
          || (unint64_t v9 = *((int *)this + 69), (*(uint64_t (**)(uint64_t))(*(void *)v3 + 280))(v3) < v9))
        {
          uint64_t v10 = 0;
          *((_OWORD *)this + 32) = 0u;
          return v10;
        }
        *((void *)this + 27) = CFRetain(v6);
      }
    }
  }
  (*(void (**)(uint64_t))(*(void *)v3 + 480))(v3);
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  uint64_t v11 = *(void **)(*((void *)this + 22) + 88);
  *((_DWORD *)this + 116) = 1;
  ((void (*)(void, void, _DWORD *))v11[105])(*v11, *((unsigned int *)this + 63), v23);
  v23[2] = 0;
  ((void (*)(void, uint64_t, char *))v11[99])(*v11, 1, (char *)this + 256);
  (*(void (**)(void, void, void))(*(void *)(*((void *)this + 22) + 88) + 48))(**(void **)(*((void *)this + 22) + 88), *((unsigned int *)this + 62), *((unsigned int *)this + 64));
  snprintf((char *)buffer, 0x40uLL, "CoreVideo #%u", *((_DWORD *)this + 64));
  ((void (*)(void, uint64_t, void, void, UInt8 *))v11[815])(*v11, 5890, *((unsigned int *)this + 64), 0, buffer);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 480))(v3))
  {
    ((void (*)(void, void, uint64_t, uint64_t))v11[305])(*v11, *((unsigned int *)this + 62), 10241, 9729);
    ((void (*)(void, void, uint64_t, uint64_t))v11[305])(*v11, *((unsigned int *)this + 62), 10240, 9729);
    unint64_t v12 = (id *)*((void *)this + 22);
    unsigned int v13 = *((_DWORD *)this + 62);
    unsigned int v14 = *((_DWORD *)this + 67);
    uint64_t v15 = *((unsigned int *)this + 68);
    uint64_t v16 = *((unsigned int *)this + 69);
    unsigned int v17 = *((_DWORD *)this + 65);
    unsigned int v18 = *((_DWORD *)this + 66);
    uint64_t v19 = (__IOSurface *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v3);
    uint64_t v10 = CVOpenGLESContext::texImageIOSurface(v12, v13, v14, v15, v16, v17, v18, v19, *((void *)this + 39));
  }
  else
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 152))(v3)) {
      CVOpenGLESTextureCache_IOSurfaceNotInNativePixelFormat();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 416))(v3, 1);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 344))(v3)) {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 368))(v3, *((void *)this + 39), 1);
    }
    else {
      uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 320))(v3, 1);
    }
    *((void *)this + 35) = v20;
    ((void (*)(void, void, uint64_t, uint64_t))v11[305])(*v11, *((unsigned int *)this + 62), 10241, 9729);
    ((void (*)(void, void, uint64_t, uint64_t))v11[305])(*v11, *((unsigned int *)this + 62), 10240, 9729);
    ((void (*)(void, void, void, void, void, void, void, void, _DWORD, void))v11[302])(*v11, *((unsigned int *)this + 62), 0, *((unsigned int *)this + 67), *((unsigned int *)this + 68), *((unsigned int *)this + 69), 0, *((unsigned int *)this + 65), *((_DWORD *)this + 66), *((void *)this + 35) + *((unsigned int *)this + 72));
    uint64_t v10 = 1;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 424))(v3, 1);
    *((void *)this + 35) = 0;
  }
  (*(void (**)(void, void, void))(*(void *)(*((void *)this + 22) + 88) + 48))(**(void **)(*((void *)this + 22) + 88), *((unsigned int *)this + 62), v23[0]);
  pthread_mutex_unlock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  int v21 = *((_DWORD *)this + 64);
  *((_DWORD *)this + 48) = *((_DWORD *)this + 62);
  *((_DWORD *)this + 49) = v21;
  return v10;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::updateStandardTexture(CVPixelBufferOpenGLESTextureBacking *this, CVImageBuffer *a2, CVOpenGLESTexture *a3)
{
  uint64_t v4 = *((void *)this + 21);
  uint64_t result = (*(uint64_t (**)(uint64_t, CVImageBuffer *, CVOpenGLESTexture *))(*(void *)v4 + 480))(v4, a2, a3);
  if ((result & 1) == 0)
  {
    pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 22) + 16));
    CFDataRef v6 = *(void **)(*((void *)this + 22) + 88);
    ((void (*)(void, void, _DWORD *))v6[105])(*v6, *((unsigned int *)this + 63), v8);
    void v8[2] = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 416))(v4, 1);
    if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344))(v4)) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v4 + 368))(v4, *((void *)this + 39), 1);
    }
    else {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 320))(v4, 1);
    }
    *((void *)this + 35) = v7;
    (*(void (**)(void, void, void))(*(void *)(*((void *)this + 22) + 88) + 48))(**(void **)(*((void *)this + 22) + 88), *((unsigned int *)this + 62), *((unsigned int *)this + 64));
    ((void (*)(void, void, void, void, void, void, void, void, _DWORD, void))v6[308])(*v6, *((unsigned int *)this + 62), 0, 0, 0, *((unsigned int *)this + 68), *((unsigned int *)this + 69), *((unsigned int *)this + 65), *((_DWORD *)this + 66), *((void *)this + 35) + *((unsigned int *)this + 72));
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 424))(v4, 1);
    *((void *)this + 35) = 0;
    (*(void (**)(void, void, void))(*(void *)(*((void *)this + 22) + 88) + 48))(**(void **)(*((void *)this + 22) + 88), *((unsigned int *)this + 62), v8[0]);
    return pthread_mutex_unlock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  }
  return result;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture(CVPixelBufferOpenGLESTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  (*(void (**)(void, uint64_t, char *))(*(void *)(*((void *)this + 22) + 88) + 480))(**(void **)(*((void *)this + 22) + 88), 1, (char *)this + 256);
  *((_DWORD *)this + 116) = 0;
  unint64_t v2 = (pthread_mutex_t *)(*((void *)this + 22) + 16);

  return pthread_mutex_unlock(v2);
}

void CVPixelBufferOpenGLESTextureBacking::getTextureFunctions(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  *a3 = CVPixelBufferOpenGLESTextureBacking::createStandardTexture;
  a3[1] = 0;
  *a4 = CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
  a4[1] = 0;
  *a5 = CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture;
  a5[1] = 0;
}

CVPixelBufferOpenGLESTextureBacking *CVPixelBufferOpenGLESTextureBacking::initWithPixelBackingContext(CVPixelBufferOpenGLESTextureBacking *this, CVPixelBufferBacking *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  if (!(*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)a2 + 152))(a2)) {
    (*(void (**)(CVPixelBufferBacking *, void))(*(void *)a2 + 416))(a2, 0);
  }
  *((void *)this + 29) = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)a2 + 272))(a2);
  uint64_t v11 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)a2 + 280))(a2);
  int v12 = v11;
  *((void *)this + 3pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = v11;
  int v13 = *((_DWORD *)this + 58);
  char v14 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)a2 + 200))(a2);
  CVOpenGLESTextureBacking::initWithBackingContext(this, a2, a3, v13, v12, v14);
  if (a4) {
    CFTypeRef v16 = CFRetain(a4);
  }
  else {
    CFTypeRef v16 = 0;
  }
  *((void *)this + 59) = v16;
  *((void *)this + 6pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = CVPixelBufferOpenGLESTextureBacking::createStandardTexture;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture;
  *((void *)this + 65) = 0;
  if (CVPixelBufferOpenGLESTextureBacking::createStandardTexture(this, v15)) {
    int v17 = 0;
  }
  else {
    int v17 = -6683;
  }
  *a6 = v17;
  return this;
}

uint64_t CVPixelBufferOpenGLESTextureBacking::updateTexture(uint64_t (**this)(CVPixelBufferOpenGLESTextureBacking *this, CVImageBuffer *a2), CVImageBuffer *a2, CVOpenGLESTexture *a3)
{
  uint64_t v5 = this;
  BOOL v6 = this[60] == CVPixelBufferOpenGLESTextureBacking::createStandardTexture && this[61] == 0;
  if (v6
    && ((char *)this[62] == (char *)CVPixelBufferOpenGLESTextureBacking::updateStandardTexture
      ? (BOOL v7 = this[63] == 0)
      : (BOOL v7 = 0),
        v7
     && ((char *)this[64] == (char *)CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture
       ? (BOOL v8 = this[65] == 0)
       : (BOOL v8 = 0),
         v8)))
  {
    int v13 = CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
  }
  else
  {
    unint64_t v9 = this[64];
    uint64_t v10 = (uint64_t)this[65];
    uint64_t v11 = (uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))((char *)this + (v10 >> 1));
    if (v10) {
      unint64_t v9 = *(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))(*v11 + v9);
    }
    ((void (*)(void *))v9)(v11);
    v5[60] = CVPixelBufferOpenGLESTextureBacking::createStandardTexture;
    v5[61] = 0;
    v5[62] = (uint64_t (*)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))CVPixelBufferOpenGLESTextureBacking::updateStandardTexture;
    v5[63] = 0;
    v5[64] = (uint64_t (*)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))CVPixelBufferOpenGLESTextureBacking::destroyStandardTexture;
    v5[65] = 0;
    CVPixelBufferOpenGLESTextureBacking::createStandardTexture((CVPixelBufferOpenGLESTextureBacking *)v5, v12);
    int v13 = (uint64_t (*)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *, CVOpenGLESTexture *))v5[62];
    uint64_t v14 = (uint64_t)v5[63];
    uint64_t v5 = (uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *))((char *)v5 + (v14 >> 1));
    if (v14) {
      int v13 = *(uint64_t (**)(CVPixelBufferOpenGLESTextureBacking *, CVImageBuffer *, CVOpenGLESTexture *))((char *)*v5 + v13);
    }
  }

  return v13((CVPixelBufferOpenGLESTextureBacking *)v5, a2, a3);
}

uint64_t CVPixelBufferOpenGLESTextureBacking::finishTexture(CVPixelBufferOpenGLESTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  uint64_t v2 = *((void *)this + 22);
  if (*((int *)this + 116) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(v2 + 88);
    uint64_t v5 = (unsigned int *)((char *)this + 256);
    do
    {
      unsigned int v6 = *v5;
      v5 += 18;
      (*(void (**)(void, uint64_t, void))(v4 + 3768))(*(void *)v4, 5890, v6);
      ++v3;
    }
    while (v3 < *((int *)this + 116));
    uint64_t v2 = *((void *)this + 22);
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 16));
}

BOOL CVPixelBufferOpenGLESTextureBacking::testTexture(CVPixelBufferOpenGLESTextureBacking *this)
{
  pthread_mutex_lock((pthread_mutex_t *)(*((void *)this + 22) + 16));
  uint64_t v2 = *((void *)this + 22);
  int v3 = *((_DWORD *)this + 116);
  if (v3 < 1)
  {
    BOOL v7 = 1;
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)(v2 + 88);
    unsigned int v6 = (unsigned int *)((char *)this + 256);
    LOBYTE(v7) = 1;
    do
    {
      if (v7)
      {
        BOOL v7 = (*(unsigned int (**)(void, uint64_t, void))(v5 + 3760))(*(void *)v5, 5890, *v6) != 0;
        int v3 = *((_DWORD *)this + 116);
      }
      else
      {
        BOOL v7 = 0;
      }
      ++v4;
      v6 += 18;
    }
    while (v4 < v3);
    uint64_t v2 = *((void *)this + 22);
  }
  pthread_mutex_unlock((pthread_mutex_t *)(v2 + 16));
  return v7;
}

CFStringRef CVObject::copyDebugDescription(CVObject *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVObject *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVObject *))(*(void *)this + 24))(this);
  unsigned int v6 = (const void *)(*(uint64_t (**)(CVObject *))(*(void *)this + 24))(this);
  CFIndex v7 = CFGetRetainCount(v6);
  CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"< %@Ref %p obj=%p refcnt=%ld>", v4, v5, this, v7);
  CFRelease(v4);
  return v8;
}

const void *_cvTrackingGetCFAllocator(const void *a1)
{
  pthread_mutex_lock(&_cvAllocatorMutex);
  CFDictionaryRef Mutable = (const __CFDictionary *)_cvAllocatorDictionary;
  if (!_cvAllocatorDictionary)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
    _cvAllocatorDictionary = (uint64_t)Mutable;
  }
  CFDataRef Value = CFDictionaryGetValue(Mutable, a1);
  if (!Value)
  {
    CFStringRef v4 = malloc_type_calloc(0x10uLL, 1uLL, 0xDEFE9BAFuLL);
    void *v4 = CFRetain(a1);
    context.versioCFIndex n = 0;
    context.mach_timebase_info info = v4;
    memset(&context.retain, 0, 24);
    context.allocate = (CFAllocatorAllocateCallBack)trackingAllocate;
    context.reallocate = (CFAllocatorReallocateCallBack)trackingReallocate;
    context.deallocate = (CFAllocatorDeallocateCallBack)trackingDeallocate;
    context.preferredSize = (CFAllocatorPreferredSizeCallBack)trackingPreferredSize;
    CFDataRef Value = CFAllocatorCreate(0, &context);
    CFDictionarySetValue((CFMutableDictionaryRef)_cvAllocatorDictionary, a1, Value);
  }
  pthread_mutex_unlock(&_cvAllocatorMutex);
  return Value;
}

void *trackingAllocate(size_t a1, unint64_t a2, atomic_uint *a3)
{
  CFStringRef v4 = malloc_type_malloc(a1, 0x742366B6uLL);
  int v5 = malloc_size(v4);
  CVAddAtomic(v5, a3 + 2);
  CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"%@ allocated: %d  deallocated: %d  diff: %d\n", *(void *)a3, a3[2], a3[3], (a3[2] - a3[3]));
  CFShow(v6);
  CFRelease(v6);
  return v4;
}

void *trackingReallocate(void *a1, size_t a2, unint64_t a3, atomic_uint *a4)
{
  int v7 = malloc_size(a1);
  CVAddAtomic(v7, a4 + 3);
  CFStringRef v8 = malloc_type_realloc(a1, a2, 0x31FF8F95uLL);
  int v9 = malloc_size(v8);
  CVAddAtomic(v9, a4 + 2);
  CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"%@ allocated: %d  deallocated: %d  diff: %d\n", *(void *)a4, a4[2], a4[3], (a4[2] - a4[3]));
  CFShow(v10);
  CFRelease(v10);
  return v8;
}

void trackingDeallocate(void *a1, atomic_uint *a2)
{
  int v4 = malloc_size(a1);
  CVAddAtomic(v4, a2 + 3);
  free(a1);
  CFStringRef v5 = CFStringCreateWithFormat(0, 0, @"%@ allocated: %d  deallocated: %d  diff: %d\n", *(void *)a2, a2[2], a2[3], (a2[2] - a2[3]));
  CFShow(v5);

  CFRelease(v5);
}

uint64_t classFinalize_CVObject(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVObject(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVObjectRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVObject(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

void CVMetalTextureCache::CVMetalTextureCache(CVMetalTextureCache *this, const void *a2)
{
  CVBufferPool::CVBufferPool(this, a2);
  *uint64_t v2 = &unk_1EFA170C0;
  v2[5] = 0;
  v2[6] = 0;
  v2[4] = 0;
}

uint64_t CVMetalTextureCache::finalize(CVMetalTextureCache *this)
{
  uint64_t v2 = (const void *)*((void *)this + 8);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 8) = 0;
  CFTypeID v3 = (const void *)*((void *)this + 7);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 7) = 0;
  CFArrayRef v4 = (const __CFArray *)*((void *)this + 5);
  if (v4)
  {
    v12.length = CFArrayGetCount(*((CFArrayRef *)this + 5));
    v12.locatioCFIndex n = 0;
    CFArrayApplyFunction(v4, v12, (CFArrayApplierFunction)_invalidateBacking, 0);
  }
  CFIndex v5 = (const void *)*((void *)this + 6);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 6) = 0;
  CFStringRef v6 = (const void *)*((void *)this + 5);
  if (v6) {
    CFRelease(v6);
  }
  *((void *)this + 5) = 0;
  int v7 = (const void *)*((void *)this + 9);
  if (v7) {
    CFRelease(v7);
  }
  *((void *)this + 9) = 0;
  CFStringRef v8 = (const void *)*((void *)this + 10);
  if (v8) {
    CFRelease(v8);
  }
  *((void *)this + 1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  int v9 = (const void *)*((void *)this + 4);
  if (v9) {
    CFRelease(v9);
  }
  *((void *)this + 4) = 0;

  return CVBufferPool::finalize(this);
}

uint64_t CVMetalTextureCache::textureCacheRecycler(CVMetalTextureCache *this, void *a2, void *a3)
{
  uint64_t v4 = *((void *)this + 2);
  uint64_t result = (*(uint64_t (**)(uint64_t, void *, void *))(*(void *)v4 + 304))(v4, a2, a3);
  if (result)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 336))(v4)) {
      CFStringRef v6 = (__CFArray **)(a2 + 8);
    }
    else {
      CFStringRef v6 = (__CFArray **)(a2[2] + 224);
    }
    int v7 = *v6;
    CFStringRef v8 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    CFArrayAppendValue(v7, v8);
    CFArrayRef v9 = (const __CFArray *)a2[5];
    CFIndex Count = CFArrayGetCount(v9);
    uint64_t v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
    v15.locatioCFIndex n = 0;
    v15.length = Count;
    FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v9, v15, v11);
    CFArrayRemoveValueAtIndex(v9, FirstIndexOfValue);
    int v13 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 320);
    return v13(v4);
  }
  return result;
}

void CVMetalTextureCache::freeInvalidTexture(CVMetalTextureCache *this, void *a2, void *a3)
{
  uint64_t v4 = (void **)*((void *)this + 2);
  if (((unsigned int (*)(void **, void *, void *))(*v4)[15])(v4, a2, a3))
  {
    CFIndex v5 = (__CFDictionary *)a2[6];
    CFStringRef v6 = (const void *)(*(uint64_t (**)(void *))(*v4[21] + 24))(v4[21]);
    CFDictionaryRemoveValue(v5, v6);
    CFArrayRef v7 = *(const __CFArray **)(a2[2] + 224);
    CFIndex Count = CFArrayGetCount(v7);
    CFArrayRef v9 = (const void *)((uint64_t (*)(void **))(*v4)[3])(v4);
    v12.locatioCFIndex n = 0;
    v12.length = Count;
    FirstIndexOfCFDataRef Value = CFArrayGetFirstIndexOfValue(v7, v12, v9);
    CFArrayRemoveValueAtIndex(v7, FirstIndexOfValue);
  }
}

CFStringRef CVMetalTextureCache::copyDebugDescription(CVMetalTextureCache *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVMetalTextureCache *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVMetalTextureCache *))(*(void *)this + 24))(this);
  uint64_t v6 = *((void *)this + 10);
  uint64_t v7 = *((void *)this + 2);
  CFArrayRef v8 = *(const __CFArray **)(v7 + 232);
  if (v8)
  {
    CFIndex Count = CFArrayGetCount(v8);
    uint64_t v7 = *((void *)this + 2);
  }
  else
  {
    CFIndex Count = -1;
  }
  CFArrayRef v10 = *(const __CFArray **)(v7 + 224);
  if (v10) {
    CFIndex v11 = CFArrayGetCount(v10);
  }
  else {
    CFIndex v11 = -1;
  }
  CFArrayRef v12 = (const __CFArray *)*((void *)this + 5);
  if (v12) {
    CFIndex v13 = CFArrayGetCount(v12);
  }
  else {
    CFIndex v13 = -1;
  }
  CFStringRef v14 = CFStringCreateWithFormat(0, 0, @"< %@Ref %p cacheAttributes=nil metalBufferAttributes=%@ inUse=%ld free=%ld dirty=%ld>", v4, v5, v6, Count, v11, v13);
  CFRelease(v4);
  return v14;
}

uint64_t classFinalize_CVMetalTextureCache(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVMetalTextureCache(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVMetalTextureCacheRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalTextureCache(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

void CVPixelBufferBacking::CVPixelBufferBacking(CVPixelBufferBacking *this, const void *a2)
{
  CVImageBacking::CVImageBacking(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA17248;
  *(void *)(v2 + 496) = 0;
  *(_DWORD *)(v2 + 168) = 0;
  *(void *)(v2 + 108pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  *(void *)(v2 + 1096) = 0;
  *(void *)(v2 + 1088) = 0;
  *(void *)(v2 + 112pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  *(void *)(v2 + 1112) = 0;
  *(unsigned char *)(v2 + 144) = 1;
  *(void *)(v2 + 1136) = 0;
  *(void *)(v2 + 448) = 0;
  *(void *)(v2 + 456) = 0;
  *(_DWORD *)(v2 + 476) = 0;
}

__IOSurface *CreateChildIOSurface(__CVBuffer *a1, __CFDictionary *a2, unint64_t a3, unsigned int *a4)
{
  int valuePtr = 0;
  BufferBacking = CVPixelBufferGetBufferBacking(a1);
  if (!BufferBacking) {
    return 0;
  }
  CFArrayRef v8 = BufferBacking;
  if (!*(void *)(BufferBacking[2] + 456)) {
    return 0;
  }
  CFDataRef v33 = a4;
  pthread_mutex_lock(&gPixelBufferBackingCachedChildIOSurfaceMutex);
  CFIndex v32 = v8;
  CFArrayRef v9 = *(const __CFArray **)(v8[2] + 464);
  uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(a2, (const void *)*MEMORY[0x1E4F2F2C0], 1);
  uint64_t v35 = CVDictionaryGetIntValueWithDefault(a2, (const void *)*MEMORY[0x1E4F2F0E8], 1);
  CFDictionaryRef theDict = a2;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F2F150]);
  if (Value)
  {
    CFNumberRef v12 = Value;
    CFTypeID v13 = CFGetTypeID(Value);
    if (v13 == CFNumberGetTypeID()) {
      CFNumberGetValue(v12, kCFNumberSInt32Type, &valuePtr);
    }
  }
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      CFIndex v15 = Count;
      CFIndex v16 = 0;
      key = (void *)*MEMORY[0x1E4F2F238];
      int v17 = (const void *)*MEMORY[0x1E4F2F240];
      CFRange v30 = (const void *)*MEMORY[0x1E4F2F138];
      do
      {
        CFDictionaryRef ValueAtIndex = (__IOSurface *)CFArrayGetValueAtIndex(v9, v16);
        if (IOSurfaceGetWidth(ValueAtIndex) == IntValueWithDefault
          && IOSurfaceGetHeight(ValueAtIndex) == v35
          && IOSurfaceGetPlaneCount(ValueAtIndex) == a3)
        {
          OSType PixelFormat = IOSurfaceGetPixelFormat(ValueAtIndex);
          if (PixelFormat == valuePtr)
          {
            if (a3)
            {
              CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(theDict, key);
              CFIndex v21 = 0;
              unsigned int v22 = 0;
              while (1)
              {
                CFDictionaryRef v23 = CFArrayGetValueAtIndex(v20, v21);
                uint64_t v24 = CVDictionaryGetIntValueWithDefault(v23, v17, 0);
                if (IOSurfaceGetOffsetOfPlane() != v24) {
                  break;
                }
                CFIndex v21 = ++v22;
                if (v22 >= a3) {
                  goto LABEL_30;
                }
              }
            }
            else
            {
              uint64_t v25 = CVDictionaryGetIntValueWithDefault(theDict, v30, 0);
              if (IOSurfaceGetOffsetOfPlane() == v25)
              {
LABEL_30:
                CFRetain(ValueAtIndex);
                int v27 = v33;
                if (v33)
                {
                  int v28 = 6;
LABEL_26:
                  *int v27 = v28;
                }
                goto LABEL_27;
              }
            }
          }
        }
        ++v16;
      }
      while (v16 != v15);
    }
  }
  CFDictionaryRef ValueAtIndex = (__IOSurface *)IOSurfaceCreateChildSurface();
  if (ValueAtIndex)
  {
    CFDictionaryRef Mutable = *(__CFArray **)(v32[2] + 464);
    if (Mutable
      || (CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
          (*(void *)(v32[2] + 464) = Mutable) != 0))
    {
      CFArrayAppendValue(Mutable, ValueAtIndex);
    }
  }
  int v27 = v33;
  if (v33)
  {
    int v28 = 2;
    goto LABEL_26;
  }
LABEL_27:
  pthread_mutex_unlock(&gPixelBufferBackingCachedChildIOSurfaceMutex);
  return ValueAtIndex;
}

uint64_t CVPixelBufferBacking::getTotalPixelBufferBackingSize(CVPixelBufferBacking *this)
{
  return gPixelBufferBackingTotalDataSize;
}

uint64_t addBackingSummaryToGlobalBagAndTrace(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, char a5, char a6, const __CFString *a7)
{
  pthread_mutex_lock(&gPixelBufferBackingSummaryMutex);
  if (gPixelBufferBackingSummaryBag)
  {
    CFStringRef v14 = copyBackingSummaryString(a1, a2, a3, a5, a6, a7);
    CFBagAddValue((CFMutableBagRef)gPixelBufferBackingSummaryBag, v14);
    CFRelease(v14);
    unint64_t v15 = gPixelBufferBackingTotalDataSize;
    if ((a5 & 2) == 0)
    {
      unint64_t v15 = gPixelBufferBackingTotalDataSize + a4;
      gPixelBufferBackingTotalDataSize += a4;
    }
    printPixelBufferBackingSummaryBag((const __CFBag *)gPixelBufferBackingSummaryBag, v15);
  }

  return pthread_mutex_unlock(&gPixelBufferBackingSummaryMutex);
}

CFDictionaryRef CVPixelBufferBacking::copyPixelBufferOptions(CFTypeRef *this)
{
  CFAllocatorRef v2 = CFGetAllocator(this[136]);
  CFDictionaryRef v3 = (const __CFDictionary *)this[136];

  return CFDictionaryCreateCopy(v2, v3);
}

const void *CVPixelBufferBacking::getComponentRange(CFDictionaryRef *this)
{
  return CFDictionaryGetValue(this[135], @"ComponentRange");
}

uint64_t CVPixelBufferBacking::getRowPixels(CVPixelBufferBacking *this)
{
  return *((void *)this + 127);
}

uint64_t CVPixelBufferBacking::getBitsPerPixel(CVPixelBufferBacking *this)
{
  return *((void *)this + 128);
}

uint64_t CVPixelBufferBacking::getRowPixelsOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 130);
  if (!(a2 | v2)) {
    return (*(uint64_t (**)(void))(*(void *)this + 328))();
  }
  if (v2 <= a2) {
    return 0;
  }
  return *((void *)this + a2 + 94);
}

uint64_t CVPixelBufferBacking::getBitsPerPixelOfPlane(CVPixelBufferBacking *this, unint64_t a2)
{
  unint64_t v2 = *((void *)this + 130);
  if (!(a2 | v2)) {
    return (*(uint64_t (**)(void))(*(void *)this + 336))();
  }
  if (v2 <= a2) {
    return 0;
  }
  return *((void *)this + a2 + 110);
}

const __CFData *CVPixelBufferBacking::fillExtendedPixels(CFDictionaryRef *this, __CVBuffer *a2)
{
  CFDataRef result = (const __CFData *)CFDictionaryGetValue(this[135], @"FillExtendedPixelsCallback");
  if (result)
  {
    BytePtr = CFDataGetBytePtr(result);
    uint64_t v6 = (uint64_t (*)(__CVBuffer *, uint64_t))*((void *)BytePtr + 1);
    uint64_t v5 = *((void *)BytePtr + 2);
    return (const __CFData *)v6(a2, v5);
  }
  return result;
}

uint64_t CVPixelBufferBacking::getOpenGLFormat(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], @"OpenGLFormat", 0);
}

uint64_t CVPixelBufferBacking::getOpenGLType(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], @"OpenGLType", 0);
}

uint64_t CVPixelBufferBacking::getOpenGLInternalFormat(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], @"OpenGLInternalFormat", 0);
}

uint64_t CVPixelBufferBacking::isOpenGLTextureCacheCompatible(CVPixelBufferBacking *this)
{
  return 0;
}

uint64_t CVPixelBufferBacking::getHorizontalSubsampling(const void **this)
{
  return CVDictionaryGetIntValueWithDefault(this[135], @"HorizontalSubsampling", 1);
}

BOOL CVPixelBufferBacking::isOpenGLESCompatibleFormat(CFDictionaryRef *this)
{
  return CFDictionaryGetValue(this[135], @"OpenGLESCompatibility") == (const void *)*MEMORY[0x1E4F1CFD0];
}

CVOpenGLESTextureBacking **CVPixelBufferBacking::createGLESTextureBackingForContext(CVPixelBufferBacking *this, const __CFAllocator *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  if (CVPixelBufferOpenGLESTextureBacking::isPixelBufferBackingSupported(this, a3, a3))
  {
    CFDataRef result = CVPixelBufferOpenGLESTextureBacking::alloc(a2, v12);
    if (result)
    {
      uint64_t v14 = (uint64_t)result;
      CFDataRef result = (CVOpenGLESTextureBacking **)(*(uint64_t (**)(CVOpenGLESTextureBacking *, CVPixelBufferBacking *, CVOpenGLESContext *, const __CFDictionary *, CVImageBuffer *, int *))(*(void *)result[2] + 376))(result[2], this, a3, a4, a5, a6);
      if (result) {
        return *(CVOpenGLESTextureBacking ***)(v14 + 16);
      }
    }
  }
  else
  {
    CFDataRef result = 0;
    *a6 = -6683;
  }
  return result;
}

BOOL CVPixelBufferBacking::hasIOSurfaceInNativeGLESPixelFormat(CVPixelBufferBacking *this)
{
  return *((void *)this + 57)
      && CFDictionaryGetValue(*((CFDictionaryRef *)this + 135), @"IOSurfaceOpenGLESTextureCompatibility") == (const void *)*MEMORY[0x1E4F1CFD0];
}

uint64_t CVPixelBufferBacking::provideImageData(CVPixelBufferBacking *this, char *a2, size_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  (*(void (**)(CVPixelBufferBacking *, void))(*(void *)this + 416))(this, 0);
  size_t v13 = *((void *)this + 126);
  if (v13 == a3 && (unint64_t)(a7 + a4) <= *((void *)this + 23))
  {
    uint64_t v16 = (*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(void *)this + 320))(this, 1);
    memcpy(a2, (const void *)(a4 + a5 * a3 + v16), a7 * a3);
  }
  else
  {
    if (v13 >= a3) {
      size_t v14 = a3;
    }
    else {
      size_t v14 = *((void *)this + 126);
    }
    for (; a7; --a7)
    {
      uint64_t v15 = (*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(void *)this + 320))(this, 1);
      memcpy(a2, (const void *)(v15 + a4 + *((void *)this + 126) * a5), v14);
      a2 += a3;
      ++a5;
    }
  }
  (*(void (**)(CVPixelBufferBacking *, void))(*(void *)this + 424))(this, 0);
  return 1;
}

void *CVPixelBufferBacking::createCVBuffer(CVPixelBufferBacking *this, const __CFAllocator *a2)
{
  if (!a2) {
    return 0;
  }
  CFDataRef result = CVPixelBuffer::alloc(a2, a2);
  if (result)
  {
    uint64_t v4 = result;
    if ((*(uint64_t (**)(void, CVPixelBufferBacking *))(*(void *)result[2] + 248))(result[2], this)) {
      return v4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CVPixelBufferBacking::hasIOSurfaceWiringAssertionBeenCreated(CVPixelBufferBacking *this)
{
  if (*((void *)this + 57) && (*((unsigned char *)this + 488) & 4) != 0) {
    return 1;
  }
  else {
    return CVBufferBacking::hasIOSurfaceWiringAssertionBeenCreated(this);
  }
}

void CVPixelBufferBacking::prefetchNonIOSurfacePages(CVPixelBufferBacking *this)
{
  if (sCVSetUpPageSizeOnce != -1) {
    dispatch_once_f(&sCVSetUpPageSizeOnce, 0, (dispatch_function_t)cvSetUpPageSizeOnce);
  }
  if (sPageSize
    && !(*(unsigned int (**)(CVPixelBufferBacking *, void))(*(void *)this + 416))(this, 0))
  {
    uint64_t v2 = (*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 304))(this);
    unint64_t v3 = sPageSize;
    unint64_t v4 = v2 - 1 + sPageSize;
    BOOL v5 = __CFADD__(v2 - 1, sPageSize);
    uint64_t v6 = (*(uint64_t (**)(CVPixelBufferBacking *, uint64_t))(*(void *)this + 320))(this, 1);
    if (!v5)
    {
      uint64_t v7 = sPageSize;
      CFArrayRef v8 = (unsigned char *)v6;
      unint64_t v9 = v4 / v3;
      do
      {
        *CFArrayRef v8 = 0;
        v8 += v7;
        --v9;
      }
      while (v9);
    }
    *(unsigned char *)((*(uint64_t (**)(CVPixelBufferBacking *))(*(void *)this + 304))(this) + v6 - 1) = 0;
    CFArrayRef v10 = *(void (**)(CVPixelBufferBacking *, void))(*(void *)this + 424);
    v10(this, 0);
  }
}

uint64_t cvSetUpPageSizeOnce(void *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  *(void *)unint64_t v4 = 0x700000006;
  unsigned int v3 = 0;
  size_t v2 = 8;
  uint64_t result = sysctl(v4, 2u, &v3, &v2, 0, 0);
  sPageSize = v3;
  return result;
}

void CVPixelBufferBacking::prefetchPages(CVPixelBufferBacking *this)
{
  if (*((void *)this + 57)) {
    pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 57), (os_unfair_lock_t)this + 119, (uint64_t *)this + 60, (int *)this + 122, 1);
  }
  else {
    CVPixelBufferBacking::prefetchNonIOSurfacePages(this);
  }
}

CFStringRef classCopyFormatDescription_CVPixelBufferBacking(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVPixelBufferBackingRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVPixelBufferBacking(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

CFStringRef copyBackingSummaryString(uint64_t a1, uint64_t a2, unsigned int a3, char a4, char a5, const __CFString *a6)
{
  char v20 = 0;
  if (a3 == 32)
  {
    unsigned int v11 = 1111970369;
  }
  else
  {
    if (a3 <= 0x63)
    {
      snprintf(__str, 5uLL, "%d", a3);
      goto LABEL_7;
    }
    unsigned int v11 = bswap32(a3);
  }
  *(_DWORD *)__str = v11;
LABEL_7:
  CFAllocatorRef v12 = "[C]";
  if ((a4 & 2) == 0) {
    CFAllocatorRef v12 = "";
  }
  if ((a4 & 4) != 0) {
    size_t v13 = "[C:Cached]";
  }
  else {
    size_t v13 = v12;
  }
  if ((a5 & 2) != 0) {
    size_t v14 = "[W]";
  }
  else {
    size_t v14 = "";
  }
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a6)
  {
    CFStringRef v16 = CFStringCreateWithFormat(v15, 0, @":%@", a6);
    CFStringRef v17 = CFStringCreateWithFormat(v15, 0, @"%dx%dx%s%s%s%@", a1, a2, __str, v13, v14, v16);
    if (!v16) {
      return v17;
    }
  }
  else
  {
    CFStringRef v16 = &stru_1EFA19840;
    CFStringRef v17 = CFStringCreateWithFormat(v15, 0, @"%dx%dx%s%s%s%@", a1, a2, __str, v13, v14, &stru_1EFA19840);
  }
  CFRelease(v16);
  return v17;
}

void printPixelBufferBackingSummaryBag(const __CFBag *a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  CFBagRef context = a1;
  CFMutableStringRef theString = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v6 = 0;
  char v7 = 1;
  CFStringAppend(theString, @"CoreVideo: ");
  CFBagApplyFunction(a1, (CFBagApplierFunction)appendCountedStringToSummary, &context);
  if (v7) {
    CFStringAppend(theString, @" [no backings] ");
  }
  CFStringAppendFormat(theString, 0, @" %1.1f MiB", (double)a2 * 0.000000953674316);
  CFStringGetCString(theString, buffer, 2000, 0x600u);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    unint64_t v9 = buffer;
    _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
  CFRelease(theString);
}

void appendCountedStringToSummary(const void *a1, void *a2)
{
  if ((const void *)a2[2] != a1)
  {
    uint64_t v4 = MEMORY[0x1A626DF20](*a2, a1);
    if (*((unsigned char *)a2 + 24)) {
      CFIndex v5 = "";
    }
    else {
      CFIndex v5 = ", ";
    }
    CFStringAppendFormat((CFMutableStringRef)a2[1], 0, @"%s%dx%@", v5, v4, a1);
    *((unsigned char *)a2 + CVBitOrAtomic(1, this + 24) = 0;
    a2[2] = a1;
  }
}

void CVPixelBufferMetalTextureBacking::CVPixelBufferMetalTextureBacking(CVPixelBufferMetalTextureBacking *this, const void *a2)
{
  CVMetalTextureBacking::CVMetalTextureBacking(this, a2);
  *size_t v2 = &unk_1EFA177E0;
}

uint64_t CVPixelBufferMetalTextureBacking::finalize(CVPixelBufferMetalTextureBacking *this)
{
  uint64_t v2 = *((void *)this + 21);
  if (v2 && !(*(uint64_t (**)(uint64_t))(*(void *)v2 + 152))(v2)) {
    (*(void (**)(void, void))(**((void **)this + 21) + 424))(*((void *)this + 21), 0);
  }
  unsigned int v3 = (const void *)*((void *)this + 45);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 29);
  if (v4) {
    CFRelease(v4);
  }

  return CVMetalTextureBacking::finalize(this);
}

uint64_t CVMetalBufferCacheGetTypeID()
{
  if (CVMetalBufferCacheGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalBufferCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBufferCache);
  }
  return kCVMetalBufferCacheID;
}

uint64_t classInitialize_CVMetalBufferCache(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVMetalBufferCacheuint64_t ID = result;
  return result;
}

CVBufferPool **CVMetalBufferCache::alloc(CVMetalBufferCache *this, const __CFAllocator *a2)
{
  if (_cvUseTrackingAllocator) {
    this = (CVMetalBufferCache *)_cvTrackingGetCFAllocator(@"CVMetalBufferCache");
  }
  if (CVMetalBufferCacheGetTypeID::once != -1) {
    dispatch_once_f(&CVMetalBufferCacheGetTypeID::once, 0, (dispatch_function_t)classInitialize_CVMetalBufferCache);
  }
  unsigned int v3 = (CVBufferPool **)CVObject::alloc((CVObject *)kCVMetalBufferCacheID, (unint64_t)this, (const __CFAllocator *)0x18, 0x30uLL);
  uint64_t v4 = v3;
  if (v3)
  {
    CVBufferPool::CVBufferPool(v3[2], v3);
    void *v5 = &unk_1EFA16E20;
    v5[4] = 0;
  }
  return v4;
}

void CVMetalBufferCache::CVMetalBufferCache(CVMetalBufferCache *this, const void *a2)
{
  CVBufferPool::CVBufferPool(this, a2);
  *uint64_t v2 = &unk_1EFA16E20;
  v2[4] = 0;
}

uint64_t CVMetalBufferCache::finalize(CVMetalBufferCache *this)
{
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2)
  {
    CFRetain(v2);
    *((void *)this + 4) = 0;
  }

  return CVBufferPool::finalize(this);
}

CFTypeRef *CVMetalBufferCache::initWithDevice(CFTypeRef *this, void *a2, const __CFDictionary *a3)
{
  CFIndex v5 = this;
  if (!CVBufferPool::init(this)) {
    return 0;
  }
  CFTypeID Value = (CFTypeID)CFRetain(a2);
  v5[4] = (CFTypeRef)Value;
  double valuePtr = 1.0;
  double v9 = 1000000000.0;
  if (a3)
  {
    CFTypeID Value = (CFTypeID)CFDictionaryGetValue(a3, @"MaximumMetalBufferAge");
    if (Value)
    {
      CFNumberRef v10 = (const __CFNumber *)Value;
      CFTypeID v11 = CFGetTypeID((CFTypeRef)Value);
      CFTypeID Value = CFNumberGetTypeID();
      if (v11 == Value)
      {
        CFTypeID Value = CFNumberGetValue(v10, kCFNumberDoubleType, &valuePtr);
        HIDWORD(v8) = 1104006501;
        unint64_t v7 = (unint64_t)(valuePtr * 1000000000.0);
        double v9 = (double)v7;
      }
    }
  }
  if (!CVHostTimeBase::sIsInited) {
    *(double *)&unint64_t v7 = CVHostTimeBase::Initialize((CVHostTimeBase *)Value);
  }
  LODWORD(v7) = CVHostTimeBase::sToNanosNumerator;
  LODWORD(v8) = CVHostTimeBase::sToNanosDenominator;
  v5[5] = (CFTypeRef)(v9 / (double)v7 * (double)v8);
  return v5;
}

uint64_t CVMetalBufferCache::flushBuffers(uint64_t this, char a2)
{
  uint64_t v2 = this;
  if ((a2 & 1) != 0 || *(void *)(this + 40))
  {
    uint64_t v3 = CVGetCurrentHostTime();
    pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
    CFArrayRef v4 = *(const __CFArray **)(*(void *)(v2 + 16) + 224);
    CFIndex Count = CFArrayGetCount(v4);
    if (Count >= 1)
    {
      CFIndex v6 = Count;
      for (CFIndex i = 0; i < v6; ++i)
      {
        CFDictionaryRef ValueAtIndex = (void **)CFArrayGetValueAtIndex(v4, i);
        if (((*(uint64_t (**)(void *))(*ValueAtIndex[2] + 120))(ValueAtIndex[2]) & 1) != 0
          || *(void *)(v2 + 40) + ValueAtIndex[2][13] < v3)
        {
          CFArrayRemoveValueAtIndex(v4, i--);
          --v6;
        }
      }
    }
    double v9 = (pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex;
    return pthread_mutex_unlock(v9);
  }
  return this;
}

CVBuffer **CVMetalBufferCache::createBufferFromImage(CVBufferBacking **this, const __CFAllocator *a2, CVImageBuffer *a3, int *a4)
{
  unint64_t v8 = (CVMetalBufferBacking *)(*(uint64_t (**)(CVImageBuffer *))(*(void *)a3 + 160))(a3);
  if (!v8)
  {
    CFAllocatorRef v15 = 0;
    int v17 = -6661;
    goto LABEL_12;
  }
  CFNumberRef v10 = v8;
  if (!CVMetalBufferBacking::isBufferBackingSupported(v8, this[4], v9))
  {
    CFAllocatorRef v15 = 0;
    int v17 = -6684;
    goto LABEL_12;
  }
  uint64_t v11 = (*((uint64_t (**)(CVBufferBacking **, const __CFAllocator *, CVImageBuffer *, CVMetalBufferBacking *, int *))*this
         + 15))(this, a2, a3, v10, a4);
  if (v11)
  {
    uint64_t v13 = v11;
    size_t v14 = CVMetalBuffer::alloc(a2, v12);
    CFAllocatorRef v15 = v14;
    if (v14)
    {
      if ((*(uint64_t (**)(CVBuffer *, uint64_t))(*(void *)v14[2] + 160))(v14[2], v13))
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 40))(v13);
        CFStringRef v16 = (__CVBuffer *)(*(uint64_t (**)(CVImageBuffer *))(*(void *)a3 + 24))(a3);
        CVBufferPropagateAttachments(v16, (CVBufferRef)v15);
        int v17 = 0;
LABEL_12:
        *a4 = v17;
        return v15;
      }
      (*(void (**)(CVBuffer *))(*(void *)v15[2] + 40))(v15[2]);
      CFAllocatorRef v15 = 0;
    }
    int v17 = -6662;
    goto LABEL_12;
  }
  return 0;
}

void *CVMetalBufferCache::createBufferBackingFromImageBacking(CVMetalBufferCache *this, const __CFAllocator *a2, CVImageBuffer *a3, CVImageBacking *a4, int *a5)
{
  uint64_t result = (void *)(*(uint64_t (**)(CVImageBacking *))(*(void *)a4 + 152))(a4);
  if (!result)
  {
    *a5 = -6661;
    return result;
  }
  uint64_t v11 = (uint64_t)result;
  pthread_mutex_lock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  CFArrayRef v12 = *(const __CFArray **)(*((void *)this + 2) + 224);
  CFIndex Count = CFArrayGetCount(v12);
  if (Count < 1)
  {
LABEL_6:
    CFArrayRef v17 = *(const __CFArray **)(*((void *)this + 2) + 232);
    CFIndex v18 = CFArrayGetCount(v17);
    if (v18 < 1)
    {
LABEL_10:
      unsigned int v22 = CVMetalBufferBacking::alloc(a2, v19);
      if (!v22)
      {
        *a5 = -6662;
        pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
        return 0;
      }
      CFDictionaryRef ValueAtIndex = (void **)v22;
      if ((*(uint64_t (**)(CVBufferBacking *, CVImageBuffer *, CVImageBacking *, void))(*(void *)v22[2] + 176))(v22[2], a3, a4, *((void *)this + 4)))
      {
        (*(void (**)(void *, void))(*ValueAtIndex[2] + 96))(ValueAtIndex[2], *((void *)this + 2));
      }
      else
      {
        *a5 = -6662;
      }
    }
    else
    {
      CFIndex v20 = v18;
      CFIndex v21 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = (void **)CFArrayGetValueAtIndex(v17, v21);
        if ((*(uint64_t (**)(void *))(*ValueAtIndex[2] + 200))(ValueAtIndex[2]) == v11) {
          break;
        }
        if (v20 == ++v21) {
          goto LABEL_10;
        }
      }
      (*(void (**)(void *))(*ValueAtIndex[2] + 32))(ValueAtIndex[2]);
    }
  }
  else
  {
    CFIndex v14 = Count;
    CFIndex v15 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (void **)CFArrayGetValueAtIndex(v12, v15);
      if ((*(uint64_t (**)(void *))(*ValueAtIndex[2] + 200))(ValueAtIndex[2]) == v11) {
        break;
      }
      if (v14 == ++v15) {
        goto LABEL_6;
      }
    }
    (*(void (**)(void *))(*ValueAtIndex[2] + 32))(ValueAtIndex[2]);
    CFArrayRemoveValueAtIndex(v12, v15);
  }
  pthread_mutex_unlock((pthread_mutex_t *)CVLockingBunchPair::_bufferPoolMutex);
  return ValueAtIndex[2];
}

CFStringRef CVMetalBufferCache::copyDebugDescription(CVMetalBufferCache *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVMetalBufferCache *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVMetalBufferCache *))(*(void *)this + 24))(this);
  uint64_t v6 = *((void *)this + 5);
  uint64_t v7 = *((void *)this + 2);
  CFArrayRef v8 = *(const __CFArray **)(v7 + 232);
  if (v8)
  {
    CFIndex Count = CFArrayGetCount(v8);
    uint64_t v7 = *((void *)this + 2);
  }
  else
  {
    CFIndex Count = -1;
  }
  CFArrayRef v10 = *(const __CFArray **)(v7 + 224);
  if (v10) {
    CFIndex v11 = CFArrayGetCount(v10);
  }
  else {
    CFIndex v11 = -1;
  }
  CFStringRef v12 = CFStringCreateWithFormat(0, 0, @"<%@Ref %p maxAge=%llu inUse=%ld free=%ld>", v4, v5, v6, Count, v11);
  CFRelease(v4);
  return v12;
}

uint64_t classFinalize_CVMetalBufferCache(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 16))();
}

CFStringRef classCopyFormatDescription_CVMetalBufferCache(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVMetalBufferCacheRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVMetalBufferCache(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

BOOL CVBuffer::hasAttachment(CFDictionaryRef *this, const __CFString *a2)
{
  uint64_t v4 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  char v5 = 0;
  uint64_t v6 = 0;
  do
  {
    char v7 = v5;
    CFTypeID Value = CFDictionaryGetValue(this[v6 + 10], a2);
    if (Value) {
      break;
    }
    char v5 = 1;
    uint64_t v6 = 1;
  }
  while ((v7 & 1) == 0);
  BOOL v9 = Value != 0;
  pthread_mutex_unlock(v4);
  return v9;
}

uint64_t CVBuffer::removeAllAttachments(CFMutableDictionaryRef *this)
{
  uint64_t v2 = (pthread_mutex_t *)(this + 2);
  pthread_mutex_lock((pthread_mutex_t *)(this + 2));
  CFDictionaryRemoveAllValues(this[10]);
  CFDictionaryRemoveAllValues(this[11]);

  return pthread_mutex_unlock(v2);
}

uint64_t CVBuffer::getBacking(CVBuffer *this)
{
  return 0;
}

uint64_t CVBuffer::dumpToQTES(CVBuffer *this, char *a2)
{
  return 0xFFFFFFFFLL;
}

uint64_t CVImageBuffer::getImageBacking(CVImageBuffer *this)
{
  return 0;
}

uint64_t CVImageBuffer::setColorSpace(CVImageBuffer *this, CGColorSpace *a2)
{
  return (*(uint64_t (**)(CVImageBuffer *, __CFString *, CGColorSpace *, uint64_t))(*(void *)this + 104))(this, @"CGColorSpace", a2, 1);
}

const void *CVImageBuffer::getColorSpace(CVImageBuffer *this)
{
  CFAllocatorRef v1 = (const void *)(*(uint64_t (**)(CVImageBuffer *, __CFString *, void))(*(void *)this + 96))(this, @"CGColorSpace", 0);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  CFTypeID v3 = CFGetTypeID(v1);
  if (v3 != CGColorSpaceGetTypeID()) {
    return 0;
  }
  return v2;
}

uint64_t CVImageBuffer::setDisplayDimensions(CVImageBuffer *this, unint64_t a2, unint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  double v8 = (double)a3;
  double valuePtr = (double)a2;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  CFTypeRef cf = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
  keys[0] = @"Width";
  keys[1] = @"Height";
  CFDictionaryRef v5 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  uint64_t v6 = (*(uint64_t (**)(CVImageBuffer *, __CFString *, CFDictionaryRef, uint64_t))(*(void *)this + 104))(this, @"CVDisplayDimensions", v5, 1);
  CFRelease(v5);
  CFRelease(values);
  CFRelease(cf);
  return v6;
}

double CVImageBuffer::getDisplaySize(CVImageBuffer *this)
{
  CFDictionaryRef v2 = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, __CFString *, void))(*(void *)this + 96))(this, @"CVDisplayDimensions", 0);
  if (v2 && (v3 = v2, CFTypeID v4 = CFGetTypeID(v2), v4 == CFDictionaryGetTypeID()))
  {
    double v12 = 0.0;
    double v13 = 0.0;
    if (cvGetDoubleFromDictionary(v3, @"Width", &v13))
    {
      double v5 = 0.0;
      if (cvGetDoubleFromDictionary(v3, @"Height", &v12)) {
        return (float)v13;
      }
    }
    else
    {
      return 0.0;
    }
  }
  else
  {
    double v5 = (*(double (**)(CVImageBuffer *))(*(void *)this + 176))(this);
    if ((*(unsigned int (**)(CVImageBuffer *))(*(void *)this + 200))(this))
    {
      (*(void (**)(CVImageBuffer *))(*(void *)this + 192))(this);
      double v5 = v7;
    }
    CFDictionaryRef v8 = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, __CFString *, void))(*(void *)this
                                                                                                  + 96))(this, @"CVPixelAspectRatio", 0);
    if (v8)
    {
      CFDictionaryRef v9 = v8;
      CFTypeID v10 = CFGetTypeID(v8);
      if (v10 == CFDictionaryGetTypeID())
      {
        double v12 = 1.0;
        double v13 = 1.0;
        if (cvGetDoubleFromDictionary(v9, @"VerticalSpacing", &v13))
        {
          if (cvGetDoubleFromDictionary(v9, @"HorizontalSpacing", &v12)
            && v13 > 0.0
            && v12 > 0.0
            && v12 != v13)
          {
            return v5 * (v12 / v13);
          }
        }
      }
    }
  }
  return v5;
}

uint64_t CVImageBuffer::setCleanAperture(CVImageBuffer *this, double a2, double a3, double a4, double a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double v12 = a3;
  double valuePtr = a2;
  double v10 = a5;
  double v11 = a4;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  CFNumberRef v16 = CFNumberCreate(v6, kCFNumberDoubleType, &v12);
  CFNumberRef v17 = CFNumberCreate(v6, kCFNumberDoubleType, &v11);
  CFNumberRef v18 = CFNumberCreate(v6, kCFNumberDoubleType, &v10);
  keys[0] = @"Width";
  keys[1] = @"Height";
  keys[2] = @"HorizontalOffset";
  keys[3] = @"VerticalOffset";
  CFDictionaryRef v7 = CFDictionaryCreate(v6, (const void **)keys, (const void **)&values, 4, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  uint64_t v8 = (*(uint64_t (**)(CVImageBuffer *, __CFString *, CFDictionaryRef, uint64_t))(*(void *)this + 104))(this, @"CVCleanAperture", v7, 1);
  CFRelease(v7);
  CFRelease(values);
  CFRelease(v16);
  CFRelease(v17);
  CFRelease(v18);
  return v8;
}

BOOL CVImageBuffer::hasCleanRect(CVImageBuffer *this)
{
  CFAllocatorRef v1 = (const void *)(*(uint64_t (**)(CVImageBuffer *, __CFString *, void))(*(void *)this + 96))(this, @"CVCleanAperture", 0);
  BOOL result = 0;
  if (v1)
  {
    CFTypeID v2 = CFGetTypeID(v1);
    if (v2 == CFDictionaryGetTypeID()) {
      return 1;
    }
  }
  return result;
}

const __CFDictionary *CVImageBuffer::getCleanRect(CVImageBuffer *this)
{
  uint64_t v2 = (*(uint64_t (**)(CVImageBuffer *))(*(void *)this + 160))(this);
  (*(void (**)(uint64_t))(*(void *)v2 + 176))(v2);
  CFDictionaryRef v3 = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, __CFString *, void))(*(void *)this + 96))(this, @"CVCleanAperture", 0);
  if (!v3
    || (v4 = v3, CFTypeID v5 = CFGetTypeID(v3), v5 != CFDictionaryGetTypeID())
    || (v11 = 0.0, v12 = 0.0, uint64_t v9 = 0, v10 = 0.0, !cvGetDoubleFromDictionary(v4, @"Width", &v12))
    || !cvGetDoubleFromDictionary(v4, @"Height", &v11)
    || !cvGetDoubleFromDictionary(v4, @"HorizontalOffset", &v10)
    || (CFDictionaryRef result = (const __CFDictionary *)cvGetDoubleFromDictionary(v4, @"VerticalOffset", (double *)&v9),
        !result))
  {
    CFDictionaryRef result = (const __CFDictionary *)(*(uint64_t (**)(CVImageBuffer *, __CFString *, void))(*(void *)this + 96))(this, @"CleanAperture", 0);
    if (result)
    {
      CFDictionaryRef v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetTypeID();
      if ((const __CFDictionary *)v8 == result)
      {
        double v11 = 0.0;
        double v12 = 0.0;
        uint64_t v9 = 0;
        double v10 = 0.0;
        CFDictionaryRef result = (const __CFDictionary *)cvGetDoubleFromDictionary(v7, @"Width", &v12);
        if (result)
        {
          CFDictionaryRef result = (const __CFDictionary *)cvGetDoubleFromDictionary(v7, @"Height", &v11);
          if (result)
          {
            CFDictionaryRef result = (const __CFDictionary *)cvGetDoubleFromDictionary(v7, @"OffsetX", &v10);
            if (result) {
              return (const __CFDictionary *)cvGetDoubleFromDictionary(v7, @"OffsetY", (double *)&v9);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t CVImageBuffer::setPixelAspectRatio(CVImageBuffer *this, unint64_t a2, unint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  double v8 = (double)a3;
  double valuePtr = (double)a2;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  CFTypeRef cf = CFNumberCreate(v4, kCFNumberDoubleType, &v8);
  keys[0] = @"HorizontalSpacing";
  keys[1] = @"VerticalSpacing";
  CFDictionaryRef v5 = CFDictionaryCreate(v4, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
  uint64_t v6 = (*(uint64_t (**)(CVImageBuffer *, __CFString *, CFDictionaryRef, uint64_t))(*(void *)this + 104))(this, @"CVPixelAspectRatio", v5, 1);
  CFRelease(v5);
  CFRelease(values);
  CFRelease(cf);
  return v6;
}

uint64_t CVImageBuffer::setFieldCount(CVImageBuffer *this, int a2)
{
  int valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  uint64_t v4 = (*(uint64_t (**)(CVImageBuffer *, __CFString *, CFNumberRef, uint64_t))(*(void *)this + 104))(this, @"CVFieldCount", v3, 1);
  CFRelease(v3);
  return v4;
}

void CVDataBufferBacking::CVDataBufferBacking(CVDataBufferBacking *this, const void *a2)
{
  CVBufferBacking::CVBufferBacking(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA16EB0;
  *(void *)(v2 + 144) = 0;
  *(void *)(v2 + 16pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  *(_DWORD *)(v2 + 168) = 0;
}

uint64_t CVDataBufferBacking::finalize(CVDataBufferBacking *this)
{
  uint64_t v2 = (const void *)*((void *)this + 17);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 17) = 0;
  CFNumberRef v3 = (const void *)*((void *)this + 22);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  uint64_t v4 = (const void *)*((void *)this + 20);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 2pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;

  return CVBufferBacking::finalize(this);
}

void CVDataBufferBacking::releaseUsage(CVDataBufferBacking *this)
{
  uint64_t v2 = (__IOSurface *)*((void *)this + 20);
  if (v2) {
    IOSurfaceDecrementUseCount(v2);
  }

  CVBufferBacking::releaseUsage((atomic_uint *)this);
}

uint64_t CVDataBufferBacking::okToReuse(CVDataBufferBacking *this)
{
  uint64_t v2 = (__IOSurface *)*((void *)this + 20);
  if (v2 && IOSurfaceIsInUse(v2)) {
    return 0;
  }

  return CVBufferBacking::okToReuse(this);
}

uint64_t CVDataBufferBacking::resetAgeForRemoteUsage(CVDataBufferBacking *this)
{
  uint64_t result = *((void *)this + 20);
  if (result)
  {
    if (*((unsigned char *)this + 113))
    {
LABEL_5:
      *((void *)this + 13) = -1;
      return result;
    }
    uint64_t result = IOSurfaceIsInUse((IOSurfaceRef)result);
    if (result)
    {
      *((unsigned char *)this + 112) = 1;
      goto LABEL_5;
    }
    if (*((unsigned char *)this + 112))
    {
      uint64_t result = CVGetCurrentHostTime();
      *((void *)this + 13) = result;
      *((unsigned char *)this + 112) = 0;
    }
  }
  return result;
}

void CVDataBufferBacking::prefetchPages(CVDataBufferBacking *this)
{
}

CVBuffer **CVDataBufferBacking::createCVBuffer(CVDataBufferBacking *this, const __CFAllocator *a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = CVDataBuffer::alloc(a2, a2);
  if (result)
  {
    uint64_t v4 = result;
    if ((*(uint64_t (**)(CVBuffer *, CVDataBufferBacking *))(*(void *)result[2] + 160))(result[2], this)) {
      return v4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t CVDataBufferBacking::getDataBufferOptions(CVDataBufferBacking *this)
{
  return *((void *)this + 17);
}

void CVPixelBuffer::CVPixelBuffer(CVPixelBuffer *this, const void *a2)
{
  CVImageBuffer::CVImageBuffer(this, a2);
  *CFNumberRef v3 = &unk_1EFA165B8;
  CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(0);
  *((unsigned char *)this + 104) = 1;
  *(void *)((char *)this + 108) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 12) = 0;
}

uint64_t CVDEBUGPixelBufferGlobalCacheGetColorSpace()
{
  return sCVPixelBufferGlobalCache_ColorSpace;
}

uint64_t CVDEBUGPixelBufferGlobalCacheGetPropertyList()
{
  return sCVPixelBufferGlobalCache_CFPropertyList;
}

uint64_t CVPixelBuffer::getBacking(CVPixelBuffer *this)
{
  return *((void *)this + 15);
}

void CVPixelBuffer::setIOSurfaceAttachmentForCVBufferKey(CVPixelBuffer *this, const __CFString *a2, CGColorSpace *a3)
{
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
  if (v5)
  {
    uint64_t v6 = (__IOSurface *)v5;
    CFStringRef v7 = (const __CFString *)CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a2);
    if (v7)
    {
      CFStringRef v8 = v7;
      if ((const __CFString *)*MEMORY[0x1E4F2F068] == v7)
      {
        CFTypeID TypeID = CGColorSpaceGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          CFTypeRef v10 = CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace(a3);
          if (v10)
          {
            double v11 = v10;
            IOSurfaceSetValue(v6, v8, v10);
            CFRelease(v11);
          }
        }
      }
      else
      {
        IOSurfaceSetValue(v6, v7, a3);
      }
    }
  }
}

void CVPixelBuffer::addIOSurfaceAttachmentToDictionary(CVPixelBuffer *this, __CFDictionary *a2, const __CFString *a3, CGColorSpace *a4)
{
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
  if (a2)
  {
    if (v7)
    {
      CFStringRef v8 = CVGetIOSurfacePropertyKeyForCVBufferAttachmentKey(a3);
      if (v8)
      {
        uint64_t v9 = v8;
        if ((const void *)*MEMORY[0x1E4F2F068] == v8)
        {
          CFTypeID TypeID = CGColorSpaceGetTypeID();
          if (TypeID == CFGetTypeID(a4))
          {
            CFTypeRef v11 = CVPixelBufferGlobalCacheCreateOrCopyPropertyListFromColorSpace(a4);
            if (v11)
            {
              double v12 = v11;
              CFDictionaryAddValue(a2, v9, v11);
              CFRelease(v12);
            }
          }
        }
        else
        {
          CFDictionaryAddValue(a2, v8, a4);
        }
      }
    }
  }
}

void CVPixelBuffer::pushAttachmentsToIOSurface(CVPixelBuffer *this)
{
  int v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
  if (v2)
  {
    CFNumberRef v3 = (__IOSurface *)v2;
    CFDictionaryRef v4 = (const __CFDictionary *)(*(uint64_t (**)(CVPixelBuffer *, uint64_t))(*(void *)this + 128))(this, 1);
    int v5 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
    if (v5 >= 1)
    {
      int v6 = v5;
      unsigned int v7 = 0;
      CFDictionaryRef Mutable = 0;
      uint64_t v9 = 0;
      CFTypeRef v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
      CFTypeRef v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
      do
      {
        uint64_t v18 = 0;
        double v12 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
        CFTypeID Value = (__CFString *)CFDictionaryGetValue(v4, v12);
        if (Value)
        {
          CFIndex v14 = Value;
          CFIndex v15 = (const void *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
          int v16 = convertAttachmentToIOSurfaceStruct(v15, v14, (uint64_t)v19, &v18);
          v9 |= v18;
          if (!v16)
          {
            if (!Mutable) {
              CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, v10, v11);
            }
            CFStringRef v17 = (const __CFString *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
            CVPixelBuffer::addIOSurfaceAttachmentToDictionary(this, Mutable, v17, (CGColorSpace *)v14);
          }
        }
        ++v7;
      }
      while (v6 != v7);
      if (v9) {
        IOSurfaceSetBulkAttachments2();
      }
      if (Mutable)
      {
        IOSurfaceSetValues(v3, Mutable);
        CFRelease(Mutable);
      }
    }
  }
}

void CVPixelBuffer::pullAttachmentsFromIOSurface(CVPixelBuffer *this, const __CFDictionary *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15)))
  {
    int v17 = 0;
    memset(v16, 0, sizeof(v16));
    context[1] = (CFTypeRef)116;
    CFTypeRef cf = 0;
    context[0] = 0;
    if (IOSurfaceGetBulkAttachments())
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v19 = "IOSurfaceGetBulkAttachments Error: mismatch in struct size in CoreVideo vs IOSurface.";
        _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
    }
    else
    {
      createAttachmentsDictionaryFromIOSurfaceStruct((uint64_t)v16, (__CFDictionary **)&cf);
      if (cf)
      {
        CVBuffer::setAttachments(this, (const __CFDictionary *)cf, 1u);
        CFRelease(cf);
      }
    }
    if (a2)
    {
      CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)addMissingValuesToDictionary, context);
      CFDictionaryRef v4 = (const __CFDictionary *)context[0];
      if (context[0])
      {
        int v5 = CVGetNumberOfEntriesInCVBufferAttachmentKeyMappingTable();
        if (v5 >= 1)
        {
          int v6 = v5;
          unsigned int v7 = 0;
          uint64_t v8 = *MEMORY[0x1E4F2F068];
          do
          {
            uint64_t v9 = (const void *)CVGetIOSurfacePropertyKeyAtIndexInMappingTable(v7);
            CFTypeID Value = (CGColorSpace *)CFDictionaryGetValue(v4, v9);
            if (Value)
            {
              CGColorSpaceRef v11 = Value;
              if (v8 != CVGetIOSurfacePropertyKeyAtIndexInMappingTable(v7))
              {
                CGColorSpaceRef v12 = 0;
LABEL_15:
                CFStringRef v13 = (const __CFString *)CVGetCVBufferAttachmentKeyAtIndexInMappingTable(v7);
                CVBuffer::setAttachment(this, v13, v11, 1u);
                if (v12) {
                  CFRelease(v12);
                }
                goto LABEL_17;
              }
              CGColorSpaceRef v11 = CGColorSpaceCreateWithPropertyList(v11);
              CGColorSpaceRef v12 = v11;
              if (v11) {
                goto LABEL_15;
              }
            }
LABEL_17:
            ++v7;
          }
          while (v6 != v7);
        }
        if (context[0]) {
          CFRelease(context[0]);
        }
      }
    }
  }
}

void addMissingValuesToDictionary(const void *a1, const __CFString *a2, __CFDictionary **a3)
{
  uint64_t v9 = 0;
  int v8 = 0;
  memset(v7, 0, sizeof(v7));
  if (!convertAttachmentToIOSurfaceStruct(a1, a2, (uint64_t)v7, &v9))
  {
    CFDictionaryRef Mutable = *a3;
    if (!*a3)
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *a3 = Mutable;
    }
    CFDictionarySetValue(Mutable, a1, a2);
  }
}

CFStringRef CVPixelBuffer::copyDebugDescription(CVPixelBuffer *this)
{
  uint64_t v2 = (const void *)(*(uint64_t (**)(CVPixelBuffer *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 15) + 192))(*((void *)this + 15));
  *(_DWORD *)__str = 0;
  int v6 = _os_feature_enabled_impl();
  if (v5 > 0x28) {
    *(_DWORD *)__str = bswap32(v5);
  }
  else {
    snprintf(__str, 4uLL, "%i", v5);
  }
  CFStringRef PoolName = (__CFString *)CVBufferBacking::getPoolName(*((atomic_uint **)this + 15));
  int v8 = (__IOSurface *)(*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t ID = IOSurfaceGetID(v8);
    if (v6)
    {
LABEL_6:
      CGColorSpaceRef v11 = (const void *)(*(uint64_t (**)(CVPixelBuffer *, uint64_t))(*(void *)this + 72))(this, 1);
      CGColorSpaceRef v12 = v11;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t ID = 0;
    if (v6) {
      goto LABEL_6;
    }
  }
  CGColorSpaceRef v11 = 0;
  CGColorSpaceRef v12 = (const void *)*((void *)this + 11);
LABEL_9:
  if ((*(unsigned int (**)(void))(**((void **)this + 15) + 312))(*((void *)this + 15)))
  {
    CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 15) + 344))(*((void *)this + 15));
    if (Mutable)
    {
      uint64_t v15 = v14;
      uint64_t v43 = v12;
      uint64_t v16 = (*(uint64_t (**)(CVPixelBuffer *))(*(void *)this + 24))(this);
      uint64_t v17 = (*(uint64_t (**)(void))(**((void **)this + 15) + 272))(*((void *)this + 15));
      uint64_t v18 = (*(uint64_t (**)(void))(**((void **)this + 15) + 280))();
      uint64_t v19 = " poolName=";
      if (!PoolName) {
        uint64_t v19 = "";
      }
      uint64_t v20 = &stru_1EFA19840;
      if (PoolName) {
        uint64_t v20 = PoolName;
      }
      CFStringRef v21 = CFStringCreateWithFormat(0, 0, @"<%@ %p width=%ld height=%ld pixelFormat=%.4s iosurface=%p surfaceid=%d planes=%ld%s%@>", v4, v16, v17, v18, __str, v9, ID, v15, v19, v20);
      if (v21)
      {
        CFStringRef v22 = v21;
        CFArrayAppendValue(Mutable, v21);
        CFRelease(v22);
      }
      if (v15)
      {
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v24 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 352))(*((void *)this + 15), i);
          uint64_t v25 = (*(uint64_t (**)(void))(**((void **)this + 15) + 360))();
          uint64_t v26 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
          CFStringRef v27 = CFStringCreateWithFormat(0, 0, @"<Plane %ld width=%ld height=%ld bytesPerRow=%ld>", i, v24, v25, v26);
          if (v27)
          {
            CFStringRef v28 = v27;
            CFArrayAppendValue(Mutable, v27);
            CFRelease(v28);
          }
        }
      }
      uint64_t v29 = (*(uint64_t (**)(void))(**((void **)this + 15) + 256))(*((void *)this + 15));
      CFStringRef v30 = CFStringCreateWithFormat(0, 0, @"<attributes=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>", v29, v43, *((void *)this + 10));
      if (v30)
      {
        CFStringRef v31 = v30;
        CFArrayAppendValue(Mutable, v30);
        CFRelease(v31);
      }
      CFStringRef v32 = CFStringCreateByCombiningStrings(0, Mutable, @"\n");
      CFRelease(Mutable);
    }
    else
    {
      CFStringRef v32 = 0;
    }
  }
  else
  {
    uint64_t v44 = (*(uint64_t (**)(CVPixelBuffer *))(*(void *)this + 24))(this);
    uint64_t v42 = (*(uint64_t (**)(void))(**((void **)this + 15) + 272))(*((void *)this + 15));
    CFDataRef v33 = v11;
    uint64_t v34 = (*(uint64_t (**)(void))(**((void **)this + 15) + 280))();
    uint64_t v35 = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))();
    CFStringRef v36 = v4;
    if (PoolName) {
      IOSurfaceID v37 = " poolName=";
    }
    else {
      IOSurfaceID v37 = "";
    }
    if (!PoolName) {
      CFStringRef PoolName = &stru_1EFA19840;
    }
    uint64_t v38 = (*(uint64_t (**)(void))(**((void **)this + 15) + 256))();
    CFIndex v41 = v37;
    CFStringRef v4 = v36;
    uint64_t v40 = v34;
    CGColorSpaceRef v11 = v33;
    CFStringRef v32 = CFStringCreateWithFormat(0, 0, @"<%@ %p width=%ld height=%ld bytesPerRow=%ld pixelFormat=%.4s iosurface=%p%s%@ surfaceid=%d attributes=%@ propagatedAttachments=%@ nonPropagatedAttachments=%@>", v36, v44, v42, v40, v35, __str, v9, v41, PoolName, ID, v38, v12, *((void *)this + 10));
  }
  CFRelease(v4);
  if (v11) {
    CFRelease(v11);
  }
  return v32;
}

uint64_t setBulkAttachmentsOnIOSurface(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  if (a3 != 32) {
    return IOSurfaceSetBulkAttachments2();
  }
  uint64_t result = IOSurfaceGetYCbCrMatrix();
  if (!result)
  {
    if (*(unsigned char *)(a2 + 58)) {
      return IOSurfaceSetBulkAttachments2();
    }
  }
  return result;
}

uint64_t CVPixelBuffer::setDoNotAutomaticallyBumpUseCount(uint64_t this)
{
  *(unsigned char *)(this + 104) = 0;
  return this;
}

uint64_t CVPixelBuffer::incrementUseCountForCategory(CVPixelBuffer *this, unsigned int a2)
{
  BOOL v5 = 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
  if (result)
  {
    CVIncrementAtomicCounter((atomic_uint *)this + a2 + 27, &v5);
    if (v5)
    {
      IOSurfaceIncrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t CVPixelBuffer::decrementUseCountForCategory(CVPixelBuffer *this, unsigned int a2)
{
  BOOL v5 = 0;
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 15) + 152))(*((void *)this + 15));
  if (result)
  {
    CVDecrementAtomicCounter((atomic_uint *)this + a2 + 27, &v5);
    if (v5)
    {
      IOSurfaceDecrementUseCountForCategory();
      return 0;
    }
    else
    {
      return 4294960636;
    }
  }
  return result;
}

uint64_t CVPixelBuffer::dumpToQTES(CVPixelBuffer *this, char *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  signed int v4 = (*(uint64_t (**)(void))(**((void **)this + 15) + 192))(*((void *)this + 15));
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  (*(void (**)(void))(**((void **)this + 15) + 416))();
  int v5 = (*(uint64_t (**)(void))(**((void **)this + 15) + 312))();
  uint64_t v6 = **((void **)this + 15);
  if (!v5)
  {
    int v8 = 1;
    *(void *)&v14[0] = (*(uint64_t (**)(void))(v6 + 320))();
    v13[0] = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))();
    v17[0] = (*(uint64_t (**)(void))(**((void **)this + 15) + 272))();
    v16[0] = (*(uint64_t (**)(void))(**((void **)this + 15) + 280))();
LABEL_8:
    uint64_t v9 = dumpToQTESWithParams(a2, v4, v8, v17, v16, (uint64_t)v13, (uint64_t)v14, *((const __CFDictionary **)this + 11));
    goto LABEL_9;
  }
  int v7 = (*(uint64_t (**)(void))(v6 + 344))();
  int v8 = v7;
  if (v7 <= 5)
  {
    if (v7 >= 1)
    {
      uint64_t v10 = 0;
      uint64_t v11 = v7;
      do
      {
        *((void *)v14 + v1pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 15) + 368))(*((void *)this + 15), v10, 1);
        v13[v10] = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
        v17[v10] = (*(uint64_t (**)(void))(**((void **)this + 15) + 352))();
        v16[v10++] = (*(uint64_t (**)(void))(**((void **)this + 15) + 360))();
      }
      while (v11 != v10);
    }
    goto LABEL_8;
  }
  uint64_t v9 = 0;
LABEL_9:
  (*(void (**)(void, uint64_t))(**((void **)this + 15) + 424))(*((void *)this + 15), 1);
  return v9;
}

uint64_t CVPixelBuffer::drawColorBars(CVPixelBuffer *this)
{
  int v2 = (*(uint64_t (**)(void))(**((void **)this + 15) + 192))(*((void *)this + 15));
  unint64_t v3 = (*(uint64_t (**)(void))(**((void **)this + 15) + 272))();
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 15) + 280))();
  int v5 = (const void *)(*(uint64_t (**)(CVPixelBuffer *, __CFString *, void))(*(void *)this + 96))(this, @"CVImageBufferYCbCrMatrix", 0);
  uint64_t v6 = (const char *)flt_1A5885680;
  if (v2 > 2016686639)
  {
    if (v2 > 2019963441)
    {
      if (v2 > 2033463855)
      {
        if (v2 == 2037741171) {
          goto LABEL_44;
        }
        if (v2 == 2037741158) {
          goto LABEL_47;
        }
        int v7 = 2033463856;
        goto LABEL_43;
      }
      if (v2 != 2019963442 && v2 != 2019963956 && v2 != 2019964016) {
        goto LABEL_61;
      }
LABEL_28:
      if (v5 && CFEqual(v5, @"ITU_R_709_2")) {
        uint64_t v6 = (const char *)&unk_1A5885980;
      }
      else {
        uint64_t v6 = (const char *)&unk_1A5885920;
      }
      goto LABEL_61;
    }
    if (v2 <= 2016687155)
    {
      if (v2 != 2016686640 && v2 != 2016686642) {
        goto LABEL_61;
      }
    }
    else if (v2 != 2016687156 && v2 != 2016687216)
    {
      if (v2 != 2019963440) {
        goto LABEL_61;
      }
      goto LABEL_28;
    }
    if (v5 && CFEqual(v5, @"ITU_R_709_2")) {
      uint64_t v6 = (const char *)&unk_1A58858C0;
    }
    else {
      uint64_t v6 = (const char *)&unk_1A5885860;
    }
    goto LABEL_61;
  }
  if (v2 <= 875704949)
  {
    if (v2 > 875704421)
    {
      if (v2 != 875704422)
      {
        if (v2 == 875704438) {
          goto LABEL_44;
        }
        if (v2 != 875704934) {
          goto LABEL_61;
        }
      }
LABEL_47:
      if (v5 && CFEqual(v5, @"ITU_R_709_2")) {
        uint64_t v6 = (const char *)&unk_1A5885800;
      }
      else {
        uint64_t v6 = (const char *)&unk_1A58857A0;
      }
      goto LABEL_61;
    }
    if (v2 == 846624102) {
      goto LABEL_47;
    }
    int v7 = 846624121;
LABEL_43:
    if (v2 != v7) {
      goto LABEL_61;
    }
    goto LABEL_44;
  }
  if (v2 <= 1630697080)
  {
    if (v2 != 875704950)
    {
      if (v2 != 875836518)
      {
        int v7 = 875836534;
        goto LABEL_43;
      }
      goto LABEL_47;
    }
LABEL_44:
    if (v5 && CFEqual(v5, @"ITU_R_709_2")) {
      uint64_t v6 = "O@4Cp";
    }
    else {
      uint64_t v6 = "P@4Cp";
    }
    goto LABEL_61;
  }
  if (v2 == 1630697081) {
    goto LABEL_44;
  }
  if (v2 == 1714696752 || v2 == 1983000880) {
    goto LABEL_47;
  }
LABEL_61:
  (*(void (**)(void, void))(**((void **)this + 15) + 416))(*((void *)this + 15), 0);
  uint64_t v13 = 4294960633;
  if (v2 > 1630697080)
  {
    if (v2 > 2016687155)
    {
      if (v2 <= 2019963955)
      {
        BOOL v44 = v2 == 2016687156 || v2 == 2019963440;
        int v45 = 2019963442;
LABEL_143:
        if (!v44 && v2 != v45) {
          goto LABEL_211;
        }
LABEL_148:
        uint64_t v65 = (*(uint64_t (**)(void, void))(**((void **)this + 15) + 376))(*((void *)this + 15), 0);
        uint64_t v66 = (*(uint64_t (**)(void))(**((void **)this + 15) + 368))();
        if (v4)
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            if (v3)
            {
              unint64_t v68 = 0;
              for (uint64_t j = 0; j != v3; ++j)
              {
                *(_WORD *)(v66 + 2 * j) = (unsigned __int16)(int)(*(float *)&v6[12 * (v68 / v3)] + 0.5) << 6;
                v68 += 8;
              }
            }
            v66 += v65 & 0xFFFFFFFFFFFFFFFELL;
          }
        }
        unint64_t v70 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 352))(*((void *)this + 15), 1);
        uint64_t v71 = (*(uint64_t (**)(void))(**((void **)this + 15) + 360))();
        uint64_t v72 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
        uint64_t v73 = (*(uint64_t (**)(void))(**((void **)this + 15) + 368))();
        if (v71)
        {
          uint64_t v74 = 0;
          int v75 = (_WORD *)(v73 + 2);
          do
          {
            if (v70)
            {
              unint64_t v76 = 0;
              unint64_t v77 = v70;
              int v78 = v75;
              do
              {
                double v79 = *(float *)&v6[12 * (int)(v76 / v70) + 8] + 0.5;
                *(v78 - pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1) = (unsigned __int16)(int)(*(float *)&v6[4 * (int)(3 * (v76 / v70)) + 4] + 0.5) << 6;
                *int v78 = (unsigned __int16)(int)v79 << 6;
                v78 += 2;
                v76 += 8;
                --v77;
              }
              while (v77);
            }
            ++v74;
            int v75 = (_WORD *)((char *)v75 + (v72 & 0xFFFFFFFFFFFFFFFELL));
          }
          while (v74 != v71);
        }
        goto LABEL_210;
      }
      if (v2 > 2037741157)
      {
        if (v2 == 2037741158 || v2 == 2037741171)
        {
          uint64_t v105 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 320))(*((void *)this + 15), 1);
          uint64_t v106 = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))();
          if (v4)
          {
            uint64_t v107 = 0;
            uint8x16_t v108 = (unsigned char *)(v105 + 3);
            do
            {
              if (v3)
              {
                unint64_t v109 = 0;
                unint64_t v110 = 0;
                int8x16_t v111 = v108;
                do
                {
                  int v112 = 3 * (v109 / v3);
                  *(v111 - 3) = (int)(*(float *)&v6[4 * v112] + 0.5);
                  *(v111 - 2) = (int)(*(float *)&v6[4 * v112 + 4] + 0.5);
                  *(v111 - pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1) = (int)(*(float *)&v6[4 * v112] + 0.5);
                  *int8x16_t v111 = (int)(*(float *)&v6[12 * (int)(v109 / v3) + 8] + 0.5);
                  v111 += 4;
                  v110 += 2;
                  v109 += 16;
                }
                while (v3 > v110);
              }
              ++v107;
              v108 += v106;
            }
            while (v107 != v4);
          }
          goto LABEL_210;
        }
        goto LABEL_211;
      }
      if (v2 == 2019963956) {
        goto LABEL_148;
      }
      int v22 = 2033463856;
      goto LABEL_92;
    }
    if (v2 > 1983000879)
    {
      if (v2 <= 2016686639)
      {
        if (v2 != 1983000880)
        {
          if (v2 != 1999843442) {
            goto LABEL_211;
          }
          goto LABEL_196;
        }
        uint64_t v131 = (*(uint64_t (**)(void, void))(**((void **)this + 15) + 376))(*((void *)this + 15), 0);
        uint64_t v132 = (*(uint64_t (**)(void))(**((void **)this + 15) + 320))();
        if (v4)
        {
          uint64_t v133 = 0;
          float64x2_t v134 = (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL);
          float64x2_t v135 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
          __asm { FMOV            V6.2D, #0.5 }
          do
          {
            if (v3)
            {
              unint64_t v139 = 0;
              unint64_t v140 = 0;
              int8x16_t v141 = (int8x16_t *)v132;
              do
              {
                int v142 = 3 * (v139 / v3);
                int32x2_t v143 = *(int32x2_t *)&v6[4 * v142 + 4];
                unsigned int v144 = ((int)(*(float *)&v6[4 * v142] * 1023.0 / 255.0 + 0.5) + 32) >> 6;
                float64x2_t v145 = vmulq_f64(vcvtq_f64_f32((float32x2_t)vrev64_s32(v143)), v134);
                if (v144 >= 0x3FF) {
                  unsigned int v144 = 1023;
                }
                int32x4_t v146 = (int32x4_t)vcvtq_s64_f64(vaddq_f64(vdivq_f64(v145, v135), _Q6));
                *(uint32x2_t *)v146.i8 = vmin_u32(vshr_n_u32((uint32x2_t)vadd_s32(vmovn_s64((int64x2_t)v146), (int32x2_t)0x2000000020), 6uLL), (uint32x2_t)0x300000003);
                uint32x4_t v147 = (uint32x4_t)vzip1q_s32(v146, vrev64q_s32(v146));
                int8x16_t v148 = (int8x16_t)vuzp2q_s32(v146, vzip1q_s32(v146, v146));
                LODWORD(v149) = v144 << 10;
                HIDWORD(v149) = v144;
                v148.i32[1] = v144 << 20;
                v148.i32[3] = v144 << 20;
                *v141++ = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v147, (uint32x4_t)xmmword_1A5885670), (int8x16_t)vdupq_lane_s64(v149, 0)), v148);
                v140 += 6;
                v139 += 48;
              }
              while (v3 > v140);
            }
            uint64_t v13 = 0;
            v132 += v131;
            ++v133;
          }
          while (v133 != v4);
          goto LABEL_211;
        }
LABEL_210:
        uint64_t v13 = 0;
        goto LABEL_211;
      }
      BOOL v44 = v2 == 2016686640;
      int v45 = 2016686642;
      goto LABEL_143;
    }
    if (v2 != 1630697081)
    {
      if (v2 == 1647534392)
      {
LABEL_196:
        uint64_t v113 = (*(uint64_t (**)(void, void))(**((void **)this + 15) + 376))(*((void *)this + 15), 0);
        uint64_t v114 = (*(uint64_t (**)(void))(**((void **)this + 15) + 368))();
        if (v4)
        {
          uint64_t v115 = 0;
          float64x2_t v116 = (float64x2_t)vdupq_n_s64(0x407FF00000000000uLL);
          float64x2_t v117 = (float64x2_t)vdupq_n_s64(0x406FE00000000000uLL);
          float64x2_t v118 = (float64x2_t)vdupq_n_s64(0x4078080000000000uLL);
          do
          {
            if (v3)
            {
              unint64_t v119 = 0;
              for (uint64_t k = 0; k != v3; ++k)
              {
                int v121 = 3 * (v119 / v3);
                v122.i32[0] = *(_DWORD *)&v6[4 * v121 + 4];
                v122.i32[1] = *(_DWORD *)&v6[4 * v121];
                int32x2_t v123 = (int32x2_t)vshl_u32((uint32x2_t)vmovn_s64(vcvtq_s64_f64(vaddq_f64(vdivq_f64(vmulq_f64(vcvtq_f64_f32(v122), v116), v117), v118))), (uint32x2_t)0x140000000ALL);
                *(_DWORD *)(v114 + 4 * k) = vorr_s8((int8x8_t)v123, (int8x8_t)vdup_lane_s32(v123, 1)).u32[0] | (int)(*(float *)&v6[12 * (int)(v119 / v3) + 8] * 511.0 / 255.0 + 384.5);
                v119 += 8;
              }
            }
            v114 += v113;
            ++v115;
          }
          while (v115 != v4);
        }
        goto LABEL_210;
      }
      int v22 = 1714696752;
LABEL_92:
      if (v2 == v22)
      {
        uint64_t v23 = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 15) + 368))(*((void *)this + 15), 0, 1);
        uint64_t v24 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
        if (v4)
        {
          for (uint64_t m = 0; m != v4; ++m)
          {
            if (v3)
            {
              unint64_t v26 = 0;
              for (uint64_t n = 0; n != v3; ++n)
              {
                *(unsigned char *)(v23 + n) = (int)(*(float *)&v6[12 * (v26 / v3)] + 0.5);
                v26 += 8;
              }
            }
            v23 += v24;
          }
        }
        unint64_t v28 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 352))(*((void *)this + 15), 1);
        uint64_t v29 = (*(uint64_t (**)(void))(**((void **)this + 15) + 360))();
        uint64_t v30 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
        uint64_t v31 = (*(uint64_t (**)(void))(**((void **)this + 15) + 368))();
        if (v29)
        {
          for (iuint64_t i = 0; ii != v29; ++ii)
          {
            if (v28)
            {
              unint64_t v33 = 0;
              for (juint64_t j = 0; jj != v28; ++jj)
              {
                *(unsigned char *)(v31 + jj) = (int)(*(float *)&v6[(uint64_t)(0x300000000 * (v33 / v28) + 0x100000000) >> 30]
                                           + 0.5);
                v33 += 8;
              }
            }
            v31 += v30;
          }
        }
        unint64_t v35 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 352))(*((void *)this + 15), 2);
        uint64_t v36 = (*(uint64_t (**)(void))(**((void **)this + 15) + 360))();
        uint64_t v37 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
        uint64_t v38 = (*(uint64_t (**)(void))(**((void **)this + 15) + 368))();
        if (v36)
        {
          for (kuint64_t k = 0; kk != v36; ++kk)
          {
            if (v35)
            {
              unint64_t v40 = 0;
              for (uint64_t mm = 0; mm != v35; ++mm)
              {
                *(unsigned char *)(v38 + mm) = (int)(*(float *)&v6[(uint64_t)(0x300000000 * (v40 / v35) + 0x200000000) >> 30]
                                           + 0.5);
                v40 += 8;
              }
            }
            v38 += v37;
          }
        }
        goto LABEL_210;
      }
      goto LABEL_211;
    }
LABEL_140:
    uint64_t v61 = **((void **)this + 15);
    if (v2 == 1630697081)
    {
      uint64_t v62 = (*(uint64_t (**)(void))(v61 + 368))();
      uint64_t v63 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
    }
    else
    {
      uint64_t v62 = (*(uint64_t (**)(void))(v61 + 320))();
      uint64_t v63 = 0;
    }
    if (v4)
    {
      uint64_t v124 = 0;
      int8x16_t v125 = (unsigned char *)(v62 + 3);
      do
      {
        if (v3)
        {
          unint64_t v126 = 0;
          unint64_t v127 = 0;
          unsigned int v128 = v125;
          do
          {
            int v129 = 3 * (v126 / v3);
            *(v128 - 3) = (int)(*(float *)&v6[4 * v129 + 4] + 0.5);
            *(v128 - 2) = (int)(*(float *)&v6[4 * v129] + 0.5);
            *(v128 - pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1) = (int)(*(float *)&v6[12 * (int)(v126 / v3) + 8] + 0.5);
            *unsigned int v128 = (int)(*(float *)&v6[4 * v129] + 0.5);
            v128 += 4;
            v127 += 2;
            v126 += 16;
          }
          while (v3 > v127);
        }
        ++v124;
        v125 += v63;
      }
      while (v124 != v4);
    }
    goto LABEL_210;
  }
  if (v2 > 875704933)
  {
    if (v2 > 875836533)
    {
      if (v2 > 1380410944)
      {
        if (v2 == 1380410945)
        {
          uint64_t v166 = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))(*((void *)this + 15));
          uint64_t v167 = (*(uint64_t (**)(void))(**((void **)this + 15) + 320))();
          if (!v4) {
            goto LABEL_210;
          }
          uint64_t v168 = 0;
          uint64_t v169 = v167 + 8;
          do
          {
            if (v3)
            {
              unint64_t v170 = 0;
              unint64_t v171 = v3;
              uint64_t v172 = v169;
              do
              {
                int v173 = 3 * (v170 / v3);
                *(float *)(v172 - 8) = *(float *)&v6[4 * v173] / 255.0;
                *(float *)(v172 - 4) = *(float *)&v6[4 * v173 + 4] / 255.0;
                *(float *)uint64_t v172 = *(float *)&v6[12 * (int)(v170 / v3) + 8] / 255.0;
                *(_DWORD *)(v172 + 4) = 1065353216;
                v170 += 8;
                v172 += 16;
                --v171;
              }
              while (v171);
            }
            uint64_t v13 = 0;
            ++v168;
            v169 += v166;
          }
          while (v168 != v4);
        }
        else
        {
          if (v2 != 1380411457) {
            goto LABEL_211;
          }
          uint64_t v80 = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))(*((void *)this + 15));
          uint64_t v81 = (*(uint64_t (**)(void))(**((void **)this + 15) + 320))();
          if (!v4) {
            goto LABEL_210;
          }
          for (uint64_t nn = 0; nn != v4; ++nn)
          {
            if (v3)
            {
              unint64_t v83 = 0;
              unsigned int v84 = 3;
              unint64_t v85 = v3;
              do
              {
                int v86 = 3 * (v83 / v3);
                float v87 = *(float *)&v6[4 * v86] / 255.0;
                unsigned int v88 = (LODWORD(v87) >> 23);
                int v89 = 127 - v88;
                if ((int)(127 - v88) <= -15) {
                  int v89 = -15;
                }
                int v90 = 15360 - (v89 << 10);
                if (v88 < 0x70) {
                  int v90 = 0;
                }
                int v91 = HIWORD(LODWORD(v87)) & 0x8000 | (LODWORD(v87) >> 13) & 0x3FF | v90;
                float v92 = *(float *)&v6[4 * v86 + 4] / 255.0;
                unsigned int v93 = (LODWORD(v92) >> 23);
                __int16 v94 = 127 - v93;
                if ((int)(127 - v93) <= -15) {
                  __int16 v94 = -15;
                }
                __int16 v95 = 15360 - (v94 << 10);
                _CF = v93 >= 0x70;
                int v97 = HIWORD(LODWORD(v92)) & 0x8000 | (LODWORD(v92) >> 13) & 0x3FF;
                if (_CF) {
                  __int16 v98 = v95;
                }
                else {
                  __int16 v98 = 0;
                }
                float v99 = *(float *)&v6[12 * (int)(v83 / v3) + 8] / 255.0;
                unsigned int v100 = (LODWORD(v99) >> 23);
                __int16 v101 = v97 | v98;
                if ((int)(127 - v100) <= -15) {
                  __int16 v102 = -15;
                }
                else {
                  __int16 v102 = 127 - v100;
                }
                __int16 v103 = 15360 - (v102 << 10);
                if (v100 < 0x70) {
                  __int16 v103 = 0;
                }
                *(_WORD *)(v81 + 2 * (v84 - 3)) = v91;
                *(_WORD *)(v81 + 2 * (v84 - (*(void (**)(void))(**((void **)this + 2) + 168))(*((void *)this + 2)) = v101;
                *(_WORD *)(v81 + 2 * (v84 - 1)) = HIWORD(v99) & 0x8000 | (LODWORD(v99) >> 13) & 0x3FF | v103;
                *(_WORD *)(v81 + 2 * v84) = 15360;
                v83 += 8;
                v84 += 4;
                --v85;
              }
              while (v85);
            }
            uint64_t v13 = 0;
            v81 += v80;
          }
        }
        goto LABEL_211;
      }
      if (v2 != 875836534)
      {
        if (v2 != 1111970369) {
          goto LABEL_211;
        }
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 320))(*((void *)this + 15), 1);
        uint64_t v15 = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))();
        if (!v4) {
          goto LABEL_210;
        }
        uint64_t v16 = 0;
        uint64_t v17 = (unsigned char *)(v14 + 3);
        do
        {
          if (v3)
          {
            unint64_t v18 = 0;
            unint64_t v19 = v3;
            uint64_t v20 = v17;
            do
            {
              unsigned int v21 = 3 * (v18 / v3);
              *(v20 - 3) = (int)(flt_1A5885680[3 * (int)(v18 / v3) + 2] + 0.5);
              *(v20 - 2) = (int)(flt_1A5885680[v21 + 1] + 0.5);
              *(v20 - pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1) = (int)(flt_1A5885680[v21] + 0.5);
              *uint64_t v20 = -1;
              v20 += 4;
              v18 += 8;
              --v19;
            }
            while (v19);
          }
          uint64_t v13 = 0;
          ++v16;
          v17 += v15;
        }
        while (v16 != v4);
        goto LABEL_211;
      }
LABEL_127:
      uint64_t v47 = (*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 15) + 368))(*((void *)this + 15), 0, 1);
      uint64_t v48 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
      if (v4)
      {
        for (uint64_t i1 = 0; i1 != v4; ++i1)
        {
          if (v3)
          {
            unint64_t v50 = 0;
            for (uint64_t i2 = 0; i2 != v3; ++i2)
            {
              *(unsigned char *)(v47 + i2) = (int)(*(float *)&v6[12 * (v50 / v3)] + 0.5);
              v50 += 8;
            }
          }
          v47 += v48;
        }
      }
      unint64_t v52 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 352))(*((void *)this + 15), 1);
      uint64_t v53 = (*(uint64_t (**)(void))(**((void **)this + 15) + 360))();
      uint64_t v54 = (*(uint64_t (**)(void))(**((void **)this + 15) + 376))();
      uint64_t v55 = (*(uint64_t (**)(void))(**((void **)this + 15) + 368))();
      if (v53)
      {
        uint64_t v56 = 0;
        uint64_t v57 = (unsigned char *)(v55 + 1);
        do
        {
          if (v52)
          {
            unint64_t v58 = 0;
            unint64_t v59 = v52;
            uint64_t v60 = v57;
            do
            {
              *(v60 - pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1) = (int)(*(float *)&v6[4 * (int)(3 * (v58 / v52)) + 4] + 0.5);
              *uint64_t v60 = (int)(*(float *)&v6[12 * (int)(v58 / v52) + 8] + 0.5);
              v60 += 2;
              v58 += 8;
              --v59;
            }
            while (v59);
          }
          ++v56;
          v57 += v54;
        }
        while (v56 != v53);
      }
      goto LABEL_210;
    }
    BOOL v42 = v2 == 875704934 || v2 == 875704950;
    int v43 = 875836518;
LABEL_122:
    if (!v42 && v2 != v43) {
      goto LABEL_211;
    }
    goto LABEL_127;
  }
  if (v2 > 846624120)
  {
    if (v2 == 846624121) {
      goto LABEL_140;
    }
    BOOL v42 = v2 == 875704422;
    int v43 = 875704438;
    goto LABEL_122;
  }
  switch(v2)
  {
    case 24:
      uint64_t v150 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 320))(*((void *)this + 15), 1);
      uint64_t v151 = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))();
      if (!v4) {
        goto LABEL_210;
      }
      uint64_t v152 = 0;
      uint64_t v153 = (unsigned char *)(v150 + 2);
      do
      {
        if (v3)
        {
          unint64_t v154 = 0;
          unint64_t v155 = v3;
          CFNumberRef v156 = v153;
          do
          {
            unsigned int v157 = 3 * (v154 / v3);
            *(v156 - 2) = (int)(flt_1A5885680[v157] + 0.5);
            *(v156 - pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1) = (int)(flt_1A5885680[3 * (int)(v154 / v3) + 1] + 0.5);
            *CFNumberRef v156 = (int)(flt_1A5885680[v157 + 2] + 0.5);
            v156 += 3;
            v154 += 8;
            --v155;
          }
          while (v155);
        }
        uint64_t v13 = 0;
        ++v152;
        v153 += v151;
      }
      while (v152 != v4);
      break;
    case 32:
      uint64_t v158 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 15) + 320))(*((void *)this + 15), 1);
      uint64_t v159 = (*(uint64_t (**)(void))(**((void **)this + 15) + 296))();
      if (!v4) {
        goto LABEL_210;
      }
      uint64_t v160 = 0;
      char v161 = (unsigned char *)(v158 + 3);
      do
      {
        if (v3)
        {
          unint64_t v162 = 0;
          unint64_t v163 = v3;
          unsigned int v164 = v161;
          do
          {
            *(v164 - 3) = -1;
            unsigned int v165 = 3 * (v162 / v3);
            *(v164 - 2) = (int)(flt_1A5885680[v165] + 0.5);
            *(v164 - pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 1) = (int)(flt_1A5885680[3 * (int)(v162 / v3) + 1] + 0.5);
            *unsigned int v164 = (int)(flt_1A5885680[v165 + 2] + 0.5);
            v164 += 4;
            v162 += 8;
            --v163;
          }
          while (v163);
        }
        uint64_t v13 = 0;
        ++v160;
        v161 += v159;
      }
      while (v160 != v4);
      break;
    case 846624102:
      goto LABEL_140;
    default:
      break;
  }
LABEL_211:
  (*(void (**)(void, void))(**((void **)this + 15) + 424))(*((void *)this + 15), 0);
  return v13;
}

CFStringRef classCopyFormatDescription_CVPixelBuffer(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVPixelBufferRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVPixelBuffer(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

void mergeCFDictionaries(const void *key, const void *value, CFMutableDictionaryRef theDict)
{
}

void *CVMTLBufferCreate(void *a1, uint64_t a2)
{
  unint64_t v3 = (void *)[a1 newBufferWithIOSurface:a2];
  [v3 setLabel:objc_msgSend(NSString, "stringWithFormat:", @"CVMetalBuffer: %p", a2)];
  return v3;
}

void setRestrictions(int a1)
{
}

uint64_t canRunMetal()
{
  return 1;
}

double CVImageBacking::getSize(CVImageBacking *this)
{
  return 0.0;
}

uint64_t CVImageBacking::provideImageData(CVImageBacking *this, void *a2)
{
  return 0;
}

uint64_t CVImageBacking::getPixelFormatType(CVImageBacking *this)
{
  return 32;
}

uint64_t CVImageBacking::setFlipped(uint64_t this, char a2)
{
  *(unsigned char *)(this + 144) = a2;
  return this;
}

uint64_t CVImageBacking::createGLESTextureBackingForContext(CVImageBacking *this, const __CFAllocator *a2, CVOpenGLESContext *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  *a6 = -6662;
  return 0;
}

uint64_t CVImageBacking::createTextureBackingForDevice(CVImageBacking *this, const __CFAllocator *a2, void *a3, const __CFDictionary *a4, CVImageBuffer *a5, int *a6)
{
  *a6 = -6662;
  return 0;
}

uint64_t CVImageBacking::flushMetalTexture(CVImageBacking *this)
{
  uint64_t result = *((void *)this + 20);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 320))(result);
    *((void *)this + 2pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  }
  return result;
}

double CVGetHostClockFrequency(void)
{
  if (!CVHostTimeBase::sIsInited) {
    CVHostTimeBase::Initialize(v0);
  }
  return *(double *)&CVHostTimeBase::sFrequency;
}

uint32_t CVGetHostClockMinimumTimeDelta(void)
{
  if (!CVHostTimeBase::sIsInited) {
    CVHostTimeBase::Initialize(v0);
  }
  return CVHostTimeBase::sMinDelta;
}

uint64_t CVLocklessBunchPairGetTypeID(void)
{
  if (CVLocklessBunchPairGetTypeID(void)::once != -1) {
    dispatch_once_f(&CVLocklessBunchPairGetTypeID(void)::once, 0, (dispatch_function_t)classInitialize_CVLocklessBunchPair);
  }
  return kCVLocklessBunchPairID;
}

void CVLocklessBunchPair::CVLocklessBunchPair(CVLocklessBunchPair *this, const void *a2)
{
  CVBunchPair::CVBunchPair(this, a2);
  *(void *)uint64_t v2 = &unk_1EFA16F98;
  *(void *)(v2 + 2CVBitOrAtomic(1, this + 24) = 0;
  *(void *)(v2 + 232) = 0;
  *(void *)(v2 + 24pixelBufferBackingCreateIOSurfaceWiringAssertion(*((__IOSurface **)this + 20), (os_unfair_lock_t)this + 42, (uint64_t *)this + 22, (int *)this + 46, 0) = 0;
  *(_DWORD *)(v2 + 248) = 0;
}

uint64_t CVLocklessBunchPair::freeExcessBackingsNotInUse(CVLocklessBunchPair *this)
{
  v2[0] = (char *)this + 248;
  v2[1] = this;
  v2[2] = *((void *)this + 27);
  v2[3] = 1;
  return CVAtomicBunchApply(*((void *)this + 28), (uint64_t (*)(uint64_t, void))_freeExcessBackings, (uint64_t)v2);
}

uint64_t _freeExcessBackings(const void *a1, CVBufferBacking **a2)
{
  if (!CVBufferBacking::okToAgeOutBacking(a2[2])) {
    return 0;
  }
  uint64_t v4 = 1;
  if (CVLocklessBunchPair::shouldFlush(*((CVLocklessBunchPair **)a1 + 1)))
  {
    (*(void (**)(CVBufferBacking *))(*(void *)a2[2] + 112))(a2[2]);
    *((unsigned char *)a1 + CVBitOrAtomic(1, this + 24) = 1;
    CFIndex v5 = (void *)*((void *)a1 + 2);
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 96))(*((void *)a1 + 1)) + 1;
    uint64_t v7 = (*(uint64_t (**)(void))(**((void **)a1 + 1) + 104))(*((void *)a1 + 1));
    CVTracePoolAction(1, v5, (void **)a2, "-> is in excess, freed.", v6, v7 - 1);
    CFRelease(a2);
    atomic_fetch_add_explicit(*(atomic_uint *volatile *)a1, 0xFF000000, memory_order_relaxed);
    return 2;
  }
  return v4;
}

BOOL CVLocklessBunchPair::shouldFlush(CVLocklessBunchPair *this)
{
  do
  {
    unsigned int v8 = *((_DWORD *)this + 62);
    unsigned int v7 = v8;
    int v2 = (*(uint64_t (**)(CVLocklessBunchPair *))(*(void *)this + 232))(this);
    int v3 = (unsigned __int16)v8 - BYTE2(v8) + HIBYTE(v8);
    if (v2 > v3) {
      unsigned int v7 = v8 + 0x1000000;
    }
    if (v8 == v7) {
      break;
    }
    unsigned int v4 = v8;
    unsigned int v5 = v8;
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)this + 62, &v5, v7, memory_order_relaxed, memory_order_relaxed);
  }
  while (v5 != v4);
  return v2 > v3;
}

uint64_t CVLocklessBunchPair::consolidateBacking(CVLocklessBunchPair *this, CVBufferBacking *a2)
{
  return (*(uint64_t (**)(CVLocklessBunchPair *, CVBufferBacking *, void, void))(*(void *)this + 112))(this, a2, 0, 0);
}

uint64_t CVLocklessBunchPair::prefetchPages(CVLocklessBunchPair *this)
{
  return CVAtomicBunchApply(*((void *)this + 28), (uint64_t (*)(uint64_t, void))_prefetchPages, 0);
}

uint64_t _prefetchPages(const void *a1, void **a2)
{
  return 0;
}

CFStringRef classCopyFormatDescription_CVLocklessBunchPair(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVLocklessBunchPairRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVLocklessBunchPair(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

void CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(CFDictionaryRef description, OSType pixelFormat)
{
  int v2 = *(void **)&pixelFormat;
  if (!_pixelFormatDictionary) {
    pthread_once(&once, _pixelFormatDictionaryInit);
  }
  pthread_mutex_lock(&_pixelFormatMutex);
  registerDescriptionWithPixelFormatTypeInPixelFormatDictionaryAndArray(description, v2, (CFDictionaryRef)_pixelFormatDictionary, (__CFArray *)_pixelFormatTypes);

  pthread_mutex_unlock(&_pixelFormatMutex);
}

CFArrayRef CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(CFAllocatorRef allocator)
{
  CFArrayRef v2 = (const __CFArray *)_pixelFormatTypes;
  if (!_pixelFormatTypes)
  {
    pthread_once(&once, _pixelFormatDictionaryInit);
    CFArrayRef v2 = (const __CFArray *)_pixelFormatTypes;
    if (!_pixelFormatTypes) {
      return 0;
    }
  }

  return CFArrayCreateCopy(allocator, v2);
}

uint64_t CVSetRestrictions(int a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (_pixelFormatTypes)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v2 = 136315138;
      int v3 = "CVSetRestrictions called too late to be effective.";
      _os_log_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v2, 0xCu);
    }
    return 4294960636;
  }
  else
  {
    setRestrictions(a1);
    return 0;
  }
}

uint64_t CVPixelFormatTypeIsSubsampled(unsigned int a1)
{
  int v19 = 0;
  DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(a1);
  if (!DescriptionWithPixelFormatType) {
    return 0;
  }
  CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DescriptionWithPixelFormatType);
  if (!Copy) {
    return 0;
  }
  CFDictionaryRef v3 = Copy;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(Copy, @"Planes");
  if (Value && (CFArrayRef v5 = Value, v6 = CFGetTypeID(Value), v6 == CFArrayGetTypeID()) && CFArrayGetCount(v5) >= 1)
  {
    CFIndex v7 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, v7);
      if (ValueAtIndex)
      {
        CFDictionaryRef v9 = ValueAtIndex;
        CFTypeID v10 = CFGetTypeID(ValueAtIndex);
        if (v10 == CFDictionaryGetTypeID()
          && (getNumberValueIfPresent(v9, @"HorizontalSubsampling", &v19) && v19 > 1
           || getNumberValueIfPresent(v9, @"VerticalSubsampling", &v19) && v19 > 1))
        {
          break;
        }
      }
      if (CFArrayGetCount(v5) <= ++v7) {
        goto LABEL_14;
      }
    }
    unsigned int v11 = 1;
  }
  else
  {
LABEL_14:
    unsigned int v11 = 0;
  }
  int NumberValueIfPresent = getNumberValueIfPresent(v3, @"HorizontalSubsampling", &v19);
  int v13 = v19;
  if (getNumberValueIfPresent(v3, @"VerticalSubsampling", &v19)) {
    BOOL v14 = v19 <= 1;
  }
  else {
    BOOL v14 = 1;
  }
  int v15 = !v14;
  if (NumberValueIfPresent) {
    BOOL v16 = v13 <= 1;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16) {
    int v15 = 1;
  }
  if (v15) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v11;
  }
  CFRelease(v3);
  return v17;
}

uint64_t getNumberValueIfPresent(const __CFDictionary *a1, const __CFString *a2, int *a3)
{
  int value = 0;
  int ValueIfPresent = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  uint64_t result = 0;
  if (ValueIfPresent && value)
  {
    CFTypeID v6 = CFGetTypeID(value);
    if (v6 == CFNumberGetTypeID()) {
      return CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, a3);
    }
    else {
      return 0;
    }
  }
  return result;
}

Boolean CVIsCompressedPixelFormatAvailable(OSType pixelFormatType)
{
  int v8 = 0;
  LODWORD(DescriptionWithPixelFormatType) = areUniversalCompressionFormatsSupported();
  if (DescriptionWithPixelFormatType)
  {
    DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType(pixelFormatType);
    if (DescriptionWithPixelFormatType)
    {
      DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CFDictionaryGetValue(DescriptionWithPixelFormatType, @"Planes");
      if (DescriptionWithPixelFormatType)
      {
        CFArrayRef v3 = DescriptionWithPixelFormatType;
        CFTypeID v4 = CFGetTypeID(DescriptionWithPixelFormatType);
        if (v4 != CFArrayGetTypeID()) {
          goto LABEL_8;
        }
        DescriptionWithOSType PixelFormatType = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
        if (DescriptionWithPixelFormatType)
        {
          CFDictionaryRef v5 = DescriptionWithPixelFormatType;
          CFTypeID v6 = CFGetTypeID(DescriptionWithPixelFormatType);
          if (v6 == CFDictionaryGetTypeID())
          {
            getNumberValueIfPresent(v5, @"CompressionType", &v8);
            LOBYTE(DescriptionWithPixelFormatType) = (v8 - 3) < 2;
            return DescriptionWithPixelFormatType;
          }
LABEL_8:
          LOBYTE(DescriptionWithPixelFormatType) = 0;
        }
      }
    }
  }
  return DescriptionWithPixelFormatType;
}

void CVBitAndAtomic(int a1, atomic_uint *a2)
{
  do
  {
    atomic_uint v3 = *a2;
    atomic_uint v4 = *a2;
    atomic_compare_exchange_strong(a2, (unsigned int *)&v4, *a2 & a1);
  }
  while (v4 != v3);
}

uint64_t CVIncrementAtomicCounter(atomic_uint *a1, BOOL *a2)
{
  do
  {
    uint64_t result = *a1;
    if (result == -1) {
      break;
    }
    atomic_uint v4 = *a1;
    atomic_compare_exchange_strong(a1, (unsigned int *)&v4, result + 1);
  }
  while (v4 != result);
  *a2 = result != -1;
  return result;
}

uint64_t classInitialize_CVDataBufferPool(void *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  kCVDataBufferPooluint64_t ID = result;
  return result;
}

uint64_t CVDataBufferPool::getAttributes(CVDataBufferPool *this)
{
  return *((void *)this + 4);
}

uint64_t CVDataBufferPool::getMaximumBufferAge(CVDataBufferPool *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 200))();
}

uint64_t CVDataBufferPool::getMinimumBufferCount(CVDataBufferPool *this, const void *a2)
{
  atomic_uint v4 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  uint64_t v5 = *((unsigned int *)this + 12);
  if (v5)
  {
    uint64_t v6 = 0;
    CFIndex v7 = (uint64_t *)(*((void *)this + 15) + 8);
    do
    {
      if ((const void *)*(v7 - 1) == a2) {
        uint64_t v6 = *v7;
      }
      v7 += 2;
      --v5;
    }
    while (v5);
  }
  else
  {
    uint64_t v6 = 0;
  }
  pthread_mutex_unlock(v4);
  return v6;
}

uint64_t CVDataBufferPool::allocateNewBacking(CFDictionaryRef *this, const __CFAllocator *a2, uint64_t a3)
{
  unsigned int v16 = 0;
  uint64_t v5 = CVDataBufferBacking::alloc(a2, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    CFArrayRef Value = CFDictionaryGetValue(this[5], @"IOSurfaceProperties");
    if (Value && (int v8 = Value, v9 = CFGetTypeID(Value), v9 == CFDictionaryGetTypeID()))
    {
      uint64_t IntValueWithDefault = CVDictionaryGetIntValueWithDefault(v8, (const void *)*MEMORY[0x1E4F2F150], 0);
      uint64_t v11 = CVDictionaryGetIntValueWithDefault(v8, (const void *)*MEMORY[0x1E4F2EFB8], 0);
    }
    else
    {
      uint64_t IntValueWithDefault = 0;
      uint64_t v11 = 0;
    }
    if ((*(uint64_t (**)(CVBufferBacking *, uint64_t, uint64_t, CFDictionaryRef, CFDictionaryRef, void, unsigned int *))(*(void *)v6[2] + 176))(v6[2], IntValueWithDefault, v11, this[5], this[4], 0, &v16))
    {
      unsigned int v16 = (*(uint64_t (**)(CFDictionaryRef, CVBufferBacking *, void, uint64_t))(*(void *)this[2] + 112))(this[2], v6[2], 0, a3);
      if (v16)
      {
        CFRelease(v6);
      }
      else
      {
        CGColorSpaceRef v12 = (void *)(*((uint64_t (**)(CFDictionaryRef *))*this + 3))(this);
        uint64_t v13 = (*(uint64_t (**)(CFDictionaryRef))(*(void *)this[2] + 96))(this[2]) + 1;
        uint64_t v14 = (*(uint64_t (**)(CFDictionaryRef))(*(void *)this[2] + 104))(this[2]);
        CVTracePoolAction(1, v12, (void **)v6, "created", v13, v14 - 1);
      }
    }
  }
  else
  {
    return -6660;
  }
  return v16;
}

uint64_t CVDataBufferPool::assignNewBacking(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 4294960635;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a2 + 16) + 208))(*(void *)(a2 + 16));
  if (!v4) {
    return 4294960635;
  }
  uint64_t v5 = (__IOSurface *)v4;
  (*(void (**)(void, void, void, void))(**(void **)(a1 + 16) + 112))(*(void *)(a1 + 16), *(void *)(a2 + 16), 0, 0);
  uint64_t v6 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16));
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
  CVTracePoolAction(1, v6, (void **)a2, "CVDataBuffer backing claimed", v7, v8);
  CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F2F128];
  CFStringRef v10 = (const __CFString *)IOSurfaceCopyValue(v5, (CFStringRef)*MEMORY[0x1E4F2F128]);
  CFStringRef v11 = v10;
  if (v10 && CFStringCompare(v10, @"CoreVideo", 0)) {
    goto LABEL_9;
  }
  if (*(void *)(a1 + 24))
  {
    CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"Assigned-To-%@", *(void *)(a1 + 24));
    if (v12)
    {
      CFStringRef v13 = v12;
      IOSurfaceSetValue(v5, v9, v12);
      CFRelease(v13);
    }
  }
  if (v11) {
LABEL_9:
  }
    CFRelease(v11);
  CVBufferBacking::setNeverAgeOutBacking(*(void *)(a2 + 16));
  return 0;
}

uint64_t CVDataBufferPool::preallocate(CVDataBufferPool *this, const __CFAllocator *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v19 = 0;
  pthread_t v20 = 0;
  uint64_t v6 = *((void *)this + 2);
  v18[0] = this;
  v18[1] = v6;
  v18[2] = a2;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 232))(v6);
  if (v7 >= (*(uint64_t (**)(void))(**((void **)this + 2) + 224))(*((void *)this + 2))) {
    return 0;
  }
  (*(void (**)(void))(**((void **)this + 2) + 160))(*((void *)this + 2));
  if (a3)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 224))(*((void *)this + 2));
    if (v8 <= (*(uint64_t (**)(void))(**((void **)this + 2) + 232))(*((void *)this + 2)) + 1)
    {
      int v9 = 0;
      a3 = 0;
    }
    else
    {
      int v22 = 0;
      v23.__sig = 0x300000006;
      sched_param v21 = (sched_param)4;
      int v9 = 0;
      if (sysctl((int *)&v23, 2u, &v22, (size_t *)&v21, 0, 0) < 0)
      {
        a3 = 0;
      }
      else
      {
        a3 = 0;
        if (v22 >= 2)
        {
          CFStringRef v10 = pthread_self();
          int v22 = 0;
          if (pthread_getschedparam(v10, &v22, &v21))
          {
            CFStringRef v11 = 0;
          }
          else
          {
            CFStringRef v11 = &v23;
            pthread_attr_init(&v23);
            pthread_attr_setschedparam(&v23, &v21);
            pthread_attr_setschedpolicy(&v23, v22);
          }
          a3 = pthread_create(&v20, v11, (void *(__cdecl *)(void *))preAllocateThread, v18);
          int v9 = 1;
        }
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  do
    unsigned int v13 = (*(uint64_t (**)(CVDataBufferPool *, const __CFAllocator *, uint64_t))(*(void *)this + 168))(this, a2, 1);
  while (!v13);
  unsigned int v14 = v13;
  if (v13 == -6699) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v13;
  }
  if (a3) {
    int v15 = 0;
  }
  else {
    int v15 = v9;
  }
  if (v15 == 1)
  {
    pthread_join(v20, 0);
    unsigned int v16 = v19;
    if (v19 == -6699) {
      unsigned int v16 = 0;
    }
    if (v14 == -6699) {
      uint64_t v12 = v16;
    }
    else {
      uint64_t v12 = v14;
    }
  }
  (*(void (**)(void))(**((void **)this + 2) + 168))(*((void *)this + 2));
  return v12;
}

uint64_t CVDataBufferPool::prefetchPages(CVDataBufferPool *this)
{
  return 0;
}

CFStringRef CVDataBufferPool::copyDebugDescription(CVDataBufferPool *this)
{
  int v2 = (const void *)(*(uint64_t (**)(CVDataBufferPool *))(*(void *)this + 24))(this);
  CFTypeID v3 = CFGetTypeID(v2);
  CFStringRef v4 = CFCopyTypeIDDescription(v3);
  uint64_t v5 = (*(uint64_t (**)(CVDataBufferPool *))(*(void *)this + 24))(this);
  uint64_t v6 = *((void *)this + 3);
  if (v6) {
    uint64_t v7 = " name=";
  }
  else {
    uint64_t v7 = "";
  }
  if (v6) {
    uint64_t v8 = (__CFString *)*((void *)this + 3);
  }
  else {
    uint64_t v8 = &stru_1EFA19840;
  }
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = *((void *)this + 5);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 96))(*((void *)this + 2));
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 2) + 104))(*((void *)this + 2));
  CFStringRef v13 = CFStringCreateWithFormat(0, 0, @"< %@Ref %p%s%@ poolAttributes=%@ dataBufferAttributes=%@ inUse=%ld free=%ld>", v4, v5, v7, v8, v9, v10, v11, v12);
  CFRelease(v4);
  return v13;
}

uint64_t CVDataBufferPool::flush(CVDataBufferPool *this, char a2)
{
  uint64_t v2 = **((void **)this + 2);
  if (a2) {
    return (*(uint64_t (**)(void))(v2 + 144))();
  }
  else {
    return (*(uint64_t (**)(void))(v2 + 136))();
  }
}

uint64_t scanIOSurfacesCallbackForCVDatabuffer(void *a1, void *a2)
{
  return ((uint64_t (*)(void, void))*a2)(*(void *)(a1[2] + 160), a2[1]);
}

uint64_t CVDataBufferPool::scanIOSurfaces(CVDataBufferPool *this, void (*a2)(__IOSurface *, void *), void *a3)
{
  v4[0] = a2;
  v4[1] = a3;
  return (*(uint64_t (**)(void, uint64_t (*)(void *, void *), void *))(**((void **)this + 2)
                                                                                                 + 248))(*((void *)this + 2), scanIOSurfacesCallbackForCVDatabuffer, v4);
}

uint64_t CVDataBufferPool::bufferBackingNotInUse(CVDataBufferPool *this, CVBufferBacking *a2)
{
  CVBufferPool::bufferBackingNotInUse(this, a2);
  CFTypeID v3 = *(uint64_t (**)(void))(**((void **)this + 2) + 136);

  return v3();
}

CFStringRef classCopyFormatDescription_CVDataBufferPool(void *a1, const __CFDictionary *a2)
{
  uint64_t v4 = a1[2];
  CFIndex v5 = CFGetRetainCount(a1);
  return CFStringCreateWithFormat(0, a2, @"<CVDataBufferPoolRef %p obj=%p refcnt=%ld>", a1, v4, v5);
}

uint64_t classCopyDebugDescription_CVDataBufferPool(void **a1)
{
  return (*(uint64_t (**)(void))(*a1[2] + 48))();
}

void CVAtomicBunchNew()
{
  __assert_rtn("CVAtomicBunchNew", "CVAtomicBunch.cpp", 504, "companionBunch->fillLevelPtr == &companionBunch->fillLevel");
}

void CVPixelBufferPool::initWithOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0(&dword_1A5841000, MEMORY[0x1E4F14500], a3, "Cannot create CVPixelBufferPool with no kCVPixelBufferWidthKey.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_1A5841000, MEMORY[0x1E4F14500], a3, "Cannot create CVPixelBufferPool with no kCVPixelBufferHeightKey.", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_0(&dword_1A5841000, MEMORY[0x1E4F14500], a3, "Cannot create CVPixelBufferPool with no kCVPixelBufferPixelFormatTypeKey.", a5, a6, a7, a8, 0);
}

void CVPixelBufferPool::initWithOptions(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 134217984;
  uint64_t v2 = a1;
  _os_log_error_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Cannot create CVPixelBufferPool with kCVPixelBufferWidthKey value (%lld) <= 0.", (uint8_t *)&v1, 0xCu);
}

{
  int v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 134217984;
  uint64_t v2 = a1;
  _os_log_error_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Cannot create CVPixelBufferPool with kCVPixelBufferHeightKey value (%lld) <= 0.", (uint8_t *)&v1, 0xCu);
}

void _CVPixelBufferLayoutPlane()
{
  __assert_rtn("_CVPixelBufferLayoutPlane", "CVPixelBufferBacking.cpp", 984, "(bytesPerLine % bytesPerBlock) == 0");
}

{
  __assert_rtn("_CVPixelBufferLayoutPlane", "CVPixelBufferBacking.cpp", 983, "(bytesPerLine % scanlineAlignment) == 0");
}

{
  __assert_rtn("_CVPixelBufferLayoutPlane", "CVPixelBufferBacking.cpp", 982, "(bytesPerLine % (bytesPerBlock*blockHAlign)) == 0");
}

void CVPixelBufferBacking::initWithPixelBufferDescription(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 134217984;
  uint64_t v2 = a1;
  _os_log_error_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Invalid CVCustomMemoryLayoutCallBacks version (%lld).", (uint8_t *)&v1, 0xCu);
}

void CVPixelBufferBacking::initWithPixelBufferDescription()
{
  *(_WORD *)CFAllocatorRef v0 = 0;
  _os_log_error_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "Invalid CVCustomMemoryLayoutCallBacks.", v0, 2u);
}

void calculatePixelFormatVariantBitfieldForBiPlanarFormatOnThisDevice()
{
  *(_WORD *)CFAllocatorRef v0 = 0;
  _os_log_fault_impl(&dword_1A5841000, MEMORY[0x1E4F14500], OS_LOG_TYPE_FAULT, "CoreVideo: Failed to read HardwarePlatform, MG query returned NULL -- possible sandbox-related MG failure that could have other adverse effects", v0, 2u);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9738](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9740](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9748](c, data, *(void *)&len);
}

void *__cdecl CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint)
{
  return (void *)MEMORY[0x1F40D70E8](allocator, size, hint);
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFAllocatorDeallocate(CFAllocatorRef allocator, void *ptr)
{
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7198](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFBagAddValue(CFMutableBagRef theBag, const void *value)
{
}

void CFBagApplyFunction(CFBagRef theBag, CFBagApplierFunction applier, void *context)
{
}

CFMutableBagRef CFBagCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFBagCallBacks *callBacks)
{
  return (CFMutableBagRef)MEMORY[0x1F40D7308](allocator, capacity, callBacks);
}

CFIndex CFBagGetCountOfValue(CFBagRef theBag, const void *value)
{
  return MEMORY[0x1F40D7320](theBag, value);
}

void CFBagRemoveValue(CFMutableBagRef theBag, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1F40D77D0](type_id);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7810](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7990](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A8](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFAllocatorRef CFGetAllocator(CFTypeRef cf)
{
  return (CFAllocatorRef)MEMORY[0x1F40D7B60](cf);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D20]();
}

void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void *object, CFDictionaryRef userInfo, Boolean deliverImmediately)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE0](key, applicationID, keyExistsAndHasValidFormat);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x1F40D7EE8](key, applicationID, keyExistsAndHasValidFormat);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

CFIndex CFSetGetCount(CFSetRef theSet)
{
  return MEMORY[0x1F40D8220](theSet);
}

void CFSetGetValues(CFSetRef theSet, const void **values)
{
}

void CFShow(CFTypeRef obj)
{
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1F40D84A8](alloc, str, range.location, range.length);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1F40D9AC0](space);
}

CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents, const CGFloat *range, CGDataProviderRef profile, CGColorSpaceRef alternate)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B18](nComponents, range, profile, alternate);
}

uint64_t CGColorSpaceCreateWithID()
{
  return MEMORY[0x1F40D9B58]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(const void *ref)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B68](ref);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B70](plist);
}

uint64_t CGColorSpaceGetID()
{
  return MEMORY[0x1F40D9BC8]();
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1F40D9C10]();
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA310](info, data, size, releaseData);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

uint64_t ColorSyncMakeProfile()
{
  return MEMORY[0x1F40D6558]();
}

CFDataRef ColorSyncProfileCopyHeader(ColorSyncProfileRef prof)
{
  return (CFDataRef)MEMORY[0x1F40D6570](prof);
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof)
{
  return (ColorSyncMutableProfileRef)MEMORY[0x1F40D6590](prof);
}

void ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof, CFDataRef header)
{
}

void ColorSyncProfileSetTag(ColorSyncMutableProfileRef prof, CFStringRef signature, CFDataRef data)
{
}

uint64_t IOSurfaceClearDataProperties()
{
  return MEMORY[0x1F40E92F0]();
}

CFDictionaryRef IOSurfaceCopyAllValues(IOSurfaceRef buffer)
{
  return (CFDictionaryRef)MEMORY[0x1F40E92F8](buffer);
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40E9300](buffer, key);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9308](properties);
}

uint64_t IOSurfaceCreateChildSurface()
{
  return MEMORY[0x1F40E9310]();
}

uint64_t IOSurfaceCreateWiringAssertion()
{
  return MEMORY[0x1F40E9320]();
}

void IOSurfaceDecrementUseCount(IOSurfaceRef buffer)
{
}

uint64_t IOSurfaceDecrementUseCountForCategory()
{
  return MEMORY[0x1F40E9338]();
}

uint64_t IOSurfaceGetAddressFormatOfPlane()
{
  return MEMORY[0x1F40E9348]();
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9350](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1F40E9358](buffer);
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileDataRegionOfSliceAndPlane()
{
  return MEMORY[0x1F40E9368]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfPlane()
{
  return MEMORY[0x1F40E9370]();
}

uint64_t IOSurfaceGetBaseAddressOfCompressedTileHeaderRegionOfSliceAndPlane()
{
  return MEMORY[0x1F40E9378]();
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40E9380](buffer, planeIndex);
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x1F40E9388]();
}

uint64_t IOSurfaceGetBytesPerCompressedTileHeaderOfPlane()
{
  return MEMORY[0x1F40E9390]();
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9398](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E93A0](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E93A8](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E93B8](buffer, planeIndex);
}

uint64_t IOSurfaceGetCacheMode()
{
  return MEMORY[0x1F40E93D0]();
}

uint64_t IOSurfaceGetCompressedTileHeightOfPlane()
{
  return MEMORY[0x1F40E93E0]();
}

uint64_t IOSurfaceGetCompressedTileWidthOfPlane()
{
  return MEMORY[0x1F40E93E8]();
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x1F40E93F0]();
}

size_t IOSurfaceGetElementHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9408](buffer);
}

size_t IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9410](buffer, planeIndex);
}

size_t IOSurfaceGetElementWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9418](buffer);
}

size_t IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9420](buffer, planeIndex);
}

uint64_t IOSurfaceGetExtendedPixelsOfPlane()
{
  return MEMORY[0x1F40E9428]();
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9440](buffer);
}

uint64_t IOSurfaceGetHeightInCompressedTilesOfPlane()
{
  return MEMORY[0x1F40E9448]();
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9450](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9460](buffer);
}

uint64_t IOSurfaceGetOffsetOfPlane()
{
  return MEMORY[0x1F40E9470]();
}

uint64_t IOSurfaceGetParentID()
{
  return MEMORY[0x1F40E9478]();
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9480](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9488](buffer);
}

uint64_t IOSurfaceGetProhibitUseCount()
{
  return MEMORY[0x1F40E9490]();
}

uint64_t IOSurfaceGetProtectionOptions()
{
  return MEMORY[0x1F40E94A8]();
}

uint64_t IOSurfaceGetSliceCount()
{
  return MEMORY[0x1F40E94D0]();
}

int32_t IOSurfaceGetUseCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94E8](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94F8](buffer);
}

uint64_t IOSurfaceGetWidthInCompressedTilesOfPlane()
{
  return MEMORY[0x1F40E9500]();
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9508](buffer, planeIndex);
}

uint64_t IOSurfaceGetYCbCrMatrix()
{
  return MEMORY[0x1F40E9510]();
}

void IOSurfaceIncrementUseCount(IOSurfaceRef buffer)
{
}

uint64_t IOSurfaceIncrementUseCountForCategory()
{
  return MEMORY[0x1F40E9520]();
}

Boolean IOSurfaceIsInUse(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9530](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9540](buffer, *(void *)&options, seed);
}

uint64_t IOSurfaceRemoveCoreVideoBridgedValues()
{
  return MEMORY[0x1F40E9588]();
}

void IOSurfaceRemoveValue(IOSurfaceRef buffer, CFStringRef key)
{
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x1F40E95A0]();
}

uint64_t IOSurfaceSetCoreVideoBridgedKeys()
{
  return MEMORY[0x1F40E95A8]();
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

void IOSurfaceSetValues(IOSurfaceRef buffer, CFDictionaryRef keysAndValues)
{
}

uint64_t IOSurfaceSetYCbCrMatrix()
{
  return MEMORY[0x1F40E95F8]();
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9630](buffer, *(void *)&options, seed);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x1F40EDE38]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1F40C99E8](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1F40D90D0]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1F40D90E8]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

int asprintf(char **a1, const char *a2, ...)
{
  return MEMORY[0x1F40CA440](a1, a2);
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

void objc_destroyWeak(id *location)
{
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1F40CD950](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD958](a1, *(void *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_getschedparam(pthread_t a1, int *a2, sched_param *a3)
{
  return MEMORY[0x1F40CDA18](a1, a2, a3);
}

int pthread_join(pthread_t a1, void **a2)
{
  return MEMORY[0x1F40CDA38](a1, a2);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_mutexattr_destroy(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA0](a1);
}

int pthread_mutexattr_init(pthread_mutexattr_t *a1)
{
  return MEMORY[0x1F40CDAA8](a1);
}

int pthread_mutexattr_settype(pthread_mutexattr_t *a1, int a2)
{
  return MEMORY[0x1F40CDAC0](a1, *(void *)&a2);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

int pthread_rwlock_destroy(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAE8](a1);
}

int pthread_rwlock_init(pthread_rwlock_t *a1, const pthread_rwlockattr_t *a2)
{
  return MEMORY[0x1F40CDAF0](a1, a2);
}

int pthread_rwlock_rdlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDAF8](a1);
}

int pthread_rwlock_trywrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB08](a1);
}

int pthread_rwlock_unlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB10](a1);
}

int pthread_rwlock_wrlock(pthread_rwlock_t *a1)
{
  return MEMORY[0x1F40CDB18](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

int sched_yield(void)
{
  return MEMORY[0x1F40CDEC8]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int sprintf(char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0A0](a1, a2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}