void *WebKit::RemoteLegacyCDMFactoryProxy::didReceiveMessage(void *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  void *v9;
  atomic_uchar *volatile *v10;
  uint64_t v11;
  atomic_uchar *volatile *v12;
  void *v13;

  if (*((_WORD *)a3 + 25) == 1134)
  {
    v5 = (uint64_t)this;
    this = (void *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    if (v6)
    {
      v7 = (uint64_t)this;
      this = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v8)
      {
        v11 = (uint64_t)this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2);
        v9 = (void *)WTF::fastMalloc((WTF *)0x18);
        *v9 = &unk_1EE9BA648;
        v9[1] = v11;
        v10 = v12;
        v12 = 0;
        v13 = v9;
        v9[2] = v10;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
        WebKit::RemoteLegacyCDMFactoryProxy::removeSession(v5, v7, (uint64_t *)&v13);
        this = v13;
        v13 = 0;
        if (this) {
          return (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLegacyCDMFactoryProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, WTF::StringImpl **a4)
{
  int v8 = *((unsigned __int16 *)a3 + 25);
  if (v8 != 3715)
  {
    if (v8 != 3714) {
      return 0;
    }
    IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v39);
    if (v40)
    {
      uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, v41);
      if (v42)
      {
        if (v40)
        {
          v36 = v39;
          *(_OWORD *)v37 = *(_OWORD *)v41;
          char v38 = 1;
          v11 = *a4;
          *a4 = 0;
          v41[0] = v11;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v41[1], a2);
          uint64_t v12 = WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v12 = &unk_1EE9BA670;
          *(WTF::StringImpl **)(v12 + 8) = v41[0];
          v13 = v41[1];
          v41[0] = 0;
          v41[1] = 0;
          *(void *)(v12 + 16) = v13;
          v39 = (WTF::StringImpl *)v12;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41[1]);
          v15 = v41[0];
          v41[0] = 0;
          if (v15)
          {
            IPC::Encoder::~Encoder(v15, v14);
            WTF::fastFree(v32, v33);
          }
          WebKit::RemoteLegacyCDMFactoryProxy::createCDM(a1, (WebCore::LegacyCDM *)&v36, (uint64_t)v37, (uint64_t *)&v39);
          v17 = v39;
          v39 = 0;
          if (v17) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v17 + 8))(v17);
          }
          if (!v38) {
            return 1;
          }
          goto LABEL_43;
        }
LABEL_49:
        __break(1u);
        return result;
      }
      goto LABEL_25;
    }
LABEL_30:
    uint64_t v27 = *(void *)a3;
    uint64_t v28 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t result = *((void *)a3 + 3);
    if (!result) {
      return result;
    }
    if (v28) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v27);
    }
    return 0;
  }
  IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v39);
  if (!v40) {
    goto LABEL_30;
  }
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::optional<WTF::String>>(a3, (uint64_t)v41);
  if (!v42)
  {
LABEL_25:
    if (v40)
    {
      v26 = v39;
      v39 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v10);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
    }
    goto LABEL_30;
  }
  if (!v40) {
    goto LABEL_49;
  }
  v36 = v39;
  LOBYTE(v37[0]) = 0;
  LOBYTE(v37[1]) = 0;
  int v18 = LOBYTE(v41[1]);
  if (LOBYTE(v41[1]))
  {
    v37[0] = v41[0];
    LOBYTE(v37[1]) = 1;
  }
  char v38 = 1;
  v19 = *a4;
  *a4 = 0;
  v41[0] = v19;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v41[1], a2);
  uint64_t v20 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v20 = &unk_1EE9BA698;
  *(WTF::StringImpl **)(v20 + 8) = v41[0];
  v21 = v41[1];
  v41[0] = 0;
  v41[1] = 0;
  *(void *)(v20 + 16) = v21;
  v39 = (WTF::StringImpl *)v20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41[1]);
  v23 = v41[0];
  v41[0] = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v22);
    WTF::fastFree(v34, v35);
  }
  LOBYTE(v41[0]) = 0;
  LOBYTE(v41[1]) = 0;
  if (v18)
  {
    v24 = v37[0];
    v37[0] = 0;
    v41[0] = v24;
    LOBYTE(v41[1]) = 1;
  }
  WebKit::RemoteLegacyCDMFactoryProxy::supportsKeySystem(a1, (WebCore::LegacyCDM *)&v36, (WTF::String *)v41, (uint64_t *)&v39);
  if (LOBYTE(v41[1]))
  {
    v25 = v41[0];
    v41[0] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v16);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
  }
  v29 = v39;
  v39 = 0;
  if (v29) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v29 + 8))(v29);
  }
  if (!v38) {
    return 1;
  }
  if (LOBYTE(v37[1]))
  {
    v30 = v37[0];
    v37[0] = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v16);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
LABEL_43:
  v31 = v36;
  v36 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v16);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  return 1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27RemoteLegacyCDMFactoryProxy13RemoveSessionEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27RemoteLegacyCDMFactoryProxy13RemoveSessionEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA648;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages27RemoteLegacyCDMFactoryProxy13RemoveSessionEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvNS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v3 = 3156;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringEONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONSE_INS7_29RemoteLegacyCDMIdentifierTypeESI_yLSJ_1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringEONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONSE_INS7_29RemoteLegacyCDMIdentifierTypeESI_yLSJ_1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA670;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy9CreateCDMEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringEONSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore25MediaPlayerIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvONSE_INS7_29RemoteLegacyCDMIdentifierTypeESI_yLSJ_1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringENSt3__18optionalIS9_EEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringENSt3__18optionalIS9_EEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA698;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMFactoryProxy17SupportsKeySystemEN6WebKit27RemoteLegacyCDMFactoryProxyES8_FvRKNS_6StringENSt3__18optionalIS9_EEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  v4 = (uint64_t *)(a1 + 8);
  v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t *WebKit::RemoteLegacyCDMProxy::didReceiveMessage(uint64_t *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1135)
  {
    uint64_t v3 = (uint64_t)this;
    this = IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t *)a3, (uint64_t)&v4);
    if (v6)
    {
      if (v5)
      {
        *(void *)(v3 + 32) = v4;
      }
      else
      {
        *(void *)(v3 + 32) = 0;
        __break(1u);
      }
    }
  }
  return this;
}

uint64_t WebKit::RemoteLegacyCDMProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, WTF::StringImpl **a4)
{
  char v5 = a3;
  int v8 = a3[25];
  if (v8 != 3716)
  {
    if (v8 != 3717) {
      return 0;
    }
    IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v45);
    char v5 = (unsigned __int16 *)((_BYTE)v46 != 0);
    if (!(_BYTE)v46) {
      return (uint64_t)v5;
    }
    v9 = *a4;
    *a4 = 0;
    v48 = v9;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, a2);
    v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9BA6C0;
    v10[1] = v48;
    v11 = v49;
    v48 = 0;
    v49 = 0;
    v10[2] = v11;
    v44 = v10;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v49);
    v14 = v48;
    v48 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v12);
      WTF::fastFree(v31, v32);
    }
    unint64_t v15 = v46;
    if ((_BYTE)v46)
    {
      WebKit::RemoteLegacyCDMProxy::supportsMIMEType(a1, (const WTF::String *)&v45, (uint64_t *)&v44);
      uint64_t v17 = (uint64_t)v44;
      v44 = 0;
      if (v17) {
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
      if ((_BYTE)v46)
      {
        int v18 = v45;
        v45 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v16);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
      }
      return (uint64_t)v5;
    }
    __break(1u);
LABEL_32:
    unint64_t v35 = 0;
    v36 = 0;
    *(void *)char v5 = 0;
    *((void *)v5 + 1) = 0;
    uint64_t v37 = *((void *)v5 + 3);
    if (v37)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v37 + 16))(v37, v15, v13);
        v36 = *(WTF::StringImpl **)v5;
        unint64_t v35 = *((void *)v5 + 1);
      }
      else
      {
        unint64_t v35 = 0;
        v36 = 0;
      }
    }
    goto LABEL_33;
  }
  IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v48);
  if (!(_BYTE)v49)
  {
LABEL_39:
    char v40 = *(WTF::StringImpl **)v5;
    uint64_t v41 = *((void *)v5 + 1);
    *(void *)char v5 = 0;
    *((void *)v5 + 1) = 0;
    uint64_t v42 = *((void *)v5 + 3);
    if (v42 && v41) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v42 + 16))(v42, v40);
    }
    return 0;
  }
  unint64_t v13 = *((void *)v5 + 1);
  unint64_t v15 = *(void *)v5;
  unint64_t v19 = ((*((void *)v5 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v5;
  if (v13 < v19 || v13 - v19 <= 7) {
    goto LABEL_32;
  }
  v21 = (uint64_t *)(v15 + v19);
  *((void *)v5 + 2) = v21 + 1;
  if (!v15)
  {
    unint64_t v35 = v13;
    v36 = 0;
LABEL_33:
    *(void *)char v5 = 0;
    *((void *)v5 + 1) = 0;
    uint64_t v38 = *((void *)v5 + 3);
    if (v38 && v35) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v38 + 16))(v38, v36);
    }
    if ((_BYTE)v49)
    {
      v39 = v48;
      v48 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2) {
          WTF::StringImpl::destroy(v39, v36);
        }
        else {
          *(_DWORD *)v39 -= 2;
        }
      }
    }
    goto LABEL_39;
  }
  uint64_t v22 = *v21;
  v45 = v48;
  uint64_t v46 = v22;
  char v47 = 1;
  v23 = *a4;
  *a4 = 0;
  v48 = v23;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v49, a2);
  v24 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v24 = &unk_1EE9BA6E8;
  v24[1] = v48;
  v25 = v49;
  v48 = 0;
  v49 = 0;
  v24[2] = v25;
  v44 = v24;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v49);
  uint64_t v27 = v48;
  v48 = 0;
  if (v27)
  {
    IPC::Encoder::~Encoder(v27, v26);
    WTF::fastFree(v33, v34);
  }
  WebKit::RemoteLegacyCDMProxy::createSession(a1, (uint64_t)&v45, v22, (uint64_t *)&v44);
  uint64_t v29 = (uint64_t)v44;
  v44 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  if (v47)
  {
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2) {
        WTF::StringImpl::destroy(v30, v28);
      }
      else {
        *(_DWORD *)v30 -= 2;
      }
    }
  }
  return 1;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebExtensionTabIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(a1, &v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA6C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA6C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy16SupportsMIMETypeEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy13CreateSessionEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEyONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA6E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy13CreateSessionEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEyONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA6E8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages20RemoteLegacyCDMProxy13CreateSessionEN6WebKit20RemoteLegacyCDMProxyES8_FvRKNS_6StringEyONS_17CompletionHandlerIFvONS_23ObjectIdentifierGenericINS7_36RemoteLegacyCDMSessionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

unsigned int *WebKit::RemoteLegacyCDMSession::didReceiveMessage(unsigned int *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 == 1137)
  {
    unint64_t v8 = *((void *)a3 + 1);
    uint64_t v11 = *(void *)a3;
    unint64_t v12 = ((*((void *)a3 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)a3;
    if (v8 < v12 || v8 - v12 <= 1)
    {
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v6 = (IPC::Decoder *)*((void *)a3 + 3);
      if (!v6) {
        goto LABEL_37;
      }
      goto LABEL_47;
    }
    uint64_t v14 = v11 + v12;
    *((void *)a3 + 2) = v14 + 2;
    if (!v11)
    {
      unint64_t v22 = v8;
      uint64_t v23 = 0;
      goto LABEL_37;
    }
    unint64_t v15 = ((v14 + 5) & 0xFFFFFFFFFFFFFFFCLL) - v11;
    if (v8 < v15 || v8 - v15 <= 3)
    {
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v25 = *((void *)a3 + 3);
      if (v25)
      {
        if (v8)
        {
          (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
          uint64_t v28 = *(void *)a3;
          uint64_t v29 = *((void *)a3 + 1);
          uint64_t v30 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (v30)
          {
            if (v29) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28);
            }
          }
        }
      }
      goto LABEL_41;
    }
    *((void *)a3 + 2) = ((v14 + 5) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    uint64_t v17 = *((void *)this + 5);
    if (v17)
    {
      this = *(unsigned int **)(v17 + 8);
      if (this)
      {
        int v18 = *(uint64_t (**)(void))(*(void *)this + 24);
        return (unsigned int *)v18();
      }
    }
  }
  else
  {
    if (v5 != 1138) {
      return this;
    }
    IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a3, &v34);
    if (v35)
    {
      uint64_t v6 = IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v36);
      if (v37)
      {
        if (v35)
        {
          v31 = v34;
          v32 = v36;
          char v33 = 1;
          this = WebKit::RemoteLegacyCDMSession::sendMessage(v4, &v31, &v32);
          if (v33)
          {
            v10 = v32;
            v32 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2) {
                WTF::StringImpl::destroy(v10, v9);
              }
              else {
                *(_DWORD *)v10 -= 2;
              }
            }
            this = (unsigned int *)v31;
            v31 = 0;
            if (this) {
              return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(this, v9);
            }
          }
          return this;
        }
        __break(1u);
LABEL_47:
        if (v8)
        {
          (*(void (**)(IPC::Decoder *))(*(void *)v6 + 16))(v6);
          uint64_t v23 = *(void *)a3;
          unint64_t v22 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v22 = 0;
          uint64_t v23 = 0;
        }
LABEL_37:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v24 = *((void *)a3 + 3);
        if (v24 && v22) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v24 + 16))(v24, v23, v22);
        }
LABEL_41:
        uint64_t v26 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (unsigned int *)*((void *)a3 + 3);
        if (this && v26)
        {
          uint64_t v27 = *(uint64_t (**)(void))(*(void *)this + 16);
          return (unsigned int *)v27();
        }
        return this;
      }
      if (v35)
      {
        unint64_t v19 = (unsigned int *)v34;
        v34 = 0;
        if (v19) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v7);
        }
      }
    }
    uint64_t v20 = *(void *)a3;
    uint64_t v21 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    this = (unsigned int *)*((void *)a3 + 3);
    if (this && v21) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)this + 16))(this, v20);
    }
  }
  return this;
}

unsigned int *non-virtual thunk to'WebKit::RemoteLegacyCDMSession::didReceiveMessage(WebKit::RemoteLegacyCDMSession *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteLegacyCDMSession::didReceiveMessage((unsigned int *)this - 2, a2, a3);
}

void *WebKit::RemoteLegacyCDMSessionProxy::didReceiveMessage(void *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1136)
  {
    this = (void *)this[8];
    if (this) {
      return (void *)(*(uint64_t (**)(void))(*this + 48))();
    }
  }
  return this;
}

uint64_t WebKit::RemoteLegacyCDMSessionProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, WTF::StringImpl **a4)
{
  int v8 = *(unsigned __int16 *)(a3 + 50);
  if (v8 != 3718)
  {
    if (v8 != 3720)
    {
      if (v8 == 3719)
      {
        IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a3, (uint64_t)&v47);
        if (v48)
        {
          IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>((IPC::Decoder *)a3, &v49);
          if ((_BYTE)v50)
          {
            if (v48)
            {
              v44 = v47;
              v45 = v49;
              char v46 = 1;
              unint64_t v12 = *a4;
              *a4 = 0;
              v49 = v12;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, a2);
              unint64_t v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
              *(void *)unint64_t v13 = &unk_1EE9BA710;
              *((void *)v13 + 1) = v49;
              uint64_t v14 = v50;
              v49 = 0;
              v50 = 0;
              *((void *)v13 + 2) = v14;
              char v47 = v13;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v50);
              v16 = v49;
              v49 = 0;
              if (v16)
              {
                IPC::Encoder::~Encoder(v16, v15);
                WTF::fastFree(v42, v43);
              }
              WebKit::RemoteLegacyCDMSessionProxy::generateKeyRequest(a1, (uint64_t)&v44, &v45, (uint64_t *)&v47);
              int v18 = v47;
              char v47 = 0;
              if (v18) {
                (*(void (**)(WTF::StringImpl *))(*(void *)v18 + 8))(v18);
              }
              if (v46)
              {
                unint64_t v19 = (unsigned int *)v45;
                v45 = 0;
                if (v19) {
                  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v17);
                }
                uint64_t v20 = v44;
                v44 = 0;
                if (v20)
                {
                  if (*(_DWORD *)v20 == 2) {
                    WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
                  }
                  else {
                    *(_DWORD *)v20 -= 2;
                  }
                }
              }
              return 1;
            }
            goto LABEL_51;
          }
          if (v48)
          {
            v34 = v47;
            char v47 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2) {
                WTF::StringImpl::destroy(v34, v10);
              }
              else {
                *(_DWORD *)v34 -= 2;
              }
            }
          }
        }
        v10 = *(WTF::StringImpl **)a3;
        uint64_t v11 = *(void *)(a3 + 8);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        char v9 = *(WTF::StringImpl **)(a3 + 24);
        if (v9) {
          goto LABEL_52;
        }
      }
      return 0;
    }
    IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((IPC::Decoder *)a3, (uint64_t)&v44);
    BOOL v21 = (_BYTE)v45 != 0;
    if (!(_BYTE)v45) {
      return v21;
    }
    uint64_t v28 = *a4;
    *a4 = 0;
    v49 = v28;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, a2);
    uint64_t v29 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v29 = &unk_1EE9BA738;
    *((void *)v29 + 1) = v49;
    uint64_t v30 = v50;
    v49 = 0;
    v50 = 0;
    *((void *)v29 + 2) = v30;
    char v47 = v29;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v50);
    char v9 = v49;
    v49 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v10);
      char v9 = (WTF::StringImpl *)WTF::fastFree(v39, v40);
    }
    if ((_BYTE)v45)
    {
      WebKit::RemoteLegacyCDMSessionProxy::update(a1, &v44, (uint64_t *)&v47);
      v32 = v47;
      char v47 = 0;
      if (v32) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v32 + 8))(v32);
      }
      if ((_BYTE)v45)
      {
        char v33 = (unsigned int *)v44;
        v44 = 0;
        if (v33) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v33, v31);
        }
      }
      return v21;
    }
LABEL_51:
    __break(1u);
LABEL_52:
    if (v11) {
      (*(void (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v9 + 16))(v9, v10);
    }
    return 0;
  }
  IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a3, (uint64_t)&v44);
  BOOL v21 = (_BYTE)v45 != 0;
  if (!(_BYTE)v45) {
    return v21;
  }
  unint64_t v22 = *a4;
  *a4 = 0;
  v49 = v22;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v50, a2);
  uint64_t v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v23 = &unk_1EE9BA760;
  *((void *)v23 + 1) = v49;
  uint64_t v24 = v50;
  v49 = 0;
  v50 = 0;
  *((void *)v23 + 2) = v24;
  char v47 = v23;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v50);
  char v9 = v49;
  v49 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v10);
    char v9 = (WTF::StringImpl *)WTF::fastFree(v37, v38);
  }
  if (!(_BYTE)v45) {
    goto LABEL_51;
  }
  uint64_t v25 = v44;
  v44 = 0;
  v49 = v25;
  WebKit::RemoteLegacyCDMSessionProxy::cachedKeyForKeyID(a1, (uint64_t)&v49, (uint64_t *)&v47);
  uint64_t v27 = v49;
  v49 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v26);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  char v35 = v47;
  char v47 = 0;
  if (v35) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v35 + 8))(v35);
  }
  if ((_BYTE)v45)
  {
    v36 = v44;
    v44 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2) {
        WTF::StringImpl::destroy(v36, v26);
      }
      else {
        *(_DWORD *)v36 -= 2;
      }
    }
  }
  return v21;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvRKNS_6StringEONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_SB_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_SB_tjEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvRKNS_6StringEONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_SB_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_SB_tjEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA710;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy18GenerateKeyRequestEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvRKNS_6StringEONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvSK_SB_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSK_SB_tjEE4callESK_SB_tj(uint64_t a1, atomic_uint **a2, uint64_t *a3, __int16 a4, int a5)
{
  char v9 = (uint64_t *)(a1 + 8);
  v10 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v10, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a3);
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v10, a4);
  uint64_t v11 = (_DWORD *)IPC::Encoder::grow(v10, 4uLL, 4);
  if (v12 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v11 = a5;
    uint64_t v13 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v13, v9, 0, 0);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>(a1, &v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v6 = *((void *)a1 + 3);
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvbSH_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbSH_tjEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvbSH_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbSH_tjEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA738;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy6UpdateEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISB_EENS_21DefaultRefDerefTraitsISB_EEEEONS_17CompletionHandlerIFvbSH_tjEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbSH_tjEE4callEbSH_tj(uint64_t a1, char a2, atomic_uint **a3, __int16 a4, int a5)
{
  v10 = (uint64_t *)(a1 + 8);
  uint64_t v11 = *(IPC::Encoder **)(a1 + 8);
  unint64_t v12 = (unsigned char *)IPC::Encoder::grow(v11, 1uLL, 1);
  if (!v13
    || (*unint64_t v12 = a2,
        IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v11, a3), IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v11, a4), uint64_t v14 = (_DWORD *)IPC::Encoder::grow(v11, 4uLL, 4), v15 <= 3))
  {
    __break(0xC471u);
    JUMPOUT(0x198A0AEB4);
  }
  _DWORD *v14 = a5;
  uint64_t v16 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v16, v10, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA760;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteLegacyCDMSessionProxy17CachedKeyForKeyIDEN6WebKit27RemoteLegacyCDMSessionProxyES8_FvNS_6StringEONS_17CompletionHandlerIFvONS_6RefPtrIN7WebCore12SharedBufferENS_12RawPtrTraitsISD_EENS_21DefaultRefDerefTraitsISD_EEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, atomic_uint **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

WTF::StringImpl *WebKit::RemoteMediaEngineConfigurationFactoryProxy::didReceiveMessage(WTF::StringImpl *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v5 = (uint64_t)this;
  int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 == 1140)
  {
    IPC::Decoder::decode<WebCore::MediaEncodingConfiguration>((uint64_t *)a3, (uint64_t)&v43);
    LOBYTE(v28) = 0;
    if (v57)
    {
      char v31 = 0;
      if (v46)
      {
        uint64_t v13 = v43;
        v43 = 0;
        uint64_t v28 = v13;
        long long v29 = v44;
        long long v30 = v45;
        char v31 = 1;
      }
      LOBYTE(v32) = 0;
      char v34 = 0;
      if (v49)
      {
        long long v14 = v47;
        long long v47 = 0uLL;
        long long v32 = v14;
        v33[0] = v48[0];
        *(_OWORD *)((char *)v33 + 10) = *(_OWORD *)((char *)v48 + 10);
        char v34 = 1;
      }
      LOBYTE(v35) = 0;
      char v37 = 0;
      if (v52)
      {
        uint64_t v35 = v50;
        uint64_t v15 = v51;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v36 = v15;
        char v37 = 1;
      }
      LOBYTE(v38) = 0;
      unsigned __int8 v40 = 0;
      if (v55)
      {
        uint64_t v38 = v53;
        uint64_t v16 = v54;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v39 = v16;
        int v12 = 1;
        unsigned __int8 v40 = 1;
      }
      else
      {
        int v12 = 0;
      }
      LOBYTE(v41) = v56;
      char v42 = 1;
      std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](&v43, v7);
      uint64_t v23 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v20)
      {
        v43 = (WTF::StringImpl *)v23;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v44, a2);
        uint64_t v24 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v24 = &unk_1EE9BA7B0;
        *((void *)v24 + 1) = v43;
        uint64_t v25 = v44;
        *(void *)&long long v44 = 0;
        *((void *)v24 + 2) = v25;
        uint64_t v27 = v24;
        this = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
        if (v42)
        {
          WebKit::RemoteMediaEngineConfigurationFactoryProxy::createEncodingConfiguration(v5, (uint64_t)&v28, (uint64_t *)&v27);
          this = v27;
          uint64_t v27 = 0;
          if (this) {
LABEL_33:
          }
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)this + 8))(this);
LABEL_34:
          if (!v42) {
            return this;
          }
          int v12 = v40;
          goto LABEL_36;
        }
LABEL_46:
        __break(1u);
        return this;
      }
LABEL_36:
      if (v12) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v38, v20);
      }
      if (v37) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v35, v20);
      }
      this = (WTF::StringImpl *)std::__optional_destruct_base<WebCore::AudioConfiguration,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v32, (WTF::StringImpl *)v20);
      if (v31)
      {
        this = v28;
        uint64_t v28 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v26);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
      return this;
    }
  }
  else
  {
    if (v6 != 1139) {
      return this;
    }
    IPC::Decoder::decode<WebCore::MediaDecodingConfiguration>((uint64_t *)a3, (uint64_t)&v43);
    LOBYTE(v28) = 0;
    if (v57)
    {
      char v31 = 0;
      if (v46)
      {
        uint64_t v8 = v43;
        v43 = 0;
        uint64_t v28 = v8;
        long long v29 = v44;
        long long v30 = v45;
        char v31 = 1;
      }
      LOBYTE(v32) = 0;
      char v34 = 0;
      if (v49)
      {
        long long v9 = v47;
        long long v47 = 0uLL;
        long long v32 = v9;
        v33[0] = v48[0];
        *(_OWORD *)((char *)v33 + 10) = *(_OWORD *)((char *)v48 + 10);
        char v34 = 1;
      }
      LOBYTE(v35) = 0;
      char v37 = 0;
      if (v52)
      {
        uint64_t v35 = v50;
        uint64_t v10 = v51;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        uint64_t v36 = v10;
        char v37 = 1;
      }
      LOBYTE(v38) = 0;
      unsigned __int8 v40 = 0;
      if (v55)
      {
        uint64_t v38 = v53;
        uint64_t v11 = v54;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        uint64_t v39 = v11;
        int v12 = 1;
        unsigned __int8 v40 = 1;
      }
      else
      {
        int v12 = 0;
      }
      __int16 v41 = v56;
      char v42 = 1;
      std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](&v43, v7);
      uint64_t v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v20)
      {
        v43 = (WTF::StringImpl *)v19;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v44, a2);
        BOOL v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)BOOL v21 = &unk_1EE9BA788;
        *((void *)v21 + 1) = v43;
        uint64_t v22 = v44;
        *(void *)&long long v44 = 0;
        *((void *)v21 + 2) = v22;
        uint64_t v27 = v21;
        this = (WTF::StringImpl *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v44);
        if (v42)
        {
          WebKit::RemoteMediaEngineConfigurationFactoryProxy::createDecodingConfiguration(v5, (uint64_t)&v28, (uint64_t *)&v27);
          this = v27;
          uint64_t v27 = 0;
          if (this) {
            goto LABEL_33;
          }
          goto LABEL_34;
        }
        goto LABEL_46;
      }
      goto LABEL_36;
    }
  }
  std::__optional_destruct_base<WebCore::MediaDecodingConfiguration,false>::~__optional_destruct_base[abi:sn180100](&v43, v7);
  uint64_t v17 = *(void *)a3;
  uint64_t v18 = *((void *)a3 + 1);
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  this = (WTF::StringImpl *)*((void *)a3 + 3);
  if (this && v18) {
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, uint64_t))(*(void *)this + 16))(this, v17);
  }
  return this;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateDecodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaDecodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesDecodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateDecodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaDecodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesDecodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA788;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateDecodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaDecodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesDecodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3157;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::MediaCapabilitiesDecodingInfo,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateEncodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaEncodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesEncodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateEncodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaEncodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesEncodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA7B0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages42RemoteMediaEngineConfigurationFactoryProxy27CreateEncodingConfigurationEN6WebKit42RemoteMediaEngineConfigurationFactoryProxyES8_FvON7WebCore26MediaEncodingConfigurationEONS_17CompletionHandlerIFvONS9_29MediaCapabilitiesEncodingInfoEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3158;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::MediaCapabilitiesEncodingInfo,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::RemoteMediaPlayerManagerProxy::didReceiveMessage(WebKit::RemoteMediaPlayerManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 != 1142)
  {
    if (v5 != 1141) {
      return;
    }
    uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v7) {
      goto LABEL_6;
    }
    uint64_t v8 = v6;
    uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v10) {
      goto LABEL_6;
    }
    uint64_t v11 = v9;
    unsigned __int16 v12 = IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a3);
    if (v12 <= 0xFFu) {
      goto LABEL_6;
    }
    char v18 = v12;
    IPC::ArgumentCoder<WebKit::RemoteMediaPlayerProxyConfiguration,void>::decode(a3, v32);
    if (v33
      || (uint64_t v24 = *(void *)a3,
          uint64_t v25 = *((void *)a3 + 1),
          *(void *)a3 = 0,
          *((void *)a3 + 1) = 0,
          (uint64_t v26 = *((void *)a3 + 3)) != 0)
      && v25
      && ((*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24), v33))
    {
      uint64_t v27 = v8;
      uint64_t v28 = v11;
      char v29 = v18;
      WebKit::RemoteMediaPlayerProxyConfiguration::RemoteMediaPlayerProxyConfiguration((uint64_t)v30, v32);
      char v31 = 1;
      if (!v33) {
        goto LABEL_16;
      }
      WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)v32, v19);
      if (v31) {
        goto LABEL_16;
      }
    }
    else
    {
LABEL_6:
      LOBYTE(v27) = 0;
      char v31 = 0;
    }
    uint64_t v13 = *(void *)a3;
    uint64_t v14 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v15 = *((void *)a3 + 3);
    if (!v15) {
      return;
    }
    if (!v14) {
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    if (!v31) {
      return;
    }
LABEL_16:
    WebKit::RemoteMediaPlayerManagerProxy::createMediaPlayer((uint64_t)this, v27, v28, v29, (uint64_t)v30);
    if (v31) {
      WebKit::RemoteMediaPlayerProxyConfiguration::~RemoteMediaPlayerProxyConfiguration((WebKit::RemoteMediaPlayerProxyConfiguration *)v30, v20);
    }
    return;
  }
  uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
  if (v17)
  {
    WebKit::RemoteMediaPlayerManagerProxy::deleteMediaPlayer((uint64_t *)this, v16);
  }
  else
  {
    uint64_t v21 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v22 = *((void *)a3 + 3);
    if (v22 && v21)
    {
      uint64_t v23 = *(void (**)(void))(*(void *)v22 + 16);
      v23();
    }
  }
}

uint64_t WebKit::RemoteMediaPlayerManagerProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, atomic_uchar *volatile **a4)
{
  int v9 = *((unsigned __int16 *)a3 + 25);
  if (v9 == 3723)
  {
    unsigned __int16 v16 = IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a3);
    if (v16 > 0xFFu)
    {
      unsigned __int8 v4 = v16;
      IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::decode(a3, &v55);
      if (!v57) {
        goto LABEL_52;
      }
      goto LABEL_26;
    }
    goto LABEL_8;
  }
  if (v9 != 3722)
  {
    if (v9 != 3721) {
      return 0;
    }
    unsigned __int16 v10 = IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a3);
    if (v10 > 0xFFu)
    {
      unsigned __int8 v11 = v10;
      unsigned __int16 v12 = (IPC::Encoder *)*a4;
      *a4 = 0;
      char v49 = v12;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v51, a2);
      uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v13 = &unk_1EE9BA7D8;
      *((void *)v13 + 1) = v49;
      uint64_t v14 = v51;
      uint64_t v51 = 0;
      *((void *)v13 + 2) = v14;
      char v55 = v13;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v51);
      WebKit::RemoteMediaPlayerManagerProxy::getSupportedTypes(a1, v11, (uint64_t *)&v55);
      uint64_t v15 = v55;
      char v55 = 0;
      if (v15) {
        (*(void (**)(IPC::Encoder *))(*(void *)v15 + 8))(v15);
      }
      return 1;
    }
LABEL_46:
    uint64_t v42 = *(void *)a3;
    uint64_t v43 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t result = *((void *)a3 + 3);
    if (!result) {
      return result;
    }
    if (v43) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v42);
    }
    return 0;
  }
  unsigned __int16 v20 = IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(a3);
  if (v20 < 0x100u) {
    goto LABEL_46;
  }
  unsigned __int8 v4 = v20;
  IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v58);
  if (!v59) {
    goto LABEL_46;
  }
  IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v55);
  if (!LOBYTE(v56[0]))
  {
    if (v59)
    {
      uint64_t v38 = v58;
      v58 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2) {
          WTF::StringImpl::destroy(v38, v21);
        }
        else {
          *(_DWORD *)v38 -= 2;
        }
      }
    }
    goto LABEL_46;
  }
  if (v59)
  {
    uint64_t v51 = v58;
    char v52 = v55;
    char v53 = 1;
    uint64_t v22 = (IPC::Encoder *)*a4;
    *a4 = 0;
    char v55 = v22;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v56, a2);
    uint64_t v23 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v23 = &unk_1EE9BA828;
    *((void *)v23 + 1) = v55;
    uint64_t v24 = v56[0];
    char v55 = 0;
    v56[0] = 0;
    *((void *)v23 + 2) = v24;
    v58 = v23;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v56);
    uint64_t v26 = v55;
    char v55 = 0;
    if (v26)
    {
      IPC::Encoder::~Encoder(v26, v25);
      WTF::fastFree(v44, v45);
    }
    WebKit::RemoteMediaPlayerManagerProxy::supportsKeySystem(a1, v4, (uint64_t)&v51, (uint64_t)&v52, (uint64_t *)&v58);
    uint64_t v28 = v58;
    v58 = 0;
    if (v28) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v28 + 8))(v28);
    }
    if (v53)
    {
      char v29 = v52;
      char v52 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v27);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      __int16 v41 = v51;
      uint64_t v51 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2) {
          WTF::StringImpl::destroy(v41, v27);
        }
        else {
          *(_DWORD *)v41 -= 2;
        }
      }
    }
    return 1;
  }
  do
  {
    __break(1u);
LABEL_52:
    uint64_t v46 = *(void *)a3;
    uint64_t v47 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v48 = *((void *)a3 + 3);
    if (v48 && v47 && ((*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46), v57))
    {
LABEL_26:
      unsigned __int8 v50 = v4;
      WebCore::MediaEngineSupportParameters::MediaEngineSupportParameters((uint64_t)&v51, (uint64_t *)&v55);
      char v54 = 1;
      if (!v57) {
        goto LABEL_28;
      }
      WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v55, v30);
      if (v54) {
        goto LABEL_28;
      }
    }
    else
    {
LABEL_8:
      unsigned __int8 v50 = 0;
      char v54 = 0;
    }
    uint64_t v17 = *(void *)a3;
    uint64_t v18 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t result = *((void *)a3 + 3);
    if (!result) {
      return result;
    }
    if (!v18) {
      return 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
    if (!v54) {
      return 0;
    }
LABEL_28:
    char v31 = (IPC::Encoder *)*a4;
    *a4 = 0;
    char v55 = v31;
    a4 = v56;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v56, a2);
    long long v32 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(void *)long long v32 = &unk_1EE9BA800;
    *((void *)v32 + 1) = v55;
    char v33 = v56[0];
    char v55 = 0;
    v56[0] = 0;
    *((void *)v32 + 2) = v33;
    v58 = v32;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v56);
    uint64_t v35 = v55;
    char v55 = 0;
    if (v35)
    {
      IPC::Encoder::~Encoder(v35, v34);
      WTF::fastFree(v39, v40);
    }
  }
  while (!v54);
  WebKit::RemoteMediaPlayerManagerProxy::supportsTypeAndCodecs(a1, v50, (uint64_t)&v51, (uint64_t *)&v58);
  char v37 = v58;
  v58 = 0;
  if (v37) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v37 + 8))(v37);
  }
  if (v54) {
    WebCore::MediaEngineSupportParameters::~MediaEngineSupportParameters((WebCore::MediaEngineSupportParameters *)&v51, v36);
  }
  return 1;
}

uint64_t IPC::Decoder::decode<WebCore::MediaPlayerMediaEngineIdentifier>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v18;
        uint64_t v8 = *v18;
        unint64_t v7 = v18[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  unsigned __int8 v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7)
    {
      uint64_t v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a1 = v17;
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 0xA)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    goto LABEL_8;
  }
  int v6 = 1;
LABEL_8:
  uint64_t v11 = v5 | (v6 << 8);
  if (v11 <= 0xFF)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        unsigned int v16 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v11;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA7D8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEONS_17CompletionHandlerIFvONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS9_28MediaEngineSupportParametersEONS_17CompletionHandlerIFvNS9_23MediaPlayerSupportsTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS9_28MediaEngineSupportParametersEONS_17CompletionHandlerIFvNS9_23MediaPlayerSupportsTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA800;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS9_28MediaEngineSupportParametersEONS_17CompletionHandlerIFvNS9_23MediaPlayerSupportsTypeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, char a2)
{
  unsigned __int8 v4 = (uint64_t *)(a1 + 8);
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17SupportsKeySystemEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS_6StringESD_ONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17SupportsKeySystemEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS_6StringESD_ONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA828;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages29RemoteMediaPlayerManagerProxy17SupportsKeySystemEN6WebKit29RemoteMediaPlayerManagerProxyES8_FvN7WebCore32MediaPlayerMediaEngineIdentifierEOKNS_6StringESD_ONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  unsigned __int8 v4 = (uint64_t *)(a1 + 8);
  unsigned int v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl **WebKit::RemoteMediaPlayerMIMETypeCache::addSupportedTypes(WTF::StringImpl **result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (v3)
  {
    unsigned __int8 v4 = (uint64_t *)(result + 4);
    unsigned int v5 = *(WTF::StringImpl ***)a2;
    uint64_t v6 = 8 * v3;
    do
    {
      uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v4, v5++, a3, (uint64_t)v7);
      v6 -= 8;
    }
    while (v6);
  }
  return result;
}

BOOL WebKit::RemoteMediaPlayerMIMETypeCache::isEmpty(WebKit::RemoteMediaPlayerMIMETypeCache *this)
{
  if (!*((unsigned char *)this + 40)) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 4);
  return !v1 || *(_DWORD *)(v1 - 12) == 0;
}

uint64_t WebKit::RemoteMediaPlayerMIMETypeCache::supportedTypes(WebKit::RemoteMediaPlayerMIMETypeCache *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 40))
  {
    uint64_t v3 = *(WTF::StringImpl ***)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)this)
                              + 32);
    char v4 = *((unsigned char *)this + 8);
    uint64_t v32 = 0;
    IPC::Connection::createSyncMessageEncoder(3721, 0, &v32, &v31);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v31, v4);
    IPC::Connection::sendSyncMessage((uint64_t)v3, v32, (uint64_t *)&v31, 0, (uint64_t)&v29, INFINITY);
    int v5 = v30;
    if (v30)
    {
      if (v30 == 1)
      {
        LOBYTE(v22[0]) = (_BYTE)v29;
        int v6 = 1;
        int v25 = 1;
LABEL_13:
        ((void (*)(long long *, IPC::Decoder **))off_1EE9BA860[v5])(&buf, &v29);
LABEL_14:
        unsigned __int16 v12 = v31;
        char v31 = 0;
        if (v12)
        {
          IPC::Encoder::~Encoder(v12, v7);
          WTF::fastFree(v16, v17);
          if (v6) {
            goto LABEL_16;
          }
        }
        else if (v6)
        {
LABEL_16:
          uint64_t v13 = qword_1EB358078;
          if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR))
          {
            uint64_t v21 = IPC::errorAsString();
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v21;
            _os_log_error_impl(&dword_1985F2000, v13, OS_LOG_TYPE_ERROR, "RemoteMediaPlayerMIMETypeCache::supportedTypes: Sync IPC to the GPUProcess failed with error %{public}s", (uint8_t *)&buf, 0xCu);
          }
          int v14 = 1;
          goto LABEL_19;
        }
        if (v1)
        {
          uint64_t v18 = 8 * v1;
          do
          {
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)this + 4, v3++, v8, (uint64_t)&buf);
            v18 -= 8;
          }
          while (v18);
          int v14 = v25;
          *((unsigned char *)this + 40) = 1;
        }
        else
        {
          int v14 = 0;
          *((unsigned char *)this + 40) = 1;
        }
LABEL_19:
        ((void (*)(long long *, void *))off_1EE9BA840[v14])(&buf, v22);
        return (uint64_t)this + 32;
      }
LABEL_28:
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    LOBYTE(v26) = 0;
    char v28 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v29, &v26);
    if (v28)
    {
      if (v30) {
        goto LABEL_28;
      }
      uint64_t v9 = v29;
      char v29 = 0;
      uint64_t v3 = v26;
      uint64_t v26 = 0;
      int v10 = v27;
      unsigned int v1 = HIDWORD(v27);
      uint64_t v27 = 0;
      long long buf = 0uLL;
      v22[0] = v9;
      v22[1] = v3;
      uint64_t v34 = 0;
      int v23 = v10;
      unsigned int v24 = v1;
      int v25 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&buf + 8, v7);
      uint64_t v11 = (IPC::Decoder *)buf;
      *(void *)&long long buf = 0;
      if (v11)
      {
        IPC::Decoder::~Decoder(v11);
        WTF::fastFree(v19, v20);
      }
      if (v28) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v26, v7);
      }
      int v6 = 0;
    }
    else
    {
      LOBYTE(v22[0]) = 13;
      int v6 = 1;
      int v25 = 1;
    }
    int v5 = v30;
    if (v30 == -1) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  return (uint64_t)this + 32;
}

uint64_t WebKit::RemoteMediaPlayerMIMETypeCache::supportsTypeAndCodecs(WebKit::RemoteMediaPlayerMIMETypeCache *this, const WebCore::MediaEngineSupportParameters *a2)
{
  uint64_t v2 = *(WTF::StringImpl **)a2;
  if (!*(void *)a2 || !*((_DWORD *)v2 + 1))
  {
    LOBYTE(v3) = 2;
    return v3;
  }
  uint64_t v3 = (uint64_t)a2;
  *(_DWORD *)v2 += 2;
  char v54 = v2;
  char v55 = *((unsigned char *)a2 + 56);
  __int16 v56 = *(_WORD *)((char *)a2 + 57);
  int v5 = (uint64_t *)((char *)this + 16);
  if (!*((unsigned char *)this + 24))
  {
    *((void *)this + 2) = 0;
    *((unsigned char *)this + 24) = 1;
    goto LABEL_20;
  }
  uint64_t v6 = *v5;
  if (!*v5) {
    goto LABEL_20;
  }
  int v7 = *(_DWORD *)(v6 - 8);
  unsigned int v8 = WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>((uint64_t)&v54) & v7;
  uint64_t v9 = v6 + 24 * v8;
  uint64_t v12 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v9, v10, v11);
  if (v12)
  {
LABEL_10:
    uint64_t v17 = *v5;
    if (*v5)
    {
      uint64_t v15 = (char *)*(unsigned int *)(v17 - 4);
      uint64_t v9 = v17 + 24 * v15;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    int v16 = 1;
    while (1)
    {
      if (*(void *)v9 != -1)
      {
        uint64_t v12 = WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::equal<0ul>(v9, (uint64_t)&v54, v14);
        if (v12) {
          break;
        }
      }
      unsigned int v8 = (v8 + v16) & v7;
      uint64_t v9 = v6 + 24 * v8;
      uint64_t v12 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v9, (uint64_t)v13, v14);
      ++v16;
      if (v12) {
        goto LABEL_10;
      }
    }
  }
  unint64_t v18 = *((unsigned __int8 *)this + 24);
  if (!*((unsigned char *)this + 24)) {
    goto LABEL_77;
  }
  uint64_t v19 = *v5;
  if (*v5) {
    v19 += 24 * *(unsigned int *)(v19 - 4);
  }
  if (v19 == v9)
  {
LABEL_20:
    uint64_t v20 = *(void *)(WebKit::RemoteMediaPlayerManager::gpuProcessConnection(*(WebKit::RemoteMediaPlayerManager **)this)
                    + 32);
    LODWORD(v9) = *((unsigned __int8 *)this + 8);
    uint64_t v60 = 0;
    IPC::Connection::createSyncMessageEncoder(3723, 0, &v60, &v59);
    uint64_t v21 = v59;
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v59, v9);
    IPC::ArgumentCoder<WebCore::MediaEngineSupportParameters,void>::encode(v21, v3);
    IPC::Connection::sendSyncMessage(v20, v60, (uint64_t *)&v59, 0, (uint64_t)&v57, INFINITY);
    int v22 = v58;
    if (v58)
    {
      if (v58 == 1)
      {
        LOBYTE(v51) = v57;
        goto LABEL_27;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      uint64_t v3 = v57;
      unint64_t v23 = *(void *)(v57 + 8);
      unsigned int v24 = *(char **)v57;
      unint64_t v25 = *(void *)(v57 + 16) - *(void *)v57;
      if (v23 <= v25)
      {
        unint64_t v18 = 0;
        uint64_t v15 = 0;
        *(void *)uint64_t v57 = 0;
        *(void *)(v3 + 8) = 0;
        uint64_t v28 = *(void *)(v3 + 24);
        if (v28)
        {
          if (v23)
          {
            (*(void (**)(uint64_t))(*(void *)v28 + 16))(v28);
            uint64_t v15 = *(char **)v3;
            unint64_t v18 = *(void *)(v3 + 8);
          }
          else
          {
            unint64_t v18 = 0;
            uint64_t v15 = 0;
          }
        }
LABEL_29:
        unint64_t v23 = 0;
        unsigned int v24 = 0;
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        uint64_t v12 = *(void *)(v3 + 24);
        if (!v12) {
          goto LABEL_30;
        }
        goto LABEL_78;
      }
      uint64_t v26 = &v24[v25];
      uint64_t v15 = v26 + 1;
      *(void *)(v57 + 16) = v26 + 1;
      if (v24)
      {
        LODWORD(v9) = *v26;
        if (v9 >= 3) {
          goto LABEL_30;
        }
        uint64_t v57 = 0;
        uint64_t v51 = v3;
        char v52 = v9;
LABEL_27:
        int v53 = v22;
        int v27 = v22;
LABEL_32:
        ((void (*)(char *, uint64_t *))off_1EE9BA860[v27])(&v61, &v57);
        while (1)
        {
          uint64_t v12 = (uint64_t)v59;
          char v59 = 0;
          if (v12)
          {
            IPC::Encoder::~Encoder((IPC::Encoder *)v12, v24);
            uint64_t v12 = WTF::fastFree(v42, v43);
          }
          if (v22) {
            uint64_t v3 = 0;
          }
          else {
            uint64_t v3 = v9;
          }
          if (v22)
          {
            LOBYTE(v3) = 0;
            int v30 = 1;
            goto LABEL_63;
          }
          unint64_t v18 = *((unsigned __int8 *)this + 24);
          if (*((unsigned char *)this + 24)) {
            break;
          }
LABEL_77:
          __break(1u);
LABEL_78:
          if (v18)
          {
            (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v12 + 16))(v12, v15, v18);
            unsigned int v24 = *(char **)v3;
            unint64_t v23 = *(void *)(v3 + 8);
          }
          else
          {
            unint64_t v23 = 0;
            unsigned int v24 = 0;
          }
LABEL_30:
          *(void *)uint64_t v3 = 0;
          *(void *)(v3 + 8) = 0;
          uint64_t v29 = *(void *)(v3 + 24);
          if (v29)
          {
            if (v23)
            {
              (*(void (**)(uint64_t, char *))(*(void *)v29 + 16))(v29, v24);
              unsigned int v24 = *(char **)v3;
              uint64_t v49 = *(void *)(v3 + 8);
              uint64_t v50 = *(void *)(v3 + 24);
              *(void *)uint64_t v3 = 0;
              *(void *)(v3 + 8) = 0;
              if (v50)
              {
                if (v49) {
                  (*(void (**)(uint64_t, char *))(*(void *)v50 + 16))(v50, v24);
                }
              }
            }
          }
          LOBYTE(v51) = 13;
          int v22 = 1;
          int v53 = 1;
          int v27 = v58;
          if (v58 != -1) {
            goto LABEL_32;
          }
        }
        uint64_t v31 = *v5;
        if (*v5
          || (WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::expand(v5),
              (uint64_t v31 = *v5) != 0))
        {
          int v32 = *(_DWORD *)(v31 - 8);
        }
        else
        {
          int v32 = 0;
        }
        unsigned int v33 = WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>((uint64_t)&v54) & v32;
        uint64_t v34 = v31 + 24 * v33;
        if (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v34, v35, v36))
        {
          uint64_t v38 = 0;
          int v39 = 1;
          do
          {
            if (*(void *)v34 == -1)
            {
              uint64_t v38 = v34;
            }
            else if (WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::equal<0ul>(v34, (uint64_t)&v54, v37))
            {
              goto LABEL_62;
            }
            unsigned int v33 = (v33 + v39) & v32;
            uint64_t v34 = v31 + 24 * v33;
            ++v39;
          }
          while (!WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v34, (uint64_t)v13, v37));
          if (v38)
          {
            *(_DWORD *)(v38 + 7) = 0;
            *(void *)uint64_t v38 = 0;
            *(unsigned char *)(v38 + 16) = 0;
            --*(_DWORD *)(*v5 - 16);
            uint64_t v34 = v38;
          }
        }
        WTF::String::operator=((uint64_t *)v34, &v54);
        *(unsigned char *)(v34 + 8) = v55;
        *(_WORD *)(v34 + 9) = v56;
        *(unsigned char *)(v34 + 16) = v3;
        uint64_t v40 = *v5;
        if (*v5) {
          int v41 = *(_DWORD *)(v40 - 12) + 1;
        }
        else {
          int v41 = 1;
        }
        *(_DWORD *)(v40 - 12) = v41;
        uint64_t v44 = *v5;
        if (*v5) {
          int v45 = *(_DWORD *)(v44 - 12);
        }
        else {
          int v45 = 0;
        }
        uint64_t v46 = (*(_DWORD *)(v44 - 16) + v45);
        unint64_t v47 = *(unsigned int *)(v44 - 4);
        if (v47 > 0x400)
        {
          if (v47 > 2 * v46) {
            goto LABEL_62;
          }
        }
        else if (3 * v47 > 4 * v46)
        {
LABEL_62:
          int v30 = v53;
          if (v53 == -1) {
            goto LABEL_64;
          }
LABEL_63:
          ((void (*)(uint64_t *, uint64_t *))off_1EE9BA850[v30])(&v57, &v51);
LABEL_64:
          uint64_t v2 = v54;
          goto LABEL_65;
        }
        WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::expand(v5);
        goto LABEL_62;
      }
    }
    unint64_t v18 = v23;
    uint64_t v15 = v24;
    goto LABEL_29;
  }
  LOBYTE(v3) = *(unsigned char *)(v9 + 16);
LABEL_65:
  char v54 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 2) {
      WTF::StringImpl::destroy(v2, v13);
    }
    else {
      *(_DWORD *)v2 -= 2;
    }
  }
  return v3;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29RemoteMediaPlayerManagerProxy17GetSupportedTypesEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](IPC::Decoder **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    IPC::Decoder::~Decoder(v2);
    WTF::fastFree(v4, v5);
  }
  return a1;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29RemoteMediaPlayerManagerProxy21SupportsTypeAndCodecsEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder *IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Decoder *a1, void *a2)
{
  IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, a2, (uint64_t)v6);
  std::__optional_storage_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>((WTF *)a2, v6);
  if (v7) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, v4);
  }
  return a1;
}

WTF *std::__optional_storage_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>>(WTF *result, uint64_t *a2)
{
  if (*((unsigned __int8 *)result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*((unsigned char *)result + 16))
    {
      return WTF::GenericHashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::assignToEmpty<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)result, a2);
    }
  }
  else if (*((unsigned char *)result + 16))
  {
    uint64_t result = (WTF *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)result, a2);
    *((unsigned char *)result + 16) = 0;
  }
  else
  {
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
    uint64_t v2 = *a2;
    *a2 = 0;
    *(void *)uint64_t result = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *((_DWORD *)result + 2) = v2;
    LODWORD(v2) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *((_DWORD *)result + 3) = v2;
    *((unsigned char *)result + 16) = 1;
  }
  return result;
}

unint64_t WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>(uint64_t a1)
{
  uint64_t v2 = *(WTF::StringImpl **)a1;
  unsigned int v3 = *((_DWORD *)v2 + 4);
  if (v3 >= 0x100) {
    unsigned int v4 = v3 >> 8;
  }
  else {
    unsigned int v4 = WTF::StringImpl::hashSlowCase(v2);
  }
  unsigned int v5 = ~(*(unsigned __int8 *)(a1 + 8) << 15) + *(unsigned __int8 *)(a1 + 8);
  unsigned int v6 = (9 * (v5 ^ (v5 >> 10))) ^ ((9 * (v5 ^ (v5 >> 10))) >> 6);
  unsigned int v7 = ~(*(unsigned __int8 *)(a1 + 9) << 15) + *(unsigned __int8 *)(a1 + 9);
  unsigned int v8 = (9 * (v7 ^ (v7 >> 10))) ^ ((9 * (v7 ^ (v7 >> 10))) >> 6);
  unsigned int v9 = ~(*(unsigned __int8 *)(a1 + 10) << 15) + *(unsigned __int8 *)(a1 + 10);
  unsigned int v10 = (9 * (v9 ^ (v9 >> 10))) ^ ((9 * (v9 ^ (v9 >> 10))) >> 6);
  return (0xD7862706ELL
        * (unint64_t)(277951225 * v4
                           + 95187966
                           * ((0xD7862706ELL
                                           * (unint64_t)(277951225
                                                              * ((v6 + ~(v6 << 11)) ^ ((v6 + ~(v6 << 11)) >> 16))
                                                              + 95187966
                                                              * ((0xD7862706ELL
                                                                              * (unint64_t)(277951225
                                                                                                 * ((v8 + ~(v8 << 11)) ^ ((v8 + ~(v8 << 11)) >> 16))
                                                                                                 + 95187966
                                                                                                 * ((v10 + ~(v10 << 11)) ^ ((v10 + ~(v10 << 11)) >> 16)))) >> 4))) >> 4))) >> 4;
}

BOOL WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (WTF::equal(*(WTF **)a1, 0, a3)) {
    BOOL v4 = *(unsigned char *)(a1 + 8) == 0;
  }
  else {
    BOOL v4 = 0;
  }
  return v4 && *(unsigned char *)(a1 + 9) == 0 && *(unsigned char *)(a1 + 10) == 0;
}

uint64_t WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::equal<0ul>(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t result = WTF::equal(*(WTF **)a1, *(const WTF::StringImpl **)a2, a3);
  if (result) {
    return *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
  }
        && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
        && *(unsigned __int8 *)(a1 + 10) == *(unsigned __int8 *)(a2 + 10);
  return result;
}

uint64_t WTF::HashTable<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType>>,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashMap<std::tuple<WTF::String,BOOL,BOOL,BOOL>,WebCore::MediaPlayerSupportsType,WTF::DefaultHash<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,WTF::HashTraits<WebCore::MediaPlayerSupportsType>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    unsigned int v2 = *(_DWORD *)(v1 - 4);
    int v3 = *(_DWORD *)(v1 - 12);
    if (v2)
    {
      unsigned int v4 = v2 << (6 * v3 >= 2 * v2);
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v2 = 0;
    int v3 = 0;
  }
  unsigned int v4 = 8;
LABEL_6:
  uint64_t result = WTF::fastMalloc((WTF *)(24 * v4 + 16));
  if (v4)
  {
    uint64_t v8 = v4;
    unsigned int v9 = (unsigned char *)(result + 32);
    do
    {
      *(_DWORD *)(v9 - 9) = 0;
      *((void *)v9 - 2) = 0;
      unsigned char *v9 = 0;
      v9 += 24;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(*a1 - 8) = v4 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v3;
  if (v2)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v2;
    uint64_t v24 = v2;
    do
    {
      uint64_t v12 = v1 + 24 * v10;
      if (*(void *)v12 != -1)
      {
        if (WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v1 + 24 * v10, (uint64_t)v6, v7))
        {
          uint64_t v13 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              WTF::StringImpl::destroy(v13, v6);
            }
            else {
              *(_DWORD *)v13 -= 2;
            }
          }
        }
        else
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unsigned int v16 = WTF::TupleHash<WTF::String,BOOL,BOOL,BOOL>::hash<0ul>(v1 + 24 * v10);
          int v17 = 0;
          do
          {
            unsigned int v18 = v16 & v15;
            uint64_t v19 = v14 + 24 * (v16 & v15);
            BOOL v20 = WTF::HashTraitsEmptyValueChecker<WTF::HashTraits<std::tuple<WTF::String,BOOL,BOOL,BOOL>>,false>::isEmptyValue<std::tuple<WTF::String,BOOL,BOOL,BOOL>>(v19, (uint64_t)v6, v7);
            unsigned int v16 = ++v17 + v18;
          }
          while (!v20);
          uint64_t v21 = *(WTF::StringImpl **)v19;
          *(void *)uint64_t v19 = 0;
          if (v21)
          {
            if (*(_DWORD *)v21 == 2) {
              WTF::StringImpl::destroy(v21, v6);
            }
            else {
              *(_DWORD *)v21 -= 2;
            }
          }
          int v22 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          *(void *)uint64_t v19 = v22;
          *(unsigned char *)(v19 + 8) = *(unsigned char *)(v12 + 8);
          *(unsigned char *)(v19 + 9) = *(unsigned char *)(v12 + 9);
          *(unsigned char *)(v19 + 10) = *(unsigned char *)(v12 + 10);
          *(unsigned char *)(v14 + 24 * v18 + 16) = *(unsigned char *)(v1 + 24 * v10 + 16);
          unint64_t v23 = *(WTF::StringImpl **)v12;
          *(void *)uint64_t v12 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v6);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
          uint64_t v11 = v24;
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v1)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v1 - 16), v6);
}

_DWORD *WebKit::RemoteMediaPlayerProxy::didReceiveMessage(WebKit::RemoteMediaPlayerProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  unsigned int v5 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  unsigned int v6 = a3;
  unsigned int v9 = (WTF::StringImpl *)v198;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x477:
      unsigned __int16 v10 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v10 <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::acceleratedRenderingStateChanged(this, v10 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x478:
      WebCore::MediaPlayer::applicationDidBecomeActive(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x479:
      WebCore::MediaPlayer::applicationWillResignActive(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x47A:
      *(void *)v182 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      *(void *)&v182[8] = v76;
      if ((_BYTE)v76) {
        WebKit::RemoteMediaPlayerProxy::attemptToDecryptWithInstance((uint64_t)this, v182);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x47B:
      IPC::Decoder::decode<std::tuple<unsigned long long,BOOL>>(v182, a3);
      if (v182[16]) {
        WebKit::RemoteMediaPlayerProxy::audioTrackSetEnabled((uint64_t)this, *(uint64_t *)v182, v182[8]);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x47C:
      WebCore::MediaPlayer::beginSimulatedHDCPError(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x47D:
      WTF::RunLoop::TimerBase::stop((WebKit::RemoteMediaPlayerProxy *)((char *)this + 192));
      WebCore::MediaPlayer::cancelLoad(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x47E:
      *(void *)v182 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      *(void *)&v182[8] = v77;
      if ((_BYTE)v77) {
        WebKit::RemoteMediaPlayerProxy::cdmInstanceAttached((uint64_t)this, v182);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x47F:
      *(void *)v182 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      *(void *)&v182[8] = v87;
      if ((_BYTE)v87) {
        WebKit::RemoteMediaPlayerProxy::cdmInstanceDetached((uint64_t)this, v182);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x480:
      WebKit::RemoteMediaPlayerProxy::createAudioSourceProvider(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x481:
      uint64_t v83 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v84)
      {
        *(void *)v182 = v83;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v182[8], a2);
        v85 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v85 = &unk_1EE9BA8D0;
        v85[1] = *(void *)v182;
        uint64_t v86 = *(void *)&v182[8];
        *(void *)&v182[8] = 0;
        v85[2] = v86;
        *(void *)v198 = v85;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v182[8]);
        WebKit::RemoteMediaPlayerProxy::didLoadingProgress((uint64_t)this);
        uint64_t v27 = *(void *)v198;
        *(void *)v198 = 0;
        if (v27) {
          goto LABEL_29;
        }
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x482:
      WebCore::MediaPlayer::endSimulatedHDCPError(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x483:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::isInFullscreenOrPictureInPictureChanged(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x484:
      WebCore::MediaPlayer::keyAdded(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x485:
      IPC::Decoder::decode<WTF::URL>(a3, v198);
      if (!v199[16]) {
        goto LABEL_283;
      }
      IPC::Decoder::decode<std::optional<WebKit::SandboxExtensionHandle>>(v6, (uint64_t)&v190);
      if (!v192)
      {
        int v38 = 0;
        v182[0] = 0;
        char v189 = 0;
        goto LABEL_214;
      }
      IPC::Decoder::decode<WebCore::ContentType>(v6, (uint64_t)&v195);
      if (!v197)
      {
        int v38 = 0;
        v182[0] = 0;
        char v189 = 0;
        goto LABEL_211;
      }
      IPC::Decoder::decode<WTF::String>(v6, (uint64_t)&v193);
      if (!v194)
      {
        int v38 = 0;
        v182[0] = 0;
        char v189 = 0;
        goto LABEL_48;
      }
      unint64_t v31 = *((void *)v6 + 1);
      int v30 = *(WTF::StringImpl **)v6;
      unint64_t v32 = *((void *)v6 + 2) - *(void *)v6;
      if (v31 <= v32)
      {
        unint64_t v171 = 0;
        v172 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v173 = *((void *)v6 + 3);
        if (v173)
        {
          if (v31)
          {
            (*(void (**)(uint64_t))(*(void *)v173 + 16))(v173);
            v172 = *(WTF::StringImpl **)v6;
            unint64_t v171 = *((void *)v6 + 1);
          }
          else
          {
            unint64_t v171 = 0;
            v172 = 0;
          }
        }
      }
      else
      {
        unsigned int v33 = (unsigned __int8 *)v30 + v32;
        *((void *)v6 + 2) = v33 + 1;
        if (v30)
        {
          unsigned int v34 = *v33;
          if (v34 < 2)
          {
            char v35 = v34 != 0;
            if (!v199[16] || !v192 || !v197) {
              goto LABEL_240;
            }
            uint64_t v36 = *(void *)v198;
            *(void *)v198 = 0;
            *(void *)v182 = v36;
            *(_OWORD *)&v182[8] = *(_OWORD *)&v198[8];
            *(_OWORD *)v183 = *(_OWORD *)v199;
            *(_DWORD *)&v198[8] &= ~1u;
            v183[16] = 0;
            char v184 = 0;
            if (v191) {
              goto LABEL_241;
            }
            while (1)
            {
              char v37 = v195;
              v195 = 0;
              v185 = v37;
              LOBYTE(v186) = v196;
              int v3 = v193;
              v187 = v193;
              BOOL v188 = v35;
              int v38 = 1;
              char v189 = 1;
LABEL_48:
              if (v197)
              {
                int v39 = v195;
                v195 = 0;
                if (v39)
                {
                  if (*(_DWORD *)v39 == 2) {
                    WTF::StringImpl::destroy(v39, v30);
                  }
                  else {
                    *(_DWORD *)v39 -= 2;
                  }
                }
              }
LABEL_211:
              if (v192 && v191) {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v190);
              }
LABEL_214:
              if (v199[16])
              {
                v126 = *(WTF::StringImpl **)v198;
                *(void *)v198 = 0;
                if (v126)
                {
                  if (*(_DWORD *)v126 == 2) {
                    WTF::StringImpl::destroy(v126, v30);
                  }
                  else {
                    *(_DWORD *)v126 -= 2;
                  }
                }
              }
              if (!v38) {
                break;
              }
              uint64_t v127 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6);
              if (!(_BYTE)v117) {
                goto LABEL_226;
              }
              *(void *)v198 = v127;
              unsigned int v6 = (IPC::Decoder *)&v198[8];
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v198[8], a2);
              v128 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
              *(void *)v128 = &unk_1EE9BA880;
              *((void *)v128 + 1) = *(void *)v198;
              uint64_t v129 = *(void *)&v198[8];
              *(void *)&v198[8] = 0;
              *((void *)v128 + 2) = v129;
              v195 = v128;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v198[8]);
              char v35 = v189;
              if (v189)
              {
                WebKit::RemoteMediaPlayerProxy::load((uint64_t)this, (WTF::URL *)v182, (uint64_t *)&v183[16], (WebCore::ContentType *)&v185, (WTF::String *)&v187, v188, (uint64_t *)&v195);
                v130 = v195;
                v195 = 0;
                if (v130) {
                  (*(void (**)(WTF::StringImpl *))(*(void *)v130 + 8))(v130);
                }
                if (v189)
                {
                  int v3 = v187;
LABEL_226:
                  v187 = 0;
                  if (v3)
                  {
                    if (*(_DWORD *)v3 == 2) {
                      WTF::StringImpl::destroy(v3, v117);
                    }
                    else {
                      *(_DWORD *)v3 -= 2;
                    }
                  }
                  v131 = v185;
                  v185 = 0;
                  if (v131)
                  {
                    if (*(_DWORD *)v131 == 2) {
                      WTF::StringImpl::destroy(v131, v117);
                    }
                    else {
                      *(_DWORD *)v131 -= 2;
                    }
                  }
                  if (v184) {
                    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v183[16]);
                  }
                  goto LABEL_236;
                }
                return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
              }
LABEL_240:
              __break(1u);
LABEL_241:
              v132 = v190;
              v190 = 0;
              *(void *)&v183[16] = v132;
              char v184 = 1;
            }
LABEL_283:
            v153 = *(WTF::StringImpl **)v6;
            uint64_t v151 = *((void *)v6 + 1);
            *(void *)unsigned int v6 = 0;
            *((void *)v6 + 1) = 0;
            uint64_t v152 = *((void *)v6 + 3);
            if (!v152) {
              return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
            }
LABEL_285:
            if (v151) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v152 + 16))(v152, v153);
            }
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
          }
LABEL_299:
          *(void *)unsigned int v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v175 = *((void *)v6 + 3);
          if (v175 && v31) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v175 + 16))(v175, v30);
          }
          v182[0] = 0;
          char v189 = 0;
          if (v194)
          {
            v176 = v193;
            v193 = 0;
            if (v176)
            {
              if (*(_DWORD *)v176 != 2)
              {
                int v38 = 0;
                *(_DWORD *)v176 -= 2;
                goto LABEL_48;
              }
              WTF::StringImpl::destroy(v176, v30);
            }
          }
          int v38 = 0;
          goto LABEL_48;
        }
        unint64_t v171 = v31;
        v172 = 0;
      }
      unint64_t v31 = 0;
      int v30 = 0;
      *(void *)unsigned int v6 = 0;
      *((void *)v6 + 1) = 0;
      uint64_t v174 = *((void *)v6 + 3);
      if (v174)
      {
        if (v171)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v174 + 16))(v174, v172, v171);
          int v30 = *(WTF::StringImpl **)v6;
          unint64_t v31 = *((void *)v6 + 1);
        }
        else
        {
          unint64_t v31 = 0;
          int v30 = 0;
        }
      }
      goto LABEL_299;
    case 0x486:
      IPC::Decoder::decode<WTF::URL>(a3, v198);
      if (!v199[16]) {
        goto LABEL_283;
      }
      IPC::Decoder::decode<WebCore::ContentType>(v6, (uint64_t)&v195);
      if (!v197)
      {
        int v74 = 0;
        v182[0] = 0;
        LOBYTE(v187) = 0;
        goto LABEL_195;
      }
      unint64_t v68 = *((void *)v6 + 1);
      int v30 = *(WTF::StringImpl **)v6;
      unint64_t v69 = *((void *)v6 + 2) - *(void *)v6;
      if (v68 <= v69)
      {
        unint64_t v166 = 0;
        v167 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v168 = *((void *)v6 + 3);
        if (v168)
        {
          if (v68)
          {
            (*(void (**)(uint64_t))(*(void *)v168 + 16))(v168);
            v167 = *(WTF::StringImpl **)v6;
            unint64_t v166 = *((void *)v6 + 1);
          }
          else
          {
            unint64_t v166 = 0;
            v167 = 0;
          }
        }
        goto LABEL_291;
      }
      v70 = (unsigned __int8 *)v30 + v69;
      *((void *)v6 + 2) = v70 + 1;
      if (!v30)
      {
        unint64_t v166 = v68;
        v167 = 0;
LABEL_291:
        unint64_t v68 = 0;
        int v30 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v169 = *((void *)v6 + 3);
        if (!v169) {
          goto LABEL_295;
        }
        if (!v166)
        {
          unint64_t v68 = 0;
          int v30 = 0;
LABEL_295:
          *(void *)unsigned int v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v170 = *((void *)v6 + 3);
          if (v170 && v68) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v170 + 16))(v170, v30);
          }
          int v74 = 0;
          v182[0] = 0;
          goto LABEL_103;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v169 + 16))(v169, v167, v166);
LABEL_294:
        int v30 = *(WTF::StringImpl **)v6;
        unint64_t v68 = *((void *)v6 + 1);
        goto LABEL_295;
      }
      unsigned int v71 = *v70;
      if (v71 >= 2) {
        goto LABEL_295;
      }
      BOOL v4 = v71 != 0;
      uint64_t v72 = IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebCore::MediaUniqueIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::decode(v6);
      if (!(_BYTE)v30) {
        goto LABEL_294;
      }
      char v35 = v199[16];
      if (!v199[16]) {
        goto LABEL_240;
      }
      char v35 = v197;
      if (!v197) {
        goto LABEL_240;
      }
      int v3 = (WTF::StringImpl *)v72;
      uint64_t v73 = *(void *)v198;
      *(void *)v198 = 0;
      *(void *)v182 = v73;
      *(_OWORD *)&v182[8] = *(_OWORD *)&v198[8];
      *(_OWORD *)v183 = *(_OWORD *)v199;
      *(_DWORD *)&v198[8] &= ~1u;
      unsigned int v9 = v195;
      v195 = 0;
      *(void *)&v183[16] = v9;
      char v184 = v196;
      LOBYTE(v185) = v4;
      int v74 = 1;
      uint64_t v186 = v72;
LABEL_103:
      LOBYTE(v187) = v74;
      if (v197)
      {
        v75 = v195;
        v195 = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 2) {
            WTF::StringImpl::destroy(v75, v30);
          }
          else {
            *(_DWORD *)v75 -= 2;
          }
        }
      }
LABEL_195:
      if (v199[16])
      {
        v121 = *(WTF::StringImpl **)v198;
        *(void *)v198 = 0;
        if (v121)
        {
          if (*(_DWORD *)v121 == 2) {
            WTF::StringImpl::destroy(v121, v30);
          }
          else {
            *(_DWORD *)v121 -= 2;
          }
        }
      }
      if (!v74) {
        goto LABEL_283;
      }
      uint64_t v122 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6);
      if ((_BYTE)v117)
      {
        *(void *)v198 = v122;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v198[8], a2);
        v123 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
        *(void *)v123 = &unk_1EE9BA8A8;
        *((void *)v123 + 1) = *(void *)v198;
        uint64_t v124 = *(void *)&v198[8];
        *(void *)&v198[8] = 0;
        *((void *)v123 + 2) = v124;
        v195 = v123;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v198[8]);
        WebKit::RemoteMediaPlayerProxy::loadMediaSource((uint64_t)this, (const WTF::URL *)v182, (const WebCore::ContentType *)&v183[16], v4, (uint64_t)v3, (uint64_t *)&v195);
        v125 = v195;
        v195 = 0;
        if (v125) {
          (*(void (**)(WTF::StringImpl *))(*(void *)v125 + 8))(v125);
        }
        if (!(_BYTE)v187) {
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
        }
        unsigned int v9 = *(WTF::StringImpl **)&v183[16];
      }
      *(void *)&v183[16] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v117);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
LABEL_236:
      v120 = *(WTF::StringImpl **)v182;
      *(void *)v182 = 0;
      if (v120)
      {
LABEL_237:
        if (*(_DWORD *)v120 == 2) {
          WTF::StringImpl::destroy(v120, v117);
        }
        else {
          *(_DWORD *)v120 -= 2;
        }
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x487:
      uint64_t v28 = *((void *)this + 14);
      v182[0] = 0;
      IPC::Connection::send<Messages::MediaPlayerPrivateRemote::ActiveSourceBuffersChanged>(v28, (uint64_t)v182, *((void *)this + 11), 0, 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x488:
      WebCore::MediaPlayer::notifyTrackModeChanged(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x489:
      WebKit::RemoteMediaPlayerProxy::pause((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x48A:
      uint64_t v101 = IPC::Decoder::decode<std::tuple<WTF::MonotonicTime>>((uint64_t *)a3);
      if (v102)
      {
        *(void *)v182 = v101;
        v103 = (WebCore::MediaPlayer *)*((void *)this + 15);
        if (v103) {
          WebCore::MediaPlayer::pauseAtHostTime(v103, (const WTF::MonotonicTime *)v182);
        }
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x48B:
      IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(a3, (uint64_t)v182);
      if (!v182[16]) {
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
      }
      uint64_t v78 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v6);
      if (!v79) {
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
      }
      *(void *)v198 = v78;
      unsigned int v6 = (IPC::Decoder *)&v198[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v198[8], a2);
      v80 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
      *(void *)v80 = &unk_1EE9BA8F8;
      *((void *)v80 + 1) = *(void *)v198;
      uint64_t v81 = *(void *)&v198[8];
      *(void *)&v198[8] = 0;
      *((void *)v80 + 2) = v81;
      v195 = v80;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v198[8]);
      char v35 = v182[16];
      if (!v182[16]) {
        goto LABEL_240;
      }
      WebKit::RemoteMediaPlayerProxy::performTaskAtTime((uint64_t)this, (WTF::MediaTime *)v182, (uint64_t *)&v195);
      v82 = v195;
      v195 = 0;
      if (v82) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v82 + 8))(v82);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x48C:
      WebKit::RemoteMediaPlayerProxy::play((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x48D:
      uint64_t v96 = IPC::Decoder::decode<std::tuple<WTF::MonotonicTime>>((uint64_t *)a3);
      if (v97)
      {
        *(void *)v182 = v96;
        v98 = (WebCore::MediaPlayer *)*((void *)this + 15);
        if (v98) {
          WebCore::MediaPlayer::playAtHostTime(v98, (const WTF::MonotonicTime *)v182);
        }
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x48E:
      IPC::Decoder::decode<WebCore::LayoutRect>((uint64_t *)a3, (uint64_t)v182);
      if (!v182[16]) {
        goto LABEL_283;
      }
      *(_OWORD *)v198 = *(_OWORD *)v182;
      v198[16] = 1;
      WebKit::RemoteMediaPlayerProxy::playerContentBoxRectChanged((uint64_t)this, v198);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x48F:
      unint64_t v13 = *((void *)a3 + 1);
      uint64_t v14 = *(WTF::StringImpl **)v6;
      unint64_t v45 = *((void *)v6 + 2) - *(void *)v6;
      if (v13 <= v45) {
        goto LABEL_242;
      }
      uint64_t v46 = (unsigned __int8 *)v14 + v45;
      *((void *)v6 + 2) = v46 + 1;
      if (!v14) {
        goto LABEL_340;
      }
      unsigned int v47 = *v46;
      if (v47 >= 2) {
        goto LABEL_247;
      }
      unsigned __int16 v48 = IPC::Decoder::decode<WebCore::MediaPlayerPreload>(v6);
      if (v48 < 0x100u) {
        goto LABEL_283;
      }
      unint64_t v13 = *((void *)v6 + 1);
      uint64_t v14 = *(WTF::StringImpl **)v6;
      unint64_t v49 = *((void *)v6 + 2) - *(void *)v6;
      if (v13 <= v49) {
        goto LABEL_242;
      }
      uint64_t v50 = (unsigned __int8 *)v14 + v49;
      *((void *)v6 + 2) = v50 + 1;
      if (!v14) {
        goto LABEL_340;
      }
      unsigned int v51 = *v50;
      if (v51 >= 2) {
        goto LABEL_247;
      }
      unsigned __int8 v52 = v48;
      unsigned __int16 v53 = IPC::Decoder::decode<WebCore::MediaPlayerPreload>(v6);
      if (v53 < 0x100u) {
        goto LABEL_283;
      }
      unint64_t v13 = *((void *)v6 + 1);
      uint64_t v14 = *(WTF::StringImpl **)v6;
      unint64_t v54 = *((void *)v6 + 2) - *(void *)v6;
      if (v13 <= v54)
      {
LABEL_242:
        unint64_t v133 = 0;
        v134 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v135 = *((void *)v6 + 3);
        if (v135)
        {
          if (v13)
          {
            (*(void (**)(uint64_t))(*(void *)v135 + 16))(v135);
            v134 = *(WTF::StringImpl **)v6;
            unint64_t v133 = *((void *)v6 + 1);
          }
          else
          {
            unint64_t v133 = 0;
            v134 = 0;
          }
        }
      }
      else
      {
        char v55 = (unsigned __int8 *)v14 + v54;
        *((void *)v6 + 2) = v55 + 1;
        if (v14)
        {
          unsigned int v56 = *v55;
          if (v56 < 2)
          {
            if (v13 > v55 + 1 - (unsigned __int8 *)v14)
            {
              *((void *)v6 + 2) = v55 + 2;
              unsigned int v57 = v55[1];
              if (v57 >= 2) {
                goto LABEL_341;
              }
              unsigned __int8 v58 = v53;
              char v59 = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode((unint64_t *)v6);
              if (v60)
              {
                unint64_t v61 = *((void *)v6 + 1);
                v62 = *(WTF::StringImpl **)v6;
                unint64_t v63 = ((*((void *)v6 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v6;
                if (v61 < v63 || v61 - v63 <= 3)
                {
                  unint64_t v177 = 0;
                  v178 = 0;
                  *(void *)unsigned int v6 = 0;
                  *((void *)v6 + 1) = 0;
                  uint64_t v179 = *((void *)v6 + 3);
                  if (v179)
                  {
                    if (v61)
                    {
                      (*(void (**)(uint64_t))(*(void *)v179 + 16))(v179);
                      v178 = *(WTF::StringImpl **)v6;
                      unint64_t v177 = *((void *)v6 + 1);
                    }
                    else
                    {
                      unint64_t v177 = 0;
                      v178 = 0;
                    }
                  }
                }
                else
                {
                  v64 = (float *)((char *)v62 + v63);
                  *((void *)v6 + 2) = v64 + 1;
                  if (v62)
                  {
                    IntSize v65 = (IntSize)v59;
                    float v66 = *v64;
                    if ((unsigned __int16)IPC::ArgumentCoder<WebCore::DynamicRangeMode,void>::decode<IPC::Decoder>(v6) > 0xFFu)
                    {
                      IntSize v67 = v65;
                      WebKit::RemoteMediaPlayerProxy::prepareForPlayback((uint64_t)this, v66, v47 != 0, v52, v51 != 0, v58, v56 != 0, v57 != 0, v67);
                      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
                    }
                    goto LABEL_246;
                  }
                  unint64_t v177 = v61;
                  v178 = 0;
                }
                *(void *)unsigned int v6 = 0;
                *((void *)v6 + 1) = 0;
                uint64_t v180 = *((void *)v6 + 3);
                if (v180 && v177) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v180 + 16))(v180, v178);
                }
                goto LABEL_283;
              }
LABEL_246:
              uint64_t v14 = *(WTF::StringImpl **)v6;
              unint64_t v13 = *((void *)v6 + 1);
              goto LABEL_247;
            }
            unint64_t v20 = 0;
            uint64_t v21 = 0;
            *(void *)unsigned int v6 = 0;
            *((void *)v6 + 1) = 0;
            uint64_t v163 = *((void *)v6 + 3);
            if (!v163) {
              goto LABEL_282;
            }
LABEL_327:
            (*(void (**)(uint64_t))(*(void *)v163 + 16))(v163);
            unint64_t v20 = 0;
            uint64_t v181 = *((void *)v6 + 1);
            uint64_t v162 = *((void *)v6 + 3);
            *(void *)unsigned int v6 = 0;
            *((void *)v6 + 1) = 0;
            uint64_t v21 = 0;
            if (!v162 || !v181)
            {
LABEL_282:
              *(void *)unsigned int v6 = 0;
              *((void *)v6 + 1) = 0;
              uint64_t v164 = *((void *)v6 + 3);
              if (v164 && v20) {
                (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v164 + 16))(v164, v21, v20);
              }
              goto LABEL_283;
            }
LABEL_329:
            (*(void (**)(uint64_t))(*(void *)v162 + 16))(v162);
            uint64_t v21 = *(WTF::StringImpl **)v6;
            unint64_t v20 = *((void *)v6 + 1);
            goto LABEL_282;
          }
LABEL_247:
          *(void *)unsigned int v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v137 = *((void *)v6 + 3);
          if (v137 && v13) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v137 + 16))(v137, v14);
          }
          goto LABEL_283;
        }
LABEL_340:
        unint64_t v133 = v13;
        v134 = v14;
      }
      unint64_t v13 = 0;
      uint64_t v14 = 0;
      *(void *)unsigned int v6 = 0;
      *((void *)v6 + 1) = 0;
      uint64_t v136 = *((void *)v6 + 3);
      if (v136)
      {
        if (!v133)
        {
          unint64_t v13 = 0;
          uint64_t v14 = 0;
          goto LABEL_247;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v136 + 16))(v136, v134, v133);
        goto LABEL_246;
      }
      goto LABEL_247;
    case 0x490:
      WebKit::RemoteMediaPlayerProxy::prepareForRendering(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x491:
      WebKit::RemoteMediaPlayerProxy::prepareToPlay(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x492:
      uint64_t v23 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v24)
      {
        *(void *)v182 = v23;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v182[8], a2);
        unint64_t v25 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v25 = &unk_1EE9BA920;
        v25[1] = *(void *)v182;
        uint64_t v26 = *(void *)&v182[8];
        *(void *)&v182[8] = 0;
        v25[2] = v26;
        *(void *)v198 = v25;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v182[8]);
        WebKit::RemoteMediaPlayerProxy::requestHostingContextID((uint64_t)this, (uint64_t *)v198);
        uint64_t v27 = *(void *)v198;
        *(void *)v198 = 0;
        if (v27) {
LABEL_29:
        }
          (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x493:
      IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>(a3, (uint64_t)v182);
      if (v184) {
        WebKit::RemoteMediaPlayerProxy::seekToTarget(this, (const WebCore::SeekTarget *)v182);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x494:
      unint64_t v106 = *((void *)a3 + 1);
      uint64_t v107 = *(void *)a3;
      unint64_t v108 = *((void *)a3 + 2) - *(void *)a3;
      if (v106 <= v108)
      {
        unint64_t v154 = 0;
        v155 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v156 = *((void *)v6 + 3);
        if (v156)
        {
          if (v106)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v156 + 16))(v156, v107, v106);
            v155 = *(WTF::StringImpl **)v6;
            unint64_t v154 = *((void *)v6 + 1);
          }
          else
          {
            unint64_t v154 = 0;
            v155 = 0;
          }
        }
      }
      else
      {
        v109 = (unsigned __int8 *)(v107 + v108);
        *((void *)a3 + 2) = v109 + 1;
        if (v107)
        {
          if (*v109 < 4u)
          {
            WebCore::MediaPlayer::setBufferingPolicy();
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
          }
LABEL_271:
          v150 = *(WTF::StringImpl **)v6;
          uint64_t v158 = *((void *)v6 + 1);
          *(void *)unsigned int v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v152 = *((void *)v6 + 3);
          if (!v152 || !v158) {
            return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
          }
          goto LABEL_273;
        }
        unint64_t v154 = v106;
        v155 = 0;
      }
      *(void *)unsigned int v6 = 0;
      *((void *)v6 + 1) = 0;
      uint64_t v157 = *((void *)v6 + 3);
      if (v157 && v154) {
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v157 + 16))(v157, v155);
      }
      goto LABEL_271;
    case 0x495:
      unint64_t v88 = *((void *)a3 + 1);
      v89 = *(WTF::StringImpl **)v6;
      unint64_t v90 = *((void *)v6 + 2) - *(void *)v6;
      if (v88 <= v90)
      {
        unint64_t v145 = 0;
        v146 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v147 = *((void *)v6 + 3);
        if (v147)
        {
          if (v88)
          {
            (*(void (**)(uint64_t))(*(void *)v147 + 16))(v147);
            v146 = *(WTF::StringImpl **)v6;
            unint64_t v145 = *((void *)v6 + 1);
          }
          else
          {
            unint64_t v145 = 0;
            v146 = 0;
          }
        }
      }
      else
      {
        v91 = (unsigned __int8 *)v89 + v90;
        *((void *)v6 + 2) = v91 + 1;
        if (v89)
        {
          unsigned int v92 = *v91;
          if (v92 < 2)
          {
            if (!v92)
            {
              uint64_t v93 = 0;
              goto LABEL_185;
            }
            uint64_t v93 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v6);
            if (v94)
            {
              LOBYTE(v92) = 1;
LABEL_185:
              *(void *)v182 = v93;
              v182[8] = v92;
              v182[16] = 1;
              WebKit::RemoteMediaPlayerProxy::setLegacyCDMSession((uint64_t)this, (uint64_t)v182);
              return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
            }
LABEL_262:
            v150 = *(WTF::StringImpl **)v6;
            uint64_t v151 = *((void *)v6 + 1);
            *(void *)unsigned int v6 = 0;
            *((void *)v6 + 1) = 0;
            uint64_t v152 = *((void *)v6 + 3);
            if (v152)
            {
              if (v151)
              {
LABEL_273:
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v152 + 16))(v152, v150);
                v153 = *(WTF::StringImpl **)v6;
                uint64_t v151 = *((void *)v6 + 1);
                uint64_t v152 = *((void *)v6 + 3);
LABEL_265:
                *(void *)unsigned int v6 = 0;
                *((void *)v6 + 1) = 0;
                if (!v152) {
                  return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
                }
                goto LABEL_285;
              }
            }
            else
            {
              uint64_t v151 = 0;
            }
            v153 = 0;
            goto LABEL_265;
          }
LABEL_261:
          *(void *)unsigned int v6 = 0;
          *((void *)v6 + 1) = 0;
          uint64_t v149 = *((void *)v6 + 3);
          if (v149 && v88) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v149 + 16))(v149, v89);
          }
          goto LABEL_262;
        }
        unint64_t v145 = v88;
        v146 = 0;
      }
      unint64_t v88 = 0;
      v89 = 0;
      *(void *)unsigned int v6 = 0;
      *((void *)v6 + 1) = 0;
      uint64_t v148 = *((void *)v6 + 3);
      if (v148)
      {
        if (v145)
        {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v148 + 16))(v148, v146, v145);
          v89 = *(WTF::StringImpl **)v6;
          unint64_t v88 = *((void *)v6 + 1);
        }
        else
        {
          unint64_t v88 = 0;
          v89 = 0;
        }
      }
      goto LABEL_261;
    case 0x496:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setMuted(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x497:
      unsigned __int16 v95 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v95 <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setPageIsVisible(this, v95 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x498:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerPreload>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebCore::MediaPlayer::setPitchCorrectionAlgorithm();
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x499:
      if ((unsigned __int16)IPC::ArgumentCoder<WebCore::DynamicRangeMode,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_246;
      }
      if (*((void *)this + 15)) {
        WebCore::MediaPlayer::setPreferredDynamicRangeMode();
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x49A:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::MediaPlayerPreload>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebCore::MediaPlayer::setPreload();
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x49B:
      *(void *)v182 = IPC::Decoder::decode<std::tuple<WebCore::IntSize>>((unint64_t *)a3);
      *(_DWORD *)&v182[8] = v22;
      if ((_BYTE)v22) {
        WebKit::RemoteMediaPlayerProxy::setPresentationSize((uint64_t)this, (const IntSize *)v182);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x49C:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setPreservesPitch((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x49D:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setPrivateBrowsingMode((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x49E:
      double v99 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v100) {
        WebCore::MediaPlayer::setRate(*((WebCore::MediaPlayer **)this + 15), v99);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x49F:
      unsigned __int16 v44 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v44 <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setShouldCheckHardwareSupport((WebCore::MediaPlayer **)this, v44 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A0:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setShouldContinueAfterKeyNeeded(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A1:
      unsigned __int16 v104 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v104 <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setShouldDisableHDR((uint64_t)this, v104 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A2:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setShouldDisableSleep(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A3:
      unsigned __int16 v29 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v29 <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setShouldEnableAudioSourceProvider((WebCore::MediaPlayer **)this, v29 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A4:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setShouldMaintainAspectRatio(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A5:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setShouldPlayToPlaybackTarget(this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A6:
      if ((unsigned __int16)IPC::Decoder::decode<WebCore::CDMRequirement>((uint64_t *)a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebCore::MediaPlayer::setVideoFullscreenGravity();
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A7:
      uint64_t v40 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)a3);
      if ((v40 & 0xFF00000000) != 0)
      {
        *((_DWORD *)this + 199) = v40;
        WebCore::MediaPlayer::setVideoFullscreenMode(*((WebCore::MediaPlayer **)this + 15));
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A8:
      int v41 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
      if (v42)
      {
        uint64_t v43 = v41;
        IPC::Decoder::takeLastAttachment(v6, v198);
        if (v198[4])
        {
          *(void *)v182 = v43;
          WTF::MachSendRight::MachSendRight();
          v182[12] = 1;
          if (v198[4]) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v198);
          }
          goto LABEL_62;
        }
      }
      else
      {
        v138 = *(WTF::StringImpl **)v6;
        uint64_t v139 = *((void *)v6 + 1);
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v140 = *((void *)v6 + 3);
        if (v140) {
          BOOL v141 = v139 == 0;
        }
        else {
          BOOL v141 = 1;
        }
        if (!v141) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v140 + 16))(v140, v138);
        }
      }
      v182[0] = 0;
      v182[12] = 0;
      v142 = *(WTF::StringImpl **)v6;
      uint64_t v143 = *((void *)v6 + 1);
      *(void *)unsigned int v6 = 0;
      *((void *)v6 + 1) = 0;
      uint64_t v144 = *((void *)v6 + 3);
      if (!v144) {
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
      }
      if (!v143) {
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
      }
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v144 + 16))(v144, v142);
      if (!v182[12]) {
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
      }
LABEL_62:
      WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeFenced(this, (const WebCore::FloatSize *)v182);
      if (v182[12]) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v182[8]);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4A9:
      double v11 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v12) {
        WebKit::RemoteMediaPlayerProxy::setVideoPlaybackMetricsUpdateInterval(this, v11);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4AA:
      double v115 = COERCE_DOUBLE(IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3));
      if (v116) {
        WebCore::MediaPlayer::setVolume(*((WebCore::MediaPlayer **)this + 15), v115);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4AB:
      IPC::Decoder::decode<WebKit::MediaPlaybackTargetContextSerialized>(a3, (uint64_t)v182);
      char v113 = v184;
      if (v184)
      {
        v198[8] = v182[8];
        *(void *)v198 = &unk_1EE9B5420;
        *(void *)&v198[16] = *(void *)&v182[16];
        *(_DWORD *)v199 = *(_DWORD *)v183;
        long long v114 = *(_OWORD *)&v183[8];
        *(void *)&v182[16] = 0;
        *(void *)&v183[8] = 0;
        *(void *)&v183[16] = 0;
        *(_OWORD *)&v199[8] = v114;
        char v113 = 1;
      }
      else
      {
        v198[0] = 0;
      }
      char v200 = v113;
      std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v182, v112);
      if (!v200)
      {
        v159 = *(WTF::StringImpl **)v6;
        uint64_t v160 = *((void *)v6 + 1);
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v161 = *((void *)v6 + 3);
        if (!v161) {
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
        }
        if (!v160) {
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
        }
        (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v161 + 16))(v161, v159);
        if (!v200) {
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
        }
      }
      WebKit::RemoteMediaPlayerProxy::setWirelessPlaybackTarget((int)this, (WebKit::MediaPlaybackTargetContextSerialized *)v198);
      if (!v200) {
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
      }
      v118 = *(WTF::StringImpl **)&v199[16];
      *(void *)&v199[16] = 0;
      if (v118)
      {
        if (*(_DWORD *)v118 == 2) {
          WTF::StringImpl::destroy(v118, v117);
        }
        else {
          *(_DWORD *)v118 -= 2;
        }
      }
      v119 = *(WTF::StringImpl **)&v199[8];
      *(void *)&v199[8] = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2) {
          WTF::StringImpl::destroy(v119, v117);
        }
        else {
          *(_DWORD *)v119 -= 2;
        }
      }
      v120 = *(WTF::StringImpl **)&v198[16];
      *(void *)&v198[16] = 0;
      if (!v120) {
        return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
      }
      goto LABEL_237;
    case 0x4AC:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::setWirelessVideoPlaybackDisabled((WebCore::MediaPlayer **)this);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4AD:
      v110 = (WebCore::MediaPlayer *)*((void *)this + 15);
      if (v110) {
        WebCore::MediaPlayer::startVideoFrameMetadataGathering(v110);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4AE:
      v111 = (WebCore::MediaPlayer *)*((void *)this + 15);
      if (v111) {
        WebCore::MediaPlayer::stopVideoFrameMetadataGathering(v111);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4AF:
      unint64_t v13 = *((void *)a3 + 1);
      uint64_t v14 = *(WTF::StringImpl **)v6;
      unint64_t v15 = ((*((void *)v6 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v6;
      if (v13 >= v15 && v13 - v15 > 7)
      {
        int v17 = (char *)v14 + v15;
        *((void *)v6 + 2) = v17 + 8;
        if (!v14)
        {
LABEL_341:
          unint64_t v20 = v13;
          uint64_t v21 = v14;
          goto LABEL_282;
        }
        if (v13 > v17 + 8 - (char *)v14)
        {
          uint64_t v18 = *(void *)v17;
          *((void *)v6 + 2) = v17 + 9;
          unsigned int v19 = v17[8];
          unint64_t v20 = v13;
          uint64_t v21 = v14;
          if (v19 >= 3) {
            goto LABEL_282;
          }
          WebKit::RemoteMediaPlayerProxy::textTrackSetMode((uint64_t)this, v18);
          return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
        }
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v163 = *((void *)v6 + 3);
        if (!v163) {
          goto LABEL_282;
        }
        if (v13) {
          goto LABEL_327;
        }
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
        *(void *)unsigned int v6 = 0;
        *((void *)v6 + 1) = 0;
        uint64_t v162 = *((void *)v6 + 3);
        if (!v162) {
          goto LABEL_282;
        }
        if (v13) {
          goto LABEL_329;
        }
      }
      unint64_t v20 = 0;
      uint64_t v21 = 0;
      goto LABEL_282;
    case 0x4B0:
      WebCore::MediaPlayer::tracksChanged(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4B1:
      WebCore::MediaPlayer::updateVideoFullscreenInlineImage(*((WebCore::MediaPlayer **)this + 15));
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4B2:
      unsigned __int16 v105 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v105 <= 0xFFu) {
        goto LABEL_283;
      }
      WebKit::RemoteMediaPlayerProxy::videoFullscreenStandbyChanged(this, v105 != 0);
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    case 0x4B3:
      IPC::Decoder::decode<std::tuple<unsigned long long,BOOL>>(v182, a3);
      if (v182[16]) {
        WebKit::RemoteMediaPlayerProxy::videoTrackSetSelected((uint64_t)this, *(uint64_t *)v182, v182[8]);
      }
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
    default:
      return WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v5);
  }
}

_DWORD *non-virtual thunk to'WebKit::RemoteMediaPlayerProxy::didReceiveMessage(WebKit::RemoteMediaPlayerProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaPlayerProxy::didReceiveMessage((WebKit::RemoteMediaPlayerProxy *)((char *)this - 24), a2, a3);
}

BOOL WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  BOOL v4 = (_DWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 16);
  switch(*(_WORD *)(a3 + 50))
  {
    case 0xE8C:
      uint64_t v8 = *a4;
      *a4 = 0;
      unsigned int v56 = v8;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v57, a2);
      unsigned int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)unsigned int v9 = &unk_1EE9BA9A8;
      *((void *)v9 + 1) = v56;
      unsigned __int16 v10 = v57[0];
      unsigned int v56 = 0;
      v57[0] = 0;
      *((void *)v9 + 2) = v10;
      char v60 = v9;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v57);
      char v12 = v56;
      unsigned int v56 = 0;
      if (v12)
      {
        IPC::Encoder::~Encoder(v12, v11);
        WTF::fastFree(v42, v43);
      }
      WebKit::RemoteMediaPlayerProxy::accessLog(a1, (uint64_t *)&v60);
      goto LABEL_13;
    case 0xE8D:
      uint64_t v14 = *a4;
      *a4 = 0;
      unsigned int v56 = v14;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v57, a2);
      unint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)unint64_t v15 = &unk_1EE9BA9F8;
      *((void *)v15 + 1) = v56;
      unsigned int v16 = v57[0];
      unsigned int v56 = 0;
      v57[0] = 0;
      *((void *)v15 + 2) = v16;
      char v60 = v15;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v57);
      uint64_t v18 = v56;
      unsigned int v56 = 0;
      if (v18)
      {
        IPC::Encoder::~Encoder(v18, v17);
        WTF::fastFree(v44, v45);
      }
      WebKit::RemoteMediaPlayerProxy::colorSpace(a1, (uint64_t *)&v60);
      unsigned int v19 = v60;
      char v60 = 0;
      if (v19) {
        goto LABEL_33;
      }
      goto LABEL_34;
    case 0xE8E:
      unint64_t v20 = *a4;
      *a4 = 0;
      unsigned int v56 = v20;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v57, a2);
      uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v21 = &unk_1EE9BA980;
      *((void *)v21 + 1) = v56;
      int v22 = v57[0];
      unsigned int v56 = 0;
      v57[0] = 0;
      *((void *)v21 + 2) = v22;
      char v60 = v21;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v57);
      char v24 = v56;
      unsigned int v56 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v23);
        WTF::fastFree(v46, v47);
      }
      WebKit::RemoteMediaPlayerProxy::errorLog(a1, (uint64_t *)&v60);
LABEL_13:
      unsigned int v19 = v60;
      char v60 = 0;
      if (v19) {
        goto LABEL_33;
      }
      goto LABEL_34;
    case 0xE8F:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a3, (uint64_t)&v56);
      BOOL v13 = v59 != 0;
      if (v59)
      {
        unint64_t v25 = *a4;
        *a4 = 0;
        char v60 = v25;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v61, a2);
        uint64_t v26 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v26 = &unk_1EE9BA958;
        v26[1] = v60;
        uint64_t v27 = v61[0];
        char v60 = 0;
        v61[0] = 0;
        v26[2] = v27;
        unint64_t v54 = v26;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v61);
        unsigned __int16 v29 = v60;
        char v60 = 0;
        if (v29)
        {
          IPC::Encoder::~Encoder(v29, v28);
          WTF::fastFree(v52, v53);
        }
        if (!v59) {
          __break(1u);
        }
        LOBYTE(v60) = 0;
        int v62 = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)&v56);
        WebKit::RemoteMediaPlayerProxy::isCrossOrigin(a1, (WebCore::SecurityOriginData *)&v60, (uint64_t *)&v54);
        if (v62 != -1) {
          ((void (*)(char *, IPC::Encoder **))off_1EE9BA938[v62])(&v55, &v60);
        }
        uint64_t v30 = (uint64_t)v54;
        unint64_t v54 = 0;
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
        if (v59 && v58 != -1) {
          ((void (*)(IPC::Encoder **, IPC::Encoder **))off_1EE9BA938[v58])(&v60, &v56);
        }
      }
      break;
    case 0xE90:
      unint64_t v31 = *a4;
      *a4 = 0;
      unsigned int v56 = v31;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v57, a2);
      unint64_t v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)unint64_t v32 = &unk_1EE9BA9D0;
      *((void *)v32 + 1) = v56;
      unsigned int v33 = v57[0];
      unsigned int v56 = 0;
      v57[0] = 0;
      *((void *)v32 + 2) = v33;
      char v60 = v32;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v57);
      char v35 = v56;
      unsigned int v56 = 0;
      if (v35)
      {
        IPC::Encoder::~Encoder(v35, v34);
        WTF::fastFree(v48, v49);
      }
      WebKit::RemoteMediaPlayerProxy::nativeImageForCurrentTime(a1, (uint64_t *)&v60);
      unsigned int v19 = v60;
      char v60 = 0;
      if (v19) {
        goto LABEL_33;
      }
      goto LABEL_34;
    case 0xE91:
      uint64_t v36 = *a4;
      *a4 = 0;
      unsigned int v56 = v36;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v57, a2);
      char v37 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)char v37 = &unk_1EE9BAA20;
      *((void *)v37 + 1) = v56;
      int v38 = v57[0];
      unsigned int v56 = 0;
      v57[0] = 0;
      *((void *)v37 + 2) = v38;
      char v60 = v37;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v57);
      uint64_t v40 = v56;
      unsigned int v56 = 0;
      if (v40)
      {
        IPC::Encoder::~Encoder(v40, v39);
        WTF::fastFree(v50, v51);
      }
      WebKit::RemoteMediaPlayerProxy::videoFrameForCurrentTimeIfChanged((void *)a1, (uint64_t *)&v60);
      unsigned int v19 = v60;
      char v60 = 0;
      if (v19) {
LABEL_33:
      }
        (*(void (**)(IPC::Encoder *))(*(void *)v19 + 8))(v19);
LABEL_34:
      BOOL v13 = 1;
      break;
    default:
      BOOL v13 = 0;
      break;
  }
  WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(v4);
  return v13;
}

BOOL non-virtual thunk to'WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  return WebKit::RemoteMediaPlayerProxy::didReceiveSyncMessage(a1 - 24, a2, a3, a4);
}

_DWORD *WTF::RefCounted<WebKit::RemoteMediaPlayerProxy>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    WebKit::RemoteMediaPlayerProxy::~RemoteMediaPlayerProxy((WebKit::RemoteMediaPlayerProxy *)(result - 4));
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::MediaPlayerPreload>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      uint64_t v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v2, v1);
        a1 = v18;
        uint64_t v8 = *v18;
        unint64_t v7 = v18[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_6;
  }
  BOOL v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v7 = v1;
    uint64_t v8 = 0;
LABEL_6:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10 && v7)
    {
      int v17 = a1;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a1 = v17;
    }
    goto LABEL_7;
  }
  unsigned int v5 = *v4;
  if (v5 >= 3)
  {
LABEL_7:
    unsigned int v5 = 0;
    int v6 = 0;
    goto LABEL_8;
  }
  int v6 = 1;
LABEL_8:
  uint64_t v11 = v5 | (v6 << 8);
  if (v11 <= 0xFF)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        unsigned int v16 = v11;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
        return v16;
      }
    }
  }
  return v11;
}

uint64_t IPC::ArgumentCoder<WebCore::DynamicRangeMode,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      char v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
    goto LABEL_7;
  }
  BOOL v4 = (unsigned __int8 *)(v2 + v3);
  a1[2] = v4 + 1;
  if (!v2)
  {
    unint64_t v8 = v1;
    uint64_t v9 = 0;
LABEL_7:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
    }
    goto LABEL_8;
  }
  unsigned int v5 = *v4;
  if (v5 >= 5)
  {
LABEL_8:
    unsigned int v5 = 0;
    int v6 = 0;
    return v5 | (v6 << 8);
  }
  int v6 = 1;
  return v5 | (v6 << 8);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy4LoadEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLEONSt3__18optionalINS7_22SandboxExtensionHandleEEERKN7WebCore11ContentTypeERKNS_6StringEbONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA880;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy4LoadEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLEONSt3__18optionalINS7_22SandboxExtensionHandleEEERKN7WebCore11ContentTypeERKNS_6StringEbONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA880;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy4LoadEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLEONSt3__18optionalINS7_22SandboxExtensionHandleEEERKN7WebCore11ContentTypeERKNS_6StringEbONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3161;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy15LoadMediaSourceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLERKN7WebCore11ContentTypeEbNS_23ObjectIdentifierGenericINS7_31RemoteMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA8A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy15LoadMediaSourceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLERKN7WebCore11ContentTypeEbNS_23ObjectIdentifierGenericINS7_31RemoteMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA8A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy15LoadMediaSourceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_3URLERKN7WebCore11ContentTypeEbNS_23ObjectIdentifierGenericINS7_31RemoteMediaSourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS7_30RemoteMediaPlayerConfigurationEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3160;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebKit::RemoteMediaPlayerConfiguration,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy18DidLoadingProgressEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA8D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy18DidLoadingProgressEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA8D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy18DidLoadingProgressEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unsigned int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v5 = 3159;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v12 = v5;
  int v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::IntSize>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebBackForwardListCounts,void>::decode(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::MediaPlaybackTargetContextSerialized>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::MediaPlaybackTargetContextSerialized,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::MediaPlaybackTargetContextSerialized,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    unsigned __int8 v3 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

unsigned char *IPC::Decoder::decode<std::tuple<unsigned long long,BOOL>>(unsigned char *result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v11 = a2[3];
    if (!v11) {
      goto LABEL_15;
    }
    int v17 = result;
    unsigned int v19 = a2;
    if (!v2)
    {
LABEL_28:
      unint64_t v9 = 0;
      uint64_t v10 = 0;
      goto LABEL_29;
    }
LABEL_26:
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v3);
    uint64_t result = v17;
    a2 = v19;
    uint64_t v10 = *v19;
    unint64_t v9 = v19[1];
    goto LABEL_15;
  }
  unint64_t v6 = (uint64_t *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
LABEL_27:
    unint64_t v9 = v2;
    uint64_t v10 = v3;
    goto LABEL_15;
  }
  if (v2 > (unint64_t)v6 - v3 + 8)
  {
    uint64_t v7 = *v6;
    a2[2] = (char *)v6 + 9;
    unsigned int v8 = *((unsigned __int8 *)v6 + 8);
    if (v8 < 2)
    {
      *(void *)uint64_t result = v7;
      result[8] = v8 != 0;
      result[16] = 1;
      return result;
    }
    goto LABEL_27;
  }
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v12 = a2[3];
  if (!v12) {
    goto LABEL_15;
  }
  int v17 = result;
  unsigned int v19 = a2;
  if (!v2) {
    goto LABEL_28;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v3);
  unint64_t v9 = 0;
  uint64_t v3 = *v19;
  uint64_t v16 = v19[1];
  uint64_t v11 = v19[3];
  void *v19 = 0;
  v19[1] = 0;
  uint64_t v10 = 0;
  if (v11)
  {
    uint64_t result = v17;
    a2 = v19;
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_26;
  }
LABEL_29:
  uint64_t result = v17;
  a2 = v19;
LABEL_15:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v13 = a2[3];
  if (v13 && v9)
  {
    uint64_t v18 = result;
    unint64_t v20 = a2;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v10, v9);
    uint64_t result = v18;
    a2 = v20;
  }
  *uint64_t result = 0;
  result[16] = 0;
  uint64_t v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unsigned char *)a2[3];
  if (result && v14)
  {
    uint64_t v15 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (unsigned char *)v15();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy17PerformTaskAtTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvNSt3__18optionalIS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA8F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy17PerformTaskAtTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvNSt3__18optionalIS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA8F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy17PerformTaskAtTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvNSt3__18optionalIS9_EEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_EE4callESF_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3162;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 16);
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v4)
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198A0FD84);
    }
    unsigned char *v6 = 1;
    if (!*(unsigned char *)(a2 + 16))
    {
      uint64_t v12 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::MonotonicTime>>(v12);
    }
    IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v5, a2);
  }
  else
  {
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198A0FDA4);
    }
    unsigned char *v6 = 0;
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::MonotonicTime>>(uint64_t *a1)
{
  uint64_t result = IPC::Decoder::decode<WTF::MonotonicTime>(a1);
  uint64_t v4 = v3;
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7 && v6 != 0)
    {
      uint64_t v9 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
      uint64_t v4 = 0;
      uint64_t result = v9;
    }
  }
  if (!v4) {
    return 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy23RequestHostingContextIDEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA920;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy23RequestHostingContextIDEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BA920;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages22RemoteMediaPlayerProxy23RequestHostingContextIDEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3163;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (_DWORD *)IPC::Encoder::grow(v5, 4uLL, 4);
  if (v7 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEN6WebKit22RemoteMediaPlayerProxyES8_FvN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA958;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEN6WebKit22RemoteMediaPlayerProxyES8_FvN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA958;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy13IsCrossOriginEN6WebKit22RemoteMediaPlayerProxyES8_FvN7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNSt3__18optionalIbEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_EE4callESE_(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  unint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<BOOL>,void>::encode<IPC::Encoder,std::optional<BOOL>>(*(IPC::Encoder **)(a1 + 8), (char *)&v4);
  return IPC::Connection::sendMessageImpl(v2[1], v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy8ErrorLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA980;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy8ErrorLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA980;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy8ErrorLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy9AccessLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA9A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy9AccessLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA9A8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy9AccessLogEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvNS_6StringEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy25NativeImageForCurrentTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS_13MachSendRightEEEN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA9D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy25NativeImageForCurrentTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS_13MachSendRightEEEN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA9D0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy25NativeImageForCurrentTimeEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS_13MachSendRightEEEN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SG_EE4callESE_SG_(uint64_t a1, unint64_t a2, CFTypeRef *a3)
{
  __int16 v4 = (uint64_t *)(a1 + 8);
  uint64_t v5 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WTF::MachSendRight>,void>::encode<IPC::Encoder,std::optional<WTF::MachSendRight>>(v5, a2);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(v5, a3);
  uint64_t v6 = v4[1];

  return IPC::Connection::sendMessageImpl(v6, v4, 0, 0);
}

unsigned char *IPC::ArgumentCoder<std::optional<WTF::MachSendRight>,void>::encode<IPC::Encoder,std::optional<WTF::MachSendRight>>(IPC::Encoder *a1, unint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 4);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A10454);
    }
    *uint64_t result = 1;
    if (*(unsigned char *)(a2 + 4))
    {
      return (unsigned char *)IPC::Encoder::addAttachment((uint64_t)a1, a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A10474);
    }
    *uint64_t result = 0;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA9F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BA9F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy10ColorSpaceEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvN7WebCore21DestinationColorSpaceEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, CFTypeRef *a2)
{
  unint64_t v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WebCore::DestinationColorSpace,void>::encode(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_bEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_bEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAA20;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaPlayerProxy33VideoFrameForCurrentTimeIfChangedEN6WebKit22RemoteMediaPlayerProxyES8_FvONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_bEE4callESE_b(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::Encoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>>(v6, a2);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (v8)
  {
    unsigned char *v7 = a3;
    uint64_t v9 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v9, v5, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::Encoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A10758);
    }
    unsigned char *v5 = 1;
    if (*(unsigned char *)(a2 + 56))
    {
      IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(a1, a2);
    }
    else
    {
      uint64_t v7 = (WebKit::RemoteMediaResourceManager *)std::__throw_bad_optional_access[abi:sn180100]();
      WebKit::RemoteMediaResourceManager::didReceiveMessage(v7, v8, v9);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A10778);
    }
    unsigned char *v5 = 0;
  }
}

void WebKit::RemoteMediaResourceManager::didReceiveMessage(WebKit::RemoteMediaResourceManager *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v3 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4BF:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError>>((uint64_t)&v94, (uint64_t *)a3);
      if (v96[32]) {
        WebKit::RemoteMediaResourceManager::accessControlCheckFailed((uint64_t)this, v94, (const WebCore::ResourceError *)v95);
      }
      goto LABEL_29;
    case 0x4C0:
      uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v28) {
        goto LABEL_65;
      }
      uint64_t v29 = v27;
      IPC::Decoder::decode<IPC::SharedBufferReference>(v3, (uint64_t)v116);
      if (!v116[24])
      {
        std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v116, v30);
        goto LABEL_65;
      }
      uint64_t v31 = *(void *)&v116[8];
      uint64_t v94 = v29;
      *(void *)unsigned __int16 v95 = *(void *)v116;
      unint64_t v32 = *(unsigned int **)&v116[16];
      *(void *)&v116[8] = 0;
      *(void *)&v116[16] = 0;
      *(void *)&v95[8] = v31;
      *(void *)&v95[16] = v32;
      v95[24] = 1;
      std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v116, v30);
      uint64_t v33 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v34) {
        goto LABEL_37;
      }
      *(void *)char v116 = v33;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v116[8], a2);
      char v35 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v35 = &unk_1EE9BAA98;
      v35[1] = *(void *)v116;
      uint64_t v36 = *(void *)&v116[8];
      *(void *)&v116[8] = 0;
      v35[2] = v36;
      v114[0] = (uint64_t)v35;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v116[8]);
      WebKit::RemoteMediaResourceManager::dataReceived((uint64_t)this, v29, (unsigned int *)v95, v114);
      uint64_t v37 = v114[0];
      v114[0] = 0;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      if (v95[24])
      {
        unint64_t v32 = *(unsigned int **)&v95[16];
LABEL_37:
        *(void *)&v95[16] = 0;
        if (v32) {
          WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v32);
        }
        int v38 = *(unsigned int **)&v95[8];
        *(void *)&v95[8] = 0;
        if (v38) {
          WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v38, v34);
        }
      }
      return;
    case 0x4C1:
      uint64_t v15 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v16) {
        goto LABEL_99;
      }
      unint64_t v17 = *((void *)v3 + 1);
      uint64_t v18 = *(WTF::StringImpl **)v3;
      unint64_t v19 = ((*((void *)v3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v3;
      if (v17 < v19 || v17 - v19 <= 7)
      {
        unint64_t v82 = 0;
        uint64_t v83 = 0;
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v84 = *((void *)v3 + 3);
        if (v84)
        {
          if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
            uint64_t v83 = *(WTF::StringImpl **)v3;
            unint64_t v82 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v82 = 0;
            uint64_t v83 = 0;
          }
        }
        goto LABEL_95;
      }
      uint64_t v21 = (uint64_t *)((char *)v18 + v19);
      *((void *)v3 + 2) = v21 + 1;
      if (!v18)
      {
        unint64_t v82 = v17;
        uint64_t v83 = 0;
LABEL_95:
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v85 = *((void *)v3 + 3);
        if (v85 && v82) {
          (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v85 + 16))(v85, v83, v82);
        }
LABEL_99:
        uint64_t v87 = *((void *)v3 + 1);
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v88 = *((void *)v3 + 3);
        if (v88) {
          BOOL v89 = v87 == 0;
        }
        else {
          BOOL v89 = 1;
        }
        if (!v89)
        {
          unint64_t v90 = *(void (**)(void))(*(void *)v88 + 16);
          v90();
        }
        return;
      }
      unint64_t v22 = (((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8) - (void)v18;
      if (v17 < v22 || v17 - v22 <= 7)
      {
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v86 = *((void *)v3 + 3);
        if (v86)
        {
          if (v17)
          {
            (*(void (**)(uint64_t))(*(void *)v86 + 16))(v86);
            v91 = *(WTF::StringImpl **)v3;
            uint64_t v92 = *((void *)v3 + 1);
            uint64_t v93 = *((void *)v3 + 3);
            *(void *)uint64_t v3 = 0;
            *((void *)v3 + 1) = 0;
            if (v93)
            {
              if (v92) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v93 + 16))(v93, v91);
              }
            }
          }
        }
        goto LABEL_99;
      }
      char v24 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v25 = *v24;
      uint64_t v26 = *v21;
      *((void *)v3 + 2) = v24 + 1;
      WebKit::RemoteMediaResourceManager::dataSent((uint64_t)this, v15, v26, v25);
      return;
    case 0x4C2:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError>>((uint64_t)&v94, (uint64_t *)a3);
      if (v96[32]) {
        WebKit::RemoteMediaResourceManager::loadFailed((uint64_t)this, v94, (const WebCore::ResourceError *)v95);
      }
LABEL_29:
      std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v94, v6);
      return;
    case 0x4C3:
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v8) {
        goto LABEL_65;
      }
      uint64_t v9 = v7;
      IPC::Decoder::decode<WebCore::NetworkLoadMetrics>((uint64_t *)v3, (uint64_t)v116);
      if (!v122)
      {
        std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v116, v10);
        goto LABEL_65;
      }
      *(_OWORD *)&v95[32] = *(_OWORD *)&v116[32];
      *(_OWORD *)uint64_t v96 = *(_OWORD *)v117;
      *(_OWORD *)&v96[16] = *(_OWORD *)&v117[16];
      *(_OWORD *)unsigned __int16 v95 = *(_OWORD *)v116;
      uint64_t v94 = v9;
      *(_OWORD *)&v95[16] = *(_OWORD *)&v116[16];
      *(void *)&v96[32] = *(void *)&v117[32];
      char v97 = v118;
      long long v98 = v119;
      uint64_t v11 = v121;
      v118 = 0;
      v121 = 0;
      uint64_t v99 = v120;
      char v100 = v11;
      char v101 = 1;
      std::__optional_destruct_base<WebCore::NetworkLoadMetrics,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v116, v10);
      WebKit::RemoteMediaResourceManager::loadFinished((uint64_t)this, v9, (const WebCore::NetworkLoadMetrics *)v95);
      if (v101)
      {
        uint64_t v13 = v100;
        char v100 = 0;
        if (v13) {
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v13);
        }
        uint64_t v14 = v97;
        char v97 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2) {
            WTF::StringImpl::destroy(v14, v12);
          }
          else {
            *(_DWORD *)v14 -= 2;
          }
        }
      }
      return;
    case 0x4C4:
      uint64_t v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v40) {
        goto LABEL_85;
      }
      uint64_t v41 = v39;
      IPC::Decoder::decode<WebCore::ResourceRequest>(v3, (uint64_t)v114);
      if (v115)
      {
        IPC::Decoder::decode<WebCore::ResourceResponse>(v3, v116);
        char v43 = v131;
        if (v131)
        {
          if (!v115) {
            goto LABEL_84;
          }
          uint64_t v94 = v41;
          std::__tuple_leaf<0ul,WebCore::ResourceRequest,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceRequest,void>((uint64_t)v95, (uint64_t)v114);
          std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)&v106, (uint64_t)v116);
          char v43 = 1;
        }
        else
        {
          LOBYTE(v94) = 0;
        }
        char v113 = v43;
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v116, v42);
      }
      else
      {
        LOBYTE(v94) = 0;
        char v113 = 0;
      }
      std::__optional_destruct_base<WebCore::ResourceRequest,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceRequestBase *)v114);
      if (v113) {
        goto LABEL_73;
      }
      goto LABEL_86;
    case 0x4C5:
      uint64_t v44 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v45) {
        goto LABEL_65;
      }
      uint64_t v46 = v44;
      IPC::Decoder::decode<WebCore::ResourceResponse>(v3, v116);
      if (!v131) {
        goto LABEL_93;
      }
      unint64_t v48 = *((void *)v3 + 1);
      unsigned int v47 = *(WTF::StringImpl **)v3;
      unint64_t v49 = *((void *)v3 + 2) - *(void *)v3;
      if (v48 <= v49)
      {
        unint64_t v77 = 0;
        uint64_t v78 = 0;
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v79 = *((void *)v3 + 3);
        if (v79)
        {
          if (v48)
          {
            (*(void (**)(uint64_t))(*(void *)v79 + 16))(v79);
            uint64_t v78 = *(WTF::StringImpl **)v3;
            unint64_t v77 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v77 = 0;
            uint64_t v78 = 0;
          }
        }
        goto LABEL_91;
      }
      uint64_t v50 = (unsigned __int8 *)v47 + v49;
      *((void *)v3 + 2) = v50 + 1;
      if (!v47)
      {
        unint64_t v77 = v48;
        uint64_t v78 = 0;
LABEL_91:
        unint64_t v48 = 0;
        unsigned int v47 = 0;
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v80 = *((void *)v3 + 3);
        if (v80)
        {
          if (v77)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v80 + 16))(v80, v78, v77);
            unsigned int v47 = *(WTF::StringImpl **)v3;
            unint64_t v48 = *((void *)v3 + 1);
          }
          else
          {
            unint64_t v48 = 0;
            unsigned int v47 = 0;
          }
        }
        goto LABEL_92;
      }
      unsigned int v51 = *v50;
      if (v51 >= 2)
      {
LABEL_92:
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v81 = *((void *)v3 + 3);
        if (v81 && v48) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v81 + 16))(v81, v47);
        }
LABEL_93:
        std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v116, v47);
LABEL_65:
        int v62 = *(WTF::StringImpl **)v3;
        uint64_t v63 = *((void *)v3 + 1);
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v64 = *((void *)v3 + 3);
        if (v64) {
          BOOL v65 = v63 == 0;
        }
        else {
          BOOL v65 = 1;
        }
        if (!v65) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v64 + 16))(v64, v62);
        }
        return;
      }
      *(_OWORD *)&v95[8] = *(_OWORD *)&v116[8];
      *(_OWORD *)&v95[24] = *(_OWORD *)&v116[24];
      long long v52 = *(_OWORD *)&v117[8];
      memset(&v117[8], 0, 32);
      BOOL v53 = v51 != 0;
      uint64_t v54 = *(void *)&v116[40];
      uint64_t v94 = v46;
      *(void *)unsigned __int16 v95 = *(void *)v116;
      *(void *)char v116 = 0;
      *(_DWORD *)&v116[8] &= ~1u;
      *(void *)&v116[40] = 0;
      *(void *)&v95[40] = v54;
      *(void *)uint64_t v96 = *(void *)v117;
      *(_OWORD *)&v96[8] = v52;
      *(_OWORD *)&v96[24] = *(_OWORD *)&v117[24];
      *(void *)&long long v52 = v118;
      v118 = 0;
      char v97 = (WTF::StringImpl *)v52;
      *(void *)&long long v52 = *((void *)&v119 + 1);
      *(void *)&long long v98 = v119;
      long long v119 = 0uLL;
      *((void *)&v98 + 1) = v52;
      uint64_t v55 = v120;
      uint64_t v120 = 0;
      uint64_t v99 = v55;
      LOBYTE(v100) = 0;
      char v101 = 0;
      if (v122)
      {
        uint64_t v73 = v121;
        v121 = 0;
        char v100 = v73;
        char v101 = 1;
      }
      long long v106 = v127;
      *(_OWORD *)uint64_t v107 = *(_OWORD *)v128;
      *(_DWORD *)&v107[15] = *(_DWORD *)&v128[15];
      long long v102 = v123;
      long long v103 = v124;
      long long v104 = v125;
      *(_OWORD *)unsigned __int16 v105 = v126;
      unsigned int v56 = v129;
      uint64_t v129 = 0;
      unint64_t v108 = v56;
      char v109 = v130;
      unsigned __int8 v110 = v53;
      char v111 = 1;
      std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v116, v47);
      uint64_t v57 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
      if (!(_BYTE)v58) {
        goto LABEL_59;
      }
      *(void *)char v116 = v57;
      uint64_t v3 = (IPC::Decoder *)&v116[8];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v116[8], a2);
      char v59 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v59 = &unk_1EE9BAA48;
      v59[1] = *(void *)v116;
      uint64_t v60 = *(void *)&v116[8];
      *(void *)&v116[8] = 0;
      v59[2] = v60;
      v114[0] = (uint64_t)v59;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v116[8]);
      if (v111)
      {
        WebKit::RemoteMediaResourceManager::responseReceived((uint64_t)this, v94, (uint64_t)v95, v110, v114);
        uint64_t v61 = v114[0];
        v114[0] = 0;
        if (v61) {
          (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
        }
        if (v111)
        {
          unsigned int v56 = v108;
LABEL_59:
          unint64_t v108 = 0;
          if (v56) {
            CFRelease(v56);
          }
          WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v95, v58);
        }
      }
      else
      {
LABEL_84:
        while (1)
        {
          __break(1u);
LABEL_85:
          LOBYTE(v94) = 0;
          char v113 = 0;
LABEL_86:
          int v74 = *(WTF::StringImpl **)v3;
          uint64_t v75 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v76 = *((void *)v3 + 3);
          if (!v76) {
            break;
          }
          if (!v75) {
            break;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v76 + 16))(v76, v74);
          if (!v113) {
            break;
          }
LABEL_73:
          uint64_t v66 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
          if (!(_BYTE)v67) {
            goto LABEL_77;
          }
          *(void *)char v116 = v66;
          uint64_t v3 = (IPC::Decoder *)&v116[8];
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v116[8], a2);
          unint64_t v68 = (void *)WTF::fastMalloc((WTF *)0x18);
          *unint64_t v68 = &unk_1EE9BAA70;
          v68[1] = *(void *)v116;
          uint64_t v69 = *(void *)&v116[8];
          *(void *)&v116[8] = 0;
          v68[2] = v69;
          v114[0] = (uint64_t)v68;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v116[8]);
          if (v113)
          {
            WebKit::RemoteMediaResourceManager::redirectReceived((uint64_t)this, v94, (uint64_t)v95, (uint64_t)&v106, v114);
            uint64_t v70 = v114[0];
            v114[0] = 0;
            if (v70) {
              (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
            }
LABEL_77:
            if (v113)
            {
              CFTypeRef v71 = cf;
              CFTypeRef cf = 0;
              if (v71) {
                CFRelease(v71);
              }
              WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v106, v67);
              CFTypeRef v72 = v105[1];
              v105[1] = 0;
              if (v72) {
                CFRelease(v72);
              }
              WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v95);
            }
            return;
          }
        }
      }
      return;
    default:
      return;
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16ResponseReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNSF_25ShouldContinuePolicyCheckEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAA48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16ResponseReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNSF_25ShouldContinuePolicyCheckEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAA48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16ResponseReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore16ResourceResponseEbONS_17CompletionHandlerIFvNSF_25ShouldContinuePolicyCheckEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3171;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16RedirectReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore15ResourceRequestERKNSF_16ResourceResponseEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAA70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16RedirectReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore15ResourceRequestERKNSF_16ResourceResponseEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAA70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager16RedirectReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEON7WebCore15ResourceRequestERKNSF_16ResourceResponseEONS_17CompletionHandlerIFvSH_EEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, WebCore::ResourceRequest *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3170;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<IPC::SharedBufferReference>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

uint64_t std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(unsigned int **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    }
    uint64_t v4 = *(unsigned int **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager12DataReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAA98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager12DataReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAA98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteMediaResourceManager12DataReceivedEN6WebKit26RemoteMediaResourceManagerES8_FvNS_23ObjectIdentifierGenericINS7_33RemoteMediaResourceIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3169;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::optional<WebCore::SharedMemoryHandle>,void>::encode<IPC::Encoder,std::optional<WebCore::SharedMemoryHandle>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v5)
  {
    uint64_t v6 = v4;
    IPC::Decoder::decode<WebCore::ResourceError>((IPC::Decoder *)a2, (uint64_t)&v15);
    char v8 = v22;
    if (v22)
    {
      uint64_t v9 = v15;
      uint64_t v15 = 0;
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v9;
      WTF::URL::URL(a1 + 16, v16);
      *(void *)(a1 + 56) = v17;
      *(_DWORD *)(a1 + 64) = v18;
      *(_WORD *)(a1 + 68) = v19;
      uint64_t v10 = v20;
      uint64_t v17 = 0;
      uint64_t v20 = 0;
      *(void *)(a1 + 72) = v10;
      char v8 = 1;
      *(unsigned char *)(a1 + 80) = v21;
    }
    else
    {
      *(unsigned char *)a1 = 0;
    }
    *(unsigned char *)(a1 + 88) = v8;
    uint64_t result = std::__optional_destruct_base<WebCore::ResourceError,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v7);
    if (*(unsigned char *)(a1 + 88)) {
      return result;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 88) = 0;
  }
  uint64_t v12 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v13 = v12 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13)
  {
    uint64_t v14 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v14();
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::RemoteMediaResourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ResourceError>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v3 = *(const void **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    char v5 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, a2);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

void *WebKit::RemoteMediaSourceProxy::didReceiveMessage(void *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4E1:
      IPC::Decoder::decode<WebCore::PlatformTimeRanges>(a3, (uint64_t)&v31);
      if (v32)
      {
        uint64_t v30 = v31;
        WebKit::RemoteMediaSourceProxy::bufferedChanged(v4);
        this = v30;
        if (v30) {
          return (void *)WTF::fastFree(v30, v5);
        }
      }
      else
      {
        uint64_t v16 = *(void *)a3;
        uint64_t v17 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (void *)*((void *)a3 + 3);
        if (this) {
          BOOL v18 = v17 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18) {
          return (void *)(*(uint64_t (**)(void *, uint64_t))(*this + 16))(this, v16);
        }
      }
      return this;
    case 0x4E2:
      this = (void *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(a3, (uint64_t)&v31);
      if (v32)
      {
        this = *(void **)(v4 + 64);
        if (this) {
          return (void *)(*(uint64_t (**)(void *, WTF **))(*this + 56))(this, &v31);
        }
      }
      return this;
    case 0x4E3:
      unint64_t v6 = *((void *)a3 + 1);
      uint64_t v7 = *(void *)a3;
      unint64_t v8 = *((void *)a3 + 2) - *(void *)a3;
      if (v6 <= v8)
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v21 = *((void *)a3 + 3);
        if (v21)
        {
          if (v6)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v7, v6);
            uint64_t v20 = *(void *)a3;
            unint64_t v19 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v19 = 0;
            uint64_t v20 = 0;
          }
        }
        goto LABEL_31;
      }
      uint64_t v9 = (unsigned __int8 *)(v7 + v8);
      *((void *)a3 + 2) = v9 + 1;
      if (!v7)
      {
        unint64_t v19 = v6;
        uint64_t v20 = 0;
LABEL_31:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v22 = *((void *)a3 + 3);
        if (v22 && v19) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
        }
        goto LABEL_32;
      }
      if (*v9 < 3u)
      {
        int v10 = 0;
        goto LABEL_33;
      }
LABEL_32:
      int v10 = 1;
LABEL_33:
      if (v10)
      {
        uint64_t v24 = *(void *)a3;
        uint64_t v25 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (void *)*((void *)a3 + 3);
        if (this)
        {
          if (v25)
          {
            (*(void (**)(void *, uint64_t))(*this + 16))(this, v24);
            uint64_t v26 = *((void *)a3 + 1);
            this = (void *)*((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (this)
            {
              if (v26) {
                goto LABEL_42;
              }
            }
          }
        }
      }
      else
      {
        this = *(void **)(v4 + 64);
        if (this)
        {
          uint64_t v23 = *(uint64_t (**)(void))(*this + 96);
          return (void *)v23();
        }
      }
      return this;
    case 0x4E4:
      this = (void *)IPC::Decoder::decode<WebCore::MediaPlayerReadyState>((uint64_t *)a3);
      if ((unsigned __int16)this <= 0xFFu)
      {
        uint64_t v28 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (void *)*((void *)a3 + 3);
        if (this) {
          BOOL v29 = v28 == 0;
        }
        else {
          BOOL v29 = 1;
        }
        if (!v29)
        {
LABEL_42:
          uint64_t v27 = *(uint64_t (**)(void))(*this + 16);
          return (void *)v27();
        }
      }
      else
      {
        uint64_t v11 = *(void *)(v4 + 64);
        if (v11)
        {
          uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 88);
          uint64_t v13 = this;
          uint64_t v14 = *(void *)(v4 + 64);
          return (void *)v12(v14, v13);
        }
      }
      return this;
    case 0x4E5:
      this = (void *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(a3, (uint64_t)&v31);
      if (v32)
      {
        this = *(void **)(v4 + 64);
        if (this) {
          return (void *)(*(uint64_t (**)(void *, WTF **))(*this + 128))(this, &v31);
        }
      }
      return this;
    case 0x4E6:
      this = (void *)this[8];
      if (this)
      {
        uint64_t v15 = *(uint64_t (**)(void))(*this + 104);
        return (void *)v15();
      }
      return this;
    default:
      return this;
  }
}

void *non-virtual thunk to'WebKit::RemoteMediaSourceProxy::didReceiveMessage(WebKit::RemoteMediaSourceProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteMediaSourceProxy::didReceiveMessage((void *)this - 2, a2, a3);
}

BOOL WebKit::RemoteMediaSourceProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  return *((_WORD *)a3 + 25) == 3730
      && IPC::handleMessageSynchronous<Messages::RemoteMediaSourceProxy::AddSourceBuffer,WebKit::RemoteMediaSourceProxy,WebKit::RemoteMediaSourceProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(WebCore::MediaSourcePrivateAddStatus,std::optional<WTF::ObjectIdentifierGeneric<WebKit::RemoteSourceBufferIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)>(a2, a3, a4, a1);
}

BOOL IPC::handleMessageSynchronous<Messages::RemoteMediaSourceProxy::AddSourceBuffer,WebKit::RemoteMediaSourceProxy,WebKit::RemoteMediaSourceProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(WebCore::MediaSourcePrivateAddStatus,std::optional<WTF::ObjectIdentifierGeneric<WebKit::RemoteSourceBufferIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, IPC::Encoder **a3, uint64_t a4)
{
  IPC::Decoder::decode<std::tuple<WebCore::ContentType>>(a2, (uint64_t)v18);
  int v7 = v19;
  if (!v19) {
    return v7 != 0;
  }
  unint64_t v8 = *a3;
  *a3 = 0;
  uint64_t v15 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a1);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9BAAC0;
  v9[1] = v15;
  int v10 = v16;
  uint64_t v16 = 0;
  v9[2] = v10;
  uint64_t v17 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
  BOOL result = 0;
  if (v19)
  {
    WebKit::RemoteMediaSourceProxy::addSourceBuffer(a4, (uint64_t)v18, (uint64_t *)&v17);
    uint64_t v13 = (uint64_t)v17;
    uint64_t v17 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    if (v19)
    {
      uint64_t v14 = v18[0];
      v18[0] = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v12);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    return v7 != 0;
  }
  __break(1u);
  return result;
}

BOOL non-virtual thunk to'WebKit::RemoteMediaSourceProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, IPC::Decoder *a3, IPC::Encoder **a4)
{
  return *((_WORD *)a3 + 25) == 3730
      && IPC::handleMessageSynchronous<Messages::RemoteMediaSourceProxy::AddSourceBuffer,WebKit::RemoteMediaSourceProxy,WebKit::RemoteMediaSourceProxy,void ()(WebCore::ContentType const&,WTF::CompletionHandler<void ()(WebCore::MediaSourcePrivateAddStatus,std::optional<WTF::ObjectIdentifierGeneric<WebKit::RemoteSourceBufferIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)> &&)>(a2, a3, a4, a1 - 16);
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WebCore::ContentType>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = IPC::ArgumentCoder<std::tuple<WebCore::ContentType>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    BOOL result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ContentType>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL result = IPC::Decoder::decode<WebCore::ContentType>(a1, (uint64_t)&v5);
  char v4 = v7;
  if (v7)
  {
    *(void *)a2 = v5;
    *(unsigned char *)(a2 + 8) = v6;
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEN6WebKit22RemoteMediaSourceProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvNS9_27MediaSourcePrivateAddStatusENSt3__18optionalINS_23ObjectIdentifierGenericINS7_32RemoteSourceBufferIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAAC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEN6WebKit22RemoteMediaSourceProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvNS9_27MediaSourcePrivateAddStatusENSt3__18optionalINS_23ObjectIdentifierGenericINS7_32RemoteSourceBufferIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SN_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAAC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages22RemoteMediaSourceProxy15AddSourceBufferEN6WebKit22RemoteMediaSourceProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvNS9_27MediaSourcePrivateAddStatusENSt3__18optionalINS_23ObjectIdentifierGenericINS7_32RemoteSourceBufferIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SN_EE4callESE_SN_(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  char v4 = a4;
  v14[0] = a3;
  v14[1] = a4;
  char v7 = (uint64_t *)(a1 + 8);
  unint64_t v8 = *(IPC::Encoder **)(a1 + 8);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (!v10) {
    goto LABEL_10;
  }
  unsigned char *v9 = a2;
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (!v4)
  {
    if (v12)
    {
      unsigned char *v11 = 0;
      return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), v7, 0, 0);
    }
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x198A120B0);
  }
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198A120D0);
  }
  unsigned char *v11 = 1;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, v14);
  return IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), v7, 0, 0);
}

void WebKit::RemoteObjectRegistry::didReceiveMessage(WebKit::RemoteObjectRegistry *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v4 = *((unsigned __int16 *)a3 + 25);
  switch(v4)
  {
    case 1256:
      IPC::handleMessage<Messages::RemoteObjectRegistry::InvokeMethod,WebKit::RemoteObjectRegistry,WebKit::RemoteObjectRegistry,void ()(WebKit::RemoteObjectInvocation const&)>(a3, (uint64_t)this);
      break;
    case 1255:
      IPC::handleMessage<Messages::RemoteObjectRegistry::CallReplyBlock,WebKit::RemoteObjectRegistry,WebKit::RemoteObjectRegistry,void ()(unsigned long long,WebKit::UserData const&)>(a3, (uint64_t)this);
      break;
    case 1257:
      unint64_t v5 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
      if (v6)
      {
        WebKit::RemoteObjectRegistry::releaseUnusedReplyBlock(this, v5);
      }
      break;
  }
}

uint64_t IPC::handleMessage<Messages::RemoteObjectRegistry::InvokeMethod,WebKit::RemoteObjectRegistry,WebKit::RemoteObjectRegistry,void ()(WebKit::RemoteObjectInvocation const&)>(IPC::Decoder *a1, uint64_t a2)
{
  IPC::Decoder::decode<std::tuple<WebKit::RemoteObjectInvocation>>((uint64_t)v4, a1);
  if (v4[24]) {
    WebKit::RemoteObjectRegistry::invokeMethod(a2, (uint64_t)v4);
  }
  return std::optional<std::tuple<WebKit::RemoteObjectInvocation>>::~optional((uint64_t)v4);
}

void IPC::handleMessage<Messages::RemoteObjectRegistry::CallReplyBlock,WebKit::RemoteObjectRegistry,WebKit::RemoteObjectRegistry,void ()(unsigned long long,WebKit::UserData const&)>(IPC::Decoder *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v3 < v5 || v3 - v5 <= 7)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v15 = *((void *)a1 + 3);
    if (v15)
    {
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v4, v3);
        uint64_t v14 = *(void *)a1;
        unint64_t v13 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_17;
  }
  char v7 = (uint64_t *)(v4 + v5);
  *((void *)a1 + 2) = v7 + 1;
  if (!v4)
  {
    unint64_t v13 = v3;
    uint64_t v14 = 0;
LABEL_17:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16 && v13) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
    }
    goto LABEL_18;
  }
  uint64_t v9 = *v7;
  IPC::Decoder::decode<WebKit::UserData>(a1, (uint64_t)&v22);
  if (!v23)
  {
LABEL_18:
    uint64_t v17 = *(void *)a1;
    uint64_t v18 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v19 = *((void *)a1 + 3);
    if (v19)
    {
      if (v18) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
    }
    return;
  }
  uint64_t v10 = v22;
  if (v22)
  {
    CFRetain(*(CFTypeRef *)(v22 + 8));
    uint64_t v20 = v10;
    char v21 = 1;
    if (v23)
    {
      uint64_t v11 = v22;
      uint64_t v22 = 0;
      if (v11) {
        CFRelease(*(CFTypeRef *)(v11 + 8));
      }
    }
  }
  else
  {
    uint64_t v20 = 0;
    char v21 = 1;
  }
  WebKit::RemoteObjectRegistry::callReplyBlock(a2, v9, (uint64_t)&v20);
  if (v21)
  {
    uint64_t v12 = v20;
    uint64_t v20 = 0;
    if (v12) {
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
  }
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::RemoteObjectInvocation>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::RemoteObjectInvocation>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a1 + 24))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t std::optional<std::tuple<WebKit::RemoteObjectInvocation>>::~optional(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    int v2 = a1 + 16;
    unint64_t v3 = *(WTF **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      std::default_delete<WebKit::RemoteObjectInvocation::ReplyInfo>::operator()[abi:sn180100](v2, v3);
    }
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4) {
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
    unint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::RemoteObjectInvocation>,void>::decode<IPC::Decoder>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::Decoder::decode<WebKit::RemoteObjectInvocation>((uint64_t)&v7, a2);
  char v3 = v9;
  if (v9)
  {
    long long v4 = v7;
    long long v7 = 0uLL;
    *(_OWORD *)a1 = v4;
    uint64_t v5 = v8;
    uint64_t v8 = 0;
    *(void *)(a1 + 16) = v5;
    char v3 = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 24) = v3;
  return std::optional<std::tuple<WebKit::RemoteObjectInvocation>>::~optional((uint64_t)&v7);
}

uint64_t IPC::Decoder::decode<WebKit::RemoteObjectInvocation>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::RemoteObjectInvocation,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 24))
  {
    return IPC::Decoder::markInvalid(a2);
  }
  return result;
}

uint64_t WebKit::RemoteRemoteCommandListener::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1275)
  {
    uint64_t v3 = this;
    this = IPC::Decoder::decode<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>>((uint64_t *)a3, v4);
    if (v5[24]) {
      return (*(uint64_t (**)(void, void, unsigned char *))(**(void **)(v3 + 8) + 16))(*(void *)(v3 + 8), v4[0], v5);
    }
  }
  return this;
}

uint64_t non-virtual thunk to'WebKit::RemoteRemoteCommandListener::didReceiveMessage(WebKit::RemoteRemoteCommandListener *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteRemoteCommandListener::didReceiveMessage((uint64_t)this - 64, a2, a3);
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>(a1);
  __int16 v5 = result;
  if ((unsigned __int16)result > 0xFFu) {
    return IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder,WebCore::PlatformMediaSessionRemoteControlCommandType>((IPC::Decoder *)a1, &v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[32] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::PlatformMediaSessionRemoteControlCommandType,WebCore::PlatformMediaSessionRemoteCommandArgument>,void>::decode<IPC::Decoder,WebCore::PlatformMediaSessionRemoteControlCommandType>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteCommandArgument>(a1, (uint64_t)&v7);
  char v6 = v9;
  if (!v9)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (a2[1])
  {
    *(unsigned char *)a3 = *a2;
    *(_OWORD *)(a3 + 8) = v7;
    *(void *)(a3 + 24) = v8;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + 32) = v6;
    return result;
  }
  __break(1u);
  return result;
}

WTF *WebKit::RemoteRemoteCommandListenerProxy::didReceiveMessage(WTF *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) != 1274) {
    return this;
  }
  uint64_t v4 = (uint64_t)this;
  unint64_t v5 = *((void *)a3 + 1);
  uint64_t v6 = *(void *)a3;
  unint64_t v7 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v22 = *((void *)a3 + 3);
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v6, v5);
        uint64_t v21 = *(void *)a3;
        unint64_t v20 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_23;
  }
  char v9 = (WTF **)(v6 + v7);
  *((void *)a3 + 2) = v9 + 1;
  if (!v6)
  {
    unint64_t v20 = v5;
    uint64_t v21 = 0;
LABEL_23:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v23 = *((void *)a3 + 3);
    if (v23 && v20) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
    }
    goto LABEL_42;
  }
  uint64_t v10 = *v9;
  uint64_t v36 = 0;
  unint64_t v37 = 0;
  if ((unint64_t)v10 >= 0x100000)
  {
    uint64_t v11 = 0;
    LODWORD(v24) = 0;
    while (1)
    {
      this = (WTF *)IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>((uint64_t *)a3);
      __int16 v40 = (__int16)this;
      if ((unsigned __int16)this < 0x100u) {
        break;
      }
      if (v24 == v37)
      {
        this = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(v24 + 1), (unint64_t)&v40);
        LODWORD(v24) = HIDWORD(v37);
        uint64_t v11 = v36;
        *((unsigned char *)v36 + HIDWORD(v37)) = *(unsigned char *)this;
      }
      else
      {
        *((unsigned char *)v11 + v24) = (_BYTE)this;
      }
      uint64_t v24 = (v24 + 1);
      HIDWORD(v37) = v24;
      uint64_t v10 = (WTF *)((char *)v10 - 1);
      if (!v10)
      {
        if (v37 > v24)
        {
          if (v24)
          {
            LODWORD(v37) = v24;
            this = (WTF *)WTF::fastRealloc(v11, (void *)v24);
            uint64_t v11 = this;
          }
          else
          {
            uint64_t v36 = 0;
            LODWORD(v37) = 0;
            this = (WTF *)WTF::fastFree(v11, v13);
            uint64_t v11 = v36;
          }
        }
        unsigned int v14 = v37;
        unsigned int v12 = HIDWORD(v37);
        goto LABEL_18;
      }
    }
    if (!v11) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  if (v10)
  {
    uint64_t v11 = (WTF *)WTF::fastMalloc(v10);
    unsigned int v12 = 0;
    LODWORD(v37) = v10;
    uint64_t v36 = v11;
    while (1)
    {
      this = (WTF *)IPC::Decoder::decode<WebCore::PlatformMediaSessionRemoteControlCommandType>((uint64_t *)a3);
      __int16 v40 = (__int16)this;
      if ((unsigned __int16)this < 0x100u) {
        break;
      }
      if (v12 == v37)
      {
        this = (WTF *)WTF::Vector<WebCore::ApplePayContactField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v36, (WTF *)(v12 + 1), (unint64_t)&v40);
        unsigned int v12 = HIDWORD(v37);
        uint64_t v11 = v36;
        *((unsigned char *)v36 + HIDWORD(v37)) = *(unsigned char *)this;
      }
      else
      {
        *((unsigned char *)v11 + v12) = (_BYTE)this;
      }
      HIDWORD(v37) = ++v12;
      uint64_t v10 = (WTF *)((char *)v10 - 1);
      if (!v10)
      {
        unsigned int v14 = v37;
        goto LABEL_18;
      }
    }
LABEL_41:
    uint64_t v36 = 0;
    LODWORD(v37) = 0;
    WTF::fastFree(v11, v13);
LABEL_42:
    uint64_t v30 = *(void *)a3;
    uint64_t v31 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v32 = *((void *)a3 + 3);
    if (v32 && v31) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
    }
    LOBYTE(v36) = 0;
    char v39 = 0;
LABEL_44:
    uint64_t v33 = *(void *)a3;
    uint64_t v34 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    this = (WTF *)*((void *)a3 + 3);
    if (this && v34) {
      this = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)this + 16))(this, v33);
    }
    goto LABEL_45;
  }
  unsigned int v14 = 0;
  uint64_t v11 = 0;
  unsigned int v12 = 0;
LABEL_18:
  unint64_t v15 = *((void *)a3 + 1);
  uint64_t v16 = *(char **)a3;
  unint64_t v17 = *((void *)a3 + 2) - *(void *)a3;
  if (v15 <= v17)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v27 = *((void *)a3 + 3);
    if (v27)
    {
      if (v15)
      {
        (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
        uint64_t v26 = *(void *)a3;
        unint64_t v25 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
    goto LABEL_36;
  }
  uint64_t v18 = &v16[v17];
  *((void *)a3 + 2) = v18 + 1;
  if (!v16)
  {
    unint64_t v25 = v15;
    uint64_t v26 = 0;
LABEL_36:
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v28 = *((void *)a3 + 3);
    if (v28)
    {
      if (v25)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v28 + 16))(v28, v26, v25);
        uint64_t v16 = *(char **)a3;
        unint64_t v15 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_37;
  }
  unsigned int v19 = *v18;
  if (v19 >= 2)
  {
LABEL_37:
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v29 = *((void *)a3 + 3);
    if (v29 && v15) {
      (*(void (**)(uint64_t, char *))(*(void *)v29 + 16))(v29, v16);
    }
    LOBYTE(v36) = 0;
    char v39 = 0;
    if (v11) {
      WTF::fastFree(v11, v16);
    }
    goto LABEL_44;
  }
  uint64_t v36 = v11;
  unint64_t v37 = __PAIR64__(v12, v14);
  char v38 = v19 != 0;
  char v39 = 1;
LABEL_45:
  if (v39)
  {
    this = (WTF *)WebKit::RemoteRemoteCommandListenerProxy::updateSupportedCommands(v4, (unsigned int *)&v36, v38);
    if (v39)
    {
      this = v36;
      if (v36)
      {
        uint64_t v36 = 0;
        LODWORD(v37) = 0;
        return (WTF *)WTF::fastFree(this, v35);
      }
    }
  }
  return this;
}

atomic_uchar *WebKit::RemoteScrollingCoordinator::didReceiveMessage(atomic_uchar *volatile *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v6 = (atomic_uchar **)(this + 1);
  uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 1);
  if (*((_WORD *)a3 + 25) == 1368)
  {
    IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, (uint64_t)&v18);
    if (v19)
    {
      uint64_t v9 = IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(a3);
      if ((unsigned __int16)v9 > 0xFFu)
      {
        unint64_t v12 = *((void *)a3 + 1);
        uint64_t v13 = *(void *)a3;
        unint64_t v14 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
        if (v12 >= v14 && v12 - v14 > 3)
        {
          *((void *)a3 + 2) = v13 + v14 + 4;
          if (v13)
          {
            if (v19)
            {
              uint64_t result = (atomic_uchar *)WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarMinimumThumbLengthDidChange();
              goto LABEL_12;
            }
            __break(1u);
            goto LABEL_32;
          }
          unint64_t v11 = v12;
          uint64_t v10 = 0;
        }
        else
        {
          unint64_t v11 = 0;
          uint64_t v10 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v17 = *((void *)a3 + 3);
          if (v17)
          {
            if (v12)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v13, v12);
              uint64_t v10 = *(void *)a3;
              unint64_t v11 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v11 = 0;
              uint64_t v10 = 0;
            }
          }
        }
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v9 = *((void *)a3 + 3);
        if (!v9) {
          goto LABEL_30;
        }
LABEL_32:
        if (v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10);
        }
        goto LABEL_30;
      }
      IPC::Decoder::markInvalid(a3);
    }
LABEL_30:
    uint64_t result = (atomic_uchar *)IPC::Decoder::markInvalid(a3);
    goto LABEL_12;
  }
  switch(*((_WORD *)a3 + 25))
  {
    case 0x553:
      uint64_t result = (atomic_uchar *)IPC::handleMessage<Messages::RemoteScrollingCoordinator::AnimatedScrollDidEndForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>(a3);
      break;
    case 0x554:
      uint64_t result = (atomic_uchar *)IPC::handleMessage<Messages::RemoteScrollingCoordinator::CurrentSnapPointIndicesChangedForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<unsigned int>,std::optional<unsigned int>)>(a3);
      break;
    case 0x555:
      uint64_t result = (atomic_uchar *)IPC::Decoder::decode<std::tuple<WebCore::PlatformWheelEventPhase,WebCore::PlatformWheelEventPhase>>((uint64_t *)a3);
      if ((result & 0xFFFFFF) >= 0x10000) {
        uint64_t result = WebKit::RemoteScrollingCoordinator::receivedWheelEventWithPhases((WebCore::ScrollingCoordinator *)this);
      }
      break;
    case 0x556:
      uint64_t result = (atomic_uchar *)IPC::handleMessageAsync<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(a2, a3, (uint64_t)this);
      break;
    case 0x557:
      uint64_t result = (atomic_uchar *)IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebKit::RemoteScrollingUIState const&)>(a3, (uint64_t *)this);
      break;
    case 0x559:
      uint64_t result = (atomic_uchar *)IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingTreeNodeScrollbarVisibilityDidChange,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ScrollbarOrientation,BOOL)>(a3);
      break;
    case 0x55A:
      uint64_t result = IPC::handleMessage<Messages::RemoteScrollingCoordinator::StartDeferringScrollingTestCompletionForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>)>(a3, (WebCore::ScrollingCoordinator *)this);
      break;
    case 0x55B:
      uint64_t result = IPC::handleMessage<Messages::RemoteScrollingCoordinator::StopDeferringScrollingTestCompletionForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>)>(a3, (WebCore::ScrollingCoordinator *)this);
      break;
    default:
      break;
  }
LABEL_12:
  if (this)
  {
    uint64_t v16 = *v6;
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>(v16, v8);
  }
  return result;
}

uint64_t IPC::handleMessageAsync<Messages::RemoteScrollingCoordinator::ScrollPositionChangedForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::FloatPoint const&,std::optional<WebCore::FloatPoint>,BOOL,WTF::CompletionHandler<void ()(void)> &&)>(atomic_uchar *volatile *a1, IPC::Decoder *a2, uint64_t a3)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v35);
  if (!v36) {
    goto LABEL_17;
  }
  uint64_t v6 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a2);
  if (!v7) {
    goto LABEL_15;
  }
  uint64_t v8 = v6;
  unint64_t v9 = IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>((unint64_t *)a2);
  if ((v10 & 0xFF00000000) == 0) {
    goto LABEL_17;
  }
  unsigned int v11 = v10;
  unint64_t v12 = *((void *)a2 + 1);
  uint64_t v13 = *(void *)a2;
  unint64_t v14 = *((void *)a2 + 2) - *(void *)a2;
  if (v12 <= v14)
  {
    unint64_t v22 = 0;
    uint64_t v23 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v24 = *((void *)a2 + 3);
    if (v24)
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v23 = *(void *)a2;
        unint64_t v22 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v22 = 0;
        uint64_t v23 = 0;
      }
    }
  }
  else
  {
    unint64_t v15 = (unsigned __int8 *)(v13 + v14);
    *((void *)a2 + 2) = v15 + 1;
    if (v13)
    {
      unsigned int v16 = *v15;
      if (v16 < 2)
      {
        if (v36)
        {
          uint64_t v17 = v9;
          long long v30 = v35;
          v31[0] = v8;
          v31[1] = v9;
          unsigned int v32 = v11;
          BOOL v33 = v16 != 0;
          char v34 = 1;
          uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
          if (v19)
          {
            *(void *)&long long v35 = result;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v35 + 1, a1);
            unint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x18);
            *unint64_t v20 = &unk_1EE9BAAE8;
            v20[1] = v35;
            uint64_t v21 = *((void *)&v35 + 1);
            *((void *)&v35 + 1) = 0;
            v20[2] = v21;
            uint64_t v29 = v20;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v35 + 1);
            WebKit::RemoteScrollingCoordinator::scrollPositionChangedForNode(a3, v30, *((uint64_t *)&v30 + 1), (uint64_t)v31, v17, v11, v16 != 0, (uint64_t *)&v29);
            uint64_t result = (uint64_t)v29;
            uint64_t v29 = 0;
            if (result) {
              return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
            }
          }
          return result;
        }
        __break(1u);
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    unint64_t v22 = v12;
    uint64_t v23 = 0;
  }
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v25 = *((void *)a2 + 3);
  if (v25)
  {
    if (v22)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v23, v22);
LABEL_15:
      uint64_t v13 = *(void *)a2;
      unint64_t v12 = *((void *)a2 + 1);
      goto LABEL_16;
    }
    unint64_t v12 = 0;
    uint64_t v13 = 0;
  }
LABEL_16:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t v9 = *((void *)a2 + 3);
  if (v9)
  {
LABEL_24:
    if (v12) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)v9 + 16))(v9, v13);
    }
  }
LABEL_17:
  uint64_t v26 = *(void *)a2;
  uint64_t v27 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v28 = v27 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v26);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteScrollingCoordinator::AnimatedScrollDidEndForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>)>(IPC::Decoder *a1)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v6);
  if (v7) {
    return WebKit::RemoteScrollingCoordinator::animatedScrollDidEndForNode();
  }
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v3);
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteScrollingCoordinator::CurrentSnapPointIndicesChangedForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,std::optional<unsigned int>,std::optional<unsigned int>)>(IPC::Decoder *a1)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v8);
  if (v9
    && (IPC::Decoder::decode<std::optional<unsigned int>>(a1), v2)
    && (uint64_t result = IPC::Decoder::decode<std::optional<unsigned int>>(a1), v4))
  {
    if (v9) {
      return WebKit::RemoteScrollingCoordinator::currentSnapPointIndicesChangedForNode();
    }
    else {
      __break(1u);
    }
  }
  else
  {
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t *IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingStateInUIProcessChanged,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebKit::RemoteScrollingUIState const&)>(IPC::Decoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::RemoteScrollingUIState,void>::decode(a1, (uint64_t)v13);
  if (v16)
  {
LABEL_2:
    long long v10 = v14;
    uint64_t v11 = v15;
    v9[0] = v13[0];
    char v12 = 1;
    uint64_t result = WebKit::RemoteScrollingCoordinator::scrollingStateInUIProcessChanged(a2, (const WebKit::RemoteScrollingUIState *)v9);
    if (v12)
    {
      if (v11) {
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)(v11 - 16), v5);
      }
      if (*((void *)&v10 + 1)) {
        uint64_t result = (uint64_t *)WTF::fastFree((WTF *)(*((void *)&v10 + 1) - 16), v5);
      }
      if ((void)v10) {
        return (uint64_t *)WTF::fastFree((WTF *)(v10 - 16), v5);
      }
    }
    return result;
  }
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (uint64_t *)*((void *)a1 + 3);
  if (!result)
  {
    uint64_t v7 = 0;
LABEL_12:
    uint64_t v8 = 0;
    goto LABEL_13;
  }
  if (!v7) {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t *, uint64_t))(*result + 16))(result, v6);
  if (v16) {
    goto LABEL_2;
  }
  uint64_t v8 = *(void *)a1;
  uint64_t v7 = *((void *)a1 + 1);
  uint64_t result = (uint64_t *)*((void *)a1 + 3);
LABEL_13:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if (result && v7) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v8);
  }
  return result;
}

atomic_uchar *IPC::handleMessage<Messages::RemoteScrollingCoordinator::StartDeferringScrollingTestCompletionForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>)>(IPC::Decoder *a1, WebCore::ScrollingCoordinator *a2)
{
  uint64_t result = (atomic_uchar *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>((uint64_t)&v4, a1);
  if (v5)
  {
    return WebKit::RemoteScrollingCoordinator::startDeferringScrollingTestCompletionForNode(a2);
  }
  return result;
}

atomic_uchar *IPC::handleMessage<Messages::RemoteScrollingCoordinator::StopDeferringScrollingTestCompletionForNode,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>)>(IPC::Decoder *a1, WebCore::ScrollingCoordinator *a2)
{
  uint64_t result = (atomic_uchar *)IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>((uint64_t)&v4, a1);
  if (v5)
  {
    return WebKit::RemoteScrollingCoordinator::stopDeferringScrollingTestCompletionForNode(a2);
  }
  return result;
}

WebCore::ScrollableArea *IPC::handleMessage<Messages::RemoteScrollingCoordinator::ScrollingTreeNodeScrollbarVisibilityDidChange,WebKit::RemoteScrollingCoordinator,WebKit::RemoteScrollingCoordinator,void ()(WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ScrollbarOrientation,BOOL)>(IPC::Decoder *a1)
{
  IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a1, (uint64_t)&v15);
  if (!v16) {
    goto LABEL_14;
  }
  uint64_t v2 = IPC::ArgumentCoder<WebCore::PathRoundedRect::Strategy,void>::decode<IPC::Decoder>(a1);
  if ((unsigned __int16)v2 <= 0xFFu) {
    goto LABEL_12;
  }
  unint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *((void *)a1 + 2) - *(void *)a1;
  if (v3 <= v5)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (v10)
    {
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        uint64_t v9 = *(void *)a1;
        unint64_t v8 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  else
  {
    uint64_t v6 = (unsigned __int8 *)(v4 + v5);
    *((void *)a1 + 2) = v6 + 1;
    if (v4)
    {
      if (*v6 < 2u)
      {
        if (v16) {
          return WebKit::RemoteScrollingCoordinator::scrollingTreeNodeScrollbarVisibilityDidChange();
        }
        __break(1u);
        goto LABEL_21;
      }
      goto LABEL_13;
    }
    unint64_t v8 = v3;
    uint64_t v9 = 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v11 = *((void *)a1 + 3);
  if (v11)
  {
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
LABEL_12:
      uint64_t v4 = *(void *)a1;
      unint64_t v3 = *((void *)a1 + 1);
      goto LABEL_13;
    }
    unint64_t v3 = 0;
    uint64_t v4 = 0;
  }
LABEL_13:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v2 = *((void *)a1 + 3);
  if (v2)
  {
LABEL_21:
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v4);
    }
  }
LABEL_14:
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = (WebCore::ScrollableArea *)*((void *)a1 + 3);
  if (result) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14) {
    return (WebCore::ScrollableArea *)(*(uint64_t (**)(WebCore::ScrollableArea *, uint64_t))(*(void *)result + 16))(result, v12);
  }
  return result;
}

atomic_uchar *non-virtual thunk to'WebKit::RemoteScrollingCoordinator::didReceiveMessage(atomic_uchar *volatile *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  return WebKit::RemoteScrollingCoordinator::didReceiveMessage(this - 17, a2, a3);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ScrollingCoordinator,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (!v6)
  {
    if (v7) {
      this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (!v8)
    {
      return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
    }
  }
  return this;
}

unint64_t IPC::Decoder::decode<std::optional<WebCore::FloatPoint>>(unint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    unint64_t v5 = *a1;
    unint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(unint64_t, unint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::optional<WebCore::FloatPoint>,void>::decode<IPC::Decoder>(unint64_t *a1)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(unint64_t))(*(void *)v14 + 16))(v14);
        unint64_t v13 = *a1;
        unint64_t v12 = a1[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
    goto LABEL_10;
  }
  unint64_t v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (unint64_t)(v5 + 1);
  if (!v3)
  {
    unint64_t v12 = v2;
    unint64_t v13 = 0;
LABEL_10:
    unint64_t v2 = 0;
    unint64_t v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        unint64_t v3 = *a1;
        unint64_t v2 = a1[1];
      }
      else
      {
        unint64_t v2 = 0;
        unint64_t v3 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      BOOL v7 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a1);
      if (v8)
      {
        unint64_t v9 = (unint64_t)v7 & 0xFFFFFFFFFFFFFF00;
        uint64_t v10 = v7;
      }
      else
      {
        unint64_t v17 = *a1;
        unint64_t v18 = a1[1];
        *a1 = 0;
        a1[1] = 0;
        unint64_t v19 = a1[3];
        if (v19 && v18) {
          (*(void (**)(unint64_t, unint64_t))(*(void *)v19 + 16))(v19, v17);
        }
        uint64_t v10 = 0;
        unint64_t v9 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
      unint64_t v9 = 0;
    }
    return v9 | v10;
  }
LABEL_11:
  uint64_t v10 = 0;
  unint64_t v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  unint64_t v16 = a1[3];
  if (v16)
  {
    if (v2) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v3);
    }
    uint64_t v10 = 0;
    unint64_t v9 = 0;
  }
  return v9 | v10;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteScrollingCoordinator28ScrollPositionChangedForNodeEN6WebKit26RemoteScrollingCoordinatorES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19ScrollingNodeIDTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS9_10FloatPointENSt3__18optionalISI_EEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAAE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteScrollingCoordinator28ScrollPositionChangedForNodeEN6WebKit26RemoteScrollingCoordinatorES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19ScrollingNodeIDTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS9_10FloatPointENSt3__18optionalISI_EEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAAE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages26RemoteScrollingCoordinator28ScrollPositionChangedForNodeEN6WebKit26RemoteScrollingCoordinatorES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19ScrollingNodeIDTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEERKNS9_10FloatPointENSt3__18optionalISI_EEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3187;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  char v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  char v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PlatformWheelEventPhase,WebCore::PlatformWheelEventPhase>>(uint64_t *a1)
{
  unsigned __int16 v2 = IPC::Decoder::decode<WebCore::PlatformWheelEventPhase>(a1);
  if (v2 >= 0x100u)
  {
    unsigned __int8 v6 = v2;
    unsigned __int16 v7 = IPC::Decoder::decode<WebCore::PlatformWheelEventPhase>(a1);
    int v5 = v7 > 0xFFu;
    if ((v7 & 0xFF00) != 0) {
      unsigned __int8 v4 = v6;
    }
    else {
      unsigned __int8 v4 = 0;
    }
    if ((v7 & 0xFF00) != 0) {
      unsigned __int8 v3 = v7;
    }
    else {
      unsigned __int8 v3 = 0;
    }
  }
  else
  {
    unsigned __int8 v4 = 0;
    int v5 = 0;
  }
  int v8 = v5 << 16;
  uint64_t result = v8 & 0xFFFF0000 | (v3 << 8) | v4;
  if (!v8)
  {
    uint64_t v10 = *a1;
    uint64_t v11 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      if (v11)
      {
        uint64_t v13 = result;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
        return v13;
      }
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::PlatformWheelEventPhase>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = a1[2] - *a1;
  if (v1 <= v3)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      unint64_t v18 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v2, v1);
        a1 = v18;
        uint64_t v11 = *v18;
        unint64_t v10 = v18[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  else
  {
    unsigned __int8 v4 = (unsigned __int8 *)(v2 + v3);
    a1[2] = v4 + 1;
    if (v2)
    {
      LODWORD(v5) = *v4;
      if (v5 <= 0x20 && ((1 << v5) & 0x100010117) != 0)
      {
        int v7 = 1;
        goto LABEL_8;
      }
      LODWORD(v5) = 0;
LABEL_11:
      int v7 = 0;
      goto LABEL_8;
    }
    unint64_t v10 = v1;
    uint64_t v11 = 0;
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = a1[3];
  if (!v5) {
    goto LABEL_11;
  }
  unint64_t v16 = a1;
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v11);
  }
  LODWORD(v5) = 0;
  int v7 = 0;
  a1 = v16;
LABEL_8:
  uint64_t v8 = v5 | (v7 << 8);
  if (v8 <= 0xFF)
  {
    uint64_t v13 = *a1;
    uint64_t v14 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v14)
      {
        unsigned int v17 = v8;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
        return v17;
      }
    }
  }
  return v8;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::ScrollingNodeIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::OptionSet<WebCore::WheelEventTestMonitorDeferReason>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a2, (uint64_t)&v23);
  if (v24)
  {
    unint64_t v7 = *((void *)a2 + 1);
    uint64_t v8 = *(void *)a2;
    unint64_t v9 = ((*((void *)a2 + 2) + 1) & 0xFFFFFFFFFFFFFFFELL) - *(void *)a2;
    if (v7 < v9 || v7 - v9 <= 1)
    {
      unint64_t v6 = 0;
      uint64_t v5 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v16 = *((void *)a2 + 3);
      if (v16)
      {
        if (v7)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v8, v7);
          uint64_t v5 = *(void *)a2;
          unint64_t v6 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v6 = 0;
          uint64_t v5 = 0;
        }
      }
LABEL_11:
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t result = *((void *)a2 + 3);
      if (result) {
        goto LABEL_27;
      }
      goto LABEL_12;
    }
    uint64_t v11 = (unsigned __int16 *)(v8 + v9);
    *((void *)a2 + 2) = v11 + 1;
    if (!v8)
    {
      unint64_t v6 = v7;
      uint64_t v5 = 0;
      goto LABEL_11;
    }
    unsigned int v12 = *v11;
    if (v12 <= 0x3FF)
    {
      __int16 v13 = v12 & 0x300;
      __int16 v14 = v12;
      unsigned int v15 = 0x10000;
      goto LABEL_13;
    }
LABEL_12:
    while (1)
    {
      unsigned int v15 = 0;
      __int16 v14 = 0;
      __int16 v13 = 0;
LABEL_13:
      if (!HIWORD(v15)) {
        break;
      }
      if (v24)
      {
        *(_OWORD *)a1 = v23;
        *(_WORD *)(a1 + 16) = v14 | v15 | v13;
        *(unsigned char *)(a1 + 24) = 1;
        return result;
      }
      __break(1u);
LABEL_27:
      if (v6) {
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
      }
    }
    uint64_t v17 = *(void *)a2;
    uint64_t v18 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19 && v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v20 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result) {
    BOOL v21 = v20 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21)
  {
    unint64_t v22 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v22();
  }
  return result;
}

WTF *WebKit::RemoteSourceBufferProxy::didReceiveMessage(WTF *this, atomic_uchar *volatile *a2, WTF **a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x560:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 72);
      return (WTF *)v6();
    case 0x561:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)a3);
      if (v27)
      {
        return (WTF *)WebKit::RemoteSourceBufferProxy::addTrackBuffer(v5, (unint64_t)this);
      }
      return this;
    case 0x562:
      IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>((IPC::Decoder *)a3, (uint64_t)v80);
      if (!BYTE8(v81)) {
        return (WTF *)std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v80, v17);
      }
      uint64_t v18 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!(_BYTE)v17) {
        return (WTF *)std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v80, v17);
      }
      v78[0] = v18;
      unint64_t v3 = &v78[1];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v78[1], a2);
      uint64_t v19 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v19 = &unk_1EE9BAB10;
      *(WTF **)(v19 + 8) = v78[0];
      uint64_t v20 = v78[1];
      v78[1] = 0;
      *(void *)(v19 + 16) = v20;
      *(void *)&long long v76 = v19;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v78[1]);
      unint64_t v13 = BYTE8(v81);
      if (!BYTE8(v81)) {
        goto LABEL_126;
      }
      WebKit::RemoteSourceBufferProxy::append((uint64_t)v5, (IPC::SharedBufferReference *)v80, (uint64_t *)&v76);
      uint64_t v21 = v76;
      *(void *)&long long v76 = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      return (WTF *)std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v80, v17);
    case 0x563:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime>>((uint64_t)v80, (IPC::Decoder *)a3);
      if (BYTE8(v81)) {
        return (WTF *)(*(uint64_t (**)(void, WTF *, WTF **))(**((void **)v5 + 7) + 200))(*((void *)v5 + 7), v80[0], &v80[1]);
      }
      return this;
    case 0x564:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)a3);
      if (!v7) {
        return this;
      }
      uint64_t v8 = this;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!v9) {
        return this;
      }
      v80[0] = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v80[1], a2);
      uint64_t v10 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v10 = &unk_1EE9BABB0;
      *(WTF **)(v10 + 8) = v80[0];
      uint64_t v11 = v80[1];
      v80[1] = 0;
      *(void *)(v10 + 16) = v11;
      v78[0] = (WTF *)v10;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80[1]);
      WebKit::RemoteSourceBufferProxy::bufferedSamplesForTrackId((uint64_t)v5, (uint64_t)v8, (uint64_t *)v78);
      goto LABEL_48;
    case 0x565:
      uint64_t v16 = *(uint64_t (**)(void))(**((void **)this + 7) + 144);
      return (WTF *)v16();
    case 0x566:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WebCore::SeekTarget>>((IPC::Decoder *)a3, (uint64_t)v80);
      if (!v83) {
        return this;
      }
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!v28) {
        return this;
      }
      v78[0] = this;
      unint64_t v3 = &v78[1];
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v78[1], a2);
      uint64_t v29 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v29 = &unk_1EE9BAB88;
      *(WTF **)(v29 + 8) = v78[0];
      long long v30 = v78[1];
      v78[1] = 0;
      *(void *)(v29 + 16) = v30;
      *(void *)&long long v76 = v29;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v78[1]);
      unint64_t v13 = v83;
      if (!v83) {
        goto LABEL_126;
      }
      WebKit::RemoteSourceBufferProxy::computeSeekTime((uint64_t)v5, (uint64_t)v80, (uint64_t *)&v76);
      this = (WTF *)v76;
      *(void *)&long long v76 = 0;
      if (this) {
        return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)this + 8))(this);
      }
      return this;
    case 0x567:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)a3);
      if (!v22) {
        return this;
      }
      long long v23 = this;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (!v24) {
        return this;
      }
      v80[0] = this;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v80[1], a2);
      uint64_t v25 = WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v25 = &unk_1EE9BABD8;
      *(WTF **)(v25 + 8) = v80[0];
      uint64_t v26 = v80[1];
      v80[1] = 0;
      *(void *)(v25 + 16) = v26;
      v78[0] = (WTF *)v25;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80[1]);
      WebKit::RemoteSourceBufferProxy::enqueuedSamplesForTrackID((uint64_t)v5, (uint64_t)v23, (uint64_t *)v78);
LABEL_48:
      this = v78[0];
      v78[0] = 0;
      if (this) {
        return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)this + 8))(this);
      }
      return this;
    case 0x568:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF **))(**((void **)v5 + 7) + 328))(*((void *)v5 + 7), v80);
      }
      return this;
    case 0x569:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF **))(**((void **)v5 + 7) + 120))(*((void *)v5 + 7), v80);
      }
      return this;
    case 0x56A:
      IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)a3, (uint64_t)&v74);
      if (!v75
        || (IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)v3, (uint64_t)&v76), !v77)
        || (IPC::Decoder::decode<WTF::MediaTime>((IPC::Decoder *)v3, (uint64_t)v78), !v79))
      {
        unsigned int v51 = *v3;
        long long v52 = v3[1];
        IPC::Encoder *v3 = 0;
        v3[1] = 0;
        this = v3[3];
        if (!this) {
          return this;
        }
        goto LABEL_155;
      }
      unint64_t v13 = v75;
      if (!v75 || (unint64_t v13 = v77) == 0)
      {
LABEL_126:
        __break(1u);
LABEL_127:
        unsigned int v56 = 0;
        uint64_t v57 = 0;
        IPC::Encoder *v3 = 0;
        v3[1] = 0;
        int v58 = v3[3];
        if (v58)
        {
          if (v12)
          {
            (*(void (**)(WTF *, unint64_t, WTF *))(*(void *)v58 + 16))(v58, v13, v12);
            uint64_t v57 = *v3;
            unsigned int v56 = v3[1];
          }
          else
          {
            unsigned int v56 = 0;
            uint64_t v57 = 0;
          }
        }
        goto LABEL_128;
      }
      *(_OWORD *)uint64_t v80 = v74;
      long long v81 = v76;
      long long v82 = *(_OWORD *)v78;
      unsigned __int8 v83 = 1;
      this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (v31)
      {
        v78[0] = this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v78[1], a2);
        uint64_t v32 = WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v32 = &unk_1EE9BAB38;
        *(WTF **)(v32 + 8) = v78[0];
        BOOL v33 = v78[1];
        v78[1] = 0;
        *(void *)(v32 + 16) = v33;
        *(void *)&long long v76 = v32;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v78[1]);
        WebKit::RemoteSourceBufferProxy::removeCodedFrames((uint64_t)v5, (uint64_t)v80, (uint64_t)&v81, (uint64_t)&v82, (uint64_t *)&v76);
        this = (WTF *)v76;
        *(void *)&long long v76 = 0;
        if (this) {
          return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)this + 8))(this);
        }
      }
      return this;
    case 0x56B:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 88);
      return (WTF *)v6();
    case 0x56C:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 80);
      return (WTF *)v6();
    case 0x56D:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 224);
      return (WTF *)v6();
    case 0x56E:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 136);
      return (WTF *)v6();
    case 0x56F:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF **))(**((void **)v5 + 7) + 272))(*((void *)v5 + 7), v80);
      }
      return this;
    case 0x570:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_121;
      }
      return (WTF *)WebKit::RemoteSourceBufferProxy::setActive(v5);
    case 0x571:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 152);
      return (WTF *)v6();
    case 0x572:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF **))(**((void **)v5 + 7) + 256))(*((void *)v5 + 7), v80);
      }
      return this;
    case 0x573:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF **))(**((void **)v5 + 7) + 248))(*((void *)v5 + 7), v80);
      }
      return this;
    case 0x574:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF **))(**((void **)v5 + 7) + 160))(*((void *)v5 + 7), v80);
      }
      return this;
    case 0x575:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 168);
      return (WTF *)v6();
    case 0x576:
      this = (WTF *)IPC::Decoder::decode<std::tuple<double>>((uint64_t *)a3);
      if (v34)
      {
        long long v35 = this;
        this = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (v36)
        {
          v80[0] = this;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v80[1], a2);
          uint64_t v37 = WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v37 = &unk_1EE9BAB60;
          *(WTF **)(v37 + 8) = v80[0];
          char v38 = v80[1];
          v80[1] = 0;
          *(void *)(v37 + 16) = v38;
          v78[0] = (WTF *)v37;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v80[1]);
          WebKit::RemoteSourceBufferProxy::setMaximumBufferSize((uint64_t)v5, (uint64_t)v35, (uint64_t *)v78);
          this = v78[0];
          v78[0] = 0;
          if (this) {
            return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)this + 8))(this);
          }
        }
      }
      return this;
    case 0x577:
      this = (WTF *)IPC::Decoder::decode<std::tuple<unsigned long long,unsigned long long>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF *, WTF *))(**((void **)v5 + 7) + 360))(*((void *)v5 + 7), v80[0], v80[1]);
      }
      return this;
    case 0x578:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu) {
        goto LABEL_121;
      }
      return (WTF *)WebKit::RemoteSourceBufferProxy::setMediaSourceEnded(v5);
    case 0x579:
      unsigned int v12 = a3[1];
      unint64_t v13 = (unint64_t)*a3;
      unint64_t v14 = a3[2] - *a3;
      if ((unint64_t)v12 <= v14) {
        goto LABEL_127;
      }
      unsigned int v15 = (unsigned __int8 *)(v13 + v14);
      a3[2] = (WTF *)(v15 + 1);
      if (v13)
      {
        if (*v15 < 2u)
        {
          uint64_t v16 = *(uint64_t (**)(void))(**((void **)this + 7) + 112);
          return (WTF *)v16();
        }
      }
      else
      {
        unsigned int v56 = v12;
        uint64_t v57 = 0;
LABEL_128:
        IPC::Encoder *v3 = 0;
        v3[1] = 0;
        char v59 = v3[3];
        if (v59 && v56) {
          (*(void (**)(WTF *, WTF *))(*(void *)v59 + 16))(v59, v57);
        }
      }
      uint64_t v60 = *v3;
      uint64_t v61 = v3[1];
      IPC::Encoder *v3 = 0;
      v3[1] = 0;
      this = v3[3];
      if (!this) {
        return this;
      }
      if (!v61) {
        return this;
      }
      (*(void (**)(WTF *, WTF *))(*(void *)this + 16))(this, v60);
      int v62 = v3[1];
      this = v3[3];
      IPC::Encoder *v3 = 0;
      v3[1] = 0;
      if (!this || !v62) {
        return this;
      }
      goto LABEL_133;
    case 0x57A:
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3) <= 0xFFu)
      {
LABEL_121:
        uint64_t v54 = v3[1];
        IPC::Encoder *v3 = 0;
        v3[1] = 0;
        this = v3[3];
        if (this) {
          BOOL v55 = v54 == 0;
        }
        else {
          BOOL v55 = 1;
        }
        if (!v55)
        {
LABEL_133:
          uint64_t v63 = *(uint64_t (**)(void))(*(void *)this + 16);
          return (WTF *)v63();
        }
      }
      else
      {
        return (WTF *)WebKit::RemoteSourceBufferProxy::setShouldGenerateTimestamps(v5);
      }
      return this;
    case 0x57B:
      this = (WTF *)IPC::Decoder::decode<std::tuple<WTF::MediaTime>>((IPC::Decoder *)a3, (uint64_t)v80);
      if ((_BYTE)v81) {
        return (WTF *)(*(uint64_t (**)(void, WTF **))(**((void **)v5 + 7) + 240))(*((void *)v5 + 7), v80);
      }
      return this;
    case 0x57C:
      unint64_t v6 = *(uint64_t (**)(void))(**((void **)this + 7) + 232);
      return (WTF *)v6();
    case 0x57D:
      unint64_t v39 = (unint64_t)a3[1];
      __int16 v40 = *a3;
      unint64_t v41 = (((unint64_t)a3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*a3;
      if (v39 < v41 || v39 - v41 <= 7)
      {
        uint64_t v64 = 0;
        BOOL v65 = 0;
        IPC::Encoder *v3 = 0;
        v3[1] = 0;
        uint64_t v66 = v3[3];
        if (v66)
        {
          if (v39)
          {
            (*(void (**)(WTF *, WTF *, unint64_t))(*(void *)v66 + 16))(v66, v40, v39);
            BOOL v65 = *v3;
            uint64_t v64 = v3[1];
          }
          else
          {
            uint64_t v64 = 0;
            BOOL v65 = 0;
          }
        }
        goto LABEL_137;
      }
      char v43 = (unint64_t *)((char *)v40 + v41);
      a3[2] = (WTF *)(v43 + 1);
      if (!v40)
      {
        uint64_t v64 = (WTF *)v39;
        BOOL v65 = 0;
LABEL_137:
        IPC::Encoder *v3 = 0;
        v3[1] = 0;
        IntSize v67 = v3[3];
        if (v67 && v64) {
          (*(void (**)(WTF *, WTF *))(*(void *)v67 + 16))(v67, v65);
        }
        goto LABEL_151;
      }
      unint64_t v44 = *v43;
      v78[0] = 0;
      v78[1] = 0;
      if (v44 < 0x10000)
      {
        if (v44)
        {
          char v45 = (WTF *)WTF::fastMalloc((WTF *)(16 * v44));
          unsigned int v46 = 0;
          LODWORD(v78[1]) = v44;
          v78[0] = v45;
          do
          {
            IPC::Decoder::decode<std::pair<unsigned long long,unsigned long long>>((uint64_t)v80, v3);
            if (!(_BYTE)v81) {
              goto LABEL_150;
            }
            if (v46 == LODWORD(v78[1]))
            {
              unint64_t v48 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v46 + 1, (unint64_t)v80);
              int v49 = HIDWORD(v78[1]);
              char v45 = v78[0];
              *((_OWORD *)v78[0] + HIDWORD(v78[1])) = *v48;
            }
            else
            {
              *((_OWORD *)v45 + v46) = *(_OWORD *)v80;
              int v49 = HIDWORD(v78[1]);
            }
            unsigned int v46 = v49 + 1;
            HIDWORD(v78[1]) = v49 + 1;
            --v44;
          }
          while (v44);
          unsigned int v50 = v78[1];
        }
        else
        {
          unsigned int v50 = 0;
          char v45 = 0;
          unsigned int v46 = 0;
        }
LABEL_118:
        v80[0] = v45;
        v80[1] = (WTF *)__PAIR64__(v46, v50);
        LOBYTE(v81) = 1;
        this = (WTF *)WebKit::RemoteSourceBufferProxy::updateTrackIds((uint64_t)v5, (uint64_t)v80);
        if ((_BYTE)v81)
        {
          this = v80[0];
          if (v80[0])
          {
            v80[0] = 0;
            LODWORD(v80[1]) = 0;
            return (WTF *)WTF::fastFree(this, v53);
          }
        }
        return this;
      }
      unint64_t v68 = 0;
      LODWORD(v69) = 0;
      while (1)
      {
        IPC::Decoder::decode<std::pair<unsigned long long,unsigned long long>>((uint64_t)v80, v3);
        if (!(_BYTE)v81) {
          break;
        }
        if (v69 == LODWORD(v78[1]))
        {
          uint64_t v70 = (_OWORD *)WTF::Vector<WebCore::LinearTimingFunction::Point,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v78, v69 + 1, (unint64_t)v80);
          int v71 = HIDWORD(v78[1]);
          unint64_t v68 = v78[0];
          *((_OWORD *)v78[0] + HIDWORD(v78[1])) = *v70;
        }
        else
        {
          *((_OWORD *)v68 + v69) = *(_OWORD *)v80;
          int v71 = HIDWORD(v78[1]);
        }
        uint64_t v69 = (v71 + 1);
        HIDWORD(v78[1]) = v71 + 1;
        if (!--v44)
        {
          if (LODWORD(v78[1]) > v69)
          {
            if (v71 == -1)
            {
              v78[0] = 0;
              LODWORD(v78[1]) = 0;
              WTF::fastFree(v68, v47);
            }
            else
            {
              LODWORD(v78[1]) = v71 + 1;
              v78[0] = (WTF *)WTF::fastRealloc(v68, (void *)(16 * v69));
            }
          }
          char v45 = v78[0];
          unsigned int v50 = v78[1];
          unsigned int v46 = HIDWORD(v78[1]);
          goto LABEL_118;
        }
      }
      char v45 = v78[0];
      if (v78[0])
      {
LABEL_150:
        v78[0] = 0;
        LODWORD(v78[1]) = 0;
        WTF::fastFree(v45, v47);
      }
LABEL_151:
      CFTypeRef v72 = *v3;
      uint64_t v73 = v3[1];
      IPC::Encoder *v3 = 0;
      v3[1] = 0;
      this = v3[3];
      if (this)
      {
        if (v73)
        {
          (*(void (**)(WTF *, WTF *))(*(void *)this + 16))(this, v72);
          unsigned int v51 = *v3;
          long long v52 = v3[1];
          this = v3[3];
          IPC::Encoder *v3 = 0;
          v3[1] = 0;
          if (this)
          {
LABEL_155:
            if (v52) {
              return (WTF *)(*(uint64_t (**)(WTF *, WTF *))(*(void *)this + 16))(this, v51);
            }
          }
        }
      }
      return this;
    default:
      return this;
  }
}

WTF *non-virtual thunk to'WebKit::RemoteSourceBufferProxy::didReceiveMessage(WebKit::RemoteSourceBufferProxy *this, atomic_uchar *volatile *a2, WTF **a3)
{
  return WebKit::RemoteSourceBufferProxy::didReceiveMessage((WebKit::RemoteSourceBufferProxy *)((char *)this - 16), a2, a3);
}

uint64_t WebKit::RemoteSourceBufferProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, WTF::StringImpl **a4)
{
  int v7 = a3[25];
  if (v7 == 3734)
  {
    unint64_t v17 = IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)a3);
    if (v18)
    {
      uint64_t v19 = v17;
      uint64_t v20 = *a4;
      *a4 = 0;
      unint64_t v41 = v20;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v42, a2);
      uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x18);
      *(void *)uint64_t v21 = &unk_1EE9BAC50;
      *((void *)v21 + 1) = v41;
      char v22 = v42;
      unint64_t v41 = 0;
      char v42 = 0;
      *((void *)v21 + 2) = v22;
      char v38 = v21;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v42);
      char v24 = v41;
      unint64_t v41 = 0;
      if (v24)
      {
        IPC::Encoder::~Encoder(v24, v23);
        WTF::fastFree(v34, v35);
      }
      WebKit::RemoteSourceBufferProxy::minimumUpcomingPresentationTimeForTrackID(a1, v19, (uint64_t *)&v38);
      uint64_t v25 = v38;
      char v38 = 0;
      if (v25) {
        (*(void (**)(IPC::Encoder *))(*(void *)v25 + 8))(v25);
      }
      return 1;
    }
    return 0;
  }
  if (v7 == 3733)
  {
    IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime>>((uint64_t)&v41, (IPC::Decoder *)a3);
    BOOL v8 = v44 != 0;
    if (v44)
    {
      uint64_t v26 = *a4;
      *a4 = 0;
      char v38 = v26;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v39, a2);
      char v27 = (void *)WTF::fastMalloc((WTF *)0x18);
      *char v27 = &unk_1EE9BAC28;
      v27[1] = v38;
      char v28 = v39[0];
      char v38 = 0;
      v39[0] = 0;
      v27[2] = v28;
      __int16 v40 = v27;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v39);
      long long v30 = v38;
      char v38 = 0;
      if (v30)
      {
        IPC::Encoder::~Encoder(v30, v29);
        WTF::fastFree(v36, v37);
      }
      WebKit::RemoteSourceBufferProxy::evictCodedFrames(a1, (uint64_t)v41, (uint64_t)&v42, (uint64_t *)&v40);
      uint64_t v31 = (uint64_t)v40;
      __int16 v40 = 0;
      if (v31) {
        (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
      }
    }
    return v8;
  }
  if (v7 != 3732) {
    return 0;
  }
  IPC::Decoder::decode<std::tuple<WebCore::ContentType>>((IPC::Decoder *)a3, (uint64_t)&v41);
  BOOL v8 = v43 != 0;
  if (!v43) {
    return v8;
  }
  char v9 = *a4;
  *a4 = 0;
  char v38 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v39, a2);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v10 = &unk_1EE9BAC00;
  v10[1] = v38;
  uint64_t v11 = v39[0];
  char v38 = 0;
  v39[0] = 0;
  v10[2] = v11;
  __int16 v40 = v10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v39);
  uint64_t result = (uint64_t)v38;
  char v38 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
    uint64_t result = WTF::fastFree(v32, v33);
  }
  if (v43)
  {
    WebKit::RemoteSourceBufferProxy::canSwitchToType(a1, (uint64_t)&v41, (uint64_t *)&v40);
    uint64_t v15 = (uint64_t)v40;
    __int16 v40 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    if (v43)
    {
      uint64_t v16 = v41;
      unint64_t v41 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2) {
          WTF::StringImpl::destroy(v16, v14);
        }
        else {
          *(_DWORD *)v16 -= 2;
        }
      }
    }
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t non-virtual thunk to'WebKit::RemoteSourceBufferProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, unsigned __int16 *a3, WTF::StringImpl **a4)
{
  return WebKit::RemoteSourceBufferProxy::didReceiveSyncMessage(a1 - 16, a2, a3, a4);
}

uint64_t IPC::Decoder::decode<std::tuple<IPC::SharedBufferReference>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<IPC::SharedBufferReference>(a1, (uint64_t)&v7);
  char v4 = v9;
  if (v9)
  {
    *(void *)a2 = v7;
    long long v5 = v8;
    long long v8 = 0uLL;
    *(_OWORD *)(a2 + 8) = v5;
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 24) = v4;
  return std::__optional_destruct_base<IPC::SharedBufferReference,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v7, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy6AppendEN6WebKit23RemoteSourceBufferProxyES8_FvONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEERKNS_9MediaTimeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAB10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy6AppendEN6WebKit23RemoteSourceBufferProxyES8_FvONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEERKNS_9MediaTimeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAB10;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy6AppendEN6WebKit23RemoteSourceBufferProxyES8_FvONS2_21SharedBufferReferenceEONS_17CompletionHandlerIFvNSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEERKNS_9MediaTimeEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_SK_EE4callESH_SK_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3189;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unsigned int v12 = v7;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v7, a2);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  unsigned int v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy17RemoveCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvRKNS_9MediaTimeESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAB38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy17RemoveCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvRKNS_9MediaTimeESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAB38;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy17RemoveCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvRKNS_9MediaTimeESB_SB_ONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3193;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

int64_t IPC::Decoder::decode<std::tuple<unsigned long long,WTF::MediaTime>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v5, v4);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_10;
  }
  long long v8 = (uint64_t *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    }
    goto LABEL_11;
  }
  uint64_t v9 = *v8;
  int64_t result = IPC::Decoder::decode<WTF::MediaTime>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(void *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  int64_t result = *((void *)a2 + 3);
  if (result && v15)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v16();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy20SetMaximumBufferSizeEN6WebKit23RemoteSourceBufferProxyES8_FvmONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAB60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy20SetMaximumBufferSizeEN6WebKit23RemoteSourceBufferProxyES8_FvmONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAB60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy20SetMaximumBufferSizeEN6WebKit23RemoteSourceBufferProxyES8_FvmONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v3 = 3194;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  long long v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  int64_t result = v8;
  long long v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy15ComputeSeekTimeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS9_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAB88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy15ComputeSeekTimeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS9_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAB88;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy15ComputeSeekTimeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore10SeekTargetEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_9MediaTimeENS9_18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_EE4callESK_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3191;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::MediaTime,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  int64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::pair<unsigned long long,unsigned long long>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      long long v23 = a2;
      uint64_t v25 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v3);
        a2 = v23;
        int64_t result = v25;
        uint64_t v13 = *v23;
        unint64_t v12 = v23[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v12)
    {
      char v22 = a2;
      uint64_t v24 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
LABEL_30:
      a2 = v22;
      int64_t result = v24;
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  unint64_t v6 = (uint64_t *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v12 = v2;
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  unint64_t v7 = (((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v7 && v2 - v7 > 7)
  {
    uint64_t v9 = (uint64_t *)(((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v10 = *v9;
    uint64_t v11 = *v6;
    a2[2] = v9 + 1;
    *(void *)int64_t result = v11;
    *(void *)(result + 8) = v10;
    *(unsigned char *)(result + 16) = 1;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      char v22 = a2;
      uint64_t v24 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v3);
      a2 = v22;
      int64_t result = v24;
      uint64_t v20 = *v22;
      uint64_t v19 = v22[1];
      uint64_t v21 = v22[3];
      void *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v20);
          goto LABEL_30;
        }
      }
    }
  }
LABEL_19:
  *(unsigned char *)int64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  int64_t result = a2[3];
  if (result && v17)
  {
    char v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25BufferedSamplesForTrackIdEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BABB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25BufferedSamplesForTrackIdEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BABB0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25BufferedSamplesForTrackIdEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3190;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  int64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A15EA8);
    }
    unsigned char *v5 = 0;
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      char v7 = *(unsigned char *)a2;
      return IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(a1, v7);
    }
LABEL_14:
    uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25EnqueuedSamplesForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(v9);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x198A15EC8);
  }
  unsigned char *v5 = 1;
  if (*(_DWORD *)(a2 + 16)) {
    goto LABEL_14;
  }

  return IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25EnqueuedSamplesForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BABD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25EnqueuedSamplesForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BABD8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23RemoteSourceBufferProxy25EnqueuedSamplesForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_EE4callESL_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3192;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  int64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned long long,unsigned long long>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned long long,unsigned long long>,void>::decode<IPC::Decoder>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<unsigned long long>(a1);
  if (v5 && (v6 = result, uint64_t result = IPC::Decoder::decode<unsigned long long>(a1), v7))
  {
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = result;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v8;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAC00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAC00;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy15CanSwitchToTypeEN6WebKit23RemoteSourceBufferProxyES8_FvRKN7WebCore11ContentTypeEONS_17CompletionHandlerIFvbEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  char v5 = (unsigned char *)IPC::Encoder::grow(*(IPC::Encoder **)(a1 + 8), 1uLL, 1);
  if (v6)
  {
    unsigned char *v5 = a2;
    uint64_t v7 = *(void *)(a1 + 16);
    return IPC::Connection::sendMessageImpl(v7, v4, 0, 0);
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvyRKNS_9MediaTimeEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSE_24SourceBufferEvictionDataEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAC28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvyRKNS_9MediaTimeEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSE_24SourceBufferEvictionDataEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAC28;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy16EvictCodedFramesEN6WebKit23RemoteSourceBufferProxyES8_FvyRKNS_9MediaTimeEONS_17CompletionHandlerIFvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONSE_24SourceBufferEvictionDataEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_SL_EE4callESJ_SL_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 8);
  uint64_t v7 = *(IPC::Encoder **)(a1 + 8);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, *(unsigned int *)(a2 + 12));
  uint64_t v8 = *(unsigned int *)(a2 + 12);
  if (v8)
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v10 = 16 * v8;
    do
    {
      IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PlatformTimeRanges::Range,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v7, v9);
      v9 += 16;
      v10 -= 16;
    }
    while (v10);
  }
  IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::encode(v7, a3);
  uint64_t v11 = *(void *)(a1 + 16);

  return IPC::Connection::sendMessageImpl(v11, v6, 0, 0);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvNS_9MediaTimeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAC50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvNS_9MediaTimeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAC50;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteSourceBufferProxy41MinimumUpcomingPresentationTimeForTrackIDEN6WebKit23RemoteSourceBufferProxyES8_FvyONS_17CompletionHandlerIFvNS_9MediaTimeEEEEEEEbRNS2_10ConnectionERNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSA_EE4callESA_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v5[0] = a2;
  v5[1] = a3;
  uint64_t v3 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(*(IPC::Encoder **)(a1 + 8), (uint64_t)v5);
  return IPC::Connection::sendMessageImpl(v3[1], v3, 0, 0);
}

_DWORD *WebKit::RemoteWebInspectorUI::didReceiveMessage(WebKit::RemoteWebInspectorUI *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = (_DWORD *)((char *)this + 16);
  ++*((_DWORD *)this + 4);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x59D:
      IPC::Decoder::decode<WebKit::DebuggableInfoData>(a3, (uint64_t)v25);
      if (v29 && (IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v30), v31))
      {
        if (!v29)
        {
          __break(1u);
          JUMPOUT(0x198A166F8);
        }
        LOBYTE(v19) = v25[0];
        long long v7 = v26;
        long long v26 = 0uLL;
        *(_OWORD *)uint64_t v20 = v7;
        uint64_t v8 = v27;
        char v27 = 0;
        uint64_t v21 = v8;
        char v22 = v28;
        long long v23 = v30;
        char v24 = 1;
        std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v6);
        WebKit::RemoteWebInspectorUI::initialize((uint64_t)this, (uint64_t)&v19, &v23);
        if (v24)
        {
          uint64_t v9 = v23;
          long long v23 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2) {
              WTF::StringImpl::destroy(v9, a2);
            }
            else {
              *(_DWORD *)v9 -= 2;
            }
          }
          uint64_t v15 = v21;
          uint64_t v21 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, a2);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          uint64_t v16 = v20[1];
          v20[1] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, a2);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          uint64_t v11 = v20[0];
          v20[0] = 0;
          if (v11) {
            goto LABEL_19;
          }
        }
      }
      else
      {
        std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v25, v6);
        a2 = *(IPC::Connection **)a3;
        uint64_t v12 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v13 = *((void *)a3 + 3);
        if (v13 && v12) {
          goto LABEL_38;
        }
      }
      break;
    case 0x59E:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v19);
      if (LOBYTE(v20[0]))
      {
        WebKit::RemoteWebInspectorUI::sendMessageToFrontend(this, (const WTF::String *)&v19);
        goto LABEL_17;
      }
      break;
    case 0x59F:
      unsigned __int16 v10 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a3);
      if (v10 <= 0xFFu)
      {
        a2 = *(IPC::Connection **)a3;
        uint64_t v17 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v13 = *((void *)a3 + 3);
        if (v13) {
          BOOL v18 = v17 == 0;
        }
        else {
          BOOL v18 = 1;
        }
        if (!v18) {
LABEL_38:
        }
          (*(void (**)(uint64_t, IPC::Connection *))(*(void *)v13 + 16))(v13, a2);
      }
      else
      {
        WebKit::RemoteWebInspectorUI::setDiagnosticLoggingAvailable(this, v10 != 0);
      }
      break;
    case 0x5A0:
      WebKit::RemoteWebInspectorUI::showConsole(this);
      break;
    case 0x5A1:
      WebKit::RemoteWebInspectorUI::showResources(this);
      break;
    case 0x5A2:
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v19);
      if (LOBYTE(v20[0]))
      {
        WebKit::RemoteWebInspectorUI::updateFindString(this, (const WTF::String *)&v19);
LABEL_17:
        if (LOBYTE(v20[0]))
        {
          uint64_t v11 = v19;
          uint64_t v19 = 0;
          if (v11)
          {
LABEL_19:
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, a2);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      break;
    default:
      break;
  }

  return WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(v3, a2);
}

_DWORD *WTF::RefCounted<WebKit::RemoteWebInspectorUI>::deref(_DWORD *result, WTF::StringImpl *a2)
{
  if (*result == 1)
  {
    WebKit::RemoteWebInspectorUI::~RemoteWebInspectorUI((WebKit::RemoteWebInspectorUI *)(result - 4), a2);
    return (_DWORD *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*result;
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebKit::DebuggableInfoData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::DebuggableInfoData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 40))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      long long v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::DebuggableInfoData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!a3[24])
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)v7);
  if (v8)
  {
    uint64_t result = (uint64_t)IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder,WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v7, (uint64_t)a3);
    if (v8) {
      return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v6);
    }
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,BOOL>,void>::decode<IPC::Decoder,WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (v13)
    {
      uint64_t v16 = result;
      uint64_t v19 = a3;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t result = v16;
        a3 = v19;
        uint64_t v12 = *v16;
        unint64_t v11 = v16[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_8;
  }
  long long v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_8:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v14 = result[3];
    if (v14)
    {
      uint64_t v15 = result;
      uint64_t v18 = a3;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t result = v15;
        a3 = v18;
        uint64_t v5 = *v15;
        unint64_t v4 = v15[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_9:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_10:
      char v10 = 0;
      *(unsigned char *)a3 = 0;
      goto LABEL_6;
    }
LABEL_12:
    if (v4)
    {
      uint64_t v17 = a3;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
      a3 = v17;
    }
    goto LABEL_10;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_9;
  }
  if (!*(unsigned char *)(a2 + 16))
  {
    __break(1u);
    goto LABEL_12;
  }
  *(void *)a3 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a3 + 8) = v9;
  *(unsigned char *)(a3 + 16) = v8 != 0;
  char v10 = 1;
LABEL_6:
  *(unsigned char *)(a3 + 24) = v10;
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v25 = 0;
    uint64_t v26 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v27 = *((void *)a1 + 3);
    if (v27)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v6, v5);
        uint64_t v26 = *(void *)a1;
        unint64_t v25 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v25 = 0;
        uint64_t v26 = 0;
      }
    }
    goto LABEL_28;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    if (v10 >= 0x8000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorFrontendClientSaveData>(a1, (uint64_t)&v29);
        if (!v33) {
          break;
        }
        if (HIDWORD(v35) == v35)
        {
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorFrontendClientSaveData>((uint64_t)&v34, (unint64_t)&v29);
        }
        else
        {
          int v19 = HIDWORD(v35) + 1;
          uint64_t v20 = v34 + 32 * HIDWORD(v35);
          uint64_t v21 = v29;
          uint64_t v29 = 0;
          *(void *)uint64_t v20 = v21;
          uint64_t v22 = v30;
          uint64_t v30 = 0;
          *(void *)(v20 + 8) = v22;
          uint64_t v23 = v31;
          uint64_t v31 = 0;
          *(void *)(v20 + 16) = v23;
          *(unsigned char *)(v20 + 24) = v32;
          HIDWORD(v35) = v19;
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v34, HIDWORD(v35));
          *(void *)a3 = v34;
          uint64_t v28 = v35;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          *(void *)(a3 + 8) = v28;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
LABEL_17:
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        *(void *)a3 = v17;
        *(void *)(a3 + 8) = v18;
LABEL_18:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
      }
      LODWORD(v35) = v10;
      uint64_t v34 = WTF::fastMalloc((WTF *)(32 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::InspectorFrontendClientSaveData>(a1, (uint64_t)&v29);
        if (!v33) {
          break;
        }
        if (HIDWORD(v35) == v35)
        {
          WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorFrontendClientSaveData>((uint64_t)&v34, (unint64_t)&v29);
        }
        else
        {
          int v12 = HIDWORD(v35) + 1;
          uint64_t v13 = v34 + 32 * HIDWORD(v35);
          uint64_t v14 = v29;
          uint64_t v29 = 0;
          *(void *)uint64_t v13 = v14;
          uint64_t v15 = v30;
          uint64_t v30 = 0;
          *(void *)(v13 + 8) = v15;
          uint64_t v16 = v31;
          uint64_t v31 = 0;
          *(void *)(v13 + 16) = v16;
          *(unsigned char *)(v13 + 24) = v32;
          HIDWORD(v35) = v12;
        }
        std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          uint64_t v17 = v34;
          uint64_t v18 = v35;
          goto LABEL_17;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<std::tuple<WTF::String,WTF::String,WTF::String,BOOL>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
    return WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
  }
  unint64_t v25 = v5;
  uint64_t v26 = 0;
LABEL_28:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v25) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v26);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::InspectorFrontendClientSaveData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::InspectorFrontendClientSaveData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::InspectorFrontendClientSaveData>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(unsigned int *)(a1 + 12);
  int v5 = v4 + 1;
  uint64_t v6 = *(void *)a1 + 32 * v4;
  uint64_t v7 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v6 = v7;
  uint64_t v8 = *(void *)(v3 + 8);
  *(void *)(v3 + 8) = 0;
  *(void *)(v6 + 8) = v8;
  uint64_t v9 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0;
  *(void *)(v6 + 16) = v9;
  *(unsigned char *)(v6 + 24) = *(unsigned char *)(v3 + 24);
  *(_DWORD *)(a1 + 12) = v5;
  return 1;
}

unint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 32 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 27)
    {
      __break(0xC471u);
      JUMPOUT(0x198A1703CLL);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    uint64_t v5 = (WTF::StringImpl *)(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF::StringImpl **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      uint64_t v7 = *((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      *(void *)(a3 + 8) = v7;
      uint64_t v8 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v8;
      *(unsigned char *)(a3 + 24) = *((unsigned char *)v5 + 24);
      unint64_t v9 = (WTF::StringImpl *)*((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, a2);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      unint64_t v10 = (WTF::StringImpl *)*((void *)v5 + 1);
      *((void *)v5 + 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, a2);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)v5;
      *(void *)uint64_t v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 32);
      a3 += 32;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) > a2)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > a2)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::InspectorFrontendClientSaveData>::destruct((WTF::StringImpl *)(*(void *)result + 32 * a2), (WTF::StringImpl *)(*(void *)result + 32 * v4));
      *(_DWORD *)(v3 + 12) = a2;
      LODWORD(v4) = a2;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (a2)
    {
      if (a2 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x198A171FCLL);
      }
      uint64_t result = WTF::fastMalloc((WTF *)(32 * a2));
      *(_DWORD *)(v3 + 8) = a2;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::InspectorFrontendClientSaveData>::move(v5, (WTF::StringImpl *)((char *)v5 + 32 * v4), result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)a2);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::InspectorFrontendClientSaveData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v3 = (WTF::StringImpl **)result;
    do
    {
      unint64_t v4 = v3[2];
      v3[2] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      uint64_t v5 = v3[1];
      v3[1] = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, a2);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
      uint64_t result = *v3;
      WTF::StringImpl *v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 4;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::InspectorFrontendClientSaveData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::InspectorFrontendClientSaveData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 32 * v3));
  }
  unint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::InspectorFrontendClientAppearance>>(uint64_t *a1)
{
  unsigned int v2 = (unsigned __int16)IPC::Decoder::decode<WebCore::NotificationDirection>(a1);
  int v3 = 256;
  if (v2 <= 0xFF)
  {
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7)
    {
      unsigned int v8 = v2;
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
        int v3 = 0;
        unsigned int v2 = v8;
      }
      else
      {
        int v3 = 0;
      }
    }
    else
    {
      int v3 = 0;
    }
  }
  if (v2 <= 0x100) {
    LOBYTE(v2) = 0;
  }
  return v3 | v2;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::FloatRect>>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::FloatRect>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    unint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WebCore::FloatRect>,void>::decode<IPC::Decoder>@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v9);
  if (v10)
  {
    *(_OWORD *)a2 = v9;
    char v5 = 1;
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unint64_t *)a1[3];
    if (result) {
      BOOL v8 = v7 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t *, unint64_t))(*result + 16))(result, v6);
    }
    char v5 = 0;
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::CertificateInfo>>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::CertificateInfo>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(void *)a2 = v8;
    *(unsigned char *)(a2 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    uint64_t v4 = *a1;
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v5 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
    }
  }
}

atomic_uchar *volatile **WebKit::SecItemShimProxy::didReceiveMessage(atomic_uchar *volatile **this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 1454)
  {
    uint64_t v5 = (uint64_t)this;
    IPC::Decoder::decode<std::tuple<WebKit::SecItemRequestData>>((uint64_t)v14, (uint64_t *)a3);
    if (v15)
    {
      uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v7)
      {
        uint64_t v11 = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2);
        uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v8 = &unk_1EE9BAC78;
        v8[1] = v11;
        char v9 = v12;
        int v12 = 0;
        uint64_t v13 = v8;
        v8[2] = v9;
        this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
        if (!v15)
        {
          __break(1u);
          return this;
        }
        WebKit::SecItemShimProxy::secItemRequest(v5, (const __CFDictionary *)a2, (uint64_t)v14, (uint64_t *)&v13);
        uint64_t v10 = (uint64_t)v13;
        uint64_t v13 = 0;
        if (v10) {
          (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
        }
      }
    }
    return (atomic_uchar *volatile **)std::__optional_destruct_base<std::tuple<WebKit::SecItemRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v14);
  }
  return this;
}

BOOL WebKit::SecItemShimProxy::didReceiveSyncMessage(uint64_t a1, atomic_uchar *volatile *a2, uint64_t a3, IPC::Encoder **a4)
{
  if (*(_WORD *)(a3 + 50) != 3737) {
    return 0;
  }
  IPC::Decoder::decode<std::tuple<WebKit::SecItemRequestData>>((uint64_t)v16, (uint64_t *)a3);
  BOOL v7 = v17 != 0;
  if (!v17)
  {
LABEL_6:
    std::__optional_destruct_base<std::tuple<WebKit::SecItemRequestData>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16);
    return v7;
  }
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v13 = v8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v14, a2);
  char v9 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v9 = &unk_1EE9BACA0;
  v9[1] = v13;
  uint64_t v10 = v14[0];
  v14[0] = 0;
  v9[2] = v10;
  char v15 = v9;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v14);
  BOOL result = 0;
  if (v17)
  {
    WebKit::SecItemShimProxy::secItemRequestSync(a1, a2, v16, &v15);
    int v12 = v15;
    char v15 = 0;
    if (v12) {
      (*(void (**)(void *))(*v12 + 8))(v12);
    }
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void IPC::Decoder::decode<std::tuple<WebKit::SecItemRequestData>>(uint64_t a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebKit::SecItemRequestData,void>::decode(a2, (uint64_t)v9);
  if (v11)
  {
    char v4 = v9[0];
    *(_OWORD *)(a1 + 8) = v10;
    *(unsigned char *)a1 = v4;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v7 = a2[3];
    if (v7)
    {
      if (v6)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
        uint64_t v6 = a2[1];
        uint64_t v7 = a2[3];
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    *a2 = 0;
    a2[1] = 0;
    if (v7 && v6)
    {
      uint64_t v8 = *(void (**)(void))(*(void *)v7 + 16);
      v8();
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16SecItemShimProxy14SecItemRequestEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAC78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16SecItemShimProxy14SecItemRequestEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAC78;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages16SecItemShimProxy14SecItemRequestEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3198;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<std::optional<WebKit::SecItemResponseData>,void>::encode<IPC::Encoder,std::optional<WebKit::SecItemResponseData>>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  BOOL result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::ArgumentCoder<std::optional<WebKit::SecItemResponseData>,void>::encode<IPC::Encoder,std::optional<WebKit::SecItemResponseData>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A17A84);
    }
    unsigned char *v5 = 1;
    if (*(unsigned char *)(a2 + 32))
    {
      IPC::ArgumentCoder<WebKit::SecItemResponseData,void>::encode(a1, (int *)a2);
    }
    else
    {
      uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
      std::__optional_destruct_base<std::tuple<WebKit::SecItemRequestData>,false>::~__optional_destruct_base[abi:sn180100](v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A17AA4);
    }
    unsigned char *v5 = 0;
  }
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::SecItemRequestData>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v2 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v2) {
      CFRelease(v2);
    }
    int v3 = *(const void **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v3) {
      CFRelease(v3);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages16SecItemShimProxy18SecItemRequestSyncEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BACA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages16SecItemShimProxy18SecItemRequestSyncEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BACA0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100]((IPC::Encoder **)(a1 + 8), v2);

  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages16SecItemShimProxy18SecItemRequestSyncEN6WebKit16SecItemShimProxyES8_FvRNS2_10ConnectionERKNS7_18SecItemRequestDataEONS_17CompletionHandlerIFvONSt3__18optionalINS7_19SecItemResponseDataEEEEEEEEEbSA_RNS2_7DecoderERNS_9UniqueRefINS2_7EncoderEEEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = (uint64_t *)(a1 + 8);
  IPC::ArgumentCoder<std::optional<WebKit::SecItemResponseData>,void>::encode<IPC::Encoder,std::optional<WebKit::SecItemResponseData>>(*(IPC::Encoder **)(a1 + 8), a2);
  uint64_t v3 = v2[1];

  return IPC::Connection::sendMessageImpl(v3, v2, 0, 0);
}

uint64_t IPC::SharedFileHandle::create@<X0>(uint64_t a1@<X8>)
{
  WebCore::FileHandle::FileHandle((WebCore::FileHandle *)v4);
  WebCore::FileHandle::FileHandle();
  *(unsigned char *)(a1 + 24) = 1;
  return MEMORY[0x19972F510](v4);
}

uint64_t IPC::SharedFileHandle::SharedFileHandle(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 20) = 0;
  if (fileport_makefd() != -1)
  {
    WebCore::FileHandle::FileHandle((WebCore::FileHandle *)v3);
    WebCore::FileHandle::operator=();
    MEMORY[0x19972F510](v3);
  }
  return a1;
}

uint64_t IPC::SharedFileHandle::toMachSendRight@<X0>(IPC::SharedFileHandle *this@<X0>, _DWORD *a2@<X8>)
{
  WebCore::FileHandle::handle(this);
  uint64_t result = fileport_makeport();
  if (result != -1) {
    return WTF::MachSendRight::adopt(0);
  }
  *a2 = 0;
  return result;
}

uint64_t WebKit::sharedPreferencesForWebProcess@<X0>(WebKit *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  {
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 8) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowTestOnlyIPCKey(void)::key, a2);
  {
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 9) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::videoFullscreenRequiresElementFullscreenKey(void)::key, v6);
  {
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 10) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::usesSingleWebProcessKey(void)::key, v7);
  {
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 11) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::encryptedMediaAPIEnabledKey(void)::key, v8);
  {
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 12) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::allowPrivacySensitiveOperationsInNonPersistentDataStoresKey(void)::key, v9);
  {
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 13) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::appBadgeEnabledKey(void)::key, v10);
  {
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 14) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::attachmentElementEnabledKey(void)::key, v11);
  {
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 15) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::inputTypeColorEnabledKey(void)::key, v12);
  {
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 16) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::contactPickerAPIEnabledKey(void)::key, v13);
  {
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 17) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::cookieStoreManagerEnabledKey(void)::key, v14);
  {
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 18) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::dataListElementEnabledKey(void)::key, v15);
  {
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 19) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::blobFileAccessEnforcementEnabledKey(void)::key, v16);
  {
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 20) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::fullScreenEnabledKey(void)::key, v17);
  {
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 21) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForDOMRenderingEnabledKey(void)::key, v18);
  {
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 22) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::useGPUProcessForWebGLEnabledKey(void)::key, v19);
  {
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 23) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::gamepadsEnabledKey(void)::key, v20);
  {
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 24) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::modelElementEnabledKey(void)::key, v21);
  {
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 25) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::ignoreIframeEmbeddingProtectionsEnabledKey(void)::key, v22);
  {
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 26) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::lockdownFontParserEnabledKey(void)::key, v23);
  {
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 27) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::loginStatusAPIRequiresWebAuthnEnabledKey(void)::key, v24);
  {
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 28) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::serviceWorkersEnabledKey(void)::key, v25);
  {
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::shapeDetectionKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 29) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::shapeDetectionKey(void)::key, v26);
  {
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 30) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::siteIsolationEnabledKey(void)::key, v27);
  {
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 31) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechRecognitionEnabledKey(void)::key, v28);
  {
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 32) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::speechSynthesisAPIEnabledKey(void)::key, v29);
  {
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 33) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::textRecognitionInVideosEnabledKey(void)::key, v30);
  {
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 34) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webAuthenticationEnabledKey(void)::key, v31);
  {
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 35) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webLocksAPIEnabledKey(void)::key, v32);
  {
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGLEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 36) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGLEnabledKey(void)::key, v33);
  {
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 37) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webXRWebGPUBindingsEnabledKey(void)::key, v34);
  {
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  *(unsigned char *)(a3 + 38) = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webGPUEnabledKey(void)::key, v35);
  {
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl += 2;
    WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::$_0::operator() const(void)::impl;
  }
  uint64_t result = WebKit::WebPreferencesStore::getBoolValueForKey(this, (WTF::StringImpl **)&WebKit::WebPreferencesKey::webTransportEnabledKey(void)::key, v36);
  *(unsigned char *)(a3 + 39) = result;
  return result;
}

uint64_t WebKit::SimulatedInputSourceState::emptyStateForSourceType@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)(a2 + 36) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  *(unsigned char *)(a2 + 44) = 0;
  *(unsigned char *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 52) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  *(unsigned char *)(a2 + 84) = 0;
  *(unsigned char *)(a2 + 92) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)(a2 + 32) = 0;
  if ((result - 2) >= 2 && result != 5)
  {
    if (result != 4) {
      return result;
    }
    *(unsigned char *)(a2 + 92) = 1;
    *(void *)(a2 + 84) = 0;
  }
  *(unsigned char *)(a2 + 80) = 1;
  *(void *)(a2 + 72) = 0;
  return result;
}

void *WebKit::SimulatedInputKeyFrame::keyFrameToResetInputSources@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void *)*a1);
  uint64_t v6 = result;
  uint64_t v7 = v5;
  if (v3)
  {
    uint64_t v8 = (void *)(v3 + 16 * *(unsigned int *)(v3 - 4));
    uint64_t v9 = *(unsigned int *)(v3 - 12);
    if (v9)
    {
      if (v9 >= 0x2222223)
      {
        __break(0xC471u);
        return result;
      }
      int v10 = 120 * v9;
      uint64_t v3 = WTF::fastMalloc((WTF *)(120 * v9));
      unsigned int v28 = (v10 & 0xFFFFFFF8) / 0x78;
    }
    else
    {
      unsigned int v28 = 0;
      uint64_t v3 = 0;
    }
  }
  else
  {
    unsigned int v28 = 0;
    uint64_t v8 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  if (v8 != v6)
  {
    unsigned int v11 = 0;
    while (1)
    {
      uint64_t v12 = v6[1];
      int v13 = *(_DWORD *)(v12 + 4);
      v41[4] = 0;
      v41[8] = 0;
      v41[12] = 0;
      v41[16] = 0;
      v41[20] = 0;
      char v42 = 0;
      char v43 = 0;
      v44[0] = 0;
      v44[8] = 0;
      v44[12] = 0;
      v44[20] = 0;
      v44[24] = 0;
      char v45 = 0;
      v41[0] = 0;
      if ((v13 - 2) >= 2 && v13 != 5)
      {
        if (v13 != 4) {
          goto LABEL_16;
        }
        v44[20] = 1;
        *(void *)&v44[12] = 0;
      }
      v44[8] = 1;
      *(void *)char v44 = 0;
LABEL_16:
      uint64_t v31 = v12;
      long long v32 = 0u;
      long long v33 = 0u;
      memset(v40, 0, sizeof(v40));
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v41;
      *(void *)&v34[13] = *(void *)&v41[13];
      LOBYTE(v35) = 0;
      char v36 = 0;
      long long v37 = *(_OWORD *)v44;
      long long v38 = *(_OWORD *)&v44[16];
      char v39 = v45;
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v40, v5);
      if (v40[0]) {
        WTF::fastFree((WTF *)(v40[0] - 16), v15);
      }
      uint64_t v16 = v3 + 120 * v11;
      *(void *)uint64_t v16 = v31;
      uint64_t v17 = v32;
      *(void *)&long long v32 = 0;
      *(void *)(v16 + 8) = v17;
      uint64_t v18 = *((void *)&v32 + 1);
      *((void *)&v32 + 1) = 0;
      *(void *)(v16 + 16) = v18;
      uint64_t v19 = v33;
      *(void *)&long long v33 = 0;
      *(void *)(v16 + 24) = v19;
      uint64_t v20 = *((void *)&v33 + 1);
      *((void *)&v33 + 1) = 0;
      *(void *)(v16 + 32) = v20;
      long long v21 = *(_OWORD *)v34;
      uint64_t v22 = *(void *)&v34[13];
      *(unsigned char *)(v16 + 64) = 0;
      uint64_t v23 = v16 + 64;
      *(void *)(v23 - 11) = v22;
      *(_OWORD *)(v23 - 24) = v21;
      *(unsigned char *)(v23 + 8) = 0;
      if (v36)
      {
        uint64_t v24 = v35;
        uint64_t v35 = 0;
        *(void *)uint64_t v23 = v24;
        *(unsigned char *)(v23 + 8) = 1;
      }
      uint64_t v25 = v3 + 120 * v11;
      long long v26 = v37;
      long long v27 = v38;
      *(unsigned char *)(v25 + 112) = v39;
      *(_OWORD *)(v25 + 80) = v26;
      *(_OWORD *)(v25 + 96) = v27;
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)&v32, v15);
      if ((void)v32) {
        WTF::fastFree((WTF *)(v32 - 16), v5);
      }
      while (1)
      {
        v6 += 2;
        if (v6 == v7) {
          break;
        }
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_26;
        }
      }
      uint64_t v6 = v7;
LABEL_26:
      ++v11;
      if (v6 == v8) {
        goto LABEL_29;
      }
    }
  }
  unsigned int v11 = 0;
LABEL_29:
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v28;
  *(_DWORD *)(a2 + 12) = v11;
  return (void *)WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v5);
}

uint64_t WebKit::SimulatedInputDispatcher::SimulatedInputDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = 1;
  uint64_t v6 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
  uint64_t v7 = *(atomic_uint **)(a2 + 24);
  atomic_fetch_add(v7, 1u);
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  uint64_t v8 = (WTF::RunLoop *)WTF::RunLoop::current((WTF::RunLoop *)v6);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v9 = &unk_1EE9BACD8;
  v9[1] = WebKit::SimulatedInputDispatcher::keyFrameTransitionDurationTimerFired;
  v9[2] = 0;
  v9[3] = a1;
  WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 64), v8);
  *(void *)(a1 + 64) = &unk_1EE9B3390;
  *(void *)(a1 + 88) = v9;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  return a1;
}

uint64_t WebKit::SimulatedInputDispatcher::keyFrameTransitionDurationTimerFired(WebKit::SimulatedInputDispatcher *this)
{
  WTF::RunLoop::TimerBase::stop((WebKit::SimulatedInputDispatcher *)((char *)this + 64));
  uint64_t result = WebKit::SimulatedInputDispatcher::isKeyFrameTransitionComplete((uint64_t)this);
  if (result)
  {
    uint64_t v9 = *((void *)this + 7);
    *((void *)this + 7) = 0;
    v5[0] = 0;
    char v8 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v9, (uint64_t)v5);
    if (v8)
    {
      if (v7)
      {
        int v4 = v6;
        uint64_t v6 = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 2) {
            WTF::StringImpl::destroy(v4, v3);
          }
          else {
            *(_DWORD *)v4 -= 2;
          }
        }
      }
    }
    uint64_t result = v9;
    uint64_t v9 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void WebKit::SimulatedInputDispatcher::~SimulatedInputDispatcher(WebKit::SimulatedInputDispatcher *this, void *a2)
{
  WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 96, a2);
  *((void *)this + 8) = &unk_1EE9B3390;
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::SimulatedInputDispatcher *)((char *)this + 64));
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  char v7 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v7)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v4);
    }
  }
}

uint64_t WebKit::SimulatedInputDispatcher::isKeyFrameTransitionComplete(uint64_t this)
{
  uint64_t v1 = *(unsigned int *)(this + 112);
  if (*(_DWORD *)(this + 108) <= v1)
  {
    __break(0xC471u);
  }
  else if (*(_DWORD *)(*(void *)(this + 96) + 16 * v1 + 12) <= *(_DWORD *)(this + 116))
  {
    return WTF::RunLoop::TimerBase::isActive((WTF::RunLoop::TimerBase *)(this + 64)) ^ 1;
  }
  else
  {
    return 0;
  }
  return this;
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v11 = *a1;
  *a1 = 0;
  LOBYTE(v7) = 0;
  char v10 = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    int v7 = *(_DWORD *)a2;
    LOBYTE(v8) = 0;
    char v9 = 0;
    if (*(unsigned char *)(a2 + 16))
    {
      unsigned int v2 = *(WTF::StringImpl **)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      char v8 = v2;
      char v9 = 1;
    }
    char v10 = 1;
  }
  WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v11, &v7);
  if (v10) {
    BOOL v4 = v9 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = v8;
    char v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(WebKit::SimulatedInputDispatcher *this)
{
  unsigned int v2 = *((_DWORD *)this + 27);
  unsigned int v3 = *((_DWORD *)this + 28);
  uint64_t v4 = v3 + 1;
  *((_DWORD *)this + 28) = v4;
  if (v2 == v4)
  {
    LOBYTE(v14[0]) = 0;
    char v15 = 0;
    return (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::finishDispatching((uint64_t)this, v14);
  }
  else
  {
    if (v2 <= v3 || v2 <= v4)
    {
      __break(0xC471u);
      JUMPOUT(0x198A18F20);
    }
    uint64_t v6 = *((void *)this + 12) + 16 * v4;
    ++*(_DWORD *)this;
    int v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v7 = &unk_1EE9BAD00;
    v7[1] = this;
    v7[2] = this;
    *((_DWORD *)this + 29) = 0;
    uint64_t v8 = *((void *)this + 7);
    *((void *)this + 7) = v7;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    uint64_t v9 = *(unsigned int *)(v6 + 12);
    double v10 = 0.0;
    if (v9)
    {
      uint64_t v11 = 120 * v9;
      uint64_t v12 = (double *)(*(void *)v6 + 112);
      do
      {
        double v13 = 0.0;
        if (*(unsigned char *)v12) {
          double v13 = *(v12 - 1);
        }
        if (v10 < v13) {
          double v10 = v13;
        }
        v12 += 15;
        v11 -= 120;
      }
      while (v11);
    }
    WTF::RunLoop::TimerBase::start();
    return WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(this);
  }
}

uint64_t WebKit::SimulatedInputDispatcher::finishDispatching(uint64_t a1, int *a2)
{
  WTF::RunLoop::TimerBase::stop((WTF::RunLoop::TimerBase *)(a1 + 64));
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (*(unsigned char *)(a1 + 40)) {
    *(unsigned char *)(a1 + 40) = 0;
  }
  if (*(_DWORD *)(a1 + 104))
  {
    uint64_t v5 = *(unsigned int *)(a1 + 108);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = 16 * v5;
      do
      {
        uint64_t v6 = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6, v4)+ 16;
        v7 -= 16;
      }
      while (v7);
      *(_DWORD *)(a1 + 108) = 0;
    }
    uint64_t v8 = *(WTF **)(a1 + 96);
    if (v8)
    {
      *(void *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 104) = 0;
      WTF::fastFree(v8, v4);
    }
  }
  *(void *)(a1 + 112) = 0;
  LOBYTE(v13) = 0;
  char v16 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    int v13 = *a2;
    LOBYTE(v14) = 0;
    char v15 = 0;
    if (*((unsigned char *)a2 + 16))
    {
      uint64_t v9 = (WTF::StringImpl *)*((void *)a2 + 1);
      if (v9) {
        *(_DWORD *)v9 += 2;
      }
      uint64_t v14 = v9;
      char v15 = 1;
    }
    char v16 = 1;
  }
  WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(&v17, (uint64_t)&v13);
  if (v16)
  {
    if (v15)
    {
      uint64_t v11 = v14;
      uint64_t v14 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v10);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
    }
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

WTF::StringImpl *WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(WebKit::SimulatedInputDispatcher *this)
{
  uint64_t result = (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::isKeyFrameTransitionComplete((uint64_t)this);
  if (result)
  {
    v106[0] = *((WTF::StringImpl **)this + 7);
    *((void *)this + 7) = 0;
    v97[0] = 0;
    char v100 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)v106, (uint64_t)v97);
    if (v100) {
      BOOL v4 = v99 == 0;
    }
    else {
      BOOL v4 = 1;
    }
    if (!v4)
    {
      uint64_t v5 = v98;
      long long v98 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v3);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
    uint64_t result = v106[0];
    v106[0] = 0;
    if (result) {
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    return result;
  }
  uint64_t v6 = *((unsigned int *)this + 28);
  if (*((_DWORD *)this + 27) <= v6)
  {
    __break(0xC471u);
    JUMPOUT(0x198A19C74);
  }
  unsigned int v7 = *((_DWORD *)this + 29);
  uint64_t v8 = *((void *)this + 12) + 16 * v6;
  unsigned int v9 = *(_DWORD *)(v8 + 12);
  if (v9 != v7)
  {
    if (v9 <= v7)
    {
      __break(0xC471u);
      JUMPOUT(0x198A19C7CLL);
    }
    uint64_t v10 = *(void *)v8;
    uint64_t v11 = (_DWORD **)(*(void *)v8 + 120 * v7);
    uint64_t v14 = *v11;
    int v13 = (uint64_t *)(v11 + 1);
    uint64_t v12 = v14;
    ++*v14;
    ++*(_DWORD *)this;
    char v15 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v15 = &unk_1EE9BAD28;
    v15[1] = this;
    v15[2] = this;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x28);
    void *v17 = &unk_1EE9BAD78;
    v17[1] = this;
    v17[2] = v14;
    v17[3] = v13;
    v17[4] = v15;
    long long v104 = v17;
    uint64_t v18 = (uint64_t *)(v14 + 2);
    uint64_t v19 = v14[1];
    switch(v14[1])
    {
      case 0:
        goto LABEL_13;
      case 1:
        uint64_t v30 = *v18;
        if (*v18) {
          LODWORD(v30) = *(_DWORD *)(v30 - 12);
        }
        uint64_t v31 = *v13;
        if (*v13) {
          LODWORD(v31) = *(_DWORD *)(v31 - 12);
        }
        if (v30 != v31) {
          goto LABEL_47;
        }
        uint64_t v32 = *((void *)v12 + 2);
        if (!v32) {
          goto LABEL_45;
        }
        do
        {
          if ((WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(*v13, (WTF::StringImpl **)v32, v16) & 1) == 0)
          {
LABEL_47:
            uint64_t v39 = v13[1];
            if (v39)
            {
              int v40 = 0;
              do
              {
                unint64_t v41 = *(WTF::StringImpl **)v39;
                if (*(void *)v39) {
                  *(_DWORD *)v41 += 2;
                }
                long long v102 = v41;
                if (((WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(*v18, &v102, v16) | v40) & 1) == 0)
                {
                  uint64_t v43 = *((void *)this + 2);
                  uint64_t v44 = *(void *)(*((void *)this + 1) + 8);
                  if (v44) {
                    uint64_t v45 = v44 - 16;
                  }
                  else {
                    uint64_t v45 = 0;
                  }
                  CFRetain(*(CFTypeRef *)(v45 + 8));
                  if (v41) {
                    *(_DWORD *)v41 += 2;
                  }
                  v106[0] = v41;
                  LODWORD(v106[1]) = 1;
                  (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, void **))(*(void *)v43 + 24))(v43, v45, 106, v106, &v104);
                  if (LODWORD(v106[1]) != -1) {
                    ((void (*)(void **, WTF::StringImpl **))off_1EE9BACB8[LODWORD(v106[1])])(&v105, v106);
                  }
                  if (v44) {
                    CFRelease(*(CFTypeRef *)(v44 - 8));
                  }
                  int v40 = 1;
                }
                if (v41)
                {
                  if (*(_DWORD *)v41 == 2) {
                    WTF::StringImpl::destroy(v41, v42);
                  }
                  else {
                    *(_DWORD *)v41 -= 2;
                  }
                }
                uint64_t v39 = *(void *)(v39 + 16);
              }
              while (v39);
            }
            else
            {
              int v40 = 0;
            }
            for (uint64_t i = *((void *)v12 + 2); i; uint64_t i = *(void *)(i + 16))
            {
              unsigned int v47 = *(WTF::StringImpl **)i;
              if (*(void *)i) {
                *(_DWORD *)v47 += 2;
              }
              long long v102 = v47;
              if (((WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(*v13, &v102, v16) | v40) & 1) == 0)
              {
                uint64_t v49 = *((void *)this + 2);
                uint64_t v50 = *(void *)(*((void *)this + 1) + 8);
                if (v50) {
                  uint64_t v51 = v50 - 16;
                }
                else {
                  uint64_t v51 = 0;
                }
                CFRetain(*(CFTypeRef *)(v51 + 8));
                if (v47) {
                  *(_DWORD *)v47 += 2;
                }
                v106[0] = v47;
                LODWORD(v106[1]) = 1;
                (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, void **))(*(void *)v49 + 24))(v49, v51, 107, v106, &v104);
                if (LODWORD(v106[1]) != -1) {
                  ((void (*)(void **, WTF::StringImpl **))off_1EE9BACB8[LODWORD(v106[1])])(&v105, v106);
                }
                if (v50) {
                  CFRelease(*(CFTypeRef *)(v50 - 8));
                }
                int v40 = 1;
              }
              if (v47)
              {
                if (*(_DWORD *)v47 == 2) {
                  WTF::StringImpl::destroy(v47, v48);
                }
                else {
                  *(_DWORD *)v47 -= 2;
                }
              }
            }
            goto LABEL_214;
          }
          uint64_t v32 = *(void *)(v32 + 16);
        }
        while (v32);
LABEL_45:
        uint64_t v33 = v10 + 120 * v7;
        char v36 = *(int **)(v33 + 32);
        uint64_t v35 = (uint64_t *)(v33 + 32);
        uint64_t v34 = v36;
        long long v37 = (int *)*((void *)v12 + 4);
        if (v37) {
          int v38 = *(v37 - 3);
        }
        else {
          int v38 = 0;
        }
        if (v34) {
          int v59 = *(v34 - 3);
        }
        else {
          int v59 = 0;
        }
        if (v38 != v59) {
          goto LABEL_151;
        }
        if (v37) {
          uint64_t v60 = &v37[2 * *(v37 - 1)];
        }
        else {
          uint64_t v60 = 0;
        }
        if (v34) {
          int v62 = &v34[2 * *(v34 - 1)];
        }
        else {
          int v62 = 0;
        }
        if (v37)
        {
          uint64_t v63 = *(v37 - 1);
          uint64_t v64 = &v37[2 * v63];
          if (*(v37 - 3))
          {
            BOOL v65 = (int *)*((void *)v12 + 4);
            if (v63)
            {
              uint64_t v66 = 8 * v63;
              BOOL v65 = (int *)*((void *)v12 + 4);
              while (*v65 > 2147483645)
              {
                v65 += 2;
                v66 -= 8;
                if (!v66)
                {
                  BOOL v65 = v64;
                  break;
                }
              }
            }
LABEL_133:
            if (v60 == v65)
            {
LABEL_13:
              LOBYTE(v106[0]) = 0;
              char v108 = 0;
              WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v104, (uint64_t)v106);
              if (v108)
              {
                if ((_BYTE)v107)
                {
                  long long v21 = v106[1];
                  v106[1] = 0;
                  if (v21) {
                    goto LABEL_116;
                  }
                }
              }
              goto LABEL_214;
            }
            while (1)
            {
              if (v34)
              {
                int v67 = *v65;
                unsigned int v68 = *(v34 - 2);
                unsigned int v69 = 9 * ((v67 + ~(v67 << 15)) ^ ((v67 + ~(v67 << 15)) >> 10));
                unsigned int v70 = (v69 ^ (v69 >> 6)) + ~((v69 ^ (v69 >> 6)) << 11);
                uint64_t v71 = v68 & (v70 ^ HIWORD(v70));
                int v72 = v34[2 * v71];
                if (v72 == *v65)
                {
LABEL_139:
                  long long v74 = &v34[2 * v71];
                }
                else
                {
                  int v73 = 1;
                  while (v72 != 0x7FFFFFFF)
                  {
                    uint64_t v71 = (v71 + v73) & v68;
                    int v72 = v34[2 * v71];
                    ++v73;
                    if (v72 == v67) {
                      goto LABEL_139;
                    }
                  }
                  long long v74 = &v34[2 * *(v34 - 1)];
                }
              }
              else
              {
                long long v74 = 0;
              }
              if (v62 == v74 || v65[1] != v74[1]) {
                break;
              }
              unsigned __int8 v75 = v65 + 2;
              BOOL v65 = v64;
              if (v75 != v64)
              {
                BOOL v65 = v75;
                while (*v65 > 2147483645)
                {
                  v65 += 2;
                  if (v65 == v64)
                  {
                    BOOL v65 = v64;
                    break;
                  }
                }
              }
              if (v65 == v60) {
                goto LABEL_13;
              }
            }
LABEL_151:
            if (v34)
            {
              uint64_t v76 = *(v34 - 1);
              unsigned __int8 v77 = &v34[2 * v76];
              if (*(v34 - 3))
              {
                uint64_t v78 = v34;
                if (v76)
                {
                  uint64_t v79 = 8 * v76;
                  uint64_t v78 = v34;
                  while (*v78 > 2147483645)
                  {
                    v78 += 2;
                    v79 -= 8;
                    if (!v79)
                    {
                      uint64_t v78 = v77;
                      break;
                    }
                  }
                }
LABEL_161:
                if (v34) {
                  uint64_t v80 = &v34[2 * *(v34 - 1)];
                }
                else {
                  uint64_t v80 = 0;
                }
                if (v80 == v78)
                {
                  char v81 = 0;
                }
                else
                {
                  char v81 = 0;
                  do
                  {
                    if ((WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>>,Inspector::Protocol::Automation::VirtualKey>(*((void *)v12 + 4), *v78) & 1) == 0&& (v81 & 1) == 0)
                    {
                      uint64_t v82 = *((void *)this + 2);
                      uint64_t v83 = *(void *)(*((void *)this + 1) + 8);
                      if (v83) {
                        uint64_t v84 = v83 - 16;
                      }
                      else {
                        uint64_t v84 = 0;
                      }
                      CFRetain(*(CFTypeRef *)(v84 + 8));
                      LODWORD(v106[0]) = v78[1];
                      LODWORD(v106[1]) = 0;
                      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, void **))(*(void *)v82 + 24))(v82, v84, 106, v106, &v104);
                      if (LODWORD(v106[1]) != -1) {
                        ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9BACB8[LODWORD(v106[1])])(&v102, v106);
                      }
                      if (v83) {
                        CFRelease(*(CFTypeRef *)(v83 - 8));
                      }
                      char v81 = 1;
                    }
                    uint64_t v85 = v78 + 2;
                    uint64_t v78 = v77;
                    if (v85 != v77)
                    {
                      uint64_t v78 = v85;
                      while (*v78 > 2147483645)
                      {
                        v78 += 2;
                        if (v78 == v77)
                        {
                          uint64_t v78 = v77;
                          break;
                        }
                      }
                    }
                  }
                  while (v78 != v80);
                  long long v37 = (int *)*((void *)v12 + 4);
                }
                if (v37)
                {
                  uint64_t v86 = *(v37 - 1);
                  uint64_t v87 = &v37[2 * v86];
                  if (*(v37 - 3))
                  {
                    uint64_t v88 = v37;
                    if (v86)
                    {
                      uint64_t v89 = 8 * v86;
                      uint64_t v88 = v37;
                      while (*v88 > 2147483645)
                      {
                        v88 += 2;
                        v89 -= 8;
                        if (!v89)
                        {
                          uint64_t v88 = v87;
                          goto LABEL_194;
                        }
                      }
                    }
                    goto LABEL_194;
                  }
                  uint64_t v88 = &v37[2 * v86];
                }
                else
                {
                  uint64_t v88 = 0;
                  uint64_t v86 = 0;
                }
                uint64_t v87 = &v37[2 * v86];
LABEL_194:
                if (v37) {
                  unint64_t v90 = &v37[2 * *(v37 - 1)];
                }
                else {
                  unint64_t v90 = 0;
                }
                while (v88 != v90)
                {
                  if ((WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>>,Inspector::Protocol::Automation::VirtualKey>(*v35, *v88) & 1) == 0&& (v81 & 1) == 0)
                  {
                    uint64_t v91 = *((void *)this + 2);
                    uint64_t v92 = *(void *)(*((void *)this + 1) + 8);
                    if (v92) {
                      uint64_t v93 = v92 - 16;
                    }
                    else {
                      uint64_t v93 = 0;
                    }
                    CFRetain(*(CFTypeRef *)(v93 + 8));
                    LODWORD(v106[0]) = v88[1];
                    LODWORD(v106[1]) = 0;
                    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, void **))(*(void *)v91 + 24))(v91, v93, 107, v106, &v104);
                    if (LODWORD(v106[1]) != -1) {
                      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9BACB8[LODWORD(v106[1])])(&v102, v106);
                    }
                    if (v92) {
                      CFRelease(*(CFTypeRef *)(v92 - 8));
                    }
                    char v81 = 1;
                  }
                  uint64_t v94 = v88 + 2;
                  uint64_t v88 = v87;
                  if (v94 != v87)
                  {
                    uint64_t v88 = v94;
                    while (*v88 > 2147483645)
                    {
                      v88 += 2;
                      if (v88 == v87)
                      {
                        uint64_t v88 = v87;
                        break;
                      }
                    }
                  }
                }
LABEL_214:
                uint64_t v17 = v104;
                long long v104 = 0;
                if (v17)
                {
                  uint64_t v19 = *v17;
LABEL_216:
                  (*(void (**)(void *))(v19 + 8))(v17);
                }
                return (WTF::StringImpl *)WTF::RefCounted<WebKit::SimulatedInputSource>::deref(v12);
              }
              uint64_t v78 = &v34[2 * v76];
            }
            else
            {
              uint64_t v78 = 0;
              uint64_t v76 = 0;
            }
            unsigned __int8 v77 = &v34[2 * v76];
            goto LABEL_161;
          }
          BOOL v65 = &v37[2 * v63];
        }
        else
        {
          BOOL v65 = 0;
          uint64_t v63 = 0;
        }
        uint64_t v64 = &v37[2 * v63];
        goto LABEL_133;
      case 2:
      case 5:
        goto LABEL_221;
      case 3:
        if (*((unsigned char *)v12 + 88)) {
          uint64_t v22 = *((void *)v12 + 10);
        }
        else {
          uint64_t v22 = 0;
        }
        uint64_t v23 = v10 + 120 * v7;
        unint64_t v95 = *(void *)(v23 + 80);
        uint64_t v96 = v22;
        int v24 = *(unsigned __int8 *)(v23 + 88);
        if (*(unsigned char *)(v23 + 60)) {
          int v25 = *(_DWORD *)(v23 + 56);
        }
        else {
          int v25 = 1;
        }
        LOBYTE(v102) = 0;
        char v103 = 0;
        int v26 = *(unsigned __int8 *)(v23 + 72);
        if (*(unsigned char *)(v23 + 72))
        {
          long long v27 = *(WTF::StringImpl **)(v10 + 120 * v7 + 64);
          if (v27) {
            *(_DWORD *)v27 += 2;
          }
          long long v102 = v27;
          char v103 = 1;
        }
        long long v104 = 0;
        unsigned int v28 = (void *)WTF::fastMalloc((WTF *)0x28);
        *unsigned int v28 = &unk_1EE9BADA0;
        v28[1] = this;
        v28[2] = v18;
        v28[3] = v13;
        v28[4] = v17;
        char v101 = v28;
        if (v24)
        {
          switch(v25)
          {
            case 119:
              long long v52 = v28;
              uint64_t v53 = *((void *)this + 2);
              uint64_t v54 = *(void *)(*((void *)this + 1) + 8);
              if (v54) {
                uint64_t v55 = v54 - 16;
              }
              else {
                uint64_t v55 = 0;
              }
              CFRetain(*(CFTypeRef *)(v55 + 8));
              *(_OWORD *)long long v106 = *(_OWORD *)((char *)this + 24);
              uint64_t v107 = *((void *)this + 5);
              if (!v26)
              {
                std::__throw_bad_optional_access[abi:sn180100]();
LABEL_221:
                __break(0xC471u);
                JUMPOUT(0x198A19C4CLL);
              }
              char v101 = 0;
              unsigned int v56 = (void *)WTF::fastMalloc((WTF *)0x18);
              *unsigned int v56 = &unk_1EE9BAD50;
              v56[1] = v95;
              v56[2] = v52;
              unsigned __int16 v105 = v56;
              (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **, WTF::StringImpl **, void **))(*(void *)v53 + 32))(v53, v55, v106, &v102, &v105);
              uint64_t v57 = v105;
              unsigned __int16 v105 = 0;
              if (v57) {
                (*(void (**)(void *))(*v57 + 8))(v57);
              }
              if (v54) {
                CFRelease(*(CFTypeRef *)(v54 - 8));
              }
LABEL_112:
              uint64_t v61 = (uint64_t)v101;
              char v101 = 0;
              if (v61) {
                (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
              }
              if (v103)
              {
                long long v21 = v102;
                long long v102 = 0;
                if (v21)
                {
LABEL_116:
                  if (*(_DWORD *)v21 == 2) {
                    WTF::StringImpl::destroy(v21, v20);
                  }
                  else {
                    *(_DWORD *)v21 -= 2;
                  }
                }
              }
              goto LABEL_214;
            case 118:
              unint64_t v29 = ((v95 & 0xFFFFFFFF00000000) + v96) & 0xFFFFFFFF00000000 | (v95 + v96);
              LOBYTE(v106[0]) = 0;
              char v108 = 0;
              break;
            case 1:
              LOBYTE(v106[0]) = 0;
              char v108 = 0;
              unint64_t v29 = v95;
              break;
            default:
              goto LABEL_112;
          }
        }
        else
        {
          LOBYTE(v106[0]) = 0;
          char v108 = 0;
          unint64_t v29 = v96;
        }
        WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v101, v29, 1u, (int *)v106);
        if (v108)
        {
          if ((_BYTE)v107)
          {
            int v58 = v106[1];
            v106[1] = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 2) {
                WTF::StringImpl::destroy(v58, v20);
              }
              else {
                *(_DWORD *)v58 -= 2;
              }
            }
          }
        }
        goto LABEL_112;
      case 4:
        __break(0xC471u);
        JUMPOUT(0x198A19C6CLL);
      default:
        long long v104 = 0;
        goto LABEL_216;
    }
  }
  return result;
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()(uint64_t *a1, uint64_t a2, unsigned int a3, int *a4)
{
  uint64_t v4 = *a1;
  LOBYTE(v9) = 0;
  char v12 = 0;
  if (*((unsigned char *)a4 + 24))
  {
    int v9 = *a4;
    LOBYTE(v10) = 0;
    char v11 = 0;
    if (*((unsigned char *)a4 + 16))
    {
      uint64_t v5 = (WTF::StringImpl *)*((void *)a4 + 1);
      *((void *)a4 + 1) = 0;
      uint64_t v10 = v5;
      char v11 = 1;
    }
    char v12 = 1;
  }
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, void, int *))(*(void *)v4 + 16))(v4, a2, a3, &v9);
  if (v12) {
    BOOL v8 = v11 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

WTF::StringImpl *WebKit::SimulatedInputDispatcher::run(uint64_t a1, long long *a2, uint64_t **a3, void **a4, uint64_t *a5)
{
  if (*(void *)(a1 + 48))
  {
    int v65 = 5;
    LOBYTE(v66) = 0;
    char v67 = 0;
    char v68 = 1;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a5, (uint64_t)&v65);
    if (v68) {
      BOOL v7 = v67 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t result = v66;
      uint64_t v66 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    long long v11 = *a2;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 16);
    *(_OWORD *)(a1 + 24) = v11;
    uint64_t v12 = *a5;
    *a5 = 0;
    uint64_t v13 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v12;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 96, *((unsigned int *)a3 + 3) + 1);
    uint64_t v14 = (uint64_t)*a4;
    uint64_t result = (WTF::StringImpl *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebKit::SimulatedInputSource,WTF::RawPtrTraits<WebKit::SimulatedInputSource>,WTF::DefaultRefDerefTraits<WebKit::SimulatedInputSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(*a4);
    uint64_t v17 = result;
    uint64_t v18 = v15;
    if (v14)
    {
      uint64_t v19 = (WTF::StringImpl *)(v14 + 16 * *(unsigned int *)(v14 - 4));
      uint64_t v20 = *(unsigned int *)(v14 - 12);
      if (v20)
      {
        if (v20 >= 0x2222223)
        {
          __break(0xC471u);
          return result;
        }
        int v21 = 120 * v20;
        uint64_t v22 = WTF::fastMalloc((WTF *)(120 * v20));
        unsigned int v63 = (v21 & 0xFFFFFFF8) / 0x78;
      }
      else
      {
        unsigned int v63 = 0;
        uint64_t v22 = 0;
      }
    }
    else
    {
      unsigned int v63 = 0;
      uint64_t v19 = 0;
      uint64_t v22 = 0;
      uint64_t v69 = 0;
      uint64_t v70 = 0;
    }
    uint64_t v62 = a1;
    uint64_t v64 = a1 + 96;
    if (v19 == v17)
    {
      unsigned int v23 = 0;
    }
    else
    {
      unsigned int v23 = 0;
      do
      {
        uint64_t v24 = v22;
        int v25 = v19;
        uint64_t v71 = *((void *)v17 + 1);
        uint64_t v26 = v71;
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        unint64_t v72 = 0;
        for (uint64_t i = *(void *)(v71 + 16); i; uint64_t i = *(void *)(i + 16))
          WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)&v72, (WTF::StringImpl **)i, v16, (uint64_t)v82);
        WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(&v75, (int **)(v71 + 32));
        long long v29 = *(_OWORD *)(v71 + 40);
        *(void *)&v76[13] = *(void *)(v71 + 53);
        *(_OWORD *)uint64_t v76 = v29;
        LOBYTE(v77) = 0;
        char v78 = 0;
        int v30 = *(unsigned __int8 *)(v71 + 72);
        uint64_t v22 = v24;
        if (*(unsigned char *)(v71 + 72))
        {
          uint64_t v31 = *(_DWORD **)(v71 + 64);
          if (v31) {
            *v31 += 2;
          }
          unsigned __int8 v77 = v31;
          char v78 = 1;
        }
        long long v32 = *(_OWORD *)(v26 + 80);
        long long v33 = *(_OWORD *)(v26 + 96);
        char v81 = *(unsigned char *)(v26 + 112);
        long long v79 = v32;
        long long v80 = v33;
        uint64_t v34 = v24 + 120 * v23;
        *(void *)uint64_t v34 = v71;
        unint64_t v35 = v72;
        unint64_t v72 = 0;
        *(void *)(v34 + 8) = v35;
        uint64_t v36 = v73;
        uint64_t v73 = 0;
        *(void *)(v34 + 16) = v36;
        uint64_t v37 = v74;
        uint64_t v74 = 0;
        *(void *)(v34 + 24) = v37;
        uint64_t v38 = v75;
        uint64_t v75 = 0;
        *(void *)(v34 + 32) = v38;
        long long v39 = *(_OWORD *)v76;
        uint64_t v40 = *(void *)&v76[13];
        *(unsigned char *)(v34 + 64) = 0;
        uint64_t v41 = v34 + 64;
        *(void *)(v41 - 11) = v40;
        *(_OWORD *)(v41 - 24) = v39;
        *(unsigned char *)(v41 + 8) = 0;
        if (v30)
        {
          char v42 = v77;
          unsigned __int8 v77 = 0;
          *(void *)uint64_t v41 = v42;
          *(unsigned char *)(v41 + 8) = 1;
        }
        uint64_t v43 = v24 + 120 * v23;
        long long v44 = v79;
        long long v45 = v80;
        *(unsigned char *)(v43 + 112) = v81;
        *(_OWORD *)(v43 + 80) = v44;
        *(_OWORD *)(v43 + 96) = v45;
        WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)&v72, v28);
        uint64_t v19 = v25;
        if (v72) {
          WTF::fastFree((WTF *)(v72 - 16), v15);
        }
        while (1)
        {
          uint64_t v17 = (WTF::StringImpl *)((char *)v17 + 16);
          if (v17 == v18) {
            break;
          }
          if ((unint64_t)(*(void *)v17 + 1) > 1) {
            goto LABEL_33;
          }
        }
        uint64_t v17 = v18;
LABEL_33:
        ++v23;
      }
      while (v17 != v25);
    }
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = v22;
    unint64_t v72 = __PAIR64__(v23, v63);
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v69, v15);
    uint64_t v47 = *(unsigned int *)(v62 + 108);
    if (v47 == *(_DWORD *)(v62 + 104))
    {
      uint64_t v48 = v64;
      WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SimulatedInputKeyFrame>(v64, (unint64_t)&v71);
    }
    else
    {
      uint64_t v49 = *(void *)(v62 + 96) + 16 * v47;
      *(void *)(v49 + 8) = 0;
      uint64_t v71 = 0;
      *(void *)uint64_t v49 = v22;
      LODWORD(v72) = 0;
      *(_DWORD *)(v49 + 8) = v63;
      int v50 = HIDWORD(v72);
      HIDWORD(v72) = 0;
      *(_DWORD *)(v49 + 12) = v50;
      ++*(_DWORD *)(v62 + 108);
      uint64_t v48 = v64;
    }
    WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v46);
    uint64_t v51 = *((unsigned int *)a3 + 3);
    unint64_t v52 = *(unsigned int *)(v62 + 104);
    unint64_t v53 = v51 + *(unsigned int *)(v62 + 108);
    if (v53 > v52)
    {
      unint64_t v54 = v52 + (v52 >> 2);
      if (v54 >= 0x10) {
        unint64_t v55 = v54 + 1;
      }
      else {
        unint64_t v55 = 16;
      }
      if (v55 <= v53) {
        unint64_t v56 = v53;
      }
      else {
        unint64_t v56 = v55;
      }
      WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v48, v56);
      uint64_t v51 = *((unsigned int *)a3 + 3);
    }
    if (v51)
    {
      uint64_t v57 = *a3;
      uint64_t v58 = (uint64_t)&(*a3)[2 * v51];
      unsigned int v59 = *(_DWORD *)(v62 + 108);
      do
      {
        uint64_t v60 = *(void *)(v62 + 96) + 16 * v59;
        *(void *)uint64_t v60 = 0;
        *(void *)(v60 + 8) = 0;
        uint64_t v61 = *v57;
        *uint64_t v57 = 0;
        *(void *)uint64_t v60 = v61;
        LODWORD(v61) = *((_DWORD *)v57 + 2);
        *((_DWORD *)v57 + 2) = 0;
        *(_DWORD *)(v60 + 8) = v61;
        LODWORD(v61) = *((_DWORD *)v57 + 3);
        *((_DWORD *)v57 + 3) = 0;
        *(_DWORD *)(v60 + 12) = v61;
        unsigned int v59 = *(_DWORD *)(v62 + 108) + 1;
        *(_DWORD *)(v62 + 108) = v59;
        v57 += 2;
      }
      while (v57 != (uint64_t *)v58);
    }
    return WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame((WebKit::SimulatedInputDispatcher *)v62);
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes(uint64_t result, void *a2)
{
  for (i = *(WTF **)(result + 8); i; uint64_t result = WTF::fastFree(v3, a2))
  {
    unsigned int v3 = i;
    uint64_t i = (WTF *)*((void *)i + 2);
    uint64_t v4 = *(WTF::StringImpl **)v3;
    *(void *)unsigned int v3 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return result;
}

WebKit::SimulatedInputDispatcher *WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(WebKit::SimulatedInputDispatcher *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::SimulatedInputDispatcher::~SimulatedInputDispatcher(result, a2);
    return (WebKit::SimulatedInputDispatcher *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN9Inspector8Protocol10Automation10VirtualKeyEN3WTF6StringEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSB_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_DWORD *WTF::RefCounted<WebKit::SimulatedInputSource>::deref(_DWORD *result)
{
  uint64_t v1 = (WTF *)result;
  if (*result == 1)
  {
    unsigned int v2 = result + 2;
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(result + 16));
    uint64_t v4 = *((void *)v1 + 4);
    if (v4) {
      WTF::fastFree((WTF *)(v4 - 16), v3);
    }
    WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)v1 + 8, v3);
    if (*v2) {
      WTF::fastFree((WTF *)(*v2 - 16), v5);
    }
    return (_DWORD *)WTF::fastFree(v1, v5);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>>::destruct(*(void *)a1, *(void *)a1 + 120 * v3);
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::VectorDestructor<true,std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>>::destruct(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](v3 + 64);
      uint64_t v5 = *(void *)(v3 + 32);
      if (v5) {
        WTF::fastFree((WTF *)(v5 - 16), v4);
      }
      uint64_t result = WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes(v3 + 8, v4);
      uint64_t v7 = *(void *)(v3 + 8);
      if (v7) {
        uint64_t result = WTF::fastFree((WTF *)(v7 - 16), v6);
      }
      v3 += 120;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, 0), (uint64_t v7 = *a1) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *((_DWORD *)*a2 + 4);
  if (v9 >= 0x100) {
    unsigned int v10 = v9 >> 8;
  }
  else {
    unsigned int v10 = WTF::StringImpl::hashSlowCase(*a2);
  }
  long long v11 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v13 = v10 & v8;
    uint64_t v14 = (WTF::StringImpl ***)(v7 + 8 * (v10 & v8));
    char v15 = *v14;
    if (*v14 == (WTF::StringImpl **)-1)
    {
      long long v11 = (WTF::StringImpl ***)(v7 + 8 * v13);
      goto LABEL_13;
    }
    if (!v15) {
      break;
    }
    uint64_t result = WTF::equal(*v15, *a2, a3);
    if (result)
    {
      char v20 = 0;
      goto LABEL_31;
    }
LABEL_13:
    unsigned int v10 = i + v13;
  }
  if (v11)
  {
    WTF::StringImpl *v11 = 0;
    --*(_DWORD *)(*a1 - 16);
    uint64_t v14 = v11;
  }
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  uint64_t v17 = *a2;
  if (*a2) {
    *(_DWORD *)v17 += 2;
  }
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = v17;
  _DWORD *v14 = (WTF::StringImpl **)result;
  uint64_t v18 = *a1;
  if (*a1) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v21 = *a1;
  if (*a1) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_26:
      uint64_t v14 = (WTF::StringImpl ***)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(a1, v14);
      uint64_t result = (uint64_t)*v14;
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_26;
  }
  uint64_t v25 = a1[2];
  *(void *)(result + 8) = v25;
  *(void *)(result + 16) = 0;
  if (v25) {
    uint64_t v26 = (uint64_t *)(v25 + 16);
  }
  else {
    uint64_t v26 = a1 + 1;
  }
  uint64_t *v26 = result;
  a1[2] = result;
  char v20 = 1;
LABEL_31:
  long long v27 = *v14;
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v20;
  return result;
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::expand(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl ***a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  long long v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    uint64_t v12 = (WTF::StringImpl ***)v6;
    do
    {
      if ((unint64_t)*v12 + 1 >= 2)
      {
        unsigned int v13 = (void *)WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::lookupForReinsert(a1, v12);
        void *v13 = *v12;
        if (v12 == a3) {
          long long v11 = v13;
        }
      }
      ++v12;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::lookupForReinsert(uint64_t *a1, WTF::StringImpl ***a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    int v3 = 0;
  }
  int v4 = **a2;
  unsigned int v5 = *((_DWORD *)v4 + 4);
  if (v5 >= 0x100) {
    unsigned int v6 = v5 >> 8;
  }
  else {
    unsigned int v6 = WTF::StringImpl::hashSlowCase(v4);
  }
  int v7 = 0;
  do
  {
    uint64_t v8 = v6 & v3;
    unsigned int v6 = ++v7 + v8;
  }
  while (*(void *)(v2 + 8 * v8));
  return v2 + 8 * v8;
}

uint64_t *WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(uint64_t *a1, int **a2)
{
  *a1 = 0;
  int v3 = *a2;
  if (!*a2) {
    return a1;
  }
  int v4 = *(v3 - 3);
  if (!v4) {
    return a1;
  }
  unsigned int v6 = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist>>,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::HashMap<WebCore::PermissionsPolicy::Feature,WebCore::Allowlist,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::HashTraits<WebCore::Allowlist>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::computeBestTableSize(*(v3 - 3));
  uint64_t Table = WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::allocateTable(v6);
  *a1 = Table;
  *(_DWORD *)(Table - 4) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 12) = v4;
  *(_DWORD *)(*a1 - 16) = 0;
  uint64_t v8 = *a2;
  if (*a2)
  {
    uint64_t v9 = *(v8 - 1);
    unsigned int v10 = &v8[2 * v9];
    if (*(v8 - 3))
    {
      long long v11 = *a2;
      if (v9)
      {
        uint64_t v12 = 8 * v9;
        long long v11 = *a2;
        while (*v11 > 2147483645)
        {
          v11 += 2;
          v12 -= 8;
          if (!v12)
          {
            long long v11 = v10;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    long long v11 = &v8[2 * v9];
  }
  else
  {
    long long v11 = 0;
    uint64_t v9 = 0;
  }
  unsigned int v10 = &v8[2 * v9];
LABEL_13:
  if (v8) {
    v8 += 2 * *(v8 - 1);
  }
  if (v8 != v11)
  {
    do
    {
      uint64_t v13 = *a1;
      if (*a1) {
        int v14 = *(_DWORD *)(v13 - 8);
      }
      else {
        int v14 = 0;
      }
      int v15 = 0;
      unsigned int v16 = *v11 + ~(*v11 << 15);
      unsigned int v17 = (9 * (v16 ^ (v16 >> 10))) ^ ((9 * (v16 ^ (v16 >> 10))) >> 6);
      unsigned int v18 = (v17 + ~(v17 << 11)) ^ ((v17 + ~(v17 << 11)) >> 16);
      do
      {
        uint64_t v19 = v18 & v14;
        unsigned int v18 = ++v15 + v19;
      }
      while (*(_DWORD *)(v13 + 8 * v19) != 0x7FFFFFFF);
      uint64_t v21 = *(void *)v11;
      char v20 = v11 + 2;
      *(void *)(v13 + 8 * v19) = v21;
      int v22 = v10;
      if (v20 != v10)
      {
        int v22 = v20;
        while (*v22 > 2147483645)
        {
          v22 += 2;
          if (v22 == v10)
          {
            int v22 = v10;
            break;
          }
        }
      }
      long long v11 = v22;
    }
    while (v22 != v8);
  }
  return a1;
}

uint64_t WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::allocateTable(unsigned int a1)
{
  uint64_t result = WTF::fastMalloc((WTF *)(8 * a1 + 16)) + 16;
  if (a1)
  {
    uint64_t v3 = a1;
    int v4 = (void *)result;
    do
    {
      *v4++ = 0x7FFFFFFFLL;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::SimulatedInputDispatcher::*&)(void),WebKit::SimulatedInputDispatcher*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(void *)a1;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v4 = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2)+ 16;
      v5 -= 16;
    }
    while (v5);
  }
  unsigned int v6 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::Function<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  LOBYTE(v7) = 0;
  char v10 = 0;
  if (*((unsigned char *)a2 + 24))
  {
    int v7 = *a2;
    LOBYTE(v8) = 0;
    char v9 = 0;
    if (*((unsigned char *)a2 + 16))
    {
      uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      uint64_t v8 = v3;
      char v9 = 1;
    }
    char v10 = 1;
  }
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 16))(v2, &v7);
  if (v10) {
    BOOL v6 = v9 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    uint64_t result = v8;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BAD00;
  uint64_t v3 = (WebKit::SimulatedInputDispatcher *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BAD00;
  uint64_t v3 = (WebKit::SimulatedInputDispatcher *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 24)) {
    return WebKit::SimulatedInputDispatcher::transitionToNextKeyFrame(*(WebKit::SimulatedInputDispatcher **)(a1 + 8));
  }
  int v2 = *(_DWORD *)a2;
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    int v9 = *(_DWORD *)a2;
    LOBYTE(v10) = 0;
    char v11 = 0;
LABEL_4:
    char v12 = 1;
    return (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::finishDispatching(v3, &v9);
  }
  uint64_t v5 = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  int v9 = v2;
  if (!v5)
  {
    char v10 = 0;
    char v11 = 1;
    goto LABEL_4;
  }
  *(_DWORD *)v5 += 2;
  char v10 = v5;
  char v11 = 1;
  char v12 = 1;
  uint64_t result = (WTF::StringImpl *)WebKit::SimulatedInputDispatcher::finishDispatching(v3, &v9);
  int v7 = *(_DWORD *)v5 - 2;
  if (*(_DWORD *)v5 == 2)
  {
    uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
    int v7 = *(_DWORD *)v5;
  }
  else
  {
    *(_DWORD *)uint64_t v5 = v7;
  }
  int v8 = v7 - 2;
  if (v8)
  {
    *(_DWORD *)uint64_t v5 = v8;
  }
  else
  {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(v5, v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BAD28;
  uint64_t v3 = (WebKit::SimulatedInputDispatcher *)a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BAD28;
  uint64_t v3 = (WebKit::SimulatedInputDispatcher *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::SimulatedInputDispatcher>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(void)::$_0,void,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, int *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    int v2 = *a2;
    int v3 = *((unsigned __int8 *)a2 + 16);
    if (*((unsigned char *)a2 + 16))
    {
      uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t v7 = *(void *)(a1 + 8);
    int v14 = *(WTF::StringImpl **)(v7 + 56);
    *(void *)(v7 + 56) = 0;
    int v10 = v2;
    LOBYTE(v11) = 0;
    char v12 = 0;
    if (v3)
    {
      if (v4) {
        *(_DWORD *)v4 += 2;
      }
      char v11 = v4;
      char v12 = 1;
    }
    char v13 = 1;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)&v14, (uint64_t)&v10);
    if (v13)
    {
      if (v12)
      {
        int v9 = v11;
        char v11 = 0;
        if (v9)
        {
          if (*(_DWORD *)v9 == 2) {
            WTF::StringImpl::destroy(v9, v8);
          }
          else {
            *(_DWORD *)v9 -= 2;
          }
        }
      }
    }
    uint64_t result = v14;
    int v14 = 0;
    if (result) {
      uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(void *)result + 8))(result);
    }
    if (v3 && v4)
    {
      if (*(_DWORD *)v4 == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v4, v8);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  else
  {
    uint64_t v5 = *(WebKit::SimulatedInputDispatcher **)(a1 + 8);
    ++*((_DWORD *)v5 + 29);
    return WebKit::SimulatedInputDispatcher::transitionToNextInputSourceState(v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::resolveLocation(WebCore::IntPoint const&,std::optional<WebCore::IntPoint>,Inspector::Protocol::Automation::MouseMoveOrigin,std::optional<WTF::String>,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BAD50;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::resolveLocation(WebCore::IntPoint const&,std::optional<WebCore::IntPoint>,Inspector::Protocol::Automation::MouseMoveOrigin,std::optional<WTF::String>,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BAD50;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::resolveLocation(WebCore::IntPoint const&,std::optional<WebCore::IntPoint>,Inspector::Protocol::Automation::MouseMoveOrigin,std::optional<WTF::String>,WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)> &&)::$_0,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::call(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 24))
  {
    int v4 = *(_DWORD *)a4;
    int v5 = *(unsigned __int8 *)(a4 + 16);
    if (*(unsigned char *)(a4 + 16))
    {
      BOOL v6 = *(WTF::StringImpl **)(a4 + 8);
      *(void *)(a4 + 8) = 0;
      int v19 = v4;
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      char v20 = v6;
      char v21 = 1;
    }
    else
    {
      BOOL v6 = 0;
      int v19 = *(_DWORD *)a4;
      LOBYTE(v20) = 0;
      char v21 = 0;
    }
    char v22 = 1;
    uint64_t result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 16), 0, 0, &v19);
    if (v22)
    {
      if (v21)
      {
        uint64_t result = v20;
        char v20 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
            if (!v5) {
              return result;
            }
LABEL_18:
            if (!v6) {
              return result;
            }
            if (*(_DWORD *)v6 != 2)
            {
              *(_DWORD *)v6 -= 2;
              return result;
            }
            uint64_t result = v6;
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
          }
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (!v5) {
      return result;
    }
    goto LABEL_18;
  }
  if (a3)
  {
    int v7 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) += a2;
    *(_DWORD *)(a1 + 12) = v7 + HIDWORD(a2);
    uint64_t v8 = *(void *)(a1 + 8);
    LOBYTE(v11) = 0;
    char v14 = 0;
    uint64_t result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 16), v8, 1u, &v11);
    if (!v14) {
      return result;
    }
    if (!v13) {
      return result;
    }
    uint64_t result = v12;
    char v12 = 0;
    if (!result) {
      return result;
    }
LABEL_25:
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      return result;
    }
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
  }
  int v15 = 19;
  LOBYTE(v16) = 0;
  char v17 = 0;
  char v18 = 1;
  uint64_t result = WTF::Function<void ()(std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>)>::operator()((uint64_t *)(a1 + 16), 0, 0, &v15);
  if (v18)
  {
    if (v17)
    {
      uint64_t result = v16;
      unsigned int v16 = 0;
      if (result) {
        goto LABEL_25;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BAD78;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BAD78;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_1,void,std::optional<WebKit::AutomationCommandError>>::call(void *a1, unsigned __int8 *a2, const WTF::StringImpl *a3)
{
  if (a2[24])
  {
    int v4 = *(_DWORD *)a2;
    int v5 = a2[16];
    if (a2[16])
    {
      BOOL v6 = (WTF::StringImpl *)*((void *)a2 + 1);
      *((void *)a2 + 1) = 0;
      int v24 = v4;
      if (v6) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v25 = v6;
      char v26 = 1;
    }
    else
    {
      BOOL v6 = 0;
      int v24 = *(_DWORD *)a2;
      LOBYTE(v25) = 0;
      char v26 = 0;
    }
    char v27 = 1;
    uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)&v24);
    if (v27)
    {
      if (v26)
      {
        uint64_t result = v25;
        uint64_t v25 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
          {
            uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
            if (!v5) {
              return result;
            }
LABEL_16:
            if (!v6) {
              return result;
            }
            if (*(_DWORD *)v6 != 2)
            {
              *(_DWORD *)v6 -= 2;
              return result;
            }
            uint64_t result = v6;
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
          }
          *(_DWORD *)result -= 2;
        }
      }
    }
    if (!v5) {
      return result;
    }
    goto LABEL_16;
  }
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v29 = 0;
  long long v9 = 0uLL;
  long long v28 = 0u;
  uint64_t v10 = *(void *)(v8 + 8);
  if (v10)
  {
    do
    {
      WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::add((uint64_t *)&v28, (WTF::StringImpl **)v10, a3, (uint64_t)v30);
      uint64_t v10 = *(void *)(v10 + 16);
    }
    while (v10);
    long long v9 = v28;
    uint64_t v11 = v29;
  }
  else
  {
    uint64_t v11 = 0;
  }
  long long v14 = *(_OWORD *)(v7 + 8);
  *(_OWORD *)(v7 + 8) = v9;
  long long v28 = v14;
  uint64_t v15 = *(void *)(v7 + 24);
  *(void *)(v7 + 24) = v11;
  uint64_t v29 = v15;
  WTF::ListHashSet<WTF::String,WTF::DefaultHash<WTF::String>>::deleteAllNodes((uint64_t)&v28, a2);
  if ((void)v28) {
    WTF::fastFree((WTF *)(v28 - 16), v16);
  }
  WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::operator=((uint64_t *)(v7 + 32), (int **)(v8 + 24));
  uint64_t v17 = *(void *)(v8 + 45);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 32);
  *(void *)(v7 + 53) = v17;
  std::__optional_storage_base<WTF::String,false>::__assign_from[abi:sn180100]<std::__optional_copy_assign_base<WTF::String,false> const&>((uint64_t *)(v7 + 64), (WTF::StringImpl **)(v8 + 56));
  long long v18 = *(_OWORD *)(v8 + 72);
  long long v19 = *(_OWORD *)(v8 + 88);
  *(unsigned char *)(v7 + 112) = *(unsigned char *)(v8 + 104);
  *(_OWORD *)(v7 + 80) = v18;
  *(_OWORD *)(v7 + 96) = v19;
  v20[0] = 0;
  char v23 = 0;
  uint64_t result = (WTF::StringImpl *)WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)v20);
  if (v23)
  {
    if (v22)
    {
      uint64_t result = v21;
      char v21 = 0;
      if (result)
      {
        if (*(_DWORD *)result != 2)
        {
          *(_DWORD *)result -= 2;
          return result;
        }
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      }
    }
  }
  return result;
}

uint64_t *WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::operator=(uint64_t *a1, int **a2)
{
  WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::HashTable(&v6, a2);
  uint64_t v4 = *a1;
  *a1 = v6;
  uint64_t v6 = v4;
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_2,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BADA0;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_2,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BADA0;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::SimulatedInputDispatcher::transitionInputSourceToState(WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState &,WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)> &&)::$_2,void,std::optional<WebCore::IntPoint>,std::optional<WebKit::AutomationCommandError>>::call(void *a1, uint64_t a2, char a3, int *a4)
{
  if (*((unsigned char *)a4 + 24))
  {
    int v5 = *a4;
    int v6 = *((unsigned __int8 *)a4 + 16);
    if (*((unsigned char *)a4 + 16))
    {
      uint64_t v7 = (WTF::StringImpl *)*((void *)a4 + 1);
      *((void *)a4 + 1) = 0;
      int v52 = v5;
      if (v7) {
        *(_DWORD *)v7 += 2;
      }
      unint64_t v53 = v7;
      char v54 = 1;
    }
    else
    {
      uint64_t v7 = 0;
      int v52 = *a4;
      LOBYTE(v53) = 0;
      char v54 = 0;
    }
    char v55 = 1;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)&v52);
    if (v55)
    {
      if (v54)
      {
        char v23 = v53;
        unint64_t v53 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 == 2)
          {
            WTF::StringImpl::destroy(v23, v22);
            if (!v6) {
              return;
            }
LABEL_21:
            if (v7)
            {
              if (*(_DWORD *)v7 != 2)
              {
                *(_DWORD *)v7 -= 2;
                return;
              }
              int v24 = v7;
              goto LABEL_25;
            }
            return;
          }
          *(_DWORD *)v23 -= 2;
        }
      }
    }
    if (!v6) {
      return;
    }
    goto LABEL_21;
  }
  if (a3)
  {
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[3];
    *(void *)(v9 + 72) = a2;
    *(unsigned char *)(v9 + 80) = a3;
    uint64_t v10 = a1[2];
    uint64_t v11 = a1[3];
    if (*(unsigned char *)(v10 + 36))
    {
      if (!*(unsigned char *)(v11 + 36))
      {
        uint64_t v12 = *(void *)(v8 + 16);
        uint64_t v13 = *(void *)(*(void *)(v8 + 8) + 8);
        if (v13) {
          uint64_t v14 = v13 - 16;
        }
        else {
          uint64_t v14 = 0;
        }
        CFRetain(*(CFTypeRef *)(v14 + 8));
        uint64_t v15 = a1[3];
        if (*(unsigned char *)(v15 + 80))
        {
          uint64_t v16 = v15 + 72;
          uint64_t v17 = a1 + 4;
          long long v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v12 + 16);
          uint64_t v19 = v12;
          uint64_t v20 = v14;
          uint64_t v21 = 2;
LABEL_36:
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          goto LABEL_63;
        }
        goto LABEL_66;
      }
    }
    else if (*(unsigned char *)(v11 + 36))
    {
      uint64_t v25 = *(void *)(v8 + 16);
      uint64_t v13 = *(void *)(*(void *)(v8 + 8) + 8);
      if (v13) {
        uint64_t v26 = v13 - 16;
      }
      else {
        uint64_t v26 = 0;
      }
      CFRetain(*(CFTypeRef *)(v26 + 8));
      uint64_t v27 = a1[3];
      if (*(unsigned char *)(v27 + 80))
      {
        uint64_t v16 = v27 + 72;
        uint64_t v17 = a1 + 4;
        long long v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v25 + 16);
        uint64_t v19 = v25;
        uint64_t v20 = v26;
        uint64_t v21 = 0;
        goto LABEL_36;
      }
LABEL_66:
      uint64_t v41 = std::__throw_bad_optional_access[abi:sn180100]();
      WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(v41, v42, v43);
      return;
    }
    int v30 = *(unsigned __int8 *)(v11 + 80);
    if (*(unsigned char *)(v10 + 80)) {
      BOOL v31 = v30 == 0;
    }
    else {
      BOOL v31 = 1;
    }
    if (v31)
    {
      if ((*(unsigned char *)(v10 + 80) != 0) != (v30 != 0)) {
        goto LABEL_43;
      }
    }
    else
    {
      int v37 = *(_DWORD *)(v10 + 72);
      int v36 = *(_DWORD *)(v10 + 76);
      int v39 = *(_DWORD *)(v11 + 72);
      int v38 = *(_DWORD *)(v11 + 76);
      if (v37 != v39 || v36 != v38)
      {
LABEL_43:
        uint64_t v32 = *(void *)(v8 + 16);
        uint64_t v13 = *(void *)(*(void *)(v8 + 8) + 8);
        if (v13) {
          uint64_t v33 = v13 - 16;
        }
        else {
          uint64_t v33 = 0;
        }
        CFRetain(*(CFTypeRef *)(v33 + 8));
        uint64_t v34 = a1[3];
        if (*(unsigned char *)(v34 + 80))
        {
          uint64_t v16 = v34 + 72;
          uint64_t v35 = a1[2];
          if (*(unsigned char *)(v35 + 104)) {
            uint64_t v28 = *(void *)(v35 + 96);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v17 = a1 + 4;
          long long v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v32 + 16);
          uint64_t v19 = v32;
          uint64_t v20 = v33;
          uint64_t v21 = 1;
          uint64_t v29 = 1;
LABEL_63:
          v18(v19, v20, v21, v16, v28, v29, v17);
          if (v13) {
            CFRelease(*(CFTypeRef *)(v13 - 8));
          }
          return;
        }
        goto LABEL_66;
      }
    }
    v44[0] = 0;
    char v47 = 0;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)v44);
    if (!v47) {
      return;
    }
    if (!v46) {
      return;
    }
    int v24 = v45;
    long long v45 = 0;
    if (!v24) {
      return;
    }
  }
  else
  {
    int v48 = 19;
    LOBYTE(v49) = 0;
    char v50 = 0;
    char v51 = 1;
    WTF::CompletionHandler<void ()(std::optional<WebKit::AutomationCommandError>)>::operator()(a1 + 4, (uint64_t)&v48);
    if (!v51) {
      return;
    }
    if (!v50) {
      return;
    }
    int v24 = v49;
    uint64_t v49 = 0;
    if (!v24) {
      return;
    }
  }
  if (*(_DWORD *)v24 == 2)
  {
LABEL_25:
    WTF::StringImpl::destroy(v24, v22);
    return;
  }
  *(_DWORD *)v24 -= 2;
}

uint64_t WTF::HashTable<WTF::ListHashSetNode<WTF::String> *,WTF::ListHashSetNode<WTF::String> *,WTF::IdentityExtractor,WTF::ListHashSetNodeHashFunctions<WTF::DefaultHash<WTF::String>>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>,WTF::HashTraits<WTF::ListHashSetNode<WTF::String> *>>::contains<WTF::ListHashSetTranslator<WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t result, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  if (result)
  {
    uint64_t v4 = result;
    int v5 = *(_DWORD *)(result - 8);
    unsigned int v6 = *((_DWORD *)*a2 + 4);
    if (v6 >= 0x100) {
      unsigned int v7 = v6 >> 8;
    }
    else {
      unsigned int v7 = WTF::StringImpl::hashSlowCase(*a2);
    }
    for (i = 0; ; unsigned int v7 = i + v9)
    {
      int v9 = v7 & v5;
      uint64_t v10 = *(WTF ***)(v4 + 8 * (v7 & v5));
      if (v10 != (WTF **)-1)
      {
        if (!v10) {
          return 0;
        }
        if (WTF::equal(*v10, *a2, a3)) {
          break;
        }
      }
      ++i;
    }
    return 1;
  }
  return result;
}

uint64_t WTF::HashTable<Inspector::Protocol::Automation::VirtualKey,WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey>>,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<Inspector::Protocol::Automation::VirtualKey,Inspector::Protocol::Automation::VirtualKey,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>,WTF::StrongEnumHashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTraits<Inspector::Protocol::Automation::VirtualKey>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<Inspector::Protocol::Automation::VirtualKey>>,Inspector::Protocol::Automation::VirtualKey>(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 - 8);
  unsigned int v3 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  uint64_t v4 = v2 & (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) ^ (((v3 ^ (v3 >> 6)) + ~((v3 ^ (v3 >> 6)) << 11)) >> 16));
  int v5 = *(_DWORD *)(a1 + 8 * v4);
  if (v5 == a2) {
    return 1;
  }
  int v7 = 1;
  do
  {
    BOOL v6 = v5 != 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF) {
      break;
    }
    LODWORD(v4) = (v4 + v7) & v2;
    int v5 = *(_DWORD *)(a1 + 8 * v4);
    ++v7;
  }
  while (v5 != a2);
  return v6;
}

uint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198A1B974);
    }
    uint64_t v4 = *(WTF **)a1;
    int v5 = (void *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebKit::SimulatedInputKeyFrame>::move((uint64_t)v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

uint64_t WTF::VectorMover<false,WebKit::SimulatedInputKeyFrame>::move(uint64_t result, void *a2, uint64_t a3)
{
  for (; (void *)result != a2; a3 += 16)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v5 = *(void *)result;
    *(void *)uint64_t result = 0;
    *(void *)a3 = v5;
    LODWORD(v5) = *(_DWORD *)(result + 8);
    *(_DWORD *)(result + 8) = 0;
    *(_DWORD *)(a3 + 8) = v5;
    LODWORD(v5) = *(_DWORD *)(result + 12);
    *(_DWORD *)(result + 12) = 0;
    *(_DWORD *)(a3 + 12) = v5;
    uint64_t result = WTF::Vector<std::pair<WebKit::SimulatedInputSource &,WebKit::SimulatedInputSourceState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2)+ 16;
  }
  return result;
}

uint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::SimulatedInputKeyFrame>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::SimulatedInputKeyFrame,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WebKit::SmartMagnificationController::didReceiveMessage(uint64_t this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = this;
  int v5 = *((unsigned __int16 *)a3 + 25);
  if (v5 != 1469)
  {
    if (v5 != 1468) {
      return this;
    }
    uint64_t v6 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
    if (v7)
    {
      unint64_t v8 = v6;
      IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v34);
      if (v35)
      {
        IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v36);
        if (v37)
        {
          unint64_t v13 = *((void *)a3 + 1);
          unint64_t v14 = *(void *)a3;
          unint64_t v15 = *((void *)a3 + 2) - *(void *)a3;
          if (v13 <= v15)
          {
            unint64_t v28 = 0;
            unint64_t v29 = 0;
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v30 = *((void *)a3 + 3);
            if (v30)
            {
              if (v13)
              {
                (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
                unint64_t v29 = *(void *)a3;
                unint64_t v28 = *((void *)a3 + 1);
              }
              else
              {
                unint64_t v28 = 0;
                unint64_t v29 = 0;
              }
            }
          }
          else
          {
            uint64_t v16 = (unsigned __int8 *)(v14 + v15);
            uint64_t v17 = v16 + 1;
            *((void *)a3 + 2) = v16 + 1;
            if (v14)
            {
              unsigned int v18 = *v16;
              if (v18 < 2)
              {
                unint64_t v19 = ((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) - v14;
                if (v13 >= v19 && v13 - v19 > 7)
                {
                  uint64_t v20 = (double *)(v14 + v19);
                  *((void *)a3 + 2) = v20 + 1;
                  unint64_t v21 = (((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8) - v14;
                  if (v13 >= v21 && v13 - v21 > 7)
                  {
                    double v23 = *v20;
                    double v24 = *(double *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *((void *)a3 + 2) = (((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
                    LODWORD(v10) = HIDWORD(v8);
                    LODWORD(v9) = v8;
                    LODWORD(v11) = v34[0];
                    LODWORD(v12) = v34[1];
                    return WebKit::SmartMagnificationController::didCollectGeometryForSmartMagnificationGesture(v4, v18 != 0, v9, v10, v11, v12, *(float *)&v34[2], *(float *)&v34[3], v23, v24, v36[0], v36[1], v23, v24);
                  }
                }
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v26 = *((void *)a3 + 3);
                if (!v26) {
                  goto LABEL_32;
                }
                (*(void (**)(uint64_t))(*(void *)v26 + 16))(v26);
                unint64_t v14 = *(void *)a3;
                unint64_t v13 = *((void *)a3 + 1);
                uint64_t v27 = *((void *)a3 + 3);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                if (!v27) {
                  goto LABEL_32;
                }
                goto LABEL_37;
              }
LABEL_31:
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v27 = *((void *)a3 + 3);
              if (!v27)
              {
LABEL_32:
                uint64_t v32 = *((void *)a3 + 1);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                this = *((void *)a3 + 3);
                if (this && v32)
                {
                  uint64_t v33 = *(uint64_t (**)(void))(*(void *)this + 16);
                  return v33();
                }
                return this;
              }
LABEL_37:
              if (v13) {
                (*(void (**)(uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v14);
              }
              goto LABEL_32;
            }
            unint64_t v28 = v13;
            unint64_t v29 = 0;
          }
          unint64_t v13 = 0;
          unint64_t v14 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v31 = *((void *)a3 + 3);
          if (!v31) {
            goto LABEL_31;
          }
          if (!v28)
          {
            unint64_t v13 = 0;
            unint64_t v14 = 0;
            goto LABEL_31;
          }
          (*(void (**)(uint64_t, unint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29, v28);
        }
      }
    }
LABEL_30:
    unint64_t v14 = *(void *)a3;
    unint64_t v13 = *((void *)a3 + 1);
    goto LABEL_31;
  }
  IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode((unint64_t *)a3);
  if (!v25) {
    goto LABEL_30;
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a3, (uint64_t)v36);
  if (!v37) {
    goto LABEL_30;
  }

  return WebKit::SmartMagnificationController::scrollToRect(v4);
}

void WebKit::SourceBufferPrivateRemote::MessageReceiver::didReceiveMessage(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v4 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5BE:
      IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a3, a2, (uint64_t)&v53);
      if (!(_BYTE)v54) {
        goto LABEL_38;
      }
      uint64_t v8 = *((void *)&v53 + 1);
      *(void *)&long long v48 = v53;
      long long v53 = 0uLL;
      *((void *)&v48 + 1) = v8;
      WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v7);
      LOBYTE(v49) = 1;
      uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if (!(_BYTE)v10) {
        goto LABEL_8;
      }
      *(void *)&long long v53 = v9;
      uint64_t v4 = (IPC::Decoder *)((char *)&v53 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v53 + 1, (atomic_uchar *volatile *)a2);
      double v11 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v11 = &unk_1EE9BADF0;
      v11[1] = v53;
      uint64_t v12 = *((void *)&v53 + 1);
      *((void *)&v53 + 1) = 0;
      v11[2] = v12;
      uint64_t v60 = v11;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53 + 1);
      if (!(_BYTE)v49) {
        goto LABEL_44;
      }
      WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateBufferedChanged(this, (uint64_t)&v48, (uint64_t *)&v60);
      uint64_t v13 = (uint64_t)v60;
      uint64_t v60 = 0;
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      }
      if ((_BYTE)v49) {
LABEL_8:
      }
        WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v48, v10);
      return;
    case 0x5BF:
      WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidDropSample(this);
      return;
    case 0x5C0:
      unint64_t v3 = &v53;
      IPC::ArgumentCoder<WebKit::InitializationSegmentInfo,void>::decode(a3, (uint64_t)&v53);
      if (!v59) {
        goto LABEL_45;
      }
      goto LABEL_13;
    case 0x5C1:
      unint64_t v29 = IPC::Decoder::decode<std::tuple<long long>>(a3);
      if (v30)
      {
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveRenderingError(this, v29);
      }
      return;
    case 0x5C2:
      IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(a3, (uint64_t)&v53);
      if (!(_BYTE)v54) {
        return;
      }
      uint64_t v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if (!v32) {
        return;
      }
      *(void *)&long long v48 = v31;
      uint64_t v4 = (IPC::Decoder *)((char *)&v48 + 8);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v48 + 1, (atomic_uchar *volatile *)a2);
      uint64_t v33 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v33 = &unk_1EE9BAE18;
      v33[1] = v48;
      uint64_t v34 = *((void *)&v48 + 1);
      *((void *)&v48 + 1) = 0;
      _OWORD v33[2] = v34;
      uint64_t v60 = v33;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v48 + 1);
      if ((_BYTE)v54)
      {
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDurationChanged(this, (uint64_t)&v53, (uint64_t *)&v60);
        uint64_t v35 = (uint64_t)v60;
        uint64_t v60 = 0;
        if (v35) {
LABEL_34:
        }
          (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
        return;
      }
      break;
    case 0x5C3:
      IPC::Decoder::decode<WebCore::SourceBufferEvictionData>(a3, (uint64_t)&v53);
      if ((_BYTE)v55)
      {
        long long v48 = v53;
        long long v49 = v54;
        LOBYTE(v50[0]) = 1;
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateEvictionDataChanged(this, &v48);
        return;
      }
LABEL_38:
      uint64_t v40 = *(void *)v4;
      uint64_t v41 = *((void *)v4 + 1);
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v42 = *((void *)v4 + 3);
      if (v42) {
        BOOL v43 = v41 == 0;
      }
      else {
        BOOL v43 = 1;
      }
      if (!v43) {
        goto LABEL_51;
      }
      return;
    case 0x5C4:
      IPC::Decoder::decode<std::tuple<WTF::MediaTime>>(a3, (uint64_t)&v53);
      if ((_BYTE)v54) {
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateHighestPresentationTimestampChanged(this, (const WTF::MediaTime *)&v53);
      }
      return;
    case 0x5C5:
      uint64_t v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v37)
      {
        *(void *)&long long v53 = v36;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v53 + 1, (atomic_uchar *volatile *)a2);
        int v38 = (void *)WTF::fastMalloc((WTF *)0x18);
        *int v38 = &unk_1EE9BAE40;
        v38[1] = v53;
        uint64_t v39 = *((void *)&v53 + 1);
        *((void *)&v53 + 1) = 0;
        v38[2] = v39;
        *(void *)&long long v48 = v38;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53 + 1);
        WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateShuttingDown(this, (uint64_t *)&v48);
        uint64_t v35 = v48;
        *(void *)&long long v48 = 0;
        if (v35) {
          goto LABEL_34;
        }
      }
      return;
    case 0x5C6:
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a3, (uint64_t)&v53);
      if ((_BYTE)v54)
      {
        WebKit::SourceBufferPrivateRemote::MessageReceiver::takeOwnershipOfMemory(this);
        if ((_BYTE)v54) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v53);
        }
      }
      return;
    default:
      return;
  }
  do
  {
LABEL_44:
    __break(1u);
LABEL_45:
    uint64_t v44 = *(void *)v4;
    uint64_t v45 = *((void *)v4 + 1);
    *(void *)uint64_t v4 = 0;
    *((void *)v4 + 1) = 0;
    uint64_t v46 = *((void *)v4 + 3);
    if (!v46 || !v45)
    {
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 16))(v46, v44);
    if (!v59)
    {
      uint64_t v40 = *(void *)v4;
      uint64_t v47 = *((void *)v4 + 1);
      uint64_t v42 = *((void *)v4 + 3);
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      if (v42 && v47) {
LABEL_51:
      }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40);
      return;
    }
LABEL_13:
    long long v48 = v53;
    uint64_t v15 = *((void *)&v54 + 1);
    *(void *)&long long v49 = v54;
    long long v54 = 0uLL;
    *((void *)&v49 + 1) = v15;
    uint64_t v16 = v55;
    uint64_t v55 = 0;
    v50[0] = v16;
    uint64_t v17 = v56;
    uint64_t v56 = 0;
    v50[1] = v17;
    uint64_t v18 = v57;
    uint64_t v57 = 0;
    v51[0] = v18;
    uint64_t v19 = v58;
    uint64_t v58 = 0;
    v51[1] = v19;
    char v52 = 1;
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 3), v14);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 2), v20);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 1), v21);
    uint64_t v22 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
    if (!(_BYTE)v23) {
      goto LABEL_18;
    }
    *(void *)&long long v53 = v22;
    uint64_t v4 = (IPC::Decoder *)((char *)&v53 + 8);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v53 + 1, (atomic_uchar *volatile *)a2);
    double v24 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v24 = &unk_1EE9BADC8;
    v24[1] = v53;
    uint64_t v25 = *((void *)&v53 + 1);
    *((void *)&v53 + 1) = 0;
    v24[2] = v25;
    uint64_t v60 = v24;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v53 + 1);
  }
  while (!v52);
  WebKit::SourceBufferPrivateRemote::MessageReceiver::sourceBufferPrivateDidReceiveInitializationSegment(this, (uint64_t)&v48, (uint64_t *)&v60);
  uint64_t v26 = (uint64_t)v60;
  uint64_t v60 = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  if (v52)
  {
LABEL_18:
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v51, v23);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v27);
    WTF::Vector<WebKit::ITPThirdPartyDataForSpecificFirstParty,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v49, v28);
  }
}

void WebKit::SourceBufferPrivateRemote::MessageReceiver::~MessageReceiver(WebKit::SourceBufferPrivateRemote::MessageReceiver *this, void *a2)
{
  *(void *)this = &unk_1EE9BAE68;
  unint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  atomic_uchar *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BAE68;
  unint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver50SourceBufferPrivateDidReceiveInitializationSegmentEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS7_25InitializationSegmentInfoEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BADC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver50SourceBufferPrivateDidReceiveInitializationSegmentEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS7_25InitializationSegmentInfoEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BADC8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver50SourceBufferPrivateDidReceiveInitializationSegmentEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS7_25InitializationSegmentInfoEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedIvN7WebCore18PlatformMediaErrorEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSJ_EE4callESJ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 3200;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  double v10 = v5;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<void,WebCore::PlatformMediaError>,void>::encode<IPC::Encoder>(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  double v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

void IPC::ArgumentCoder<std::tuple<WebCore::SharedMemoryHandle>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<WebCore::SharedMemoryHandle>(a1, (uint64_t)v4);
  if (v6)
  {
    WTF::MachSendRight::MachSendRight();
    *(void *)(a2 + 8) = v5;
    int v3 = v6;
    *(unsigned char *)(a2 + 16) = 1;
    if (v3) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v4);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
  }
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v22 = *((void *)a1 + 3);
    if (v22)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v22 + 16))(v22, v6, v5);
        uint64_t v21 = *(void *)a1;
        unint64_t v20 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_34;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    if (v10 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::PlatformTimeRanges>(a1, (uint64_t)&v24);
        if (!v27) {
          break;
        }
        if (HIDWORD(v29) == v29)
        {
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTimeRanges>((uint64_t)&v28, (unint64_t)&v24);
        }
        else
        {
          uint64_t v16 = v28 + 16 * HIDWORD(v29);
          *(void *)uint64_t v16 = 0;
          *(void *)(v16 + 8) = 0;
          uint64_t v17 = v24;
          double v24 = 0;
          *(void *)uint64_t v16 = v17;
          *(_DWORD *)(v16 + 8) = v25;
          LODWORD(v17) = v26;
          int v26 = 0;
          *(_DWORD *)(v16 + 12) = v17;
          ++HIDWORD(v29);
        }
        if (v27)
        {
          uint64_t v18 = v24;
          if (v24)
          {
            double v24 = 0;
            int v25 = 0;
            WTF::fastFree(v18, a2);
          }
        }
        if (!--v10)
        {
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v28, HIDWORD(v29));
          *(void *)a3 = v28;
          uint64_t v23 = v29;
          uint64_t v28 = 0;
          uint64_t v29 = 0;
          *(void *)(a3 + 8) = v23;
          goto LABEL_21;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
LABEL_20:
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        *(void *)a3 = v14;
        *(void *)(a3 + 8) = v15;
LABEL_21:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, a2);
      }
      LODWORD(v29) = v10;
      uint64_t v28 = WTF::fastMalloc((WTF *)(16 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::PlatformTimeRanges>(a1, (uint64_t)&v24);
        if (!v27) {
          break;
        }
        if (HIDWORD(v29) == v29)
        {
          WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTimeRanges>((uint64_t)&v28, (unint64_t)&v24);
        }
        else
        {
          uint64_t v11 = v28 + 16 * HIDWORD(v29);
          *(void *)uint64_t v11 = 0;
          *(void *)(v11 + 8) = 0;
          uint64_t v12 = v24;
          double v24 = 0;
          *(void *)uint64_t v11 = v12;
          *(_DWORD *)(v11 + 8) = v25;
          LODWORD(v12) = v26;
          int v26 = 0;
          *(_DWORD *)(v11 + 12) = v12;
          ++HIDWORD(v29);
        }
        if (v27)
        {
          uint64_t v13 = v24;
          if (v24)
          {
            double v24 = 0;
            int v25 = 0;
            WTF::fastFree(v13, a2);
          }
        }
        if (!--v10)
        {
          uint64_t v14 = v28;
          uint64_t v15 = v29;
          goto LABEL_20;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    return WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, a2);
  }
  unint64_t v20 = v5;
  uint64_t v21 = 0;
LABEL_34:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v20) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v21);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PlatformTimeRanges>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 16 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  uint64_t v5 = *(void *)v3;
  *(void *)unint64_t v3 = 0;
  *(void *)uint64_t v4 = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v4 + 8) = v5;
  LODWORD(v5) = *(_DWORD *)(v3 + 12);
  *(_DWORD *)(v3 + 12) = 0;
  *(_DWORD *)(v4 + 12) = v5;
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

unint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    int v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x198A1CBECLL);
    }
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = (WTF *)(*(void *)a1 + 16 * *(unsigned int *)(a1 + 12));
    uint64_t v6 = WTF::fastMalloc((WTF *)(16 * a2));
    *(_DWORD *)(a1 + 8) = v2;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(v4, v5, v6);
    if (v4)
    {
      if (*(WTF **)a1 == v4)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
  }
  return 1;
}

WTF *WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v6 = *(WTF **)v5;
      *(void *)uint64_t v5 = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      uint64_t result = *(WTF **)v5;
      if (*(void *)v5)
      {
        *(void *)uint64_t v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      uint64_t v5 = (WTF *)((char *)v5 + 16);
      a3 += 16;
    }
    while (v5 != a2);
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t a2)
{
  if (result[2] > a2)
  {
    unint64_t v3 = result;
    if (result[3] > a2) {
      uint64_t result = WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(result, (void *)a2);
    }
    uint64_t v4 = *(WTF **)v3;
    if (a2)
    {
      if (a2 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v5 = v3[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = a2;
      *(void *)unint64_t v3 = result;
      if (result != (unsigned int *)v4) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::PlatformTimeRanges>::move(v4, (WTF *)((char *)v4 + 16 * v5), (uint64_t)result);
      }
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)unint64_t v3 = 0;
        v3[2] = 0;
      }
      return (unsigned int *)WTF::fastFree(v4, (void *)a2);
    }
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  unsigned int v2 = a2;
  unint64_t v3 = result;
  unint64_t v4 = result[3];
  if ((void *)v4 != a2)
  {
    uint64_t v5 = *(void *)result + 16 * (void)a2;
    uint64_t v6 = 16 * v4 - 16 * (void)a2;
    do
    {
      uint64_t result = *(unsigned int **)v5;
      if (*(void *)v5)
      {
        *(void *)uint64_t v5 = 0;
        *(_DWORD *)(v5 + 8) = 0;
        uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, a2);
      }
      v5 += 16;
      v6 -= 16;
    }
    while (v6);
  }
  v3[3] = v2;
  return result;
}

uint64_t WTF::Vector<WebCore::PlatformTimeRanges,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  unint64_t v4 = *(WTF **)a1;
  if (v3)
  {
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = *(WTF **)v4;
      if (*(void *)v4)
      {
        *(void *)unint64_t v4 = 0;
        *((_DWORD *)v4 + 2) = 0;
        WTF::fastFree(v6, a2);
      }
      unint64_t v4 = (WTF *)((char *)v4 + 16);
      v5 -= 16;
    }
    while (v5);
    unint64_t v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateBufferedChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BADF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateBufferedChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BADF0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateBufferedChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_6VectorIN7WebCore18PlatformTimeRangesELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3199;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateDurationChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAE18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateDurationChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAE18;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver34SourceBufferPrivateDurationChangedEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvRKNS_9MediaTimeEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3201;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::SourceBufferEvictionData>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::SourceBufferEvictionData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 32))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver31SourceBufferPrivateShuttingDownEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BAE40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver31SourceBufferPrivateShuttingDownEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BAE40;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages40SourceBufferPrivateRemoteMessageReceiver31SourceBufferPrivateShuttingDownEN6WebKit25SourceBufferPrivateRemote15MessageReceiverES9_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3202;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t *WebKit::SpeechRecognitionRealtimeMediaSourceManager::didReceiveMessage(uint64_t *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  unint64_t v4 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5C7:
      uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v6) {
        goto LABEL_23;
      }
      uint64_t v7 = v5;
      IPC::Decoder::decode<WebCore::CaptureDevice>(a3, (uint64_t)&v19);
      if (v21
        && (IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3),
            (_BYTE)v8))
      {
        if (!v21)
        {
          __break(1u);
          JUMPOUT(0x198A1D4CCLL);
        }
        uint64_t v17 = v19;
        long long v9 = v20;
        uint64_t v19 = 0;
        long long v20 = 0uLL;
        *(_OWORD *)uint64_t v18 = v9;
        std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v8);
        WebKit::SpeechRecognitionRealtimeMediaSourceManager::createSource((uint64_t)v4, v7);
        if (v18[1])
        {
          if (*(_DWORD *)v18[1] == 2) {
            WTF::StringImpl::destroy(v18[1], v10);
          }
          else {
            *(_DWORD *)v18[1] -= 2;
          }
        }
        if (v18[0])
        {
          if (*(_DWORD *)v18[0] == 2) {
            WTF::StringImpl::destroy(v18[0], v10);
          }
          else {
            *(_DWORD *)v18[0] -= 2;
          }
        }
        this = (uint64_t *)v17;
        if (v17)
        {
          if (*(_DWORD *)v17 == 2) {
            return (uint64_t *)WTF::StringImpl::destroy(v17, v10);
          }
          else {
            *(_DWORD *)v17 -= 2;
          }
        }
      }
      else
      {
        std::__optional_destruct_base<WebCore::CaptureDevice,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v19, v8);
LABEL_23:
        uint64_t v14 = *(void *)a3;
        uint64_t v15 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (uint64_t *)*((void *)a3 + 3);
        if (this) {
          BOOL v16 = v15 == 0;
        }
        else {
          BOOL v16 = 1;
        }
        if (!v16) {
          return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*this + 16))(this, v14);
        }
      }
      return this;
    case 0x5C8:
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v11)
      {
        return WebKit::SpeechRecognitionRealtimeMediaSourceManager::deleteSource((uint64_t)v4, (uint64_t)this);
      }
      return this;
    case 0x5C9:
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v12)
      {
        return (uint64_t *)WebKit::SpeechRecognitionRealtimeMediaSourceManager::start((uint64_t)v4, (uint64_t)this);
      }
      return this;
    case 0x5CA:
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v13)
      {
        return (uint64_t *)WebKit::SpeechRecognitionRealtimeMediaSourceManager::stop((uint64_t)v4, (uint64_t)this);
      }
      return this;
    default:
      return this;
  }
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::didReceiveMessage(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*(void *)(*((void *)this + 3) + 8) + 1111))
  {
    switch(*((_WORD *)a3 + 25))
    {
      case 0x5CB:
        uint64_t v5 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v6) {
          goto LABEL_40;
        }
        uint64_t v7 = v5;
        IPC::Decoder::decode<WTF::MediaTime>(a3, (uint64_t)v43);
        if (!v43[16]) {
          goto LABEL_40;
        }
        unint64_t v8 = *((void *)a3 + 1);
        uint64_t v9 = *(void *)a3;
        unint64_t v10 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
        if (v8 < v10 || v8 - v10 <= 7)
        {
          unint64_t v21 = 0;
          uint64_t v20 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v27 = *((void *)a3 + 3);
          if (v27)
          {
            if (v8)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v9, v8);
              uint64_t v20 = *(void *)a3;
              unint64_t v21 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v21 = 0;
              uint64_t v20 = 0;
            }
          }
LABEL_39:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v19 = *((void *)a3 + 3);
          if (v19) {
            goto LABEL_45;
          }
          goto LABEL_40;
        }
        char v12 = (uint64_t *)(v9 + v10);
        *((void *)a3 + 2) = v12 + 1;
        if (!v9)
        {
          unint64_t v21 = v8;
          uint64_t v20 = 0;
          goto LABEL_39;
        }
        uint64_t v13 = *v12;
        *(_OWORD *)char v32 = *(_OWORD *)v43;
        *(void *)&v32[16] = v13;
        LOBYTE(v33) = 1;
        WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteAudioSamplesAvailable((uint64_t)this, v7);
        return;
      case 0x5CC:
        uint64_t v22 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v23)
        {
          WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteCaptureFailed((uint64_t)this, v22);
        }
        return;
      case 0x5CD:
        uint64_t v14 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v15)
        {
          WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::remoteSourceStopped((uint64_t)this, v14);
        }
        return;
      case 0x5CE:
        uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v17)
        {
          LOBYTE(v31) = 0;
          char v39 = 0;
          goto LABEL_34;
        }
        uint64_t v18 = v16;
        IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)v40);
        if (!v42)
        {
          LOBYTE(v31) = 0;
          char v39 = 0;
          goto LABEL_30;
        }
        IPC::Decoder::decode<WebCore::CAAudioStreamDescription>(a3, (uint64_t)v43);
        if (!v48)
        {
          LOBYTE(v31) = 0;
          char v39 = 0;
LABEL_28:
          if (v42) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v40);
          }
LABEL_30:
          if (v39)
          {
LABEL_31:
            WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::setStorage((uint64_t)this, v31, (uint64_t)v32, (uint64_t)&v33);
            if (v39)
            {
              WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)&v33);
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v32);
            }
            return;
          }
LABEL_34:
          uint64_t v24 = *(void *)a3;
          uint64_t v25 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v26 = *((void *)a3 + 3);
          if (!v26) {
            return;
          }
          if (!v25) {
            return;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
          if (!v39) {
            return;
          }
          goto LABEL_31;
        }
        if (v42)
        {
          uint64_t v31 = v18;
          WTF::MachSendRight::MachSendRight();
          *(_OWORD *)&v32[8] = v41;
          uint64_t v33 = MEMORY[0x1E4FB6B98] + 16;
          long long v35 = v44;
          long long v36 = v45;
          long long v37 = v46;
          int v38 = v47;
          long long v34 = *(_OWORD *)&v43[8];
          char v39 = 1;
          if (v48) {
            WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v43);
          }
          goto LABEL_28;
        }
        __break(1u);
LABEL_45:
        if (v21) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v20);
        }
LABEL_40:
        uint64_t v28 = *(void *)a3;
        uint64_t v29 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v30 = *((void *)a3 + 3);
        if (v30)
        {
          if (v29) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28);
          }
        }
        break;
      default:
        return;
    }
  }
}

void WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::~SpeechRecognitionRemoteRealtimeMediaSourceManager(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v5);
}

void non-virtual thunk to'WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager::~SpeechRecognitionRemoteRealtimeMediaSourceManager(WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  *((void *)this - 2) = &unk_1EE9B71B0;

  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this - 1, a2);
}

{
  uint64_t v3;
  unsigned int *v4;
  void *v5;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  unint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  *((void *)this - 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this - 1, a2);

  WTF::fastFree((WebKit::SpeechRecognitionRemoteRealtimeMediaSourceManager *)((char *)this - 16), v5);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    unint64_t v4 = (atomic_uchar **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (atomic_uchar *)-1)
      {
        uint64_t v5 = *v4;
        unsigned int *v4 = 0;
        if (v5) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v5, a2);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void WebKit::SpeechRecognitionServer::didReceiveMessage(WebKit::SpeechRecognitionServer *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(*((void *)this + 3) + 8) + 1111)) {
    return;
  }
  switch(*((_WORD *)a3 + 25))
  {
    case 0x5CF:
      uint64_t v5 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v6)
      {
        WebKit::SpeechRecognitionServer::abort((uint64_t *)this, v5);
      }
      return;
    case 0x5D0:
      uint64_t v27 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v28)
      {
        WebKit::SpeechRecognitionServer::invalidate((uint64_t)this, v27);
      }
      return;
    case 0x5D1:
      uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (!v8)
      {
        LOBYTE(v51) = 0;
        char v61 = 0;
        goto LABEL_51;
      }
      uint64_t v9 = v7;
      IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v47);
      if (!v48)
      {
        LOBYTE(v51) = 0;
        char v61 = 0;
        goto LABEL_38;
      }
      unint64_t v11 = *((void *)a3 + 1);
      char v12 = *(WTF::StringImpl **)a3;
      unint64_t v13 = *((void *)a3 + 2) - *(void *)a3;
      if (v11 <= v13)
      {
        unint64_t v35 = 0;
        uint64_t v36 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v37 = *((void *)a3 + 3);
        if (v37)
        {
          if (v11)
          {
            (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
            uint64_t v36 = *(void *)a3;
            unint64_t v35 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v35 = 0;
            uint64_t v36 = 0;
          }
        }
        goto LABEL_56;
      }
      uint64_t v14 = (unsigned __int8 *)v12 + v13;
      *((void *)a3 + 2) = v14 + 1;
      if (!v12)
      {
        unint64_t v35 = v11;
        uint64_t v36 = 0;
LABEL_56:
        unint64_t v11 = 0;
        char v12 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v38 = *((void *)a3 + 3);
        if (v38)
        {
          if (v35)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
            char v12 = *(WTF::StringImpl **)a3;
            unint64_t v11 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v11 = 0;
            char v12 = 0;
          }
        }
LABEL_57:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v39 = *((void *)a3 + 3);
        if (v39) {
          goto LABEL_74;
        }
        goto LABEL_64;
      }
      unsigned int v15 = *v14;
      if (v15 >= 2) {
        goto LABEL_57;
      }
      BOOL v16 = v15 != 0;
      if (v11 <= v14 + 1 - (unsigned __int8 *)v12)
      {
        unint64_t v40 = 0;
        uint64_t v41 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v42 = *((void *)a3 + 3);
        if (v42)
        {
          (*(void (**)(uint64_t))(*(void *)v42 + 16))(v42);
          unint64_t v40 = 0;
          char v12 = *(WTF::StringImpl **)a3;
          uint64_t v45 = *((void *)a3 + 1);
          uint64_t v46 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v41 = 0;
          if (v46)
          {
            if (v45)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v46 + 16))(v46, v12);
              uint64_t v41 = *(void *)a3;
              unint64_t v40 = *((void *)a3 + 1);
            }
          }
        }
        goto LABEL_60;
      }
      char v17 = v14 + 2;
      *((void *)a3 + 2) = v14 + 2;
      unsigned int v18 = v14[1];
      if (v18 >= 2)
      {
        unint64_t v40 = v11;
        uint64_t v41 = (uint64_t)v12;
LABEL_60:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v43 = *((void *)a3 + 3);
        if (v43 && v40) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v43 + 16))(v43, v41, v40);
        }
        goto LABEL_64;
      }
      BOOL v19 = v18 != 0;
      unint64_t v20 = ((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v12;
      if (v11 < v20 || v11 - v20 <= 7)
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v44 = *((void *)a3 + 3);
        if (v44)
        {
          (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
          char v12 = *(WTF::StringImpl **)a3;
          unint64_t v11 = *((void *)a3 + 1);
          uint64_t v39 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (v39)
          {
LABEL_74:
            if (v11) {
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v39 + 16))(v39, v12);
            }
          }
        }
LABEL_64:
        LOBYTE(v51) = 0;
        char v61 = 0;
        goto LABEL_33;
      }
      unint64_t v21 = (uint64_t *)((unint64_t)(v17 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v22 = *v21;
      *((void *)a3 + 2) = v21 + 1;
      IPC::Decoder::decode<WebCore::ClientOrigin>((uint64_t *)a3, v62);
      if (v64)
      {
        IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, (uint64_t)&v49);
        char v23 = v50;
        if (v50)
        {
          if (!v48 || !v64) {
            __break(1u);
          }
          uint64_t v24 = v47;
          int v47 = 0;
          uint64_t v51 = v9;
          char v52 = v24;
          char v53 = v16;
          char v54 = v19;
          uint64_t v55 = v22;
          v56[0] = 0;
          int v57 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v56, (uint64_t)v62);
          v58[0] = 0;
          int v59 = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v58, (uint64_t)&v63);
          long long v60 = v49;
          char v23 = 1;
        }
        else
        {
          LOBYTE(v51) = 0;
        }
        char v61 = v23;
      }
      else
      {
        LOBYTE(v51) = 0;
        char v61 = 0;
      }
      std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v62);
LABEL_33:
      if (v48)
      {
        uint64_t v29 = v47;
        int v47 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2) {
            WTF::StringImpl::destroy(v29, v12);
          }
          else {
            *(_DWORD *)v29 -= 2;
          }
        }
      }
LABEL_38:
      if (v61) {
        goto LABEL_39;
      }
LABEL_51:
      uint64_t v32 = *(void *)a3;
      uint64_t v33 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v34 = *((void *)a3 + 3);
      if (!v34) {
        return;
      }
      if (!v33) {
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, v32);
      if (!v61) {
        return;
      }
LABEL_39:
      WebKit::SpeechRecognitionServer::start((uint64_t)this, v51, (uint64_t *)&v52, v53, v54, v55, (uint64_t)v56, v10, v60, *((uint64_t *)&v60 + 1));
      if (v61)
      {
        if (v59 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9BAF28[v59])(v62, v58);
        }
        int v59 = -1;
        if (v57 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9BAF28[v57])(v62, v56);
        }
        int v57 = -1;
        uint64_t v31 = v52;
        char v52 = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2) {
            WTF::StringImpl::destroy(v31, v30);
          }
          else {
            *(_DWORD *)v31 -= 2;
          }
        }
      }
      return;
    case 0x5D2:
      uint64_t v25 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v26)
      {
        WebKit::SpeechRecognitionServer::stop((uint64_t *)this, v25);
      }
      return;
    default:
      return;
  }
}

void WebKit::SpeechRecognitionServer::~SpeechRecognitionServer(WebKit::SpeechRecognitionServer *this)
{
  WebKit::SpeechRecognitionServer::~SpeechRecognitionServer(this);

  WTF::fastFree(v1, v2);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unsigned int *v9;

  *(void *)this = &unk_1EE9BAF48;
  *((void *)this + 2) = &unk_1EE9BAF90;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4) {
    std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100]((uint64_t)this + 56, (uint64_t)v4);
  }
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  char v6 = *((void *)this + 5);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    if (v7)
    {
      char v8 = (void **)(v6 + 8);
      do
      {
        if (*(v8 - 1) != (void *)-1)
        {
          unint64_t v4 = *v8;
          *char v8 = 0;
          if (v4) {
            std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100]((uint64_t)v8, (uint64_t)v4);
          }
        }
        v8 += 2;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), v4);
  }
  uint64_t v9 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v9 && atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v4);
}

void non-virtual thunk to'WebKit::SpeechRecognitionServer::~SpeechRecognitionServer(WebKit::SpeechRecognitionServer *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SpeechRecognitionServer::~SpeechRecognitionServer((WebKit::SpeechRecognitionServer *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

void std::default_delete<WebCore::SpeechRecognizer>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(const void **)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    if (v3) {
      CFRelease(v3);
    }
    unint64_t v4 = *(WTF **)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    if (v4) {
      std::default_delete<WebCore::SpeechRecognitionCaptureSource>::operator()[abi:sn180100](a2 + 24, v4);
    }
    uint64_t v5 = *(void **)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    if (v5) {
      std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100](a2 + 16, (uint64_t)v5);
    }
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, v5);
    WTF::fastFree((WTF *)v7, v8);
  }
}

void std::default_delete<WebCore::SpeechRecognitionCaptureSource>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = *(void *)this;
    *(void *)this = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    WTF::fastFree(this, this);
  }
}

void std::default_delete<WebCore::SpeechRecognitionRequest>::operator()[abi:sn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(unsigned int *)(a2 + 96);
    if (v3 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BAF28[v3])(&v8, a2 + 72);
    }
    *(_DWORD *)(a2 + 96) = -1;
    uint64_t v4 = *(unsigned int *)(a2 + 64);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BAF28[v4])(&v9, a2 + 40);
    }
    *(_DWORD *)(a2 + 64) = -1;
    uint64_t v5 = *(WTF::StringImpl **)(a2 + 16);
    *(void *)(a2 + 16) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, (void *)a2);
    WTF::fastFree((WTF *)v6, v7);
  }
}

void WebKit::StorageAreaMap::didReceiveMessage(WebKit::StorageAreaMap *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 != 1491)
  {
    if (v6 != 1492) {
      return;
    }
    unint64_t v7 = *((void *)a3 + 1);
    uint64_t v8 = *(void *)a3;
    unint64_t v9 = *((void *)a3 + 2) - *(void *)a3;
    if (v7 <= v9)
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v37 = *((void *)a3 + 3);
      if (v37)
      {
        if (v7)
        {
          (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
          uint64_t v36 = *(void *)a3;
          unint64_t v35 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v35 = 0;
          uint64_t v36 = 0;
        }
      }
    }
    else
    {
      uint64_t v10 = (unsigned __int8 *)(v8 + v9);
      *((void *)a3 + 2) = v10 + 1;
      if (v8)
      {
        unsigned int v11 = *v10;
        if (v11 < 2)
        {
          if (!v11)
          {
            unsigned __int8 v14 = 0;
            unint64_t v15 = 0;
            char v16 = 0;
LABEL_14:
            IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v58);
            if (!v59) {
              goto LABEL_67;
            }
            IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v60);
            if (!v61) {
              goto LABEL_60;
            }
            IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v62);
            if (!v63)
            {
              int v26 = 0;
              LOBYTE(v51) = 0;
              char v57 = 0;
LABEL_30:
              if (v61)
              {
                char v28 = v60;
                long long v60 = 0;
                if (v28)
                {
                  if (*(_DWORD *)v28 == 2) {
                    WTF::StringImpl::destroy(v28, v19);
                  }
                  else {
                    *(_DWORD *)v28 -= 2;
                  }
                }
              }
LABEL_35:
              if (v59)
              {
                uint64_t v29 = v58;
                uint64_t v58 = 0;
                if (v29)
                {
                  if (*(_DWORD *)v29 == 2)
                  {
                    WTF::StringImpl::destroy(v29, v19);
                    if (!v26) {
                      goto LABEL_67;
                    }
LABEL_42:
                    WebKit::StorageAreaMap::dispatchStorageEvent((uint64_t)this, (uint64_t)&v51, (const WTF::String *)&v53, (uint64_t)&v54, (const WTF::String *)&v55, (uint64_t)v56, (unint64_t)v3);
                    if (v57)
                    {
                      uint64_t v31 = v56[0];
                      v56[0] = 0;
                      if (v31)
                      {
                        if (*(_DWORD *)v31 == 2) {
                          WTF::StringImpl::destroy(v31, v30);
                        }
                        else {
                          *(_DWORD *)v31 -= 2;
                        }
                      }
                      uint64_t v32 = v55;
                      uint64_t v55 = 0;
                      if (v32)
                      {
                        if (*(_DWORD *)v32 == 2) {
                          WTF::StringImpl::destroy(v32, v30);
                        }
                        else {
                          *(_DWORD *)v32 -= 2;
                        }
                      }
                      uint64_t v33 = v54;
                      char v54 = 0;
                      if (v33)
                      {
                        if (*(_DWORD *)v33 == 2) {
                          WTF::StringImpl::destroy(v33, v30);
                        }
                        else {
                          *(_DWORD *)v33 -= 2;
                        }
                      }
                      uint64_t v34 = v53;
                      char v53 = 0;
                      if (v34)
                      {
                        if (*(_DWORD *)v34 == 2) {
                          WTF::StringImpl::destroy(v34, v30);
                        }
                        else {
                          *(_DWORD *)v34 -= 2;
                        }
                      }
                    }
                    return;
                  }
                  *(_DWORD *)v29 -= 2;
                }
              }
              if (!v26)
              {
LABEL_67:
                uint64_t v43 = *(void *)a3;
                uint64_t v44 = *((void *)a3 + 1);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v45 = *((void *)a3 + 3);
                if (v45)
                {
                  if (v44) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43);
                  }
                }
                return;
              }
              goto LABEL_42;
            }
            IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v64);
            if (!v65)
            {
              int v26 = 0;
              LOBYTE(v51) = 0;
              char v57 = 0;
              goto LABEL_25;
            }
            unint64_t v20 = *((void *)a3 + 1);
            BOOL v19 = *(WTF::StringImpl **)a3;
            unint64_t v21 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
            if (v20 < v21 || v20 - v21 <= 7)
            {
              unint64_t v46 = 0;
              uint64_t v47 = 0;
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v48 = *((void *)a3 + 3);
              if (v48)
              {
                if (v20)
                {
                  (*(void (**)(uint64_t))(*(void *)v48 + 16))(v48);
                  uint64_t v47 = *(void *)a3;
                  unint64_t v46 = *((void *)a3 + 1);
                }
                else
                {
                  unint64_t v46 = 0;
                  uint64_t v47 = 0;
                }
              }
            }
            else
            {
              uint64_t v22 = (WTF::StringImpl **)((char *)v19 + v21);
              *((void *)a3 + 2) = v22 + 1;
              if (v19)
              {
                if (v59 && v61 && v63)
                {
                  uint64_t v3 = *v22;
                  unint64_t v51 = v15 | v14;
                  char v52 = v16;
                  char v23 = v58;
                  uint64_t v58 = 0;
                  uint64_t v24 = v60;
                  long long v60 = 0;
                  char v53 = v23;
                  char v54 = v24;
                  uint64_t v25 = v62;
                  uint64_t v62 = 0;
                  uint64_t v55 = v25;
                  v56[0] = v64;
                  v56[1] = v3;
                  int v26 = 1;
                  char v57 = 1;
LABEL_25:
                  if (v63)
                  {
                    uint64_t v27 = v62;
                    uint64_t v62 = 0;
                    if (v27)
                    {
                      if (*(_DWORD *)v27 == 2) {
                        WTF::StringImpl::destroy(v27, v19);
                      }
                      else {
                        *(_DWORD *)v27 -= 2;
                      }
                    }
                  }
                  goto LABEL_30;
                }
                __break(1u);
LABEL_60:
                int v26 = 0;
                LOBYTE(v51) = 0;
                char v57 = 0;
                goto LABEL_35;
              }
              unint64_t v46 = v20;
              uint64_t v47 = 0;
            }
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v49 = *((void *)a3 + 3);
            if (v49 && v46) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v49 + 16))(v49, v47);
            }
            LOBYTE(v51) = 0;
            char v57 = 0;
            if (v65)
            {
              char v50 = v64;
              char v64 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 != 2)
                {
                  int v26 = 0;
                  *(_DWORD *)v50 -= 2;
                  goto LABEL_25;
                }
                WTF::StringImpl::destroy(v50, v19);
              }
            }
            int v26 = 0;
            goto LABEL_25;
          }
          uint64_t v12 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
          if (v13)
          {
            unsigned __int8 v14 = v12;
            unint64_t v15 = v12 & 0xFFFFFFFFFFFFFF00;
            char v16 = 1;
            goto LABEL_14;
          }
LABEL_66:
          uint64_t v40 = *(void *)a3;
          uint64_t v41 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v42 = *((void *)a3 + 3);
          if (v42 && v41) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 16))(v42, v40);
          }
          goto LABEL_67;
        }
LABEL_65:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v39 = *((void *)a3 + 3);
        if (v39 && v7) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v8);
        }
        goto LABEL_66;
      }
      unint64_t v35 = v7;
      uint64_t v36 = 0;
    }
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v38 = *((void *)a3 + 3);
    if (v38)
    {
      if (v35)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v38 + 16))(v38, v36, v35);
        uint64_t v8 = *(void *)a3;
        unint64_t v7 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
    goto LABEL_65;
  }
  unint64_t v17 = IPC::Decoder::decode<std::tuple<unsigned long long>>(a3);
  if (v18)
  {
    WebKit::StorageAreaMap::clearCache((uint64_t)this, v17);
  }
}

uint64_t WebKit::get_TCC_kTCCServiceCamera(WebKit *this)
{
  if (qword_1EB358E68 != -1) {
    dispatch_once(&qword_1EB358E68, &__block_literal_global_5_0);
  }
  return qword_1EB358E60;
}

uint64_t ___ZN6WebKit25get_TCC_kTCCServiceCameraEv_block_invoke(WebKit *a1)
{
  uint64_t v1 = (void *)WebKit::TCCLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "kTCCServiceCamera");
  if (result)
  {
    qword_1EB358E60 = *(void *)result;
  }
  else
  {
    uint64_t result = 35;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::get_TCC_kTCCServicePhotos(WebKit *this)
{
  if (qword_1EB358E88 != -1) {
    dispatch_once(&qword_1EB358E88, &__block_literal_global_11_2);
  }
  return qword_1EB358E80;
}

uint64_t ___ZN6WebKit25get_TCC_kTCCServicePhotosEv_block_invoke(WebKit *a1)
{
  uint64_t v1 = (void *)WebKit::TCCLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "kTCCServicePhotos");
  if (result)
  {
    qword_1EB358E80 = *(void *)result;
  }
  else
  {
    uint64_t result = 37;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::initTCCtcc_identity_create(uint64_t a1, uint64_t a2)
{
  if (WebKit::initTCCtcc_identity_create(tcc_identity_type_t,char const*)::once != -1) {
    dispatch_once(&WebKit::initTCCtcc_identity_create(tcc_identity_type_t,char const*)::once, &__block_literal_global_26_1);
  }
  uint64_t v4 = WebKit::softLinkTCCtcc_identity_create;

  return ((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2);
}

uint64_t ___ZN6WebKitL26initTCCtcc_identity_createE19tcc_identity_type_tPKc_block_invoke(WebKit *a1)
{
  uint64_t v1 = (void *)WebKit::TCCLibrary(a1);
  uint64_t result = (uint64_t)dlsym(v1, "tcc_identity_create");
  WebKit::softLinkTCCtcc_identity_create = (uint64_t (*)())result;
  if (!result)
  {
    uint64_t result = 44;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::WebTextTrackRepresentationCocoa(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)WebCore::TextTrackRepresentationCocoa::TextTrackRepresentationCocoa();
  void *v5 = &unk_1EE9BB0A0;
  v5[6] = 0;
  v5[7] = 0;
  v5[5] = 0;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 304), a3);
  int v6 = *(atomic_uint **)(a3 + 304);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 48) + 8) + 544);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(v9 + 8);
        if (v10)
        {
          unsigned int v11 = *(void **)(*(void *)(v10 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v11 + 1368))(v11) & 1) != 0
            || (uint64_t v12 = *(unsigned int **)(v11[2] + 8)) == 0)
          {
            unsigned __int8 v14 = 0;
          }
          else
          {
            char v13 = (atomic_uint **)(v12 + 2);
            WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v12 + 2, (uint64_t)v12);
            unsigned __int8 v14 = *v13;
            if (*v13) {
              atomic_fetch_add(v14, 1u);
            }
          }
          unint64_t v15 = *(unsigned int **)(a1 + 56);
          *(void *)(a1 + 56) = v14;
          if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v12);
          }
        }
      }
    }
  }
  return a1;
}

void sub_198A1EE68(_Unwind_Exception *a1, void *a2)
{
  uint64_t v4 = (unsigned int *)*((void *)v2 + 8);
  *((void *)v2 + 8) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  uint64_t v5 = (unsigned int *)*((void *)v2 + 7);
  *((void *)v2 + 7) = 0;
  if (v5)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  WebCore::TextTrackRepresentationCocoa::~TextTrackRepresentationCocoa(v2);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::update(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 56);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      this = (uint64_t)WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)(v2 - 16));
      uint64_t v4 = (_DWORD *)this;
      int v5 = *(_DWORD *)(this + 16);
      *(_DWORD *)(this + 16) = v5 + 1;
      uint64_t v6 = *(void *)(v3 + 64);
      if (!v6
        || (uint64_t v7 = *(void *)(v6 + 8)) == 0
        || (uint64_t v8 = MEMORY[0x1E4FB6A48],
            *(void *)(*(void *)(v7 + 104) + 24) != *(void *)(*MEMORY[0x1E4FB6A48] + 24)))
      {
        if (v5)
        {
LABEL_7:
          v4[4] = v5;
          return this;
        }
        return (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 8))(v4);
      }
      (*(void (**)(WebCore::NativeImage **__return_ptr))(**(void **)(v3 + 16) + 16))(&v38);
      this = (uint64_t)v38;
      if (v38)
      {
        uint64_t v9 = WebCore::NativeImage::size(v38);
        uint64_t v31 = WebCore::NativeImage::size(v38);
        WebCore::NativeImage::colorSpace((uint64_t *)&v34, v38);
        CFTypeRef v10 = v34;
        CFTypeRef v34 = 0;
        CFTypeRef v35 = v10;
        char v36 = 1;
        MEMORY[0x199738D60](&v27, &v31, &v35, 0);
        WebCore::ShareableBitmap::create();
        if (v29)
        {
          CFTypeRef v12 = cf;
          CFTypeRef cf = 0;
          if (v12) {
            CFRelease(v12);
          }
        }
        if (v36)
        {
          char v13 = v35;
          CFTypeRef v35 = 0;
          if (v13) {
            CFRelease(v13);
          }
        }
        CFTypeRef v14 = v34;
        CFTypeRef v34 = 0;
        if (v14) {
          CFRelease(v14);
        }
        this = (uint64_t)v37;
        if (v37)
        {
          WebCore::ShareableBitmap::createGraphicsContext((uint64_t *)&v34, v37);
          if (v34)
          {
            uint64_t v27 = 0;
            *(float *)&CFTypeRef cf = (float)(int)v9;
            *((float *)&cf + 1) = (float)SHIDWORD(v9);
            uint64_t v31 = 0;
            float v32 = (float)(int)v9;
            float v33 = (float)SHIDWORD(v9);
            WebCore::GraphicsContext::drawNativeImage();
            WebCore::ShareableBitmap::createHandle();
            if (v30)
            {
              uint64_t v15 = *(void *)(v3 + 64);
              if (v15) {
                uint64_t v16 = *(void *)(v15 + 8);
              }
              else {
                uint64_t v16 = 0;
              }
              if (*(void *)(*(void *)(v16 + 104) + 24) != *(void *)(*(void *)v8 + 24))
              {
                this = 96;
                __break(0xC471u);
                return this;
              }
              *(_DWORD *)(v16 + 28) += 2;
              uint64_t v31 = v16;
              WebKit::VideoPresentationManager::updateTextTrackRepresentationForVideoElement((uint64_t)v4, v16, (uint64_t)&v27);
              WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v31);
            }
            std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&v27);
            CFTypeRef v17 = v34;
            CFTypeRef v34 = 0;
            if (v17) {
              (*(void (**)(CFTypeRef))(*(void *)v17 + 8))(v17);
            }
          }
          this = (uint64_t)v37;
          uint64_t v37 = 0;
          if (this) {
            this = WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(this, v11);
          }
        }
        char v18 = v38;
        uint64_t v38 = 0;
        if (v18)
        {
          char v19 = 0;
          uint64_t v20 = *((void *)v18 + 1);
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v19, 1u, memory_order_acquire, memory_order_acquire);
          if (v19) {
            this = MEMORY[0x19972E8D0](v20);
          }
          uint64_t v21 = *(void *)(v20 + 8);
          int v22 = 1;
          uint64_t v23 = v21 - 1;
          *(void *)(v20 + 8) = v21 - 1;
          if (v21 == 1)
          {
            uint64_t v26 = *(void *)(v20 + 16);
            uint64_t v24 = *(void *)(v20 + 24);
            *(void *)(v20 + 24) = 0;
            BOOL v25 = v26 != 0;
          }
          else
          {
            uint64_t v24 = 0;
            BOOL v25 = 1;
          }
          atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v20, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
          if (v22 == 1)
          {
            if (v23) {
              goto LABEL_40;
            }
          }
          else
          {
            this = WTF::Lock::unlockSlow((WTF::Lock *)v20);
            if (v23) {
              goto LABEL_40;
            }
          }
          if (v24) {
            this = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 8))(v24);
          }
          if (!v25) {
            this = WTF::fastFree((WTF *)v20, v11);
          }
        }
      }
LABEL_40:
      int v5 = v4[4] - 1;
      if (v4[4] != 1) {
        goto LABEL_7;
      }
      return (*(uint64_t (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
  }
  return this;
}

void sub_198A1F23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, CFTypeRef a20)
{
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&a18);
  std::__optional_destruct_base<WebCore::ShareableBitmapHandle,false>::~__optional_destruct_base[abi:sn180100]((WTF::MachSendRight *)&a9);
  CFTypeRef v24 = a20;
  a20 = 0;
  if (v24) {
    (*(void (**)(CFTypeRef))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *(void *)(v21 - 64);
  *(void *)(v21 - 64) = 0;
  if (v25) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v25, v23);
  }
  uint64_t v26 = *(void *)(v21 - 56);
  *(void *)(v21 - 56) = 0;
  if (v26)
  {
    char v27 = 0;
    uint64_t v28 = *(void *)(v26 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v28, (unsigned __int8 *)&v27, 1u, memory_order_acquire, memory_order_acquire);
    if (v27) {
      MEMORY[0x19972E8D0](v28);
    }
    uint64_t v29 = *(void *)(v28 + 8);
    int v30 = 1;
    uint64_t v31 = v29 - 1;
    *(void *)(v28 + 8) = v29 - 1;
    if (v29 == 1)
    {
      uint64_t v34 = *(void *)(v28 + 16);
      uint64_t v32 = *(void *)(v28 + 24);
      *(void *)(v28 + 24) = 0;
      BOOL v33 = v34 != 0;
    }
    else
    {
      uint64_t v32 = 0;
      BOOL v33 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v28, (unsigned __int8 *)&v30, 0, memory_order_release, memory_order_relaxed);
    if (v30 == 1)
    {
      if (v31) {
        goto LABEL_18;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v28);
      if (v31) {
        goto LABEL_18;
      }
    }
    if (v32) {
      (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
    }
    if (!v33) {
      WTF::fastFree((WTF *)v28, v23);
    }
  }
LABEL_18:
  if (v20[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
  }
  else {
    --v20[4];
  }
  _Unwind_Resume(a1);
}

_DWORD *WebKit::WebTextTrackRepresentationCocoa::setContentScale(WebKit::WebTextTrackRepresentationCocoa *this, float a2)
{
  uint64_t result = (_DWORD *)WebCore::TextTrackRepresentationCocoa::setContentScale(this, a2);
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t result = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)(v6 - 16));
      uint64_t v7 = result;
      ++result[4];
      uint64_t v8 = *((void *)this + 8);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 8);
        if (v9)
        {
          if (*(void *)(*(void *)(v9 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB6A48] + 24))
          {
            *(_DWORD *)(v9 + 28) += 2;
            uint64_t result = (_DWORD *)WebKit::VideoPresentationManager::setTextTrackRepresentationContentScaleForVideoElement((uint64_t)result, (WebCore::HTMLVideoElement *)v9, a2);
            if (*(_DWORD *)(v9 + 28) == 2)
            {
              if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
                uint64_t result = (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
              }
            }
            else
            {
              *(_DWORD *)(v9 + 28) -= 2;
            }
          }
        }
      }
      if (v7[4] == 1)
      {
        CFTypeRef v10 = *(uint64_t (**)(_DWORD *))(*(void *)v7 + 8);
        return (_DWORD *)v10(v7);
      }
      else
      {
        --v7[4];
      }
    }
  }
  return result;
}

void sub_198A1F530(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v2 + 28) == 2)
  {
    if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 28) -= 2;
  }
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WebKit::WebTextTrackRepresentationCocoa::setHidden(WebKit::WebTextTrackRepresentationCocoa *this, char a2)
{
  uint64_t result = (_DWORD *)WebCore::TextTrackRepresentationCocoa::setHidden(this);
  uint64_t v5 = *((void *)this + 7);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6)
    {
      uint64_t result = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)(v6 - 16));
      uint64_t v7 = result;
      ++result[4];
      uint64_t v8 = *((void *)this + 8);
      if (v8)
      {
        uint64_t v9 = *(void *)(v8 + 8);
        if (v9)
        {
          if (*(void *)(*(void *)(v9 + 104) + 24) == *(void *)(*MEMORY[0x1E4FB6A48] + 24))
          {
            *(_DWORD *)(v9 + 28) += 2;
            uint64_t result = (_DWORD *)WebKit::VideoPresentationManager::setTextTrackRepresentationIsHiddenForVideoElement((uint64_t)result, (WebCore::HTMLVideoElement *)v9, a2);
            if (*(_DWORD *)(v9 + 28) == 2)
            {
              if ((*(_WORD *)(v9 + 34) & 0x400) == 0) {
                uint64_t result = (_DWORD *)WebCore::Node::removedLastRef((WebCore::Node *)v9);
              }
            }
            else
            {
              *(_DWORD *)(v9 + 28) -= 2;
            }
          }
        }
      }
      if (v7[4] == 1)
      {
        CFTypeRef v10 = *(uint64_t (**)(_DWORD *))(*(void *)v7 + 8);
        return (_DWORD *)v10(v7);
      }
      else
      {
        --v7[4];
      }
    }
  }
  return result;
}

void sub_198A1F6B8(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v2 + 28) == 2)
  {
    if ((*(_WORD *)(v2 + 34) & 0x400) == 0) {
      WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
  }
  else
  {
    *(_DWORD *)(v2 + 28) -= 2;
  }
  if (v1[4] == 1) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  else {
    --v1[4];
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::setBounds(uint64_t this, const IntRect *a2)
{
  BOOL v2 = *(_DWORD *)(this + 40) == a2->m_location.m_x && *(_DWORD *)(this + 44) == a2->m_location.m_y;
  if (!v2
    || (*(_DWORD *)(this + 48) == a2->m_size.m_width ? (BOOL v3 = *(_DWORD *)(this + 52) == a2->m_size.m_height) : (BOOL v3 = 0),
        !v3))
  {
    *(IntRect *)(this + 40) = *a2;
    return (*(uint64_t (**)(void))(**(void **)(this + 16) + 24))();
  }
  return this;
}

void WebKit::WebTextTrackRepresentationCocoa::~WebTextTrackRepresentationCocoa(WebKit::WebTextTrackRepresentationCocoa *this, void *a2)
{
  WebKit::WebTextTrackRepresentationCocoa::~WebTextTrackRepresentationCocoa(this, a2);

  WTF::fastFree(v2, v3);
}

{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t vars8;

  BOOL v3 = (unsigned int *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  WebCore::TextTrackRepresentationCocoa::~TextTrackRepresentationCocoa(this);
}

uint64_t WebCore::TextTrackRepresentationCocoa::platformLayer(WebCore::TextTrackRepresentationCocoa *this)
{
  return *((void *)this + 3);
}

uint64_t WebKit::WebTextTrackRepresentationCocoa::bounds(WebKit::WebTextTrackRepresentationCocoa *this)
{
  return *((void *)this + 5);
}

void WebKit::DigitalCredentialsCoordinatorProxy::didReceiveMessage(WebKit::DigitalCredentialsCoordinatorProxy *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(WebKit::DigitalCredentialsCoordinatorProxy::sharedPreferencesForWebProcess(this) + 34))
  {
    int v6 = *((unsigned __int16 *)a3 + 25);
    if (v6 == 8)
    {
      uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v10)
      {
        *(void *)&long long v31 = v9;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v31 + 1, a2);
        unsigned int v11 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v11 = &unk_1EE9BB128;
        v11[1] = v31;
        uint64_t v12 = *((void *)&v31 + 1);
        *((void *)&v31 + 1) = 0;
        v11[2] = v12;
        uint64_t v41 = v11;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v31 + 1);
        WebKit::AuxiliaryProcess::mainThreadPing((uint64_t)this, (uint64_t *)&v41);
        uint64_t v13 = (uint64_t)v41;
        uint64_t v41 = 0;
        if (v13) {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
    }
    else if (v6 == 9)
    {
      IPC::Decoder::decode<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(a3, (uint64_t)&v27);
      if (!v28) {
        goto LABEL_34;
      }
      IPC::Decoder::decode<WebKit::FrameInfoData>(a3, (uint64_t)&v41);
      if (v43)
      {
        IPC::ArgumentCoder<WebCore::DigitalCredentialRequestOptions,void>::decode((uint64_t *)a3, (uint64_t)v29);
        if (v30)
        {
          if (!v28 || !v43) {
            goto LABEL_33;
          }
          long long v31 = v27;
          std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>((uint64_t)&v32, (uint64_t)&v41);
          uint64_t v38 = (WTF *)v29[0];
          uint64_t v39 = v29[1];
          char v8 = 1;
        }
        else
        {
          uint64_t v7 = *(WTF::StringImpl **)a3;
          uint64_t v25 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v26 = *((void *)a3 + 3);
          if (v26 && v25) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v26 + 16))(v26, v7);
          }
          char v8 = 0;
          LOBYTE(v31) = 0;
        }
        char v40 = v8;
      }
      else
      {
        LOBYTE(v31) = 0;
        char v40 = 0;
      }
      std::__optional_destruct_base<WebKit::FrameInfoData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v41, v7);
      if (!v40) {
        goto LABEL_35;
      }
      while (1)
      {
        uint64_t v14 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (!(_BYTE)v15) {
          break;
        }
        uint64_t v41 = (void *)v14;
        a3 = (IPC::Decoder *)v42;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v42, a2);
        uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v16 = &unk_1EE9BB100;
        v16[1] = v41;
        CFTypeRef v17 = v42[0];
        v42[0] = 0;
        v16[2] = v17;
        v29[0] = (uint64_t)v16;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(v42);
        if (v40)
        {
          WebKit::DigitalCredentialsCoordinatorProxy::requestDigitalCredential((uint64_t)this, v31, *((uint64_t *)&v31 + 1), (uint64_t)&v32, (uint64_t)&v38, v29);
          uint64_t v18 = v29[0];
          v29[0] = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          break;
        }
LABEL_33:
        __break(1u);
LABEL_34:
        LOBYTE(v31) = 0;
        char v40 = 0;
LABEL_35:
        uint64_t v22 = *(void *)a3;
        uint64_t v23 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v24 = *((void *)a3 + 3);
        if (v24)
        {
          if (v23)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
            if (v40) {
              continue;
            }
          }
        }
        return;
      }
      if (v40)
      {
        char v19 = v38;
        if (v38)
        {
          uint64_t v38 = 0;
          LODWORD(v39) = 0;
          WTF::fastFree(v19, v15);
        }
        uint64_t v20 = v37;
        uint64_t v37 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2) {
            WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
          }
          else {
            *(_DWORD *)v20 -= 2;
          }
        }
        if (v36 != -1) {
          ((void (*)(void **, uint64_t *))off_1EE9BB0E0[v36])(&v41, &v35);
        }
        int v36 = -1;
        CFTypeRef v21 = cf;
        CFTypeRef cf = 0;
        if (v21) {
          CFRelease(v21);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v33);
      }
    }
  }
}

uint64_t std::__tuple_leaf<1ul,WebKit::FrameInfoData,false>::__tuple_leaf[abi:sn180100]<WebKit::FrameInfoData,void>(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  WTF::URL::URL(a1 + 8, (uint64_t *)(a2 + 8));
  WTF::URL::URL(a1 + 48, (uint64_t *)(a2 + 48));
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = v4;
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a1 + 104) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 112) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = 0;
  *(_DWORD *)(a1 + 116) = v5;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  uint64_t v6 = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = 0;
  *(void *)(a1 + 120) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = 0;
  *(_DWORD *)(a1 + 128) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a2 + 132) = 0;
  *(_DWORD *)(a1 + 132) = v6;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = 0;
  *(void *)(a1 + 136) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = 0;
  *(_DWORD *)(a1 + 144) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = 0;
  *(_DWORD *)(a1 + 148) = v7;
  LODWORD(v7) = *(_DWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 156) = *(unsigned char *)(a2 + 156);
  *(_DWORD *)(a1 + 152) = v7;
  uint64_t v8 = *(void *)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  *(void *)(a1 + 160) = v8;
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  *(void *)(a1 + 168) = v9;
  uint64_t v10 = *(void *)(a2 + 176);
  *(void *)(a2 + 176) = 0;
  *(void *)(a1 + 176) = v10;
  uint64_t v11 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v11;
  uint64_t v12 = *(void *)(a2 + 200);
  *(void *)(a2 + 200) = 0;
  *(void *)(a1 + 200) = v12;
  *(unsigned char *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 232) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 208, a2 + 208);
  uint64_t v13 = *(void *)(a2 + 240);
  *(void *)(a2 + 240) = 0;
  *(void *)(a1 + 240) = v13;
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 278) = *(_OWORD *)(a2 + 278);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages34DigitalCredentialsCoordinatorProxy24RequestDigitalCredentialEN6WebKit34DigitalCredentialsCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_31DigitalCredentialRequestOptionsEONS_17CompletionHandlerIFvRKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB100;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages34DigitalCredentialsCoordinatorProxy24RequestDigitalCredentialEN6WebKit34DigitalCredentialsCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_31DigitalCredentialRequestOptionsEONS_17CompletionHandlerIFvRKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB100;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages34DigitalCredentialsCoordinatorProxy24RequestDigitalCredentialEN6WebKit34DigitalCredentialsCoordinatorProxyES8_FvN7WebCore16ProcessQualifiedINS_23ObjectIdentifierGenericINS9_19FrameIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS7_13FrameInfoDataEONS9_31DigitalCredentialRequestOptionsEONS_17CompletionHandlerIFvRKNS9_13ExceptionDataEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSP_EE4callESP_(uint64_t a1, char *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2876;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::Exception,void>::encode(v5, a2);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages34DigitalCredentialsCoordinatorProxy6CancelEN6WebKit34DigitalCredentialsCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB128;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages34DigitalCredentialsCoordinatorProxy6CancelEN6WebKit34DigitalCredentialsCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB128;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages34DigitalCredentialsCoordinatorProxy6CancelEN6WebKit34DigitalCredentialsCoordinatorProxyES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)BOOL v3 = 2875;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

BOOL WebKit::GPUConnectionToWebProcess::setCaptureAttributionString(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void (**)(void))MEMORY[0x1E4FB6468];
  ((void (*)(void))*MEMORY[0x1E4FB6468])();
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
    (*v2)();
    if ((objc_opt_respondsToSelector() & 1) == 0) {
      return 1;
    }
  }
  uint64_t v3 = *(void *)(*(void *)(*((void *)this + 10) + 40) + 352);
  BOOL v4 = v3 != 0;
  if (v3)
  {
    xpc_connection_get_audit_token();
    char v5 = arg[0];
    v21[0] = *(_OWORD *)((char *)arg + 1);
    *(_OWORD *)((char *)v21 + 15) = arg[1];
    uint64_t v7 = WebKit::applicationVisibleNameFromOrigin((WebKit *)(*((void *)this + 23) + 8), v6);
    if (!v7)
    {
      if (*(void *)(*((void *)this + 10) + 272)) {
        uint64_t v7 = WTF::StringImpl::operator NSString *();
      }
      else {
        uint64_t v7 = (uint64_t)&stru_1EEA10550;
      }
    }
    (*v2)();
    if (objc_opt_respondsToSelector())
    {
      uint64_t v9 = (void *)((uint64_t (*)(void))*v2)();
      char v18 = arg[0];
      *(_OWORD *)char v19 = v21[0];
      *(_OWORD *)&v19[15] = *(_OWORD *)((char *)v21 + 15);
      [v9 setCurrentAttributionWebsiteString:v7 auditToken:&v18];
    }
    else
    {
      uint64_t v10 = NSString;
      WebCore::copyLocalizedString((uint64_t *)arg, (WebCore *)@"%@ in %%@", v8);
      if (*(void *)&arg[0])
      {
        CFAutorelease(*(CFTypeRef *)&arg[0]);
        uint64_t v11 = *(void *)&arg[0];
      }
      else
      {
        uint64_t v11 = 0;
      }
      CFTypeRef v12 = (CFTypeRef)objc_msgSend(v10, "stringWithFormat:", v11, v7);
      uint64_t v13 = v12;
      if (v12) {
        CFTypeRef v12 = CFRetain(v12);
      }
      long long v14 = (void *)((uint64_t (*)(CFTypeRef))*v2)(v12);
      char v16 = v5;
      *(_OWORD *)CFTypeRef v17 = v21[0];
      *(_OWORD *)&v17[15] = *(_OWORD *)((char *)v21 + 15);
      [v14 setCurrentAttributionStringWithFormat:v13 auditToken:&v16];
      if (v13) {
        CFRelease(v13);
      }
    }
  }
  return v4;
}

void sub_198A201A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::GPUConnectionToWebProcess::setTCCIdentity(WebKit::GPUConnectionToWebProcess *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(*(void *)(*((void *)this + 10) + 40) + 352))
  {
    uint64_t v14 = qword_1EB358820;
    if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v11 = "getAuditToken returned null";
    goto LABEL_13;
  }
  xpc_connection_get_audit_token();
  *(_OWORD *)CFTypeRef v17 = *(_OWORD *)&buf[1];
  *(_OWORD *)&v17[15] = *(_OWORD *)&buf[16];
  char v18 = 0;
  char v16 = buf[0];
  uint64_t v1 = (void *)[MEMORY[0x1E4F223F0] bundleProxyWithAuditToken:&v16 error:&v18];
  uint64_t v2 = v18;
  if (v18)
  {
    uint64_t v3 = qword_1EB358820;
    if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v15 = objc_msgSend((id)objc_msgSend(v2, "localizedDescription"), "UTF8String");
    *(_DWORD *)long long buf = 136315138;
    *(void *)&buf[4] = v15;
    uint64_t v11 = "-[LSBundleProxy bundleProxyWithAuditToken:error:] failed with error %s";
    CFTypeRef v12 = v3;
    uint32_t v13 = 12;
LABEL_15:
    _os_log_error_impl(&dword_1985F2000, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
    return;
  }
  BOOL v4 = v1;
  uint64_t v5 = objc_msgSend((id)objc_msgSend(v1, "bundleIdentifier"), "UTF8String");
  if (v5)
  {
    uint64_t v6 = (WebCore::RealtimeMediaSourceCenter *)WebKit::softLinkTCCtcc_identity_create(0, v5);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = WebCore::RealtimeMediaSourceCenter::singleton(v6);
      uint64_t v9 = *(void **)(v8 + 88);
      *(void *)(v8 + 88) = v7;
      if (v9) {

      }
      return;
    }
    uint64_t v14 = qword_1EB358820;
    if (!os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v11 = "tcc_identity_create returned null";
LABEL_13:
    CFTypeRef v12 = v14;
    uint32_t v13 = 2;
    goto LABEL_15;
  }
  uint64_t v10 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&buf[4] = v4 != 0;
    uint64_t v11 = "Unable to get the bundle identifier, bundle is %d";
    CFTypeRef v12 = v10;
    uint32_t v13 = 8;
    goto LABEL_15;
  }
}

void sub_198A203D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *WebKit::GPUConnectionToWebProcess::setMediaEnvironment(uint64_t *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  if (*a3 && *((_DWORD *)*a3 + 1))
  {
    uint64_t v5 = result + 45;
    uint64_t v6 = result[45];
    if (v6
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result + 45),
          (uint64_t v6 = *v5) != 0))
    {
      int v7 = *(_DWORD *)(v6 - 8);
    }
    else
    {
      int v7 = 0;
    }
    unint64_t v8 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
    CFTypeRef v12 = (void *)(v6 + 16 * v11);
    uint32_t v13 = (WTF::StringImpl *)*v12;
    if (*v12)
    {
      uint64_t v14 = 0;
      int v15 = 1;
      while (v13 != a2)
      {
        if (v13 == (WTF::StringImpl *)-1) {
          uint64_t v14 = v12;
        }
        unsigned int v11 = (v11 + v15) & v7;
        CFTypeRef v12 = (void *)(v6 + 16 * v11);
        uint32_t v13 = (WTF::StringImpl *)*v12;
        ++v15;
        if (!*v12)
        {
          if (v14)
          {
            void *v14 = 0;
            v14[1] = 0;
            --*(_DWORD *)(*v5 - 16);
            CFTypeRef v12 = v14;
          }
          goto LABEL_14;
        }
      }
      return WTF::String::operator=(v12 + 1, a3);
    }
    else
    {
LABEL_14:
      *CFTypeRef v12 = a2;
      char v16 = *a3;
      if (*a3) {
        *(_DWORD *)v16 += 2;
      }
      uint64_t result = (uint64_t *)v12[1];
      v12[1] = v16;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v25 = *v5;
      if (*v5) {
        int v26 = *(_DWORD *)(v25 - 12) + 1;
      }
      else {
        int v26 = 1;
      }
      *(_DWORD *)(v25 - 12) = v26;
      uint64_t v27 = *v5;
      if (*v5) {
        int v28 = *(_DWORD *)(v27 - 12);
      }
      else {
        int v28 = 0;
      }
      uint64_t v29 = (*(_DWORD *)(v27 - 16) + v28);
      unint64_t v30 = *(unsigned int *)(v27 - 4);
      if (v30 > 0x400)
      {
        if (v30 > 2 * v29) {
          return result;
        }
      }
      else if (3 * v30 > 4 * v29)
      {
        return result;
      }
      return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v5);
    }
  }
  else
  {
    uint64_t v17 = result[45];
    if (v17)
    {
      unsigned int v18 = *(_DWORD *)(v17 - 8);
      unint64_t v19 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
      unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
      unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
      uint64_t v22 = v18 & ((v21 >> 31) ^ v21);
      uint64_t v23 = *(WTF::StringImpl **)(v17 + 16 * v22);
      if (v23 != a2)
      {
        int v24 = 1;
        while (v23)
        {
          uint64_t v22 = (v22 + v24) & v18;
          uint64_t v23 = *(WTF::StringImpl **)(v17 + 16 * v22);
          ++v24;
          if (v23 == a2) {
            goto LABEL_41;
          }
        }
        uint64_t v22 = *(unsigned int *)(v17 - 4);
      }
LABEL_41:
      if (v22 != *(_DWORD *)(v17 - 4))
      {
        long long v31 = result + 45;
        uint64_t v32 = (void *)(v17 + 16 * v22);
        uint64_t result = (uint64_t *)v32[1];
        void *v32 = -1;
        v32[1] = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            uint64_t result = (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
        ++*(_DWORD *)(*v31 - 16);
        uint64_t v33 = *v31;
        if (*v31) {
          int v34 = *(_DWORD *)(v33 - 12) - 1;
        }
        else {
          int v34 = -1;
        }
        *(_DWORD *)(v33 - 12) = v34;
        uint64_t v35 = *v31;
        if (*v31)
        {
          unsigned int v36 = 6 * *(_DWORD *)(v35 - 12);
          unsigned int v37 = *(_DWORD *)(v35 - 4);
          if (v36 < v37 && v37 >= 9)
          {
            return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v31, v37 >> 1);
          }
        }
      }
    }
  }
  return result;
}

void WebKit::GPUProcess::additionalStateForDiagnosticReport(WebKit::GPUProcess *this@<X0>, void *a2@<X8>)
{
  BOOL v4 = (void *)[objc_alloc(MEMORY[0x1E4F1CA60]) initWithCapacity:1];
  uint64_t v7 = *((void *)this + 16);
  uint64_t v6 = (void **)((char *)this + 128);
  uint64_t v5 = v7;
  if (v7 && *(_DWORD *)(v5 - 12))
  {
    id v8 = objc_alloc(MEMORY[0x1E4F1CA60]);
    if (*v6) {
      uint64_t v9 = *((unsigned int *)*v6 - 3);
    }
    else {
      uint64_t v9 = 0;
    }
    unint64_t v10 = (void *)[v8 initWithCapacity:v9];
    unsigned int v11 = (WTF::String **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<API::Object,WTF::RawPtrTraits<API::Object>,WTF::DefaultRefDerefTraits<API::Object>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(v6);
    CFTypeRef v12 = v11;
    uint64_t v14 = v13;
    if (*v6) {
      uint64_t v15 = (uint64_t)&(*v6)[2 * *((unsigned int *)*v6 - 1)];
    }
    else {
      uint64_t v15 = 0;
    }
    if ((WTF::String **)v15 != v11)
    {
      do
      {
        char v16 = v12[1];
        uint64_t v17 = *((void *)v16 + 32);
        if (v17 && *(_DWORD *)(v17 - 12))
        {
          id v18 = objc_alloc(MEMORY[0x1E4F1CA60]);
          uint64_t v19 = *((void *)v16 + 32);
          if (v19) {
            uint64_t v20 = *(unsigned int *)(v19 - 12);
          }
          else {
            uint64_t v20 = 0;
          }
          unint64_t v21 = (const void *)[v18 initWithCapacity:v20];
          WTF::String::number(*v12);
          if (v25) {
            uint64_t v22 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v22 = &stru_1EEA10550;
          }
          [v10 setObject:v21 forKey:v22];
          int v24 = v25;
          uint64_t v25 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v23);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          if (v21) {
            CFRelease(v21);
          }
        }
        while (1)
        {
          v12 += 2;
          if (v12 == v14) {
            break;
          }
          if ((unint64_t)*v12 + 1 > 1) {
            goto LABEL_26;
          }
        }
        CFTypeRef v12 = v14;
LABEL_26:
        ;
      }
      while (v12 != (WTF::String **)v15);
    }
    if ([v10 count]) {
      [v4 setObject:v10 forKey:@"RemoteRenderingBackend states"];
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  *a2 = v4;
}

void sub_198A208D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (v12) {
    CFRelease(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A2093C()
{
}

uint64_t WebKit::GPUProcess::ensureAVCaptureServerConnection(WebKit::GPUProcess *this)
{
  uint64_t v1 = qword_1EB358820;
  if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_1985F2000, v1, OS_LOG_TYPE_DEFAULT, "GPUProcess::ensureAVCaptureServerConnection: Entering.", buf, 2u);
  }
  uint64_t v2 = (uint64_t (**)(void))MEMORY[0x1E4FB62D8];
  ((void (*)(void))*MEMORY[0x1E4FB62D8])();
  uint64_t result = objc_opt_respondsToSelector();
  if (result)
  {
    BOOL v4 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "GPUProcess::ensureAVCaptureServerConnection: Calling [AVCaptureDevice ensureServerConnection]", v5, 2u);
    }
    return [(id)(*v2)() ensureServerConnection];
  }
  return result;
}

uint64_t IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::read@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>, double a4@<D0>)
{
  char v8 = 0;
  uint64_t v9 = (atomic_uchar *)(a1 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 8), (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
  if (v8) {
    MEMORY[0x19972E8D0](a1 + 8);
  }
  unint64_t v10 = (uint64_t *)(a1 + 16);
  unsigned int v11 = (unsigned __int8 *)(a1 + 9);
  while (1)
  {
    *(_OWORD *)int v28 = *a2;
    uint64_t v12 = *v10;
    if (*v10) {
      break;
    }
LABEL_23:
    v28[0] = a4;
    LODWORD(v28[1]) = 2;
    uint64_t result = WTF::Condition::waitUntilUnchecked<WTF::Lock>((uint64_t)v11, v9, (WTF::TimeWithDynamicClockType *)v28);
    if ((result & 1) == 0)
    {
      *a3 = 0;
      goto LABEL_35;
    }
  }
  int v13 = *(_DWORD *)(v12 - 8);
  int v29 = -1640531527;
  __int16 v30 = 0;
  char v31 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v29, v28);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  unsigned int v15 = result & v13;
  uint64_t v16 = v12 + 56 * (result & v13);
  uint64_t v17 = *(void *)v16;
  uint64_t v18 = *(void *)(v16 + 8);
  if (*(void *)&v28[0] == *(void *)v16 && *(void *)&v28[1] == v18)
  {
LABEL_16:
    uint64_t v22 = *v10;
    if (!*v10) {
      goto LABEL_21;
    }
  }
  else
  {
    int v20 = 1;
    while (v17 | v18)
    {
      unsigned int v15 = (v15 + v20) & v13;
      uint64_t v16 = v12 + 56 * v15;
      uint64_t v17 = *(void *)v16;
      uint64_t v18 = *(void *)(v16 + 8);
      ++v20;
      if (*(void *)&v28[0] == *(void *)v16 && *(void *)&v28[1] == v18) {
        goto LABEL_16;
      }
    }
    uint64_t v22 = *v10;
    if (!*v10) {
      goto LABEL_23;
    }
    uint64_t v16 = v22 + 56 * *(unsigned int *)(v22 - 4);
  }
  v22 += 56 * *(unsigned int *)(v22 - 4);
LABEL_21:
  if (v22 == v16 || !*(unsigned char *)(v16 + 48)) {
    goto LABEL_23;
  }
  uint64_t v23 = *(void *)(v16 + 40);
  if (v23) {
    atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
  }
  *a3 = v23;
  uint64_t v24 = *(void *)(v16 + 16) + 1;
  *(void *)(v16 + 16) = v24;
  if (*(unsigned char *)(v16 + 32))
  {
    if (*(void *)(v16 + 24) == v24)
    {
      uint64_t v25 = *v10;
      if (!*v10 || (v25 += 56 * *(unsigned int *)(v25 - 4), v25 != v16))
      {
        if (v25 != v16) {
          uint64_t result = (uint64_t)WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v10, (_OWORD *)v16);
        }
      }
    }
  }
  unsigned __int8 v26 = atomic_load(v11);
  if (v26)
  {
    atomic_store(0, v11);
    uint64_t result = WTF::ParkingLot::unparkAll((WTF::ParkingLot *)v11, (const void *)v16);
  }
LABEL_35:
  int v27 = 1;
  atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v27, 0, memory_order_release, memory_order_relaxed);
  if (v27 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v9);
  }
  return result;
}

void sub_198A20C20(_Unwind_Exception *exception_object)
{
  BOOL v4 = *v2;
  void *v2 = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }
  int v5 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::RemoteVideoFrameObjectHeap::createPixelConformer@<X0>(WebKit::RemoteVideoFrameObjectHeap *this@<X0>, WebCore::PixelBufferConformerCV **a2@<X8>)
{
  v7[1] = *MEMORY[0x1E4F143B8];
  uint64_t CoreVideo_kCVPixelBufferPixelFormatTypeKey = WebCore::get_CoreVideo_kCVPixelBufferPixelFormatTypeKey(this);
  v7[0] = &unk_1EEA52DC8;
  CFDictionaryRef v3 = (const __CFDictionary *)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:&CoreVideo_kCVPixelBufferPixelFormatTypeKey count:1];
  BOOL v4 = (WebCore::PixelBufferConformerCV *)WTF::fastMalloc((WTF *)8);
  uint64_t result = WebCore::PixelBufferConformerCV::PixelBufferConformerCV(v4, v3);
  *a2 = v4;
  return result;
}

void sub_198A20D3C(_Unwind_Exception *a1, void *a2)
{
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void *WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeIfPossible(void *this, const WebCore::FloatSize *a2)
{
  uint64_t v2 = this[18];
  if (v2)
  {
    BOOL v4 = this;
    int v5 = *(void **)(v2 + 16);
    if (!v5) {
      int v5 = *(void **)(v2 + 8);
    }
    this = (void *)[v5 layer];
    if (this)
    {
      float v6 = *(float *)a2;
      if (*(float *)a2 > 0.0)
      {
        float v7 = *((float *)a2 + 1);
        if (v7 > 0.0)
        {
          uint64_t v8 = v4[108];
          uint64_t v9 = v4[90];
          v14[0] = "RemoteMediaPlayerProxy";
          v14[1] = 23;
          uint64_t v14[2] = "setVideoLayerSizeIfPossible";
          v14[3] = v9;
          float v12 = v7;
          float v13 = v6;
          if (*(unsigned char *)(v8 + 12)) {
            WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float,char [2],float>((uint64_t)&WebKit2LogMedia, (WTF::Logger::LogSiteIdentifier *)v14, &v13, &v12);
          }
          [MEMORY[0x1E4F39CF8] begin];
          [MEMORY[0x1E4F39CF8] setDisableActions:1];
          uint64_t v10 = v4[18];
          unsigned int v11 = *(void **)(v10 + 16);
          if (!v11) {
            unsigned int v11 = *(void **)(v10 + 8);
          }
          objc_msgSend((id)objc_msgSend(v11, "layer"), "setFrame:", 0.0, 0.0, *(float *)a2, *((float *)a2 + 1));
          return (void *)[MEMORY[0x1E4F39CF8] commit];
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerFirstVideoFrameAvailable(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 108);
  CFDictionaryRef v3 = (IPC::Encoder *)*((void *)this + 90);
  v11[0] = (IPC::Encoder *)"RemoteMediaPlayerProxy";
  v11[1] = (IPC::Encoder *)23;
  v11[2] = (IPC::Encoder *)"mediaPlayerFirstVideoFrameAvailable";
  v11[3] = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)v11);
  }
  WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeIfPossible(this, (WebKit::RemoteMediaPlayerProxy *)((char *)this + 712));
  uint64_t v4 = *((void *)this + 14);
  uint64_t v5 = *((void *)this + 11);
  float v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)float v6 = 157;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  v11[0] = v6;
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)v11, 0, 0);
  uint64_t result = v11[0];
  v11[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::RemoteMediaPlayerProxy::mediaPlayerRenderingModeChanged(WebKit::RemoteMediaPlayerProxy *this)
{
  uint64_t v2 = *((void *)this + 108);
  CGFloat v3 = *((double *)this + 90);
  *(void *)&v37.origin.CGFloat x = "RemoteMediaPlayerProxy";
  *(void *)&v37.origin.y = 23;
  *(void *)&v37.size.width = "mediaPlayerRenderingModeChanged";
  v37.size.height = v3;
  if (*(unsigned char *)(v2 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebKit2LogMedia, 0, (WTF::Logger::LogSiteIdentifier *)&v37);
  }
  uint64_t v4 = (void *)WebCore::MediaPlayer::platformLayer(*((WebCore::MediaPlayer **)this + 15));
  float v6 = (WebKit::LayerHostingContext **)((char *)this + 144);
  uint64_t v5 = (WebKit::LayerHostingContext *)*((void *)this + 18);
  if (!v4)
  {
    if (!v5) {
      goto LABEL_20;
    }
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 18, 0);
    uint64_t v26 = *((void *)this + 14);
    LOBYTE(v36[0]) = 0;
    BYTE4(v36[0]) = 0;
    uint64_t v35 = 0;
    *(void *)&v37.origin.CGFloat x = v36;
    *(void *)&v37.origin.y = &v35;
    IPC::Connection::send<Messages::MediaPlayerPrivateRemote::LayerHostingContextIdChanged>(v26, (uint64_t)&v37, *((void *)this + 11));
LABEL_16:
    uint64_t v5 = *v6;
    if (!*v6) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  if (!v5)
  {
    BYTE1(v35) = 1;
    LOBYTE(v35) = *((unsigned char *)this + 733);
    WebKit::LayerHostingContext::createForExternalHostingProcess((unsigned __int8 *)&v35, (uint64_t *)&v37);
    CGFloat x = v37.origin.x;
    v37.origin.CGFloat x = 0.0;
    std::unique_ptr<WebKit::LayerHostingContext>::reset[abi:sn180100]((id **)this + 18, *(id **)&x);
    CGFloat v8 = v37.origin.x;
    v37.origin.CGFloat x = 0.0;
    if (v8 != 0.0)
    {
      WebKit::LayerHostingContext::~LayerHostingContext(*(id **)&v8);
      WTF::fastFree(v9, v10);
    }
    float v11 = *((float *)this + 178);
    if (v11 <= 0.0 || (float v12 = *((float *)this + 179), v12 <= 0.0))
    {
      [v4 frame];
      v37.origin.CGFloat x = v13;
      v37.origin.y = v14;
      v37.size.width = v15;
      v37.size.height = v16;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v36, &v37);
      WebCore::enclosingIntRect((WebCore *)v36, v17);
      float v11 = (float)v18;
      float v12 = (float)v19;
      *((float *)this + 178) = (float)v18;
      *((float *)this + 179) = (float)v19;
    }
    objc_msgSend(v4, "setFrame:", 0.0, 0.0, v11, v12);
    uint64_t v20 = *((void *)this + 14);
    LODWORD(v36[0]) = WebKit::LayerHostingContext::contextID(*((WebKit::LayerHostingContext **)this + 18));
    BYTE4(v36[0]) = 1;
    *(void *)&v37.origin.CGFloat x = v36;
    *(void *)&v37.origin.y = (char *)this + 712;
    IPC::Connection::send<Messages::MediaPlayerPrivateRemote::LayerHostingContextIdChanged>(v20, (uint64_t)&v37, *((void *)this + 11));
    unint64_t v21 = (uint64_t *)*((void *)this + 16);
    *(void *)&v37.origin.CGFloat x = v21;
    uint64_t v22 = *((unsigned int *)this + 35);
    LODWORD(v37.origin.y) = *((_DWORD *)this + 34);
    HIDWORD(v37.origin.y) = v22;
    v36[0] = 0;
    *((void *)this + 16) = 0;
    v36[1] = 0;
    *((void *)this + 17) = 0;
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v23);
    if (v22)
    {
      uint64_t v25 = 8 * v22;
      do
      {
        WebKit::LayerHostingContext::contextID(*v6);
        WTF::CompletionHandler<void ()>::operator()(v21++);
        v25 -= 8;
      }
      while (v25);
    }
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v24);
    goto LABEL_16;
  }
LABEL_17:
  int v27 = (void *)*((void *)v5 + 2);
  if (!v27) {
    int v27 = (void *)*((void *)v5 + 1);
  }
  [v27 setLayer:v4];
LABEL_20:
  uint64_t v28 = *((void *)this + 14);
  uint64_t v29 = *((void *)this + 11);
  __int16 v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__int16 v30 = 180;
  *((void *)v30 + 1) = v29;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  *(void *)&v37.origin.CGFloat x = v30;
  IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v37, 0, 0);
  uint64_t result = *(void *)&v37.origin.x;
  v37.origin.CGFloat x = 0.0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v31);
    return WTF::fastFree(v33, v34);
  }
  return result;
}

void sub_198A211D4(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)va, a2);
  _Unwind_Resume(a1);
}

WebKit::LayerHostingContext *WebKit::RemoteMediaPlayerProxy::requestHostingContextID(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(WebKit::LayerHostingContext **)(a1 + 144);
  if (result)
  {
    WebKit::LayerHostingContext::contextID(result);
    return (WebKit::LayerHostingContext *)WTF::CompletionHandler<void ()>::operator()(a2);
  }
  else
  {
    uint64_t v5 = *(unsigned int *)(a1 + 140);
    if (v5 == *(_DWORD *)(a1 + 136))
    {
      uint64_t result = (WebKit::LayerHostingContext *)WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 128, v5 + 1, (unint64_t)a2);
      uint64_t v5 = *(unsigned int *)(a1 + 140);
      int v6 = v5 + 1;
      uint64_t v7 = *(void *)(a1 + 128);
      uint64_t v8 = *(void *)result;
      *(void *)uint64_t result = 0;
    }
    else
    {
      int v6 = v5 + 1;
      uint64_t v7 = *(void *)(a1 + 128);
      uint64_t v8 = *a2;
      *a2 = 0;
    }
    *(void *)(v7 + 8 * v5) = v8;
    *(_DWORD *)(a1 + 140) = v6;
  }
  return result;
}

void WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeFenced(void *a1, const WebCore::FloatSize *a2)
{
  int v4 = *(_DWORD *)a2;
  int v10 = *((_DWORD *)a2 + 1);
  int v11 = v4;
  uint64_t v5 = a1[108];
  uint64_t v6 = a1[90];
  v12[0] = "RemoteMediaPlayerProxy";
  v12[1] = 23;
  v12[2] = "setVideoLayerSizeFenced";
  v12[3] = v6;
  if (*(unsigned char *)(v5 + 12)) {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float,char [2],float>((uint64_t)&WebKit2LogMedia, (WTF::Logger::LogSiteIdentifier *)v12, (float *)&v11, (float *)&v10);
  }
  if (a1[18])
  {
    WebKit::LayerHostingContext::createHostingUpdateCoordinator(v12);
    uint64_t v7 = (void *)v12[0];
    uint64_t v8 = a1[18];
    uint64_t v9 = *(const void **)(v8 + 16);
    if (v9) {
      CFRetain(*(CFTypeRef *)(v8 + 16));
    }
    [v7 addLayerHierarchy:v9];
    if (v9) {
      CFRelease(v9);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  a1[89] = *(void *)a2;
  WebKit::RemoteMediaPlayerProxy::setVideoLayerSizeIfPossible(a1, a2);
  WebCore::MediaPlayer::setVideoLayerSizeFenced();
  [v7 commit];
  if (v7) {
    CFRelease(v7);
  }
}

void sub_198A21398(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *WebKit::RemoteMediaPlayerProxy::mediaPlayerOnNewVideoFrameMetadata(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[105];
  LOBYTE(v14) = 0;
  char v15 = 0;
  WebCore::VideoFrameCV::create();
  uint64_t v5 = v16;
  uint64_t v16 = 0;
  uint64_t v17 = (unsigned int *)v5;
  WebKit::RemoteVideoFrameObjectHeap::add(v4, (uint64_t *)&v17, (uint64_t)v18);
  uint64_t v6 = v17;
  uint64_t v17 = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 2);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v16 = 0;
  uint64_t v7 = a1[14];
  uint64_t v8 = a1[11];
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 168;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  CGFloat v14 = v9;
  IPC::ArgumentCoder<WebCore::VideoFrameMetadata,void>::encode(v9, a2);
  IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(v9, (uint64_t)v18);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v14, 0, 0);
  uint64_t result = v14;
  CGFloat v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void sub_198A21568(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

void WebKit::RemoteMediaPlayerProxy::nativeImageForCurrentTime(uint64_t a1, uint64_t *a2)
{
  CGFloat v3 = *(WebCore::MediaPlayer **)(a1 + 120);
  if (!v3)
  {
    LOBYTE(v37) = 0;
    BYTE4(v37) = 0;
    uint64_t v9 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
    CFTypeRef v36 = v9;
    if (v9) {
      CFRetain(v9);
    }
    WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)&v37, &v36);
    if (v36) {
      CFRelease(v36);
    }
    if (BYTE4(v37)) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v37);
    }
    return;
  }
  WebCore::MediaPlayer::nativeImageForCurrentTime((uint64_t *)&v37, v3);
  if (!v37)
  {
    LOBYTE(v35) = 0;
    BYTE4(v35) = 0;
    int v10 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
    CFTypeRef v34 = v10;
    if (v10) {
      CFRetain(v10);
    }
    WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)&v35, &v34);
    CFTypeRef v12 = v34;
    CFTypeRef v34 = 0;
    if (!v12) {
      goto LABEL_20;
    }
LABEL_19:
    CFRelease(v12);
LABEL_20:
    if (BYTE4(v35)) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v35);
    }
    goto LABEL_36;
  }
  uint64_t v4 = (WebCore::DestinationColorSpace *)WebCore::NativeImage::platformImage(v37);
  uint64_t v5 = *(WebCore::IOSurfacePool **)v4;
  if (!*(void *)v4)
  {
    LOBYTE(v35) = 0;
    BYTE4(v35) = 0;
    CGFloat v13 = *(const void **)WebCore::DestinationColorSpace::SRGB(v4);
    uint64_t v33 = v13;
    if (v13) {
      CFRetain(v13);
    }
    WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)&v35, &v33);
    CFTypeRef v12 = v33;
    uint64_t v33 = 0;
    if (!v12) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  CFRetain(*(CFTypeRef *)v4);
  WebCore::IOSurface::createFromImage((uint64_t *)&v35, 0, v5, v6);
  if (v35)
  {
    WebCore::IOSurface::createSendRight((uint64_t *)v29, v35);
    WTF::MachSendRight::MachSendRight();
    char v32 = 1;
    WebCore::NativeImage::colorSpace((uint64_t *)&cf, v37);
    WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)v31, &cf);
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    if (v32) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v31);
    }
    uint64_t v8 = (WTF::MachSendRight *)v29;
  }
  else
  {
    v31[0] = 0;
    char v32 = 0;
    CGFloat v14 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
    CFTypeRef v30 = v14;
    if (v14) {
      CFRetain(v14);
    }
    WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(a2, (uint64_t)v31, &v30);
    CFTypeRef v15 = v30;
    CFTypeRef v30 = 0;
    if (v15) {
      CFRelease(v15);
    }
    if (!v32) {
      goto LABEL_33;
    }
    uint64_t v8 = (WTF::MachSendRight *)v31;
  }
  WTF::MachSendRight::~MachSendRight(v8);
LABEL_33:
  uint64_t v16 = v35;
  uint64_t v35 = 0;
  if (v16)
  {
    WebCore::IOSurface::~IOSurface(v16);
    WTF::fastFree(v26, v27);
  }
  CFRelease(v5);
LABEL_36:
  uint64_t v17 = v37;
  CGRect v37 = 0;
  if (!v17) {
    return;
  }
  char v18 = 0;
  uint64_t v19 = *((void *)v17 + 1);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
  if (v18) {
    MEMORY[0x19972E8D0](v19);
  }
  uint64_t v20 = *(void *)(v19 + 8);
  int v21 = 1;
  uint64_t v22 = v20 - 1;
  *(void *)(v19 + 8) = v20 - 1;
  if (v20 == 1)
  {
    uint64_t v25 = *(void *)(v19 + 16);
    uint64_t v23 = *(void *)(v19 + 24);
    *(void *)(v19 + 24) = 0;
    BOOL v24 = v25 != 0;
  }
  else
  {
    uint64_t v23 = 0;
    BOOL v24 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v19, (unsigned __int8 *)&v21, 0, memory_order_release, memory_order_relaxed);
  if (v21 == 1)
  {
    if (v22) {
      return;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v22) {
      return;
    }
  }
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  if (!v24) {
    WTF::fastFree((WTF *)v19, v11);
  }
}

void sub_198A21858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef a10, int a11, char a12, CFTypeRef cf, char a14, __int16 a15, char a16, char a17, CFTypeRef a18, uint64_t a19, WebCore::IOSurface *a20,CFTypeRef a21)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a16) {
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&a14);
  }
  BOOL v24 = a20;
  a20 = 0;
  if (v24)
  {
    WebCore::IOSurface::~IOSurface(v24);
    WTF::fastFree(v25, v26);
  }
  CFRelease(v21);
  uint64_t v28 = *(void *)(v22 - 56);
  *(void *)(v22 - 56) = 0;
  if (v28)
  {
    char v29 = 0;
    uint64_t v30 = *(void *)(v28 + 8);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v29, 1u, memory_order_acquire, memory_order_acquire);
    if (v29) {
      MEMORY[0x19972E8D0](v30);
    }
    uint64_t v31 = *(void *)(v30 + 8);
    int v32 = 1;
    uint64_t v33 = v31 - 1;
    *(void *)(v30 + 8) = v31 - 1;
    if (v31 == 1)
    {
      uint64_t v36 = *(void *)(v30 + 16);
      uint64_t v34 = *(void *)(v30 + 24);
      *(void *)(v30 + 24) = 0;
      BOOL v35 = v36 != 0;
    }
    else
    {
      uint64_t v34 = 0;
      BOOL v35 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v30, (unsigned __int8 *)&v32, 0, memory_order_release, memory_order_relaxed);
    if (v32 == 1)
    {
      if (v33) {
        goto LABEL_20;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v30);
      if (v33) {
        goto LABEL_20;
      }
    }
    if (v34) {
      (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    }
    if (!v35) {
      WTF::fastFree((WTF *)v30, v27);
    }
  }
LABEL_20:
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::optional<WTF::MachSendRight> &&,WebCore::DestinationColorSpace)>::operator()(uint64_t *a1, uint64_t a2, const void **a3)
{
  uint64_t v3 = *a1;
  *a1 = 0;
  uint64_t v4 = *a3;
  *a3 = 0;
  CFTypeRef cf = v4;
  (*(void (**)(uint64_t, uint64_t, CFTypeRef *))(*(void *)v3 + 16))(v3, a2, &cf);
  CFTypeRef v5 = cf;
  CFTypeRef cf = 0;
  if (v5) {
    CFRelease(v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void sub_198A21AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  _Unwind_Resume(a1);
}

void WebKit::RemoteMediaPlayerProxy::colorSpace(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(WebCore::MediaPlayer **)(a1 + 120);
  if (v3)
  {
    WebCore::MediaPlayer::colorSpace((uint64_t *)&cf, v3);
    WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(a2, &cf);
    CFTypeRef v4 = cf;
    CFTypeRef cf = 0;
    if (!v4) {
      return;
    }
    goto LABEL_3;
  }
  CFTypeRef v5 = *(const void **)WebCore::DestinationColorSpace::SRGB(0);
  CFTypeRef v7 = v5;
  if (v5) {
    CFRetain(v5);
  }
  WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(a2, &v7);
  CFTypeRef v4 = v7;
  CFTypeRef v7 = 0;
  if (v4) {
LABEL_3:
  }
    CFRelease(v4);
}

void sub_198A21B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(WebCore::DestinationColorSpace)>::operator()(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  uint64_t v3 = *a2;
  *a2 = 0;
  CFTypeRef cf = v3;
  uint64_t v7 = v2;
  WTF::Function<void ()(WebCore::DestinationColorSpace)>::operator()(&v7, &cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A21C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::GPUServiceInitializerDelegate::~GPUServiceInitializerDelegate(WebKit::GPUServiceInitializerDelegate *this)
{
  *(void *)this = &unk_1EE9BFBD8;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
}
  }

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BFBD8;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {

  }
  JUMPOUT(0x199740C10);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v10)
  {
    int v10 = v8 & v6;
    uint64_t result = *(WTF **)(v3 + 16 * (v8 & v6));
    if (!result) {
      break;
    }
    if (result != (WTF *)-1 && (WTF::equal(result, *a2, a3) & 1) != 0) {
      return (WTF *)1;
    }
    ++i;
  }
  return result;
}

_DWORD **WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>@<X0>(_DWORD **result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    unsigned int v4 = *(v3 - 2);
    unint64_t v5 = *a2 + ~(*a2 << 32);
    unint64_t v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    unint64_t v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    uint64_t v8 = v4 & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~(v7 << 27)));
    uint64_t v9 = *(void *)&v3[4 * v8];
    if (v9 == *a2)
    {
LABEL_6:
      uint64_t v3 = *(_DWORD **)&v3[4 * v8 + 2];
      if (v3) {
        *v3 += 2;
      }
    }
    else
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        uint64_t v9 = *(void *)&v3[4 * v8];
        ++v10;
        if (v9 == *a2) {
          goto LABEL_6;
        }
      }
      uint64_t v3 = 0;
    }
  }
  *a3 = v3;
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      int v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          BOOL v24 = (WTF::StringImpl *)v23[1];
          v23[1] = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v8);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          CGFloat v13 = *(WTF::StringImpl **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_25;
          }
          if (*(_DWORD *)v13 == 2)
          {
LABEL_24:
            WTF::StringImpl::destroy(v13, v8);
            goto LABEL_25;
          }
          *(_DWORD *)v13 -= 2;
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          CGFloat v13 = *(WTF::StringImpl **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2) {
              goto LABEL_24;
            }
            *(_DWORD *)v13 -= 2;
          }
        }
      }
LABEL_25:
      if (++v9 == v5) {
        goto LABEL_28;
      }
    }
  }
  if (v4)
  {
LABEL_28:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(a1, v3);
}

_DWORD *WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(_DWORD *result, void *a2)
{
  unint64_t v2 = a2[1];
  int v3 = *result + (unsigned __int16)*a2;
  unsigned int v4 = (*a2 >> 5) & 0x7FFF800 ^ (v3 << 16) ^ v3;
  unsigned int v5 = v4 + (unsigned __int16)WORD2(*a2);
  unsigned int v6 = (*a2 >> 37) & 0x7FFF800 ^ ((v5 + (v4 >> 11)) << 16) ^ (v5 + (v4 >> 11));
  unsigned int v7 = (v2 >> 5) & 0x7FFF800 ^ ((v6 + (unsigned __int16)v2 + (v6 >> 11)) << 16) ^ (v6
                                                                                               + (unsigned __int16)v2
                                                                                               + (v6 >> 11));
  int v8 = v7 + WORD2(v2) + (v7 >> 11);
  LODWORD(v2) = (v2 >> 37) & 0x7FFF800 ^ (v8 << 16);
  *uint64_t result = (v2 ^ v8) + ((v2 ^ v8) >> 11);
  return result;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, _OWORD *a2)
{
  *a2 = xmmword_1994F6020;
  uint64_t result = (_OWORD *)std::__optional_destruct_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2 + 40);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v2 = *(unsigned int **)a1;
    *(void *)a1 = 0;
    if (v2)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v2 + 2);
        (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
      }
    }
  }
  return a1;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2, _OWORD *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 56 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  CGFloat v13 = 0;
  if (v7)
  {
    uint64_t v14 = v6 + 40;
    uint64_t v7 = v7;
    do
    {
      int v15 = (_OWORD *)(v14 - 40);
      if (*(void *)(v14 - 40) != -1)
      {
        if (*(_OWORD *)(v14 - 40) == 0)
        {
          std::__optional_destruct_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::~__optional_destruct_base[abi:sn180100](v14);
        }
        else
        {
          unint64_t v16 = WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookupForReinsert(a1, (void *)(v14 - 40));
          std::__optional_destruct_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16 + 40);
          _OWORD *v16 = *v15;
          long long v17 = *(_OWORD *)(v14 - 24);
          *((unsigned char *)v16 + 32) = *(unsigned char *)(v14 - 8);
          v16[1] = v17;
          *((unsigned char *)v16 + 40) = 0;
          *((unsigned char *)v16 + 48) = 0;
          if (*(unsigned char *)(v14 + 8))
          {
            uint64_t v18 = *(void *)v14;
            *(void *)uint64_t v14 = 0;
            *((void *)v16 + 5) = v18;
            *((unsigned char *)v16 + 48) = 1;
          }
          std::__optional_destruct_base<WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>,false>::~__optional_destruct_base[abi:sn180100](v14);
          if (v15 == a3) {
            CGFloat v13 = v16;
          }
        }
      }
      v14 += 56;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

_OWORD *WTF::HashTable<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>>,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState,WTF::DefaultHash<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<IPC::ThreadSafeObjectHeap<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebCore::VideoFrame,WTF::RawPtrTraits<WebCore::VideoFrame>,WTF::DefaultRefDerefTraits<WebCore::VideoFrame>>>::ReferenceState>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::lookupForReinsert(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v8 = -1640531527;
  __int16 v9 = 0;
  char v10 = 0;
  WTF::addArgs<IPC::ObjectIdentifierReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v8, a2);
  int v4 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v8);
  int v5 = 0;
  do
  {
    uint64_t v6 = (_OWORD *)(v2 + 56 * (v4 & v3));
    int v4 = ++v5 + (v4 & v3);
  }
  while (*v6 != 0);
  return v6;
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,float,char [2],float>(uint64_t a1, WTF::Logger::LogSiteIdentifier *this, float *a3, float *a4)
{
  v48[1] = *MEMORY[0x1E4F143B8];
  int v5 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)&v40, this);
  WTF::String::number((uint64_t *)&v39, v5, *a3);
  uint64_t v6 = (WTF::String *)WTF::String::String((WTF::String *)&v38, "x");
  WTF::String::number((uint64_t *)&v37, v6, *a4);
  WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>((uint64_t *)&v40, (uint64_t *)&v39, (uint64_t *)&v38, (uint64_t *)&v37, &v41);
  int v8 = v37;
  CGRect v37 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  __int16 v9 = v38;
  uint64_t v38 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  char v10 = v39;
  uint64_t v39 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = v40;
  char v40 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *(NSObject **)(a1 + 32);
  CGFloat v13 = (WTF *)os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    WTF::String::utf8();
    int v15 = v36[0] ? (char *)v36[0] + 16 : 0;
    *(_DWORD *)long long buf = 136446210;
    char v43 = v15;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    CGFloat v13 = v36[0];
    v36[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        CGFloat v13 = (WTF *)WTF::fastFree(v13, v14);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
  }
  if (*(unsigned char *)a1)
  {
    unint64_t v16 = (atomic_uchar *)MEMORY[0x1E4F30998];
    while (1)
    {
      int v17 = *v16;
      if (v17) {
        break;
      }
      int v18 = *v16;
      atomic_compare_exchange_strong_explicit(v16, (unsigned __int8 *)&v18, v17 | 1, memory_order_acquire, memory_order_acquire);
      if (v18 == v17)
      {
        uint64_t v19 = WTF::Logger::observers(v13);
        uint64_t v20 = *(unsigned int *)(v19 + 12);
        if (v20)
        {
          unsigned int v21 = *(uint64_t **)v19;
          uint64_t v22 = *(void *)v19 + 8 * v20;
          do
          {
            uint64_t v23 = *v21;
            *(_DWORD *)long long buf = 0;
            BOOL v24 = (WTF::String *)WTF::Logger::LogSiteIdentifier::toString((uint64_t *)((char *)&v43 + 4), this);
            float v25 = *a3;
            int v44 = 0;
            WTF::String::number(&v45, v24, v25);
            int v46 = 0;
            uint64_t v26 = (WTF::String *)WTF::String::String((WTF::String *)v47, "x");
            float v27 = *a4;
            v47[2] = 0;
            WTF::String::number(v48, v26, v27);
            WTF::Vector<WTF::JSONLogValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t *)v36, (uint64_t)buf, 4uLL);
            (*(void (**)(uint64_t, uint64_t, void, WTF **))(*(void *)v23 + 16))(v23, a1, 0, v36);
            WTF::Vector<std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v36, v28);
            for (uint64_t i = 56; i != -8; i -= 16)
            {
              uint64_t v30 = *(WTF::StringImpl **)&buf[i];
              *(void *)&buf[i] = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 2) {
                  WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v14);
                }
                else {
                  *(_DWORD *)v30 -= 2;
                }
              }
            }
            ++v21;
          }
          while (v21 != (uint64_t *)v22);
        }
        int v31 = 1;
        atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v31, 0, memory_order_release, memory_order_relaxed);
        if (v31 != 1) {
          WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
        }
        break;
      }
    }
  }
  uint64_t result = v41;
  uint64_t v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198A227CC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, uint64_t a19, WTF::StringImpl *a20,char a21)
{
  int v22 = 1;
  atomic_compare_exchange_strong_explicit(MEMORY[0x1E4F30998], (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
  if (v22 != 1) {
    WTF::Lock::unlockSlow(MEMORY[0x1E4F30998]);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::makeString<WTF::String,WTF::String,WTF::String,WTF::String>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v11 = *a2;
  uint64_t v12 = v6;
  uint64_t v7 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = v7;
  uint64_t result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&v12, &v11, &v10, &v9, a5);
  if (!*a5) {
    __break(0xC471u);
  }
  return result;
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = *(void *)result;
  if (*(void *)result) {
    int v9 = *(_DWORD *)(v8 + 4);
  }
  else {
    int v9 = 0;
  }
  uint64_t v10 = *a2;
  if (*a2) {
    int v11 = *(_DWORD *)(v10 + 4);
  }
  else {
    int v11 = 0;
  }
  uint64_t v12 = *a3;
  if (*a3) {
    int v13 = *(_DWORD *)(v12 + 4);
  }
  else {
    int v13 = 0;
  }
  uint64_t v14 = *a4;
  if (*a4) {
    int v15 = *(_DWORD *)(v14 + 4);
  }
  else {
    int v15 = 0;
  }
  if ((v15 | v13) < 0
    || ((v16 = __OFADD__(v13, v15), v17 = v13 + v15, !v16) ? (char v18 = 0) : (char v18 = 1),
        v11 < 0
     || (v18 & 1) != 0
     || ((v16 = __OFADD__(v11, v17), v19 = v11 + v17, !v16) ? (char v20 = 0) : (char v20 = 1),
         v9 < 0 || (v20 & 1) != 0 || (uint64_t result = (v9 + v19), __OFADD__(v9, v19)))))
  {
    *a5 = 0;
    return result;
  }
  if ((!v8 || (*(unsigned char *)(v8 + 16) & 4) != 0) && (!v10 || (*(unsigned char *)(v10 + 16) & 4) != 0))
  {
    if (v12)
    {
      unsigned int v22 = *(_DWORD *)(v12 + 16);
      int v21 = (v22 >> 2) & 1;
      if (!v14 || (v22 & 4) == 0) {
        goto LABEL_26;
      }
    }
    else if (!v14)
    {
      int v21 = 1;
      goto LABEL_26;
    }
    int v21 = (*(unsigned __int8 *)(v14 + 16) >> 2) & 1;
  }
  else
  {
    int v21 = 0;
  }
LABEL_26:
  uint64_t result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v21, v8, v10, v12, (_DWORD *)v14, &v23);
  *a5 = v23;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _DWORD *a6@<X5>, void *a7@<X8>)
{
  int v11 = result;
  if (a2)
  {
    if (result)
    {
      if ((result & 0x80000000) == 0)
      {
        uint64_t result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        int v13 = v29;
        if (v29)
        {
          uint64_t v14 = (char *)(v29 + 5);
          _DWORD *v29 = 2;
          v13[1] = v11;
          *((void *)v13 + 1) = v13 + 5;
          v13[4] = 4;
          uint64_t v26 = a3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v26, (char *)v13 + 20);
          uint64_t v15 = v26;
          if (v26) {
            uint64_t v15 = *(unsigned int *)(v26 + 4);
          }
          BOOL v16 = &v14[v15];
          uint64_t v27 = a4;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v27, &v14[v15]);
          uint64_t v17 = v27;
          if (v27) {
            uint64_t v17 = *(unsigned int *)(v27 + 4);
          }
          char v18 = &v16[v17];
          uint64_t v28 = a5;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v28, &v16[v17]);
          uint64_t v19 = v28;
          if (v28) {
            uint64_t v19 = *(unsigned int *)(v28 + 4);
          }
          char v29 = a6;
          uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>((uint64_t *)&v29, &v18[v19]);
        }
        goto LABEL_24;
      }
LABEL_14:
      int v13 = 0;
      goto LABEL_24;
    }
LABEL_15:
    int v13 = (_DWORD *)MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_24;
  }
  if (!result) {
    goto LABEL_15;
  }
  if (result > 0x7FFFFFEF) {
    goto LABEL_14;
  }
  uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  int v13 = v29;
  if (v29)
  {
    char v20 = v29 + 5;
    _DWORD *v29 = 2;
    v13[1] = v11;
    *((void *)v13 + 1) = v13 + 5;
    v13[4] = 0;
    uint64_t v26 = a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v26, (char *)v13 + 20);
    uint64_t v21 = v26;
    if (v26) {
      uint64_t v21 = *(unsigned int *)(v26 + 4);
    }
    unsigned int v22 = (char *)v20 + 2 * v21;
    uint64_t v27 = a4;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v27, v22);
    uint64_t v23 = v27;
    if (v27) {
      uint64_t v23 = *(unsigned int *)(v27 + 4);
    }
    BOOL v24 = &v22[2 * v23];
    uint64_t v28 = a5;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v28, v24);
    uint64_t v25 = v28;
    if (v28) {
      uint64_t v25 = *(unsigned int *)(v28 + 4);
    }
    char v29 = a6;
    uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v29, &v24[2 * v25]);
  }
LABEL_24:
  *a7 = v13;
  return result;
}

void sub_198A22CBC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

IPC::Encoder *IPC::Connection::send<Messages::MediaPlayerPrivateRemote::LayerHostingContextIdChanged>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 160;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v11 = v6;
  IPC::ArgumentCoder<std::optional<unsigned int>,void>::encode<IPC::Encoder,std::optional<unsigned int> const&>(v6, *(void *)a2);
  IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v6, *(float **)(a2 + 8));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void sub_198A22DA0(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(unsigned int)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    int v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)int v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      int v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(unsigned int)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(unsigned int)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  int v2 = a2;
  if (!(a2 >> 29))
  {
    uint64_t v3 = result;
    int v4 = *(WTF **)result;
    uint64_t v5 = *(unsigned int *)(result + 12);
    uint64_t v6 = WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(void *)uint64_t v3 = v6;
    if (v5)
    {
      unint64_t v8 = (void *)v6;
      uint64_t v9 = 8 * v5;
      unint64_t v10 = v4;
      do
      {
        uint64_t v11 = *(void *)v10;
        *(void *)unint64_t v10 = 0;
        *unint64_t v8 = v11;
        uint64_t v12 = *(void *)v10;
        *(void *)unint64_t v10 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
        ++v8;
        unint64_t v10 = (WTF *)((char *)v10 + 8);
        v9 -= 8;
      }
      while (v9);
    }
    if (v4)
    {
      if (*(WTF **)v3 == v4)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree(v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

void WTF::Function<void ()(WebCore::DestinationColorSpace)>::operator()(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  *a2 = 0;
  CFTypeRef cf = v3;
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v2 + 16))(v2, &cf);
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
}

void sub_198A23034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

WebKit::NetworkBroadcastChannelRegistry *WebKit::NetworkBroadcastChannelRegistry::didReceiveMessage(WebKit::NetworkBroadcastChannelRegistry *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  uint64_t v5 = this;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 == 220)
  {
    IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>>((uint64_t *)a3, v16);
    if (v19)
    {
      uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if ((_BYTE)v8)
      {
        uint64_t v13 = v9;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v14, a2);
        unint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v10 = &unk_1EE9BB1F8;
        v10[1] = v13;
        uint64_t v11 = v14;
        uint64_t v14 = 0;
        uint64_t v15 = v10;
        v10[2] = v11;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v14);
        if (!v19) {
          __break(1u);
        }
        WebKit::NetworkBroadcastChannelRegistry::postMessage((uint64_t)v5, (uint64_t)a2, (WebCore::SecurityOriginData *)v16, &v17, (uint64_t)v18, (uint64_t *)&v15);
        uint64_t v12 = (uint64_t)v15;
        uint64_t v15 = 0;
        if (v12) {
          (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
        }
      }
    }
    return (WebKit::NetworkBroadcastChannelRegistry *)std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v8);
  }
  else
  {
    if (v6 == 222)
    {
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>((uint64_t *)a3, v16);
      if (v18[0]) {
        WebKit::NetworkBroadcastChannelRegistry::unregisterChannel(v5, (IPC::Connection *)a2, (const WebCore::ClientOrigin *)v16, &v17);
      }
    }
    else
    {
      if (v6 != 221) {
        return this;
      }
      IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String>>((uint64_t *)a3, v16);
      if (v18[0]) {
        WebKit::NetworkBroadcastChannelRegistry::registerChannel(v5, (IPC::Connection *)a2, (const WebCore::ClientOrigin *)v16, &v17);
      }
    }
    return (WebKit::NetworkBroadcastChannelRegistry *)std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v7);
  }
}

void WebKit::NetworkTransportSession::didReceiveMessage(WebKit::NetworkTransportSession *this, atomic_uchar *volatile *a2, atomic_uchar *volatile **a3)
{
  uint64_t v3 = a3;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x252:
      int v6 = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v7)
      {
        uint64_t v48 = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v49, a2);
        unint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)0x18);
        *(void *)unint64_t v8 = &unk_1EE9BB270;
        *((void *)v8 + 1) = v48;
        uint64_t v9 = v49;
        uint64_t v49 = 0;
        *((void *)v8 + 2) = v9;
        char v53 = v8;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v49);
        WebKit::NetworkTransportSession::createBidirectionalStream((uint64_t)this, (uint64_t *)&v53);
        goto LABEL_28;
      }
      return;
    case 0x253:
      uint64_t v26 = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      if (v27)
      {
        uint64_t v48 = v26;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v49, a2);
        uint64_t v28 = (WTF *)WTF::fastMalloc((WTF *)0x18);
        *(void *)uint64_t v28 = &unk_1EE9BB248;
        *((void *)v28 + 1) = v48;
        char v29 = v49;
        uint64_t v49 = 0;
        *((void *)v28 + 2) = v29;
        char v53 = v28;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v49);
        WebKit::NetworkTransportSession::createOutgoingUnidirectionalStream((uint64_t)this, (uint64_t *)&v53);
LABEL_28:
        uint64_t v30 = v53;
        char v53 = 0;
        if (v30) {
          (*(void (**)(WTF *))(*(void *)v30 + 8))(v30);
        }
      }
      return;
    case 0x254:
      uint64_t v16 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v17)
      {
        WebKit::NetworkTransportSession::destroyBidirectionalStream((uint64_t)this, v16);
      }
      return;
    case 0x255:
      uint64_t v18 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v19)
      {
        WebKit::NetworkTransportSession::destroyOutgoingUnidirectionalStream((uint64_t)this, v18);
      }
      return;
    case 0x256:
      IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>>>((uint64_t *)a3, (uint64_t)&v48);
      if ((_BYTE)v50)
      {
        unint64_t v10 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (v11)
        {
          char v53 = v10;
          uint64_t v3 = &v54;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, a2);
          uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v12 = &unk_1EE9BB220;
          v12[1] = v53;
          uint64_t v13 = v54;
          char v54 = 0;
          v12[2] = v13;
          uint64_t v47 = v12;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v54);
          uint64_t v15 = (atomic_uchar *volatile *)v50;
          if (!(_BYTE)v50) {
            goto LABEL_42;
          }
          WebKit::NetworkTransportSession::sendDatagram((uint64_t)this, v48, v49, (uint64_t *)&v47);
          goto LABEL_38;
        }
      }
      return;
    case 0x257:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>((uint64_t *)a3, &v48);
      if (v52)
      {
        int v31 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (v32)
        {
          char v53 = v31;
          uint64_t v3 = &v54;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, a2);
          uint64_t v33 = (void *)WTF::fastMalloc((WTF *)0x18);
          void *v33 = &unk_1EE9BB298;
          v33[1] = v53;
          uint64_t v34 = v54;
          char v54 = 0;
          _OWORD v33[2] = v34;
          uint64_t v47 = v33;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v54);
          uint64_t v15 = (atomic_uchar *volatile *)v52;
          if (!v52) {
            goto LABEL_42;
          }
          WebKit::NetworkTransportSession::sendStreamSendBytes((uint64_t)this, (uint64_t)v48, v49, v50, v51, (uint64_t *)&v47);
          goto LABEL_38;
        }
      }
      return;
    case 0x258:
      IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>((uint64_t *)a3, &v48);
      if (v52)
      {
        BOOL v35 = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (v36)
        {
          char v53 = v35;
          uint64_t v3 = &v54;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v54, a2);
          CGRect v37 = (void *)WTF::fastMalloc((WTF *)0x18);
          *CGRect v37 = &unk_1EE9BB2C0;
          v37[1] = v53;
          uint64_t v38 = v54;
          char v54 = 0;
          v37[2] = v38;
          uint64_t v47 = v37;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v54);
          uint64_t v15 = (atomic_uchar *volatile *)v52;
          if (!v52)
          {
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
          WebKit::NetworkTransportSession::streamSendBytes((uint64_t)this, (uint64_t)v48, v49, v50, v51, (uint64_t *)&v47);
LABEL_38:
          uint64_t v39 = (uint64_t)v47;
          uint64_t v47 = 0;
          if (v39) {
            (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
          }
        }
      }
      return;
    case 0x259:
      unint64_t v14 = (unint64_t)a3[1];
      uint64_t v15 = *a3;
      unint64_t v20 = (((unint64_t)a3[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*a3;
      if (v14 < v20 || v14 - v20 <= 3)
      {
LABEL_43:
        char v40 = 0;
        uint64_t v41 = 0;
        const void *v3 = 0;
        v3[1] = 0;
        uint64_t v42 = v3[3];
        if (!v42) {
          goto LABEL_47;
        }
        if (v14)
        {
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *, unint64_t))*v42 + 2))(v42, v15, v14);
          goto LABEL_46;
        }
        char v40 = 0;
        uint64_t v41 = 0;
LABEL_47:
        const void *v3 = 0;
        v3[1] = 0;
        char v43 = v3[3];
        if (v43 && v40) {
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v43 + 2))(v43, v41);
        }
        int v44 = *v3;
        uint64_t v45 = v3[1];
        const void *v3 = 0;
        v3[1] = 0;
        int v46 = v3[3];
        if (v46 && v45) {
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v46 + 2))(v46, v44);
        }
        return;
      }
      unsigned int v22 = (_DWORD *)((char *)v15 + v20);
      a3[2] = (atomic_uchar *volatile *)(v22 + 1);
      if (!v15)
      {
        char v40 = (atomic_uchar *volatile *)v14;
        uint64_t v41 = 0;
        goto LABEL_47;
      }
      int v23 = *v22;
      IPC::ArgumentCoder<WTF::CString,void>::decode(a3, (uint64_t)&v53);
      if (!(_BYTE)v54)
      {
LABEL_46:
        uint64_t v41 = *v3;
        char v40 = v3[1];
        goto LABEL_47;
      }
      LODWORD(v48) = v23;
      uint64_t v49 = v53;
      LOBYTE(v50) = 1;
      WTF::isIntegralOrPointerType(this);
      uint64_t v25 = v49;
      uint64_t v49 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1) {
          WTF::fastFree(v25, v24);
        }
        else {
          --*(_DWORD *)v25;
        }
      }
      return;
    default:
      return;
  }
}

void WebPushD::PushClientConnection::didReceiveMessageWithReplyHandler(WebPushD::PushClientConnection *a1, uint64_t a2, WTF::StringImpl ***a3)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  int v5 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v5 + 1;
  char v7 = (uint64_t *)a2;
  unint64_t v8 = &v107;
  switch(*(_WORD *)(a2 + 50))
  {
    case 0x29A:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,WTF::UUID>>((uint64_t *)a2, &v107);
      if ((_BYTE)v109)
      {
        WebPushD::PushClientConnection::cancelNotification(a1, (WebCore::SecurityOriginData *)&v107, (WTF::UUID *)&v108[24]);
        goto LABEL_32;
      }
      goto LABEL_157;
    case 0x29B:
      uint64_t v37 = *(void *)(a2 + 64);
      uint64_t v38 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      uint64_t v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v39 = &unk_1EE9BB590;
      *((void *)v39 + 1) = v37;
      *((void *)v39 + 2) = v38;
      *((void *)v39 + 3) = a1;
      uint64_t v107 = v39;
      WebPushD::PushClientConnection::getAppBadgeForTesting((uint64_t)a1, (uint64_t *)&v107);
      unsigned int v22 = v107;
      uint64_t v107 = 0;
      if (v22) {
        goto LABEL_39;
      }
      goto LABEL_157;
    case 0x29C:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::String>>((IPC::Decoder *)a2, &v107);
      if ((_BYTE)v109)
      {
        char v7 = (uint64_t *)v7[8];
        unint64_t v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        char v29 = (void *)WTF::fastMalloc((WTF *)0x20);
        void *v29 = &unk_1EE9BB540;
        v29[1] = v7;
        uint64_t v29[2] = v8;
        v29[3] = a1;
        *(void *)char v103 = v29;
        if (!(_BYTE)v109) {
          goto LABEL_140;
        }
        WebPushD::PushClientConnection::getNotifications(a1, (WebCore::SecurityOriginData *)&v107, (uint64_t)&v108[32], (uint64_t *)v103);
        uint64_t v30 = *(void *)v103;
        *(void *)char v103 = 0;
        if (v30) {
          (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
        }
      }
      std::__optional_destruct_base<WebCore::PasteboardURL,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v107, v28);
      goto LABEL_157;
    case 0x29D:
      uint64_t v31 = *(void *)(a2 + 64);
      char v32 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      uint64_t v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v33 = &unk_1EE9BB310;
      *((void *)v33 + 1) = v31;
      *((void *)v33 + 2) = v32;
      *((void *)v33 + 3) = a1;
      uint64_t v107 = v33;
      WebPushD::PushClientConnection::getPendingPushMessage((WTF **)a1, (uint64_t *)&v107);
      unsigned int v22 = v107;
      uint64_t v107 = 0;
      if (v22) {
        goto LABEL_39;
      }
      goto LABEL_157;
    case 0x29E:
      uint64_t v19 = *(void *)(a2 + 64);
      unint64_t v20 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      uint64_t v21 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v21 = &unk_1EE9BB338;
      *((void *)v21 + 1) = v19;
      *((void *)v21 + 2) = v20;
      *((void *)v21 + 3) = a1;
      uint64_t v107 = v21;
      WebPushD::PushClientConnection::getPendingPushMessages((WTF **)a1, (uint64_t *)&v107);
      unsigned int v22 = v107;
      uint64_t v107 = 0;
      if (v22) {
        goto LABEL_39;
      }
      goto LABEL_157;
    case 0x29F:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a2, (uint64_t)&v107);
      if (v108[24])
      {
        char v7 = (uint64_t *)v7[8];
        unint64_t v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        unsigned __int8 v52 = (void *)WTF::fastMalloc((WTF *)0x20);
        *unsigned __int8 v52 = &unk_1EE9BB428;
        v52[1] = v7;
        v52[2] = v8;
        v52[3] = a1;
        *(void *)char v103 = v52;
        if (!v108[24]) {
          goto LABEL_140;
        }
        WebPushD::PushClientConnection::getPushPermissionState(a1, (WebCore::SecurityOriginData *)&v107, (uint64_t *)v103);
        uint64_t v13 = *(void *)v103;
        *(void *)char v103 = 0;
        if (!v13) {
          goto LABEL_88;
        }
        goto LABEL_87;
      }
      goto LABEL_157;
    case 0x2A0:
      IPC::Decoder::decode<std::tuple<WTF::URL>>((IPC::Decoder *)a2, &v107);
      if (v108[32])
      {
        char v7 = (uint64_t *)v7[8];
        unint64_t v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        char v54 = (void *)WTF::fastMalloc((WTF *)0x20);
        *char v54 = &unk_1EE9BB400;
        v54[1] = v7;
        v54[2] = v8;
        v54[3] = a1;
        *(void *)char v103 = v54;
        if (!v108[32]) {
          goto LABEL_140;
        }
        WebPushD::PushClientConnection::getPushSubscription(a1, (WebCore::SecurityOriginData *)&v107, (uint64_t *)v103);
        uint64_t v55 = *(void *)v103;
        *(void *)char v103 = 0;
        if (v55) {
          (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
        }
        if (v108[32]) {
          goto LABEL_79;
        }
      }
      goto LABEL_157;
    case 0x2A1:
      uint64_t v34 = *(void *)(a2 + 64);
      BOOL v35 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      char v36 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(void *)char v36 = &unk_1EE9BB4F0;
      *((void *)v36 + 1) = v34;
      *((void *)v36 + 2) = v35;
      *((void *)v36 + 3) = a1;
      uint64_t v107 = v36;
      WebPushD::PushClientConnection::getPushTopicsForTesting(a1, (uint64_t *)&v107);
      unsigned int v22 = v107;
      uint64_t v107 = 0;
      if (v22) {
        goto LABEL_39;
      }
      goto LABEL_157;
    case 0x2A2:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a2, (uint64_t)&v107);
      if (v108[24])
      {
        char v7 = (uint64_t *)v7[8];
        unint64_t v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        char v63 = (void *)WTF::fastMalloc((WTF *)0x20);
        *char v63 = &unk_1EE9BB450;
        v63[1] = v7;
        v63[2] = v8;
        v63[3] = a1;
        *(void *)char v103 = v63;
        if (!v108[24]) {
          goto LABEL_140;
        }
        WebPushD::PushClientConnection::incrementSilentPushCount(a1, (WebCore::SecurityOriginData *)&v107, (uint64_t *)v103);
        goto LABEL_86;
      }
      goto LABEL_157;
    case 0x2A3:
      IPC::Decoder::decode<WebKit::WebPushD::WebPushDaemonConnectionConfiguration>((IPC::Decoder *)a2, (uint64_t)&v107);
      if (!v110) {
        goto LABEL_156;
      }
      *(void *)char v103 = v107;
      *(void *)&v103[8] = *(void *)v108;
      *(_OWORD *)&v103[16] = *(_OWORD *)&v108[8];
      *(_OWORD *)&v103[32] = *(_OWORD *)&v108[24];
      *(_OWORD *)&v103[48] = v109;
      char v104 = 1;
      WebPushD::PushClientConnection::initializeConnection((uint64_t)a1);
      char v27 = *(WTF::StringImpl **)&v103[24];
      *(void *)&v103[24] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v26);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      char v81 = *(WTF::StringImpl **)&v103[16];
      *(void *)&v103[16] = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2) {
          WTF::StringImpl::destroy(v81, v26);
        }
        else {
          *(_DWORD *)v81 -= 2;
        }
      }
      uint64_t v82 = *(WTF **)v103;
      if (*(void *)v103)
      {
        *(void *)char v103 = 0;
        *(_DWORD *)&v103[8] = 0;
        WTF::fastFree(v82, v26);
      }
      goto LABEL_157;
    case 0x2A4:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a2, (uint64_t)&v107);
      if (v108[0])
      {
        char v7 = (uint64_t *)v7[8];
        unint64_t v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        char v61 = (void *)WTF::fastMalloc((WTF *)0x20);
        *char v61 = &unk_1EE9BB388;
        v61[1] = v7;
        v61[2] = v8;
        v61[3] = a1;
        *(void *)char v103 = v61;
        if (!v108[0]) {
          goto LABEL_140;
        }
        WebPushD::PushClientConnection::injectEncryptedPushMessageForTesting(a1, (_DWORD **)&v107, (uint64_t *)v103);
        uint64_t v11 = *(void *)v103;
        *(void *)char v103 = 0;
        if (!v11) {
          goto LABEL_78;
        }
        goto LABEL_77;
      }
      goto LABEL_157;
    case 0x2A5:
      uint64_t v3 = &v107;
      IPC::ArgumentCoder<WebKit::WebPushD::PushMessageForTesting,void>::decode((IPC::Decoder *)a2, &v107);
      if (!v111) {
        goto LABEL_141;
      }
      goto LABEL_13;
    case 0x2A6:
      uint64_t v23 = *(void *)(a2 + 64);
      BOOL v24 = *a3;
      *a3 = 0;
      *((_DWORD *)a1 + 4) = v5 + 2;
      uint64_t v25 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v25 = &unk_1EE9BB478;
      *((void *)v25 + 1) = v23;
      *((void *)v25 + 2) = v24;
      *((void *)v25 + 3) = a1;
      uint64_t v107 = v25;
      WebPushD::PushClientConnection::removeAllPushSubscriptions(a1, (uint64_t *)&v107);
      unsigned int v22 = v107;
      uint64_t v107 = 0;
      if (v22) {
LABEL_39:
      }
        (*(void (**)(WTF::StringImpl *))(*(void *)v22 + 8))(v22);
      goto LABEL_157;
    case 0x2A7:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a2, (uint64_t)&v107);
      if (!v108[24]) {
        goto LABEL_157;
      }
      char v7 = (uint64_t *)v7[8];
      unint64_t v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      char v53 = (void *)WTF::fastMalloc((WTF *)0x20);
      *char v53 = &unk_1EE9BB4A0;
      v53[1] = v7;
      v53[2] = v8;
      v53[3] = a1;
      *(void *)char v103 = v53;
      if (!v108[24]) {
        goto LABEL_140;
      }
      WebPushD::PushClientConnection::removePushSubscriptionsForOrigin(a1, (WebCore::SecurityOriginData *)&v107, (uint64_t *)v103);
LABEL_86:
      uint64_t v13 = *(void *)v103;
      *(void *)char v103 = 0;
      if (v13) {
        goto LABEL_87;
      }
      goto LABEL_88;
    case 0x2A8:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData>>((uint64_t *)a2, (uint64_t)&v107);
      if (!v108[24]) {
        goto LABEL_157;
      }
      char v7 = (uint64_t *)v7[8];
      unint64_t v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x20);
      *uint64_t v12 = &unk_1EE9BB568;
      v12[1] = v7;
      v12[2] = v8;
      v12[3] = a1;
      *(void *)char v103 = v12;
      if (!v108[24]) {
        goto LABEL_140;
      }
      WebPushD::PushClientConnection::requestPushPermission(a1, (WebCore::SecurityOriginData *)&v107, (uint64_t *)v103);
      uint64_t v13 = *(void *)v103;
      *(void *)char v103 = 0;
      if (v13) {
LABEL_87:
      }
        (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
LABEL_88:
      if (v108[24])
      {
LABEL_89:
        if (*(_DWORD *)&v108[16] != -1) {
          ((void (*)(unsigned char *, WTF::StringImpl **))off_1EE9BB1D8[*(unsigned int *)&v108[16]])(v103, &v107);
        }
      }
      goto LABEL_157;
    case 0x2A9:
      IPC::Decoder::decode<std::tuple<WebCore::SecurityOriginData,std::optional<unsigned long long>>>((uint64_t *)a2, &v107);
      if (!(_BYTE)v109) {
        goto LABEL_157;
      }
      WebPushD::PushClientConnection::setAppBadge(a1, (WebCore::SecurityOriginData *)&v107, *(uint64_t *)&v108[24], v108[32]);
LABEL_32:
      if (!(_BYTE)v109) {
        goto LABEL_157;
      }
      goto LABEL_89;
    case 0x2AA:
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)a2, (uint64_t)&v107);
      if (!v108[0]) {
        goto LABEL_157;
      }
      char v7 = (uint64_t *)v7[8];
      unint64_t v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
      void *v9 = &unk_1EE9BB4C8;
      v9[1] = v7;
      v9[2] = v8;
      v9[3] = a1;
      *(void *)char v103 = v9;
      if (!v108[0]) {
        goto LABEL_140;
      }
      WebPushD::PushClientConnection::setPublicTokenForTesting(a1, &v107, (uint64_t *)v103);
      uint64_t v11 = *(void *)v103;
      *(void *)char v103 = 0;
      if (v11) {
LABEL_77:
      }
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
LABEL_78:
      if (v108[0]) {
        goto LABEL_79;
      }
      goto LABEL_157;
    case 0x2AB:
      IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>((IPC::Decoder *)a2, &v107);
      if (!v108[8]) {
        goto LABEL_157;
      }
      char v7 = (uint64_t *)v7[8];
      unint64_t v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      char v40 = (void *)WTF::fastMalloc((WTF *)0x20);
      *char v40 = &unk_1EE9BB2E8;
      v40[1] = v7;
      v40[2] = v8;
      v40[3] = a1;
      *(void *)char v103 = v40;
      if (!v108[8]) {
        goto LABEL_140;
      }
      WebPushD::PushClientConnection::setPushAndNotificationsEnabledForOrigin(a1, &v107, v108[0], (uint64_t *)v103);
      uint64_t v41 = *(void *)v103;
      *(void *)char v103 = 0;
      if (v41) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
      if (!v108[8]) {
        goto LABEL_157;
      }
      goto LABEL_79;
    case 0x2AC:
      IPC::Decoder::decode<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>>((IPC::Decoder *)a2, &v107);
      if (!v113) {
        goto LABEL_73;
      }
      char v7 = (uint64_t *)v7[8];
      unint64_t v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      char v57 = (void *)WTF::fastMalloc((WTF *)0x20);
      *char v57 = &unk_1EE9BB518;
      v57[1] = v7;
      v57[2] = v8;
      v57[3] = a1;
      long long v102 = v57;
      if (!v113) {
        goto LABEL_140;
      }
      uint64_t v58 = v112;
      uint64_t v112 = 0;
      *(void *)char v103 = v58;
      WebPushD::PushClientConnection::showNotification(a1, (uint64_t)&v107, (atomic_uint **)v103, (uint64_t *)&v102);
      char v59 = *(WTF **)v103;
      *(void *)char v103 = 0;
      if (v59) {
        WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v59, v56);
      }
      uint64_t v60 = (uint64_t)v102;
      long long v102 = 0;
      if (v60) {
        (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
      }
LABEL_73:
      std::__optional_destruct_base<std::tuple<WebCore::NotificationData,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::NotificationData *)&v107, v56);
      goto LABEL_157;
    case 0x2AD:
      IPC::Decoder::decode<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a2, &v107);
      if (!BYTE8(v109)) {
        goto LABEL_95;
      }
      char v7 = (uint64_t *)v7[8];
      unint64_t v8 = *a3;
      *a3 = 0;
      ++*((_DWORD *)a1 + 4);
      char v65 = (void *)WTF::fastMalloc((WTF *)0x20);
      *char v65 = &unk_1EE9BB3B0;
      v65[1] = v7;
      v65[2] = v8;
      v65[3] = a1;
      *(void *)char v103 = v65;
      if (!BYTE8(v109)) {
        goto LABEL_140;
      }
      WebPushD::PushClientConnection::subscribeToPushService(a1, (WebCore::SecurityOriginData *)&v107, (uint64_t)&v108[32], (uint64_t *)v103);
      uint64_t v66 = *(void *)v103;
      *(void *)char v103 = 0;
      if (v66) {
        (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
      }
LABEL_95:
      std::__optional_destruct_base<std::tuple<WTF::URL,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v107, v64);
      goto LABEL_157;
    case 0x2AE:
      IPC::Decoder::decode<WTF::URL>((IPC::Decoder *)a2, v103);
      if (!v103[40]) {
        goto LABEL_156;
      }
      unint64_t v42 = v7[1];
      uint64_t v43 = *v7;
      unint64_t v44 = v7[2] - *v7;
      if (v42 <= v44)
      {
        uint64_t v89 = 0;
        uint64_t v90 = 0;
        uint64_t *v7 = 0;
        v7[1] = 0;
        uint64_t v91 = v7[3];
        if (v91)
        {
          if (v42)
          {
            (*(void (**)(uint64_t))(*(void *)v91 + 16))(v91);
            uint64_t v90 = *v7;
            uint64_t v89 = v7[1];
          }
          else
          {
            uint64_t v89 = 0;
            uint64_t v90 = 0;
          }
        }
        goto LABEL_148;
      }
      uint64_t v45 = (unsigned __int8 *)(v43 + v44);
      void v7[2] = (uint64_t)(v45 + 1);
      if (!v43)
      {
        uint64_t v89 = v42;
        uint64_t v90 = 0;
LABEL_148:
        unint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t *v7 = 0;
        v7[1] = 0;
        uint64_t v92 = v7[3];
        if (v92)
        {
          if (v89)
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v92 + 16))(v92, v90, v89);
            uint64_t v43 = *v7;
            unint64_t v42 = v7[1];
          }
          else
          {
            unint64_t v42 = 0;
            uint64_t v43 = 0;
          }
        }
        goto LABEL_149;
      }
      unsigned int v46 = *v45;
      if (v46 >= 2)
      {
LABEL_149:
        uint64_t *v7 = 0;
        v7[1] = 0;
        uint64_t v93 = v7[3];
        if (v93 && v42) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v93 + 16))(v93, v43);
        }
LABEL_150:
        uint64_t v94 = (WTF::StringImpl *)*v7;
        uint64_t v95 = v7[1];
        uint64_t *v7 = 0;
        v7[1] = 0;
        uint64_t v96 = v7[3];
        if (v96 && v95) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v96 + 16))(v96, v94);
        }
        BYTE8(v109) = 0;
        if (v103[40])
        {
          char v97 = *(WTF::StringImpl **)v103;
          *(void *)char v103 = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2) {
              WTF::StringImpl::destroy(v97, v94);
            }
            else {
              *(_DWORD *)v97 -= 2;
            }
          }
        }
LABEL_156:
        uint64_t v98 = *v7;
        uint64_t v99 = v7[1];
        uint64_t *v7 = 0;
        v7[1] = 0;
        uint64_t v100 = v7[3];
        if (v100 && v99) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v100 + 16))(v100, v98);
        }
        goto LABEL_157;
      }
      if (!v46)
      {
        char v51 = 0;
        unint64_t v49 = 0;
        uint64_t v50 = 0;
        goto LABEL_97;
      }
      uint64_t v47 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(v7);
      if (!v48) {
        goto LABEL_150;
      }
      if (v103[40])
      {
        unint64_t v49 = v47 & 0xFFFFFFFFFFFFFF00;
        uint64_t v50 = v47;
        char v51 = 1;
LABEL_97:
        *(_OWORD *)char v108 = *(_OWORD *)&v103[8];
        *(_OWORD *)&v108[16] = *(_OWORD *)&v103[24];
        uint64_t v67 = v50 | v49;
        uint64_t v107 = *(WTF::StringImpl **)v103;
        *(void *)&v108[32] = v50 | v49;
        LOBYTE(v109) = v51;
        BYTE8(v109) = 1;
        uint64_t v68 = v7[8];
        uint64_t v69 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        uint64_t v70 = (void *)WTF::fastMalloc((WTF *)0x20);
        void *v70 = &unk_1EE9BB3D8;
        v70[1] = v68;
        v70[2] = v69;
        v70[3] = a1;
        *(void *)char v103 = v70;
        WebPushD::PushClientConnection::unsubscribeFromPushService(a1, (WebCore::SecurityOriginData *)&v107, v67, v109, (uint64_t *)v103);
        uint64_t v71 = *(void *)v103;
        *(void *)char v103 = 0;
        if (v71) {
          (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
        }
        if (!BYTE8(v109)) {
          goto LABEL_157;
        }
LABEL_79:
        uint64_t v62 = v107;
        uint64_t v107 = 0;
        if (!v62) {
          goto LABEL_157;
        }
LABEL_80:
        if (*(_DWORD *)v62 == 2) {
          WTF::StringImpl::destroy(v62, v10);
        }
        else {
          *(_DWORD *)v62 -= 2;
        }
        goto LABEL_157;
      }
      do
      {
LABEL_140:
        __break(1u);
LABEL_141:
        uint64_t v83 = *v7;
        uint64_t v84 = v7[1];
        uint64_t *v7 = 0;
        v7[1] = 0;
        uint64_t v85 = v7[3];
        if (v85 && v84 && ((*(void (**)(uint64_t, uint64_t))(*(void *)v85 + 16))(v85, v83), v111))
        {
LABEL_13:
          uint64_t v14 = *((void *)&v109 + 1);
          *(void *)&v103[16] = *(void *)&v108[8];
          long long v15 = *(_OWORD *)v8;
          uint64_t v107 = 0;
          *(void *)char v108 = 0;
          *(_OWORD *)char v103 = v15;
          *(void *)&v108[8] = 0;
          *(_OWORD *)&v103[24] = *(_OWORD *)(v8 + 3);
          *(_OWORD *)&v103[40] = *(_OWORD *)(v8 + 5);
          *(_DWORD *)&v108[16] = *(_DWORD *)&v103[24] & 0xFFFFFFFE;
          *((void *)&v109 + 1) = 0;
          *(void *)&v103[56] = v14;
          char v104 = v110;
          std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)v105, (uint64_t)(v3 + 9));
          char v106 = 1;
          if (v111)
          {
            std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(v3 + 9), v16);
            uint64_t v18 = (WTF::StringImpl *)*((void *)&v109 + 1);
            *((void *)&v109 + 1) = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2) {
                WTF::StringImpl::destroy(v18, v17);
              }
              else {
                *(_DWORD *)v18 -= 2;
              }
            }
            unint64_t v72 = *(WTF::StringImpl **)&v108[8];
            *(void *)&v108[8] = 0;
            if (v72)
            {
              if (*(_DWORD *)v72 == 2) {
                WTF::StringImpl::destroy(v72, v17);
              }
              else {
                *(_DWORD *)v72 -= 2;
              }
            }
            uint64_t v73 = *(WTF::StringImpl **)v108;
            *(void *)char v108 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2) {
                WTF::StringImpl::destroy(v73, v17);
              }
              else {
                *(_DWORD *)v73 -= 2;
              }
            }
            uint64_t v74 = v107;
            uint64_t v107 = 0;
            if (v74)
            {
              if (*(_DWORD *)v74 == 2) {
                WTF::StringImpl::destroy(v74, v17);
              }
              else {
                *(_DWORD *)v74 -= 2;
              }
            }
          }
        }
        else
        {
          v103[0] = 0;
          char v106 = 0;
        }
        if (!v106)
        {
          uint64_t v86 = *v7;
          uint64_t v87 = v7[1];
          uint64_t *v7 = 0;
          v7[1] = 0;
          uint64_t v88 = v7[3];
          if (!v88) {
            goto LABEL_157;
          }
          if (!v87) {
            goto LABEL_157;
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v88 + 16))(v88, v86);
          if (!v106) {
            goto LABEL_157;
          }
        }
        char v7 = (uint64_t *)v7[8];
        unint64_t v8 = *a3;
        *a3 = 0;
        ++*((_DWORD *)a1 + 4);
        uint64_t v75 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v75 = &unk_1EE9BB360;
        *((void *)v75 + 1) = v7;
        *((void *)v75 + 2) = v8;
        *((void *)v75 + 3) = a1;
        uint64_t v107 = v75;
      }
      while (!v106);
      WebPushD::PushClientConnection::injectPushMessageForTesting((uint64_t)a1, (uint64_t)v103, (WTF::RefCountedBase *)&v107);
      unsigned __int8 v77 = v107;
      uint64_t v107 = 0;
      if (v77) {
        (*(void (**)(WTF::StringImpl *))(*(void *)v77 + 8))(v77);
      }
      if (v106)
      {
        std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v105, v76);
        char v78 = *(WTF::StringImpl **)&v103[56];
        *(void *)&v103[56] = 0;
        if (v78)
        {
          if (*(_DWORD *)v78 == 2) {
            WTF::StringImpl::destroy(v78, v10);
          }
          else {
            *(_DWORD *)v78 -= 2;
          }
        }
        long long v79 = *(WTF::StringImpl **)&v103[16];
        *(void *)&v103[16] = 0;
        if (v79)
        {
          if (*(_DWORD *)v79 == 2) {
            WTF::StringImpl::destroy(v79, v10);
          }
          else {
            *(_DWORD *)v79 -= 2;
          }
        }
        long long v80 = *(WTF::StringImpl **)&v103[8];
        *(void *)&v103[8] = 0;
        if (v80)
        {
          if (*(_DWORD *)v80 == 2) {
            WTF::StringImpl::destroy(v80, v10);
          }
          else {
            *(_DWORD *)v80 -= 2;
          }
        }
        uint64_t v62 = *(WTF::StringImpl **)v103;
        *(void *)char v103 = 0;
        if (v62) {
          goto LABEL_80;
        }
      }
LABEL_157:
      if (*((_DWORD *)a1 + 4) == 1)
      {
        char v101 = *(void (**)(WebPushD::PushClientConnection *))(*(void *)a1 + 8);
        v101(a1);
      }
      else
      {
        --*((_DWORD *)a1 + 4);
      }
      return;
    default:
      goto LABEL_157;
  }
}

WTF::StringImpl *WebKit::RTCDataChannelRemoteManager::didReceiveMessage(WTF::StringImpl *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  uint64_t v3 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2B5:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,unsigned long>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v8) {
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManager::bufferedAmountIsDecreasing(v3, v5, v6, *(uint64_t *)v7);
      }
      break;
    case 0x2B6:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v8) {
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManager::changeReadyState(v3, v5, v6, v7[0]);
      }
      break;
    case 0x2B7:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier>>((uint64_t)&v5, (uint64_t *)a3);
      if (LOBYTE(v7[0])) {
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManager::close((uint64_t *)v3, v5, v6);
      }
      break;
    case 0x2B8:
      this = IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String>>((uint64_t)&v5, (uint64_t *)a3);
      if ((_BYTE)v9)
      {
        this = (WTF::StringImpl *)WebKit::RTCDataChannelRemoteManager::detectError(v3, v5, v6, v7[0], (uint64_t *)&v8);
        if ((_BYTE)v9)
        {
          this = v8;
          unint64_t v8 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2) {
              this = (WTF::StringImpl *)WTF::StringImpl::destroy(this, v4);
            }
            else {
              *(_DWORD *)this -= 2;
            }
          }
        }
      }
      break;
    case 0x2B9:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v5, (uint64_t *)a3);
      if (v10) {
        this = WebKit::RTCDataChannelRemoteManager::receiveData(v3, v5, v6, LOBYTE(v7[0]), (uint64_t)v8, v9);
      }
      break;
    case 0x2BA:
      this = (WTF::StringImpl *)IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v5, (uint64_t *)a3);
      if (v10) {
        this = WebKit::RTCDataChannelRemoteManager::sendData((uint64_t *)v3, v5, v6, LOBYTE(v7[0]));
      }
      break;
    default:
      return this;
  }
  return this;
}

void WebKit::RTCDataChannelRemoteManagerProxy::didReceiveMessage(WebKit::RTCDataChannelRemoteManagerProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2AF:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,unsigned long>>((uint64_t)&v6, (uint64_t *)a3);
      if ((_BYTE)v9) {
        WebKit::RTCDataChannelRemoteManagerProxy::bufferedAmountIsDecreasing((uint64_t)this, v6, v7, v8);
      }
      break;
    case 0x2B0:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState>>((uint64_t)&v6, (uint64_t *)a3);
      if ((_BYTE)v9) {
        WebKit::RTCDataChannelRemoteManagerProxy::changeReadyState((uint64_t)this, v6, v7, v8);
      }
      break;
    case 0x2B1:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier>>((uint64_t)&v6, (uint64_t *)a3);
      if ((_BYTE)v8) {
        WebKit::RTCDataChannelRemoteManagerProxy::close((uint64_t)this, v6, v7);
      }
      break;
    case 0x2B2:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String>>((uint64_t)&v6, (uint64_t *)a3);
      if ((_BYTE)v10)
      {
        WebKit::RTCDataChannelRemoteManagerProxy::detectError((uint64_t)this, v6, v7, v8, (uint64_t)&v9);
        if ((_BYTE)v10)
        {
          uint64_t v5 = v9;
          uint64_t v9 = 0;
          if (v5)
          {
            if (*(_DWORD *)v5 == 2) {
              WTF::StringImpl::destroy(v5, v4);
            }
            else {
              *(_DWORD *)v5 -= 2;
            }
          }
        }
      }
      break;
    case 0x2B3:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v11) {
        WebKit::RTCDataChannelRemoteManagerProxy::receiveData((uint64_t)this, v6, v7, v8, (uint64_t)v9, v10);
      }
      break;
    case 0x2B4:
      IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>((uint64_t)&v6, (uint64_t *)a3);
      if (v11) {
        WebKit::RTCDataChannelRemoteManagerProxy::sendData((uint64_t)this, v6, v7, v8, (uint64_t)v9, v10);
      }
      break;
    default:
      return;
  }
}

atomic_uchar *volatile **WebKit::RemoteAdapter::didReceiveStreamMessage(atomic_uchar *volatile **this, IPC::StreamServerConnection *a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[7] + 1) + 78))
  {
    uint64_t v5 = this;
    int v6 = *((unsigned __int16 *)a3 + 25);
    if (v6 == 3625)
    {
      this = (atomic_uchar *volatile **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      char v11 = v10;
      if (v10)
      {
        uint64_t v12 = this;
        IPC::ArgumentCoder<WebKit::WebGPU::DeviceDescriptor,void>::decode(a3, (uint64_t)&v33);
        if (v37)
        {
          while (1)
          {
            uint64_t v13 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
            if (!(_BYTE)v14) {
              break;
            }
            uint64_t v15 = v13;
            uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
            if (!(_BYTE)v14) {
              break;
            }
            if (v37)
            {
              long long v18 = v33;
              long long v33 = 0uLL;
              *(_OWORD *)char v27 = v18;
              *(void *)&long long v18 = v34;
              uint64_t v34 = 0;
              uint64_t v28 = v18;
              uint64_t v19 = v35;
              uint64_t v35 = 0;
              v29[0] = v19;
              *(void *)&long long v18 = v36;
              uint64_t v36 = 0;
              v29[1] = v18;
              uint64_t v30 = v15;
              uint64_t v31 = v16;
              char v32 = 1;
              std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v14);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v33, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v33);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v20 = &unk_1EE9BB5B8;
              *(void *)(v20 + 8) = v12;
              *(unsigned char *)(v20 + 16) = v11;
              *(_DWORD *)(v20 + 17) = *(_DWORD *)v26;
              *(_DWORD *)(v20 + 20) = *(_DWORD *)&v26[3];
              *(void *)(v20 + 24) = a2;
              *(void *)&long long v33 = v20;
              WebKit::RemoteAdapter::requestDevice(v5, (uint64_t)v27, v30, v31, (uint64_t *)&v33);
              this = (atomic_uchar *volatile **)v33;
              *(void *)&long long v33 = 0;
              if (this) {
                this = (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*this + 1))(this);
              }
              if (v32)
              {
                WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v21);
                uint64_t v23 = v27[1];
                if (v27[1])
                {
                  v27[1] = 0;
                  LODWORD(v28) = 0;
                  WTF::fastFree(v23, v22);
                }
                this = (atomic_uchar *volatile **)v27[0];
                v27[0] = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2) {
                    return (atomic_uchar *volatile **)WTF::StringImpl::destroy((WTF::StringImpl *)this, (WTF::StringImpl *)v22);
                  }
                  else {
                    *(_DWORD *)this -= 2;
                  }
                }
              }
              return this;
            }
            __break(1u);
LABEL_25:
            if (v17)
            {
              (*(void (**)(uint64_t, void *))(*(void *)v16 + 16))(v16, v14);
              if (v37) {
                continue;
              }
            }
            break;
          }
        }
        else
        {
          uint64_t v14 = *(void **)a3;
          uint64_t v17 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v16 = *((void *)a3 + 3);
          if (v16) {
            goto LABEL_25;
          }
        }
        std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v33, v14);
        uint64_t v24 = *(void *)a3;
        uint64_t v25 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        this = (atomic_uchar *volatile **)*((void *)a3 + 3);
        if (this && v25) {
          return (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **, uint64_t))*this + 2))(this, v24);
        }
      }
    }
    else if (v6 == 699)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v27, (uint64_t **)a2 + 5);
      uint64_t v7 = *((void *)v5[3] + 1);
      uint64_t v8 = (_DWORD *)(v7 + 8);
      ++*(_DWORD *)(v7 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v7, (uint64_t)v5[8]);
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v8, v9);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v27);
    }
  }
  return this;
}

void WebPushD::PushClientConnection::~PushClientConnection(WebPushD::PushClientConnection *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9BB1B0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  CFTypeRef v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5) {
    os_release(v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  void *v5;
  void *v6;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BB1B0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  CFTypeRef v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  if (v5) {
    os_release(v5);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v6);
}

void WebKit::RTCDataChannelRemoteManager::~RTCDataChannelRemoteManager(WebKit::RTCDataChannelRemoteManager *this, void *a2)
{
  WebKit::RTCDataChannelRemoteManager::~RTCDataChannelRemoteManager(this, a2);

  JUMPOUT(0x199740C10);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int **v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  atomic_uchar *volatile *v13;
  char v14;
  atomic_uchar *volatile v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    CFTypeRef v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (unsigned int **)(v3 + 16);
      do
      {
        if (*(v5 - 2) != (unsigned int *)-1)
        {
          int v6 = *v5;
          void *v5 = 0;
          if (v6)
          {
            if (atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
            {
              atomic_store(1u, v6);
              WTF::fastFree((WTF *)v6, a2);
            }
          }
        }
        v5 += 8;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v7 = *((void *)this + 6);
  if (v7)
  {
    uint64_t v8 = *(unsigned int *)(v7 - 4);
    if (v8)
    {
      uint64_t v9 = (uint64_t *)(v7 + 8);
      do
      {
        if (*(v9 - 1) != -1)
        {
          char v10 = *v9;
          void *v9 = 0;
          if (v10) {
            (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
          }
        }
        v9 += 2;
        --v8;
      }
      while (v8);
    }
    WTF::fastFree((WTF *)(v7 - 16), a2);
  }
  char v11 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v11) {
    WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
  }
  uint64_t v12 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v12) {
    WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v12 + 8));
  }
  uint64_t v13 = (atomic_uchar *volatile *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *v13;
    atomic_compare_exchange_strong_explicit(*v13, (unsigned __int8 *)&v14, 1u, memory_order_acquire, memory_order_acquire);
    if (v14) {
      MEMORY[0x19972E8D0](v15);
    }
    uint64_t v16 = *((void *)v15 + 1);
    uint64_t v17 = v16 - 1;
    *((void *)v15 + 1) = v16 - 1;
    if (v16 == 1)
    {
      uint64_t v23 = *((void *)v15 + 2);
      uint64_t v19 = *((void *)v15 + 3);
      *((void *)v15 + 3) = 0;
      long long v18 = v23 == 0;
    }
    else
    {
      long long v18 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v20 = 1;
    atomic_compare_exchange_strong_explicit(v15, (unsigned __int8 *)&v20, 0, memory_order_release, memory_order_relaxed);
    if (v20 == 1)
    {
      if (v17) {
        goto LABEL_31;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v15);
      if (v17) {
        goto LABEL_31;
      }
    }
    uint64_t v21 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v21 = &unk_1EE9B37E8;
    *(void *)(v21 + 8) = v15;
    *(void *)(v21 + 16) = v19;
    *(unsigned char *)(v21 + 24) = v18;
    uint64_t v24 = v21;
    WTF::ensureOnMainRunLoop();
    if (v24) {
      (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
    }
  }
LABEL_31:
  unsigned int v22 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 56))(v22);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

void WebKit::RTCDataChannelRemoteManagerProxy::~RTCDataChannelRemoteManagerProxy(WebKit::RTCDataChannelRemoteManagerProxy *this, void *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  uint64_t v3 = *((void *)this + 4);
  if (v3) {
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v5);
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9BB618;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9BB640;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[96])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::ClientOrigin>(a1, v5);
  if (v5[64])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>((IPC::Decoder *)a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5);
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v8);
  if (v9)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String>(a1, a2, (uint64_t)&v8, a3);
    if (v9)
    {
      uint64_t result = v8;
      uint64_t v8 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a3 = 0;
    a3[96] = 0;
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(a1, (uint64_t)v9);
  if (v9[24])
  {
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>(a2, a3, (uint64_t)v9, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[96] = 0;
  }
  return std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v7);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,void>::decode<IPC::Decoder,WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = a4;
  if (*(unsigned char *)(a1 + 64) && *(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 24))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore12ClientOriginEN3WTF6StringENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S6_S7_EJEJEJS4_S6_S7_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a4, a1, (uint64_t *)a2, (uint64_t *)a3);
    *(unsigned char *)(result + 96) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN7WebCore12ClientOriginEN3WTF6StringENS3_23MessageWithMessagePortsEEEC2B8sn180100IJLm0ELm1ELm2EEJS4_S6_S7_EJEJEJS4_S6_S7_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  *(unsigned char *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1 + 32, a2 + 32);
  uint64_t v8 = *a3;
  *a3 = 0;
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = *a4;
  *a4 = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = a4[1];
  a4[1] = 0;
  *(void *)(a1 + 80) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 4);
  *((_DWORD *)a4 + 4) = 0;
  *(_DWORD *)(a1 + 88) = v10;
  LODWORD(v10) = *((_DWORD *)a4 + 5);
  *((_DWORD *)a4 + 5) = 0;
  *(_DWORD *)(a1 + 92) = v10;
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31NetworkBroadcastChannelRegistry11PostMessageEN6WebKit31NetworkBroadcastChannelRegistryES8_FvRNS2_10ConnectionERKN7WebCore12ClientOriginERKNS_6StringEONSB_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB1F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31NetworkBroadcastChannelRegistry11PostMessageEN6WebKit31NetworkBroadcastChannelRegistryES8_FvRNS2_10ConnectionERKN7WebCore12ClientOriginERKNS_6StringEONSB_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB1F8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages31NetworkBroadcastChannelRegistry11PostMessageEN6WebKit31NetworkBroadcastChannelRegistryES8_FvRNS2_10ConnectionERKN7WebCore12ClientOriginERKNS_6StringEONSB_23MessageWithMessagePortsEONS_17CompletionHandlerIFvvEEEEEEvSA_RNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2913;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::ClientOrigin,WTF::String,WebCore::MessageWithMessagePorts>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v3 = *(WTF **)(a1 + 80);
    if (v3)
    {
      *(void *)(a1 + 80) = 0;
      *(_DWORD *)(a1 + 88) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(unsigned int **)(a1 + 72);
    *(void *)(a1 + 72) = 0;
    if (v4) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v4);
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(unsigned int *)(a1 + 56);
    if (v6 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BB1D8[v6])(&v9, a1 + 32);
    }
    *(_DWORD *)(a1 + 56) = -1;
    uint64_t v7 = *(unsigned int *)(a1 + 24);
    if (v7 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BB1D8[v7])(&v10, a1);
    }
    *(_DWORD *)(a1 + 24) = -1;
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession12SendDatagramEN6WebKit23NetworkTransportSessionES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession12SendDatagramEN6WebKit23NetworkTransportSessionES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB220;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession12SendDatagramEN6WebKit23NetworkTransportSessionES8_FvNSt3__14spanIKhLm18446744073709551615EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3109;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession34CreateOutgoingUnidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession34CreateOutgoingUnidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB248;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession34CreateOutgoingUnidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3108;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v11 = v5;
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v5, (uint64_t)v10);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession25CreateBidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession25CreateBidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB270;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession25CreateBidirectionalStreamEN6WebKit23NetworkTransportSessionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalINS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3107;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  char v11 = v5;
  IPC::ArgumentCoder<std::optional<PAL::SessionID>,void>::encode<IPC::Encoder,std::optional<PAL::SessionID> const&>(v5, (uint64_t)v10);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  char v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[32])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (void *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v6, a2);
  }
  *a2 = 0;
  a2[32] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v7);
  if (v7[16]) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>>(a1, a2, (uint64_t)v7, (uint64_t)a3);
  }
  *a3 = 0;
  a3[32] = 0;
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>,BOOL>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::span<unsigned char const,18446744073709551615ul>>@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = result[1];
  uint64_t v7 = *result;
  unint64_t v8 = result[2] - *result;
  if (v6 <= v8)
  {
LABEL_9:
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v15 = result[3];
    if (v15)
    {
      long long v18 = result;
      uint64_t v21 = a4;
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t result = v18;
        a4 = v21;
        uint64_t v14 = *v18;
        unint64_t v13 = v18[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_10;
  }
  char v9 = (unsigned __int8 *)(v7 + v8);
  result[2] = v9 + 1;
  if (!v7)
  {
    unint64_t v13 = v6;
    uint64_t v14 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (v16)
    {
      uint64_t v17 = result;
      uint64_t v20 = a4;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t result = v17;
        a4 = v20;
        uint64_t v7 = *v17;
        unint64_t v6 = v17[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v10 = *v9;
  if (v10 < 2)
  {
    BOOL v11 = v10 != 0;
    if (*(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 16))
    {
      *(void *)a4 = *(void *)a2;
      *(_OWORD *)(a4 + 8) = *(_OWORD *)a3;
      *(unsigned char *)(a4 + 24) = v11;
      char v12 = 1;
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_11:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t result = (void *)result[3];
  if (result && v6)
  {
    uint64_t v19 = a4;
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v7);
    a4 = v19;
  }
  char v12 = 0;
  *(unsigned char *)a4 = 0;
LABEL_7:
  *(unsigned char *)(a4 + 32) = v12;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession19SendStreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession19SendStreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB298;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession19SendStreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3110;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession15StreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB2C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession15StreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB2C0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages23NetworkTransportSession15StreamSendBytesEN6WebKit23NetworkTransportSessionES8_FvNS_23ObjectIdentifierGenericINS7_32WebTransportStreamIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3111;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  unint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  uint64_t result = v8;
  unint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<WTF::String,BOOL>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

WTF::StringImpl *IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v6);
  if (v7)
  {
    uint64_t result = (WTF::StringImpl *)IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder,WTF::String>(a1, (uint64_t *)&v6, a2);
    if (v7)
    {
      uint64_t result = v6;
      unint64_t v6 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[16] = 0;
  }
  return result;
}

void *IPC::ArgumentCoder<std::tuple<WTF::String,BOOL>,void>::decode<IPC::Decoder,WTF::String>@<X0>(void *result@<X0>, uint64_t *a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v4 = result[1];
  uint64_t v5 = *result;
  unint64_t v6 = result[2] - *result;
  if (v4 <= v6)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v15 = result[3];
    if (v15)
    {
      long long v18 = result;
      uint64_t v21 = a3;
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t result = v18;
        a3 = v21;
        uint64_t v14 = *v18;
        unint64_t v13 = v18[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_11;
  }
  char v7 = (unsigned __int8 *)(v5 + v6);
  result[2] = v7 + 1;
  if (!v5)
  {
    unint64_t v13 = v4;
    uint64_t v14 = 0;
LABEL_11:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v16 = result[3];
    if (v16)
    {
      uint64_t v17 = result;
      uint64_t v20 = a3;
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t result = v17;
        a3 = v20;
        uint64_t v5 = *v17;
        unint64_t v4 = v17[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_12:
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t result = (void *)result[3];
    if (!result)
    {
LABEL_13:
      char v12 = 0;
      *a3 = 0;
      goto LABEL_9;
    }
LABEL_15:
    if (v4)
    {
      uint64_t v19 = a3;
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v5);
      a3 = v19;
    }
    goto LABEL_13;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_12;
  }
  if (!*((unsigned char *)a2 + 8))
  {
    __break(1u);
    goto LABEL_15;
  }
  BOOL v9 = v8 == 0;
  uint64_t v10 = *a2;
  char v11 = !v9;
  *a2 = 0;
  *(void *)a3 = v10;
  a3[8] = v11;
  char v12 = 1;
LABEL_9:
  a3[16] = v12;
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection39SetPushAndNotificationsEnabledForOriginEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB2E8;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection39SetPushAndNotificationsEnabledForOriginEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB2E8;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection39SetPushAndNotificationsEnabledForOriginEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEbONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v3 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v2 = 3132;
  *((void *)v2 + 1) = v3;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 69) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 68) = 0;
  IPC::Encoder::encodeHeader(v2);
  unsigned int v8 = v2;
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v8);
  uint64_t result = v8;
  unsigned int v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetPendingPushMessageEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN6WebKit14WebPushMessageEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB310;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetPendingPushMessageEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN6WebKit14WebPushMessageEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB310;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetPendingPushMessageEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNSt3__18optionalIN6WebKit14WebPushMessageEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3120;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::optional<WebKit::WebPushMessage>,void>::encode<IPC::Encoder,std::optional<WebKit::WebPushMessage> const&>(v4, a2);
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPendingPushMessagesEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN6WebKit14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB338;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPendingPushMessagesEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN6WebKit14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB338;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPendingPushMessagesEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvRKNS_6VectorIN6WebKit14WebPushMessageELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3121;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::VectorArgumentCoder<false,WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebKit::WebPushMessage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v4, a2);
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection27InjectPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvON6WebKit8WebPushD21PushMessageForTestingEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB360;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection27InjectPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvON6WebKit8WebPushD21PushMessageForTestingEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB360;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection27InjectPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvON6WebKit8WebPushD21PushMessageForTestingEONS_17CompletionHandlerIFvRKNS_6StringEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3127;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, a2);
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection36InjectEncryptedPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB388;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection36InjectEncryptedPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB388;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection36InjectEncryptedPushMessageForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3126;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v12 = v4;
  unint64_t v6 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v12);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22SubscribeToPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLERKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSL_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB3B0;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22SubscribeToPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLERKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSL_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB3B0;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22SubscribeToPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLERKNS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIN7WebCore20PushSubscriptionDataENSL_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSQ_EE4callESQ_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3134;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v14 = v4;
  int v6 = *(_DWORD *)(a2 + 80);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198A27598);
    }
    unsigned char *v7 = 0;
    if (*(_DWORD *)(a2 + 80) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(v4, (char *)a2);
      goto LABEL_8;
    }
LABEL_13:
    unint64_t v13 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(v13);
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198A275B8);
  }
  unsigned char *v7 = 1;
  if (*(_DWORD *)(a2 + 80)) {
    goto LABEL_13;
  }
  IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(v4, a2);
LABEL_8:
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v14);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB3D8;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB3D8;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26UnsubscribeFromPushServiceEN8WebPushD20PushClientConnectionES8_FvONS_3URLENSt3__18optionalINS_23ObjectIdentifierGenericIN7WebCore30PushSubscriptionIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEEEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedIbNSE_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSS_EE4callESS_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3135;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v17 = v4;
  int v6 = *(_DWORD *)(a2 + 16);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (!v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198A27898);
    }
    unsigned char *v7 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      char v9 = *(unsigned char *)a2;
      uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
      if (!v11)
      {
        __break(0xC471u);
        JUMPOUT(0x198A278B8);
      }
      unsigned char *v10 = v9;
      goto LABEL_9;
    }
LABEL_15:
    uint64_t v16 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(v16);
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198A27878);
  }
  unsigned char *v7 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_15;
  }
  IPC::ArgumentCoder<WebCore::Exception,void>::encode(v4, (char *)a2);
LABEL_9:
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v17);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB400;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB400;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection19GetPushSubscriptionEN8WebPushD20PushClientConnectionES8_FvONS_3URLEONS_17CompletionHandlerIFvRKNSt12experimental15fundamentals_v38expectedINSt3__18optionalIN7WebCore20PushSubscriptionDataEEENSH_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3123;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v17 = v4;
  int v6 = *(_DWORD *)(a2 + 96);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v6)
  {
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x198A27BA0);
    }
    unsigned char *v7 = 0;
    if (*(_DWORD *)(a2 + 96) == 1)
    {
      IPC::ArgumentCoder<WebCore::Exception,void>::encode(v4, (char *)(a2 + 8));
      goto LABEL_13;
    }
    goto LABEL_20;
  }
  if (!v8)
  {
    __break(0xC471u);
    JUMPOUT(0x198A27BC0);
  }
  unsigned char *v7 = 1;
  if (*(_DWORD *)(a2 + 96))
  {
LABEL_20:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_21;
  }
  int v9 = *(unsigned __int8 *)(a2 + 88);
  uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (!v9)
  {
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x198A27C00);
    }
    unsigned char *v10 = 0;
    goto LABEL_13;
  }
  if (!v11)
  {
    __break(0xC471u);
    JUMPOUT(0x198A27BE0);
  }
  unsigned char *v10 = 1;
  if (!*(unsigned char *)(a2 + 88))
  {
LABEL_21:
    uint64_t v16 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
    return (IPC::Encoder *)_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(v16);
  }
  IPC::ArgumentCoder<WebCore::PushSubscriptionData,void>::encode(v4, a2 + 8);
LABEL_13:
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v17);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB428;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB428;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection22GetPushPermissionStateEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvNS9_19PushPermissionStateEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, char a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3122;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v4, a2);
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24IncrementSilentPushCountEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB450;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24IncrementSilentPushCountEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB450;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24IncrementSilentPushCountEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3125;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v12 = v4;
  int v6 = (_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4);
  if (v7 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v6 = a2;
    (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v12);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26RemoveAllPushSubscriptionsEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB478;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26RemoveAllPushSubscriptionsEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB478;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection26RemoveAllPushSubscriptionsEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3128;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v12 = v4;
  int v6 = (_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4);
  if (v7 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v6 = a2;
    (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v12);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection32RemovePushSubscriptionsForOriginEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB4A0;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection32RemovePushSubscriptionsForOriginEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB4A0;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection32RemovePushSubscriptionsForOriginEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvjEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3129;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v12 = v4;
  int v6 = (_DWORD *)IPC::Encoder::grow(v4, 4uLL, 4);
  if (v7 <= 3)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    _DWORD *v6 = a2;
    (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v12);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24SetPublicTokenForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB4C8;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24SetPublicTokenForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB4C8;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection24SetPublicTokenForTestingEN8WebPushD20PushClientConnectionES8_FvRKNS_6StringEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v3 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v2 = 3131;
  *((void *)v2 + 1) = v3;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 69) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 68) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v8 = v2;
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection23GetPushTopicsForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESE_EEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SE_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB4F0;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection23GetPushTopicsForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESE_EEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SE_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB4F0;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection23GetPushTopicsForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEESE_EEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSE_SE_EE4callESE_SE_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v7 = *(void *)(a1 + 8);
  *(_WORD *)int v6 = 3124;
  *((void *)v6 + 1) = v7;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 69) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 68) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v12 = v6;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, a2);
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v6, a3);
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v12);
  uint64_t result = v12;
  char v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection16ShowNotificationEN8WebPushD20PushClientConnectionES8_FvRKN7WebCore16NotificationDataENS_6RefPtrINS9_21NotificationResourcesENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB518;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection16ShowNotificationEN8WebPushD20PushClientConnectionES8_FvRKN7WebCore16NotificationDataENS_6RefPtrINS9_21NotificationResourcesENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB518;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection16ShowNotificationEN8WebPushD20PushClientConnectionES8_FvRKN7WebCore16NotificationDataENS_6RefPtrINS9_21NotificationResourcesENS_12RawPtrTraitsISE_EENS_21DefaultRefDerefTraitsISE_EEEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v3 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v2 = 3133;
  *((void *)v2 + 1) = v3;
  *((void *)v2 + 66) = (char *)v2 + 16;
  *((void *)v2 + 67) = 512;
  *((void *)v2 + 69) = 0;
  *((void *)v2 + 70) = 0;
  *((void *)v2 + 68) = 0;
  IPC::Encoder::encodeHeader(v2);
  uint64_t v8 = v2;
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v8);
  uint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection16GetNotificationsEN8WebPushD20PushClientConnectionES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSK_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB540;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection16GetNotificationsEN8WebPushD20PushClientConnectionES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSK_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB540;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection16GetNotificationsEN8WebPushD20PushClientConnectionES8_FvRKNS_3URLERKNS_6StringEONS_17CompletionHandlerIFvONSt12experimental15fundamentals_v38expectedINS_6VectorIN7WebCore16NotificationDataELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENSK_13ExceptionDataEEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3119;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(v4, a2);
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v10);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v5 = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A28F40);
    }
    unsigned char *v5 = 1;
    if (!*(_DWORD *)(a2 + 16))
    {
      uint64_t v8 = a1;
      uint64_t v9 = a2;
      return (_DWORD *)IPC::VectorArgumentCoder<false,WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v9);
    }
LABEL_14:
    uint64_t v8 = (IPC::Encoder *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)IPC::VectorArgumentCoder<false,WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v8, v9);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x198A28F20);
  }
  unsigned char *v5 = 0;
  if (*(_DWORD *)(a2 + 16) != 1) {
    goto LABEL_14;
  }

  return IPC::ArgumentCoder<WebCore::Exception,void>::encode(a1, (char *)a2);
}

unint64_t IPC::VectorArgumentCoder<false,WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(IPC::Encoder *a1, uint64_t a2)
{
  unint64_t result = IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a1, *(unsigned int *)(a2 + 12));
  uint64_t v5 = *(unsigned int *)(a2 + 12);
  if (v5)
  {
    uint64_t v6 = *(void *)a2;
    uint64_t v7 = v5 << 8;
    do
    {
      unint64_t result = (unint64_t)IPC::ArgumentCoder<WebCore::NotificationData,void>::encode(a1, v6);
      v6 += 256;
      v7 -= 256;
    }
    while (v7);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21RequestPushPermissionEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB568;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21RequestPushPermissionEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB568;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21RequestPushPermissionEN8WebPushD20PushClientConnectionES8_FvON7WebCore18SecurityOriginDataEONS_17CompletionHandlerIFvbEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3130;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v12 = v4;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v12);
    uint64_t result = (uint64_t)v12;
    char v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetAppBadgeForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB590;
  uint64_t v2 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[4];
    }
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetAppBadgeForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB590;
  uint64_t v3 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
    }
    else {
      --v3[4];
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC43handleMessageAsyncWithoutUsingIPCConnectionIN8Messages20PushClientConnection21GetAppBadgeForTestingEN8WebPushD20PushClientConnectionES8_FvONS_17CompletionHandlerIFvNSt3__18optionalIyEEEEEEEEvRNS2_7DecoderEONS_8FunctionIFvONS_9UniqueRefINS2_7EncoderEEEEEEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  uint64_t v5 = *(void *)(a1 + 8);
  *(_WORD *)uint64_t v4 = 3118;
  *((void *)v4 + 1) = v5;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 69) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 68) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::ArgumentCoder<std::optional<unsigned long long>,void>::encode<IPC::Encoder,std::optional<unsigned long long>>(v4, v10);
  (*(void (**)(void, IPC::Encoder **))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), &v11);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v18);
  if (!v19) {
    goto LABEL_11;
  }
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        uint64_t v12 = *a2;
        uint64_t v11 = a2[1];
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_9;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_9:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        uint64_t v5 = *a2;
        unint64_t v4 = a2[1];
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v8 = *v7;
  if (v8 < 2)
  {
    BOOL v9 = v8 != 0;
    uint64_t result = IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a2, (uint64_t)&v20);
    if (v21)
    {
      if (v19)
      {
        *(_OWORD *)a1 = v18;
        *(unsigned char *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 24) = v20;
        *(unsigned char *)(a1 + 40) = 1;
        return result;
      }
      __break(1u);
      goto LABEL_21;
    }
    goto LABEL_11;
  }
LABEL_10:
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (void *)a2[3];
  if (result)
  {
LABEL_21:
    if (v4) {
      (*(void (**)(void *, uint64_t))(*result + 16))(result, v5);
    }
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (void *)a2[3];
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    uint64_t v17 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v17();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v8);
  if (v9
    && (uint64_t result = IPC::Decoder::decode<WebKit::WebExtensionContentWorldType>(a2), (unsigned __int16)result >= 0x100u))
  {
    if (v9)
    {
      *(_OWORD *)a1 = v8;
      *(unsigned char *)(a1 + 16) = result;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String>>(uint64_t a1, uint64_t *a2)
{
  IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v17);
  if (!v18) {
    goto LABEL_11;
  }
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[2] - *a2;
  if (v4 <= v6)
  {
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        uint64_t v10 = *a2;
        uint64_t v11 = a2[1];
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v10 = 0;
      }
    }
LABEL_9:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (IPC::Decoder *)a2[3];
    if (!result) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
  BOOL v7 = (unsigned __int8 *)(v5 + v6);
  a2[2] = (uint64_t)(v7 + 1);
  if (!v5)
  {
    uint64_t v11 = v4;
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  unsigned int v8 = *v7;
  if (v8 >= 5) {
    goto LABEL_10;
  }
  uint64_t result = IPC::Decoder::decode<WTF::String>((IPC::Decoder *)a2, (uint64_t)&v19);
  if (v20)
  {
    uint64_t v11 = v18;
    if (v18)
    {
      *(_OWORD *)a1 = v17;
      *(unsigned char *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v19;
      *(unsigned char *)(a1 + 32) = 1;
      return result;
    }
    __break(1u);
LABEL_23:
    if (v11)
    {
      (*(void (**)(IPC::Decoder *, uint64_t, uint64_t))(*(void *)result + 16))(result, v10, v11);
      uint64_t v5 = *a2;
      unint64_t v4 = a2[1];
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
    }
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13 && v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v5);
    }
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 32) = 0;
  uint64_t v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (IPC::Decoder *)a2[3];
  if (result) {
    BOOL v15 = v14 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    BOOL v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (IPC::Decoder *)v16();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::RTCDataChannelIdentifier,unsigned long>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<WebCore::RTCDataChannelIdentifier>(a2, (uint64_t)&v18);
  if (v19)
  {
    unint64_t v5 = a2[1];
    uint64_t v6 = *a2;
    unint64_t v7 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
    if (v5 >= v7 && v5 - v7 > 7)
    {
      char v9 = (uint64_t *)(v6 + v7);
      a2[2] = (uint64_t)(v9 + 1);
      if (v6)
      {
        uint64_t v10 = *v9;
        *(_OWORD *)a1 = v18;
        *(void *)(a1 + 16) = v10;
        *(unsigned char *)(a1 + 24) = 1;
        return result;
      }
      uint64_t v11 = v5;
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v13 = a2[3];
      if (v13)
      {
        if (v5)
        {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v6, v5);
          uint64_t v12 = *a2;
          uint64_t v11 = a2[1];
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v12 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result) {
    BOOL v16 = v15 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    long long v17 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v17();
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::DeviceDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
    unint64_t v4 = *(WTF **)(a1 + 8);
    if (v4)
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v4, v3);
    }
    unint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages13RemoteAdapter13RequestDeviceEN6WebKit13RemoteAdapterES8_FvRKNS7_6WebGPU16DeviceDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESI_ONS_17CompletionHandlerIFvONS9_17SupportedFeaturesEONS9_15SupportedLimitsEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SN_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB5B8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages13RemoteAdapter13RequestDeviceEN6WebKit13RemoteAdapterES8_FvRKNS7_6WebGPU16DeviceDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESI_ONS_17CompletionHandlerIFvONS9_17SupportedFeaturesEONS9_15SupportedLimitsEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SN_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB5B8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages13RemoteAdapter13RequestDeviceEN6WebKit13RemoteAdapterES8_FvRKNS7_6WebGPU16DeviceDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEESI_ONS_17CompletionHandlerIFvONS9_17SupportedFeaturesEONS9_15SupportedLimitsEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSL_SN_EE4callESL_SN_(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v9 = a1;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(v9 + 16)) {
    goto LABEL_29;
  }
  uint64_t v3 = *(void *)(v9 + 24);
  uint64_t v4 = *(void *)(v9 + 8);
  if (!*(unsigned char *)(v3 + 120)) {
    goto LABEL_22;
  }
  uint64_t v11 = *(void *)(v3 + 56);
  uint64_t v10 = *(void *)(v3 + 64);
  unint64_t v12 = *(void *)(v10 + 8);
  if (v11 == 1)
  {
    if (v12 < 0x100)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      unint64_t v25 = 0;
      goto LABEL_15;
    }
    unint64_t v9 = 0;
    uint64_t v13 = *(void *)(v10 + 16);
  }
  else
  {
    unint64_t v9 = v12 - 256;
    if (v12 < 0x100) {
      goto LABEL_29;
    }
    uint64_t v13 = *(void *)(v10 + 16);
    if (v11)
    {
      BOOL v14 = v9 >= v11 - 1;
      unint64_t v9 = v11 - 1;
      if (!v14) {
        goto LABEL_29;
      }
    }
  }
  unint64_t v5 = v13 + 256;
  uint64_t v24 = (IPC::Encoder *)(v13 + 256);
  unint64_t v25 = v9;
  unint64_t v26 = 0;
  uint64_t v6 = (_WORD *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
  BOOL v14 = (unint64_t)v6 >= v13 + 256;
  unint64_t v15 = (unint64_t)v6 - v13 - 256;
  if (!v14) {
    goto LABEL_15;
  }
  if (v15 > 0xFFFFFFFFFFFFFFFDLL || v15 + 2 > v9) {
    goto LABEL_30;
  }
  *(_WORD *)(v5 + v15) = 2872;
  unint64_t v26 = v15 + 2;
LABEL_15:
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::StreamConnectionEncoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(&v24, a2);
  uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode((uint64_t *)&v24, a3);
  if (v25) {
    return result;
  }
  unint64_t v18 = (unint64_t)v6 - v5;
  if ((unint64_t)v6 >= v5 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v9) {
    _WORD *v6 = 2870;
  }
LABEL_22:
  char v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v20 = 2872;
  *((void *)v20 + 1) = v4;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  uint64_t v24 = v20;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v20, a2);
  IPC::ArgumentCoder<WebKit::WebGPU::SupportedLimits,void>::encode(v20, a3);
  if (*(unsigned char *)(v3 + 120)) {
    return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v3 + 128), v20);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
  uint64_t result = v24;
  uint64_t v24 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

void WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::didReceiveMessage(WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager *this, atomic_uchar *volatile *a2, IPC::Decoder *a3)
{
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2C4:
      uint64_t v6 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v7)
      {
        uint64_t v8 = v6;
        uint64_t v9 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
        if (v10)
        {
          uint64_t v35 = v9;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v36, a2);
          uint64_t v11 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
          *(void *)uint64_t v11 = &unk_1EE9BB6A0;
          *((void *)v11 + 1) = v35;
          unint64_t v12 = v36;
          uint64_t v36 = 0;
          *((void *)v11 + 2) = v12;
          char v40 = v11;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v36);
          WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::createUnit((uint64_t)this, v8, (uint64_t *)&v40);
          uint64_t v13 = v40;
          char v40 = 0;
          if (v13) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v13 + 8))(v13);
          }
        }
      }
      return;
    case 0x2C5:
      uint64_t v14 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v15)
      {
        WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::deleteUnit((uint64_t *)this, v14);
      }
      return;
    case 0x2C6:
      uint64_t v16 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v17 && (uint64_t v18 = v16, IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v40), (_BYTE)v41))
      {
        uint64_t v36 = v40;
        LOBYTE(v37) = 1;
        WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::setAudioOutputDevice((uint64_t)this, v18, (uint64_t)&v36);
        if ((_BYTE)v37)
        {
          char v20 = v36;
          uint64_t v36 = 0;
          if (v20)
          {
            if (*(_DWORD *)v20 == 2) {
              WTF::StringImpl::destroy(v20, v19);
            }
            else {
              *(_DWORD *)v20 -= 2;
            }
          }
        }
      }
      else
      {
        uint64_t v27 = *(void *)a3;
        uint64_t v28 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v29 = *((void *)a3 + 3);
        if (v29) {
          BOOL v30 = v28 == 0;
        }
        else {
          BOOL v30 = 1;
        }
        if (!v30) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
        }
      }
      return;
    case 0x2C7:
      uint64_t v21 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
      if (v22)
      {
        uint64_t v23 = v21;
        IPC::Decoder::decode<WebKit::ConsumerSharedCARingBufferHandle>(a3, (uint64_t)&v40);
        if (v42)
        {
          IPC::Decoder::decode<IPC::Semaphore>(a3, v43);
          if (v45)
          {
            if (!v42)
            {
              __break(1u);
              JUMPOUT(0x198A2A278);
            }
            uint64_t v34 = v23;
            WTF::MachSendRight::MachSendRight();
            long long v37 = v41;
            WTF::MachSendRight::MachSendRight();
            int v24 = v44;
            int v44 = 0;
            v38[1] = v24;
            char v39 = 1;
            if (v45)
            {
              IPC::Semaphore::destroy((IPC::Semaphore *)v43);
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v43);
            }
          }
          else
          {
            LOBYTE(v34) = 0;
            char v39 = 0;
          }
          if (v42) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v40);
          }
        }
        else
        {
          LOBYTE(v34) = 0;
          char v39 = 0;
        }
        if (v39) {
          goto LABEL_36;
        }
      }
      else
      {
        LOBYTE(v34) = 0;
        char v39 = 0;
      }
      uint64_t v31 = *(void *)a3;
      uint64_t v32 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v33 = *((void *)a3 + 3);
      if (!v33) {
        return;
      }
      if (!v32) {
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
      if (!v39) {
        return;
      }
LABEL_36:
      WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::startUnit((uint64_t)this, v34, (uint64_t)&v36, (IPC::Semaphore *)v38);
      if (v39)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v38);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v38);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v36);
      }
      return;
    case 0x2C8:
      uint64_t v25 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v26)
      {
        WebKit::RemoteAudioMediaStreamTrackRendererInternalUnitManager::stopUnit((uint64_t)this, v25);
      }
      return;
    default:
      return;
  }
}

atomic_uchar *volatile **WebKit::RemoteBarcodeDetector::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 727 && *(unsigned char *)(*(void *)(*((void *)this[4] + 1) + 48) + 397) != 0)
  {
    uint64_t v5 = (uint64_t)this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v15, a2 + 5);
    uint64_t v6 = v15;
    uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    if (v8)
    {
      uint64_t v9 = v7;
      uint64_t v10 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v11)
      {
        uint64_t v16 = v10;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v17, v6);
        unint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x18);
        *unint64_t v12 = &unk_1EE9BB6C8;
        v12[1] = v16;
        uint64_t v13 = v17;
        char v17 = 0;
        uint64_t v18 = v12;
        v12[2] = v13;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v17);
        WebKit::RemoteBarcodeDetector::detect(v5, v9, (uint64_t *)&v18);
        uint64_t v14 = (uint64_t)v18;
        uint64_t v18 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteBindGroupLayout::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 729)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
      if (v14)
      {
        WebKit::RemoteBindGroupLayout::setLabel(v4, (uint64_t *)&v13);
        if (v14)
        {
          char v11 = v13;
          uint64_t v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      uint64_t v9 = (WTF::StringImpl **)&v12;
    }
    else
    {
      if (v5 != 728) {
        return this;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
      uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
      uint64_t v7 = (_DWORD *)(v6 + 8);
      ++*(_DWORD *)(v6 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v6, *(void *)(v4 + 48));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
      uint64_t v9 = &v13;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteBindGroup::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    switch(v5)
    {
      case 732:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v15, a2 + 5);
        uint64_t v9 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v10) {
          WebKit::RemoteBindGroup::updateExternalTextures(v4, v9);
        }
        break;
      case 731:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v14, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v15);
        if (v16)
        {
          WebKit::RemoteBindGroup::setLabel(v4, (uint64_t *)&v15);
          if (v16)
          {
            uint64_t v13 = v15;
            char v15 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                WTF::StringImpl::destroy(v13, v12);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
        }
        char v11 = (WTF::StringImpl **)&v14;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v11);
      case 730:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v15, a2 + 5);
        uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
        uint64_t v7 = (_DWORD *)(v6 + 8);
        ++*(_DWORD *)(v6 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v6, *(void *)(v4 + 48));
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
        break;
      default:
        return this;
    }
    char v11 = &v15;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v11);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteBuffer::didReceiveStreamMessage(atomic_uchar *volatile **this, IPC::StreamServerConnection *a2, atomic_uchar *volatile **a3)
{
  if (!*(unsigned char *)(*((void *)this[5] + 1) + 78)) {
    return this;
  }
  uint64_t v3 = a3;
  int v5 = this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x2DD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v77, (uint64_t **)a2 + 5);
      uint64_t v6 = v77;
      IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>((IPC::Decoder *)v3, (uint64_t)&v84);
      if (!v87)
      {
        LOBYTE(v79) = 0;
        unsigned __int8 v83 = 0;
        goto LABEL_57;
      }
      uint64_t v7 = v3[1];
      char v8 = *v3;
      unint64_t v9 = (((unint64_t)v3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v3;
      if ((unint64_t)v7 >= v9 && (unint64_t)v7 - v9 > 7)
      {
        char v11 = (void *)((char *)v8 + v9);
        v3[2] = (atomic_uchar *volatile *)(v11 + 1);
        if (!v8)
        {
          uint64_t v73 = v7;
          uint64_t v74 = 0;
          goto LABEL_82;
        }
        unint64_t v12 = *v11;
        LOBYTE(v79) = 0;
        char v81 = 0;
        if (v86)
        {
          WTF::MachSendRight::MachSendRight();
          long long v80 = v85;
          char v81 = 1;
        }
        unint64_t v82 = v12;
        int v13 = 1;
        goto LABEL_13;
      }
      while (1)
      {
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        unsigned int *v3 = 0;
        v3[1] = 0;
        uint64_t v75 = v3[3];
        if (v75)
        {
          if (v7)
          {
            (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *, atomic_uchar *volatile *))*v75
             + 2))(v75, v8, v7);
            uint64_t v74 = *v3;
            uint64_t v73 = v3[1];
          }
          else
          {
            uint64_t v73 = 0;
            uint64_t v74 = 0;
          }
        }
LABEL_82:
        unsigned int *v3 = 0;
        v3[1] = 0;
        uint64_t v76 = v3[3];
        if (v76 && v73) {
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v76 + 2))(v76, v74);
        }
        int v13 = 0;
        LOBYTE(v79) = 0;
LABEL_13:
        unsigned __int8 v83 = v13;
        if (v87 && v86)
        {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v84);
          int v13 = v83;
        }
        if (!v13)
        {
LABEL_57:
          uint64_t v55 = *v3;
          uint64_t v56 = v3[1];
          unsigned int *v3 = 0;
          v3[1] = 0;
          char v57 = v3[3];
          if (!v57) {
            goto LABEL_58;
          }
          if (!v56) {
            goto LABEL_58;
          }
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v57 + 2))(v57, v55);
          if (!v83) {
            goto LABEL_58;
          }
        }
        char v14 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
        if (!v15) {
          goto LABEL_21;
        }
        uint64_t v84 = v14;
        uint64_t v3 = &v85;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, v6);
        char v16 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        uint64_t *v16 = (uint64_t)&unk_1EE9BB718;
        v16[1] = (uint64_t)v84;
        char v17 = v85;
        uint64_t v85 = 0;
        v16[2] = (uint64_t)v17;
        char v78 = v16;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v85);
        char v8 = (atomic_uchar *volatile *)v83;
        if (v83)
        {
          WebKit::RemoteBuffer::copy((uint64_t)v5, (uint64_t)&v79, v82, (uint64_t *)&v78);
          uint64_t v18 = v78;
          char v78 = 0;
          if (v18) {
            (*(void (**)(uint64_t *))(*v18 + 8))(v18);
          }
LABEL_21:
          if (v83)
          {
            if (v81) {
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v79);
            }
          }
LABEL_58:
          char v54 = (uint64_t **)&v77;
          return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v54);
        }
        __break(1u);
      }
    case 0x2DE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v79, (uint64_t **)a2 + 5);
      WebKit::RemoteBuffer::destroy((WebKit::RemoteBuffer *)v5);
      goto LABEL_55;
    case 0x2DF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v79, (uint64_t **)a2 + 5);
      uint64_t v33 = *((void *)v5[3] + 1);
      uint64_t v34 = (_DWORD *)(v33 + 8);
      ++*(_DWORD *)(v33 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v33, (uint64_t)v5[6]);
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v34, v35);
      goto LABEL_55;
    case 0x2E0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v78, (uint64_t **)a2 + 5);
      uint64_t v36 = v3[1];
      long long v37 = *v3;
      unint64_t v38 = (char *)v3[2] - (char *)*v3;
      if ((unint64_t)v36 <= v38)
      {
        uint64_t v58 = 0;
        char v59 = 0;
        unsigned int *v3 = 0;
        v3[1] = 0;
        uint64_t v60 = v3[3];
        if (v60)
        {
          if (v36)
          {
            (*((void (**)(atomic_uchar *volatile *))*v60 + 2))(v60);
            char v59 = *v3;
            uint64_t v58 = v3[1];
          }
          else
          {
            uint64_t v58 = 0;
            char v59 = 0;
          }
        }
        goto LABEL_65;
      }
      char v39 = (atomic_uchar *volatile *)v78;
      char v40 = (unsigned __int8 *)v37 + v38;
      uint64_t v41 = (uint64_t)v37 + v38 + 1;
      v3[2] = (atomic_uchar *volatile *)v41;
      if (!v37)
      {
        uint64_t v58 = v36;
        char v59 = 0;
LABEL_65:
        uint64_t v36 = 0;
        long long v37 = 0;
        unsigned int *v3 = 0;
        v3[1] = 0;
        char v61 = v3[3];
        if (v61)
        {
          if (v58)
          {
            (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *, atomic_uchar *volatile *))*v61
             + 2))(v61, v59, v58);
            long long v37 = *v3;
            uint64_t v36 = v3[1];
          }
          else
          {
            uint64_t v36 = 0;
            long long v37 = 0;
          }
        }
LABEL_66:
        unsigned int *v3 = 0;
        v3[1] = 0;
        uint64_t v62 = v3[3];
        if (v62) {
          goto LABEL_93;
        }
        goto LABEL_74;
      }
      unint64_t v42 = *v40;
      if (v42 >= 4) {
        goto LABEL_66;
      }
      unint64_t v43 = ((v41 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v37;
      if ((unint64_t)v36 < v43 || (unint64_t)v36 - v43 <= 7)
      {
        unsigned int *v3 = 0;
        v3[1] = 0;
        uint64_t v69 = v3[3];
        if (v69)
        {
          (*((void (**)(atomic_uchar *volatile *))*v69 + 2))(v69);
          long long v37 = *v3;
          uint64_t v36 = v3[1];
          uint64_t v62 = v3[3];
          unsigned int *v3 = 0;
          v3[1] = 0;
          if (v62)
          {
LABEL_93:
            if (v36) {
              (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v62 + 2))(v62, v37);
            }
          }
        }
LABEL_74:
        uint64_t v70 = *v3;
        uint64_t v71 = v3[1];
        unsigned int *v3 = 0;
        v3[1] = 0;
        unint64_t v72 = v3[3];
        if (v72 && v71) {
          (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v72 + 2))(v72, v70);
        }
        goto LABEL_75;
      }
      char v45 = (uint64_t *)((char *)v37 + v43);
      uint64_t v46 = *v45;
      v3[2] = (atomic_uchar *volatile *)(v45 + 1);
      IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v3, (uint64_t)&v79);
      if (!v81) {
        goto LABEL_74;
      }
      uint64_t v47 = v79;
      char v48 = v80;
      unint64_t v49 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v3);
      if (v50)
      {
        long long v79 = v49;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v80, v39);
        char v51 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *char v51 = (uint64_t)&unk_1EE9BB6F0;
        v51[1] = (uint64_t)v79;
        unsigned __int8 v52 = v80;
        long long v80 = 0;
        void v51[2] = (uint64_t)v52;
        uint64_t v84 = v51;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v80);
        WebKit::RemoteBuffer::mapAsync((uint64_t)v5, v42, v46, (uint64_t)v47, (uint64_t)v48, (uint64_t *)&v84);
        char v53 = v84;
        uint64_t v84 = 0;
        if (v53) {
          (*(void (**)(uint64_t *))(*v53 + 8))(v53);
        }
      }
LABEL_75:
      char v54 = &v78;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v54);
    case 0x2E1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v84, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v3, (uint64_t)&v79);
      if ((_BYTE)v80)
      {
        WebKit::RemoteBuffer::setLabel((uint64_t)v5, (uint64_t *)&v79);
        if ((_BYTE)v80)
        {
          uint64_t v32 = v79;
          long long v79 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v31);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
        }
      }
      char v54 = &v84;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v54);
    case 0x2E2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v79, (uint64_t **)a2 + 5);
      WebKit::RemoteBuffer::unmap((uint64_t)v5);
LABEL_55:
      char v54 = (uint64_t **)&v79;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v54);
    default:
      if (*((_WORD *)a3 + 25) != 3627) {
        return this;
      }
      this = (atomic_uchar *volatile **)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a3);
      char v20 = v19;
      if (!v19) {
        return this;
      }
      uint64_t v21 = v3[1];
      char v22 = *v3;
      unint64_t v23 = (((unint64_t)v3[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v3;
      if ((unint64_t)v21 >= v23 && (unint64_t)v21 - v23 > 7)
      {
        uint64_t v25 = (uint64_t *)((char *)v22 + v23);
        v3[2] = (atomic_uchar *volatile *)(v25 + 1);
        if (v22)
        {
          char v26 = this;
          uint64_t v27 = *v25;
          IPC::Decoder::decode<std::optional<unsigned long long>>((IPC::Decoder *)v3, (uint64_t)&v79);
          if (v81)
          {
            uint64_t v28 = v79;
            uint64_t v29 = v80;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v79, (uint64_t **)a2 + 5);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v79);
            atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
            uint64_t v30 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v30 = &unk_1EE9BB740;
            *(void *)(v30 + 8) = v26;
            *(unsigned char *)(v30 + 16) = v20;
            *(_DWORD *)(v30 + 17) = v84;
            *(_DWORD *)(v30 + 20) = *(_DWORD *)((char *)&v84 + 3);
            *(void *)(v30 + 24) = a2;
            long long v79 = (WTF::StringImpl *)v30;
            WebKit::RemoteBuffer::getMappedRange((uint64_t)v5, v27, (uint64_t)v28, (uint64_t)v29, (uint64_t)&v79);
            this = (atomic_uchar *volatile **)v79;
            long long v79 = 0;
            if (this) {
              return (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*this + 1))(this);
            }
            return this;
          }
LABEL_70:
          uint64_t v67 = *v3;
          uint64_t v68 = v3[1];
          unsigned int *v3 = 0;
          v3[1] = 0;
          this = (atomic_uchar *volatile **)v3[3];
          if (this && v68) {
            return (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **, atomic_uchar *volatile *))*this
          }
                                               + 2))(this, v67);
          return this;
        }
        char v63 = v21;
        char v64 = 0;
      }
      else
      {
        char v63 = 0;
        char v64 = 0;
        unsigned int *v3 = 0;
        v3[1] = 0;
        char v65 = v3[3];
        if (v65)
        {
          if (v21)
          {
            (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *, atomic_uchar *volatile *))*v65
             + 2))(v65, v22, v21);
            char v64 = *v3;
            char v63 = v3[1];
          }
          else
          {
            char v63 = 0;
            char v64 = 0;
          }
        }
      }
      unsigned int *v3 = 0;
      v3[1] = 0;
      uint64_t v66 = v3[3];
      if (v66 && v63) {
        (*((void (**)(atomic_uchar *volatile *, atomic_uchar *volatile *))*v66 + 2))(v66, v64);
      }
      goto LABEL_70;
  }
}

atomic_uchar *volatile **WebKit::RemoteCommandBuffer::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 762)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
      if (v14)
      {
        WebKit::RemoteCommandBuffer::setLabel(v4, (uint64_t *)&v13);
        if (v14)
        {
          char v11 = v13;
          int v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      unint64_t v9 = (WTF::StringImpl **)&v12;
    }
    else
    {
      if (v5 != 761) {
        return this;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
      uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
      uint64_t v7 = (_DWORD *)(v6 + 8);
      ++*(_DWORD *)(v6 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v6, *(void *)(v4 + 48));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
      unint64_t v9 = &v13;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteCommandEncoder::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[8] + 1) + 78))
  {
    uint64_t v4 = this;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x2FB:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v147, a2 + 5);
        unint64_t v5 = *((void *)a3 + 1);
        uint64_t v6 = *(void *)a3;
        unint64_t v7 = *((void *)a3 + 2) - *(void *)a3;
        if (v5 <= v7)
        {
          unint64_t v91 = 0;
          uint64_t v92 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v93 = *((void *)a3 + 3);
          if (v93)
          {
            if (v5)
            {
              (*(void (**)(uint64_t))(*(void *)v93 + 16))(v93);
              uint64_t v92 = *(void *)a3;
              unint64_t v91 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v91 = 0;
              uint64_t v92 = 0;
            }
          }
        }
        else
        {
          char v8 = (unsigned char *)(v6 + v7);
          *((void *)a3 + 2) = v8 + 1;
          if (v6)
          {
            unsigned int v9 = *v8;
            if (v9 >= 2) {
              goto LABEL_204;
            }
            if (!*v8)
            {
              char v10 = 0;
LABEL_125:
              uint64_t v72 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
              v139[0] = 0;
              uint64_t v74 = v73;
              if ((_BYTE)v73)
              {
                v139[32] = 0;
                if (v9)
                {
                  *(_OWORD *)&v139[8] = *(_OWORD *)v131;
                  *(void *)uint64_t v139 = v10;
                  *(void *)&v139[24] = v132;
                  v139[32] = 1;
                  char v10 = 0;
                }
                *(void *)&long long v140 = v72;
                int v75 = 1;
              }
              else
              {
                int v75 = 0;
              }
              BYTE8(v140) = v75;
              if (v9) {
                BOOL v76 = v10 == 0;
              }
              else {
                BOOL v76 = 1;
              }
              if (!v76)
              {
                if (*(_DWORD *)v10 == 2) {
                  WTF::StringImpl::destroy(v10, v73);
                }
                else {
                  *(_DWORD *)v10 -= 2;
                }
              }
              if (v74)
              {
LABEL_173:
                if (!v75) {
                  goto LABEL_213;
                }
                WebKit::RemoteCommandEncoder::beginComputePass(v4, (uint64_t)v139, v140);
                if (!BYTE8(v140) || !v139[32]) {
                  goto LABEL_213;
                }
                goto LABEL_176;
              }
LABEL_207:
              uint64_t v99 = *(void *)a3;
              uint64_t v100 = *((void *)a3 + 1);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              uint64_t v101 = *((void *)a3 + 3);
              if (v101 && v100) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v101 + 16))(v101, v99);
              }
              goto LABEL_173;
            }
            IPC::ArgumentCoder<WebKit::WebGPU::ComputePassDescriptor,void>::decode(a3, (uint64_t)v139);
            if (v139[32])
            {
              *(_OWORD *)char v131 = *(_OWORD *)&v139[8];
              char v10 = *(WTF::StringImpl **)v139;
              uint64_t v132 = *(void *)&v139[24];
              goto LABEL_125;
            }
            goto LABEL_203;
          }
          unint64_t v91 = v5;
          uint64_t v92 = 0;
        }
        unint64_t v5 = 0;
        uint64_t v6 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v94 = *((void *)a3 + 3);
        if (!v94) {
          goto LABEL_204;
        }
        if (!v91)
        {
          unint64_t v5 = 0;
          uint64_t v6 = 0;
LABEL_204:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v95 = *((void *)a3 + 3);
          if (v95 && v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v95 + 16))(v95, v6);
          }
          uint64_t v96 = *(void *)a3;
          uint64_t v97 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v98 = *((void *)a3 + 3);
          if (v98 && v97) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v98 + 16))(v98, v96);
          }
          int v75 = 0;
          v139[0] = 0;
          BYTE8(v140) = 0;
          goto LABEL_207;
        }
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v94 + 16))(v94, v92, v91);
LABEL_203:
        uint64_t v6 = *(void *)a3;
        unint64_t v5 = *((void *)a3 + 1);
        goto LABEL_204;
      case 0x2FC:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v147, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::RenderPassDescriptor,void>::decode(a3, (uint64_t)v131);
        if (!v138
          && ((uint64_t v62 = *(void **)a3,
               uint64_t v102 = *((void *)a3 + 1),
               *(void *)a3 = 0,
               *((void *)a3 + 1) = 0,
               (uint64_t v103 = *((void *)a3 + 3)) == 0)
           || !v102
           || ((*(void (**)(uint64_t, void *))(*(void *)v103 + 16))(v103, v62), !v138))
          || (uint64_t v61 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
              !(_BYTE)v62))
        {
          std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v131, v62);
          goto LABEL_212;
        }
        uint64_t v14 = v138;
        if (!v138) {
          goto LABEL_181;
        }
        uint64_t v63 = v61;
        long long v64 = *(_OWORD *)v131;
        v131[0] = 0;
        v131[1] = 0;
        *(_OWORD *)uint64_t v139 = v64;
        *(void *)&long long v64 = v132;
        uint64_t v132 = 0;
        *(void *)&v139[16] = v64;
        long long v141 = v135;
        long long v142 = v136;
        *(_OWORD *)uint64_t v143 = v137[0];
        *(_OWORD *)&v143[9] = *(_OWORD *)((char *)v137 + 9);
        *(_OWORD *)&v139[24] = v133;
        long long v140 = v134;
        uint64_t v144 = v61;
        LOBYTE(v145) = 1;
        std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v131, v62);
        WebKit::RemoteCommandEncoder::beginRenderPass(v4, (uint64_t)v139, v63);
        if ((_BYTE)v145)
        {
          WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v139[8], v65);
          goto LABEL_176;
        }
        goto LABEL_213;
      case 0x2FD:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v131, a2 + 5);
        uint64_t v36 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v37) {
          goto LABEL_229;
        }
        unint64_t v38 = *((void *)a3 + 1);
        uint64_t v39 = *(void *)a3;
        unint64_t v40 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
        if (v38 < v40 || v38 - v40 <= 7)
        {
          unint64_t v116 = 0;
          uint64_t v117 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v118 = *((void *)a3 + 3);
          if (v118)
          {
            if (v38)
            {
              (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v118 + 16))(v118, v39, v38);
              uint64_t v117 = *(void *)a3;
              unint64_t v116 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v116 = 0;
              uint64_t v117 = 0;
            }
          }
          goto LABEL_228;
        }
        unint64_t v42 = (uint64_t *)(v39 + v40);
        *((void *)a3 + 2) = v42 + 1;
        if (!v39)
        {
          unint64_t v116 = v38;
          uint64_t v117 = 0;
LABEL_228:
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v119 = *((void *)a3 + 3);
          if (v119 && v116) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v119 + 16))(v119, v117);
          }
          goto LABEL_229;
        }
        uint64_t v43 = v36;
        uint64_t v44 = *v42;
        IPC::Decoder::decode<std::optional<unsigned long long>>(a3, (uint64_t)v139);
        if (v139[16])
        {
          WebKit::RemoteCommandEncoder::clearBuffer((uint64_t)v4, v43, v44, *(uint64_t *)v139, *(uint64_t *)&v139[8]);
          goto LABEL_230;
        }
LABEL_229:
        uint64_t v120 = *(void *)a3;
        uint64_t v121 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v122 = *((void *)a3 + 3);
        if (v122 && v121) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 16))(v122, v120);
        }
LABEL_230:
        unsigned __int8 v77 = v131;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v77);
      case 0x2FE:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v139, a2 + 5);
        uint64_t v45 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v46) {
          goto LABEL_235;
        }
        unint64_t v13 = *((void *)a3 + 1);
        uint64_t v14 = *(void *)a3;
        unint64_t v47 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
        if (v13 < v47 || v13 - v47 <= 7) {
          goto LABEL_182;
        }
        unint64_t v49 = (uint64_t *)(v14 + v47);
        *((void *)a3 + 2) = v49 + 1;
        if (!v14) {
          goto LABEL_262;
        }
        uint64_t v50 = v45;
        uint64_t v51 = *v49;
        uint64_t v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v53) {
          goto LABEL_235;
        }
        unint64_t v21 = *((void *)a3 + 1);
        uint64_t v22 = *(void *)a3;
        unint64_t v54 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
        if (v21 < v54 || v21 - v54 <= 7)
        {
LABEL_185:
          unint64_t v83 = 0;
          uint64_t v84 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v85 = *((void *)a3 + 3);
          if (v85)
          {
            if (v21)
            {
              (*(void (**)(uint64_t))(*(void *)v85 + 16))(v85);
              uint64_t v84 = *(void *)a3;
              unint64_t v83 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v83 = 0;
              uint64_t v84 = 0;
            }
          }
        }
        else
        {
          uint64_t v55 = v22 + v54;
          *((void *)a3 + 2) = v55 + 8;
          if (v22)
          {
            unint64_t v56 = ((v55 + 15) & 0xFFFFFFFFFFFFFFF8) - v22;
            if (v21 >= v56 && v21 - v56 > 7)
            {
              *((void *)a3 + 2) = ((v55 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
              WebKit::RemoteCommandEncoder::copyBufferToBuffer((uint64_t)v4, v50, v51, v52);
              goto LABEL_236;
            }
LABEL_189:
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v87 = *((void *)a3 + 3);
            if (v87)
            {
              if (v21)
              {
                (*(void (**)(uint64_t))(*(void *)v87 + 16))(v87);
                uint64_t v80 = *(void *)a3;
                unint64_t v79 = *((void *)a3 + 1);
                uint64_t v82 = *((void *)a3 + 3);
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                if (v82)
                {
LABEL_192:
                  if (v79) {
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v80);
                  }
                }
              }
            }
LABEL_235:
            uint64_t v127 = *(void *)a3;
            uint64_t v128 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v129 = *((void *)a3 + 3);
            if (v129 && v128) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v129 + 16))(v129, v127);
            }
LABEL_236:
            unsigned __int8 v77 = (WTF::StringImpl **)v139;
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v77);
          }
LABEL_263:
          unint64_t v83 = v21;
          uint64_t v84 = v22;
        }
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v86 = *((void *)a3 + 3);
        if (v86 && v83) {
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v86 + 16))(v86, v84, v83);
        }
        goto LABEL_235;
      case 0x2FF:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v130, a2 + 5);
        IPC::Decoder::decode<WebKit::WebGPU::ImageCopyBuffer>((uint64_t)&v147, a3);
        if ((_BYTE)v149)
        {
          IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)v131);
          if ((_BYTE)v135)
          {
            IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(a3, v152);
            if (v154)
            {
              uint64_t v14 = v149;
              if (!(_BYTE)v149) {
                goto LABEL_181;
              }
              uint64_t v14 = v135;
              if (!(_BYTE)v135) {
                goto LABEL_181;
              }
              *(_OWORD *)uint64_t v139 = v147;
              *(_OWORD *)&v139[16] = v148;
              std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)&v139[32], (uint64_t *)v131);
              v143[0] = 0;
              *(_DWORD *)&v143[16] = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v143, (uint64_t)v152);
              v143[24] = 1;
              if (v154 && v153 != -1) {
                ((void (*)(char *, unsigned char *))off_1EE9BB768[v153])(&v155, v152);
              }
            }
            else
            {
              v139[0] = 0;
              v143[24] = 0;
            }
            if ((_BYTE)v135 && (_BYTE)v134 && DWORD2(v133) != -1) {
              ((void (*)(unsigned char *, uint64_t *))off_1EE9BB758[DWORD2(v133)])(v152, &v132);
            }
          }
          else
          {
            v139[0] = 0;
            v143[24] = 0;
          }
          if (v143[24])
          {
LABEL_143:
            WebKit::RemoteCommandEncoder::copyBufferToTexture((uint64_t)v4, (uint64_t *)v139, (uint64_t)&v139[32], (uint64_t)v143);
            if (v143[24])
            {
              if (*(_DWORD *)&v143[16] != -1) {
                ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9BB768[*(unsigned int *)&v143[16]])(v131, v143);
              }
              *(_DWORD *)&v143[16] = -1;
              if ((_BYTE)v142)
              {
                uint64_t v70 = DWORD2(v141);
                if (DWORD2(v141) != -1)
                {
                  uint64_t v71 = (char *)&v140 + 8;
                  goto LABEL_169;
                }
              }
            }
LABEL_170:
            unsigned __int8 v77 = (WTF::StringImpl **)&v130;
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v77);
          }
        }
        else
        {
          v139[0] = 0;
          v143[24] = 0;
        }
        uint64_t v88 = *(void *)a3;
        uint64_t v89 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v90 = *((void *)a3 + 3);
        if (!v90) {
          goto LABEL_170;
        }
        if (!v89) {
          goto LABEL_170;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v90 + 16))(v90, v88);
        if (!v143[24]) {
          goto LABEL_170;
        }
        goto LABEL_143;
      case 0x300:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v130, a2 + 5);
        IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)v131);
        if ((_BYTE)v135)
        {
          IPC::Decoder::decode<WebKit::WebGPU::ImageCopyBuffer>((uint64_t)&v147, a3);
          if ((_BYTE)v149
            && (IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(a3, v152), v154))
          {
            uint64_t v14 = v135;
            if (!(_BYTE)v135) {
              goto LABEL_181;
            }
            uint64_t v14 = v149;
            if (!(_BYTE)v149) {
              goto LABEL_181;
            }
            std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)v139, (uint64_t *)v131);
            long long v141 = v147;
            long long v142 = v148;
            v143[0] = 0;
            *(_DWORD *)&v143[16] = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v143, (uint64_t)v152);
            v143[24] = 1;
            if (v154 && v153 != -1) {
              ((void (*)(char *, unsigned char *))off_1EE9BB768[v153])(&v155, v152);
            }
          }
          else
          {
            v139[0] = 0;
            v143[24] = 0;
          }
          if ((_BYTE)v135 && (_BYTE)v134 && DWORD2(v133) != -1) {
            ((void (*)(long long *, uint64_t *))off_1EE9BB758[DWORD2(v133)])(&v147, &v132);
          }
        }
        else
        {
          v139[0] = 0;
          v143[24] = 0;
        }
        if (v143[24]
          || (uint64_t v110 = *(void *)a3,
              uint64_t v111 = *((void *)a3 + 1),
              *(void *)a3 = 0,
              *((void *)a3 + 1) = 0,
              (uint64_t v112 = *((void *)a3 + 3)) != 0)
          && v111
          && ((*(void (**)(uint64_t, uint64_t))(*(void *)v112 + 16))(v112, v110), v143[24]))
        {
          WebKit::RemoteCommandEncoder::copyTextureToBuffer((uint64_t)v4, (uint64_t)v139, (uint64_t *)&v141, (uint64_t)v143);
          if (v143[24])
          {
            if (*(_DWORD *)&v143[16] != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9BB768[*(unsigned int *)&v143[16]])(v131, v143);
            }
            *(_DWORD *)&v143[16] = -1;
            if ((_BYTE)v140)
            {
              uint64_t v70 = *(unsigned int *)&v139[32];
              if (*(_DWORD *)&v139[32] != -1)
              {
                uint64_t v71 = &v139[16];
                goto LABEL_169;
              }
            }
          }
        }
        goto LABEL_170;
      case 0x301:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v130, a2 + 5);
        IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)&v147);
        if (v151)
        {
          IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)a3, (uint64_t)v131);
          if ((_BYTE)v135)
          {
            IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(a3, v152);
            if (v154)
            {
              uint64_t v14 = v151;
              if (!v151 || (uint64_t v14 = v135, !(_BYTE)v135))
              {
LABEL_181:
                __break(1u);
LABEL_182:
                unint64_t v79 = 0;
                uint64_t v80 = 0;
                *(void *)a3 = 0;
                *((void *)a3 + 1) = 0;
                uint64_t v81 = *((void *)a3 + 3);
                if (v81)
                {
                  if (v13)
                  {
                    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v81 + 16))(v81, v14, v13);
                    uint64_t v80 = *(void *)a3;
                    unint64_t v79 = *((void *)a3 + 1);
                  }
                  else
                  {
                    unint64_t v79 = 0;
                    uint64_t v80 = 0;
                  }
                }
                goto LABEL_183;
              }
              std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)v139, (uint64_t *)&v147);
              std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)&v141, (uint64_t *)v131);
              v143[24] = 0;
              int v145 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v143[24], (uint64_t)v152);
              char v146 = 1;
              if (v154 && v153 != -1) {
                ((void (*)(char *, unsigned char *))off_1EE9BB768[v153])(&v155, v152);
              }
            }
            else
            {
              v139[0] = 0;
              char v146 = 0;
            }
            if ((_BYTE)v135 && (_BYTE)v134 && DWORD2(v133) != -1) {
              ((void (*)(unsigned char *, uint64_t *))off_1EE9BB758[DWORD2(v133)])(v152, &v132);
            }
          }
          else
          {
            v139[0] = 0;
            char v146 = 0;
          }
          if (v151 && v150 && v149 != -1) {
            ((void (*)(WTF::StringImpl **, long long *))off_1EE9BB758[v149])(v131, &v148);
          }
        }
        else
        {
          v139[0] = 0;
          char v146 = 0;
        }
        if (v146
          || (uint64_t v113 = *(void *)a3,
              uint64_t v114 = *((void *)a3 + 1),
              *(void *)a3 = 0,
              *((void *)a3 + 1) = 0,
              (uint64_t v115 = *((void *)a3 + 3)) != 0)
          && v114
          && ((*(void (**)(uint64_t, uint64_t))(*(void *)v115 + 16))(v115, v113), v146))
        {
          WebKit::RemoteCommandEncoder::copyTextureToTexture((uint64_t)v4, (uint64_t)v139, (uint64_t)&v141, (uint64_t)&v143[24]);
          if (v146)
          {
            if (v145 != -1) {
              ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9BB768[v145])(v131, &v143[24]);
            }
            int v145 = -1;
            if (v143[8])
            {
              if (*(_DWORD *)v143 != -1) {
                ((void (*)(WTF::StringImpl **, long long *))off_1EE9BB758[*(unsigned int *)v143])(v131, &v142);
              }
              *(_DWORD *)uint64_t v143 = -1;
            }
            if ((_BYTE)v140)
            {
              uint64_t v70 = *(unsigned int *)&v139[32];
              if (*(_DWORD *)&v139[32] != -1)
              {
                uint64_t v71 = &v139[16];
LABEL_169:
                ((void (*)(WTF::StringImpl **, char *))off_1EE9BB758[v70])(v131, v71);
              }
            }
          }
        }
        goto LABEL_170;
      case 0x302:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v139, a2 + 5);
        uint64_t v58 = *((void *)v4[3] + 1);
        char v59 = (_DWORD *)(v58 + 8);
        ++*(_DWORD *)(v58 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v58, (uint64_t)v4[5]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v59, v60);
        goto LABEL_236;
      case 0x303:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v147, a2 + 5);
        IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a3, (uint64_t)v131);
        if (LOBYTE(v131[1]))
        {
          uint64_t v68 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
          if ((_BYTE)v69)
          {
            *(WTF::StringImpl **)uint64_t v139 = v131[0];
            *(void *)&v139[8] = v68;
            v139[16] = 1;
            WebKit::RemoteCommandEncoder::finish(v4, (WTF::StringImpl **)v139, v68);
            if (v139[16])
            {
LABEL_176:
              char v78 = *(WTF::StringImpl **)v139;
              *(void *)uint64_t v139 = 0;
              if (v78)
              {
                if (*(_DWORD *)v78 == 2) {
                  WTF::StringImpl::destroy(v78, v66);
                }
                else {
                  *(_DWORD *)v78 -= 2;
                }
              }
            }
LABEL_213:
            unsigned __int8 v77 = (WTF::StringImpl **)&v147;
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v77);
          }
          if (v131[0])
          {
            if (*(_DWORD *)v131[0] == 2) {
              WTF::StringImpl::destroy(v131[0], v69);
            }
            else {
              *(_DWORD *)v131[0] -= 2;
            }
          }
        }
        else
        {
          uint64_t v107 = *(void *)a3;
          uint64_t v108 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v109 = *((void *)a3 + 3);
          if (v109 && v108) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v109 + 16))(v109, v107);
          }
        }
LABEL_212:
        uint64_t v104 = *(void *)a3;
        uint64_t v105 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v106 = *((void *)a3 + 3);
        if (v106 && v105) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v106 + 16))(v106, v104);
        }
        goto LABEL_213;
      case 0x304:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v131, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v139);
        if (!v139[8]) {
          goto LABEL_230;
        }
        WebKit::RemoteCommandEncoder::insertDebugMarker((uint64_t)v4);
        goto LABEL_88;
      case 0x305:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v139, a2 + 5);
        WebKit::RemoteCommandEncoder::popDebugGroup((WebKit::RemoteCommandEncoder *)v4);
        goto LABEL_236;
      case 0x306:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v131, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v139);
        if (!v139[8]) {
          goto LABEL_230;
        }
        WebKit::RemoteCommandEncoder::pushDebugGroup((uint64_t)v4);
        goto LABEL_88;
      case 0x307:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v139, a2 + 5);
        uint64_t v19 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v20) {
          goto LABEL_235;
        }
        unint64_t v21 = *((void *)a3 + 1);
        uint64_t v22 = *(void *)a3;
        unint64_t v23 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
        if (v21 < v23 || v21 - v23 <= 3) {
          goto LABEL_185;
        }
        uint64_t v25 = (unsigned int *)(v22 + v23);
        *((void *)a3 + 2) = v25 + 1;
        if (!v22) {
          goto LABEL_263;
        }
        unint64_t v26 = (((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v22;
        if (v21 < v26 || v21 - v26 <= 3) {
          goto LABEL_189;
        }
        uint64_t v28 = v19;
        uint64_t v29 = *v25;
        uint64_t v30 = *(unsigned int *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
        *((void *)a3 + 2) = (((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
        uint64_t v31 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v32) {
          goto LABEL_235;
        }
        unint64_t v33 = *((void *)a3 + 1);
        uint64_t v34 = *(void *)a3;
        unint64_t v35 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
        if (v33 < v35 || v33 - v35 <= 7)
        {
          unint64_t v123 = 0;
          uint64_t v124 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v125 = *((void *)a3 + 3);
          if (v125)
          {
            if (v33)
            {
              (*(void (**)(uint64_t))(*(void *)v125 + 16))(v125);
              uint64_t v124 = *(void *)a3;
              unint64_t v123 = *((void *)a3 + 1);
            }
            else
            {
              unint64_t v123 = 0;
              uint64_t v124 = 0;
            }
          }
        }
        else
        {
          *((void *)a3 + 2) = v34 + v35 + 8;
          if (v34)
          {
            WebKit::RemoteCommandEncoder::resolveQuerySet((uint64_t)v4, v28, v29, v30, v31);
            goto LABEL_236;
          }
          unint64_t v123 = v33;
          uint64_t v124 = 0;
        }
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v126 = *((void *)a3 + 3);
        if (v126 && v123) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v126 + 16))(v126, v124);
        }
        goto LABEL_235;
      case 0x308:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v131, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v139);
        if (!v139[8]) {
          goto LABEL_230;
        }
        WebKit::RemoteCommandEncoder::setLabel((uint64_t)v4, (uint64_t *)v139);
LABEL_88:
        if (v139[8])
        {
          uint64_t v67 = *(WTF::StringImpl **)v139;
          *(void *)uint64_t v139 = 0;
          if (v67)
          {
            if (*(_DWORD *)v67 == 2) {
              WTF::StringImpl::destroy(v67, v18);
            }
            else {
              *(_DWORD *)v67 -= 2;
            }
          }
        }
        goto LABEL_230;
      case 0x309:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v139, a2 + 5);
        uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
        if (!v12) {
          goto LABEL_235;
        }
        unint64_t v13 = *((void *)a3 + 1);
        uint64_t v14 = *(void *)a3;
        unint64_t v15 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
        if (v13 < v15 || v13 - v15 <= 3) {
          goto LABEL_182;
        }
        char v17 = (unsigned int *)(v14 + v15);
        *((void *)a3 + 2) = v17 + 1;
        if (v14)
        {
          WebKit::RemoteCommandEncoder::writeTimestamp((uint64_t)v4, v11, *v17);
          goto LABEL_236;
        }
LABEL_262:
        unint64_t v79 = v13;
        uint64_t v80 = v14;
LABEL_183:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v82 = *((void *)a3 + 3);
        if (v82) {
          goto LABEL_192;
        }
        goto LABEL_235;
      default:
        return this;
    }
  }
  return this;
}

void WebKit::RemoteCompositorIntegration::didReceiveStreamMessage(WebKit::RemoteCompositorIntegration *this, IPC::StreamServerConnection *a2, IPC::Decoder *a3)
{
  if (!*(unsigned char *)(*(void *)(*((void *)this + 5) + 8) + 78)) {
    return;
  }
  unsigned int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 > 0xE30)
  {
    if (v6 == 3633)
    {
      uint64_t v52 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      char v54 = v53;
      if (!v53) {
        return;
      }
      uint64_t v55 = v52;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)a2 + 5);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v87);
      atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
      uint64_t v56 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v56 = &unk_1EE9BB7B0;
      *(void *)(v56 + 8) = v55;
      *(unsigned char *)(v56 + 16) = v54;
      *(_DWORD *)(v56 + 17) = cf;
      *(_DWORD *)(v56 + 20) = *(_DWORD *)((char *)&cf + 3);
      *(void *)(v56 + 24) = a2;
      uint64_t v87 = (uint64_t *)v56;
      WebKit::RemoteCompositorIntegration::prepareForDisplay((uint64_t)this, (uint64_t *)&v87);
      unint64_t v23 = v87;
      uint64_t v87 = 0;
      if (!v23) {
        return;
      }
      goto LABEL_19;
    }
    if (v6 != 3634) {
      return;
    }
    uint64_t v24 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    char v26 = v25;
    if (!v25) {
      return;
    }
    uint64_t v27 = v24;
    unint64_t v28 = *((void *)a3 + 1);
    uint64_t v29 = *(char **)a3;
    unint64_t v30 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
    if (v28 < v30 || v28 - v30 <= 3)
    {
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v63 = *((void *)a3 + 3);
      if (v63)
      {
        if (v28)
        {
          (*(void (**)(uint64_t))(*(void *)v63 + 16))(v63);
          uint64_t v62 = *(void *)a3;
          unint64_t v61 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v61 = 0;
          uint64_t v62 = 0;
        }
      }
      goto LABEL_51;
    }
    char v32 = &v29[v30];
    *((void *)a3 + 2) = v32 + 4;
    if (!v29)
    {
      unint64_t v61 = v28;
      uint64_t v62 = 0;
LABEL_51:
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v64 = *((void *)a3 + 3);
      if (v64 && v61) {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v64 + 16))(v64, v62, v61);
      }
      goto LABEL_55;
    }
    unint64_t v33 = ((unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v29;
    if (v28 < v33 || v28 - v33 <= 3)
    {
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v65 = *((void *)a3 + 3);
      if (v65)
      {
        if (v28)
        {
          (*(void (**)(uint64_t))(*(void *)v65 + 16))(v65);
          uint64_t v83 = *(void *)a3;
          uint64_t v84 = *((void *)a3 + 1);
          uint64_t v85 = *((void *)a3 + 3);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          if (v85)
          {
            if (v84) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v85 + 16))(v85, v83);
            }
          }
        }
      }
      goto LABEL_55;
    }
    unsigned int v35 = *(_DWORD *)v32;
    unsigned int v36 = *(_DWORD *)((unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *((void *)a3 + 2) = ((unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    IPC::Decoder::decode<WebCore::DestinationColorSpace>((uint64_t *)a3, v29, (uint64_t)&cf);
    if (!v94)
    {
LABEL_55:
      int v48 = 0;
      LOBYTE(v87) = 0;
      char v92 = 0;
LABEL_56:
      uint64_t v66 = *(void *)a3;
      uint64_t v67 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v68 = *((void *)a3 + 3);
      if (v68 && v67) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v68 + 16))(v68, v66);
      }
LABEL_73:
      if (v48)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&cf, (uint64_t **)a2 + 5);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&cf);
        atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
        unint64_t v79 = (char *)WTF::fastMalloc((WTF *)0x20);
        *(void *)unint64_t v79 = &unk_1EE9BB788;
        *((void *)v79 + 1) = v27;
        v79[16] = v26;
        uint64_t v80 = v87;
        *((_DWORD *)v79 + 5) = *(_DWORD *)&v86[3];
        *(_DWORD *)(v79 + 17) = *(_DWORD *)v86;
        *((void *)v79 + 3) = a2;
        CFTypeRef cf = v79;
        WebKit::RemoteCompositorIntegration::recreateRenderBuffers(this, v80, HIDWORD(v87), (uint64_t)&v88, v89, v90, v91, (uint64_t *)&cf);
        CFTypeRef v81 = cf;
        CFTypeRef cf = 0;
        if (v81) {
          (*(void (**)(CFTypeRef))(*(void *)v81 + 8))(v81);
        }
        if (v92)
        {
          CFTypeRef v82 = v88;
          CFTypeRef v88 = 0;
          if (v82) {
            CFRelease(v82);
          }
        }
      }
      return;
    }
    unint64_t v37 = *((void *)a3 + 1);
    uint64_t v38 = *(void *)a3;
    unint64_t v39 = *((void *)a3 + 2) - *(void *)a3;
    if (v37 <= v39)
    {
      unint64_t v73 = 0;
      uint64_t v74 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v75 = *((void *)a3 + 3);
      if (v75)
      {
        if (v37)
        {
          (*(void (**)(uint64_t))(*(void *)v75 + 16))(v75);
          uint64_t v74 = *(void *)a3;
          unint64_t v73 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v73 = 0;
          uint64_t v74 = 0;
        }
      }
    }
    else
    {
      unint64_t v40 = (unsigned __int8 *)(v38 + v39);
      *((void *)a3 + 2) = v40 + 1;
      if (v38)
      {
        unsigned int v41 = *v40;
        if (v41 < 2)
        {
          unsigned __int16 v42 = IPC::Decoder::decode<WebCore::WebGPU::TextureFormat>((uint64_t *)a3);
          if (v42 > 0xFFu)
          {
            unsigned __int8 v43 = v42;
            uint64_t v44 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
            if (v45)
            {
              if (!v94) {
                goto LABEL_85;
              }
              int v46 = 0;
              uint64_t v87 = (uint64_t *)__PAIR64__(v36, v35);
              CFTypeRef v47 = cf;
              CFTypeRef cf = 0;
              CFTypeRef v88 = v47;
              unsigned __int8 v89 = v41;
              unsigned __int8 v90 = v43;
              uint64_t v91 = v44;
              int v48 = 1;
LABEL_69:
              char v92 = v48;
              if (v94)
              {
                CFTypeRef v78 = cf;
                CFTypeRef cf = 0;
                if (v78) {
                  CFRelease(v78);
                }
              }
              if (!v46) {
                goto LABEL_73;
              }
              goto LABEL_56;
            }
          }
LABEL_68:
          int v48 = 0;
          LOBYTE(v87) = 0;
          int v46 = 1;
          goto LABEL_69;
        }
LABEL_67:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v77 = *((void *)a3 + 3);
        if (v77 && v37) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v77 + 16))(v77, v38);
        }
        goto LABEL_68;
      }
      unint64_t v73 = v37;
      uint64_t v74 = 0;
    }
    unint64_t v37 = 0;
    uint64_t v38 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v76 = *((void *)a3 + 3);
    if (v76)
    {
      if (v73)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v76 + 16))(v76, v74, v73);
        uint64_t v38 = *(void *)a3;
        unint64_t v37 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v37 = 0;
        uint64_t v38 = 0;
      }
    }
    goto LABEL_67;
  }
  if (v6 == 778)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)a2 + 5);
    uint64_t v49 = *(void *)(*((void *)this + 3) + 8);
    uint64_t v50 = (_DWORD *)(v49 + 8);
    ++*(_DWORD *)(v49 + 8);
    WebKit::WebGPU::ObjectHeap::removeObject(v49, *((void *)this + 6));
    WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v50, v51);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v87);
    return;
  }
  if (v6 == 3632)
  {
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    char v9 = v8;
    if (v8)
    {
      unint64_t v10 = *((void *)a3 + 1);
      uint64_t v11 = *(void *)a3;
      unint64_t v12 = ((*((void *)a3 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a3;
      if (v10 < v12 || v10 - v12 <= 7)
      {
        unint64_t v57 = 0;
        uint64_t v58 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v44 = *((void *)a3 + 3);
        if (v44) {
          goto LABEL_86;
        }
LABEL_47:
        while (1)
        {
          unint64_t v10 = 0;
          uint64_t v11 = 0;
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v59 = *((void *)a3 + 3);
          if (!v59) {
            break;
          }
          if (!v57)
          {
            unint64_t v10 = 0;
            uint64_t v11 = 0;
            break;
          }
          uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v59 + 16))(v59, v58, v57);
          if (!*(void *)a3)
          {
            uint64_t v11 = 0;
            unint64_t v10 = *((void *)a3 + 1);
            break;
          }
LABEL_85:
          __break(1u);
LABEL_86:
          if (v10)
          {
            (*(void (**)(uint64_t))(*(void *)v44 + 16))(v44);
            uint64_t v58 = *(void *)a3;
            unint64_t v57 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v57 = 0;
            uint64_t v58 = 0;
          }
        }
LABEL_48:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v60 = *((void *)a3 + 3);
        if (v60) {
          goto LABEL_96;
        }
        goto LABEL_60;
      }
      uint64_t v14 = (uint64_t *)(v11 + v12);
      uint64_t v15 = v11 + v12 + 8;
      *((void *)a3 + 2) = v15;
      if (!v11)
      {
        unint64_t v57 = v10;
        uint64_t v58 = 0;
        goto LABEL_47;
      }
      uint64_t v16 = *v14;
      if ((unint64_t)(*v14 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
        goto LABEL_48;
      }
      unint64_t v17 = ((v15 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v11;
      if (v10 < v17 || v10 - v17 <= 3)
      {
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v69 = *((void *)a3 + 3);
        if (v69)
        {
          if (v10)
          {
            (*(void (**)(uint64_t))(*(void *)v69 + 16))(v69);
            uint64_t v11 = *(void *)a3;
            unint64_t v10 = *((void *)a3 + 1);
            uint64_t v60 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v60)
            {
LABEL_96:
              if (v10) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v60 + 16))(v60, v11);
              }
            }
          }
        }
LABEL_60:
        uint64_t v70 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v71 = *((void *)a3 + 3);
        if (v71 && v70)
        {
          uint64_t v72 = *(void (**)(void))(*(void *)v71 + 16);
          v72();
        }
        return;
      }
      uint64_t v19 = v7;
      char v20 = (unsigned int *)(v11 + v17);
      uint64_t v21 = *v20;
      *((void *)a3 + 2) = v20 + 1;
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v87, (uint64_t **)a2 + 5);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v87);
      atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
      uint64_t v22 = WTF::fastMalloc((WTF *)0x20);
      *(void *)uint64_t v22 = &unk_1EE9BB7D8;
      *(void *)(v22 + 8) = v19;
      *(unsigned char *)(v22 + 16) = v9;
      *(_DWORD *)(v22 + 17) = cf;
      *(_DWORD *)(v22 + 20) = *(_DWORD *)((char *)&cf + 3);
      *(void *)(v22 + 24) = a2;
      uint64_t v87 = (uint64_t *)v22;
      WebKit::RemoteCompositorIntegration::paintCompositedResultsToCanvas((uint64_t)this, v16, v21, (uint64_t *)&v87);
      unint64_t v23 = v87;
      uint64_t v87 = 0;
      if (!v23) {
        return;
      }
LABEL_19:
      (*(void (**)(uint64_t *))(*v23 + 8))(v23);
    }
  }
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages54RemoteAudioMediaStreamTrackRendererInternalUnitManager10CreateUnitEN6WebKit54RemoteAudioMediaStreamTrackRendererInternalUnitManagerES8_FvNS_23ObjectIdentifierGenericINS7_55AudioMediaStreamTrackRendererInternalUnitIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore24CAAudioStreamDescriptionEEEmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_mEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB6A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages54RemoteAudioMediaStreamTrackRendererInternalUnitManager10CreateUnitEN6WebKit54RemoteAudioMediaStreamTrackRendererInternalUnitManagerES8_FvNS_23ObjectIdentifierGenericINS7_55AudioMediaStreamTrackRendererInternalUnitIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore24CAAudioStreamDescriptionEEEmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_mEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB6A0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages54RemoteAudioMediaStreamTrackRendererInternalUnitManager10CreateUnitEN6WebKit54RemoteAudioMediaStreamTrackRendererInternalUnitManagerES8_FvNS_23ObjectIdentifierGenericINS7_55AudioMediaStreamTrackRendererInternalUnitIdentifierTypeENS_38ObjectIdentifierMainThreadAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvNSt3__18optionalIN7WebCore24CAAudioStreamDescriptionEEEmEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSK_mEE4callESK_m(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3138;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v16 = v7;
  LODWORD(v6) = a2[80];
  char v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v6)
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198A2CBECLL);
    }
    *char v8 = 1;
    if (!a2[80])
    {
      uint64_t v15 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v15);
    }
    uint64_t v10 = WebCore::CAAudioStreamDescription::streamDescription((WebCore::CAAudioStreamDescription *)a2);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode(v7, v10);
  }
  else
  {
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x198A2CC0CLL);
    }
    *char v8 = 0;
  }
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, a3);
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      uint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    uint64_t v5 = (uint64_t *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v6 = *v5;
      if ((unint64_t)(v6 - 1) < 0xFFFFFFFFFFFFFFFELL) {
        return v6;
      }
LABEL_11:
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      uint64_t v12 = a1[3];
      if (v12)
      {
        if (v1) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v2);
        }
        return 0;
      }
      return v6;
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  unint64_t v1 = 0;
  uint64_t v2 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (!v11) {
    goto LABEL_11;
  }
  unint64_t v13 = a1;
  if (!v8)
  {
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
  uint64_t v2 = *v13;
  if (!*v13)
  {
    a1 = v13;
    unint64_t v1 = v13[1];
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21RemoteBarcodeDetector6DetectEN6WebKit21RemoteBarcodeDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection15DetectedBarcodeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB6C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21RemoteBarcodeDetector6DetectEN6WebKit21RemoteBarcodeDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection15DetectedBarcodeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB6C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages21RemoteBarcodeDetector6DetectEN6WebKit21RemoteBarcodeDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection15DetectedBarcodeELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3139;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  uint64_t v6 = *(unsigned int *)(a2 + 12);
  if (v6)
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = 48 * v6;
    do
    {
      IPC::ArgumentCoder<WebCore::ShapeDetection::DetectedBarcode,void>::encode(v5, v7);
      v7 += 48;
      v8 -= 48;
    }
    while (v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  unint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer8MapAsyncEN6WebKit12RemoteBufferES8_FvNS_9OptionSetIN7WebCore6WebGPU7MapModeEEEyNSt3__18optionalIyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB6F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer8MapAsyncEN6WebKit12RemoteBufferES8_FvNS_9OptionSetIN7WebCore6WebGPU7MapModeEEEyNSt3__18optionalIyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB6F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer8MapAsyncEN6WebKit12RemoteBufferES8_FvNS_9OptionSetIN7WebCore6WebGPU7MapModeEEEyNSt3__18optionalIyEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3141;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer4CopyEN6WebKit12RemoteBufferES8_FvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEmONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BB718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer4CopyEN6WebKit12RemoteBufferES8_FvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEmONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BB718;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteBuffer4CopyEN6WebKit12RemoteBufferES8_FvONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEmONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3140;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12RemoteBuffer14GetMappedRangeEN6WebKit12RemoteBufferES8_FvyNSt3__18optionalIyEEONS_17CompletionHandlerIFvONSA_INS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB740;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12RemoteBuffer14GetMappedRangeEN6WebKit12RemoteBufferES8_FvyNSt3__18optionalIyEEONS_17CompletionHandlerIFvONSA_INS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB740;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages12RemoteBuffer14GetMappedRangeEN6WebKit12RemoteBufferES8_FvyNSt3__18optionalIyEEONS_17CompletionHandlerIFvONSA_INS_6VectorIhLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSI_EE4callESI_(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v21, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v21);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_23;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_23;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_23;
        }
      }
    }
    uint64_t v12 = (IPC::Encoder *)(v11 + 256);
    uint64_t v21 = v12;
    unint64_t v22 = v10;
    unint64_t v23 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_25;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_24:
      unint64_t v22 = 0;
LABEL_25:
      uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(&v21, a2);
      if (v22) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v23 = v14 + 2;
    uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(&v21, a2);
    if (v22) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v21 = v17;
  IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v17, a2);
  if (*(unsigned char *)(v2 + 120)) {
    return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v2 + 128), v17);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v21, 0, 0);
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v19, v20);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>&>(void *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 16))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 16))
      {
        uint64_t v6 = std::__throw_bad_optional_access[abi:sn180100]();
        return (void *)IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v6);
      }
    }
    size_t v4 = *(unsigned int *)(a2 + 12);
    uint64_t v5 = *(const void **)a2;
    return IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(result, v5, v4);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

unsigned char *IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (unsigned char *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A2D688);
    }
    *uint64_t result = 1;
    if (*(unsigned char *)(a2 + 16))
    {
      uint64_t v7 = *(const void **)a2;
      size_t v8 = *(unsigned int *)(a2 + 12);
      return (unsigned char *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, v7, v8);
    }
    else
    {
      uint64_t v9 = std::__throw_bad_optional_access[abi:sn180100]();
      return (unsigned char *)std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100](v9, v10);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A2D6A8);
    }
    *uint64_t result = 0;
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPassDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    WTF::Vector<std::optional<WebKit::WebGPU::RenderPassColorAttachment>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 8, a2);
    int v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::ImageCopyBuffer>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyBuffer,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 32))
  {
    uint64_t v5 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t result = *((void *)a2 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTexture,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v5 = a1 + 16;
  *(unsigned char *)(a1 + 40) = 0;
  if (*((unsigned char *)a2 + 40))
  {
    *(_DWORD *)(a1 + 32) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>(v5, (uint64_t)(a2 + 2));
    *(unsigned char *)(a1 + 40) = 1;
  }
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEN6WebKit27RemoteCompositorIntegrationES8_FviiON7WebCore21DestinationColorSpaceENS9_22AlphaPremultiplicationENS9_6WebGPU13TextureFormatENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINS_13MachSendRightELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB788;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEN6WebKit27RemoteCompositorIntegrationES8_FviiON7WebCore21DestinationColorSpaceENS9_22AlphaPremultiplicationENS9_6WebGPU13TextureFormatENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINS_13MachSendRightELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB788;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration21RecreateRenderBuffersEN6WebKit27RemoteCompositorIntegrationES8_FviiON7WebCore21DestinationColorSpaceENS9_22AlphaPremultiplicationENS9_6WebGPU13TextureFormatENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINS_13MachSendRightELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSR_EE4callESR_(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v14, (uint64_t **)(*(void *)(a1 + 24) + 40));
  uint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v14);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(a1 + 8);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 2872;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 68) = 0;
    *((void *)v7 + 70) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    unint64_t v14 = v7;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v7, *(unsigned int *)(a2 + 12));
    uint64_t v8 = *(unsigned int *)(a2 + 12);
    if (v8)
    {
      unint64_t v9 = *(void *)a2;
      uint64_t v10 = 4 * v8;
      do
      {
        IPC::Encoder::addAttachment((uint64_t)v7, v9);
        v9 += 4;
        v10 -= 4;
      }
      while (v10);
    }
    if (*(unsigned char *)(v5 + 120))
    {
      return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v5 + 128), v7);
    }
    else
    {
      IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v14, 0, 0);
      uint64_t result = v14;
      unint64_t v14 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder(result, v11);
        return (IPC::Encoder *)WTF::fastFree(v12, v13);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEN6WebKit27RemoteCompositorIntegrationES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB7B0;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEN6WebKit27RemoteCompositorIntegrationES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB7B0;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration17PrepareForDisplayEN6WebKit27RemoteCompositorIntegrationES8_FvONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v13);
  if (!*(unsigned char *)(a1 + 16))
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2872;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unint64_t v13 = v6;
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v6, 1uLL, 1);
  if (!v8)
  {
LABEL_9:
    uint64_t result = 831;
    __break(0xC471u);
    return result;
  }
  unsigned char *v7 = a2;
  if (*(unsigned char *)(v4 + 120)) {
    return (uint64_t)std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v4 + 128), v6);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v4 + 40), (uint64_t *)&v13, 0, 0);
  uint64_t result = (uint64_t)v13;
  unint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
    return WTF::fastFree(v11, v12);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEN6WebKit27RemoteCompositorIntegrationES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEjONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BB7D8;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEN6WebKit27RemoteCompositorIntegrationES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEjONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BB7D8;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages27RemoteCompositorIntegration30PaintCompositedResultsToCanvasEN6WebKit27RemoteCompositorIntegrationES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEjONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v19, (uint64_t **)(*(void *)(a1 + 24) + 40));
  uint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v19);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 120))
  {
    uint64_t v7 = *(void *)(v1 + 56);
    uint64_t v6 = *(void *)(v1 + 64);
    unint64_t v5 = *(void *)(v6 + 8);
    if (v7 != 1)
    {
      BOOL v8 = v5 >= 0x100;
      v5 -= 256;
      if (!v8) {
        goto LABEL_24;
      }
      uint64_t v9 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v8 = v5 >= v7 - 1;
        unint64_t v5 = v7 - 1;
        if (!v8) {
          goto LABEL_24;
        }
      }
      uint64_t v10 = v9 + 256;
      unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
      if (v11 < v9 + 256) {
        goto LABEL_25;
      }
      goto LABEL_10;
    }
    if (v5 <= 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      if (v5) {
        return result;
      }
      goto LABEL_16;
    }
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v10 = v9 + 256;
    unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v11 >= v9 + 256)
    {
      unint64_t v5 = 0;
LABEL_10:
      unint64_t v12 = v11 - v10;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v12 + 2 <= v5)
      {
        uint64_t v14 = v9 + 256;
        *(_WORD *)(v14 + v12) = 2872;
        if (v5) {
          return result;
        }
        *(_WORD *)(v14 + v12) = 2870;
      }
    }
  }
LABEL_16:
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v15 = 2872;
  *((void *)v15 + 1) = v2;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  uint64_t v19 = v15;
  if (*(unsigned char *)(v1 + 120)) {
    return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v1 + 128), v15);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v1 + 40), (uint64_t *)&v19, 0, 0);
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

void WebKit::WebCookieManager::platformSetHTTPCookieAcceptPolicy(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  WebKit::WebCookieManager::protectedProcess(a1, &cf);
  v6.m_identifier = a2;
  uint64_t v7 = (WebCore::NetworkStorageSession *)WebKit::NetworkProcess::storageSession((WebKit::NetworkProcess *)cf, v6);
  BOOL v8 = (unsigned int *)cf;
  CFTypeRef cf = 0;
  if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v8 + 32);
    (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
  }
  if (v7)
  {
    WebCore::NetworkStorageSession::nsCookieStorage((uint64_t *)&cf, v7);
    if (cf)
    {
      [(id)cf _cookieStorage];
      CFHTTPCookieStorageSetCookieAcceptPolicy();
      WebKit::saveCookies((void *)cf, a4);
    }
    else
    {
      WTF::CompletionHandler<void ()(void)>::operator()(a4);
    }
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a4);
  }
}

void sub_198A2E098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *cf)
{
  if (cf)
  {
    if (atomic_fetch_add((atomic_uint *volatile)cf + 32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, cf + 32);
      (*(void (**)(unsigned int *))(*(void *)cf + 8))(cf);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LegacyCustomProtocolManager::networkProcessCreated(WebKit::NetworkProcess &)::$_0::operator()<WebKit::LegacyCustomProtocolManager>(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    char v2 = 0;
    unint64_t v3 = (atomic_uchar *)(a1 + 56);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 56), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
    if (v2) {
      MEMORY[0x19972E8D0](a1 + 56);
    }
    uint64_t v4 = *(void *)(v1 + 48);
    if (v4) {
      uint64_t v1 = *(_DWORD *)(v4 - 12) != 0;
    }
    else {
      uint64_t v1 = 0;
    }
    int v5 = 1;
    atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
    }
  }
  return v1;
}

void sub_198A2E264(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::LegacyCustomProtocolManager::supportsScheme(WebKit::LegacyCustomProtocolManager *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (!*a2) {
    return 0;
  }
  char v4 = 0;
  int v5 = (char *)this + 56;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)this + 56, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0]((char *)this + 56);
  }
  uint64_t v6 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>((uint64_t *)this + 6, a2);
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return v6;
}

void sub_198A2E324(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A2E52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A2E610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl **WebKit::LegacyCustomProtocolManager::unregisterScheme(atomic_uchar *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  char v4 = 0;
  int v5 = this + 56;
  atomic_compare_exchange_strong_explicit(this + 56, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](this + 56);
  }
  uint64_t v6 = (uint64_t *)(this + 48);
  uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(v6, a2);
  if (*v6)
  {
    uint64_t v8 = *v6 + 8 * *(unsigned int *)(*v6 - 4);
    if ((WTF::StringImpl **)v8 == result) {
      goto LABEL_10;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_10;
    }
    uint64_t v8 = 0;
  }
  if ((WTF::StringImpl **)v8 != result) {
    uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(v6, result);
  }
LABEL_10:
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1)
  {
    return (WTF::StringImpl **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

void sub_198A2E768(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::LegacyCustomProtocolManager::didFailWithError(uint64_t a1, uint64_t a2, WebCore::ResourceError *a3)
{
  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v15);
  uint64_t v6 = v15;
  if (v15)
  {
    int v7 = (const void *)WebCore::ResourceError::nsError(a3);
    uint64_t v8 = v7;
    if (v7) {
      CFRetain(v7);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3321888768;
    block[2] = ___ZN6WebKit27LegacyCustomProtocolManager16didFailWithErrorEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore13ResourceErrorE_block_invoke;
    block[3] = &__block_descriptor_48_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c30_ZTSN3WTF9RetainPtrI7NSErrorEE_e5_v8__0l;
    CFTypeRef cf = v6;
    CFRetain(v6);
    CFTypeRef v14 = v8;
    if (v8) {
      CFRetain(v8);
    }
    int v9 = (__CFRunLoop *)[v6 initializationRunLoop];
    CFRunLoopPerformBlock(v9, (CFTypeRef)*MEMORY[0x1E4F1D418], block);
    CFRunLoopWakeUp(v9);
    WebKit::LegacyCustomProtocolManager::removeCustomProtocol(a1, a2);
    CFTypeRef v10 = v14;
    CFTypeRef v14 = 0;
    if (v10) {
      CFRelease(v10);
    }
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    if (v8) {
      CFRelease(v8);
    }
    CFRelease(v6);
  }
}

void sub_198A2E8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, CFTypeRef a15)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  CFRelease(v15);
  _Unwind_Resume(a1);
}

void *WebKit::LegacyCustomProtocolManager::protocolForID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = 0;
  uint64_t v11 = a2;
  uint64_t v6 = (atomic_uchar *)(a1 + 40);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 40), (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
  if (v5) {
    MEMORY[0x19972E8D0](a1 + 40);
  }
  int v7 = (uint64_t *)(a1 + 32);
  uint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v7, &v11);
  uint64_t v9 = *v7;
  if (*v7) {
    v9 += 16 * *(unsigned int *)(v9 - 4);
  }
  if ((void *)v9 == result)
  {
    *a3 = 0;
  }
  else
  {
    uint64_t result = (void *)result[1];
    *a3 = result;
    if (result) {
      uint64_t result = CFRetain(result);
    }
  }
  int v10 = 1;
  atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return result;
}

void sub_198A2E9E0(_Unwind_Exception *exception_object)
{
  int v3 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v3, 0, memory_order_release, memory_order_relaxed);
  if (v3 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager16didFailWithErrorEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore13ResourceErrorE_block_invoke(uint64_t a1)
{
  char v2 = (void *)[*(id *)(a1 + 32) client];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);

  return [v2 URLProtocol:v3 didFailWithError:v4];
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c30_ZTSN3WTF9RetainPtrI7NSErrorEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_198A2EA8C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c30_ZTSN3WTF9RetainPtrI7NSErrorEE(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void WebKit::LegacyCustomProtocolManager::didLoadData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v14);
  uint64_t v6 = v14;
  if (v14)
  {
    int v7 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a3 length:a4];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3321888768;
    block[2] = ___ZN6WebKit27LegacyCustomProtocolManager11didLoadDataEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEE_block_invoke;
    block[3] = &__block_descriptor_48_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c29_ZTSN3WTF9RetainPtrI6NSDataEE_e5_v8__0l;
    CFTypeRef v12 = v6;
    CFRetain(v6);
    CFTypeRef cf = v7;
    if (v7) {
      CFRetain(v7);
    }
    uint64_t v8 = (__CFRunLoop *)[v6 initializationRunLoop];
    CFRunLoopPerformBlock(v8, (CFTypeRef)*MEMORY[0x1E4F1D418], block);
    CFRunLoopWakeUp(v8);
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    CFTypeRef v10 = v12;
    CFTypeRef v12 = 0;
    if (v10) {
      CFRelease(v10);
    }
    if (v7) {
      CFRelease(v7);
    }
    CFRelease(v6);
  }
}

void sub_198A2EC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, CFTypeRef cf, CFTypeRef a15)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  CFRelease(v15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager11didLoadDataEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEENSt3__14spanIKhLm18446744073709551615EEE_block_invoke(uint64_t a1)
{
  char v2 = (void *)[*(id *)(a1 + 32) client];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);

  return [v2 URLProtocol:v3 didLoadData:v4];
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c29_ZTSN3WTF9RetainPtrI6NSDataEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_198A2ECF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c29_ZTSN3WTF9RetainPtrI6NSDataEE(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void WebKit::LegacyCustomProtocolManager::didReceiveResponse(uint64_t a1, uint64_t a2, WebCore::ResourceResponse *a3, char a4)
{
  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v19);
  uint64_t v6 = v19;
  if (v19)
  {
    int v7 = (const void *)WebCore::ResourceResponse::nsURLResponse(a3);
    uint64_t v8 = v7;
    if (v7) {
      CFRetain(v7);
    }
    uint64_t v12 = MEMORY[0x1E4F143A8];
    uint64_t v13 = 3321888768;
    CFTypeRef v14 = ___ZN6WebKit27LegacyCustomProtocolManager18didReceiveResponseEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore16ResourceResponseENS_18CacheStoragePolicyE_block_invoke;
    uint64_t v15 = &__block_descriptor_49_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c37_ZTSN3WTF9RetainPtrI13NSURLResponseEE_e5_v8__0l;
    CFTypeRef cf = v6;
    CFRetain(v6);
    CFTypeRef v17 = v8;
    if (v8) {
      CFRetain(v8);
    }
    char v18 = a4;
    CFTypeRef v9 = (__CFRunLoop *)objc_msgSend(v6, "initializationRunLoop", v12, v13, v14, v15);
    CFRunLoopPerformBlock(v9, (CFTypeRef)*MEMORY[0x1E4F1D418], &v12);
    CFRunLoopWakeUp(v9);
    CFTypeRef v10 = v17;
    CFTypeRef v17 = 0;
    if (v10) {
      CFRelease(v10);
    }
    CFTypeRef v11 = cf;
    CFTypeRef cf = 0;
    if (v11) {
      CFRelease(v11);
    }
    if (v8) {
      CFRelease(v8);
    }
    CFRelease(v6);
  }
}

void sub_198A2EE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v15) {
    CFRelease(v15);
  }
  CFRelease(v14);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager18didReceiveResponseEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore16ResourceResponseENS_18CacheStoragePolicyE_block_invoke(uint64_t a1)
{
  char v2 = (void *)[*(id *)(a1 + 32) client];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(unsigned __int8 *)(a1 + 48) >= 2u) {
    uint64_t v5 = 2;
  }
  else {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 48);
  }

  return [v2 URLProtocol:v3 didReceiveResponse:v4 cacheStoragePolicy:v5];
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c37_ZTSN3WTF9RetainPtrI13NSURLResponseEE(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    CFRetain(v4);
  }
  CFTypeRef result = *(CFTypeRef *)(a2 + 40);
  *(void *)(a1 + 40) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_198A2EF80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE40c37_ZTSN3WTF9RetainPtrI13NSURLResponseEE(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3)
  {
    CFRelease(v3);
  }
}

void WebKit::LegacyCustomProtocolManager::didFinishLoading(uint64_t a1, uint64_t a2)
{
  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &cf);
  uint64_t v4 = (void *)cf;
  if (cf)
  {
    uint64_t v7 = MEMORY[0x1E4F143A8];
    CFTypeRef v8 = cf;
    CFRetain(cf);
    uint64_t v5 = (__CFRunLoop *)objc_msgSend(v4, "initializationRunLoop", v7, 3321888768, ___ZN6WebKit27LegacyCustomProtocolManager16didFinishLoadingEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEE_block_invoke, &__block_descriptor_40_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE_e5_v8__0l);
    CFRunLoopPerformBlock(v5, (CFTypeRef)*MEMORY[0x1E4F1D418], &v7);
    CFRunLoopWakeUp(v5);
    WebKit::LegacyCustomProtocolManager::removeCustomProtocol(a1, a2);
    CFTypeRef v6 = v8;
    CFTypeRef v8 = 0;
    if (v6) {
      CFRelease(v6);
    }
    CFRelease(v4);
  }
}

void sub_198A2F0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  CFRelease(v13);
  _Unwind_Resume(a1);
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager16didFinishLoadingEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEE_block_invoke(uint64_t a1)
{
  char v2 = (void *)[*(id *)(a1 + 32) client];
  uint64_t v3 = *(void *)(a1 + 32);

  return [v2 URLProtocolDidFinishLoading:v3];
}

CFTypeRef __copy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c40_ZTSN3WTF9RetainPtrI16WKCustomProtocolEE(uint64_t a1)
{
  char v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

void WebKit::LegacyCustomProtocolManager::wasRedirectedToRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceResponse *a4)
{
  WebKit::LegacyCustomProtocolManager::protocolForID(a1, a2, &v21);
  uint64_t v5 = v21;
  if (v21)
  {
    CFTypeRef v6 = (const void *)WebCore::ResourceRequest::nsURLRequest();
    uint64_t v7 = v6;
    if (v6) {
      CFRetain(v6);
    }
    CFTypeRef v8 = (const void *)WebCore::ResourceResponse::nsURLResponse(a4);
    CFTypeRef v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 3321888768;
    uint64_t v16 = ___ZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore15ResourceRequestERKNS8_16ResourceResponseE_block_invoke;
    CFTypeRef v17 = &__block_descriptor_56_e8_32c284_ZTSKZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore15ResourceRequestERKNS8_16ResourceResponseEE3__0_e5_v8__0l;
    CFRetain(v5);
    if (v7) {
      CFRetain(v7);
    }
    if (v9) {
      CFRetain(v9);
    }
    CFTypeRef cf = v5;
    CFRetain(v5);
    CFTypeRef v19 = v7;
    if (v7) {
      CFRetain(v7);
    }
    CFTypeRef v20 = v9;
    if (v9) {
      CFRetain(v9);
    }
    CFTypeRef v10 = (__CFRunLoop *)objc_msgSend(v5, "initializationRunLoop", v14, v15, v16, v17);
    CFRunLoopPerformBlock(v10, (CFTypeRef)*MEMORY[0x1E4F1D418], &v14);
    CFRunLoopWakeUp(v10);
    if (v9)
    {
      CFRelease(v9);
      if (!v7) {
        goto LABEL_16;
      }
    }
    else if (!v7)
    {
      goto LABEL_16;
    }
    CFRelease(v7);
LABEL_16:
    CFRelease(v5);
    CFTypeRef v11 = v20;
    CFTypeRef v20 = 0;
    if (v11) {
      CFRelease(v11);
    }
    CFTypeRef v12 = v19;
    CFTypeRef v19 = 0;
    if (v12) {
      CFRelease(v12);
    }
    CFTypeRef v13 = cf;
    CFTypeRef cf = 0;
    if (v13) {
      CFRelease(v13);
    }
    if (v9)
    {
      CFRelease(v9);
      if (!v7) {
        goto LABEL_24;
      }
    }
    else if (!v7)
    {
LABEL_24:
      CFRelease(v5);
      return;
    }
    CFRelease(v7);
    goto LABEL_24;
  }
}

void sub_198A2F334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf, CFTypeRef a14, CFTypeRef a15)
{
  if (cf)
  {
    CFRelease(cf);
    if (!v17)
    {
LABEL_3:
      if (!v16) {
        goto LABEL_4;
      }
LABEL_9:
      CFRelease(v16);
LABEL_4:
      CFRelease(v15);
      if (v17)
      {
        CFRelease(v17);
        if (!v16) {
          goto LABEL_6;
        }
      }
      else if (!v16)
      {
        goto LABEL_6;
      }
      CFRelease(v16);
LABEL_6:
      CFRelease(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_3;
  }
  CFRelease(v17);
  if (!v16) {
    goto LABEL_4;
  }
  goto LABEL_9;
}

uint64_t ___ZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore15ResourceRequestERKNS8_16ResourceResponseE_block_invoke(uint64_t a1)
{
  char v2 = (void *)[*(id *)(a1 + 32) client];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);

  return [v2 URLProtocol:v3 wasRedirectedToRequest:v4 redirectResponse:v5];
}

CFTypeRef __copy_helper_block_e8_32c284_ZTSKZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore15ResourceRequestERKNS8_16ResourceResponseEE3__0(void *a1, void *a2)
{
  uint64_t v4 = (const void *)a2[4];
  a1[4] = v4;
  if (v4) {
    CFRetain(v4);
  }
  uint64_t v5 = (const void *)a2[5];
  a1[5] = v5;
  if (v5) {
    CFRetain(v5);
  }
  CFTypeRef result = (CFTypeRef)a2[6];
  a1[6] = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void sub_198A2F4B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c284_ZTSKZN6WebKit27LegacyCustomProtocolManager22wasRedirectedToRequestEN3WTF23ObjectIdentifierGenericINS_26LegacyCustomProtocolIDTypeENS1_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS1_33SupportsObjectIdentifierNullStateE1EEERKN7WebCore15ResourceRequestERKNS8_16ResourceResponseEE3__0(void *a1)
{
  char v2 = (const void *)a1[6];
  a1[6] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  a1[5] = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  a1[4] = 0;
  if (v4)
  {
    CFRelease(v4);
  }
}

void WebKit::Download::resume(uint64_t a1, uint64_t a2, uint64_t a3, WTF::FileSystemImpl *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (*a5)
  {
    uint64_t v14 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v14 = 1;
    uint64_t v15 = *a5;
    *a5 = 0;
    *(void *)(v14 + 8) = v15;
    *(void *)(v14 + 16) = 0;
  }
  else
  {
    uint64_t v14 = 0;
  }
  uint64_t v16 = *(const char ****)(a1 + 64);
  *(void *)(a1 + 64) = v14;
  if (v16)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v16);
    uint64_t v14 = *(void *)(a1 + 64);
  }
  if (v14)
  {
    uint64_t v17 = *(void *)(v14 + 16);
    *(void *)(v14 + 16) = v17 + 1;
    if (!v17) {
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v14 + 8));
    }
  }
  uint64_t v18 = (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 24) + 8) + 88))(*(void *)(*(void *)(a1 + 24) + 8), *(void *)(a1 + 160));
  if (v18)
  {
    uint64_t v19 = v18;
    CFTypeRef v20 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
    uint64_t v21 = (void *)[MEMORY[0x1E4F28F98] propertyListWithData:v20 options:2 format:0 error:0];
    if (*(void *)a4) {
      unint64_t v22 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v22 = &stru_1EEA10550;
    }
    [v21 setObject:v22 forKey:@"NSURLSessionResumeInfoLocalPath"];
    unint64_t v23 = objc_msgSend(*(id *)(*(void *)(v19 + 1104) + 40), "downloadTaskWithResumeData:", objc_msgSend(MEMORY[0x1E4F28F98], "dataWithPropertyList:format:options:error:", v21, 100, 0, 0));
    uint64_t v24 = v23;
    if (v23) {
      CFRetain(v23);
    }
    char v25 = *(const void **)(a1 + 80);
    *(void *)(a1 + 80) = v24;
    if (v25)
    {
      CFRelease(v25);
      uint64_t v24 = *(void **)(a1 + 80);
    }
    uint64_t v26 = [v24 taskIdentifier];
    uint64_t v27 = (uint64_t *)(*(void *)(v19 + 1104) + 64);
    uint64_t v46 = v26;
    WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>&>(v27, &v46, (uint64_t *)(a1 + 32), (uint64_t)buf);
    if (*(void *)a4) {
      unint64_t v28 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      unint64_t v28 = &stru_1EEA10550;
    }
    objc_msgSend(*(id *)(a1 + 80), "set_pathToDownloadTaskFile:", v28);
    [*(id *)(a1 + 80) resume];
    uint64_t v29 = (const void *)[v21 objectForKey:@"ResumePlaceholderURLBookmarkData"];
    unint64_t v30 = v29;
    if (!v29) {
      goto LABEL_48;
    }
    CFRetain(v29);
    uint64_t v31 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a6 length:a7];
    id v32 = [NSString alloc];
    WTF::FileSystemImpl::fileSystemRepresentation((uint64_t *)buf, a4, v33);
    if (*(void *)buf) {
      uint64_t v34 = *(void *)buf + 16;
    }
    else {
      uint64_t v34 = 0;
    }
    unsigned int v36 = (const void *)[v32 initWithUTF8String:v34];
    unint64_t v37 = *(WTF **)buf;
    *(void *)long long buf = 0;
    if (v37)
    {
      if (*(_DWORD *)v37 == 1) {
        WTF::fastFree(v37, v35);
      }
      else {
        --*(_DWORD *)v37;
      }
    }
    uint64_t v38 = (const void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initFileURLWithPath:v36 isDirectory:0];
    char v45 = 0;
    uint64_t v46 = 0;
    unint64_t v39 = (void *)[objc_alloc(MEMORY[0x1E4F1CB10]) initByResolvingBookmarkData:v30 options:0 relativeToURL:0 bookmarkDataIsStale:&v45 error:&v46];
    int v40 = [v39 startAccessingSecurityScopedResource];
    if (v39)
    {
      unsigned int v41 = [[WKModernDownloadProgress alloc] initWithDownloadTask:*(void *)(a1 + 80) download:a1 URL:v38 useDownloadPlaceholder:1 resumePlaceholderURL:v39 liveActivityAccessToken:v31];
      unsigned __int16 v42 = *(const void **)(a1 + 88);
      *(void *)(a1 + 88) = v41;
      if (v42) {
        CFRelease(v42);
      }
      WebKit::Download::startUpdatingProgress((WebKit::Download *)a1);
    }
    else
    {
      unsigned __int8 v43 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v46;
        _os_log_error_impl(&dword_1985F2000, v43, OS_LOG_TYPE_ERROR, "Download::resume: unable to create resume placeholder URL, error = %@", buf, 0xCu);
        if (!v40) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    if (!v40)
    {
LABEL_35:
      if (v39) {
        CFRetain(v39);
      }
      uint64_t v44 = *(const void **)(a1 + 96);
      *(void *)(a1 + 96) = v39;
      if (v44) {
        CFRelease(v44);
      }
      if (v39) {
        CFRelease(v39);
      }
      if (v38) {
        CFRelease(v38);
      }
      if (v36) {
        CFRelease(v36);
      }
      if (v31) {
        CFRelease(v31);
      }
      CFRelease(v30);
LABEL_48:
      if (v20) {
        CFRelease(v20);
      }
      return;
    }
LABEL_34:
    [v39 stopAccessingSecurityScopedResource];
    goto LABEL_35;
  }

  WTFLogAlways();
}

void sub_198A2F9C8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF *a11)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1) {
      WTF::fastFree(a11, a2);
    }
    else {
      --*(_DWORD *)a11;
    }
  }
  if (v13) {
    CFRelease(v13);
  }
  CFRelease(v12);
  if (v11) {
    CFRelease(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t *WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::add<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  CFTypeRef v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(result, 0), (uint64_t v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = *(unsigned int *)(v8 - 4);
        }
        char v27 = 0;
        uint64_t v28 = v8 + 16 * v22;
        goto LABEL_29;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  v16[1] = *a3;
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 12) = v21;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_22:
      CFTypeRef result = (uint64_t *)WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v23 = *v6;
      if (*v6) {
        unint64_t v26 = *(unsigned int *)(v23 - 4);
      }
      else {
        unint64_t v26 = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_22;
  }
  uint64_t v28 = v23 + 16 * v26;
  char v27 = 1;
LABEL_29:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v28;
  *(unsigned char *)(a4 + 16) = v27;
  return result;
}

uint64_t WebKit::Download::startUpdatingProgress(WebKit::Download *this)
{
  *((unsigned char *)this + 120) = 1;
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    uint64_t v3 = (void *)*((void *)this + 11);
    uint64_t result = [v3 startUpdatingDownloadProgress];
    if (!*((void *)this + 10) && *((unsigned char *)this + 136) && *((unsigned char *)this + 152))
    {
      uint64_t result = [v3 setCompletedUnitCount:*((void *)this + 16)];
      if (*((unsigned char *)this + 152))
      {
        uint64_t v4 = *((void *)this + 18);
        return [v3 setTotalUnitCount:v4];
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void WebKit::Download::platformCancelNetworkLoad(uint64_t a1, uint64_t *a2)
{
  char v2 = *(void **)(a1 + 80);
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a1 + 96));
  }
  uint64_t v5 = malloc_type_malloc(0x30uLL, 0x10E0040672CDC46uLL);
  void *v5 = MEMORY[0x1E4F14398];
  v5[1] = 50331650;
  void v5[2] = WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke;
  v5[3] = &WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::descriptor;
  v5[4] = v3;
  v5[5] = v4;
  [v2 cancelByProducingResumeData:v5];

  _Block_release(v5);
}

void sub_198A2FDB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::Download::platformDestroyDownload(WebKit::Download *this)
{
  char v2 = (const void *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    CFRelease(v2);
  }
  [*((id *)this + 11) cancel];
  uint64_t v3 = (void *)*((void *)this + 11);

  return [v3 unpublish];
}

void WebKit::Download::publishProgress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 88))
  {
    uint64_t v7 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1985F2000, v7, OS_LOG_TYPE_DEFAULT, "Progress is already being published for download.", buf, 2u);
    }
    return;
  }
  unint64_t v12 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a3 length:a4];
  unint64_t v13 = v12;
  if (v12) {
    CFRetain(v12);
  }
  unint64_t v14 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = v13;
  if (v14) {
    CFRelease(v14);
  }
  unsigned int v15 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a6 length:a7];
  char v32 = 0;
  uint64_t v31 = 0;
  uint64_t v16 = (const void *)[MEMORY[0x1E4F1CB10] URLByResolvingBookmarkData:*(void *)(a1 + 104) options:256 relativeToURL:0 bookmarkDataIsStale:&v32 error:&v31];
  uint64_t v17 = v16;
  if (v16) {
    CFRetain(v16);
  }
  uint64_t v18 = *(const void **)(a1 + 112);
  *(void *)(a1 + 112) = v17;
  if (v18)
  {
    CFRelease(v18);
    uint64_t v17 = *(const void **)(a1 + 112);
  }
  if (!v17)
  {
    int v19 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v34 = v31;
      _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "Unable to create bookmark URL, error = %@", buf, 0xCu);
    }
  }
  if (!enableModernDownloadProgress())
  {
    int v24 = [WKDownloadProgress alloc];
    uint64_t v25 = *(void *)(a1 + 80);
    unint64_t v30 = 0;
    uint64_t v26 = [(WKDownloadProgress *)v24 initWithDownloadTask:v25 download:a1 URL:WTF::URL::operator NSURL *() sandboxExtension:&v30];
    char v27 = *(const void **)(a1 + 88);
    *(void *)(a1 + 88) = v26;
    if (v27) {
      CFRelease(v27);
    }
    uint64_t v28 = v30;
    unint64_t v30 = 0;
    if (v28) {
      WTF::RefCounted<WebKit::SandboxExtension>::deref(v28);
    }
    [*(id *)(a1 + 88) publish];
    goto LABEL_29;
  }
  uint64_t v20 = (const void *)WTF::URL::operator NSURL *();
  int v21 = v20;
  if (v20)
  {
    CFRetain(v20);
    uint64_t v22 = [[WKModernDownloadProgress alloc] initWithDownloadTask:*(void *)(a1 + 80) download:a1 URL:v21 useDownloadPlaceholder:a5 resumePlaceholderURL:0 liveActivityAccessToken:v15];
    uint64_t v23 = *(const void **)(a1 + 88);
    *(void *)(a1 + 88) = v22;
    if (v23) {
      CFRelease(v23);
    }
    if ((a5 & 1) == 0) {
      WebKit::Download::startUpdatingProgress((WebKit::Download *)a1);
    }
    [*(id *)(a1 + 88) publish];
    CFRelease(v21);
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  uint64_t v29 = off_1EB358988;
  if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
  {
LABEL_29:
    if (!v15) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl(&dword_1985F2000, v29, OS_LOG_TYPE_ERROR, "Download::publishProgress: Invalid publish URL", buf, 2u);
  if (v15) {
LABEL_30:
  }
    CFRelease(v15);
LABEL_31:
  if (v13) {
    CFRelease(v13);
  }
}

void sub_198A3016C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const char ***a10)
{
  if (a10) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(a10);
  }
  if (v11) {
    CFRelease(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::Download::setPlaceholderURL(WebKit::Download *this, void *cf, NSData *a3)
{
  if (cf)
  {
    CFRetain(cf);
    CFTypeRef v6 = (const void *)*((void *)this + 12);
    *((void *)this + 12) = cf;
    if (v6) {
      CFRelease(v6);
    }
    int v7 = [cf startAccessingSecurityScopedResource];
    unint64_t v33 = 0;
    uint64_t v8 = (const char *)[cf fileSystemRepresentation];
    char v9 = (WebKit::SandboxExtensionImpl *)v8;
    if (v8) {
      unsigned int v10 = strlen(v8);
    }
    else {
      unsigned int v10 = 0;
    }
    WebKit::SandboxExtension::createHandleWithoutResolvingPath(v9, (WebKit::SandboxExtensionImpl *)(v10 | 0x100000000), 0, (uint64_t)&v30);
    if (v31)
    {
      uint64_t v11 = v30;
      unint64_t v30 = 0;
      unint64_t v12 = (const char **)v33;
      unint64_t v33 = v11;
      if (!v12 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v12), WTF::fastFree(v27, v28), v31)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v30);
      }
    }
    if (v7) {
      [cf stopAccessingSecurityScopedResource];
    }
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 2, (uint64_t)this);
    unint64_t v13 = (atomic_uint *)*((void *)this + 1);
    if (v13) {
      atomic_fetch_add(v13, 1u);
    }
    unint64_t v14 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v14 = &unk_1EE9BBAB8;
    v14[1] = v13;
    uint64_t v14[2] = this;
    MEMORY[0x19972E8A0](&v30, cf);
    if (a3)
    {
      unsigned int v15 = [(NSData *)a3 bytes];
      NSUInteger v16 = [(NSData *)a3 length];
    }
    else
    {
      unsigned int v15 = 0;
      NSUInteger v16 = 0;
    }
    v29[0] = v15;
    v29[1] = v16;
    v32[0] = &v30;
    v32[1] = v29;
    v32[2] = &v33;
    uint64_t v17 = (*(uint64_t (**)(WebKit::Download *))(*(void *)this + 56))(this);
    uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v18 = 17;
    *((void *)v18 + 1) = v17;
    *((void *)v18 + 66) = (char *)v18 + 16;
    *((void *)v18 + 67) = 512;
    *((void *)v18 + 68) = 0;
    *((void *)v18 + 70) = 0;
    *((void *)v18 + 69) = 0;
    IPC::Encoder::encodeHeader(v18);
    uint64_t v35 = v18;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,std::span<unsigned char const,18446744073709551615ul> const&,WebKit::SandboxExtensionHandle &&>,void>::encode<IPC::Encoder,WebKit::SandboxExtensionHandle &&,0ul,1ul,2ul>(v18, (uint64_t)v32);
    int v19 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v19 = &unk_1EE9BBAE0;
    v19[1] = v14;
    uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v34[0] = v19;
    v34[1] = v20;
    (*(void (**)(WebKit::Download *, IPC::Encoder **, void *, void))(*(void *)this + 40))(this, &v35, v34, 0);
    uint64_t v22 = v34[0];
    v34[0] = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    uint64_t v23 = v35;
    uint64_t v35 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v21);
      WTF::fastFree(v25, v26);
    }
    int v24 = v30;
    unint64_t v30 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2) {
        WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
      }
      else {
        *(_DWORD *)v24 -= 2;
      }
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v33);
  }
}

void sub_198A304A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, const char **a19)
{
}

void WebKit::Download::setFinalURL(WebKit::Download *this, NSURL *a2, NSData *a3)
{
  if (a2)
  {
    BOOL v6 = [(NSURL *)a2 startAccessingSecurityScopedResource];
    char v27 = 0;
    int v7 = [(NSURL *)a2 fileSystemRepresentation];
    uint64_t v8 = (WebKit::SandboxExtensionImpl *)v7;
    uint64_t v9 = 0x100000000;
    if (v7) {
      uint64_t v9 = strlen(v7) | 0x100000000;
    }
    WebKit::SandboxExtension::createHandleWithoutResolvingPath(v8, (WebKit::SandboxExtensionImpl *)v9, 0, (uint64_t)&v24);
    if (v25)
    {
      unsigned int v10 = (const char **)v24;
      int v24 = 0;
      uint64_t v11 = v27;
      char v27 = v10;
      if (!v11 || (WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v11), WTF::fastFree(v21, v22), v25)) {
        WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)&v24);
      }
    }
    if (v6) {
      [(NSURL *)a2 stopAccessingSecurityScopedResource];
    }
    MEMORY[0x19972E8A0](&v24, a2);
    if (a3)
    {
      unint64_t v12 = [(NSData *)a3 bytes];
      NSUInteger v13 = [(NSData *)a3 length];
    }
    else
    {
      unint64_t v12 = 0;
      NSUInteger v13 = 0;
    }
    v23[0] = v12;
    v23[1] = v13;
    v26[0] = &v24;
    v26[1] = v23;
    v26[2] = &v27;
    uint64_t v14 = (*(uint64_t (**)(WebKit::Download *))(*(void *)this + 56))(this);
    unsigned int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v15 = 16;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 68) = 0;
    *((void *)v15 + 70) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    uint64_t v28 = v15;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,std::span<unsigned char const,18446744073709551615ul> const&,WebKit::SandboxExtensionHandle &&>,void>::encode<IPC::Encoder,WebKit::SandboxExtensionHandle &&,0ul,1ul,2ul>(v15, (uint64_t)v26);
    (*(void (**)(WebKit::Download *, IPC::Encoder **, void))(*(void *)this + 32))(this, &v28, 0);
    uint64_t v17 = v28;
    uint64_t v28 = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v16);
      WTF::fastFree(v19, v20);
    }
    uint64_t v18 = v24;
    int v24 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v27);
  }
}

void sub_198A307F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11)
{
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(v11 - 64));
  _Unwind_Resume(a1);
}

uint64_t WebKit::Download::updateProgress(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(void *)(this + 128) = a2;
  *(unsigned char *)(this + 136) = 1;
  *(void *)(this + 144) = a3;
  *(unsigned char *)(this + 152) = 1;
  if (*(unsigned char *)(this + 120))
  {
    uint64_t v5 = this;
    objc_opt_class();
    this = objc_opt_isKindOfClass();
    if ((this & 1) != 0 && !*(void *)(v5 + 80))
    {
      BOOL v6 = *(void **)(v5 + 88);
      [v6 setTotalUnitCount:a3];
      return [v6 setCompletedUnitCount:a2];
    }
  }
  return this;
}

void WebKit::Download::updateResumeDataWithPlaceholderURL(void *a1@<X0>, char *a2@<X1>, WTF *a3@<X2>, uint64_t a4@<X8>)
{
  if (!a1)
  {
    uint64_t v18 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      int v19 = "Download::updateResumeDataWithPlaceholderURL: placeholderURL equals nil.";
      uint64_t v20 = buf;
      goto LABEL_25;
    }
LABEL_19:
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a4, a2, a3);
    return;
  }
  int v8 = [a1 startAccessingSecurityScopedResource];
  *(void *)long long buf = 0;
  uint64_t v9 = (const void *)[a1 bookmarkDataWithOptions:0 includingResourceValuesForKeys:0 relativeToURL:0 error:buf];
  if (!v9)
  {
    uint64_t v18 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v21[0]) = 0;
      int v19 = "Download::updateResumeDataWithPlaceholderURL: could not create bookmark data from placeholderURL.";
      uint64_t v20 = (uint8_t *)v21;
LABEL_25:
      _os_log_error_impl(&dword_1985F2000, v18, OS_LOG_TYPE_ERROR, v19, v20, 2u);
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  unsigned int v10 = v9;
  CFRetain(v9);
  uint64_t v11 = (const void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBytes:a2 length:a3];
  unint64_t v12 = (void *)[MEMORY[0x1E4F28F98] propertyListWithData:v11 options:2 format:0 error:0];
  NSUInteger v13 = v12;
  if (v12) {
    CFRetain(v12);
  }
  [v13 setObject:v10 forKey:@"ResumePlaceholderURLBookmarkData"];
  v21[0] = 0;
  uint64_t v14 = (void *)[MEMORY[0x1E4F28F98] dataWithPropertyList:v13 format:100 options:0 error:v21];
  unsigned int v15 = v14;
  if (v14) {
    CFRetain(v14);
  }
  if (v8) {
    [a1 stopAccessingSecurityScopedResource];
  }
  if (v15)
  {
    NSUInteger v16 = (char *)[v15 bytes];
    uint64_t v17 = (WTF *)[v15 length];
  }
  else
  {
    NSUInteger v16 = 0;
    uint64_t v17 = 0;
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector<unsigned char const,18446744073709551615ul>(a4, v16, v17);
  if (v15) {
    CFRelease(v15);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (v11) {
    CFRelease(v11);
  }
  CFRelease(v10);
}

void sub_198A30B08(_Unwind_Exception *a1)
{
  if (v3) {
    CFRelease(v3);
  }
  if (v2) {
    CFRelease(v2);
  }
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void WebKit::Download::platformDidFinish(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 88) && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    uint64_t v4 = *(void **)(a1 + 88);
    uint64_t v5 = *a2;
    *a2 = 0;
    BOOL v6 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
    void *v6 = MEMORY[0x1E4F14398];
    v6[1] = 50331650;
    void v6[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke;
    v6[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::descriptor;
    v6[4] = v5;
    [v4 didFinish:v6];
    _Block_release(v6);
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a2);
  }
}

void sub_198A30C64(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::WebPushD::Connection::newConnectionWasInitialized(WebKit::WebPushD::Connection *this)
{
  uint64_t v2 = (uint64_t)this + 48;
  return IPC::MessageSender::sendWithoutUsingIPCConnection<Messages::PushClientConnection::InitializeConnection>((uint64_t)this + 32, &v2);
}

uint64_t IPC::MessageSender::sendWithoutUsingIPCConnection<Messages::PushClientConnection::InitializeConnection>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 675;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  IPC::ArgumentCoder<WebKit::WebPushD::WebPushDaemonConnectionConfiguration,void>::encode(v5, *a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, IPC::Encoder **))(*(void *)a1 + 16))(a1, &v12);
  int v8 = v12;
  unint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7;
}

void sub_198A30DD4(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, IPC::Encoder *a10)
{
  if (a10)
  {
    IPC::Encoder::~Encoder(a10, a2);
    WTF::fastFree(v11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::WebPushD::Connection::performSendWithoutUsingIPCConnection(xpc_connection_t *a1, IPC::Encoder *a2)
{
  WebKit::WebPushD::messageDictionaryFromEncoder(&v5, a2);
  uint64_t v3 = v5;
  (*((void (**)(xpc_connection_t *))*a1 + 2))(a1);
  xpc_connection_send_message(a1[2], v3);
  if (v3) {

  }
  return 1;
}

void sub_198A30E6C(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

void WebKit::WebPushD::messageDictionaryFromEncoder(void *a1, IPC::Encoder *a2)
{
  WebKit::encoderToXPCData(a2, &value);
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  *a1 = v3;
  xpc_dictionary_set_uint64(v3, "protocol version", 4uLL);
  id v4 = value;
  xpc_dictionary_set_value(v3, "encoded message", value);
  if (v4)
  {
  }
}

void sub_198A30F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebKit::WebPushD::Connection::performSendWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder *a2)
{
  return 1;
}

uint64_t WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(void *a1, IPC::Encoder *a2, uint64_t *a3)
{
  WebKit::WebPushD::messageDictionaryFromEncoder(&v10, a2);
  uint64_t v5 = v10;
  uint64_t v6 = *a3;
  *a3 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v7 = &unk_1EE9BBB68;
  v7[1] = v6;
  uint64_t v9 = v7;
  WebKit::Daemon::Connection::sendWithReply(a1, v5, (uint64_t *)&v9);
  if (v9) {
    (*(void (**)(void *))(*v9 + 8))(v9);
  }
  if (v5) {

  }
  return 1;
}

void sub_198A3101C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  if (v9) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(uint64_t a1, IPC::Encoder *a2, uint64_t *a3)
{
  return 1;
}

WTF *WebKit::PCM::Connection::newConnectionWasInitialized(WTF *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      xpc_object_t v3 = (xpc_connection_t *)this;
      uint64_t v4 = *(void *)(v2 + 24);
      if ((v4 & 0x8000000000000000) == 0 || v4 == -1)
      {
        if (*(unsigned char *)(v2 + 168))
        {
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          LOBYTE(v7) = 1;
          WebKit::Daemon::Encoder::encodeFixedLengthData((unsigned int *)&v9, &v7, 1uLL);
          uint64_t v7 = v9;
          uint64_t v8 = v10;
          uint64_t v9 = 0;
          uint64_t v10 = 0;
          WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::send(v3, 5, (uint64_t)&v7);
          uint64_t v6 = v7;
          if (v7)
          {
            uint64_t v7 = 0;
            LODWORD(v8) = 0;
            WTF::fastFree(v6, v5);
          }
          this = v9;
          if (v9)
          {
            uint64_t v9 = 0;
            LODWORD(v10) = 0;
            return (WTF *)WTF::fastFree(this, v5);
          }
        }
      }
    }
  }
  return this;
}

void sub_198A3116C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10, WTF *a11, int a12)
{
  if (a9) {
    WTF::fastFree(a9, a2);
  }
  if (a11) {
    WTF::fastFree(a11, a2);
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::PCM::Connection::connectionReceivedEvent(uint64_t a1, id a2)
{
  uint64_t result = object_getClass(a2);
  if (result == (WTF::StringImpl *)MEMORY[0x1E4F14590])
  {
    uint64_t result = (WTF::StringImpl *)xpc_dictionary_get_string(a2, "debug message");
    if (result)
    {
      uint64_t v5 = (const char *)result;
      uint64_t result = (WTF::StringImpl *)xpc_dictionary_get_uint64(a2, "debug message level");
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          char v8 = (char)result;
          uint64_t v10 = *(void *)(v7 + 24);
          uint64_t v9 = *(void *)(v7 + 32);
          strlen(v5);
          WTF::String::fromUTF8();
          WebKit::NetworkProcess::broadcastConsoleMessage(v9, v10, 14, v8, (uint64_t)&v12);
          uint64_t result = v12;
          unint64_t v12 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
        }
      }
    }
  }
  return result;
}

void WebKit::PCM::Connection::dictionaryFromMessage(unsigned int a1@<W1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  *a3 = v6;
  WebKit::PCM::addVersionAndEncodedMessageToDictionary(a2, v6);
  xpc_dictionary_set_uint64(v6, "message type", a1);
}

void sub_198A312EC(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

void sub_198A31394(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void WebKit::PCM::NetworkLoader::allowTLSCertificateChainForLocalPCMTesting(const void **a1)
{
  p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
  {
    allowedLocalTestServerTrust(void)::serverTrust = 0;
  }
  uint64_t v2 = (__objc2_meth_list *)*a1;
  if (*a1)
  {
    uint64_t v4 = (__objc2_meth_list *)*a1;
    CFRetain(v2);
    p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEDragInteractionDelegate + 40);
    uint64_t v2 = v4;
  }
  xpc_object_t v3 = p_opt_inst_meths[334];
  p_opt_inst_meths[334] = v2;
  if (v3)
  {
    CFRelease(v3);
  }
}

void WebKit::PCM::NetworkLoader::start(WTF::URL *this, WTF::JSONImpl::Value **a2, int a3, uint64_t *a4)
{
  {
    if (allowedLocalTestServerTrust(void)::serverTrust)
    {
      uint64_t v7 = WTF::URL::host(this);
      if ((char *)v7 == "127.0.0.1" || v8 != 9)
      {
        if ((char *)v7 == "127.0.0.1" && v8 == 9) {
          goto LABEL_9;
        }
      }
      else if ((v8 & 0xFF00000000) != 0)
      {
        if (*(unsigned char *)v7 == 49 && *(_DWORD *)(v7 + 1) == 808335154 && *(_DWORD *)(v7 + 5) == 825110574) {
          goto LABEL_9;
        }
      }
      else if (*(_WORD *)v7 == 49)
      {
        uint16x8_t v45 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v7 + 2), (int16x8_t)xmmword_1994F6040);
        v45.i16[0] = vminvq_u16(v45);
        if (v45.i32[0]) {
          goto LABEL_9;
        }
      }
      WTF::CompletionHandler<void ()(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&)>::operator()(a4);
      uint64_t v48 = 0;
      uint64_t v49 = 0;
      return;
    }
  }
  else
  {
    allowedLocalTestServerTrust(void)::serverTrust = 0;
  }
LABEL_9:
  uint64_t v9 = (WebCore::HTTPHeaderValues *)[objc_alloc(MEMORY[0x1E4F18D50]) initWithURL:WTF::URL::operator NSURL *()];
  if (*(void *)WebCore::HTTPHeaderValues::maxAge0(v9)) {
    uint64_t v10 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v10 = &stru_1EEA10550;
  }
  [(WebCore::HTTPHeaderValues *)v9 setValue:v10 forHTTPHeaderField:@"Cache-Control"];
  uint64_t v48 = 0;
  WebCore::standardUserAgentWithApplicationName();
  if (v49) {
    uint64_t v11 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    uint64_t v11 = &stru_1EEA10550;
  }
  [(WebCore::HTTPHeaderValues *)v9 setValue:v11, @"User-Agent", v48 forHTTPHeaderField];
  NSUInteger v13 = v49;
  uint64_t v49 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = v48;
  uint64_t v48 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (*a2)
  {
    if (*(void *)WebCore::HTTPHeaderValues::applicationJSONContentType((WebCore::HTTPHeaderValues *)[(WebCore::HTTPHeaderValues *)v9 setHTTPMethod:@"POST"])) {
      unsigned int v15 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      unsigned int v15 = &stru_1EEA10550;
    }
    [(WebCore::HTTPHeaderValues *)v9 setValue:v15, @"Content-Type", v48 forHTTPHeaderField];
    WTF::JSONImpl::Value::toJSONString((uint64_t *)&v48, *a2);
    WTF::String::utf8();
    uint64_t v17 = v48;
    uint64_t v48 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v49)
    {
      uint64_t v18 = (char *)v49 + 16;
      uint64_t v19 = *((void *)v49 + 1);
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v18 = 0;
    }
    id v20 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    int v21 = (const void *)objc_msgSend(v20, "initWithBytes:length:", v18, v19, v48);
    [(WebCore::HTTPHeaderValues *)v9 setHTTPBody:v21];
    if (v21) {
      CFRelease(v21);
    }
    uint64_t v23 = v49;
    uint64_t v49 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1) {
        WTF::fastFree(v23, v22);
      }
      else {
        --*(_DWORD *)v23;
      }
    }
  }
  if ((([(WebCore::HTTPHeaderValues *)v9 _needsNetworkTrackingPrevention] | a3) & 1) == 0)[(WebCore::HTTPHeaderValues *)v9 _setNeedsNetworkTrackingPrevention:1]; {
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  }
  if ((byte_1E93CF332 & 1) == 0)
  {
    qword_1E93CF340 = objc_opt_new();
    byte_1E93CF332 = 1;
  }
  p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
  if ((byte_1E93CF333 & 1) == 0)
  {
    uint64_t v46 = (void *)[MEMORY[0x1E4F18DD0] ephemeralSessionConfiguration];
    [v46 setHTTPCookieAcceptPolicy:1];
    [v46 setURLCredentialStorage:0];
    [v46 setURLCache:0];
    [v46 setHTTPCookieStorage:0];
    objc_msgSend(v46, "set_shouldSkipPreferredClientCertificateLookup:", 1);
    CFTypeRef v47 = (const void *)objc_msgSend(MEMORY[0x1E4F18DC0], "sessionWithConfiguration:delegate:delegateQueue:", v46, qword_1E93CF340, objc_msgSend(MEMORY[0x1E4F28F08], "mainQueue"));
    qword_1E93CF348 = (uint64_t)v47;
    if (v47) {
      CFRetain(v47);
    }
    byte_1E93CF333 = 1;
    p_opt_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___BEDragInteractionDelegate + 40);
  }
  uint64_t v26 = p_opt_inst_meths[105];
  uint64_t v27 = *a4;
  *a4 = 0;
  uint64_t v28 = malloc_type_malloc(0x30uLL, 0x10E0040AA5B57ACuLL);
  *uint64_t v28 = MEMORY[0x1E4F14398];
  v28[1] = 50331650;
  v28[2] = WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::{lambda(void *,NSData *,NSURLResponse *,NSError *)#1}::__invoke;
  double v28[3] = &WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::descriptor;
  v28[4] = v27;
  v28[5] = IdentifierInternal;
  uint64_t v29 = (void *)[(__objc2_meth_list *)v26 dataTaskWithRequest:v9 completionHandler:v28];
  _Block_release(v28);
  [v29 resume];
  if (byte_1E93CF334)
  {
    uint64_t v30 = qword_1E93CF350;
    if (qword_1E93CF350)
    {
LABEL_44:
      int v31 = *(_DWORD *)(v30 - 8);
      goto LABEL_45;
    }
  }
  else
  {
    qword_1E93CF350 = 0;
    byte_1E93CF334 = 1;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
  uint64_t v30 = qword_1E93CF350;
  if (qword_1E93CF350) {
    goto LABEL_44;
  }
  int v31 = 0;
LABEL_45:
  unint64_t v32 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  unint64_t v33 = 9 * ((v32 + ~(v32 << 13)) ^ ((v32 + ~(v32 << 13)) >> 8));
  unint64_t v34 = (v33 ^ (v33 >> 15)) + ~((v33 ^ (v33 >> 15)) << 27);
  unsigned int v35 = v31 & ((v34 >> 31) ^ v34);
  unsigned int v36 = (uint64_t *)(v30 + 16 * v35);
  uint64_t v37 = *v36;
  if (*v36)
  {
    uint64_t v38 = 0;
    int v39 = 1;
    while (v37 != IdentifierInternal)
    {
      if (v37 == -1) {
        uint64_t v38 = v36;
      }
      unsigned int v35 = (v35 + v39) & v31;
      unsigned int v36 = (uint64_t *)(v30 + 16 * v35);
      uint64_t v37 = *v36;
      ++v39;
      if (!*v36)
      {
        if (v38)
        {
          *uint64_t v38 = 0;
          v38[1] = 0;
          --*(_DWORD *)(v30 - 16);
          unsigned int v36 = v38;
        }
        goto LABEL_53;
      }
    }
    goto LABEL_66;
  }
LABEL_53:
  uint64_t *v36 = IdentifierInternal;
  if (v29) {
    CFRetain(v29);
  }
  int v40 = (const void *)v36[1];
  v36[1] = (uint64_t)v29;
  if (v40) {
    CFRelease(v40);
  }
  if (qword_1E93CF350) {
    int v41 = *(_DWORD *)(qword_1E93CF350 - 12) + 1;
  }
  else {
    int v41 = 1;
  }
  *(_DWORD *)(qword_1E93CF350 - 12) = v41;
  if (qword_1E93CF350) {
    int v42 = *(_DWORD *)(qword_1E93CF350 - 12);
  }
  else {
    int v42 = 0;
  }
  uint64_t v43 = (*(_DWORD *)(qword_1E93CF350 - 16) + v42);
  unint64_t v44 = *(unsigned int *)(qword_1E93CF350 - 4);
  if (v44 <= 0x400)
  {
    if (3 * v44 > 4 * v43) {
      goto LABEL_66;
    }
    goto LABEL_65;
  }
  if (v44 <= 2 * v43) {
LABEL_65:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand();
LABEL_66:
  if (v9) {
    CFRelease(v9);
  }
}

void sub_198A31B98(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)a9;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL WTF::operator==(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  int v6 = a4 - 1;
  if (!a4) {
    int v6 = 0;
  }
  uint64_t v7 = (int8x16_t *)(a1 == a3);
  BOOL result = a2 == v6 && a1 == a3;
  if (a1 == a3 || a2 != v6) {
    return result;
  }
  if (!a2) {
    return 1;
  }
  if ((a2 & 0xFF00000000) == 0)
  {
    if (!v6)
    {
LABEL_37:
      __break(1u);
LABEL_38:
      int v11 = v4->u16[0];
      int v12 = v7->u16[0];
      return v11 == v12;
    }
    if (*(_WORD *)a1 != *a3) {
      return 0;
    }
    uint64_t v14 = (int16x8_t *)(a1 + 2);
    unsigned int v15 = v6 - 1;
    NSUInteger v16 = (uint8x8_t *)(a3 + 1);
    if (v15 >= 8)
    {
      uint16x8_t v17 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v16));
      v17.i16[0] = vminvq_u16(v17);
      if (!v17.i32[0]) {
        return 0;
      }
      unsigned int v18 = v15 & 7;
      do
      {
        uint16x8_t v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v18), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v16 + v18)));
        v19.i16[0] = vminvq_u16(v19);
        BOOL result = v19.i32[0] != 0;
        v18 += 8;
        if (v19.i32[0]) {
          BOOL v20 = v18 >= v15;
        }
        else {
          BOOL v20 = 1;
        }
      }
      while (!v20);
      return result;
    }
    if (v15 >= 4)
    {
      unint64_t v26 = (v16->u32[0] | ((unint64_t)v16->u32[0] << 16)) & 0xFFFF0000FFFFLL;
      BOOL v13 = ((v26 | (v26 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0];
      uint64_t v27 = v15 & 3;
      unint64_t v28 = (*(unsigned int *)((char *)v16->u32 + v27) | ((unint64_t)*(unsigned int *)((char *)v16->u32 + v27) << 16)) & 0xFFFF0000FFFFLL;
      uint64_t v29 = (v28 | (v28 << 8)) & 0xFF00FF00FF00FFLL;
      uint64_t v30 = *(uint64_t *)((char *)v14->i64 + 2 * v27);
      return v13 && v29 == v30;
    }
    if (v15 >= 2)
    {
      int v31 = (v16->u16[0] | (v16->u16[0] << 8)) & 0xFF00FF;
      __int32 v32 = v14->i32[0];
      uint64_t v33 = v15 & 1;
      int v34 = (*(unsigned __int16 *)((char *)v16->u16 + v33) | (*(unsigned __int16 *)((char *)v16->u16 + v33) << 8)) & 0xFF00FF;
      int v35 = *(__int32 *)((char *)v14->i32 + 2 * v33);
      return v31 == v32 && v34 == v35;
    }
    if (v15 == 1)
    {
      int v12 = v16->u8[0];
      int v11 = v14->u16[0];
      return v11 == v12;
    }
    return 1;
  }
  if (!v6) {
    goto LABEL_37;
  }
  if (*a1 != *a3) {
    return 0;
  }
  unsigned int v9 = v6 - 1;
  if (v6 == 1) {
    return 1;
  }
  uint64_t v4 = (int8x16_t *)(a1 + 1);
  uint64_t v7 = (int8x16_t *)(a3 + 1);
  if (v6 == 2)
  {
    int v11 = v4->u8[0];
    int v12 = v7->u8[0];
    return v11 == v12;
  }
  unsigned int v10 = 32 - __clz(v6 - 2);
  if (v10 == 3)
  {
    if (v4->i32[0] == v7->i32[0])
    {
      int v11 = *(_DWORD *)&a1[v6 - 4];
      int v12 = *(_DWORD *)&a3[v6 - 4];
      return v11 == v12;
    }
    return 0;
  }
  switch(v10)
  {
    case 1u:
      goto LABEL_38;
    case 2u:
      if (v4->u16[0] != v7->u16[0]) {
        return 0;
      }
      int v11 = *(unsigned __int16 *)&a1[v6 - 2];
      int v12 = *(unsigned __int16 *)&a3[v6 - 2];
      return v11 == v12;
    case 4u:
      if (v4->i64[0] != v7->i64[0]) {
        return 0;
      }
      return *(void *)&a1[v6 - 8] == *(void *)&a3[v6 - 8];
    case 5u:
      uint8x16_t v21 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[v6 - 16], *(int8x16_t *)&a3[v6 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
      v21.i8[0] = vminvq_u8(v21);
      return v21.i32[0] != 0;
    default:
      uint8x16_t v22 = (uint8x16_t)vceqq_s8(*v4, *v7);
      v22.i8[0] = vminvq_u8(v22);
      if (!v22.i32[0]) {
        return 0;
      }
      if (v9 < 0x10) {
        return 1;
      }
      unsigned int v23 = v9 & 0xF;
      do
      {
        uint8x16_t v24 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v4 + v23), *(int8x16_t *)((char *)v7 + v23));
        v24.i8[0] = vminvq_u8(v24);
        BOOL result = v24.i32[0] != 0;
        v23 += 16;
        if (v24.i32[0]) {
          BOOL v25 = v23 >= v9;
        }
        else {
          BOOL v25 = 1;
        }
      }
      while (!v25);
      break;
  }
  return result;
}

{
  int8x16_t *v4;
  unsigned int v5;
  BOOL result;
  int8x16_t *v8;
  unsigned int v9;
  __int32 v10;
  unsigned __int8 *v11;
  __int32 v12;
  BOOL v13;
  int16x8_t *v14;
  unsigned int v15;
  uint8x8_t *v16;
  uint16x8_t v17;
  unsigned int v18;
  uint16x8_t v19;
  BOOL v20;
  uint8x8_t *v21;
  unsigned int v22;
  uint16x8_t v23;
  unsigned int v24;
  uint16x8_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint16x8_t v29;
  uint8x16_t v30;
  unsigned int v31;
  unsigned int v32;
  uint8x16_t v33;
  BOOL v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  __int32 v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  __int32 v51;
  uint64_t v52;
  int v53;
  int v54;
  uint16x8_t v55;
  unsigned int v56;
  uint16x8_t v57;
  BOOL v58;

  BOOL result = a2 == a4 && a1 == a3;
  if (a1 == a3 || a2 != a4) {
    return result;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v8 = (int8x16_t *)(a4 & 0xFF00000000);
  if ((a2 & 0xFF00000000) != 0)
  {
    if (v8)
    {
      if (a4)
      {
        if (*a1 != *a3) {
          return 0;
        }
        uint64_t v5 = a4 - 1;
        if (a4 != 1)
        {
          uint64_t v4 = (int8x16_t *)(a1 + 1);
          uint64_t v8 = (int8x16_t *)(a3 + 1);
          if (a4 != 2)
          {
            unsigned int v9 = 32 - __clz(a4 - 2);
            if (v9 != 3)
            {
              switch(v9)
              {
                case 1u:
                  goto LABEL_60;
                case 2u:
                  if (v4->u16[0] != v8->u16[0]) {
                    return 0;
                  }
                  unsigned int v10 = *(unsigned __int16 *)&a1[a4 - 2];
                  int v12 = *(unsigned __int16 *)&a3[a4 - 2];
                  return v10 == v12;
                case 4u:
                  if (v4->i64[0] != v8->i64[0]) {
                    return 0;
                  }
                  uint64_t v27 = *(void *)&a1[a4 - 8];
                  unint64_t v28 = &a3[a4];
                  return v27 == *((void *)v28 - 1);
                case 5u:
                  uint64_t v29 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)&a1[a4 - 16], *(int8x16_t *)&a3[a4 - 16]), vceqq_s8(*(int8x16_t *)(a1 + 1), *(int8x16_t *)(a3 + 1)));
                  v29.i8[0] = vminvq_u8((uint8x16_t)v29);
                  return v29.i32[0] != 0;
                default:
                  uint64_t v30 = (uint8x16_t)vceqq_s8(*v4, *v8);
                  v30.i8[0] = vminvq_u8(v30);
                  if (!v30.i32[0]) {
                    return 0;
                  }
                  if (v5 < 0x10) {
                    return 1;
                  }
                  goto LABEL_62;
              }
            }
            if (v4->i32[0] == v8->i32[0])
            {
              unsigned int v10 = *(_DWORD *)&a1[a4 - 4];
              int v11 = &a3[a4];
LABEL_16:
              int v12 = *((_DWORD *)v11 - 1);
              return v10 == v12;
            }
            return 0;
          }
          unsigned int v10 = v4->u8[0];
          int v12 = v8->u8[0];
          return v10 == v12;
        }
        return 1;
      }
      goto LABEL_61;
    }
    if (a4)
    {
      if (*(_WORD *)a3 != *a1) {
        return 0;
      }
      uint8x16_t v21 = (uint8x8_t *)(a1 + 1);
      uint8x16_t v22 = a4 - 1;
      uint64_t v14 = (int16x8_t *)(a3 + 2);
      if ((a4 - 1) >= 8)
      {
        unsigned int v23 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v21));
        v23.i16[0] = vminvq_u16(v23);
        if (!v23.i32[0]) {
          return 0;
        }
        uint8x16_t v24 = v22 & 7;
        do
        {
          BOOL v25 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v24), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v21 + v24)));
          v25.i16[0] = vminvq_u16(v25);
          BOOL result = v25.i32[0] != 0;
          v24 += 8;
          if (v25.i32[0]) {
            unint64_t v26 = v24 >= v22;
          }
          else {
            unint64_t v26 = 1;
          }
        }
        while (!v26);
        return result;
      }
      if (v22 >= 4)
      {
        int v35 = (v21->u32[0] | ((unint64_t)v21->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        BOOL v13 = ((v35 | (v35 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0];
        unsigned int v36 = v22 & 3;
        uint64_t v37 = (*(unsigned int *)((char *)v21->u32 + v36) | ((unint64_t)*(unsigned int *)((char *)v21->u32 + v36) << 16)) & 0xFFFF0000FFFFLL;
        uint64_t v38 = (v37 | (v37 << 8)) & 0xFF00FF00FF00FFLL;
        int v39 = *(uint64_t *)((char *)v14->i64 + 2 * v36);
        return v13 && v38 == v39;
      }
      if (v22 >= 2)
      {
        uint16x8_t v45 = (v21->u16[0] | (v21->u16[0] << 8)) & 0xFF00FF;
        uint64_t v46 = v14->i32[0];
        CFTypeRef v47 = v22 & 1;
        uint64_t v48 = (*(unsigned __int16 *)((char *)v21->u16 + v47) | (*(unsigned __int16 *)((char *)v21->u16 + v47) << 8)) & 0xFF00FF;
        uint64_t v49 = *(__int32 *)((char *)v14->i32 + 2 * v47);
        return v45 == v46 && v48 == v49;
      }
      if (a4 != 2) {
        return 1;
      }
      int v12 = v21->u8[0];
LABEL_89:
      unsigned int v10 = v14->u16[0];
      return v10 == v12;
    }
LABEL_61:
    __break(1u);
LABEL_62:
    __int32 v32 = v5 & 0xF;
    do
    {
      uint64_t v33 = (uint8x16_t)vceqq_s8(*(int8x16_t *)((char *)v4 + v32), *(int8x16_t *)((char *)v8 + v32));
      v33.i8[0] = vminvq_u8(v33);
      BOOL result = v33.i32[0] != 0;
      v32 += 16;
      if (v33.i32[0]) {
        int v34 = v32 >= v5;
      }
      else {
        int v34 = 1;
      }
    }
    while (!v34);
    return result;
  }
  if (v8)
  {
    if (!a4) {
      goto LABEL_61;
    }
    if (*(_WORD *)a1 != *a3) {
      return 0;
    }
    uint64_t v14 = (int16x8_t *)(a1 + 2);
    unsigned int v15 = a4 - 1;
    NSUInteger v16 = (uint8x8_t *)(a3 + 1);
    if ((a4 - 1) < 8)
    {
      if (v15 >= 4)
      {
        int v40 = (v16->u32[0] | ((unint64_t)v16->u32[0] << 16)) & 0xFFFF0000FFFFLL;
        BOOL v13 = ((v40 | (v40 << 8)) & 0xFF00FF00FF00FFLL) == v14->i64[0];
        int v41 = v15 & 3;
        int v42 = (*(unsigned int *)((char *)v16->u32 + v41) | ((unint64_t)*(unsigned int *)((char *)v16->u32 + v41) << 16)) & 0xFFFF0000FFFFLL;
        uint64_t v43 = (v42 | (v42 << 8)) & 0xFF00FF00FF00FFLL;
        unint64_t v44 = *(uint64_t *)((char *)v14->i64 + 2 * v41);
        return v13 && v43 == v44;
      }
      if (v15 >= 2)
      {
        uint64_t v50 = (v16->u16[0] | (v16->u16[0] << 8)) & 0xFF00FF;
        uint64_t v51 = v14->i32[0];
        uint64_t v52 = v15 & 1;
        char v53 = (*(unsigned __int16 *)((char *)v16->u16 + v52) | (*(unsigned __int16 *)((char *)v16->u16 + v52) << 8)) & 0xFF00FF;
        char v54 = *(__int32 *)((char *)v14->i32 + 2 * v52);
        return v50 == v51 && v53 == v54;
      }
      if (a4 != 2) {
        return 1;
      }
      int v12 = v16->u8[0];
      goto LABEL_89;
    }
    uint16x8_t v17 = (uint16x8_t)vceqq_s16(*v14, (int16x8_t)vmovl_u8(*v16));
    v17.i16[0] = vminvq_u16(v17);
    if (!v17.i32[0]) {
      return 0;
    }
    unsigned int v18 = v15 & 7;
    do
    {
      uint16x8_t v19 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v14 + 2 * v18), (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v16 + v18)));
      v19.i16[0] = vminvq_u16(v19);
      BOOL result = v19.i32[0] != 0;
      v18 += 8;
      if (v19.i32[0]) {
        BOOL v20 = v18 >= v15;
      }
      else {
        BOOL v20 = 1;
      }
    }
    while (!v20);
  }
  else
  {
    if (!a4) {
      goto LABEL_61;
    }
    if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a3) {
      return 0;
    }
    int v31 = a4 - 1;
    if (a4 == 1) {
      return 1;
    }
    uint64_t v4 = (int8x16_t *)(a1 + 2);
    uint64_t v8 = (int8x16_t *)(a3 + 2);
    if (a4 == 2)
    {
LABEL_60:
      unsigned int v10 = v4->u16[0];
      int v12 = v8->u16[0];
      return v10 == v12;
    }
    switch(31 - __clz(a4 - 2))
    {
      case 0u:
        unsigned int v10 = v4->i32[0];
        int v12 = v8->i32[0];
        return v10 == v12;
      case 1u:
        if (v4->i32[0] != v8->i32[0]) {
          return 0;
        }
        unsigned int v10 = *(_DWORD *)&a1[2 * a4 - 4];
        int v11 = &a3[2 * a4];
        goto LABEL_16;
      case 2u:
        if (v4->i64[0] != v8->i64[0]) {
          return 0;
        }
        uint64_t v27 = *(void *)&a1[2 * a4 - 8];
        unint64_t v28 = &a3[2 * a4];
        return v27 == *((void *)v28 - 1);
      case 3u:
        uint64_t v29 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(*(int16x8_t *)&a1[2 * a4 - 16], *(int16x8_t *)&a3[2 * a4 - 16]), (int8x16_t)vceqq_s16(*(int16x8_t *)(a1 + 2), *(int16x8_t *)(a3 + 2)));
        v29.i16[0] = vminvq_u16(v29);
        return v29.i32[0] != 0;
      default:
        uint64_t v55 = (uint16x8_t)vceqq_s16(*(int16x8_t *)v4, *(int16x8_t *)v8);
        v55.i16[0] = vminvq_u16(v55);
        if (!v55.i32[0]) {
          return 0;
        }
        if (v31 < 8) {
          return 1;
        }
        uint64_t v56 = v31 & 7;
        do
        {
          unint64_t v57 = (uint16x8_t)vceqq_s16(*(int16x8_t *)((char *)v4 + 2 * v56), *(int16x8_t *)((char *)v8 + 2 * v56));
          v57.i16[0] = vminvq_u16(v57);
          BOOL result = v57.i32[0] != 0;
          v56 += 8;
          if (v57.i32[0]) {
            uint64_t v58 = v56 >= v31;
          }
          else {
            uint64_t v58 = 1;
          }
        }
        while (!v58);
        break;
    }
  }
  return result;
}

uint64_t WTF::CompletionHandler<void ()(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A3206C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::WebPushD::Connection::~Connection(WebKit::WebPushD::Connection *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9BB8F0;
  *((void *)this + 4) = &unk_1EE9BB950;
  xpc_object_t v3 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v5, a2);
  }

  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WTF *v6;
  void *v7;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BB8F0;
  *((void *)this + 4) = &unk_1EE9BB950;
  xpc_object_t v3 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF *)*((void *)this + 6);
  if (v5)
  {
    *((void *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v5, a2);
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(this, a2);

  WTF::fastFree(v6, v7);
}

void WebKit::WebPushD::Connection::dictionaryFromMessage(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebKit::WebPushD::Connection::messageSenderConnection(WebKit::WebPushD::Connection *this)
{
  return 0;
}

uint64_t WebKit::WebPushD::Connection::messageSenderDestinationID(WebKit::WebPushD::Connection *this)
{
  return 0;
}

void non-virtual thunk to'WebKit::WebPushD::Connection::~Connection(WebKit::WebPushD::Connection *this, WTF::StringImpl *a2)
{
  xpc_object_t v3 = (WebKit::WebPushD::Connection *)((char *)this - 32);
  *((void *)this - 4) = &unk_1EE9BB8F0;
  *(void *)this = &unk_1EE9BB950;
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }

  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(v3, a2);
}

{
  WebKit::Daemon::Connection *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF *v7;
  void *v8;
  uint64_t vars8;

  xpc_object_t v3 = (WebKit::WebPushD::Connection *)((char *)this - 32);
  *((void *)this - 4) = &unk_1EE9BB8F0;
  *(void *)this = &unk_1EE9BB950;
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (WTF *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v6, a2);
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(v3, a2);

  WTF::fastFree(v7, v8);
}

uint64_t non-virtual thunk to'WebKit::WebPushD::Connection::messageSenderConnection(WebKit::WebPushD::Connection *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebPushD::Connection::messageSenderDestinationID(WebKit::WebPushD::Connection *this)
{
  return 0;
}

void WebKit::PCM::Connection::~Connection(WebKit::PCM::Connection *this, void *a2)
{
  *(void *)this = &unk_1EE9BB9A0;
  xpc_object_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(this, a2);
}

{
  unsigned int *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BB9A0;
  xpc_object_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(this, a2);

  JUMPOUT(0x199740C10);
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSData *)>::fromCallable<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0>(WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0)::{lambda(void *,NSData *)#1}::__invoke(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v6 = (void *)WTF::fastMalloc((WTF *)0x20);
  void *v6 = &unk_1EE9BBA00;
  v6[1] = cf;
  void v6[2] = v4;
  v6[3] = v5;
  uint64_t v8 = (uint64_t)v6;
  WTF::ensureOnMainRunLoop();
  uint64_t result = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

void sub_198A32630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0::operator()(NSData *)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BBA00;
  uint64_t v2 = (const void *)a1[3];
  a1[3] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (const void *)a1[1];
  a1[1] = 0;
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0::operator()(NSData *)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BBA00;
  uint64_t v3 = (const void *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    CFRelease(v5);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::Download::platformCancelNetworkLoad(WTF::CompletionHandler<void ()(std::span<unsigned char const,18446744073709551615ul>)> &&)::$_0::operator()(NSData *)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = (char *)[*(id *)(a1 + 8) bytes];
    uint64_t v5 = (WTF *)[v3 length];
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
  }
  WebKit::Download::updateResumeDataWithPlaceholderURL(v2, v4, v5, (uint64_t)&v11);
  int v6 = v11;
  uint64_t v7 = v13;
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, WTF *, uint64_t))(*(void *)v8 + 16))(v8, v6, v7);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t result = v11;
  if (v11)
  {
    int v11 = 0;
    int v12 = 0;
    return (WTF *)WTF::fastFree(result, v9);
  }
  return result;
}

void sub_198A328E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, int a10)
{
  (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  if (a9) {
    WTF::fastFree(a9, v12);
  }
  _Unwind_Resume(a1);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSData *,NSURLResponse *,NSError *)>::fromCallable<WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0>(WebKit::PCM::NetworkLoader::start(WTF::URL &&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl>,WTF::DefaultRefDerefTraits<WTF::JSONImpl>> &&,WebCore::PrivateClickMeasurement::PcmDataCarried,WTF::CompletionHandler<void ()(WTF::String const&,WTF::DefaultRefDerefTraits<WTF::JSONImpl> const&)> &&)::$_0)::{lambda(void *,NSData *,NSURLResponse *,NSError *)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  int v6 = (uint64_t *)(a1 + 32);
  if (byte_1E93CF334)
  {
    if (qword_1E93CF350)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      unsigned int v8 = *(_DWORD *)(qword_1E93CF350 - 8);
      unint64_t v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
      unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
      uint64_t v13 = *(void *)(qword_1E93CF350 + 16 * v12);
      if (v13 != v7)
      {
        int v14 = 1;
        while (v13)
        {
          uint64_t v12 = (v12 + v14) & v8;
          uint64_t v13 = *(void *)(qword_1E93CF350 + 16 * v12);
          ++v14;
          if (v13 == v7) {
            goto LABEL_9;
          }
        }
        uint64_t v12 = *(unsigned int *)(qword_1E93CF350 - 4);
      }
LABEL_9:
      if (v12 != *(_DWORD *)(qword_1E93CF350 - 4))
      {
        unsigned int v15 = (void *)(qword_1E93CF350 + 16 * v12);
        NSUInteger v16 = (const void *)v15[1];
        void *v15 = -1;
        v15[1] = 0;
        if (v16) {
          CFRelease(v16);
        }
        uint64_t v17 = qword_1E93CF350;
        ++*(_DWORD *)(qword_1E93CF350 - 16);
        if (v17) {
          int v18 = *(_DWORD *)(v17 - 12) - 1;
        }
        else {
          int v18 = -1;
        }
        *(_DWORD *)(v17 - 12) = v18;
        if (qword_1E93CF350)
        {
          unsigned int v19 = *(_DWORD *)(qword_1E93CF350 - 4);
          if (6 * *(_DWORD *)(qword_1E93CF350 - 12) < v19 && v19 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v19 >> 1);
          }
        }
      }
    }
    if (a4) {
      goto LABEL_23;
    }
  }
  else
  {
    qword_1E93CF350 = 0;
    byte_1E93CF334 = 1;
    if (a4)
    {
LABEL_23:
      MEMORY[0x19972EAD0](&v30, [a4 localizedDescription]);
      WTF::CompletionHandler<void ()(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&)>::operator()(v6);
LABEL_24:
      uint64_t result = (uint64_t)v30;
      uint64_t v30 = 0;
      if (!result) {
        return result;
      }
      int v23 = *(_DWORD *)result - 2;
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
      }
      goto LABEL_47;
    }
  }
  if (a2)
  {
    [a2 bytes];
    [a2 length];
  }
  WTF::String::fromUTF8();
  WTF::JSONImpl::Value::parseJSON();
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, v24);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  BOOL v25 = v30;
  if (!v30)
  {
    uint64_t v30 = 0;
    WTF::CompletionHandler<void ()(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&)>::operator()(v6);
    goto LABEL_24;
  }
  unint64_t v26 = 0;
  unsigned int v27 = *((_DWORD *)v30 + 1);
  if (v27 >= 5 && v27 != 6)
  {
    if (v27 != 5)
    {
      uint64_t result = 490;
      __break(0xC471u);
      return result;
    }
    ++*(_DWORD *)v30;
    unint64_t v26 = v25;
  }
  unint64_t v28 = v26;
  WTF::CompletionHandler<void ()(WTF::String const&,WTF::RefPtr<WTF::JSONImpl::Object,WTF::RawPtrTraits<WTF::JSONImpl::Object>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Object>> const&)>::operator()(v6);
  if (v28)
  {
    if (*(_DWORD *)v28 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)v28;
    }
  }
  uint64_t result = (uint64_t)v30;
  uint64_t v30 = 0;
  if (result)
  {
    int v23 = *(_DWORD *)result - 1;
    if (*(_DWORD *)result == 1) {
      return WTF::JSONImpl::Value::operator delete();
    }
LABEL_47:
    *(_DWORD *)uint64_t result = v23;
  }
  return result;
}

void sub_198A32CF4(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12)
{
  if (a11)
  {
    if (*(_DWORD *)a11 == 1) {
      WTF::JSONImpl::Value::operator delete();
    }
    else {
      --*(_DWORD *)a11;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(unsigned int a1)
{
  uint64_t v2 = qword_1E93CF350;
  if (qword_1E93CF350)
  {
    int v3 = *(_DWORD *)(qword_1E93CF350 - 4);
    int v4 = *(_DWORD *)(qword_1E93CF350 - 12);
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  uint64_t result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1E93CF350 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *uint64_t result = 0;
  *(_DWORD *)(qword_1E93CF350 - 12) = v4;
  if (v3)
  {
    uint64_t v7 = 0;
    while (1)
    {
      unsigned int v8 = (uint64_t *)(v2 + 16 * v7);
      uint64_t v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1E93CF350) {
            int v12 = *(_DWORD *)(qword_1E93CF350 - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(qword_1E93CF350 + 16 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          BOOL v20 = (uint64_t *)(qword_1E93CF350 + 16 * v18);
          uint8x16_t v21 = (const void *)v20[1];
          v20[1] = 0;
          if (v21) {
            CFRelease(v21);
          }
          *BOOL v20 = *v8;
          uint64_t v22 = v2 + 16 * v7;
          uint64_t v23 = *(void *)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          v20[1] = v23;
          unint64_t v11 = *(const void **)(v22 + 8);
          *(void *)(v22 + 8) = 0;
          if (!v11) {
            goto LABEL_19;
          }
LABEL_18:
          CFRelease(v11);
          goto LABEL_19;
        }
        uint64_t v10 = v2 + 16 * v7;
        unint64_t v11 = *(const void **)(v10 + 8);
        *(void *)(v10 + 8) = 0;
        if (v11) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v7 == v3) {
        goto LABEL_22;
      }
    }
  }
  if (v2)
  {
LABEL_22:
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  }
  return result;
}

void WebKit::Daemon::ConnectionToMachService<WebKit::WebPushD::ConnectionTraits>::~ConnectionToMachService(WebKit::Daemon::Connection *this, void *a2)
{
  *(void *)this = &unk_1EE9BBBD0;
  int v3 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1) {
      WTF::fastFree(v3, a2);
    }
    else {
      --*(_DWORD *)v3;
    }
  }

  WebKit::Daemon::Connection::~Connection(this, a2);
}

void WebKit::Daemon::Connection::~Connection(WebKit::Daemon::Connection *this, void *a2)
{
  *(void *)this = &unk_1EE9BBC10;
  int v3 = (void *)*((void *)this + 2);
  if (v3) {

  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  uint64_t vars8;

  WebKit::Daemon::Connection::~Connection(this, a2);

  JUMPOUT(0x199740C10);
}

void WebKit::Daemon::ConnectionToMachService<WebKit::PCM::ConnectionTraits>::~ConnectionToMachService(WebKit::Daemon::Connection *this, void *a2)
{
  *(void *)this = &unk_1EE9BBB90;
  int v3 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1) {
      WTF::fastFree(v3, a2);
    }
    else {
      --*(_DWORD *)v3;
    }
  }

  WebKit::Daemon::Connection::~Connection(this, a2);
}

BOOL WTF::equalIgnoringASCIICaseWithLength<unsigned char,unsigned char>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if (*(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(result + v6)) == *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(a3 + v6)))
      {
        BOOL v5 = ++v6 >= a5;
        if (a5 != v6) {
          continue;
        }
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<unsigned char,char16_t>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if ((*(unsigned __int16 *)(a3 + 2 * v6) | (32 * (*(unsigned __int16 *)(a3 + 2 * v6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(result + v6)))
      {
        BOOL v5 = ++v6 >= a5;
        if (a5 != v6) {
          continue;
        }
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<char16_t,unsigned char>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if ((*(unsigned __int16 *)(result + 2 * v6) | (32
                                                    * (*(unsigned __int16 *)(result + 2 * v6) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E4F30990] + *(unsigned __int8 *)(a3 + v6)))
      {
        BOOL v5 = ++v6 >= a5;
        if (a5 != v6) {
          continue;
        }
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

BOOL WTF::equalIgnoringASCIICaseWithLength<char16_t,char16_t>(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a5)
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
    while (a2 != v6 && a4 != v6)
    {
      if ((*(unsigned __int16 *)(result + 2 * v6) | (32
                                                    * (*(unsigned __int16 *)(result + 2 * v6) - 65 < 0x1A))) == (*(unsigned __int16 *)(a3 + 2 * v6) | (32 * (*(unsigned __int16 *)(a3 + 2 * v6) - 65 < 0x1A))))
      {
        BOOL v5 = ++v6 >= a5;
        if (a5 != v6) {
          continue;
        }
      }
      return v5;
    }
    __break(1u);
  }
  else
  {
    return 1;
  }
  return result;
}

WTF::StringImpl **WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(a2, (WTF::StringImpl *)a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return v4 + 8 * *(unsigned int *)(v4 - 4);
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::ASCIICaseInsensitiveHash,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WTF::String>,WTF::ASCIICaseInsensitiveHash>,WTF::String>(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v2 - 8);
  int v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2);
  for (i = 0; ; int v5 = i + v7)
  {
    uint64_t v7 = v5 & v4;
    uint64_t result = *(void *)(v2 + 8 * v7);
    if (!result) {
      break;
    }
    if (result != -1 && WTF::equalIgnoringASCIICaseCommon<WTF::StringImpl,WTF::StringImpl>(result, (uint64_t)*a2)) {
      return v2 + 8 * v7;
    }
    ++i;
  }
  return result;
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    LODWORD(v7) = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    LODWORD(v7) = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  unint64_t v11 = 0;
  if (v7)
  {
    uint64_t v7 = v7;
    int v12 = (void *)v6;
    do
    {
      if ((unint64_t)(*v12 + 1) >= 2)
      {
        unint64_t v13 = (_OWORD *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v12);
        _OWORD *v13 = *(_OWORD *)v12;
        if (v12 == a3) {
          unint64_t v11 = v13;
        }
      }
      v12 += 2;
      --v7;
    }
    while (v7);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

void *WTF::Detail::CallableWrapper<WebKit::Download::setPlaceholderURL(NSURL *,NSData *)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BBAB8;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::setPlaceholderURL(NSURL *,NSData *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BBAB8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::Download::setPlaceholderURL(NSURL *,NSData *)::$_0,void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return WebKit::Download::startUpdatingProgress(*(WebKit::Download **)(result + 16));
    }
  }
  return result;
}

const char **IPC::ArgumentCoder<std::tuple<WTF::URL const&,std::span<unsigned char const,18446744073709551615ul> const&,WebKit::SandboxExtensionHandle &&>,void>::encode<IPC::Encoder,WebKit::SandboxExtensionHandle &&,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(a1, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  int v4 = *(const char ****)(a2 + 16);

  return IPC::ArgumentCoder<WebKit::SandboxExtensionHandle,void>::encode(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DidReceivePlaceholderURL,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BBAE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DidReceivePlaceholderURL,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BBAE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::DownloadProxy::DidReceivePlaceholderURL,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 8));
}

void WebKit::NetworkServiceInitializerDelegate::~NetworkServiceInitializerDelegate(WebKit::NetworkServiceInitializerDelegate *this)
{
  *(void *)this = &unk_1EE9BFBD8;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
}
  }

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1EE9BFBD8;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {

  }
  JUMPOUT(0x199740C10);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BBB68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0,void,NSObject  {objcproto13OS_xpc_object}*>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BBB68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Decoder *WTF::Detail::CallableWrapper<WebKit::WebPushD::Connection::performSendWithAsyncReplyWithoutUsingIPCConnection(WTF::UniqueRef<IPC::Encoder> &&,WTF::CompletionHandler<void ()(IPC::Decoder *)> &&)::$_0,void,NSObject  {objcproto13OS_xpc_object}*>::call(uint64_t a1, id a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  if (object_getClass(a2) == (Class)MEMORY[0x1E4F14590] && xpc_dictionary_get_uint64(a2, "protocol version") == 4)
  {
    size_t length = 0;
    data = xpc_dictionary_get_data(a2, "encoded message", &length);
    v9[0] = 0;
    v9[1] = 0;
    IPC::Decoder::create((WTF *)length, data, v9, &v10);
    WTF::Vector<WTF::MachSendRight,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v9, v5);
    WTF::CompletionHandler<void ()(IPC::Decoder *)>::operator()(v3);
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result)
    {
      IPC::Decoder::~Decoder(result);
      return (IPC::Decoder *)WTF::fastFree(v7, v8);
    }
  }
  else
  {
    return (IPC::Decoder *)WTF::CompletionHandler<void ()(IPC::Decoder *)>::operator()(v3);
  }
  return result;
}

void sub_198A33C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, IPC::Decoder *a11)
{
  if (a11)
  {
    IPC::Decoder::~Decoder(a11);
    WTF::fastFree(v12, v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandler<void ()(IPC::Decoder *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A33D04(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand()
{
  if (qword_1E93CF350 && (int v0 = *(_DWORD *)(qword_1E93CF350 - 4)) != 0) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v0 << (6 * *(_DWORD *)(qword_1E93CF350 - 12) >= (2 * v0)));
  }
  else {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::PCM::LoadTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(8u);
  }
}

atomic_uchar *volatile **WebKit::RemoteComputePassEncoder::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    int v4 = this;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x30B:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v17, a2 + 5);
        uint64_t v5 = *((void *)v4[3] + 1);
        uint64_t v6 = (_DWORD *)(v5 + 8);
        ++*(_DWORD *)(v5 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v5, (uint64_t)v4[6]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
        goto LABEL_27;
      case 0x30C:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v17, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)a3);
        if ((v8 & 0xFF00000000) != 0) {
          WebKit::RemoteComputePassEncoder::dispatch((WebKit::RemoteComputePassEncoder *)v4);
        }
        goto LABEL_27;
      case 0x30D:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, &v17);
        if ((_BYTE)v19) {
          WebKit::RemoteComputePassEncoder::dispatchIndirect((uint64_t)v4, (uint64_t)v17, v18);
        }
        goto LABEL_29;
      case 0x30E:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v17, a2 + 5);
        WebKit::RemoteComputePassEncoder::end((WebKit::RemoteComputePassEncoder *)v4);
        goto LABEL_27;
      case 0x30F:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v17);
        if (!(_BYTE)v18) {
          goto LABEL_29;
        }
        WebKit::RemoteComputePassEncoder::insertDebugMarker((uint64_t)v4);
        goto LABEL_21;
      case 0x310:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v17, a2 + 5);
        WebKit::RemoteComputePassEncoder::popDebugGroup((WebKit::RemoteComputePassEncoder *)v4);
        goto LABEL_27;
      case 0x311:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v17);
        if (!(_BYTE)v18) {
          goto LABEL_29;
        }
        WebKit::RemoteComputePassEncoder::pushDebugGroup((uint64_t)v4);
        goto LABEL_21;
      case 0x312:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)a3, &v17);
        if (v22)
        {
          WebKit::RemoteComputePassEncoder::setBindGroup((uint64_t)v4, v17, v18, (uint64_t)&v19);
          if (v22)
          {
            if (v21)
            {
              unint64_t v11 = v19;
              if (v19)
              {
                uint64_t v19 = 0;
                int v20 = 0;
                WTF::fastFree(v11, v10);
              }
            }
          }
        }
        goto LABEL_29;
      case 0x313:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v17);
        if (!(_BYTE)v18) {
          goto LABEL_29;
        }
        WebKit::RemoteComputePassEncoder::setLabel((uint64_t)v4, (uint64_t *)&v17);
LABEL_21:
        if ((_BYTE)v18)
        {
          int v12 = v17;
          int v17 = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2) {
              WTF::StringImpl::destroy(v12, v9);
            }
            else {
              *(_DWORD *)v12 -= 2;
            }
          }
        }
LABEL_29:
        unint64_t v15 = (WTF::StringImpl **)&v16;
        goto LABEL_30;
      case 0x314:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v17, a2 + 5);
        uint64_t v13 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v14) {
          WebKit::RemoteComputePassEncoder::setPipeline((uint64_t)v4, v13);
        }
LABEL_27:
        unint64_t v15 = &v17;
LABEL_30:
        this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v15);
        break;
      default:
        return this;
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteComputePipeline::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    int v4 = this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    switch(v5)
    {
      case 791:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
        if ((_BYTE)v14)
        {
          WebKit::RemoteComputePipeline::setLabel((uint64_t)v4, (uint64_t *)&v13);
          if ((_BYTE)v14)
          {
            unint64_t v11 = v13;
            uint64_t v13 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2) {
                WTF::StringImpl::destroy(v11, v10);
              }
              else {
                *(_DWORD *)v11 -= 2;
              }
            }
          }
        }
        break;
      case 790:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3, (uint64_t)&v13);
        if (v15) {
          WebKit::RemoteComputePipeline::getBindGroupLayout(v4, v13, v14);
        }
        break;
      case 789:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
        uint64_t v6 = *((void *)v4[3] + 1);
        uint64_t v7 = (_DWORD *)(v6 + 8);
        ++*(_DWORD *)(v6 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v6, (uint64_t)v4[6]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
        uint64_t v9 = &v13;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
      default:
        return this;
    }
    uint64_t v9 = (WTF::StringImpl **)&v12;
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteDevice::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[20] + 1) + 78))
  {
    uint64_t v3 = a3;
    uint64_t v4 = (uint64_t)this;
    int v5 = v175;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x318:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::BindGroupDescriptor,void>::decode(v3, (uint64_t)v175);
        if (!(_BYTE)v177
          && ((uint64_t v7 = *(WTF::StringImpl **)v3,
               uint64_t v109 = *((void *)v3 + 1),
               *(void *)uint64_t v3 = 0,
               *((void *)v3 + 1) = 0,
               (uint64_t v110 = *((void *)v3 + 3)) == 0)
           || !v109
           || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v110 + 16))(v110, v7), !(_BYTE)v177))
          || (uint64_t v6 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
              !(_BYTE)v7))
        {
          std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v7);
          goto LABEL_203;
        }
        if (!(_BYTE)v177) {
          goto LABEL_148;
        }
        uint64_t v8 = v6;
        *(_OWORD *)uint64_t v163 = *(_OWORD *)v175;
        *(void *)uint64_t v175 = 0;
        *(void *)&v163[16] = *(void *)&v175[16];
        uint64_t v9 = v176;
        *(void *)&v175[16] = 0;
        uint64_t v176 = 0;
        uint64_t v164 = v9;
        *(void *)&long long v165 = v6;
        BYTE8(v165) = 1;
        std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v7);
        WebKit::RemoteDevice::createBindGroup(v4, (uint64_t)v163, v8);
        if (!BYTE8(v165)) {
          goto LABEL_204;
        }
        unint64_t v11 = *(WTF **)&v163[16];
        if (!*(void *)&v163[16]) {
          goto LABEL_195;
        }
        *(void *)&v163[16] = 0;
        LODWORD(v164) = 0;
        goto LABEL_103;
      case 0x319:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::BindGroupLayoutDescriptor,void>::decode(v3, (uint64_t)v175);
        if ((_BYTE)v176)
        {
          uint64_t v40 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
          if ((_BYTE)v41)
          {
            uint64_t v42 = v40;
            long long v43 = *(_OWORD *)v175;
            memset(v175, 0, sizeof(v175));
            *(_OWORD *)uint64_t v163 = v43;
            *(void *)&v163[16] = *(void *)&v175[16];
            uint64_t v164 = v40;
            LOBYTE(v165) = 1;
            std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v41);
            WebKit::RemoteDevice::createBindGroupLayout(v4, (uint64_t)v163, v42);
            if ((_BYTE)v165) {
              goto LABEL_101;
            }
LABEL_204:
            uint64_t v86 = &v162;
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v86);
          }
        }
        else
        {
          int v41 = *(WTF::StringImpl **)v3;
          uint64_t v130 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v131 = *((void *)v3 + 3);
          if (v131 && v130) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v131 + 16))(v131, v41);
          }
        }
        std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v41);
        goto LABEL_203;
      case 0x31A:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::BufferDescriptor,void>::decode(v3, (uint64_t)v175);
        if (!(_BYTE)v176)
        {
          uint64_t v113 = *(WTF::StringImpl **)v3;
          uint64_t v114 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v115 = *((void *)v3 + 3);
          if (!v115) {
            goto LABEL_203;
          }
          if (!v114) {
            goto LABEL_203;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v115 + 16))(v115, v113);
          if (!(_BYTE)v176) {
            goto LABEL_203;
          }
        }
        uint64_t v32 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
        if (!(_BYTE)v18)
        {
          if ((_BYTE)v176) {
            goto LABEL_121;
          }
          goto LABEL_203;
        }
        if (!(_BYTE)v176) {
          goto LABEL_148;
        }
        *(_OWORD *)uint64_t v163 = *(_OWORD *)v175;
        *(_DWORD *)&v163[15] = *(_DWORD *)&v175[15];
        uint64_t v164 = v32;
        LOBYTE(v165) = 1;
        WebKit::RemoteDevice::createBuffer(v4, (uint64_t)v163, v32);
        if ((_BYTE)v165) {
          goto LABEL_195;
        }
        goto LABEL_204;
      case 0x31B:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 5);
        unint64_t v33 = *((void *)v3 + 1);
        int v34 = *(WTF::StringImpl **)v3;
        unint64_t v35 = *((void *)v3 + 2) - *(void *)v3;
        if (v33 <= v35)
        {
          unint64_t v116 = 0;
          uint64_t v117 = 0;
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v118 = *((void *)v3 + 3);
          if (v118)
          {
            if (v33)
            {
              (*(void (**)(uint64_t))(*(void *)v118 + 16))(v118);
              uint64_t v117 = *(WTF::StringImpl **)v3;
              unint64_t v116 = *((void *)v3 + 1);
            }
            else
            {
              unint64_t v116 = 0;
              uint64_t v117 = 0;
            }
          }
        }
        else
        {
          unsigned int v36 = (char *)v34 + v35;
          *((void *)v3 + 2) = v36 + 1;
          if (v34)
          {
            unsigned int v37 = *v36;
            if (v37 >= 2) {
              goto LABEL_166;
            }
            if (!*v36)
            {
              uint64_t v38 = 0;
LABEL_125:
              uint64_t v100 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
              v163[0] = 0;
              uint64_t v102 = v101;
              if ((_BYTE)v101)
              {
                v163[8] = 0;
                if (v37)
                {
                  *(void *)uint64_t v163 = v38;
                  v163[8] = 1;
                  uint64_t v38 = 0;
                }
                *(void *)&v163[16] = v100;
                int v103 = 1;
              }
              else
              {
                int v103 = 0;
              }
              LOBYTE(v164) = v103;
              if (v37) {
                BOOL v104 = v38 == 0;
              }
              else {
                BOOL v104 = 1;
              }
              if (!v104)
              {
                if (*(_DWORD *)v38 == 2) {
                  WTF::StringImpl::destroy(v38, v101);
                }
                else {
                  *(_DWORD *)v38 -= 2;
                }
              }
              if (v102)
              {
LABEL_139:
                if (v103)
                {
                  WebKit::RemoteDevice::createCommandEncoder(v4, (uint64_t)v163, *(uint64_t *)&v163[16]);
                  if ((_BYTE)v164)
                  {
LABEL_141:
                    if (v163[8])
                    {
                      uint64_t v105 = *(WTF::StringImpl **)v163;
                      *(void *)uint64_t v163 = 0;
                      if (v105)
                      {
                        if (*(_DWORD *)v105 == 2) {
                          WTF::StringImpl::destroy(v105, v91);
                        }
                        else {
                          *(_DWORD *)v105 -= 2;
                        }
                      }
                    }
                  }
                }
LABEL_146:
                uint64_t v86 = (uint64_t **)v175;
                return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v86);
              }
LABEL_169:
              uint64_t v124 = *(WTF::StringImpl **)v3;
              uint64_t v125 = *((void *)v3 + 1);
              *(void *)uint64_t v3 = 0;
              *((void *)v3 + 1) = 0;
              uint64_t v126 = *((void *)v3 + 3);
              if (v126 && v125) {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v126 + 16))(v126, v124);
              }
              goto LABEL_139;
            }
            IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(v3, (uint64_t)v163);
            if (v163[8])
            {
              uint64_t v38 = *(WTF::StringImpl **)v163;
              goto LABEL_125;
            }
            goto LABEL_165;
          }
          unint64_t v116 = v33;
          uint64_t v117 = 0;
        }
        unint64_t v33 = 0;
        int v34 = 0;
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v119 = *((void *)v3 + 3);
        if (!v119) {
          goto LABEL_166;
        }
        if (!v116)
        {
          unint64_t v33 = 0;
          int v34 = 0;
LABEL_166:
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v120 = *((void *)v3 + 3);
          if (v120 && v33) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v120 + 16))(v120, v34);
          }
          uint64_t v121 = *(WTF::StringImpl **)v3;
          uint64_t v122 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v123 = *((void *)v3 + 3);
          if (v123 && v122) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v123 + 16))(v123, v121);
          }
          int v103 = 0;
          v163[0] = 0;
          LOBYTE(v164) = 0;
          goto LABEL_169;
        }
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v119 + 16))(v119, v117, v116);
LABEL_165:
        int v34 = *(WTF::StringImpl **)v3;
        unint64_t v33 = *((void *)v3 + 1);
        goto LABEL_166;
      case 0x31C:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 5);
        IPC::Decoder::decode<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v163, v3);
        if ((_BYTE)v168) {
          WebKit::RemoteDevice::createComputePipeline(v4, (uint64_t)v163, v167);
        }
        std::__optional_destruct_base<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v163, v19);
        goto LABEL_146;
      case 0x31D:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v161, a2 + 5);
        uint64_t v55 = v161;
        IPC::Decoder::decode<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v163, v3);
        if (!(_BYTE)v168) {
          goto LABEL_71;
        }
        uint64_t v57 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
        if (!(_BYTE)v56) {
          goto LABEL_71;
        }
        uint64_t v3 = (IPC::Decoder *)v57;
        *(void *)uint64_t v175 = v57;
        int v5 = &v175[8];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v55);
        uint64_t v58 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        uint64_t *v58 = (uint64_t)&unk_1EE9BBC48;
        v58[1] = (uint64_t)v3;
        *(void *)&v175[8] = 0;
        v58[2] = (uint64_t)v55;
        uint64_t v162 = v58;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v175[8]);
        if (!(_BYTE)v168) {
          goto LABEL_148;
        }
        WebKit::RemoteDevice::createComputePipelineAsync((void *)v4, (uint64_t)v163, v167, (uint64_t *)&v162);
        uint64_t v59 = v162;
        uint64_t v162 = 0;
        if (v59) {
          (*(void (**)(uint64_t *))(*v59 + 8))(v59);
        }
LABEL_71:
        std::__optional_destruct_base<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v163, v56);
        goto LABEL_96;
      case 0x31E:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::PipelineLayoutDescriptor,void>::decode(v3, (uint64_t)v175);
        if (!(_BYTE)v177
          && ((uint64_t v72 = *(WTF::StringImpl **)v3,
               uint64_t v138 = *((void *)v3 + 1),
               *(void *)uint64_t v3 = 0,
               *((void *)v3 + 1) = 0,
               (uint64_t v139 = *((void *)v3 + 3)) == 0)
           || !v138
           || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v139 + 16))(v139, v72), !(_BYTE)v177))
          || (uint64_t v71 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
              !(_BYTE)v72))
        {
          std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v72);
          goto LABEL_203;
        }
        if (!(_BYTE)v177) {
          goto LABEL_148;
        }
        uint64_t v73 = v71;
        uint64_t v74 = *(void *)v175;
        *(void *)uint64_t v175 = 0;
        *(void *)uint64_t v163 = v74;
        v163[8] = 0;
        LOBYTE(v164) = 0;
        if ((_BYTE)v176)
        {
          *(void *)&v163[8] = *(void *)&v175[8];
          uint64_t v75 = *(void *)&v175[16];
          *(void *)&v175[8] = 0;
          *(void *)&v175[16] = 0;
          *(void *)&v163[16] = v75;
          LOBYTE(v164) = 1;
        }
        *(void *)&long long v165 = v71;
        BYTE8(v165) = 1;
        std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v72);
        WebKit::RemoteDevice::createPipelineLayout(v4, v163, v73);
        if (!BYTE8(v165)) {
          goto LABEL_204;
        }
        if ((_BYTE)v164) {
          goto LABEL_101;
        }
        goto LABEL_195;
      case 0x31F:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::QuerySetDescriptor,void>::decode(v3, (uint64_t)v175);
        if (!v175[16])
        {
          uint64_t v127 = *(WTF::StringImpl **)v3;
          uint64_t v128 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v129 = *((void *)v3 + 3);
          if (!v129) {
            goto LABEL_203;
          }
          if (!v128) {
            goto LABEL_203;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v129 + 16))(v129, v127);
          if (!v175[16]) {
            goto LABEL_203;
          }
        }
        uint64_t v39 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
        if (!(_BYTE)v18)
        {
          if (!v175[16]) {
            goto LABEL_203;
          }
          goto LABEL_121;
        }
        if (!v175[16]) {
          goto LABEL_148;
        }
        *(_OWORD *)uint64_t v163 = *(_OWORD *)v175;
        *(void *)&v163[16] = v39;
        LOBYTE(v164) = 1;
        WebKit::RemoteDevice::createQuerySet(v4, (uint64_t)v163, v39);
        if ((_BYTE)v164) {
          goto LABEL_195;
        }
        goto LABEL_204;
      case 0x320:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::RenderBundleEncoderDescriptor,void>::decode(v3, (uint64_t)v175);
        if (!BYTE8(v177)
          && ((CFTypeRef v88 = *(WTF::StringImpl **)v3,
               uint64_t v140 = *((void *)v3 + 1),
               *(void *)uint64_t v3 = 0,
               *((void *)v3 + 1) = 0,
               (uint64_t v141 = *((void *)v3 + 3)) == 0)
           || !v140
           || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v141 + 16))(v141, v88), !BYTE8(v177)))
          || (uint64_t v87 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
              !(_BYTE)v88))
        {
          std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v88);
          goto LABEL_203;
        }
        if (!BYTE8(v177)) {
          goto LABEL_148;
        }
        uint64_t v89 = v87;
        long long v90 = *(_OWORD *)v175;
        memset(v175, 0, sizeof(v175));
        *(_OWORD *)uint64_t v163 = v90;
        *(void *)&v163[16] = *(void *)&v175[16];
        uint64_t v164 = v176;
        LOWORD(v165) = v177;
        *((void *)&v165 + 1) = v87;
        LOBYTE(v166) = 1;
        std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v88);
        WebKit::RemoteDevice::createRenderBundleEncoder(v4, (uint64_t)v163, v89);
        if (!(_BYTE)v166) {
          goto LABEL_204;
        }
LABEL_101:
        unint64_t v11 = *(WTF **)&v163[8];
        if (*(void *)&v163[8])
        {
          *(void *)&v163[8] = 0;
          *(_DWORD *)&v163[16] = 0;
LABEL_103:
          WTF::fastFree(v11, v10);
        }
        goto LABEL_195;
      case 0x321:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 5);
        IPC::Decoder::decode<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v163, v3);
        if (v174) {
          WebKit::RemoteDevice::createRenderPipeline(v4, (uint64_t)v163, v173);
        }
        std::__optional_destruct_base<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v163, v26);
        goto LABEL_146;
      case 0x322:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v161, a2 + 5);
        CFTypeRef v81 = v161;
        IPC::Decoder::decode<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t)v163, v3);
        if (!v174) {
          goto LABEL_95;
        }
        uint64_t v83 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
        if (!(_BYTE)v82) {
          goto LABEL_95;
        }
        uint64_t v3 = (IPC::Decoder *)v83;
        *(void *)uint64_t v175 = v83;
        int v5 = &v175[8];
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v81);
        uint64_t v84 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v84 = (uint64_t)&unk_1EE9BBC70;
        v84[1] = (uint64_t)v3;
        *(void *)&v175[8] = 0;
        v84[2] = (uint64_t)v81;
        uint64_t v162 = v84;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v175[8]);
        if (!v174) {
          goto LABEL_148;
        }
        WebKit::RemoteDevice::createRenderPipelineAsync((void *)v4, (uint64_t)v163, v173, (uint64_t *)&v162);
        uint64_t v85 = v162;
        uint64_t v162 = 0;
        if (v85) {
          (*(void (**)(uint64_t *))(*v85 + 8))(v85);
        }
LABEL_95:
        std::__optional_destruct_base<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v163, v82);
LABEL_96:
        uint64_t v86 = (uint64_t **)&v161;
        return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v86);
      case 0x323:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::SamplerDescriptor,void>::decode(v3, (uint64_t)v175);
        if ((_BYTE)v177) {
          goto LABEL_13;
        }
        goto LABEL_149;
      case 0x324:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::ShaderModuleDescriptor,void>::decode(v3, (uint64_t)v175);
        if (!(_BYTE)v177
          && ((char v21 = *(WTF::StringImpl **)v3,
               uint64_t v111 = *((void *)v3 + 1),
               *(void *)uint64_t v3 = 0,
               *((void *)v3 + 1) = 0,
               (uint64_t v112 = *((void *)v3 + 3)) == 0)
           || !v111
           || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v112 + 16))(v112, v21), !(_BYTE)v177))
          || (uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
              !(_BYTE)v21))
        {
          std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v21);
          goto LABEL_203;
        }
        if (!(_BYTE)v177) {
          goto LABEL_148;
        }
        uint64_t v22 = v20;
        long long v23 = *(_OWORD *)v175;
        memset(v175, 0, sizeof(v175));
        *(_OWORD *)uint64_t v163 = v23;
        *(void *)&v163[16] = *(void *)&v175[16];
        *(void *)&long long v23 = v176;
        uint64_t v176 = 0;
        uint64_t v164 = v23;
        *(void *)&long long v165 = v20;
        BYTE8(v165) = 1;
        std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v21);
        WebKit::RemoteDevice::createShaderModule(v4, (WTF::StringImpl **)v163, v22);
        if (!BYTE8(v165)) {
          goto LABEL_204;
        }
        WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v163[16], v24);
        BOOL v25 = *(WTF::StringImpl **)&v163[8];
        *(void *)&v163[8] = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        goto LABEL_195;
      case 0x325:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::TextureDescriptor,void>::decode(v3, v175);
        if ((v180
           || (uint64_t v66 = *(WTF::StringImpl **)v3,
               uint64_t v134 = *((void *)v3 + 1),
               *(void *)uint64_t v3 = 0,
               *((void *)v3 + 1) = 0,
               (uint64_t v135 = *((void *)v3 + 3)) != 0)
           && v134
           && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v135 + 16))(v135, v66), v180))
          && (uint64_t v65 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
              (_BYTE)v66))
        {
          if (!v180) {
            goto LABEL_148;
          }
          uint64_t v67 = v65;
          uint64_t v68 = *(void *)v175;
          *(void *)uint64_t v175 = 0;
          *(void *)uint64_t v163 = v68;
          v163[8] = 0;
          LODWORD(v164) = -1;
          std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v163[8], (uint64_t)&v175[8]);
          *(void *)&long long v165 = v177;
          *(_DWORD *)((char *)&v165 + 7) = *(_DWORD *)((char *)&v177 + 7);
          unint64_t v166 = v178;
          uint64_t v69 = v179;
          v178 = 0;
          uint64_t v179 = 0;
          uint64_t v167 = v69;
          char v70 = 1;
          uint64_t v168 = v67;
        }
        else
        {
          char v70 = 0;
          v163[0] = 0;
        }
        LOBYTE(v169) = v70;
        std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v66);
        if (!(_BYTE)v169)
        {
          uint64_t v158 = *(WTF::StringImpl **)v3;
          uint64_t v159 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v160 = *((void *)v3 + 3);
          if (!v160) {
            goto LABEL_204;
          }
          if (!v159) {
            goto LABEL_204;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v160 + 16))(v160, v158);
          if (!(_BYTE)v169) {
            goto LABEL_204;
          }
        }
        WebKit::RemoteDevice::createTexture(v4, (uint64_t)v163, v168);
        if (!(_BYTE)v169) {
          goto LABEL_204;
        }
        long long v136 = v166;
        if (v166)
        {
          unint64_t v166 = 0;
          LODWORD(v167) = 0;
          WTF::fastFree(v136, v10);
        }
        if (v164 != -1) {
          ((void (*)(unsigned char *, unsigned char *))off_1EE9BBC28[v164])(v175, &v163[8]);
        }
        LODWORD(v164) = -1;
        goto LABEL_195;
      case 0x326:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v163, a2 + 5);
        uint64_t v15 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)v3);
        if (v16) {
          WebKit::RemoteDevice::createXRBinding(v4, v15);
        }
        goto LABEL_210;
      case 0x327:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v163, a2 + 5);
        (*(void (**)(void))(**(void **)(v4 + 16) + 24))(*(void *)(v4 + 16));
        goto LABEL_210;
      case 0x328:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v163, a2 + 5);
        uint64_t v12 = *(void *)(*(void *)(v4 + 24) + 8);
        uint64_t v13 = (_DWORD *)(v12 + 8);
        ++*(_DWORD *)(v12 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v12, *(void *)(v4 + 40));
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v13, v14);
        goto LABEL_210;
      case 0x329:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::ExternalTextureDescriptor,void>::decode(v3, v175);
        if ((v182
           || (uint16x8_t v45 = *(WTF::StringImpl **)v3,
               uint64_t v132 = *((void *)v3 + 1),
               *(void *)uint64_t v3 = 0,
               *((void *)v3 + 1) = 0,
               (uint64_t v133 = *((void *)v3 + 3)) != 0)
           && v132
           && ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v133 + 16))(v133, v45), v182))
          && (uint64_t v44 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
              (_BYTE)v45))
        {
          if (!v182)
          {
            do
            {
LABEL_148:
              __break(1u);
LABEL_149:
              uint64_t v106 = *(WTF::StringImpl **)v3;
              uint64_t v107 = *((void *)v3 + 1);
              *(void *)uint64_t v3 = 0;
              *((void *)v3 + 1) = 0;
              uint64_t v108 = *((void *)v3 + 3);
              if (!v108) {
                goto LABEL_203;
              }
              if (!v107) {
                goto LABEL_203;
              }
              (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v108 + 16))(v108, v106);
              if (!(_BYTE)v177) {
                goto LABEL_203;
              }
LABEL_13:
              uint64_t v17 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
              if (!(_BYTE)v18)
              {
                if ((_BYTE)v177)
                {
LABEL_121:
                  uint64_t v99 = *(WTF::StringImpl **)v175;
                  *(void *)uint64_t v175 = 0;
                  if (v99)
                  {
                    if (*(_DWORD *)v99 == 2) {
                      WTF::StringImpl::destroy(v99, v18);
                    }
                    else {
                      *(_DWORD *)v99 -= 2;
                    }
                  }
                }
LABEL_203:
                long long v142 = *(WTF::StringImpl **)v3;
                uint64_t v143 = *((void *)v3 + 1);
                *(void *)uint64_t v3 = 0;
                *((void *)v3 + 1) = 0;
                uint64_t v144 = *((void *)v3 + 3);
                if (v144 && v143) {
                  (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v144 + 16))(v144, v142);
                }
                goto LABEL_204;
              }
            }
            while (!(_BYTE)v177);
            *(void *)uint64_t v163 = *(void *)v175;
            *(_OWORD *)&v163[8] = *(_OWORD *)(v5 + 8);
            LODWORD(v164) = v176;
            *(void *)&long long v165 = v17;
            BYTE8(v165) = 1;
            WebKit::RemoteDevice::createSampler(v4, (uint64_t)v163, v17);
            if (!BYTE8(v165)) {
              goto LABEL_204;
            }
            goto LABEL_195;
          }
          uint64_t v46 = v44;
          uint64_t v47 = *(void *)v175;
          *(void *)uint64_t v175 = 0;
          *(void *)uint64_t v163 = v47;
          *(_OWORD *)&v163[8] = *(_OWORD *)&v175[8];
          LOBYTE(v164) = v176;
          LOBYTE(v165) = 0;
          char v170 = 0;
          if (v181)
          {
            long long v165 = v177;
            LODWORD(v166) = v178;
            LOBYTE(v167) = 0;
            int v169 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)&v167, (uint64_t)&v179);
            char v170 = 1;
          }
          uint64_t v171 = v46;
          char v48 = 1;
        }
        else
        {
          char v48 = 0;
          v163[0] = 0;
        }
        char v172 = v48;
        std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v175, v45);
        if (!v172)
        {
          char v155 = *(WTF::StringImpl **)v3;
          uint64_t v156 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v157 = *((void *)v3 + 3);
          if (!v157) {
            goto LABEL_204;
          }
          if (!v156) {
            goto LABEL_204;
          }
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v157 + 16))(v157, v155);
          if (!v172) {
            goto LABEL_204;
          }
        }
        WebKit::RemoteDevice::importExternalTextureFromVideoFrame(v4, (uint64_t)v163, v171);
        if (!v172) {
          goto LABEL_204;
        }
        if (v170)
        {
          if (v169 != -1) {
            ((void (*)(unsigned char *, uint64_t *))off_1EE9BBD00[v169])(v175, &v167);
          }
          int v169 = -1;
        }
LABEL_195:
        uint64_t v137 = *(WTF::StringImpl **)v163;
        *(void *)uint64_t v163 = 0;
        if (v137)
        {
          if (*(_DWORD *)v137 == 2) {
            WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v10);
          }
          else {
            *(_DWORD *)v137 -= 2;
          }
        }
        goto LABEL_204;
      case 0x32A:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        uint64_t v76 = (atomic_uchar *volatile *)v162;
        uint64_t v77 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
        if (!v78) {
          goto LABEL_204;
        }
        uint64_t v79 = v77;
        *(void *)uint64_t v163 = v77;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v76);
        uint64_t v80 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v80 = &unk_1EE9BBC98;
        v80[1] = v79;
        *(void *)&v163[8] = 0;
        v80[2] = v76;
        *(void *)uint64_t v175 = v80;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v163[8]);
        WebKit::RemoteDevice::popErrorScope(v4, (uint64_t *)v175);
        goto LABEL_88;
      case 0x32B:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v163, a2 + 5);
        unint64_t v92 = *((void *)v3 + 1);
        uint64_t v93 = *(WTF::StringImpl **)v3;
        unint64_t v94 = *((void *)v3 + 2) - *(void *)v3;
        if (v92 <= v94)
        {
          unint64_t v145 = 0;
          char v146 = 0;
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v147 = *((void *)v3 + 3);
          if (v147)
          {
            if (v92)
            {
              (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v147 + 16))(v147, v93, v92);
              char v146 = *(WTF::StringImpl **)v3;
              unint64_t v145 = *((void *)v3 + 1);
            }
            else
            {
              unint64_t v145 = 0;
              char v146 = 0;
            }
          }
        }
        else
        {
          uint64_t v95 = (unsigned __int8 *)v93 + v94;
          *((void *)v3 + 2) = v95 + 1;
          if (v93)
          {
            if (*v95 < 3u)
            {
              (*(void (**)(void))(**(void **)(v4 + 16) + 168))(*(void *)(v4 + 16));
              goto LABEL_210;
            }
LABEL_209:
            int v149 = *(WTF::StringImpl **)v3;
            uint64_t v150 = *((void *)v3 + 1);
            *(void *)uint64_t v3 = 0;
            *((void *)v3 + 1) = 0;
            uint64_t v151 = *((void *)v3 + 3);
            if (v151)
            {
              if (v150)
              {
                (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v151 + 16))(v151, v149);
                uint64_t v152 = *(WTF::StringImpl **)v3;
                uint64_t v153 = *((void *)v3 + 1);
                uint64_t v154 = *((void *)v3 + 3);
                *(void *)uint64_t v3 = 0;
                *((void *)v3 + 1) = 0;
                if (v154)
                {
                  if (v153) {
                    (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v154 + 16))(v154, v152);
                  }
                }
              }
            }
LABEL_210:
            uint64_t v86 = (uint64_t **)v163;
            return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v86);
          }
          unint64_t v145 = v92;
          char v146 = 0;
        }
        *(void *)uint64_t v3 = 0;
        *((void *)v3 + 1) = 0;
        uint64_t v148 = *((void *)v3 + 3);
        if (v148 && v145) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v148 + 16))(v148, v146);
        }
        goto LABEL_209;
      case 0x32C:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        uint64_t v49 = (atomic_uchar *volatile *)v162;
        uint64_t v50 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
        if (v51)
        {
          uint64_t v52 = v50;
          *(void *)uint64_t v163 = v50;
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v49);
          char v53 = (void *)WTF::fastMalloc((WTF *)0x18);
          *char v53 = &unk_1EE9BBCE8;
          v53[1] = v52;
          *(void *)&v163[8] = 0;
          v53[2] = v49;
          *(void *)uint64_t v175 = v53;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v163[8]);
          WebKit::RemoteDevice::resolveDeviceLostPromise(v4, (uint64_t *)v175);
          uint64_t v54 = *(void *)v175;
          *(void *)uint64_t v175 = 0;
          if (v54) {
            goto LABEL_65;
          }
        }
        goto LABEL_204;
      case 0x32D:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v162, a2 + 5);
        uint64_t v60 = (atomic_uchar *volatile *)v162;
        uint64_t v61 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v3);
        if (!v62) {
          goto LABEL_204;
        }
        uint64_t v63 = v61;
        *(void *)uint64_t v163 = v61;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v60);
        uint64_t v64 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v64 = &unk_1EE9BBCC0;
        v64[1] = v63;
        *(void *)&v163[8] = 0;
        v64[2] = v60;
        *(void *)uint64_t v175 = v64;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v163[8]);
        WebKit::RemoteDevice::resolveUncapturedErrorEvent(v4, (uint64_t *)v175);
LABEL_88:
        uint64_t v54 = *(void *)v175;
        *(void *)uint64_t v175 = 0;
        if (v54) {
LABEL_65:
        }
          (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
        goto LABEL_204;
      case 0x32E:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(v3, (uint64_t)v163);
        if (!v163[8]) {
          goto LABEL_146;
        }
        WebKit::RemoteDevice::setLabel(v4, (uint64_t *)v163);
        goto LABEL_141;
      case 0x32F:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 5);
        IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(v3, (uint64_t)v163);
        if (v163[16])
        {
          WebKit::RemoteDevice::setSharedVideoFrameMemory(v4);
          if (v163[16]) {
            goto LABEL_112;
          }
        }
        goto LABEL_146;
      case 0x330:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 5);
        IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(v3, (uint64_t)v163);
        if (!v163[8]) {
          goto LABEL_146;
        }
        WebKit::RemoteDevice::setSharedVideoFrameSemaphore(v4, (IPC::Semaphore *)v163);
        if (!v163[8]) {
          goto LABEL_146;
        }
        IPC::Semaphore::destroy((IPC::Semaphore *)v163);
LABEL_112:
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v163);
        goto LABEL_146;
      case 0x331:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v175, a2 + 5);
        uint64_t v27 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3);
        if (v28
          && (uint64_t v29 = v27,
              uint64_t v30 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v3),
              v31))
        {
          *(void *)uint64_t v163 = v29;
          *(void *)&v163[8] = v30;
          v163[16] = 1;
          WebKit::RemoteDevice::updateExternalTexture((void *)v4, v29, (uint64_t *)&v163[8]);
        }
        else
        {
          uint64_t v96 = *(WTF::StringImpl **)v3;
          uint64_t v97 = *((void *)v3 + 1);
          *(void *)uint64_t v3 = 0;
          *((void *)v3 + 1) = 0;
          uint64_t v98 = *((void *)v3 + 3);
          if (v98 && v97) {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v98 + 16))(v98, v96);
          }
        }
        goto LABEL_146;
      default:
        return this;
    }
  }
  return this;
}

WTF *IPC::handleMessage<Messages::RemoteDisplayListRecorder::ClipOutToPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v5, a1);
  if (v8)
  {
    uint64_t result = (WTF *)WebKit::RemoteDisplayListRecorder::clipOutToPath(a2, (const WebCore::Path *)v5);
    if (v8)
    {
      if (v7 != -1) {
        return (WTF *)((uint64_t (*)(char *, uint64_t *))off_1EE9BBD20[v7])(&v4, &v6);
      }
    }
  }
  return result;
}

_DWORD *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawSystemImage,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>,WebCore::FloatRect const&)>(unint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WTF::Ref<WebCore::SystemImage,WTF::RawPtrTraits<WebCore::SystemImage>,WTF::DefaultRefDerefTraits<WebCore::SystemImage>>>(a1, &v14);
  if (!v15) {
    goto LABEL_17;
  }
  char v4 = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v16);
  if (v17)
  {
    if (v15)
    {
      long long v12 = v16;
      char v13 = 1;
      *(void *)&long long v16 = v14;
      WebKit::RemoteDisplayListRecorder::drawSystemImage(a2, (WebCore::ARKitBadgeSystemImage **)&v16, &v12);
      uint64_t result = (_DWORD *)v16;
      *(void *)&long long v16 = 0;
      if (result)
      {
        if (result[2] == 1) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        }
        else {
          --result[2];
        }
      }
      if (v13) {
        return 0;
      }
      return result;
    }
    __break(1u);
  }
  else
  {
    unint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v8 = a1[3];
    if (v8 && v7) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v8 + 16))(v8, v6);
    }
    if (!v15) {
      goto LABEL_17;
    }
    char v4 = v14;
    uint64_t v14 = 0;
    if (!v4) {
      goto LABEL_17;
    }
    if (*((_DWORD *)v4 + 2) != 1)
    {
      --*((_DWORD *)v4 + 2);
      goto LABEL_17;
    }
  }
  (*(void (**)(unint64_t *))(*v4 + 8))(v4);
LABEL_17:
  unint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (_DWORD *)a1[3];
  if (result) {
    BOOL v11 = v10 == 0;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *, unint64_t))(*(void *)result + 16))(result, v9);
  }
  return result;
}

unint64_t *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawPattern,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect const&,WebCore::FloatRect const&,WebCore::AffineTransform const&,WebCore::FloatPoint const&,WebCore::FloatSize const&,WebCore::ImagePaintingOptions)>(unint64_t *a1, uint64_t a2)
{
  uint64_t result = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>>(v4, a1);
  if (v5) {
    return (unint64_t *)WebKit::RemoteDisplayListRecorder::drawPattern(a2, v4[0]);
  }
  return result;
}

unsigned int *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawDotsForDocumentMarker,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::FloatRect const&,WebCore::DocumentMarkerLineStyle const&)>(unint64_t *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a1, (uint64_t)&v18);
  if (!v19)
  {
    unint64_t v8 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t v10 = a1[3];
    if (v10) {
      BOOL v11 = v9 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8);
    }
    LOBYTE(v14) = 0;
    char v17 = 0;
LABEL_17:
    unint64_t v12 = *a1;
    unint64_t v13 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (unsigned int *)a1[3];
    if (!result) {
      return result;
    }
    if (!v13) {
      return result;
    }
    uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(void *)result + 16))(result, v12);
    if (!v17) {
      return result;
    }
    goto LABEL_6;
  }
  IPC::Decoder::decode<WebCore::DocumentMarkerLineStyle>((uint64_t *)a1, v20);
  char v5 = v21;
  if (v21)
  {
    long long v14 = v18;
    LOBYTE(v15.m_colorAndFlags) = v20[0];
    WebCore::Color::Color();
    char v5 = 1;
  }
  else
  {
    LOBYTE(v14) = 0;
  }
  char v17 = v5;
  std::__optional_destruct_base<WebCore::DocumentMarkerLineStyle,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v20, v4);
  if (!v17) {
    goto LABEL_17;
  }
LABEL_6:
  uint64_t result = WebKit::RemoteDisplayListRecorder::drawDotsForDocumentMarker(a2, &v14, &v15);
  if (v17 && (v16 & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

WTF *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<std::tuple<WebCore::Path>>((uint64_t)v5, a1);
  if (v8)
  {
    uint64_t result = (WTF *)WebKit::RemoteDisplayListRecorder::drawPath(a2, (const WebCore::Path *)v5);
    if (v8)
    {
      if (v7 != -1) {
        return (WTF *)((uint64_t (*)(char *, uint64_t *))off_1EE9BBD20[v7])(&v4, &v6);
      }
    }
  }
  return result;
}

unsigned int *IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawFocusRingPath,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::Path const&,float,WebCore::Color const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  IPC::Decoder::decode<WebCore::Path>(v33, a1);
  if (!v36)
  {
    v27[0] = 0;
    char v32 = 0;
    goto LABEL_17;
  }
  unint64_t v4 = a1[1];
  unint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v16 = 0;
    unint64_t v17 = 0;
    *a1 = 0;
    a1[1] = 0;
    unint64_t v10 = (unsigned int *)a1[3];
    if (!v10) {
      goto LABEL_28;
    }
    goto LABEL_38;
  }
  char v8 = (float *)(v5 + v6);
  a1[2] = (unint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v16 = v4;
    unint64_t v17 = 0;
    goto LABEL_28;
  }
  float v9 = *v8;
  unint64_t v10 = IPC::ArgumentCoder<WebCore::Color,void>::decode((uint64_t *)a1, &v24);
  if (v25
    || (v21 = *a1, unint64_t v22 = a1[1], *a1 = 0, a1[1] = 0, (v23 = a1[3]) != 0)
    && v22
    && (unint64_t v10 = (unsigned int *)(*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21), v25))
  {
    unint64_t v5 = v36;
    if (v36)
    {
      v28[0] = 0;
      int v29 = -1;
      int v11 = v35;
      if (v35 != -1)
      {
        ((void (*)(char *, unsigned char *, unsigned char *))off_1EE9BBD38[v35])(&v26, v28, v34);
        int v29 = v11;
      }
      float v30 = v9;
      WebCore::Color::Color();
      char v32 = 1;
      if (v25)
      {
        if ((v24 & 0x8000000000000) != 0)
        {
          Color v15 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
          if (atomic_fetch_add((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v12);
          }
        }
      }
      goto LABEL_14;
    }
    __break(1u);
LABEL_38:
    if (v4)
    {
      (*(void (**)(unsigned int *, unint64_t, unint64_t))(*(void *)v10 + 16))(v10, v5, v4);
      unint64_t v17 = *a1;
      unint64_t v16 = a1[1];
    }
    else
    {
      unint64_t v16 = 0;
      unint64_t v17 = 0;
    }
LABEL_28:
    *a1 = 0;
    a1[1] = 0;
    unint64_t v18 = a1[3];
    if (v18 && v16) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v18 + 16))(v18, v17);
    }
  }
  v27[0] = 0;
  char v32 = 0;
LABEL_14:
  if (v36 && v35 != -1) {
    ((void (*)(uint64_t *, unsigned char *))off_1EE9BBD20[v35])(&v24, v34);
  }
LABEL_17:
  if (v32
    || (v19 = *a1, v20 = a1[1], *a1 = 0, a1[1] = 0, (uint64_t result = (unsigned int *)a1[3]) != 0)
    && v20
    && (uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *, unint64_t))(*(void *)result + 16))(result, v19), v32))
  {
    uint64_t result = WebKit::RemoteDisplayListRecorder::drawFocusRingPath(a2, (const WebCore::Path *)v27, v30, &v31);
    if (v32)
    {
      if ((v31.m_colorAndFlags & 0x8000000000000) != 0)
      {
        uint64_t result = (unsigned int *)(v31.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v31.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, result);
          uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v14);
        }
      }
      if (v29 != -1) {
        return (unsigned int *)((uint64_t (*)(char *, unsigned char *))off_1EE9BBD20[v29])(v33, v28);
      }
    }
  }
  return result;
}

uint64_t *IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillRectWithGradientAndSpaceTransform,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::DisplayList::FillRectWithGradientAndSpaceTransform &&)>(unint64_t *a1, uint64_t a2)
{
  IPC::Decoder::decode<WebCore::DisplayList::FillRectWithGradientAndSpaceTransform>(a1, (uint64_t)&v18);
  if (v24)
  {
    long long v11 = v18;
    uint64_t v5 = v19;
    uint64_t v19 = 0;
    uint64_t v12 = v5;
    long long v13 = v20;
    long long v14 = v21;
    long long v15 = v22;
    char v16 = v23;
    WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v19, v4);
    char v17 = 1;
    uint64_t result = (uint64_t *)WebKit::RemoteDisplayListRecorder::fillRectWithGradientAndSpaceTransform(a2, (uint64_t)&v11);
    if (v17) {
      return WTF::Ref<WebCore::Gradient,WTF::RawPtrTraits<WebCore::Gradient>,WTF::DefaultRefDerefTraits<WebCore::Gradient>>::~Ref(&v12, v7);
    }
  }
  else
  {
    unint64_t v8 = *a1;
    unint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (!v10) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, unint64_t))(*result + 16))(result, v8);
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillQuadCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataQuadCurve const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  IPC::ArgumentCoder<WebCore::PathBezierCurveTo,void>::decode(a1, (uint64_t)&v11);
  if (v12)
  {
    PathDataQuadCurve v9 = v11;
    char v10 = 1;
    return WebKit::RemoteDisplayListRecorder::fillQuadCurve(a2, &v9);
  }
  else
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v5);
      unint64_t v7 = a1[1];
      uint64_t result = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (result && v7)
      {
        unint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v8();
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
  return result;
}

uint64_t IPC::handleMessage<Messages::RemoteDisplayListRecorder::FillBezierCurve,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::PathDataBezierCurve const&)>(unint64_t *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  IPC::ArgumentCoder<WebCore::PathDataBezierCurve,void>::decode(a1, (uint64_t)&v11);
  if (v12)
  {
    PathDataBezierCurve v9 = v11;
    char v10 = 1;
    return WebKit::RemoteDisplayListRecorder::fillBezierCurve(a2, &v9);
  }
  else
  {
    unint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6)
    {
      (*(void (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v5);
      unint64_t v7 = a1[1];
      uint64_t result = a1[3];
      *a1 = 0;
      a1[1] = 0;
      if (result && v7)
      {
        unint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
        return v8();
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
    }
  }
  return result;
}

void IPC::handleMessage<Messages::RemoteDisplayListRecorder::DrawVideoFrame,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebKit::SharedVideoFrame &&,WebCore::FloatRect const&,WebKit::SharedVideoFrame &&::ImageOrientation,BOOL)>(IPC::Decoder *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  IPC::Decoder::decode<WebKit::SharedVideoFrame>(a1, (uint64_t)&v33);
  if (!v37)
  {
    LOBYTE(v25) = 0;
    unsigned __int8 v32 = 0;
    goto LABEL_17;
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode((unint64_t *)a1, (uint64_t)&v38);
  if (!v39) {
    goto LABEL_26;
  }
  unsigned __int16 v4 = IPC::Decoder::decode<WebCore::ImageOrientation::Orientation>(a1);
  uint64_t v5 = *(void *)a1;
  if (!*(void *)a1)
  {
    uint64_t v16 = *((void *)a1 + 1);
    goto LABEL_28;
  }
  char v6 = v4;
  if (v4 <= 0xFFu)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    uint64_t v5 = *(void *)a1;
    uint64_t v16 = *((void *)a1 + 1);
LABEL_28:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v17 = *((void *)a1 + 3);
    if (v17 && v16) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v5);
    }
LABEL_33:
    int v11 = 0;
    LOBYTE(v25) = 0;
    goto LABEL_9;
  }
  unint64_t v7 = *((void *)a1 + 1);
  if (v7 <= *((void *)a1 + 2) - v5)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v20 = *((void *)a1 + 3);
    if (v20)
    {
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        unint64_t v18 = 0;
        uint64_t v22 = *(void *)a1;
        uint64_t v23 = *((void *)a1 + 1);
        uint64_t v24 = *((void *)a1 + 3);
        *(void *)a1 = 0;
        *((void *)a1 + 1) = 0;
        uint64_t v19 = 0;
        if (v24 && v23)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22, v23);
          uint64_t v19 = *(void *)a1;
          unint64_t v18 = *((void *)a1 + 1);
        }
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_32;
  }
  unint64_t v8 = (unsigned __int8 *)*((void *)a1 + 2);
  *((void *)a1 + 2) = v8 + 1;
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
    unint64_t v18 = v7;
    uint64_t v19 = v5;
LABEL_32:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v21 = *((void *)a1 + 3);
    if (v21 && v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
    }
    goto LABEL_33;
  }
  if (!v37) {
    goto LABEL_25;
  }
  BOOL v10 = v9 != 0;
  long long v25 = v33;
  int v26 = v34;
  v27[0] = 0;
  int v28 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)v35);
  long long v29 = v38;
  char v30 = v6;
  BOOL v31 = v10;
  int v11 = 1;
LABEL_9:
  unsigned __int8 v32 = v11;
  if (v37 && v36 != -1)
  {
    ((void (*)(long long *, unsigned char *))off_1EE9BBD00[v36])(&v38, v35);
    int v11 = v32;
  }
  if (v11) {
    goto LABEL_13;
  }
LABEL_17:
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v14 = *((void *)a1 + 3);
  if (v14) {
    BOOL v15 = v13 == 0;
  }
  else {
    BOOL v15 = 1;
  }
  if (!v15)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    if (v32)
    {
LABEL_13:
      WebKit::RemoteDisplayListRecorder::drawVideoFrame(a2, (uint64_t)&v25);
      if (v32)
      {
        if (v28 != -1) {
          ((void (*)(long long *, unsigned char *))off_1EE9BBD00[v28])(&v33, v27);
        }
      }
    }
  }
}

void IPC::handleMessage<Messages::RemoteDisplayListRecorder::SetSharedVideoFrameSemaphore,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(IPC::Semaphore &&)>(IPC::Decoder *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(a1, (uint64_t)v3);
  if (v4)
  {
    WebKit::RemoteDisplayListRecorder::setSharedVideoFrameSemaphore(a2, (IPC::Semaphore *)v3);
    if (v4)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v3);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
    }
  }
}

void IPC::handleMessage<Messages::RemoteDisplayListRecorder::SetSharedVideoFrameMemory,WebKit::RemoteDisplayListRecorder,WebKit::RemoteDisplayListRecorder,void ()(WebCore::SharedMemoryHandle &&)>(IPC::Decoder *a1, WebKit::RemoteDisplayListRecorder *a2)
{
  IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>(a1, (uint64_t)v3);
  if (v4)
  {
    WebKit::RemoteDisplayListRecorder::setSharedVideoFrameMemory(a2);
    if (v4) {
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v3);
    }
  }
}

atomic_uchar *volatile **WebKit::RemoteExternalTexture::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    char v4 = this;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x37D:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v12, a2 + 5);
        WebKit::RemoteExternalTexture::destroy((WebKit::RemoteExternalTexture *)v4);
        goto LABEL_11;
      case 0x37E:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v12, a2 + 5);
        uint64_t v5 = *((void *)v4[3] + 1);
        char v6 = (_DWORD *)(v5 + 8);
        ++*(_DWORD *)(v5 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v5, (uint64_t)v4[6]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
        goto LABEL_11;
      case 0x37F:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v11, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v12);
        if (v13)
        {
          WebKit::RemoteExternalTexture::setLabel((uint64_t)v4, (uint64_t *)&v12);
          if (v13)
          {
            unsigned int v9 = v12;
            uint64_t v12 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2) {
                WTF::StringImpl::destroy(v9, v8);
              }
              else {
                *(_DWORD *)v9 -= 2;
              }
            }
          }
        }
        BOOL v10 = (WTF::StringImpl **)&v11;
        goto LABEL_14;
      case 0x380:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v12, a2 + 5);
        WebKit::RemoteExternalTexture::undestroy((WebKit::RemoteExternalTexture *)v4);
LABEL_11:
        BOOL v10 = &v12;
LABEL_14:
        this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v10);
        break;
      default:
        return this;
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteFaceDetector::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 897 && *(unsigned char *)(*(void *)(*((void *)this[4] + 1) + 48) + 397) != 0)
  {
    uint64_t v5 = (uint64_t)this;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v15, a2 + 5);
    char v6 = (atomic_uchar *volatile *)v15[0];
    uint64_t v7 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
    if (v8)
    {
      uint64_t v9 = v7;
      BOOL v10 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
      if (v11)
      {
        uint64_t v12 = v10;
        v15[1] = v10;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6);
        char v13 = (void *)WTF::fastMalloc((WTF *)0x18);
        void *v13 = &unk_1EE9BBD60;
        v13[1] = v12;
        uint64_t v16 = 0;
        uint64_t v17 = v13;
        v13[2] = v6;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v16);
        WebKit::RemoteFaceDetector::detect(v5, v9, (uint64_t *)&v17);
        uint64_t v14 = (uint64_t)v17;
        uint64_t v17 = 0;
        if (v14) {
          (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
        }
      }
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v15);
  }
  return this;
}

uint64_t *WebKit::RemoteGPU::didReceiveStreamMessage(uint64_t *this, IPC::StreamServerConnection *a2, IPC::Decoder *a3)
{
  if (!*((unsigned char *)this + 78)) {
    return this;
  }
  uint64_t v5 = this;
  unsigned int v6 = *((unsigned __int16 *)a3 + 25);
  if (v6 <= 0xE32)
  {
    if (v6 == 899)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v42, (uint64_t **)a2 + 5);
      uint64_t v21 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v22) {
        WebKit::RemoteGPU::createCompositorIntegration((uint64_t)v5, v21);
      }
      uint64_t v23 = &v42;
      return (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v23);
    }
    if (v6 != 900) {
      return this;
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)a2 + 5);
    uint64_t v7 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!*(void *)a3)
    {
      uint64_t v33 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v34 = *((void *)a3 + 3);
      if (v34 && v33) {
        (*(void (**)(uint64_t, void))(*(void *)v34 + 16))(v34, 0);
      }
      uint64_t v9 = 0;
      char v10 = 0;
      goto LABEL_8;
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)v7;
      char v10 = 1;
LABEL_8:
      if (v10
        && (uint64_t v11 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3),
            v12))
      {
        uint64_t v42 = v9;
        uint64_t v43 = v11;
        char v44 = 1;
        WebKit::RemoteGPU::createPresentationContext(v5, (uint64_t)&v42, v11);
      }
      else
      {
        uint64_t v30 = *(void *)a3;
        uint64_t v31 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v32 = *((void *)a3 + 3);
        if (v32)
        {
          if (v31) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v30);
          }
        }
      }
      uint64_t v23 = &v41;
      return (uint64_t *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v23);
    }
    __break(1u);
LABEL_34:
    uint64_t v35 = *(void *)a3;
    uint64_t v36 = *((void *)a3 + 1);
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v37 = *((void *)a3 + 3);
    if (v37 && v36) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
    }
    goto LABEL_35;
  }
  if (v6 == 3635)
  {
    this = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    char v25 = v24;
    if (v24)
    {
      int v26 = this;
      this = (uint64_t *)IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
      if (v27)
      {
        uint64_t v28 = (uint64_t)this;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v42, (uint64_t **)a2 + 5);
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v42);
        atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
        uint64_t v29 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v29 = &unk_1EE9BBDB0;
        *(void *)(v29 + 8) = v26;
        *(unsigned char *)(v29 + 16) = v25;
        *(_DWORD *)(v29 + 17) = v41;
        *(_DWORD *)(v29 + 20) = *(_DWORD *)((char *)&v41 + 3);
        *(void *)(v29 + 24) = a2;
        uint64_t v42 = (uint64_t *)v29;
        WebKit::RemoteGPU::isValid((uint64_t)v5, v28, (uint64_t *)&v42);
        this = v42;
        uint64_t v42 = 0;
        if (this) {
          return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
        }
      }
    }
  }
  else
  {
    if (v6 != 3636) {
      return this;
    }
    this = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a3);
    char v14 = v13;
    if (!v13) {
      return this;
    }
    BOOL v15 = this;
    unint64_t v16 = IPC::ArgumentCoder<WebKit::WebGPU::RequestAdapterOptions,void>::decode((uint64_t *)a3);
    if ((v16 & 0xFF00000000) == 0) {
      goto LABEL_34;
    }
    int v17 = v16;
    uint64_t v18 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
    if (!v19)
    {
LABEL_35:
      uint64_t v38 = *(void *)a3;
      uint64_t v39 = *((void *)a3 + 1);
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      this = (uint64_t *)*((void *)a3 + 3);
      if (this && v39) {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*this + 16))(this, v38);
      }
      return this;
    }
    LODWORD(v42) = v17;
    uint64_t v43 = v18;
    char v44 = 1;
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (uint64_t **)a2 + 5);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v41);
    atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
    uint64_t v20 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v20 = &unk_1EE9BBD88;
    *(void *)(v20 + 8) = v15;
    *(unsigned char *)(v20 + 16) = v14;
    *(_DWORD *)(v20 + 17) = *(_DWORD *)v40;
    *(_DWORD *)(v20 + 20) = *(_DWORD *)&v40[3];
    *(void *)(v20 + 24) = a2;
    int v41 = (uint64_t *)v20;
    WebKit::RemoteGPU::requestAdapter((uint64_t)v5, (int *)&v42, v43, (uint64_t *)&v41);
    this = v41;
    int v41 = 0;
    if (this) {
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
  }
  return this;
}

void WebKit::RemoteGPUProxy::didReceiveMessage(WebKit::RemoteGPUProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 898) {
    IPC::handleMessage<Messages::RemoteGPUProxy::WasCreated,WebKit::RemoteGPUProxy,WebKit::RemoteGPUProxy,void ()(BOOL,IPC::Semaphore &&,IPC::Semaphore &)>(a3, (uint64_t)this);
  }
}

void IPC::handleMessage<Messages::RemoteGPUProxy::WasCreated,WebKit::RemoteGPUProxy,WebKit::RemoteGPUProxy,void ()(BOOL,IPC::Semaphore &&,IPC::Semaphore &)>(IPC::Decoder *a1, uint64_t a2)
{
  unint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *((void *)a1 + 2) - *(void *)a1;
  if (v4 <= v6)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v15 = *((void *)a1 + 3);
    if (v15)
    {
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
        uint64_t v14 = *(void *)a1;
        unint64_t v13 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_18;
  }
  uint64_t v7 = (unsigned __int8 *)(v5 + v6);
  *((void *)a1 + 2) = v7 + 1;
  if (!v5)
  {
    unint64_t v13 = v4;
    uint64_t v14 = 0;
LABEL_18:
    unint64_t v4 = 0;
    uint64_t v5 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v16 = *((void *)a1 + 3);
    if (v16)
    {
      if (v13)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
        uint64_t v5 = *(void *)a1;
        unint64_t v4 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v4 = 0;
        uint64_t v5 = 0;
      }
    }
LABEL_19:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v10 = *((void *)a1 + 3);
    if (!v10)
    {
LABEL_20:
      BOOL v20 = 0;
      char v23 = 0;
      goto LABEL_21;
    }
LABEL_26:
    if (v4) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v5);
    }
    goto LABEL_20;
  }
  unsigned int v8 = *v7;
  if (v8 >= 2) {
    goto LABEL_19;
  }
  BOOL v9 = v8 != 0;
  IPC::Decoder::decode<IPC::Semaphore>(a1, v24);
  if (!v26)
  {
    BOOL v20 = 0;
    char v23 = 0;
    goto LABEL_13;
  }
  IPC::Decoder::decode<IPC::Semaphore>(a1, v27);
  if (v29)
  {
    if (v26)
    {
      BOOL v20 = v9;
      WTF::MachSendRight::MachSendRight();
      int v11 = v25;
      int v25 = 0;
      v21[1] = v11;
      WTF::MachSendRight::MachSendRight();
      int v12 = v28;
      int v28 = 0;
      v22[1] = v12;
      char v23 = 1;
      if (v29)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v27);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v27);
      }
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_26;
  }
  BOOL v20 = 0;
  char v23 = 0;
LABEL_11:
  if (v26)
  {
    IPC::Semaphore::destroy((IPC::Semaphore *)v24);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v24);
  }
LABEL_13:
  if (v23)
  {
LABEL_14:
    WebKit::RemoteGPUProxy::wasCreated(a2, v20, (uint64_t)v21, (uint64_t)v22);
    if (v23)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v22);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v22);
      IPC::Semaphore::destroy((IPC::Semaphore *)v21);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v21);
    }
    return;
  }
LABEL_21:
  uint64_t v17 = *(void *)a1;
  uint64_t v18 = *((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t v19 = *((void *)a1 + 3);
  if (v19)
  {
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      if (v23) {
        goto LABEL_14;
      }
    }
  }
}

void non-virtual thunk to'WebKit::RemoteGPUProxy::didReceiveMessage(WebKit::RemoteGPUProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  if (*((_WORD *)a3 + 25) == 898) {
    IPC::handleMessage<Messages::RemoteGPUProxy::WasCreated,WebKit::RemoteGPUProxy,WebKit::RemoteGPUProxy,void ()(BOOL,IPC::Semaphore &&,IPC::Semaphore &)>(a3, (uint64_t)this - 8);
  }
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(a1);
  if ((v3 & 0xFF00000000) == 0)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    uint64_t v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v13 = *v5 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(a1, (unsigned int *)&v13);
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      int v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  uint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11)
  {
    if (v8) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, void, void))(*(void *)v11 + 16))(v11, v9, v8, 0, 0);
    }
    return 0;
  }
  return v6;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(void *a1, unsigned int *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    uint64_t v6 = (unsigned int *)(v3 + v4);
    a1[2] = v6 + 1;
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(a1, a2, (unsigned int *)&v14);
    }
    unint64_t v9 = v2;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v13 = a1;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v3, v2);
        a1 = v13;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  uint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12)
  {
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, void, void))(*(void *)v12 + 16))(v12, v10, v9, 0, 0);
    }
    return 0;
  }
  return v7;
}

unint64_t IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(void *a1, unsigned int *a2, unsigned int *a3)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v3 < v5 || v3 - v5 <= 3)
  {
LABEL_12:
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v13 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v4, v3);
        a1 = v13;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_13;
  }
  a1[2] = v4 + v5 + 4;
  if (v4)
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 4);
    if (*((unsigned char *)a2 + 4))
    {
      uint64_t v4 = *((unsigned __int8 *)a3 + 4);
      if (*((unsigned char *)a3 + 4)) {
        return *a2 | ((unint64_t)*a3 << 32);
      }
    }
    __break(1u);
    goto LABEL_12;
  }
  unint64_t v9 = v3;
  uint64_t v10 = 0;
LABEL_13:
  uint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12)
  {
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
    }
    return 0;
  }
  return v7;
}

WTF *IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[40])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (WTF *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    uint64_t v6 = (unsigned int *)(v3 + v4);
    a1[2] = (uint64_t)(v6 + 1);
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
    }
    unint64_t v8 = v2;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v11 = a1;
      uint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v9 = *v11;
        unint64_t v8 = v11[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  unint64_t result = (WTF *)a1[3];
  if (result)
  {
    if (v8)
    {
      uint64_t v12 = a2;
      unint64_t result = (WTF *)(*(uint64_t (**)(WTF *, uint64_t))(*(void *)result + 16))(result, v9);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[40] = 0;
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = (WTF *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v8[0] = result;
  v8[1] = v7;
  if ((_BYTE)v7) {
    return IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2, (uint64_t)v8, a3);
  }
  *a3 = 0;
  a3[40] = 0;
  return result;
}

WTF *IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  unint64_t result = (WTF *)IPC::Decoder::decode<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a1, (uint64_t)&v10);
  if (v13)
  {
    unint64_t result = (WTF *)IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a3, (uint64_t)&v10, (uint64_t)a4);
    if (v13) {
      BOOL v9 = v12 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9)
    {
      unint64_t result = v10;
      if (v10)
      {
        uint64_t v10 = 0;
        int v11 = 0;
        return (WTF *)WTF::fastFree(result, v8);
      }
    }
  }
  else
  {
    *a4 = 0;
    a4[40] = 0;
  }
  return result;
}

void *IPC::Decoder::decode<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = (void *)a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = a4;
  if (*(unsigned char *)(a1 + 4) && *(unsigned char *)(a2 + 8) && *(unsigned char *)(a3 + 24))
  {
    uint64_t result = _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJjN3WTF23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS3_33SupportsObjectIdentifierNullStateE1EEENS_8optionalINS3_6VectorIjLm0ENS3_15CrashOnOverflowELm16ENS3_10FastMallocEEEEEEEC2B8sn180100IJLm0ELm1ELm2EEJjSA_SG_EJEJEJjSA_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(a4, (_DWORD *)a1, (uint64_t *)a2, (uint64_t *)a3);
    *(unsigned char *)(result + 40) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v14 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v14;
        uint64_t v10 = *v14;
        unint64_t v9 = v14[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *uint64_t result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      char v13 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v13;
        uint64_t v4 = *v13;
        unint64_t v3 = v13[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      uint64_t result = (void *)IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)result, v15);
      char v8 = v16;
      if (v16)
      {
        *(void *)a2 = v15[0];
        *(void *)(a2 + 8) = v15[1];
        char v8 = 1;
        *(unsigned char *)(a2 + 16) = 1;
      }
      else
      {
        *(unsigned char *)a2 = 0;
      }
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 16) = 0;
      char v8 = 1;
    }
    *(unsigned char *)(a2 + 24) = v8;
    return result;
  }
LABEL_13:
  *uint64_t result = 0;
  result[1] = 0;
  uint64_t result = (void *)result[3];
  if (result && v3) {
    uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 16))(result, v4);
  }
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJjN3WTF23ObjectIdentifierGenericIN6WebKit20WebGPUIdentifierTypeENS3_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS3_33SupportsObjectIdentifierNullStateE1EEENS_8optionalINS3_6VectorIjLm0ENS3_15CrashOnOverflowELm16ENS3_10FastMallocEEEEEEEC2B8sn180100IJLm0ELm1ELm2EEJjSA_SG_EJEJEJjSA_SG_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(uint64_t result, _DWORD *a2, uint64_t *a3, uint64_t *a4)
{
  *(_DWORD *)uint64_t result = *a2;
  uint64_t v4 = *a3;
  *(unsigned char *)(result + 16) = 0;
  *(void *)(result + 8) = v4;
  *(unsigned char *)(result + 32) = 0;
  if (*((unsigned char *)a4 + 16))
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    uint64_t v5 = *a4;
    *a4 = 0;
    *(void *)(result + 16) = v5;
    LODWORD(v5) = *((_DWORD *)a4 + 2);
    *((_DWORD *)a4 + 2) = 0;
    *(_DWORD *)(result + 24) = v5;
    LODWORD(v5) = *((_DWORD *)a4 + 3);
    *((_DWORD *)a4 + 3) = 0;
    *(_DWORD *)(result + 28) = v5;
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v3 < v5 || v3 - v5 <= 3)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      uint64_t v15 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v4, v3);
        a1 = v15;
        uint64_t v13 = *v15;
        unint64_t v12 = v15[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_10;
  }
  unsigned int v7 = (int *)(v4 + v5);
  a1[2] = (uint64_t)(v7 + 1);
  if (!v4)
  {
    unint64_t v12 = v3;
    uint64_t v13 = 0;
LABEL_10:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v12) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v13);
    }
    goto LABEL_11;
  }
  int v8 = *v7;
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (!v10)
  {
LABEL_11:
    char v11 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_12;
  }
  *(_DWORD *)a2 = v8;
  *(void *)(a2 + 8) = result;
  char v11 = 1;
LABEL_12:
  *(unsigned char *)(a2 + 16) = v11;
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::TextureDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    unint64_t v3 = *(WTF **)(a1 + 48);
    if (v3)
    {
      *(void *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(unsigned int *)(a1 + 24);
    if (v4 != -1) {
      ((void (*)(char *, uint64_t))off_1EE9BBC28[v4])(&v7, a1 + 8);
    }
    *(_DWORD *)(a1 + 24) = -1;
    unint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::BindGroupLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v3 = *(WTF **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::PipelineLayoutDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a1 + 24))
    {
      unint64_t v3 = *(WTF **)(a1 + 8);
      if (v3)
      {
        *(void *)(a1 + 8) = 0;
        *(_DWORD *)(a1 + 16) = 0;
        WTF::fastFree(v3, a2);
      }
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::BindGroupDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    unint64_t v3 = *(WTF **)(a1 + 16);
    if (v3)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ShaderModuleDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    unint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebKit::WebGPU::ComputePipelineDescriptor,void>::decode(a2, (uint64_t)&v14);
  if (v20)
  {
    do
    {
      uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
      if (!(_BYTE)v5) {
        break;
      }
      if (v20)
      {
        uint64_t v6 = v14;
        uint64_t v14 = 0;
        *(void *)a1 = v6;
        *(_OWORD *)(a1 + 8) = v15;
        *(unsigned char *)(a1 + 24) = 0;
        *(unsigned char *)(a1 + 32) = 0;
        if (v17)
        {
          uint64_t v7 = v16;
          uint64_t v16 = 0;
          *(void *)(a1 + 24) = v7;
          *(unsigned char *)(a1 + 32) = 1;
        }
        *(void *)(a1 + 40) = v18;
        uint64_t v8 = v19;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        *(void *)(a1 + 48) = v8;
        *(void *)(a1 + 56) = v4;
        *(unsigned char *)(a1 + 64) = 1;
        return std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v5);
      }
      __break(1u);
LABEL_19:
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v5);
    }
    while (v20);
  }
  else
  {
    unint64_t v5 = *(void **)a2;
    uint64_t v10 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v4 = *((void *)a2 + 3);
    if (v4) {
      BOOL v11 = v10 == 0;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11) {
      goto LABEL_19;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 64) = 0;
  std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v14, v5);
  uint64_t v12 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v12)
  {
    uint64_t v13 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v13();
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ComputePipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24);
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::WebGPU::ComputePipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 64))
  {
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, a2);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24);
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebKit::WebGPU::RenderPipelineDescriptor,void>::decode(a2, (uint64_t)&v22);
  if (v42)
  {
    do
    {
      uint64_t v4 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a2);
      if (!(_BYTE)v5) {
        break;
      }
      if (v42)
      {
        uint64_t v6 = v22;
        uint64_t v22 = 0;
        *(void *)a1 = v6;
        *(_OWORD *)(a1 + 8) = v23;
        *(unsigned char *)(a1 + 24) = 0;
        *(unsigned char *)(a1 + 32) = 0;
        if (v25)
        {
          uint64_t v7 = v24;
          uint64_t v24 = 0;
          *(void *)(a1 + 24) = v7;
          *(unsigned char *)(a1 + 32) = 1;
        }
        uint64_t v8 = v26;
        uint64_t v26 = 0;
        *(void *)(a1 + 40) = v8;
        uint64_t v9 = v27;
        uint64_t v27 = 0;
        *(void *)(a1 + 48) = v9;
        uint64_t v10 = v28;
        uint64_t v28 = 0;
        *(void *)(a1 + 56) = v10;
        uint64_t v11 = v29;
        uint64_t v29 = 0;
        *(void *)(a1 + 64) = v11;
        *(_OWORD *)(a1 + 88) = v31;
        *(_OWORD *)(a1 + 104) = v32;
        *(_OWORD *)(a1 + 120) = *(_OWORD *)v33;
        *(void *)(a1 + 133) = *(void *)&v33[13];
        *(_OWORD *)(a1 + 72) = v30;
        *(unsigned char *)(a1 + 144) = 0;
        *(unsigned char *)(a1 + 200) = 0;
        if (v41)
        {
          *(void *)(a1 + 144) = v34;
          *(unsigned char *)(a1 + 152) = 0;
          *(unsigned char *)(a1 + 160) = 0;
          if (v36)
          {
            uint64_t v12 = v35;
            uint64_t v35 = 0;
            *(void *)(a1 + 152) = v12;
            *(unsigned char *)(a1 + 160) = 1;
          }
          uint64_t v13 = v37;
          uint64_t v37 = 0;
          *(void *)(a1 + 168) = v13;
          uint64_t v14 = v38;
          uint64_t v38 = 0;
          *(void *)(a1 + 176) = v14;
          uint64_t v15 = v39;
          uint64_t v39 = 0;
          *(void *)(a1 + 184) = v15;
          uint64_t v16 = v40;
          uint64_t v40 = 0;
          *(void *)(a1 + 192) = v16;
          *(unsigned char *)(a1 + 200) = 1;
        }
        *(void *)(a1 + 208) = v4;
        *(unsigned char *)(a1 + 216) = 1;
        return std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v5);
      }
      __break(1u);
LABEL_23:
      (*(void (**)(uint64_t, void *))(*(void *)v4 + 16))(v4, v5);
    }
    while (v42);
  }
  else
  {
    unint64_t v5 = *(void **)a2;
    uint64_t v18 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v4 = *((void *)a2 + 3);
    if (v4) {
      BOOL v19 = v18 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (!v19) {
      goto LABEL_23;
    }
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 216) = 0;
  std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v22, v5);
  uint64_t v20 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v20)
  {
    uint64_t v21 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v21();
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderPipelineDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 208))
  {
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100](a1 + 144, a2);
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v4);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24);
    uint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<std::tuple<WebKit::WebGPU::RenderPipelineDescriptor,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 216))
  {
    std::__optional_destruct_base<WebKit::WebGPU::FragmentState,false>::~__optional_destruct_base[abi:sn180100](a1 + 144, a2);
    WTF::Vector<std::optional<WebKit::WebGPU::VertexBufferLayout>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 56, v3);
    WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 40, v4);
    std::__optional_destruct_base<WTF::String,false>::~__optional_destruct_base[abi:sn180100](a1 + 24);
    uint64_t v6 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v5);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice26CreateComputePipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU25ComputePipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BBC48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice26CreateComputePipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU25ComputePipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BBC48;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice26CreateComputePipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU25ComputePipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EE4callEbSL_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3150;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = a2;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice25CreateRenderPipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU24RenderPipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BBC70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice25CreateRenderPipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU24RenderPipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BBC70;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice25CreateRenderPipelineAsyncEN6WebKit12RemoteDeviceES8_FvRKNS7_6WebGPU24RenderPipelineDescriptorENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbONS_6StringEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSL_EE4callEbSL_(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3151;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = a2;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::RenderBundleEncoderDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(WTF **)(a1 + 8);
    if (v3)
    {
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      WTF::fastFree(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice13PopErrorScopeEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BBC98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice13PopErrorScopeEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BBC98;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice13PopErrorScopeEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EE4callEbSJ_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3152;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  uint64_t v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *uint64_t v8 = a2;
    IPC::ArgumentCoder<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 16);
  uint64_t result = (_DWORD *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (!v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A38904);
    }
    *(unsigned char *)uint64_t result = 0;
    return result;
  }
  if (!v6)
  {
LABEL_16:
    __break(0xC471u);
    JUMPOUT(0x198A388E4);
  }
  *(unsigned char *)uint64_t result = 1;
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v7 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_DWORD *)_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice27ResolveUncapturedErrorEventEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED1Ev(v7);
  }
  char v8 = *(_DWORD *)(a2 + 8);
  uint64_t result = (_DWORD *)IPC::Encoder::operator<<<BOOL>(a1, &v8);
  if (v8 == 2)
  {
    if (*(_DWORD *)(a2 + 8) != 2)
    {
LABEL_15:
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_16;
    }
    return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  }
  if (v8 == 1)
  {
    if (*(_DWORD *)(a2 + 8) != 1) {
      goto LABEL_15;
    }
    return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, (uint64_t *)a2);
  }
  if (!v8 && *(_DWORD *)(a2 + 8)) {
    goto LABEL_15;
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice27ResolveUncapturedErrorEventEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BBCC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice27ResolveUncapturedErrorEventEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BBCC0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice27ResolveUncapturedErrorEventEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvbONSt3__18optionalINSA_7variantIJNS7_6WebGPU16OutOfMemoryErrorENSD_15ValidationErrorENSD_13InternalErrorEEEEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSJ_EE4callEbSJ_(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 3154;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v14 = v7;
  char v8 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (v9)
  {
    *char v8 = a2;
    IPC::ArgumentCoder<std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>,void>::encode<IPC::Encoder,std::optional<std::variant<WebKit::WebGPU::OutOfMemoryError,WebKit::WebGPU::ValidationError,WebKit::WebGPU::InternalError>>>(v7, a3);
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v14, 0, 0);
    uint64_t result = (uint64_t)v14;
    uint64_t v14 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v10);
      return WTF::fastFree(v12, v13);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice24ResolveDeviceLostPromiseEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvN7WebCore6WebGPU16DeviceLostReasonEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BBCE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice24ResolveDeviceLostPromiseEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvN7WebCore6WebGPU16DeviceLostReasonEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BBCE8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages12RemoteDevice24ResolveDeviceLostPromiseEN6WebKit12RemoteDeviceES8_FvONS_17CompletionHandlerIFvN7WebCore6WebGPU16DeviceLostReasonEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v5 = 3153;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v12 = v5;
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    uint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<IPC::Semaphore>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<IPC::Semaphore>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 8))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<IPC::Semaphore>,void>::decode<IPC::Decoder>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::Decoder::decode<IPC::Semaphore>(a1, v5);
  if (v7)
  {
    WTF::MachSendRight::MachSendRight();
    int v3 = v6;
    int v6 = 0;
    *(_DWORD *)(a2 + 4) = v3;
    int v4 = v7;
    *(unsigned char *)(a2 + 8) = 1;
    if (v4)
    {
      IPC::Semaphore::destroy((IPC::Semaphore *)v5);
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v5);
    }
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
}

uint64_t std::__optional_destruct_base<WebKit::WebGPU::ExternalTextureDescriptor,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(unsigned char *)(a1 + 80))
    {
      uint64_t v3 = *(unsigned int *)(a1 + 72);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_1EE9BBD00[v3])(&v6, a1 + 56);
      }
      *(_DWORD *)(a1 + 72) = -1;
    }
    int v4 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return a1;
}

void *IPC::Decoder::decode<WebCore::AffineTransform>(uint64_t a1, void *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::AffineTransform,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (void *)a2[3];
    if (result && v5 != 0)
    {
      unsigned __int8 v7 = *(uint64_t (**)(void))(*result + 16);
      return (void *)v7();
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::FloatRoundedRect>>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a2, (uint64_t)v10);
  if (v11)
  {
    long long v5 = v10[1];
    *(_OWORD *)a1 = v10[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v10[2];
    *(unsigned char *)(a1 + 48) = 1;
  }
  else
  {
    unint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v8 = a2[3];
    if (v8) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v8 + 16))(v8, v6);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 48) = 0;
    return (unint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

unint64_t *IPC::Decoder::decode<WebCore::FloatRoundedRect>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::FloatRoundedRect,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 48))
  {
    unint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unint64_t *)a2[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = (a2[2] + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 7)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v14 + 16))(v14);
        unint64_t v13 = *a2;
        unint64_t v12 = a2[1];
      }
      else
      {
        unint64_t v12 = 0;
        unint64_t v13 = 0;
      }
    }
LABEL_12:
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        uint64_t result = (unint64_t *)(*(uint64_t (**)(unint64_t, unint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        if (*a2)
        {
          __break(1u);
          return result;
        }
        unint64_t v5 = 0;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
      }
    }
    goto LABEL_17;
  }
  BOOL v9 = (uint64_t *)(v5 + v7);
  a2[2] = (unint64_t)(v9 + 1);
  if (!v5)
  {
    unint64_t v12 = v6;
    unint64_t v13 = 0;
    goto LABEL_12;
  }
  uint64_t v10 = *v9;
  if ((unint64_t)(*v9 - 1) < 0xFFFFFFFFFFFFFFFELL)
  {
    uint64_t result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v19);
    if (v20)
    {
      *(void *)a1 = v10;
      *(_OWORD *)(a1 + 8) = v19;
      *(unsigned char *)(a1 + 24) = 1;
      return result;
    }
    unint64_t v5 = *a2;
    unint64_t v6 = a2[1];
  }
LABEL_17:
  *a2 = 0;
  a2[1] = 0;
  unint64_t v16 = a2[3];
  if (v16 && v6) {
    (*(void (**)(unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  unint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unint64_t *)a2[3];
  if (result && v17)
  {
    uint64_t v18 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v18();
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v1 >= v3 && v1 - v3 > 7)
  {
    unint64_t v5 = (uint64_t *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v6 = *v5;
      if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
        return v6;
      }
LABEL_11:
      *a1 = 0;
      a1[1] = 0;
      uint64_t v12 = a1[3];
      if (v12)
      {
        if (v1) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v2);
        }
      }
      return 0;
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v14 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
        a1 = v14;
        uint64_t v9 = *v14;
        unint64_t v8 = v14[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  unint64_t v1 = 0;
  uint64_t v2 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (!v11) {
    goto LABEL_11;
  }
  unint64_t v13 = a1;
  if (!v8)
  {
    unint64_t v1 = 0;
    uint64_t v2 = 0;
    goto LABEL_11;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9, v8);
  uint64_t v2 = *v13;
  if (!*v13)
  {
    a1 = v13;
    unint64_t v1 = v13[1];
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

WTF *IPC::Decoder::decode<std::tuple<WebCore::Path>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::ArgumentCoder<WebCore::Path,void>::decode(a2, a2, v14);
  if (!v17)
  {
    unint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v9 = a2[3];
    BOOL v10 = !v9 || v8 == 0;
    if (v10
      || (uint64_t result = (WTF *)(*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v9 + 16))(v9, v7),
          !v17))
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 72) = 0;
LABEL_13:
      unint64_t v11 = *a2;
      unint64_t v12 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t result = (WTF *)a2[3];
      if (result)
      {
        if (v12) {
          return (WTF *)(*(uint64_t (**)(WTF *, unint64_t))(*(void *)result + 16))(result, v11);
        }
      }
      return result;
    }
  }
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  int v5 = v16;
  if (v16 == -1)
  {
    *(unsigned char *)(a1 + 72) = 1;
    return result;
  }
  uint64_t result = (WTF *)((uint64_t (*)(char *))off_1EE9BBD38[v16])(&v13);
  *(_DWORD *)(a1 + 64) = v5;
  int v6 = v17;
  *(unsigned char *)(a1 + 72) = 1;
  if (v6)
  {
    if (v16 != -1)
    {
      uint64_t result = (WTF *)((uint64_t (*)(char *, uint64_t *))off_1EE9BBD20[v16])(&v13, &v15);
      if (!*(unsigned char *)(a1 + 72)) {
        goto LABEL_13;
      }
    }
  }
  return result;
}

WTF *IPC::Decoder::decode<WebCore::Path>(unsigned char *a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::Path,void>::decode(a2, a2, a1);
  if (!a1[72])
  {
    unint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF *)a2[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF *)v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v2 < v4 || v2 - v4 <= 7)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      uint64_t v29 = result;
      uint64_t v33 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v3);
        uint64_t result = v29;
        a2 = v33;
        uint64_t v14 = *v33;
        unint64_t v13 = v33[1];
      }
      else
      {
        unint64_t v13 = 0;
        uint64_t v14 = 0;
      }
    }
    goto LABEL_17;
  }
  int v6 = (uint64_t *)(v3 + v4);
  unint64_t v7 = v6 + 1;
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v13 = v2;
    uint64_t v14 = 0;
LABEL_17:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (!v16) {
      goto LABEL_18;
    }
    uint64_t v28 = result;
    long long v32 = a2;
    if (!v13)
    {
      unint64_t v2 = 0;
      uint64_t v3 = 0;
      goto LABEL_18;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v14, v13);
    uint64_t v3 = *v32;
    if (!*v32)
    {
      uint64_t result = v28;
      a2 = v32;
      unint64_t v2 = v32[1];
      goto LABEL_18;
    }
LABEL_47:
    __break(1u);
    return result;
  }
  uint64_t v8 = *v6;
  if ((unint64_t)(v8 - 1) >= 0xFFFFFFFFFFFFFFFELL)
  {
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17 && v2)
    {
      uint64_t v27 = result;
      long long v31 = a2;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v3, v2);
LABEL_35:
      uint64_t result = v27;
      a2 = v31;
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  unint64_t v9 = (((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v9 && v2 - v9 > 7)
  {
    uint64_t v12 = v3 + v9 + 8;
    uint64_t v11 = *(void *)(v3 + v9);
    a2[2] = v12;
    if ((unint64_t)(v11 - 1) < 0xFFFFFFFFFFFFFFFELL)
    {
      *(void *)uint64_t result = v8;
      *(void *)(result + 8) = v11;
      *(unsigned char *)(result + 16) = 1;
      return result;
    }
    unint64_t v18 = v2;
    uint64_t v19 = v3;
    goto LABEL_22;
  }
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v20 = a2[3];
  if (!v20) {
    goto LABEL_22;
  }
  uint64_t v30 = result;
  uint64_t v34 = a2;
  if (!v2)
  {
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    goto LABEL_46;
  }
  (*(void (**)(uint64_t, uint64_t, unint64_t, void))(*(void *)v20 + 16))(v20, v3, v2, 0);
  unint64_t v18 = 0;
  uint64_t v25 = *v34;
  uint64_t v24 = v34[1];
  uint64_t v26 = v34[3];
  void *v34 = 0;
  v34[1] = 0;
  uint64_t v19 = 0;
  if (!v26)
  {
LABEL_46:
    uint64_t result = v30;
    a2 = v34;
    goto LABEL_22;
  }
  uint64_t result = v30;
  a2 = v34;
  if (v24)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v26 + 16))(v26, v25, v24, 0);
    if (*v34) {
      goto LABEL_47;
    }
    uint64_t v19 = 0;
    uint64_t result = v30;
    a2 = v34;
    unint64_t v18 = v34[1];
  }
LABEL_22:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v21 = a2[3];
  if (v21 && v18)
  {
    uint64_t v27 = result;
    long long v31 = a2;
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v19, v18);
    goto LABEL_35;
  }
LABEL_23:
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v22 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v22)
  {
    long long v23 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v23();
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = (a2[2] + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 7)
  {
    unint64_t v15 = 0;
    unint64_t v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(unint64_t))(*(void *)v17 + 16))(v17);
        unint64_t v16 = *a2;
        unint64_t v15 = a2[1];
      }
      else
      {
        unint64_t v15 = 0;
        unint64_t v16 = 0;
      }
    }
LABEL_17:
    unint64_t v6 = 0;
    unint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    unint64_t v18 = a2[3];
    if (v18)
    {
      if (!v15)
      {
        unint64_t v6 = 0;
        unint64_t v5 = 0;
        goto LABEL_23;
      }
      (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v18 + 16))(v18, v16, v15);
      unint64_t v5 = *a2;
      if (!*a2) {
        goto LABEL_22;
      }
      __break(1u);
LABEL_21:
      unint64_t v5 = *a2;
LABEL_22:
      unint64_t v6 = a2[1];
    }
LABEL_23:
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result)
    {
      if (v6) {
        uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v5);
      }
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 48) = 0;
    return result;
  }
  unint64_t v9 = (uint64_t *)(v5 + v7);
  a2[2] = (unint64_t)(v9 + 1);
  if (!v5)
  {
    unint64_t v15 = v6;
    unint64_t v16 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = *v9;
  if ((unint64_t)(*v9 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
    goto LABEL_23;
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v19);
  if (!v20) {
    goto LABEL_21;
  }
  IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v21);
  if (v22 && (uint64_t result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a2), BYTE3(result)))
  {
    *(void *)a1 = v10;
    *(_OWORD *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 24) = v21;
    *(_WORD *)(a1 + 40) = result;
    *(unsigned char *)(a1 + 42) = BYTE2(result);
    char v12 = 1;
  }
  else
  {
    unint64_t v13 = *a2;
    unint64_t v14 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v14) {
      uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)result + 16))(result, v13);
    }
    char v12 = 0;
    *(unsigned char *)a1 = 0;
  }
  *(unsigned char *)(a1 + 48) = v12;
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::ImagePaintingOptions>(uint64_t *a1)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ImagePaintingOptions,void>::decode(a1);
  if (!BYTE3(result))
  {
    uint64_t v3 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5) {
      BOOL v6 = v4 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v3);
      return v7;
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>>(unsigned char *a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a1[112])
  {
    return (unint64_t *)IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder>(unsigned char *a1, unint64_t *a2)
{
  uint64_t result = (unint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2);
  v6[0] = result;
  v6[1] = v5;
  if ((_BYTE)v5) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2, (uint64_t)v6);
  }
  *a1 = 0;
  a1[112] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(unsigned char *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = IPC::Decoder::decode<WebCore::FloatRect>(a2, (uint64_t)v7);
  if (v7[16]) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>(a1, a2, a3, (uint64_t)v7);
  }
  *a1 = 0;
  a1[112] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect>(unsigned char *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = IPC::Decoder::decode<WebCore::FloatRect>(a2, (uint64_t)v9);
  if (v9[16]) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect>(a1, a2, a3, a4, (uint64_t)v9);
  }
  *a1 = 0;
  a1[112] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect>(unsigned char *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = IPC::Decoder::decode<WebCore::AffineTransform>((uint64_t)v11, a2);
  if (v11[48]) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform>(a1, a2, a3, a4, a5, (uint64_t)v11);
  }
  *a1 = 0;
  a1[112] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform>(unsigned char *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  unint64_t v14 = result;
  int v15 = v13;
  if ((_BYTE)v13) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint>(a1, a2, a3, a4, a5, a6, (uint64_t)&v14);
  }
  *a1 = 0;
  a1[112] = 0;
  return result;
}

unint64_t *IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint>(unsigned char *a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = IPC::Decoder::decode<WebCore::FloatPoint>(a2);
  unint64_t v16 = result;
  int v17 = v15;
  if ((_BYTE)v15) {
    return (unint64_t *)IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize>(a1, (uint64_t *)a2, a3, a4, a5, a6, a7, (uint64_t)&v16);
  }
  *a1 = 0;
  a1[112] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize>(unsigned char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = IPC::Decoder::decode<WebCore::ImagePaintingOptions>(a2);
  int v16 = result;
  if (BYTE3(result)) {
    return IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>((uint64_t)a1, *(void *)a3, *(unsigned char *)(a3 + 8), a4, a5, a6, *(void *)a7, *(unsigned char *)(a7 + 8), *(void *)a8, *(unsigned char *)(a8 + 8), (uint64_t)&v16);
  }
  *a1 = 0;
  a1[112] = 0;
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::FloatRect,WebCore::FloatRect,WebCore::AffineTransform,WebCore::FloatPoint,WebCore::FloatSize,WebCore::ImagePaintingOptions>(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a3 && *(unsigned char *)(a4 + 16) && *(unsigned char *)(a5 + 16) && *(unsigned char *)(a6 + 48) && a8 && a10 && *(unsigned char *)(a11 + 3))
  {
    *(_OWORD *)(result + 8) = *(_OWORD *)a4;
    *(_OWORD *)(result + 24) = *(_OWORD *)a5;
    long long v11 = *(_OWORD *)(a6 + 16);
    *(_OWORD *)(result + 40) = *(_OWORD *)a6;
    *(void *)uint64_t result = a2;
    *(_OWORD *)(result + 56) = v11;
    *(_OWORD *)(result + 72) = *(_OWORD *)(a6 + 32);
    *(void *)(result + 88) = a7;
    *(void *)(result + 96) = a9;
    *(unsigned char *)(result + 106) = *(unsigned char *)(a11 + 2);
    *(_WORD *)(result + 104) = *(_WORD *)a11;
    *(unsigned char *)(result + 112) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::CompositeMode>>(uint64_t *a1)
{
  int v2 = IPC::ArgumentCoder<WebCore::CompositeMode,void>::decode(a1);
  LODWORD(v3) = 0x10000;
  if ((v2 & 0xFF0000) == 0)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v3 = a1[3];
    if (v3)
    {
      int v12 = v2;
      if (v7) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v6);
      }
      LODWORD(v3) = 0;
      int v2 = v12;
    }
  }
  if ((v2 & 0xFFFFFFu) <= 0x10000) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = v2;
  }
  uint64_t result = v2 & 0xFF00 | v4 | v3;
  if ((v3 & 0x10000) == 0)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      if (v9)
      {
        uint64_t v11 = result;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
        return v11;
      }
    }
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::FloatRect,float>>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v19);
  if (v20)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = *a2;
    unint64_t v7 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
    if (v5 >= v7 && v5 - v7 > 3)
    {
      uint64_t v9 = (int *)(v6 + v7);
      a2[2] = (unint64_t)(v9 + 1);
      if (v6)
      {
        int v10 = *v9;
        *(_OWORD *)a1 = v19;
        *(_DWORD *)(a1 + 16) = v10;
        *(unsigned char *)(a1 + 20) = 1;
        return result;
      }
      unint64_t v15 = v5;
      unint64_t v11 = 0;
    }
    else
    {
      unint64_t v15 = 0;
      unint64_t v11 = 0;
      *a2 = 0;
      a2[1] = 0;
      unint64_t v16 = a2[3];
      if (v16)
      {
        if (v5)
        {
          (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v16 + 16))(v16, v6, v5);
          unint64_t v11 = *a2;
          unint64_t v15 = a2[1];
        }
        else
        {
          unint64_t v15 = 0;
          unint64_t v11 = 0;
        }
      }
    }
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = a2[3];
    if (v13 && v15) {
      goto LABEL_23;
    }
  }
  else
  {
    unint64_t v11 = *a2;
    unint64_t v12 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v13 = a2[3];
    if (v13) {
      BOOL v14 = v12 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
LABEL_23:
    }
      (*(void (**)(unint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 20) = 0;
  unint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unint64_t *)a2[3];
  if (result && v17)
  {
    unint64_t v18 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v18();
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::FloatPoint,WebCore::FloatPoint>>(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 v4 = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
  if (v5)
  {
    unint64_t v6 = v4;
    uint64_t result = IPC::ArgumentCoder<WebCore::DisplayList::Translate,void>::decode(a2);
    if (v8)
    {
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = result;
      *(unsigned char *)(a1 + 16) = 1;
      return result;
    }
    unint64_t v9 = *a2;
    unint64_t v13 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v11 = a2[3];
    if (v11 && v13) {
      goto LABEL_17;
    }
  }
  else
  {
    unint64_t v9 = *a2;
    unint64_t v10 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v11 = a2[3];
    if (v11) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12) {
LABEL_17:
    }
      (*(void (**)(unint64_t, unint64_t))(*(void *)v11 + 16))(v11, v9);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  unint64_t v14 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (unint64_t *)a2[3];
  if (result && v14)
  {
    unint64_t v15 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v15();
  }
  return result;
}

unint64_t *IPC::Decoder::decode<std::tuple<WebCore::PathDataLine>>(uint64_t a1, unint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::PathDataLine,void>::decode(a2, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a1 = v8;
    *(unsigned char *)(a1 + 16) = 1;
  }
  else
  {
    unint64_t v5 = *a2;
    unint64_t v6 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (unint64_t *)a2[3];
    if (result)
    {
      if (v6)
      {
        (*(void (**)(unint64_t *, unint64_t))(*result + 16))(result, v5);
        unint64_t v6 = a2[1];
        uint64_t result = (unint64_t *)a2[3];
      }
    }
    else
    {
      unint64_t v6 = 0;
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *a2 = 0;
    a2[1] = 0;
    if (result && v6)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*result + 16);
      return (unint64_t *)v7();
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<WebCore::PathSegment>>(uint64_t a1, unint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::ArgumentCoder<WebCore::PathSegment,void>::decode(a2, (uint64_t)v10);
  if (v12)
  {
    long long v5 = v10[1];
    *(_OWORD *)a1 = v10[0];
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = v10[2];
    *(void *)(a1 + 48) = v11;
    *(unsigned char *)(a1 + 56) = 1;
  }
  else
  {
    unint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    unint64_t v8 = a2[3];
    if (v8) {
      BOOL v9 = v7 == 0;
    }
    else {
      BOOL v9 = 1;
    }
    if (!v9) {
      (*(void (**)(unint64_t, unint64_t))(*(void *)v8 + 16))(v8, v6);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 56) = 0;
    return IPC::Decoder::markInvalid((IPC::Decoder *)a2);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteFaceDetector6DetectEN6WebKit18RemoteFaceDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedFaceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BBD60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteFaceDetector6DetectEN6WebKit18RemoteFaceDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedFaceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BBD60;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages18RemoteFaceDetector6DetectEN6WebKit18RemoteFaceDetectorES8_FvNS_23ObjectIdentifierGenericIN7WebCore31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONS_6VectorINSA_14ShapeDetection12DetectedFaceELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSN_EE4callESN_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 3155;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v5, *(unsigned int *)(a2 + 12));
  int v6 = *(_DWORD *)(a2 + 12);
  if (v6)
  {
    unint64_t v7 = *(float **)a2;
    unint64_t v8 = &v7[10 * v6];
    do
    {
      IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v5, v7);
      IPC::ArgumentCoder<std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::encode<IPC::Encoder,std::optional<WTF::Vector<WebCore::ShapeDetection::Landmark,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v5, (uint64_t)(v7 + 4));
      v7 += 10;
    }
    while (v7 != v8);
  }
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU14RequestAdapterEN6WebKit9RemoteGPUES8_FvRKNS7_6WebGPU21RequestAdapterOptionsENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteGPURequestAdapterResponseEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BBD88;
  int v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU14RequestAdapterEN6WebKit9RemoteGPUES8_FvRKNS7_6WebGPU21RequestAdapterOptionsENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteGPURequestAdapterResponseEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BBD88;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU14RequestAdapterEN6WebKit9RemoteGPUES8_FvRKNS7_6WebGPU21RequestAdapterOptionsENS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteGPURequestAdapterResponseEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSO_EE4callESO_(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v26, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v26);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_29;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 120))
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(void *)(v4 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_29;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_29;
        }
      }
    }
    char v12 = (IPC::Encoder *)(v11 + 256);
    uint64_t v26 = v12;
    unint64_t v27 = v10;
    unint64_t v28 = 0;
    uint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 >= (char *)v12)
    {
      if (v14 <= 0xFFFFFFFFFFFFFFFDLL && v14 + 2 <= v10)
      {
        *(_WORD *)uint64_t v13 = 2872;
        unint64_t v28 = v14 + 2;
        uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>((uint64_t *)&v26, a2);
        if (v27) {
          return result;
        }
        *(_WORD *)((char *)v12 + v14) = 2870;
        goto LABEL_16;
      }
      unint64_t v27 = 0;
    }
    uint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>((uint64_t *)&v26, a2);
    if (v27) {
      return result;
    }
  }
LABEL_16:
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 2872;
  *((void *)v17 + 1) = v5;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v26 = v17;
  int v18 = *(unsigned __int8 *)(a2 + 176);
  long long v19 = (unsigned char *)IPC::Encoder::grow(v17, 1uLL, 1);
  if (v18)
  {
    if (!v20)
    {
LABEL_30:
      __break(0xC471u);
      JUMPOUT(0x198A3A998);
    }
    unsigned char *v19 = 1;
    if (!*(unsigned char *)(a2 + 176))
    {
      uint64_t v24 = (uint64_t *)std::__throw_bad_optional_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>(v24, v25);
    }
    IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(v17, a2);
  }
  else
  {
    if (!v20)
    {
      __break(0xC471u);
      JUMPOUT(0x198A3A9D4);
    }
    unsigned char *v19 = 0;
  }
  if (*(unsigned char *)(v4 + 120)) {
    return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v4 + 128), v17);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v4 + 40), (uint64_t *)&v26, 0, 0);
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::RemoteGPURequestAdapterResponse>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteGPURequestAdapterResponse>&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 176))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 176))
      {
        uint64_t v4 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
        return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEED1Ev(v4);
      }
    }
    return IPC::ArgumentCoder<WebKit::RemoteGPURequestAdapterResponse,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BBDB0;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BBDB0;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages9RemoteGPU7IsValidEN6WebKit9RemoteGPUES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvbbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbbEE4callEbb(uint64_t a1, char a2, char a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v28, (uint64_t **)(*(void *)(a1 + 24) + 40));
  uint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v28);
  unint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v12 = *(void *)(v3 + 56);
    unint64_t v10 = *(void *)(v3 + 64);
    unint64_t v11 = *(void *)(v10 + 8);
    unint64_t v9 = v12 - 1;
    if (v12 == 1)
    {
      if (v11 < 0x100)
      {
LABEL_21:
        __break(1u);
LABEL_22:
        BOOL v13 = v10 >= v9;
        unint64_t v18 = v10 - v9;
        if (v13 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v11) {
          *(_WORD *)(v9 + v18) = 2870;
        }
        goto LABEL_29;
      }
      unint64_t v11 = 0;
      unint64_t v10 = *(void *)(v10 + 16);
    }
    else
    {
      BOOL v13 = v11 >= 0x100;
      v11 -= 256;
      if (!v13) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void *)(v10 + 16);
      if (v12)
      {
        BOOL v13 = v11 >= v9;
        unint64_t v11 = v12 - 1;
        if (!v13) {
          goto LABEL_21;
        }
      }
    }
    unint64_t v9 = v10 + 256;
    unint64_t v10 = (v10 + 257) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v14 = v10 - v9;
    if (v10 < v9)
    {
      unint64_t v15 = 0;
    }
    else
    {
      unint64_t v15 = v14 + 2;
      if (v14 > 0xFFFFFFFFFFFFFFFDLL || v15 > v11)
      {
        unint64_t v17 = 0;
        unint64_t v15 = 0;
        goto LABEL_16;
      }
      *(_WORD *)unint64_t v10 = 2872;
    }
    unint64_t v17 = v11;
LABEL_16:
    if (v15 < v17)
    {
      *(unsigned char *)(v9 + v15) = a2;
      if (v15 + 1 < v17)
      {
        *(unsigned char *)(v9 + v15 + 1) = a3;
        return result;
      }
    }
    goto LABEL_22;
  }
LABEL_29:
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 2872;
  *((void *)v20 + 1) = v4;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v28 = v20;
  long long v21 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
  if (!v22)
  {
    __break(0xC471u);
    JUMPOUT(0x198A3AD74);
  }
  unsigned char *v21 = a2;
  long long v23 = (unsigned char *)IPC::Encoder::grow(v20, 1uLL, 1);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x198A3AD94);
  }
  unsigned char *v23 = a3;
  if (*(unsigned char *)(v3 + 120)) {
    return std::unique_ptr<IPC::Encoder>::reset[abi:sn180100]((IPC::Encoder **)(v3 + 128), v20);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v28, 0, 0);
  uint64_t result = v28;
  unint64_t v28 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v25);
    return (IPC::Encoder *)WTF::fastFree(v26, v27);
  }
  return result;
}

void WebKit::PCM::addVersionAndEncodedMessageToDictionary(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_set_uint64(xdict, "version", 1uLL);
  WebKit::vectorToXPCData(a1, v4, &value);
  xpc_object_t v5 = value;
  xpc_dictionary_set_value(xdict, "encoded message", value);
  if (v5)
  {
    CFRelease(v5);
  }
}

void sub_198A3AE38(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

id WebKit::NetworkCache::Data::empty@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F14410];
  id result = MEMORY[0x1E4F14410];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

size_t WebKit::NetworkCache::Data::apply(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) || (uint64_t v4 = *(NSObject **)a1) == 0) {
    size_t result = *(void *)(a1 + 16);
  }
  else {
    size_t result = dispatch_data_get_size(v4);
  }
  if (result)
  {
    uint64_t v6 = *(NSObject **)a1;
    applier[0] = MEMORY[0x1E4F143A8];
    applier[1] = 3321888768;
    applier[2] = ___ZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEE_block_invoke;
    applier[3] = &__block_descriptor_40_e8_32c108_ZTSKZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEEE3__0_e47_B40__0__NSObject_OS_dispatch_data__8Q16r_v24Q32l;
    applier[4] = a2;
    return dispatch_data_apply(v6, applier);
  }
  return result;
}

uint64_t ___ZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(***(void ***)(a1 + 32) + 16))(**(void **)(a1 + 32), a4, a5);
}

uint64_t __copy_helper_block_e8_32c108_ZTSKZNK6WebKit12NetworkCache4Data5applyERKN3WTF8FunctionIFbNSt3__14spanIKhLm18446744073709551615EEEEEEE3__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

__n128 WebKit::NetworkCache::concatenate@<Q0>(WebKit::NetworkCache *this@<X0>, NSObject **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(NSObject **)this;
  unint64_t v8 = *a2;
  if (v7)
  {
    unint64_t v9 = (__n128 *)(a3 + 8);
    if (v8)
    {
      *(void *)a3 = dispatch_data_create_concat(v7, v8);
      v9->n128_u64[0] = 0;
      *(void *)(a3 + 16) = 0;
      *(unsigned char *)(a3 + 24) = 0;
    }
    else
    {
      *(void *)a3 = v7;
      unint64_t v11 = v7;
      __n128 result = *(__n128 *)((char *)this + 8);
      __n128 *v9 = result;
      *(unsigned char *)(a3 + 24) = *((unsigned char *)this + 24);
    }
  }
  else
  {
    uint64_t v12 = a2;
    *(void *)a3 = v8;
    if (v8) {
      BOOL v13 = v8;
    }
    __n128 result = *(__n128 *)(v12 + 1);
    *(__n128 *)(a3 + 8) = result;
    *(unsigned char *)(a3 + 24) = *((unsigned char *)v12 + 24);
  }
  return result;
}

uint64_t ___ZN6WebKit12NetworkCache4Data8adoptMapEON3WTF14FileSystemImpl14MappedFileDataEi_block_invoke(uint64_t a1)
{
  return munmap(*(void **)(a1 + 32), *(void *)(a1 + 40));
}

uint64_t WebKit::NetworkCache::IOChannel::IOChannel(uint64_t a1, const WTF::String *a2, int a3, uint64_t a4)
{
  *(_DWORD *)a1 = 1;
  uint64_t v6 = *(void *)a2;
  *(void *)a2 = 0;
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = -1;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  WTF::FileSystemImpl::fileSystemRepresentation((uint64_t *)&v29, (WTF::FileSystemImpl *)(a1 + 8), a2);
  int v7 = *(_DWORD *)(a1 + 16);
  if (v7 == 2)
  {
    if (v29) {
      unint64_t v8 = v29 + 16;
    }
    else {
      unint64_t v8 = 0;
    }
    unlink(v8);
    int v9 = 518;
    uint64_t v10 = 384;
    if (BYTE4(a4)) {
      int v11 = a4;
    }
    else {
      int v11 = 4;
    }
  }
  else
  {
    if (BYTE4(a4)) {
      int v22 = a4;
    }
    else {
      int v22 = 2;
    }
    int v23 = 5;
    unsigned int v24 = 384;
    if (BYTE4(a4)) {
      int v25 = a4;
    }
    else {
      int v25 = 4;
    }
    if (v7 != 1)
    {
      int v23 = 0;
      unsigned int v24 = 0;
      int v25 = 0;
    }
    BOOL v26 = v7 == 0;
    if (v7) {
      int v9 = v23;
    }
    else {
      int v9 = 4;
    }
    if (v7) {
      uint64_t v10 = v24;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v26) {
      int v11 = v22;
    }
    else {
      int v11 = v25;
    }
  }
  if (v29) {
    uint64_t v12 = v29 + 16;
  }
  else {
    uint64_t v12 = 0;
  }
  dispatch_fd_t v13 = open(v12, v9, v10);
  *(_DWORD *)(a1 + 20) = v13;
  uint64_t v14 = -2;
  if (v11 != 3) {
    uint64_t v14 = 0;
  }
  if (v11 == 4) {
    intptr_t v15 = -32768;
  }
  else {
    intptr_t v15 = v14;
  }
  global_queue = dispatch_get_global_queue(v15, 0);
  cleanup_handler[0] = MEMORY[0x1E4F143A8];
  cleanup_handler[1] = 3321888768;
  cleanup_handler[2] = ___ZN6WebKit12NetworkCache9IOChannelC2EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEE_block_invoke;
  cleanup_handler[3] = &__block_descriptor_36_e8_32c105_ZTSKZN6WebKit12NetworkCache9IOChannelC1EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEEE3__0_e8_v12__0i8l;
  dispatch_fd_t v28 = v13;
  unint64_t v17 = dispatch_io_create(1uLL, v13, global_queue, cleanup_handler);
  unint64_t v18 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v17;
  if (v18)
  {

    unint64_t v17 = *(NSObject **)(a1 + 32);
  }
  dispatch_io_set_low_water(v17, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v20 = (WTF *)v29;
  uint64_t v29 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1) {
      WTF::fastFree(v20, v19);
    }
    else {
      --*(_DWORD *)v20;
    }
  }
  return a1;
}

void sub_198A3B200(_Unwind_Exception *exception_object, void *a2)
{
  uint64_t v6 = *(WTF **)(v4 - 40);
  *(void *)(v4 - 40) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1) {
      WTF::fastFree(v6, a2);
    }
    else {
      --*(_DWORD *)v6;
    }
  }
  int v7 = *(void **)(v2 + 32);
  if (v7) {

  }
  unint64_t v8 = *v3;
  unsigned int *v3 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN6WebKit12NetworkCache9IOChannelC2EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEE_block_invoke(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

uint64_t __copy_helper_block_e8_32c105_ZTSKZN6WebKit12NetworkCache9IOChannelC1EON3WTF6StringENS1_4TypeENSt3__18optionalINS2_6Thread3QOSEEEE3__0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 32);
  return result;
}

void WebKit::NetworkCache::IOChannel::~IOChannel(WebKit::NetworkCache::IOChannel *this, WTF::StringImpl *a2)
{
  if (atomic_exchange((atomic_uchar *volatile)this + 24, 1u))
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = (void *)*((void *)this + 4);
    if (v3) {

    }
    uint64_t v4 = (WTF::StringImpl *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
}

unsigned int *WebKit::NetworkCache::IOChannel::read(uint64_t a1, off_t a2, size_t a3, uint64_t a4, uint64_t *a5)
{
  if (a1) {
    atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  }
  unint64_t v8 = *(NSObject **)(a1 + 32);
  int v9 = *(NSObject **)(a4 + 16);
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  uint64_t v10 = *a5;
  *a5 = 0;
  int v11 = malloc_type_malloc(0x38uLL, 0x10E00407612E4BDuLL);
  void *v11 = MEMORY[0x1E4F14398];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::descriptor;
  v11[4] = a1;
  v11[5] = v10;
  *((unsigned char *)v11 + 48) = 0;
  dispatch_io_read(v8, a2, a3, v9, v11);
  _Block_release(v11);

  return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref((unsigned int *)a1, v12);
}

void sub_198A3B414(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0::~$_0((uint64_t)&a12, a2);
  WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0::~$_0((uint64_t)&a9, v14);
  WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v12, v15);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

unsigned int *WebKit::NetworkCache::IOChannel::write(uint64_t a1, off_t a2, NSObject **a3, uint64_t a4, uint64_t *a5)
{
  if (a1) {
    atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  }
  int v7 = *a3;
  unint64_t v8 = *(NSObject **)(a1 + 32);
  int v9 = *(NSObject **)(a4 + 16);
  atomic_fetch_add((atomic_uint *volatile)a1, 1u);
  uint64_t v10 = *a5;
  *a5 = 0;
  int v11 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
  void *v11 = MEMORY[0x1E4F14398];
  v11[1] = 50331650;
  v11[2] = WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke;
  v11[3] = &WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::descriptor;
  v11[4] = a1;
  v11[5] = v10;
  dispatch_io_write(v8, a2, v7, v9, v11);
  _Block_release(v11);

  return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref((unsigned int *)a1, v12);
}

void sub_198A3B5A8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0::~$_0((uint64_t)&a11, a2);
  WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0::~$_0((uint64_t)&a9, v13);
  WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v11, v14);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(unsigned int **)a1;
  *(void *)a1 = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  return a1;
}

void WebKit::NetworkActivityTracker::complete(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    *(unsigned char *)(a1 + 8) = 1;
    nw_activity_complete_with_reason();
    uint64_t v2 = *(const void **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

WebKit *WebKit::enableAdvancedPrivacyProtections(WebKit *this, NSURLRequest *a2)
{
  uint64_t v2 = this;
  char v3 = (char)a2;
  if ((a2 & 0x80) != 0) {
    this = (WebKit *)[(WebKit *)this _setUseEnhancedPrivacyMode:1];
  }
  if (v3)
  {
    this = (WebKit *)WebKit::shouldBlockTrackersForThirdPartyCloaking(v2, a2);
    if (this)
    {
      return (WebKit *)[(WebKit *)v2 _setBlockTrackers:1];
    }
  }
  return this;
}

uint64_t WebKit::shouldBlockTrackersForThirdPartyCloaking(WebKit *this, NSURLRequest *a2)
{
  char v3 = (void *)[(WebKit *)this URL];
  uint64_t v4 = (void *)[(WebKit *)this mainDocumentURL];
  uint64_t result = 0;
  if (v3 && v4)
  {
    MEMORY[0x19972E8A0](v14, v3);
    MEMORY[0x19972E8A0](v13, v4);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v15, (const WTF::URL *)v14);
    uint64_t v6 = WTF::URL::host((WTF::URL *)v13);
    char v9 = WebCore::RegistrableDomain::matches(&v15, v6, v7);
    uint64_t v10 = v15;
    intptr_t v15 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    int v11 = v13[0];
    v13[0] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    uint64_t v12 = v14[0];
    v14[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
      {
        WTF::StringImpl::destroy(v12, v8);
        if (v9) {
          return objc_msgSend((id)objc_msgSend(v3, "host"), "isEqualToString:", objc_msgSend(v4, "host")) ^ 1;
        }
        return 0;
      }
      *(_DWORD *)v12 -= 2;
    }
    if (v9) {
      return objc_msgSend((id)objc_msgSend(v3, "host"), "isEqualToString:", objc_msgSend(v4, "host")) ^ 1;
    }
    return 0;
  }
  return result;
}

void sub_198A3B840(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::NetworkDataTaskCocoa::updateFirstPartyInfoForSession(WebKit::NetworkDataTaskCocoa *this, const WTF::URL *a2)
{
  uint64_t result = (WTF::StringImpl *)WebKit::NetworkTaskCocoa::shouldApplyCookiePolicyForThirdPartyCloaking((WebKit::NetworkDataTaskCocoa *)((char *)this + 552));
  if (result)
  {
    uint64_t result = (WTF::StringImpl *)WTF::URL::host(a2);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 2);
      if (v6) {
        uint64_t v7 = *(WebKit::NetworkSession **)(v6 + 8);
      }
      else {
        uint64_t v7 = 0;
      }
      WebKit::NetworkDataTaskCocoa::updateFirstPartyInfoForSession(WTF::URL const&)::$_0::operator()(&v20, *((void **)this + 76));
      if (v20)
      {
        if (*((_DWORD *)v20 + 1))
        {
          if ((MEMORY[0x19972E990]() & 1) == 0)
          {
            uint64_t v17 = WTF::URL::host(a2);
            uint64_t v18 = v13;
            WTF::StringView::toString((uint64_t *)&v19, (WTF::StringView *)&v17);
            WebKit::NetworkSession::setFirstPartyHostCNAMEDomain((uint64_t)v7, &v19, &v20);
            intptr_t v15 = v19;
            long long v19 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2) {
                WTF::StringImpl::destroy(v15, v14);
              }
              else {
                *(_DWORD *)v15 -= 2;
              }
            }
          }
        }
      }
      unint64_t v8 = objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(*((id *)this + 76), "_incompleteTaskMetrics"), "transactionMetrics"), "lastObject"), "remoteAddress");
      if ([v8 length])
      {
        uint64_t v17 = WTF::URL::host(a2);
        uint64_t v18 = v10;
        WTF::StringView::toString((uint64_t *)&v19, (WTF::StringView *)&v17);
        MEMORY[0x19972EAD0](&v16, v8);
        WebKit::NetworkSession::setFirstPartyHostIPAddress(v7, (const WTF::String *)&v19, (const WTF::String *)&v16);
        int v11 = v16;
        unint64_t v16 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v9);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
        uint64_t v12 = v19;
        long long v19 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v9);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
      uint64_t result = v20;
      uint64_t v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198A3BA68(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkTaskCocoa::shouldApplyCookiePolicyForThirdPartyCloaking(WebKit::NetworkTaskCocoa *this)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 1) + 8) + 32);
  uint64_t v6 = *(void *)(*(void *)(*((void *)this + 1) + 8) + 24);
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v2 + 232), &v6);
  if (result)
  {
    uint64_t v4 = *(void *)(*(void *)(*((void *)this + 1) + 8) + 32);
    uint64_t v6 = *(void *)(*(void *)(*((void *)this + 1) + 8) + 24);
    uint64_t v5 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v4 + 232), &v6);
    return MEMORY[0x1F4175858](v5);
  }
  return result;
}

WTF::StringImpl *WebKit::NetworkDataTaskCocoa::updateFirstPartyInfoForSession(WTF::URL const&)::$_0::operator()(WTF::StringImpl **a1, void *a2)
{
  uint64_t result = (WTF::StringImpl *)objc_msgSend((id)objc_msgSend(a2, "_resolvedCNAMEChain"), "lastObject");
  if (result)
  {
    MEMORY[0x19972EAD0](&v5, result);
    WebKit::NetworkTaskCocoa::lastCNAMEDomain(a1, &v5);
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *a1 = 0;
  }
  return result;
}

void sub_198A3BC00(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::StringView::toString(WTF::StringView *this)
{
  if (*((unsigned char *)this + 12)) {
    return WTF::String::String();
  }
  else {
    return WTF::String::String();
  }
}

WebKit::NetworkDataTaskCocoa *WebKit::NetworkDataTaskCocoa::NetworkDataTaskCocoa(WebKit::NetworkDataTaskCocoa *this, WebKit::NetworkSession *a2, WebKit::NetworkDataTaskClient *a3, const WebKit::NetworkLoadParameters *a4)
{
  uint64_t v178 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (const WebKit::NetworkLoadParameters *)((char *)a4 + 88);
  unint64_t v8 = (WebKit::NetworkTaskCocoa *)(WebKit::NetworkDataTask::NetworkDataTask((uint64_t)this, (uint64_t)a2, (uint64_t)a3, (const WebKit::NetworkLoadParameters *)((char *)a4 + 88), *((unsigned char *)a4 + 290), *((unsigned char *)a4 + 292), *((unsigned char *)a4 + 294))+ 552);
  WebKit::NetworkTaskCocoa::NetworkTaskCocoa((uint64_t)v8, (uint64_t)a2, *((unsigned char *)a4 + 2896));
  *(void *)this = &unk_1EE9BBE68;
  *((void *)this + 69) = &unk_1EE9BBEF8;
  char v9 = (unsigned int *)WebKit::NetworkSessionCocoa::sessionWrapperForTask((uint64_t)a2, *(WebKit::AuxiliaryProcess **)a4, v7, *((unsigned __int8 *)a4 + 290), *((_WORD *)a4 + 1480));
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v9, (uint64_t)v9);
  uint64_t v10 = *(atomic_uint **)v9;
  if (*(void *)v9) {
    atomic_fetch_add(v10, 1u);
  }
  *((void *)this + 74) = v10;
  *(_OWORD *)((char *)this + 600) = 0u;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebKit::NetworkDataTaskCocoa *)((char *)this + 616));
  *(_OWORD *)((char *)this + 744) = *((_OWORD *)a4 + 1);
  *((void *)this + 95) = *((void *)a4 + 1);
  *((void *)this + 96) = *(void *)a4;
  *((unsigned char *)this + 776) = *((unsigned char *)a4 + 2880);
  int v11 = (atomic_uint *)*((void *)a4 + 5);
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  *((void *)this + 98) = v11;
  WebCore::ResourceRequestBase::RequestData::RequestData((WebCore::ResourceRequestBase::RequestData *)&v162, (const String *)v7);
  uint64_t v12 = (_DWORD *)*((void *)a4 + 30);
  if (v12) {
    *v12 += 2;
  }
  uint64_t v164 = v12;
  uint64_t v13 = (_DWORD *)*((void *)a4 + 31);
  if (v13) {
    *v13 += 2;
  }
  long long v165 = v13;
  uint64_t v14 = (_DWORD *)*((void *)a4 + 32);
  if (v14) {
    ++*v14;
  }
  uint64_t v15 = *((void *)a4 + 33);
  unint64_t v166 = v14;
  uint64_t v167 = v15;
  char v168 = *((unsigned char *)a4 + 272);
  unint64_t v16 = (const void *)*((void *)a4 + 35);
  CFTypeRef cf = v16;
  if (v16) {
    CFRetain(v16);
  }
  uint64_t v17 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v162);
  uint64_t v18 = *(WTF::StringImpl **)v17;
  if (*(void *)v17) {
    *(_DWORD *)v18 += 2;
  }
  uint64_t v159 = v18;
  long long v19 = *(_OWORD *)(v17 + 24);
  long long v160 = *(_OWORD *)(v17 + 8);
  long long v161 = v19;
  if (*((unsigned char *)this + 104) == 1 && (v160 & 2) != 0)
  {
    WTF::URL::user((uint64_t *)buf, (WTF::URL *)&v159);
    int v22 = (char *)this + 48;
    long long v21 = (WTF::StringImpl *)*((void *)this + 6);
    uint64_t v23 = *(void *)buf;
    *(void *)long long buf = 0;
    *((void *)this + 6) = v23;
    if (v21)
    {
      int v24 = *(_DWORD *)v21 - 2;
      if (*(_DWORD *)v21 != 2)
      {
LABEL_21:
        *(_DWORD *)long long v21 = v24;
        goto LABEL_22;
      }
      WTF::StringImpl::destroy(v21, v20);
      long long v21 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v21)
      {
        int v24 = *(_DWORD *)v21 - 2;
        if (*(_DWORD *)v21 == 2)
        {
          WTF::StringImpl::destroy(v21, v25);
          goto LABEL_22;
        }
        goto LABEL_21;
      }
    }
LABEL_22:
    WTF::URL::password((uint64_t *)buf, (WTF::URL *)&v159);
    dispatch_fd_t v28 = (char *)this + 56;
    unint64_t v27 = (WTF::StringImpl *)*((void *)this + 7);
    uint64_t v29 = *(void *)buf;
    *(void *)long long buf = 0;
    *((void *)this + 7) = v29;
    if (!v27) {
      goto LABEL_27;
    }
    int v30 = *(_DWORD *)v27 - 2;
    if (*(_DWORD *)v27 != 2) {
      goto LABEL_26;
    }
    WTF::StringImpl::destroy(v27, v26);
    unint64_t v27 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (!v27) {
      goto LABEL_27;
    }
    int v30 = *(_DWORD *)v27 - 2;
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v31);
    }
    else {
LABEL_26:
    }
      *(_DWORD *)unint64_t v27 = v30;
LABEL_27:
    WebCore::ResourceRequestBase::removeCredentials((WebCore::ResourceRequestBase *)&v162);
    uint64_t v32 = WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v162);
    WTF::String::operator=((uint64_t *)&v159, (WTF::StringImpl **)v32);
    long long v33 = *(_OWORD *)(v32 + 24);
    long long v160 = *(_OWORD *)(v32 + 8);
    long long v161 = v33;
    uint64_t v34 = *(void *)(*(void *)(*((void *)this + 2) + 8) + 32);
    *(void *)long long buf = *(void *)(*(void *)(*((void *)this + 2) + 8) + 24);
    uint64_t v35 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v34 + 232), buf);
    if (!v35) {
      goto LABEL_54;
    }
    uint64_t v36 = v35;
    if (*(void *)v22 && *(_DWORD *)(*(void *)v22 + 4) || *(void *)v28 && *(_DWORD *)(*(void *)v28 + 4))
    {
      WebCore::CredentialBase::CredentialBase();
      *(void *)uint64_t v171 = 0;
      WebCore::CredentialStorage::set((WebCore::CredentialStorage *)(v36 + 96), (WebKit::NetworkDataTaskCocoa *)((char *)this + 64), (const WebCore::Credential *)buf, (const WTF::URL *)&v159);
    }
    else
    {
      WebCore::CredentialStorage::get((uint64_t *)buf, (WebCore::CredentialStorage *)(v35 + 96), (WebKit::NetworkDataTaskCocoa *)((char *)this + 64), (const WTF::URL *)&v159);
      uint64_t v39 = *(void *)buf;
      *(void *)long long buf = 0;
      uint64_t v40 = (WTF::StringImpl *)*((void *)this + 9);
      *((void *)this + 9) = v39;
      if (v40)
      {
        if (*(_DWORD *)v40 == 2) {
          WTF::StringImpl::destroy(v40, v37);
        }
        else {
          *(_DWORD *)v40 -= 2;
        }
      }
      uint64_t v41 = *(void *)&buf[8];
      *(void *)&uint8_t buf[8] = 0;
      char v42 = (WTF::StringImpl *)*((void *)this + 10);
      *((void *)this + 10) = v41;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2) {
          WTF::StringImpl::destroy(v42, v37);
        }
        else {
          *(_DWORD *)v42 -= 2;
        }
      }
      *((unsigned char *)this + 88) = buf[16];
      uint64_t v43 = *(void *)v171;
      *(void *)uint64_t v171 = 0;
      char v44 = (const void *)*((void *)this + 12);
      *((void *)this + 12) = v43;
      if (!v44) {
        goto LABEL_46;
      }
      CFRelease(v44);
    }
    uint64_t v38 = *(const void **)v171;
    *(void *)uint64_t v171 = 0;
    if (v38) {
      CFRelease(v38);
    }
LABEL_46:
    uint16x8_t v45 = *(WTF::StringImpl **)&buf[8];
    *(void *)&uint8_t buf[8] = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, v37);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
    uint64_t v46 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2) {
        WTF::StringImpl::destroy(v46, v37);
      }
      else {
        *(_DWORD *)v46 -= 2;
      }
    }
  }
LABEL_54:
  if ((WebCore::Credential::isEmpty((WebKit::NetworkDataTaskCocoa *)((char *)this + 72)) & 1) == 0
    && (WebCore::ResourceRequestBase::hasHTTPHeaderField() & 1) == 0)
  {
    WebKit::applyBasicAuthorizationHeader((WebKit *)&v162, (WebKit::NetworkDataTaskCocoa *)((char *)this + 72), v47);
  }
  int v48 = *((unsigned __int8 *)this + 104);
  int shouldBlockCookies = v48 == 2;
  uint64_t v50 = *((void *)a2 + 4);
  *(void *)long long buf = *((void *)a2 + 3);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v50 + 232), buf)&& v48 != 2)
  {
    int shouldBlockCookies = WebCore::NetworkStorageSession::shouldBlockCookies();
  }
  WebKit::NetworkDataTask::restrictRequestReferrerToOriginIfNeeded((uint64_t)this, (WebCore::ResourceRequest *)&v162);
  char v51 = (void *)WebCore::ResourceRequest::nsURLRequest();
  uint64_t v52 = v51;
  if (v51) {
    CFRetain(v51);
  }
  char v53 = (void *)[v52 mutableCopy];
  if (*((unsigned __int8 *)a4 + 294) | *((unsigned __int8 *)a4 + 2962)
    || (uint64_t v54 = (WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)&v162),
        uint64_t v55 = (unsigned __int8 *)WTF::URL::host(v54),
        uint64_t v57 = v56,
        PartyForCookies = (WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies((WebCore::ResourceRequestBase *)&v162),
        uint64_t v59 = (unsigned __int8 *)WTF::URL::host(PartyForCookies),
        WTF::operator==(v55, v57, v59, v60)))
  {
    if (objc_opt_respondsToSelector()) {
      [v53 _setPrivacyProxyFailClosedForUnreachableNonMainHosts:1];
    }
  }
  if (!*((unsigned char *)a4 + 2963)) {
    [v53 _setProhibitPrivacyProxy:1];
  }
  char v62 = (NSURLRequest *)*((unsigned __int16 *)a4 + 1482);
  if ((v62 & 1) != 0 && *((unsigned char *)a4 + 294)) {
    WebKit::configureForAdvancedPrivacyProtections(*(WebKit **)(*(void *)(*((void *)this + 74) + 8) + 8), v61);
  }
  WebKit::enableAdvancedPrivacyProtections((WebKit *)v53, v62);
  if (!(((v62 & 0x10) == 0) | ((objc_opt_respondsToSelector() & 1) == 0))) {
    [v53 _setPrivacyProxyFailClosedForUnreachableHosts:1];
  }
  if (!(((v62 & 0x20) == 0) | ((objc_opt_respondsToSelector() & 1) == 0))) {
    [v53 _setWebSearchContent:1];
  }
  if ((objc_opt_respondsToSelector() & 1) != 0 && (*((unsigned char *)a4 + 236) & 0x40) != 0) {
    [v53 _setAllowPrivateAccessTokensForThirdParty:1];
  }
  [v53 setAttribution:(v163 & 4) == 0];
  if (v53) {
    CFRetain(v53);
  }
  if (v52) {
    CFRelease(v52);
  }
  uint64_t v63 = *((void *)this + 2);
  if (v63) {
    uint64_t v64 = *(void *)(v63 + 8);
  }
  else {
    uint64_t v64 = 0;
  }
  uint64_t v65 = [v53 attribution];
  uint64_t v66 = 1064;
  if (v65) {
    uint64_t v66 = 1065;
  }
  *(unsigned char *)(v64 + v66) = 1;
  if (*((unsigned char *)a4 + 288)) {
    int v67 = 0;
  }
  else {
    int v67 = WTF::URL::protocolIs() ^ 1;
  }
  uint64_t v68 = *((void *)this + 2);
  if (!v68)
  {
    uint64_t v69 = 0;
    if (v67) {
      goto LABEL_91;
    }
LABEL_95:
    char v70 = (void *)[v53 mutableCopy];
    [v70 _setProperty:MEMORY[0x1E4F1CC28] forKey:*MEMORY[0x1E4F18F38]];
    goto LABEL_96;
  }
  uint64_t v69 = *(void *)(v68 + 8);
  if (!v67) {
    goto LABEL_95;
  }
LABEL_91:
  char v70 = v53;
  if (!*(void *)(v69 + 1128)) {
    goto LABEL_100;
  }
  char v70 = (void *)[v53 mutableCopy];
LABEL_96:
  if (*(void *)(v69 + 1128)) {
    [v70 setBoundInterfaceIdentifier:WTF::StringImpl::operator NSString *()];
  }
  if (v53) {
    CFRelease(v53);
  }
LABEL_100:
  if ((WTF::URL::protocolIs() & 1) != 0 || WTF::URL::protocolIs())
  {
    WebKit::NetworkDataTask::scheduleFailure((uint64_t)this, 2);
    goto LABEL_103;
  }
  uint64_t v73 = (const void *)[*(id *)(*(void *)(*((void *)this + 74) + 8) + 8) dataTaskWithRequest:v70];
  uint64_t v74 = v73;
  if (v73) {
    CFRetain(v73);
  }
  uint64_t v75 = (const void *)*((void *)this + 76);
  *((void *)this + 76) = v74;
  if (v75) {
    CFRelease(v75);
  }
  uint64_t v76 = *((void *)a2 + 4);
  uint64_t v77 = WTF::URL::host((WTF::URL *)&v159);
  uint64_t v79 = *(void *)(v76 + 400);
  if (v79)
  {
    uint64_t v138 = (unsigned __int8 *)v77;
    uint64_t v139 = v78;
    unsigned int v154 = *(_DWORD *)(v79 - 8);
    int v140 = WTF::StringViewHashTranslator::hash(v77, v78);
    for (i = 0; ; int v140 = i + v141)
    {
      int v141 = v140 & v154;
      long long v142 = (uint64_t *)(v79 + 8 * (v140 & v154));
      if (*v142 != -1)
      {
        if (!*v142) {
          goto LABEL_115;
        }
        if (WTF::StringViewHashTranslator::equal(v142, v138, v139)) {
          break;
        }
      }
      ++i;
    }
    WTF::URL::port((WTF::URL *)&v159);
    host_with_numeric_port = (const void *)nw_endpoint_create_host_with_numeric_port();
    objc_msgSend(*((id *)this + 76), "set_hostOverride:", host_with_numeric_port);
    if (host_with_numeric_port) {
      CFRelease(host_with_numeric_port);
    }
  }
LABEL_115:
  if (!kdebug_is_enabled()) {
    goto LABEL_116;
  }
  if (*MEMORY[0x1E4F30948])
  {
    uint64_t v129 = WTFSignpostLogHandle();
    if (!os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_116;
    }
    uint64_t v155 = *((void *)this + 76);
    uint64_t v130 = WTFCurrentContinuousTime();
    WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)&v162);
    WTF::String::utf8();
    if (v158) {
      uint64_t v131 = (char *)v158 + 16;
    }
    else {
      uint64_t v131 = 0;
    }
    WTF::String::utf8();
    unsigned int v132 = WebCore::ResourceRequestBase::priority((WebCore::ResourceRequestBase *)&v162);
    uint64_t v133 = (char *)v157 + 16;
    if (!v157) {
      uint64_t v133 = 0;
    }
    uint64_t v134 = (float *)((char *)&unk_1994F60C0 + 4 * (char)v132);
    if (v132 >= 5) {
      uint64_t v134 = (float *)MEMORY[0x1E4F18CF0];
    }
    float v135 = *v134;
    int v136 = *((unsigned __int8 *)a4 + 2920);
    *(_DWORD *)long long buf = 67110915;
    *(_DWORD *)&uint8_t buf[4] = 1;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 0;
    *(_WORD *)&buf[14] = 2048;
    *(void *)&uint8_t buf[16] = v155;
    *(_WORD *)uint64_t v171 = 2048;
    *(void *)&v171[2] = v130;
    *(_WORD *)char v172 = 2082;
    *(void *)&v172[2] = v131;
    *(_WORD *)uint64_t v173 = 2081;
    *(void *)&v173[2] = v133;
    __int16 v174 = 2048;
    double v175 = v135;
    __int16 v176 = 1024;
    int v177 = v136;
    _os_log_impl(&dword_1985F2000, v129, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu %{public}s %{private}s pri: %.2f preconnect: %d", buf, 0x46u);
    goto LABEL_208;
  }
  uint64_t v143 = WTFSignpostLogHandle();
  uint64_t v144 = v143;
  unint64_t v145 = (const void *)*((void *)this + 76);
  if (v145)
  {
    os_signpost_id_t v146 = os_signpost_id_make_with_pointer(v143, v145);
    if (v146 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
      goto LABEL_116;
    }
  }
  else
  {
    os_signpost_id_t v146 = 0xEEEEB0B5B2B2EEEELL;
  }
  if (os_signpost_enabled(v144))
  {
    WebCore::ResourceRequestBase::httpMethod((WebCore::ResourceRequestBase *)&v162);
    WTF::String::utf8();
    if (v158) {
      uint64_t v148 = (char *)v158 + 16;
    }
    else {
      uint64_t v148 = 0;
    }
    WTF::String::utf8();
    unsigned int v149 = WebCore::ResourceRequestBase::priority((WebCore::ResourceRequestBase *)&v162);
    uint64_t v150 = (char *)v157 + 16;
    if (!v157) {
      uint64_t v150 = 0;
    }
    uint64_t v151 = (float *)((char *)&unk_1994F60C0 + 4 * (char)v149);
    if (v149 >= 5) {
      uint64_t v151 = (float *)MEMORY[0x1E4F18CF0];
    }
    float v152 = *v151;
    int v153 = *((unsigned __int8 *)a4 + 2920);
    *(_DWORD *)long long buf = 136446979;
    *(void *)&uint8_t buf[4] = v148;
    *(_WORD *)&buf[12] = 2081;
    *(void *)&buf[14] = v150;
    *(_WORD *)&buf[22] = 2048;
    *(double *)uint64_t v171 = v152;
    *(_WORD *)&v171[8] = 1024;
    *(_DWORD *)char v172 = v153;
    _os_signpost_emit_with_name_impl(&dword_1985F2000, v144, OS_SIGNPOST_INTERVAL_BEGIN, v146, "DataTask", "%{public}s %{private}s pri: %.2f preconnect: %d", buf, 0x26u);
LABEL_208:
    if (v157)
    {
      if (*(_DWORD *)v157 == 1) {
        WTF::fastFree(v157, v137);
      }
      else {
        --*(_DWORD *)v157;
      }
    }
    if (v158)
    {
      if (*(_DWORD *)v158 == 1) {
        WTF::fastFree(v158, v137);
      }
      else {
        --*(_DWORD *)v158;
      }
    }
  }
LABEL_116:
  if (!*((unsigned char *)a4 + 290))
  {
    uint64_t v80 = (void *)[*(id *)(*(void *)(*((void *)this + 74) + 8) + 8) configuration];
    CFTypeRef v81 = v80;
    if (v80) {
      CFRetain(v80);
    }
    [v81 setURLCredentialStorage:0];
    [*((id *)this + 76) _adoptEffectiveConfiguration:v81];
    if (v81) {
      CFRelease(v81);
    }
  }
  uint64_t v82 = *((void *)this + 74);
  if (v82) {
    uint64_t v83 = *(void *)(v82 + 8);
  }
  else {
    uint64_t v83 = 0;
  }
  uint64_t v84 = [*((id *)this + 76) taskIdentifier];
  uint64_t v85 = *(void *)(v83 + 24);
  if (v85)
  {
    int v86 = *(_DWORD *)(v85 - 8);
    unint64_t v87 = (v84 + ~(v84 << 32)) ^ ((unint64_t)(v84 + ~(v84 << 32)) >> 22);
    unint64_t v88 = 9 * ((v87 + ~(v87 << 13)) ^ ((v87 + ~(v87 << 13)) >> 8));
    unint64_t v89 = (v88 ^ (v88 >> 15)) + ~((v88 ^ (v88 >> 15)) << 27);
    unsigned int v90 = v86 & ((v89 >> 31) ^ v89);
    uint64_t v91 = *(void *)(v85 + 24 * v90);
    if (v91 == v84)
    {
LABEL_128:
      __break(0xC471u);
      JUMPOUT(0x198A3C528);
    }
    int v92 = 1;
    while (v91)
    {
      unsigned int v90 = (v90 + v92) & v86;
      uint64_t v91 = *(void *)(v85 + 24 * v90);
      ++v92;
      if (v91 == v84) {
        goto LABEL_128;
      }
    }
  }
  uint64_t v95 = *((void *)this + 74);
  if (v95) {
    uint64_t v96 = *(void *)(v95 + 8);
  }
  else {
    uint64_t v96 = 0;
  }
  uint64_t v98 = [*((id *)this + 76) taskIdentifier];
  uint64_t v101 = *(void *)(v96 + 24);
  uint64_t v100 = (uint64_t *)(v96 + 24);
  uint64_t v99 = v101;
  if (v101
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v100),
        (uint64_t v99 = *v100) != 0))
  {
    int v102 = *(_DWORD *)(v99 - 8);
  }
  else
  {
    int v102 = 0;
  }
  unint64_t v103 = (v98 + ~(v98 << 32)) ^ ((unint64_t)(v98 + ~(v98 << 32)) >> 22);
  unint64_t v104 = 9 * ((v103 + ~(v103 << 13)) ^ ((v103 + ~(v103 << 13)) >> 8));
  unint64_t v105 = (v104 ^ (v104 >> 15)) + ~((v104 ^ (v104 >> 15)) << 27);
  unsigned int v106 = v102 & ((v105 >> 31) ^ v105);
  uint64_t v107 = (uint64_t *)(v99 + 24 * v106);
  uint64_t v108 = *v107;
  if (*v107)
  {
    uint64_t v111 = 0;
    int v112 = 1;
    while (v108 != v98)
    {
      if (v108 == -1) {
        uint64_t v111 = v107;
      }
      unsigned int v106 = (v106 + v112) & v102;
      uint64_t v107 = (uint64_t *)(v99 + 24 * v106);
      uint64_t v108 = *v107;
      ++v112;
      if (!*v107)
      {
        if (v111)
        {
          uint64_t *v111 = 0;
          v111[1] = 0;
          v111[2] = 0;
          --*(_DWORD *)(*v100 - 16);
          uint64_t v107 = v111;
        }
        *uint64_t v107 = v98;
        uint64_t v109 = (atomic_uchar **)(v107 + 1);
        if (!this)
        {
          uint64_t v110 = 0;
          goto LABEL_150;
        }
        goto LABEL_139;
      }
    }
    goto LABEL_158;
  }
  *uint64_t v107 = v98;
  uint64_t v109 = (atomic_uchar **)(v99 + 24 * v106 + 8);
LABEL_139:
  uint64_t v110 = (atomic_uchar *)*((void *)this + 1);
  if (v110) {
    uint64_t v110 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v110);
  }
LABEL_150:
  uint64_t v113 = *v109;
  unsigned __int8 *v109 = v110;
  if (v113) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v113, v97);
  }
  v107[2] = (uint64_t)this;
  uint64_t v114 = *v100;
  if (*v100) {
    int v115 = *(_DWORD *)(v114 - 12) + 1;
  }
  else {
    int v115 = 1;
  }
  *(_DWORD *)(v114 - 12) = v115;
  uint64_t v116 = *v100;
  if (*v100) {
    int v117 = *(_DWORD *)(v116 - 12);
  }
  else {
    int v117 = 0;
  }
  uint64_t v118 = (*(_DWORD *)(v116 - 16) + v117);
  unint64_t v119 = *(unsigned int *)(v116 - 4);
  if (v119 > 0x400)
  {
    if (v119 > 2 * v118) {
      goto LABEL_158;
    }
LABEL_173:
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v100);
    goto LABEL_158;
  }
  if (3 * v119 <= 4 * v118) {
    goto LABEL_173;
  }
LABEL_158:
  if (*((unsigned char *)a4 + 2920)) {
    objc_msgSend(*((id *)this + 76), "set_preconnect:", 1);
  }
  if (!*((unsigned char *)this + 544)) {
    WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(v8, (const WebCore::ResourceRequest *)&v162);
  }
  if (shouldBlockCookies)
  {
    if ((*(unsigned int (**)(void))(**(void **)(*((void *)this + 2) + 8) + 88))(*(void *)(*((void *)this + 2) + 8)))
    {
      if (*((unsigned char *)this + 584))
      {
        uint64_t v120 = off_1EB358988;
        if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v121 = *((void *)this + 95);
          uint64_t v122 = *((void *)this + 93);
          uint64_t v123 = [*((id *)this + 76) taskIdentifier];
          uint64_t v124 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v70, "URL"), "absoluteString"), "UTF8String");
          *(_DWORD *)long long buf = 134219010;
          *(void *)&uint8_t buf[4] = this;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v121;
          *(_WORD *)&buf[22] = 2048;
          *(void *)uint64_t v171 = v122;
          *(_WORD *)&v171[8] = 2048;
          *(void *)char v172 = v123;
          *(_WORD *)&v172[8] = 2080;
          *(void *)uint64_t v173 = v124;
          _os_log_impl(&dword_1985F2000, v120, OS_LOG_TYPE_DEFAULT, "%p - NetworkDataTaskCocoa::logCookieInformation: pageID=%llu, frameID=%llu, taskID=%lu: Blocking cookies for URL %s", buf, 0x34u);
        }
      }
    }
    WebKit::NetworkTaskCocoa::blockCookies(v8);
  }
  unsigned int v125 = WebCore::ResourceRequestBase::priority((WebCore::ResourceRequestBase *)&v162);
  uint64_t v127 = (_DWORD *)((char *)&unk_1994F60C0 + 4 * (char)v125);
  if (v125 >= 5) {
    uint64_t v127 = (_DWORD *)MEMORY[0x1E4F18CF0];
  }
  LODWORD(v126) = *v127;
  [*((id *)this + 76) setPriority:v126];
  WebKit::NetworkTaskCocoa::updateTaskWithFirstPartyForSameSiteCookies(*((void **)this + 76), &v162, v128);
  if (*((unsigned char *)a4 + 2952)) {
    objc_msgSend(*((id *)this + 76), "set_nw_activity:", *((void *)a4 + 368));
  }
LABEL_103:
  if (v53) {
    CFRelease(v53);
  }
  if (v70) {
    CFRelease(v70);
  }
  uint64_t v72 = v159;
  uint64_t v159 = 0;
  if (v72)
  {
    if (*(_DWORD *)v72 == 2) {
      WTF::StringImpl::destroy(v72, v71);
    }
    else {
      *(_DWORD *)v72 -= 2;
    }
  }
  CFTypeRef v93 = cf;
  CFTypeRef cf = 0;
  if (v93) {
    CFRelease(v93);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v162);
  return this;
}

void sub_198A3CBDC(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const char ****a12, WTF *a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,CFTypeRef cf)
{
  if (a13)
  {
    if (*(_DWORD *)a13 == 1) {
      WTF::fastFree(a13, a2);
    }
    else {
      --*(_DWORD *)a13;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 1) {
      WTF::fastFree(a14, a2);
    }
    else {
      --*(_DWORD *)a14;
    }
  }
  if (v50) {
    CFRelease(v50);
  }
  if (v51) {
    CFRelease(v51);
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  CFTypeRef v53 = cf;
  CFTypeRef cf = 0;
  if (v53) {
    CFRelease(v53);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a24);
  uint64_t v55 = *((void *)v48 + 98);
  *((void *)v48 + 98) = 0;
  if (v55) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v55, v54);
  }
  uint64_t v56 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)v48 + 92);
  *((void *)v48 + 92) = 0;
  if (v56) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v56);
  }
  uint64_t v57 = (WTF::StringImpl *)*((void *)v48 + 88);
  *((void *)v48 + 88) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2) {
      WTF::StringImpl::destroy(v57, v54);
    }
    else {
      *(_DWORD *)v57 -= 2;
    }
  }
  uint64_t v58 = (const void *)*((void *)v48 + 76);
  *((void *)v48 + 76) = 0;
  if (v58) {
    CFRelease(v58);
  }
  uint64_t v59 = *a12;
  *a12 = 0;
  if (v59) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v59);
  }
  uint64_t v60 = (unsigned int *)*((void *)v48 + 74);
  *((void *)v48 + 74) = 0;
  if (v60)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v60, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v60);
      WTF::fastFree((WTF *)v60, v54);
    }
  }
  WebKit::NetworkTaskCocoa::~NetworkTaskCocoa(v49, v54);
  WebKit::NetworkDataTask::~NetworkDataTask(v48, v61);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkTaskCocoa::NetworkTaskCocoa(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)a1 = &unk_1EE9BC6A0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 8), a2);
  uint64_t v6 = *(atomic_uint **)(a2 + 8);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0x4122750000000000;
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v13 = v8;
  uint64_t v10 = *(void *)(v7 + 216);
  char v9 = (uint64_t *)(v7 + 216);
  if (v10)
  {
    if (WTF::HashTable<PAL::SessionID,PAL::SessionID,WTF::IdentityExtractor,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<PAL::SessionID>,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v9, &v13))
    {
      BOOL v11 = 1;
      goto LABEL_7;
    }
    uint64_t v8 = *(void *)(a2 + 24);
  }
  BOOL v11 = v8 >= 0 || v8 == -1;
LABEL_7:
  *(unsigned char *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 33) = a3;
  return a1;
}

uint64_t WebKit::NetworkSessionCocoa::sessionWrapperForTask(uint64_t a1, WebKit::AuxiliaryProcess *a2, WebCore::ResourceRequestBase *a3, unsigned int a4, __int16 a5)
{
  uint64_t v8 = (uint64_t)a2;
  if ((_BYTE)a5) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = (a5 & 0xFF00) == 0;
  }
  int isParentProcessAFullWebBrowser = WebKit::isParentProcessAFullWebBrowser(*(WebKit **)(a1 + 32), a2);
  uint64_t v12 = *(void *)(a1 + 32);
  v86[0] = *(void *)(a1 + 24);
  if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v12 + 232), v86))
  {
    int v82 = isParentProcessAFullWebBrowser;
    BOOL v83 = v10;
    PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v85, PartyForCookies);
    int shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor = WebCore::NetworkStorageSession::shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor();
    if (!shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor) {
      goto LABEL_80;
    }
    if (v8
      && (uint64_t v15 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 1112), v8)) != 0)
    {
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v16 = *(void *)(a1 + 1104);
    }
    uint64_t v17 = (uint64_t *)(v16 + 16);
    uint64_t v18 = *(void *)(v16 + 16);
    if (v18
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v16 + 16), 0), (uint64_t v18 = *v17) != 0))
    {
      int v19 = *(_DWORD *)(v18 - 8);
    }
    else
    {
      int v19 = 0;
    }
    unsigned int v20 = WTF::ASCIICaseInsensitiveHash::hash(v85, v14) & v19;
    long long v21 = (void *)(v18 + 16 * v20);
    unsigned int v80 = a4;
    uint64_t v81 = v8;
    if ((WTF::equal((WTF *)*v21, 0, v22) & 1) == 0)
    {
      int v24 = 0;
      int v25 = 1;
      do
      {
        if (*v21 == -1)
        {
          int v24 = v21;
        }
        else
        {
          uint64_t v26 = WTF::equalIgnoringASCIICase((WTF *)*v21, v85, v23);
          if (v26) {
            goto LABEL_32;
          }
        }
        unsigned int v20 = (v20 + v25) & v19;
        long long v21 = (void *)(v18 + 16 * v20);
        ++v25;
      }
      while (!WTF::equal((WTF *)*v21, 0, v23));
      if (v24)
      {
        void *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*v17 - 16);
        long long v21 = v24;
      }
    }
    WTF::String::operator=(v21, &v85);
    uint64_t v27 = WTF::fastMalloc((WTF *)0x38);
    *(void *)(v27 + 48) = 0;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)uint64_t v27 = 0u;
    WebKit::SessionWrapper::initialize(v27, (WebKit::AuxiliaryProcess *)[*(id *)(v16 + 40) configuration], (WebKit **)a1, 1);
    uint64_t v26 = (uint64_t)(v21 + 1);
    dispatch_fd_t v28 = (void *)v21[1];
    v21[1] = v27;
    if (v28) {
      std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100](v26, v28);
    }
    uint64_t v29 = *v17;
    if (*v17) {
      int v30 = *(_DWORD *)(v29 - 12) + 1;
    }
    else {
      int v30 = 1;
    }
    *(_DWORD *)(v29 - 12) = v30;
    uint64_t v31 = *v17;
    if (*v17) {
      int v32 = *(_DWORD *)(v31 - 12);
    }
    else {
      int v32 = 0;
    }
    uint64_t v33 = (*(_DWORD *)(v31 - 16) + v32);
    unint64_t v34 = *(unsigned int *)(v31 - 4);
    if (v34 > 0x400)
    {
      if (v34 > 2 * v33)
      {
LABEL_32:
        uint64_t v35 = (WTF::WallTime *)WTF::WallTime::now((WTF::WallTime *)v26);
        a4 = v80;
        *(void *)(v21[1] + 48) = v36;
        if (v80 > 1)
        {
          uint64_t v35 = (WTF::WallTime *)WebKit::SessionSet::initializeEphemeralStatelessSessionIfNeeded(v16, (WebKit **)a1);
          uint64_t v5 = v35;
        }
        else
        {
          uint64_t v5 = (WTF::WallTime *)v21[1];
        }
        if (!*v17 || *(_DWORD *)(*v17 - 12) < 0xBu) {
          goto LABEL_80;
        }
        unint64_t v87 = 0;
        WTF::WallTime::now(v35);
        double v38 = v37;
        uint64_t v41 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*v17, v39, v40);
        if (*v17) {
          uint64_t v42 = *v17 + 16 * *(unsigned int *)(*v17 - 4);
        }
        else {
          uint64_t v42 = 0;
        }
        v86[0] = v41;
        v86[1] = v14;
        while (1)
        {
          uint64_t v43 = (const WTF::StringImpl **)v86[0];
          if (v86[0] == v42) {
            break;
          }
          uint64_t v44 = *v17;
          unsigned int v45 = *(_DWORD *)(*v17 - 8);
          uint64_t v46 = WTF::ASCIICaseInsensitiveHash::hash(*(WTF::ASCIICaseInsensitiveHash **)v86[0], v14) & v45;
          uint64_t v47 = (WTF **)(v44 + 16 * v46);
          WTF::equal(*v47, 0, v48);
          int v50 = 1;
          while (*v47 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v47, *v43, v49) & 1) == 0)
          {
            uint64_t v46 = (v46 + v50) & v45;
            uint64_t v47 = (WTF **)(v44 + 16 * v46);
            ++v50;
            WTF::equal(*v47, 0, v49);
          }
          double v52 = *(double *)(*(void *)(v44 + 16 * v46 + 8) + 48);
          if (v52 < v38)
          {
            WTF::String::operator=((uint64_t *)&v87, v43);
            double v38 = v52;
          }
          v86[0] = v43 + 2;
          WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v86, v51, v49);
        }
        uint64_t v53 = *v17;
        if (*v17)
        {
          int v54 = *(_DWORD *)(v53 - 8);
          unsigned int v55 = WTF::ASCIICaseInsensitiveHash::hash(v87, v14) & v54;
          uint64_t v56 = v53 + 16 * v55;
          if (WTF::equal(*(WTF **)v56, 0, v57))
          {
LABEL_56:
            uint64_t v60 = *v17;
            if (!*v17) {
              goto LABEL_74;
            }
            uint64_t v61 = *(unsigned int *)(v60 - 4);
            uint64_t v56 = v60 + 16 * v61;
          }
          else
          {
            int v59 = 1;
            while (*(void *)v56 == -1 || (WTF::equalIgnoringASCIICase(*(WTF **)v56, v87, v58) & 1) == 0)
            {
              unsigned int v55 = (v55 + v59) & v54;
              uint64_t v56 = v53 + 16 * v55;
              ++v59;
              if (WTF::equal(*(WTF **)v56, 0, v58)) {
                goto LABEL_56;
              }
            }
            uint64_t v60 = *v17;
            if (!*v17) {
              goto LABEL_59;
            }
            uint64_t v61 = *(unsigned int *)(v60 - 4);
          }
          v60 += 16 * v61;
          if (v60 != v56)
          {
LABEL_59:
            if (v60 != v56)
            {
              WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>((WTF::StringImpl **)v56, v14);
              uint64_t v63 = *(const WTF::StringImpl **)(v56 + 8);
              char v62 = (void *)(v56 + 8);
              uint64_t v14 = v63;
              void *v62 = 0;
              if (v63) {
                std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v62, v14);
              }
              ++*(_DWORD *)(*v17 - 16);
              uint64_t v64 = *v17;
              if (*v17) {
                int v65 = *(_DWORD *)(v64 - 12) - 1;
              }
              else {
                int v65 = -1;
              }
              *(_DWORD *)(v64 - 12) = v65;
              uint64_t v66 = *v17;
              if (*v17)
              {
                unsigned int v67 = 6 * *(_DWORD *)(v66 - 12);
                unsigned int v68 = *(_DWORD *)(v66 - 4);
                if (v67 < v68 && v68 >= 9) {
                  WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(v17, v68 >> 1, 0);
                }
              }
            }
          }
        }
LABEL_74:
        char v70 = v87;
        unint64_t v87 = 0;
        uint64_t v8 = v81;
        a4 = v80;
        if (v70)
        {
          if (*(_DWORD *)v70 == 2) {
            WTF::StringImpl::destroy(v70, v14);
          }
          else {
            *(_DWORD *)v70 -= 2;
          }
        }
        if (*v17 && *(_DWORD *)(*v17 - 12) >= 0xBu)
        {
          __break(0xC471u);
          JUMPOUT(0x198A3D51CLL);
        }
LABEL_80:
        uint64_t v71 = v85;
        uint64_t v85 = 0;
        int isParentProcessAFullWebBrowser = v82;
        BOOL v10 = v83;
        if (v71)
        {
          if (*(_DWORD *)v71 == 2) {
            WTF::StringImpl::destroy(v71, v14);
          }
          else {
            *(_DWORD *)v71 -= 2;
          }
        }
        if (shouldBlockThirdPartyCookiesButKeepFirstPartyCookiesFor) {
          return (uint64_t)v5;
        }
        goto LABEL_85;
      }
    }
    else if (3 * v34 > 4 * v33)
    {
      goto LABEL_32;
    }
    uint64_t v26 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)(v16 + 16), (WTF::ASCIICaseInsensitiveHash **)v21);
    long long v21 = (void *)v26;
    goto LABEL_32;
  }
LABEL_85:
  if ((v10 & ~isParentProcessAFullWebBrowser) != 0)
  {
    if (v8
      && (uint64_t v72 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 1112), v8)) != 0)
    {
      uint64_t v73 = v72;
    }
    else
    {
      uint64_t v73 = *(void *)(a1 + 1104);
    }
    uint64_t v74 = (uint64_t *)(v73 + 24);
    if (!*(void *)(v73 + 24))
    {
      uint64_t v75 = WTF::fastMalloc((WTF *)0x38);
      *(_OWORD *)uint64_t v75 = 0u;
      *(_OWORD *)(v75 + 16) = 0u;
      *(_OWORD *)(v75 + 32) = 0u;
      *(void *)(v75 + 48) = 0;
      uint64_t v76 = (void *)*v74;
      *uint64_t v74 = v75;
      if (v76)
      {
        std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100](v73 + 24, v76);
        uint64_t v77 = *v74;
      }
      else
      {
        uint64_t v77 = v75;
      }
      WebKit::SessionWrapper::initialize(v77, (WebKit::AuxiliaryProcess *)[*(id *)(v73 + 40) configuration], (WebKit **)a1, 1);
    }
    if (a4 <= 1) {
      return *v74;
    }
    return WebKit::NetworkSessionCocoa::initializeEphemeralStatelessSessionIfNeeded(a1, v8);
  }
  if (a4 > 1) {
    return WebKit::NetworkSessionCocoa::initializeEphemeralStatelessSessionIfNeeded(a1, v8);
  }
  if (!v8
    || (uint64_t v78 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 1112), v8)) == 0)
  {
    uint64_t v78 = *(void *)(a1 + 1104);
  }
  return v78 + 32;
}

void sub_198A3D530(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16)
{
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a13)
  {
    if (*(_DWORD *)a13 == 2) {
      WTF::StringImpl::destroy(a13, a2);
    }
    else {
      *(_DWORD *)a13 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WebKit::applyBasicAuthorizationHeader(WebKit *this, WebCore::ResourceRequest *a2, const WebCore::Credential *a3)
{
  WebCore::CredentialBase::serializationForBasicAuthorizationHeader((uint64_t *)&v5, a2);
  WebCore::ResourceRequestBase::setHTTPHeaderField();
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198A3D624(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 WebKit::NetworkDataTaskCocoa::frameID@<Q0>(WebKit::NetworkDataTaskCocoa *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 744);
  *a2 = result;
  a2[1].n128_u8[0] = 1;
  return result;
}

uint64_t WebKit::NetworkDataTaskCocoa::pageID(WebKit::NetworkDataTaskCocoa *this)
{
  return *((void *)this + 95);
}

WTF::StringImpl *WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebKit::NetworkTaskCocoa *this, const WebCore::ResourceRequest *a2)
{
  __n128 result = (WTF::StringImpl *)WebKit::NetworkTaskCocoa::shouldApplyCookiePolicyForThirdPartyCloaking(this);
  if (result)
  {
    if (WebCore::ResourceRequestBase::isThirdParty(a2))
    {
      uint64_t v41 = (void *)(*(uint64_t (**)(WebKit::NetworkTaskCocoa *))(*(void *)this + 32))(this);
      return (WTF::StringImpl *)objc_msgSend(v41, "set_cookieTransformCallback:", 0);
    }
    else
    {
      uint64_t PartyForCookies = WebCore::ResourceRequestBase::firstPartyForCookies(a2);
      uint64_t v6 = *(WTF::StringImpl **)PartyForCookies;
      if (*(void *)PartyForCookies) {
        *(_DWORD *)v6 += 2;
      }
      uint64_t v64 = v6;
      long long v7 = *(_OWORD *)(PartyForCookies + 24);
      long long v65 = *(_OWORD *)(PartyForCookies + 8);
      long long v66 = v7;
      WTF::URL::host((WTF::URL *)&v64);
      if ((v8 & 0xFF00000000) != 0) {
        WTF::String::String();
      }
      else {
        WTF::String::String();
      }
      WebCore::ResourceRequestBase::url(a2);
      WTF::URL::isolatedCopy();
      WTF::URL::isolatedCopy();
      uint64_t v10 = *((void *)this + 1);
      if (v10) {
        BOOL v11 = *(WTF **)(v10 + 8);
      }
      else {
        BOOL v11 = 0;
      }
      WebKit::NetworkSession::firstPartyHostCNAMEDomain(v11, &v63, v9, &v48);
      char v13 = v49;
      if (v49)
      {
        WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v67);
        double v52 = (WTF::StringImpl *)v67;
        char v13 = 1;
      }
      else
      {
        LOBYTE(v52) = 0;
      }
      char v53 = v13;
      uint64_t v14 = *((void *)this + 1);
      if (v14) {
        uint64_t v15 = *(void *)(v14 + 8);
      }
      else {
        uint64_t v15 = 0;
      }
      WebKit::NetworkSession::firstPartyHostIPAddress(v15, &v63, v12, (uint64_t)v46);
      char v16 = v47;
      if (v47)
      {
        WebCore::IPAddress::isolatedCopy((uint64_t *)&v67, (WebCore::IPAddress *)v46);
        long long v54 = v67;
        int v55 = v68;
        char v16 = 1;
      }
      else
      {
        LOBYTE(v54) = 0;
      }
      char v56 = v16;
      uint64_t v17 = *((void *)this + 1);
      if (v17) {
        uint64_t v17 = *(void *)(v17 + 8);
      }
      LOBYTE(v44) = 0;
      char v45 = 0;
      if (*(unsigned char *)(v17 + 144))
      {
        uint64_t v42 = *(WTF::StringImpl **)(v17 + 136);
        if (v42) {
          *(_DWORD *)v42 += 2;
        }
        uint64_t v44 = v42;
        char v45 = 1;
        WebCore::RegistrableDomain::isolatedCopy((WTF::StringImpl **)&v67);
        uint64_t v57 = (WTF::StringImpl *)v67;
        char v18 = 1;
      }
      else
      {
        char v18 = 0;
        LOBYTE(v57) = 0;
      }
      char v58 = v18;
      uint64_t v59 = *((void *)this + 3);
      int v19 = (void *)(*(uint64_t (**)(WebKit::NetworkTaskCocoa *))(*(void *)this + 32))(this);
      id v60 = 0;
      objc_initWeak(&v60, v19);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v43, (const WTF::URL *)&v64);
      WTF::String::isolatedCopy();
      uint64_t v20 = *(void *)(*(void *)(*((void *)this + 1) + 8) + 32);
      *(void *)&long long v67 = *(void *)(*(void *)(*((void *)this + 1) + 8) + 24);
      long long v21 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v20 + 232), &v67);
      char v62 = WebCore::NetworkStorageSession::trackingPreventionDebugLoggingEnabled(v21);
      WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::$_0((uint64_t)&v67, (uint64_t)&v50);
      int v22 = malloc_type_malloc(0xC8uLL, 0x10E20408E31A51EuLL);
      void *v22 = MEMORY[0x1E4F14398];
      v22[1] = 50331650;
      _DWORD v22[2] = WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::{lambda(void *,NSArray<NSHTTPCookie *> *)#1}::__invoke;
      v22[3] = &WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::descriptor;
      WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::$_0((uint64_t)(v22 + 4), (uint64_t)&v67);
      int v24 = v75;
      uint64_t v75 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v23);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      objc_destroyWeak(&v74);
      if (v73)
      {
        uint64_t v35 = v72;
        uint64_t v72 = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2) {
            WTF::StringImpl::destroy(v35, v25);
          }
          else {
            *(_DWORD *)v35 -= 2;
          }
        }
      }
      if (v71)
      {
        uint64_t v36 = v70;
        char v70 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v25);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
      }
      uint64_t v26 = v69;
      uint64_t v69 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v25);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      uint64_t v27 = (WTF::StringImpl *)v67;
      *(void *)&long long v67 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2) {
          WTF::StringImpl::destroy(v27, v25);
        }
        else {
          *(_DWORD *)v27 -= 2;
        }
      }
      objc_msgSend((id)(*(uint64_t (**)(WebKit::NetworkTaskCocoa *))(*(void *)this + 32))(this), "set_cookieTransformCallback:", v22);
      _Block_release(v22);
      uint64_t v29 = v61;
      uint64_t v61 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2) {
          WTF::StringImpl::destroy(v29, v28);
        }
        else {
          *(_DWORD *)v29 -= 2;
        }
      }
      objc_destroyWeak(&v60);
      if (v58)
      {
        double v37 = v57;
        uint64_t v57 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 2) {
            WTF::StringImpl::destroy(v37, v30);
          }
          else {
            *(_DWORD *)v37 -= 2;
          }
        }
      }
      if (v53)
      {
        double v38 = v52;
        double v52 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2) {
            WTF::StringImpl::destroy(v38, v30);
          }
          else {
            *(_DWORD *)v38 -= 2;
          }
        }
      }
      uint64_t v31 = v51;
      uint64_t v51 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v30);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      int v32 = v50;
      int v50 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v30);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      uint64_t v33 = v43;
      uint64_t v43 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, v30);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (v45)
      {
        uint64_t v39 = v44;
        uint64_t v44 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 2) {
            WTF::StringImpl::destroy(v39, v30);
          }
          else {
            *(_DWORD *)v39 -= 2;
          }
        }
      }
      if (v49)
      {
        uint64_t v40 = v48;
        int v48 = 0;
        if (v40)
        {
          if (*(_DWORD *)v40 == 2) {
            WTF::StringImpl::destroy(v40, v30);
          }
          else {
            *(_DWORD *)v40 -= 2;
          }
        }
      }
      unint64_t v34 = v63;
      uint64_t v63 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2) {
          WTF::StringImpl::destroy(v34, v30);
        }
        else {
          *(_DWORD *)v34 -= 2;
        }
      }
      __n128 result = v64;
      uint64_t v64 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

void sub_198A3E1AC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,WTF::StringImpl *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,WTF::StringImpl *a36,uint64_t a37,WTF::StringImpl *a38,WTF::StringImpl *a39)
{
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&a15, a2);
  uint64_t v41 = a22;
  a22 = 0;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2) {
      WTF::StringImpl::destroy(v41, v40);
    }
    else {
      *(_DWORD *)v41 -= 2;
    }
  }
  uint64_t v42 = a17;
  a17 = 0;
  if (v42)
  {
    if (*(_DWORD *)v42 == 2) {
      WTF::StringImpl::destroy(v42, v40);
    }
    else {
      *(_DWORD *)v42 -= 2;
    }
  }
  uint64_t v43 = a38;
  a38 = 0;
  if (v43)
  {
    if (*(_DWORD *)v43 == 2) {
      WTF::StringImpl::destroy(v43, v40);
    }
    else {
      *(_DWORD *)v43 -= 2;
    }
  }
  uint64_t v44 = a39;
  a39 = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2) {
      WTF::StringImpl::destroy(v44, v40);
    }
    else {
      *(_DWORD *)v44 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

void sub_198A3E354()
{
}

void sub_198A3E35C()
{
}

void sub_198A3E364()
{
}

unsigned char *WebKit::NetworkTaskCocoa::blockCookies(unsigned char *this)
{
  if (!this[16])
  {
    unint64_t v1 = this;
    uint64_t v2 = (void *)(*(uint64_t (**)(unsigned char *))(*(void *)this + 32))(this);
    this = (unsigned char *)objc_msgSend(v2, "_setExplicitCookieStorage:", objc_msgSend((id)WebKit::NetworkTaskCocoa::statelessCookieStorage((WebKit::NetworkTaskCocoa *)v2), "_cookieStorage"));
    v1[16] = 1;
  }
  return this;
}

void *WebKit::NetworkTaskCocoa::updateTaskWithFirstPartyForSameSiteCookies(void *this, NSURLSessionTask *a2, const WebCore::ResourceRequest *a3)
{
  if (BYTE1(a2[18].super.isa))
  {
    uint64_t v4 = this;
    if ((byte_1E93CF502 & 1) == 0)
    {
      qword_1E93CF528 = [objc_alloc(MEMORY[0x1E4F1CB10]) initWithString:&stru_1EEA10550];
      byte_1E93CF502 = 1;
    }
    if (WebCore::ResourceRequestBase::isSameSite((WebCore::ResourceRequestBase *)a2)) {
      uint64_t v5 = objc_msgSend((id)objc_msgSend(v4, "currentRequest"), "URL");
    }
    else {
      uint64_t v5 = qword_1E93CF528;
    }
    objc_msgSend(v4, "set_siteForCookies:", v5);
    uint64_t isTopSite = WebCore::ResourceRequestBase::isTopSite((WebCore::ResourceRequestBase *)a2);
    return objc_msgSend(v4, "set_isTopLevelNavigation:", isTopSite);
  }
  return this;
}

void WebCore::NetworkLoadMetrics::~NetworkLoadMetrics(WebCore::NetworkLoadMetrics *this, WTF::StringImpl *a2)
{
  char v3 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v3) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

void WebKit::NetworkTaskCocoa::~NetworkTaskCocoa(WebKit::NetworkTaskCocoa *this, void *a2)
{
  char v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BC6A0;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa(WebKit::NetworkDataTaskCocoa *this, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 76)) {
    goto LABEL_24;
  }
  if (kdebug_is_enabled())
  {
    if (*MEMORY[0x1E4F30948])
    {
      int v32 = WTFSignpostLogHandle();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = *((void *)this + 76);
        v38[0] = 67109888;
        v38[1] = 2;
        __int16 v39 = 1024;
        int v40 = 0;
        __int16 v41 = 2048;
        uint64_t v42 = v33;
        __int16 v43 = 2048;
        uint64_t v44 = WTFCurrentContinuousTime();
        _os_log_impl(&dword_1985F2000, v32, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu ", (uint8_t *)v38, 0x22u);
      }
    }
    else
    {
      unint64_t v34 = WTFSignpostLogHandle();
      uint64_t v35 = v34;
      uint64_t v36 = (const void *)*((void *)this + 76);
      if (v36)
      {
        os_signpost_id_t v37 = os_signpost_id_make_with_pointer(v34, v36);
        if (v37 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_3;
        }
      }
      else
      {
        os_signpost_id_t v37 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v35))
      {
        LOWORD(v38[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1985F2000, v35, OS_SIGNPOST_INTERVAL_END, v37, "DataTask", (const char *)&unk_1995EAC3E, (uint8_t *)v38, 2u);
      }
    }
  }
LABEL_3:
  char v3 = (void *)*((void *)this + 76);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 74);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = [v3 taskIdentifier];
        uint64_t v9 = *(void *)(v5 + 24);
        uint64_t v8 = (uint64_t *)(v5 + 24);
        uint64_t v7 = v9;
        if (!v9) {
          goto LABEL_40;
        }
        int v10 = *(_DWORD *)(v7 - 8);
        unint64_t v11 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
        unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
        unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
        unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
        uint64_t v15 = (uint64_t *)(v7 + 24 * v14);
        uint64_t v16 = *v15;
        if (*v15 != v6)
        {
          int v17 = 1;
          while (v16)
          {
            unsigned int v14 = (v14 + v17) & v10;
            uint64_t v15 = (uint64_t *)(v7 + 24 * v14);
            uint64_t v16 = *v15;
            ++v17;
            if (*v15 == v6) {
              goto LABEL_13;
            }
          }
          uint64_t v15 = (uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4));
        }
LABEL_13:
        if ((uint64_t *)(v7 + 24 * *(unsigned int *)(v7 - 4)) == v15)
        {
LABEL_40:
          __break(0xC471u);
          JUMPOUT(0x198A3E7A4);
        }
        char v18 = (atomic_uchar *)v15[1];
        uint64_t *v15 = -1;
        v15[1] = 0;
        if (v18) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v18, a2);
        }
        ++*(_DWORD *)(*v8 - 16);
        uint64_t v19 = *v8;
        if (*v8) {
          int v20 = *(_DWORD *)(v19 - 12) - 1;
        }
        else {
          int v20 = -1;
        }
        *(_DWORD *)(v19 - 12) = v20;
        uint64_t v21 = *v8;
        if (*v8)
        {
          unsigned int v22 = 6 * *(_DWORD *)(v21 - 12);
          unsigned int v23 = *(_DWORD *)(v21 - 4);
          if (v22 < v23 && v23 >= 9) {
            WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v8, v23 >> 1);
          }
        }
      }
    }
  }
LABEL_24:
  uint64_t v25 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v25) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v25, (WTF::StringImpl *)a2);
  }
  uint64_t v26 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v26) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v26);
  }
  uint64_t v27 = (WTF::StringImpl *)*((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  dispatch_fd_t v28 = (const void *)*((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v28) {
    CFRelease(v28);
  }
  uint64_t v29 = (const char ***)*((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v29) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v29);
  }
  int v30 = (unsigned int *)*((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v30);
    WTF::fastFree((WTF *)v30, a2);
  }
  WebKit::NetworkTaskCocoa::~NetworkTaskCocoa((WebKit::NetworkDataTaskCocoa *)((char *)this + 552), a2);
  WebKit::NetworkDataTask::~NetworkDataTask(this, v31);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa(this, a2);

  WTF::fastFree(v2, v3);
}

void sub_198A3E8C4(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  uint64_t v4 = v2[98];
  v2[98] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  WebCore::NetworkLoadMetrics::~NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(v2 + 77), a2);
  uint64_t v6 = (const void *)v2[76];
  v2[76] = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const char ***)v2[75];
  v2[75] = 0;
  if (v7) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v7);
  }
  uint64_t v8 = (unsigned int *)v2[74];
  v2[74] = 0;
  if (v8)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, v5);
    }
  }
  WebKit::NetworkTaskCocoa::~NetworkTaskCocoa((WebKit::NetworkTaskCocoa *)(v2 + 69), v5);
  WebKit::NetworkDataTask::~NetworkDataTask((WebKit::NetworkDataTask *)v2, v9);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa(WebKit::NetworkDataTaskCocoa *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkDataTaskCocoa::~NetworkDataTaskCocoa((WebKit::NetworkDataTaskCocoa *)((char *)this - 552), a2);

  WTF::fastFree(v2, v3);
}

void WebKit::NetworkDataTaskCocoa::didSendData(WebKit::NetworkDataTaskCocoa *this, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (kdebug_is_enabled())
  {
    int v8 = *MEMORY[0x1E4F30948];
    uint64_t v9 = WTFSignpostLogHandle();
    int v10 = v9;
    if (v8)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *((void *)this + 76);
        int v14 = 67110400;
        *(_DWORD *)uint64_t v15 = 0;
        *(_WORD *)&v15[4] = 1024;
        *(_DWORD *)&v15[6] = 0;
        *(_WORD *)uint64_t v16 = 2048;
        *(void *)&v16[2] = v11;
        __int16 v17 = 2048;
        uint64_t v18 = WTFCurrentContinuousTime();
        __int16 v19 = 2048;
        uint64_t v20 = a2;
        __int16 v21 = 2048;
        uint64_t v22 = a3;
        _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu sent %llu bytes (expected %llu bytes)", (uint8_t *)&v14, 0x36u);
      }
    }
    else
    {
      unint64_t v12 = (const void *)*((void *)this + 76);
      if (v12)
      {
        os_signpost_id_t v13 = os_signpost_id_make_with_pointer(v9, v12);
        if (v13 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_2;
        }
      }
      else
      {
        os_signpost_id_t v13 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v10))
      {
        int v14 = 134218240;
        *(void *)uint64_t v15 = a2;
        *(_WORD *)&v15[8] = 2048;
        *(void *)uint64_t v16 = a3;
        _os_signpost_emit_with_name_impl(&dword_1985F2000, v10, OS_SIGNPOST_EVENT, v13, "DataTask", "sent %llu bytes (expected %llu bytes)", (uint8_t *)&v14, 0x16u);
      }
    }
  }
LABEL_2:
  uint64_t v6 = *((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 8);
    if (v7) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2, a3);
    }
  }
}

uint64_t WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A3EC10(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t *a4)
{
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  if (kdebug_is_enabled())
  {
    int v94 = *MEMORY[0x1E4F30948];
    uint64_t v95 = WTFSignpostLogHandle();
    uint64_t v96 = v95;
    if (v94)
    {
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v97 = *(WTF::ThreadSafeWeakPtrControlBlock **)(a1 + 608);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = 0;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = 0;
        *(_WORD *)&buf[14] = 2048;
        int v102 = v97;
        LOWORD(v103[0]) = 2048;
        *(CFTypeRef *)((char *)v103 + 2) = (CFTypeRef)WTFCurrentContinuousTime();
        _os_log_impl(&dword_1985F2000, v96, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu redirect", buf, 0x22u);
      }
    }
    else
    {
      uint64_t v98 = *(const void **)(a1 + 608);
      if (v98)
      {
        os_signpost_id_t v99 = os_signpost_id_make_with_pointer(v95, v98);
        if (v99 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_2;
        }
      }
      else
      {
        os_signpost_id_t v99 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v96))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1985F2000, v96, OS_SIGNPOST_EVENT, v99, "DataTask", "redirect", buf, 2u);
      }
    }
  }
LABEL_2:
  int v8 = *(char *)(a1 + 714);
  if (v8 < 0)
  {
    *(unsigned char *)(a1 + 714) = v8 | 0x80;
  }
  else
  {
    uint64_t v9 = (WebCore::SecurityOrigin *)WebCore::ResourceRequestBase::url(a3);
    WebCore::SecurityOrigin::create((uint64_t *)buf, v9, v10);
    uint64_t v11 = (WebCore::EmptyOriginAccessPatterns *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a2);
    WebCore::EmptyOriginAccessPatterns::singleton(v11);
    if (WebCore::SecurityOrigin::canRequest()) {
      char v13 = 0;
    }
    else {
      char v13 = 0x80;
    }
    *(unsigned char *)(a1 + 714) = v13 & 0x80 | *(unsigned char *)(a1 + 714) & 0x7F;
    uint64_t v14 = *(void *)buf;
    *(void *)long long buf = 0;
    if (v14) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v14, v12);
    }
  }
  uint64_t v15 = (WebCore::ResourceRequestBase *)(a1 + 328);
  if (WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)(a1 + 328))) {
    uint64_t v15 = (WebCore::ResourceRequestBase *)(a1 + 128);
  }
  if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 307
    || WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 308)
  {
    WebCore::ResourceRequestBase::httpBody((uint64_t *)buf, v15);
    if (*(void *)buf)
    {
      if (*(_DWORD *)(*(void *)buf + 20))
      {
        uint64_t v16 = *(void *)(a1 + 112);
        if (!v16 || (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v16, "get", 3uLL) & 1) == 0) {
          WebCore::ResourceRequestBase::setHTTPBody();
        }
      }
    }
    WebCore::ResourceRequestBase::httpContentType((uint64_t *)&v100, v15);
    uint64_t v18 = v100;
    if (!v100) {
      goto LABEL_32;
    }
    if (*((_DWORD *)v100 + 1))
    {
      WebCore::ResourceRequestBase::setHTTPHeaderField();
      uint64_t v18 = v100;
      uint64_t v100 = 0;
      if (!v18) {
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v100 = 0;
    }
    if (*(_DWORD *)v18 == 2) {
      WTF::StringImpl::destroy(v18, v17);
    }
    else {
      *(_DWORD *)v18 -= 2;
    }
LABEL_32:
    uint64_t v22 = *(WTF::RefCountedBase **)buf;
    *(void *)long long buf = 0;
    if (v22) {
      WTF::RefCounted<WebCore::FormData>::deref(v22);
    }
    goto LABEL_34;
  }
  if (WebCore::ResourceResponseBase::httpStatusCode((WebCore::ResourceResponseBase *)a2) == 303)
  {
    uint64_t v19 = *(void *)WebCore::ResourceRequestBase::httpMethod(v15);
    if (v19)
    {
      if (WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(v19, "head", 4uLL))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        uint64_t v100 = *(WTF::StringImpl **)buf;
        WebCore::ResourceRequestBase::setHTTPMethod(a3, (const WTF::String *)&v100);
        __int16 v21 = v100;
        uint64_t v100 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v20);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
    }
    WebCore::ResourceRequestBase::httpContentType((uint64_t *)buf, v15);
    CFTypeRef v93 = *(WTF::StringImpl **)buf;
    if (*(void *)buf)
    {
      if (*(_DWORD *)(*(void *)buf + 4))
      {
        WebCore::ResourceRequestBase::setHTTPHeaderField();
        CFTypeRef v93 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (!v93) {
          goto LABEL_34;
        }
      }
      else
      {
        *(void *)long long buf = 0;
      }
      if (*(_DWORD *)v93 == 2) {
        WTF::StringImpl::destroy(v93, v92);
      }
      else {
        *(_DWORD *)v93 -= 2;
      }
    }
  }
LABEL_34:
  if (*(unsigned char *)(a1 + 528))
  {
    WebCore::ResourceRequestBase::url(a3);
    if ((WTF::URL::protocolIs() & 1) == 0)
    {
      WebCore::ResourceRequestBase::httpReferrer((uint64_t *)buf, a3);
      int v24 = WTF::protocolIs();
      uint64_t v25 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2)
        {
          WTF::StringImpl::destroy(v25, v23);
          if (!v24) {
            goto LABEL_43;
          }
          goto LABEL_42;
        }
        *(_DWORD *)v25 -= 2;
      }
      if (!v24) {
        goto LABEL_43;
      }
LABEL_42:
      WebCore::ResourceRequestBase::clearHTTPReferrer(a3);
    }
  }
LABEL_43:
  uint64_t v26 = (WTF::URL *)WebCore::ResourceRequestBase::url(a3);
  WTF::URL::user((uint64_t *)buf, v26);
  uint64_t v28 = *(void *)buf;
  *(void *)long long buf = 0;
  uint64_t v29 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = v28;
  if (v29)
  {
    int v30 = *(_DWORD *)v29 - 2;
    if (*(_DWORD *)v29 != 2)
    {
LABEL_47:
      *(_DWORD *)uint64_t v29 = v30;
      goto LABEL_48;
    }
    WTF::StringImpl::destroy(v29, v27);
    uint64_t v29 = *(WTF::StringImpl **)buf;
    *(void *)long long buf = 0;
    if (v29)
    {
      int v30 = *(_DWORD *)v29 - 2;
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v31);
        goto LABEL_48;
      }
      goto LABEL_47;
    }
  }
LABEL_48:
  WTF::URL::password((uint64_t *)buf, v26);
  uint64_t v33 = *(void *)buf;
  *(void *)long long buf = 0;
  unint64_t v34 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = v33;
  if (!v34) {
    goto LABEL_53;
  }
  int v35 = *(_DWORD *)v34 - 2;
  if (*(_DWORD *)v34 != 2) {
    goto LABEL_52;
  }
  WTF::StringImpl::destroy(v34, v32);
  unint64_t v34 = *(WTF::StringImpl **)buf;
  *(void *)long long buf = 0;
  if (!v34) {
    goto LABEL_53;
  }
  int v35 = *(_DWORD *)v34 - 2;
  if (*(_DWORD *)v34 == 2) {
    WTF::StringImpl::destroy(v34, v36);
  }
  else {
LABEL_52:
  }
    *(_DWORD *)unint64_t v34 = v35;
LABEL_53:
  os_signpost_id_t v37 = (WTF::StringImpl **)WebCore::ResourceRequestBase::httpMethod(a3);
  WTF::String::operator=((uint64_t *)(a1 + 112), v37);
  WebCore::ResourceRequestBase::removeCredentials(a3);
  double v38 = (WTF *)WebCore::ResourceRequestBase::url(a3);
  __int16 v39 = (const URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a2);
  if (WTF::protocolHostAndPortAreEqual(v38, v39, v40))
  {
    uint64_t v41 = *(void *)(a1 + 48);
    if (!v41 || !*(_DWORD *)(v41 + 4))
    {
      uint64_t v42 = *(void *)(a1 + 56);
      if ((!v42 || !*(_DWORD *)(v42 + 4)) && (*(unsigned char *)(a2 + 138) & 1) == 0)
      {
        uint64_t v43 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32);
        uint64_t v100 = *(WTF::StringImpl **)(*(void *)(*(void *)(a1 + 16) + 8) + 24);
        if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v43 + 232), &v100))
        {
          uint64_t v44 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32);
          uint64_t v100 = *(WTF::StringImpl **)(*(void *)(*(void *)(a1 + 16) + 8) + 24);
          uint64_t v45 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v44 + 232), &v100);
          uint64_t v46 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
          WebCore::CredentialStorage::get((uint64_t *)buf, (WebCore::CredentialStorage *)(v45 + 96), (const WTF::String *)(a1 + 64), v46);
        }
        else
        {
          WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
          v103[0] = 0;
        }
        if ((WebCore::Credential::isEmpty((WebCore::Credential *)buf) & 1) == 0)
        {
          WTF::String::operator=((uint64_t *)(a1 + 72), (WTF::StringImpl **)buf);
          WTF::String::operator=((uint64_t *)(a1 + 80), (WTF::StringImpl **)&buf[8]);
          *(unsigned char *)(a1 + 88) = (_BYTE)v102;
          CFTypeRef v87 = v103[0];
          if (v103[0]) {
            CFRetain(v103[0]);
          }
          unint64_t v88 = *(const void **)(a1 + 96);
          *(void *)(a1 + 96) = v87;
          if (v88) {
            CFRelease(v88);
          }
          WebKit::applyBasicAuthorizationHeader(a3, (WebCore::ResourceRequest *)(a1 + 72), v86);
        }
        CFTypeRef v89 = v103[0];
        v103[0] = 0;
        if (v89) {
          CFRelease(v89);
        }
        unsigned int v90 = *(WTF::StringImpl **)&buf[8];
        *(void *)&uint8_t buf[8] = 0;
        if (v90)
        {
          if (*(_DWORD *)v90 == 2) {
            WTF::StringImpl::destroy(v90, v85);
          }
          else {
            *(_DWORD *)v90 -= 2;
          }
        }
        uint64_t v91 = *(WTF::StringImpl **)buf;
        *(void *)long long buf = 0;
        if (v91)
        {
          if (*(_DWORD *)v91 == 2) {
            WTF::StringImpl::destroy(v91, v85);
          }
          else {
            *(_DWORD *)v91 -= 2;
          }
        }
      }
    }
  }
  else
  {
    WebCore::ResourceRequestBase::clearHTTPAuthorization(a3);
    WebCore::ResourceRequestBase::clearHTTPOrigin(a3);
  }
  if (*(unsigned char *)(a1 + 544))
  {
    char v47 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    WebCore::ResourceRequestBase::setFirstPartyForCookies(a3, v47);
  }
  else
  {
    uint64_t PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a3);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v100, PartyForCookies);
    uint64_t v49 = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 32);
    *(void *)long long buf = *(void *)(*(void *)(*(void *)(a1 + 16) + 8) + 24);
    if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v49 + 232), buf))
    {
      uint64_t v51 = (const WTF::URL *)WebCore::ResourceResponseBase::url((WebCore::ResourceResponseBase *)a2);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, v51);
      int hasStorageAccess = WebCore::NetworkStorageSession::hasStorageAccess();
      long long v54 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v54)
      {
        if (*(_DWORD *)v54 == 2) {
          WTF::StringImpl::destroy(v54, v52);
        }
        else {
          *(_DWORD *)v54 -= 2;
        }
      }
      int v55 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
      WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)buf, v55);
      int v56 = WebCore::NetworkStorageSession::hasStorageAccess();
      uint64_t v57 = *(WTF::StringImpl **)buf;
      *(void *)long long buf = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2) {
          WTF::StringImpl::destroy(v57, v50);
        }
        else {
          *(_DWORD *)v57 -= 2;
        }
      }
      if ((hasStorageAccess & v56) == 1)
      {
        char v58 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
        WebCore::ResourceRequestBase::setFirstPartyForCookies(a3, v58);
      }
    }
    uint64_t v59 = v100;
    uint64_t v100 = 0;
    if (v59)
    {
      if (*(_DWORD *)v59 == 2) {
        WTF::StringImpl::destroy(v59, v50);
      }
      else {
        *(_DWORD *)v59 -= 2;
      }
    }
  }
  uint64_t v60 = *a4;
  *a4 = 0;
  *(void *)long long buf = v60;
  *(void *)&uint8_t buf[8] = a1;
  uint64_t v61 = *(atomic_uchar **)(a1 + 8);
  if (v61) {
    uint64_t v61 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v61);
  }
  int v102 = (WTF::ThreadSafeWeakPtrControlBlock *)v61;
  v103[0] = (CFTypeRef)a1;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v103[1], (const WebCore::ResourceResponseBase *)a2);
  char v62 = *(const void **)(a2 + 240);
  CFTypeRef cf = v62;
  if (v62) {
    CFRetain(v62);
  }
  char v120 = *(unsigned char *)(a2 + 248);
  uint64_t v63 = WTF::fastMalloc((WTF *)0x128);
  *(void *)uint64_t v63 = &unk_1EE9BC348;
  *(_OWORD *)(v63 + 8) = *(_OWORD *)buf;
  *(void *)(v63 + 24) = v102;
  CFTypeRef v64 = v103[0];
  *(void *)long long buf = 0;
  int v102 = 0;
  v103[0] = 0;
  *(void *)(v63 + 32) = v64;
  WTF::URL::URL(v63 + 40, (uint64_t *)&v103[1]);
  uint64_t v65 = v104;
  uint64_t v104 = 0;
  *(void *)(v63 + 80) = v65;
  *(_OWORD *)(v63 + 88) = *(_OWORD *)v105;
  uint64_t v66 = *(void *)&v105[16];
  *(_OWORD *)&v105[8] = 0u;
  *(void *)(v63 + 104) = v66;
  *(void *)(v63 + 112) = v106;
  uint64_t v67 = *((void *)&v106 + 1);
  long long v106 = 0u;
  *(void *)(v63 + 120) = v67;
  uint64_t v68 = v107;
  uint64_t v107 = 0;
  *(void *)(v63 + 128) = v68;
  uint64_t v69 = v108;
  uint64_t v108 = 0;
  *(void *)(v63 + 136) = v69;
  uint64_t v70 = v109;
  uint64_t v109 = 0;
  *(void *)(v63 + 144) = v70;
  uint64_t v71 = v110;
  uint64_t v110 = 0;
  *(void *)(v63 + 152) = v71;
  *(unsigned char *)(v63 + 160) = 0;
  *(unsigned char *)(v63 + 168) = 0;
  if (v112)
  {
    uint64_t v84 = v111;
    uint64_t v111 = 0;
    *(void *)(v63 + 160) = v84;
    *(unsigned char *)(v63 + 168) = 1;
  }
  long long v72 = v113;
  long long v73 = v115;
  *(_OWORD *)(v63 + 192) = v114;
  *(_OWORD *)(v63 + 208) = v73;
  *(_OWORD *)(v63 + 176) = v72;
  long long v74 = v116;
  long long v75 = v117;
  long long v76 = *(_OWORD *)v118;
  *(_DWORD *)(v63 + 271) = *(_DWORD *)&v118[15];
  *(_OWORD *)(v63 + 240) = v75;
  *(_OWORD *)(v63 + 256) = v76;
  *(_OWORD *)(v63 + 224) = v74;
  CFTypeRef v77 = cf;
  CFTypeRef cf = 0;
  *(void *)(v63 + 280) = v77;
  *(unsigned char *)(v63 + 288) = v120;
  uint64_t v100 = (WTF::StringImpl *)v63;
  WebKit::NetworkTaskCocoa::willPerformHTTPRedirection(a1 + 552, (WebCore::ResourceResponseBase *)a2, a3, (uint64_t *)&v100);
  uint64_t v79 = v100;
  uint64_t v100 = 0;
  if (v79) {
    (*(void (**)(WTF::StringImpl *))(*(void *)v79 + 8))(v79);
  }
  CFTypeRef v80 = cf;
  CFTypeRef cf = 0;
  if (v80) {
    CFRelease(v80);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)&v103[1], v78);
  int v82 = v102;
  int v102 = 0;
  if (v82) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref((atomic_uchar *)v82, v81);
  }
  uint64_t result = *(void *)buf;
  *(void *)long long buf = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A3F694(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::ThreadSafeWeakPtrControlBlock *a19, CFTypeRef cf,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,CFTypeRef a51)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkTaskCocoa::willPerformHTTPRedirection(uint64_t a1, WebCore::ResourceResponseBase *a2, WebCore::ResourceRequestBase *a3, uint64_t *a4)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  [(id)WebCore::ResourceRequest::nsURLRequest() attribution];
  WebCore::ResourceRequestBase::setIsAppInitiated(a3);
  WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking((WebKit::NetworkTaskCocoa *)a1, a3);
  int v8 = *(unsigned __int8 *)(a1 + 16);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (v8)
  {
    if (v9 == 2) {
      goto LABEL_41;
    }
    uint64_t PartyForCookies = (const WTF::URL *)WebCore::ResourceRequestBase::firstPartyForCookies(a3);
    uint64_t v11 = (const WTF::URL *)WebCore::ResourceRequestBase::url(a3);
    unint64_t v12 = (const WTF::URL *)WebCore::ResourceResponseBase::url(a2);
    if ((byte_1E93CF501 & 1) == 0)
    {
      uint64_t v67 = 0;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v70 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v70, v64);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v68 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v68, &v69);
      WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t)cf, &v67, v64, &v69);
      int v50 = v69;
      uint64_t v69 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 2) {
          WTF::StringImpl::destroy(v50, v49);
        }
        else {
          *(_DWORD *)v50 -= 2;
        }
      }
      uint64_t v51 = v68;
      uint64_t v68 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 2) {
          WTF::StringImpl::destroy(v51, v49);
        }
        else {
          *(_DWORD *)v51 -= 2;
        }
      }
      double v52 = v64[0];
      v64[0] = 0;
      if (v52)
      {
        if (*(_DWORD *)v52 == 2) {
          WTF::StringImpl::destroy(v52, v49);
        }
        else {
          *(_DWORD *)v52 -= 2;
        }
      }
      char v53 = v70;
      uint64_t v70 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 2) {
          WTF::StringImpl::destroy(v53, v49);
        }
        else {
          *(_DWORD *)v53 -= 2;
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v70 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v70, v64);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v68 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v68, &v69);
      WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t)cf, &v67, v64, &v69);
      int v55 = v69;
      uint64_t v69 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2) {
          WTF::StringImpl::destroy(v55, v54);
        }
        else {
          *(_DWORD *)v55 -= 2;
        }
      }
      int v56 = v68;
      uint64_t v68 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2) {
          WTF::StringImpl::destroy(v56, v54);
        }
        else {
          *(_DWORD *)v56 -= 2;
        }
      }
      uint64_t v57 = v64[0];
      v64[0] = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2) {
          WTF::StringImpl::destroy(v57, v54);
        }
        else {
          *(_DWORD *)v57 -= 2;
        }
      }
      char v58 = v70;
      uint64_t v70 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2) {
          WTF::StringImpl::destroy(v58, v54);
        }
        else {
          *(_DWORD *)v58 -= 2;
        }
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v70 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v70, v64);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      uint64_t v68 = *(WTF::StringImpl **)cf;
      WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString(&v68, &v69);
      WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>((uint64_t)cf, &v67, v64, &v69);
      uint64_t v60 = v69;
      uint64_t v69 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2) {
          WTF::StringImpl::destroy(v60, v59);
        }
        else {
          *(_DWORD *)v60 -= 2;
        }
      }
      uint64_t v61 = v68;
      uint64_t v68 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2) {
          WTF::StringImpl::destroy(v61, v59);
        }
        else {
          *(_DWORD *)v61 -= 2;
        }
      }
      char v62 = v64[0];
      v64[0] = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 2) {
          WTF::StringImpl::destroy(v62, v59);
        }
        else {
          *(_DWORD *)v62 -= 2;
        }
      }
      uint64_t v63 = v70;
      uint64_t v70 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 2) {
          WTF::StringImpl::destroy(v63, v59);
        }
        else {
          *(_DWORD *)v63 -= 2;
        }
      }
      qword_1E93CF520 = v67;
      byte_1E93CF501 = 1;
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)cf, PartyForCookies);
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v64, v11);
    if ((WTF::equal(*(WTF **)cf, v64[0], v13) & 1) == 0)
    {
      int v24 = 0;
      goto LABEL_26;
    }
    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v70, v12);
    uint64_t v15 = qword_1E93CF520;
    if (!qword_1E93CF520) {
      goto LABEL_21;
    }
    int v16 = *(_DWORD *)(qword_1E93CF520 - 8);
    unsigned int v17 = WTF::ASCIICaseInsensitiveHash::hash(v70, v14) & v16;
    uint64_t v18 = (WTF **)(v15 + 16 * v17);
    if (WTF::equal(*v18, 0, v19))
    {
LABEL_11:
      uint64_t v22 = qword_1E93CF520;
      if (!qword_1E93CF520) {
        goto LABEL_21;
      }
      uint64_t v23 = *(unsigned int *)(qword_1E93CF520 - 4);
      uint64_t v18 = (WTF **)(qword_1E93CF520 + 16 * v23);
    }
    else
    {
      int v21 = 1;
      while (*v18 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v18, v70, v20) & 1) == 0)
      {
        unsigned int v17 = (v17 + v21) & v16;
        uint64_t v18 = (WTF **)(v15 + 16 * v17);
        ++v21;
        if (WTF::equal(*v18, 0, v20)) {
          goto LABEL_11;
        }
      }
      uint64_t v22 = qword_1E93CF520;
      if (!qword_1E93CF520)
      {
LABEL_14:
        if ((WTF **)v22 != v18)
        {
          int v24 = WTF::equal(v18[1], v64[0], v20);
          goto LABEL_22;
        }
LABEL_21:
        int v24 = 0;
LABEL_22:
        uint64_t v27 = v70;
        uint64_t v70 = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2) {
            WTF::StringImpl::destroy(v27, v14);
          }
          else {
            *(_DWORD *)v27 -= 2;
          }
        }
LABEL_26:
        uint64_t v28 = v64[0];
        v64[0] = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2) {
            WTF::StringImpl::destroy(v28, v14);
          }
          else {
            *(_DWORD *)v28 -= 2;
          }
        }
        uint64_t v29 = *(WTF::StringImpl **)cf;
        *(void *)CFTypeRef cf = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
          {
            WTF::StringImpl::destroy(v29, v14);
            if (!v24) {
              goto LABEL_41;
            }
            goto LABEL_36;
          }
          *(_DWORD *)v29 -= 2;
        }
        if (!v24) {
          goto LABEL_41;
        }
LABEL_36:
        if (*(unsigned char *)(a1 + 16))
        {
          uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 32);
          *(void *)CFTypeRef cf = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 24);
          uint64_t v31 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v30 + 232), cf);
          if (v31)
          {
            int v32 = (WebCore::NetworkStorageSession *)v31;
            uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
            WebCore::NetworkStorageSession::nsCookieStorage((uint64_t *)cf, v32);
            objc_msgSend(v33, "_setExplicitCookieStorage:", objc_msgSend(*(id *)cf, "_cookieStorage"));
            unint64_t v34 = *(const void **)cf;
            *(void *)CFTypeRef cf = 0;
            if (v34) {
              CFRelease(v34);
            }
            *(unsigned char *)(a1 + 16) = 0;
          }
        }
        goto LABEL_41;
      }
      uint64_t v23 = *(unsigned int *)(qword_1E93CF520 - 4);
    }
    v22 += 16 * v23;
    goto LABEL_14;
  }
  if (v9 == 2
    || (uint64_t v25 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 32),
        *(void *)CFTypeRef cf = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 24),
        WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v25 + 232), cf))&& (uint64_t v26 = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 32), *(void *)cf = *(void *)(*(void *)(*(void *)(a1 + 8) + 8) + 24), WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v26 + 232), cf), (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(v66, a1), (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1), WebCore::NetworkStorageSession::shouldBlockCookies()))
  {
    WebKit::NetworkTaskCocoa::blockCookies((unsigned char *)a1);
  }
LABEL_41:
  if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 8) + 8) + 88))(*(void *)(*(void *)(a1 + 8) + 8)))
  {
    if (*(unsigned char *)(a1 + 32))
    {
      int v35 = off_1EB358988;
      if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
        if (!v37
          || (uint64_t v38 = v36,
              (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t))(*(void *)a1 + 16))(v64, a1),
              !v65))
        {
          __break(1u);
        }
        __int16 v39 = v64[0];
        uint64_t v40 = [(id)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) taskIdentifier];
        int v41 = *(unsigned __int8 *)(a1 + 16);
        WebCore::ResourceRequestBase::url(a3);
        WTF::String::utf8();
        uint64_t v42 = (char *)v70 + 16;
        uint64_t v43 = "Blocking";
        *(_DWORD *)CFTypeRef cf = 134219266;
        if (!v70) {
          uint64_t v42 = 0;
        }
        *(void *)&cf[4] = a1;
        __int16 v72 = 2048;
        if (!v41) {
          uint64_t v43 = "Not blocking";
        }
        uint64_t v73 = v38;
        __int16 v74 = 2048;
        long long v75 = v39;
        __int16 v76 = 2048;
        uint64_t v77 = v40;
        __int16 v78 = 2080;
        uint64_t v79 = v43;
        __int16 v80 = 2080;
        uint64_t v81 = v42;
        _os_log_impl(&dword_1985F2000, v35, OS_LOG_TYPE_DEFAULT, "%p - NetworkTaskCocoa::willPerformHTTPRedirection::logCookieInformation: pageID=%llu, frameID=%llu, taskID=%lu: %s cookies for redirect URL %s", cf, 0x3Eu);
        uint64_t v45 = v70;
        uint64_t v70 = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 1) {
            WTF::fastFree(v45, v44);
          }
          else {
            --*(_DWORD *)v45;
          }
        }
      }
    }
  }
  uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  WebKit::NetworkTaskCocoa::updateTaskWithFirstPartyForSameSiteCookies(v46, (NSURLSessionTask *)a3, v47);
  return WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(a4);
}

void sub_198A40178(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, WTF::StringImpl *a17, WTF::StringImpl *a18, CFTypeRef cf)
{
  if (a17)
  {
    if (*(_DWORD *)a17 == 2) {
      WTF::StringImpl::destroy(a17, a2);
    }
    else {
      *(_DWORD *)a17 -= 2;
    }
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a18)
  {
    if (*(_DWORD *)a18 == 2) {
      WTF::StringImpl::destroy(a18, a2);
    }
    else {
      *(_DWORD *)a18 -= 2;
    }
  }
  if (a15)
  {
    uint64_t v20 = *(unsigned int *)(a15 - 4);
    if (v20)
    {
      uint64_t v21 = a15;
      do
      {
        uint64_t v22 = *(WTF::StringImpl **)v21;
        if (*(void *)v21 != -1)
        {
          uint64_t v23 = *(WTF::StringImpl **)(v21 + 8);
          *(void *)(v21 + 8) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
            {
              WTF::StringImpl::destroy(v23, a2);
              uint64_t v22 = *(WTF::StringImpl **)v21;
            }
            else
            {
              *(_DWORD *)v23 -= 2;
            }
          }
          *(void *)uint64_t v21 = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, a2);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
        }
        v21 += 16;
        --v20;
      }
      while (v20);
    }
    WTF::fastFree((WTF *)(a15 - 16), a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkDataTaskCocoa::setPendingDownloadLocation(uint64_t a1, WTF::StringImpl **a2, uint64_t *a3, int a4)
{
  unsigned int v17 = 0;
  int v8 = (WTF::FileSystemImpl *)(a1 + 120);
  WTF::String::operator=((uint64_t *)(a1 + 120), a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v17);
  if (*a3)
  {
    uint64_t v9 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)uint64_t v9 = 1;
    uint64_t v10 = *a3;
    *a3 = 0;
    *(void *)(v9 + 8) = v10;
    *(void *)(v9 + 16) = 0;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(const char ****)(a1 + 600);
  *(void *)(a1 + 600) = v9;
  if (v11)
  {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v11);
    uint64_t v9 = *(void *)(a1 + 600);
  }
  if (v9)
  {
    uint64_t v12 = *(void *)(v9 + 16);
    *(void *)(v9 + 16) = v12 + 1;
    if (!v12) {
      WebKit::SandboxExtensionImpl::consume(*(WebKit::SandboxExtensionImpl **)(v9 + 8));
    }
  }
  if (*(void *)v8) {
    char v13 = (__CFString *)WTF::StringImpl::operator NSString *();
  }
  else {
    char v13 = &stru_1EEA10550;
  }
  uint64_t result = objc_msgSend(*(id *)(a1 + 608), "set_pathToDownloadTaskFile:", v13);
  if (a4)
  {
    uint64_t result = WTF::FileSystemImpl::fileExists(v8, v15);
    if (result) {
      return WTF::FileSystemImpl::deleteFile((WTF::FileSystemImpl *)a2, v16);
    }
  }
  return result;
}

void sub_198A40480(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)va);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTaskCocoa::suggestedFilename@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  char v3 = *(_DWORD **)(this + 536);
  if (!v3 || !v3[1])
  {
    objc_msgSend((id)objc_msgSend(*(id *)(this + 608), "response"), "suggestedFilename");
    JUMPOUT(0x19972EAD0);
  }
  *v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebKit::NetworkDataTaskCocoa::cancel(WebKit::NetworkDataTaskCocoa *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (kdebug_is_enabled())
  {
    int v3 = *MEMORY[0x1E4F30948];
    uint64_t v4 = WTFSignpostLogHandle();
    uint64_t v5 = v4;
    if (v3)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *((void *)this + 76);
        v9[0] = 67109888;
        v9[1] = 0;
        __int16 v10 = 1024;
        int v11 = 0;
        __int16 v12 = 2048;
        uint64_t v13 = v6;
        __int16 v14 = 2048;
        uint64_t v15 = WTFCurrentContinuousTime();
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu cancel", (uint8_t *)v9, 0x22u);
      }
    }
    else
    {
      uint64_t v7 = (const void *)*((void *)this + 76);
      if (v7)
      {
        os_signpost_id_t v8 = os_signpost_id_make_with_pointer(v4, v7);
        if (v8 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
          return [*((id *)this + 76) cancel];
        }
      }
      else
      {
        os_signpost_id_t v8 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v5))
      {
        LOWORD(v9[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_1985F2000, v5, OS_SIGNPOST_EVENT, v8, "DataTask", "cancel", (uint8_t *)v9, 2u);
      }
    }
  }
  return [*((id *)this + 76) cancel];
}

void WebKit::NetworkDataTaskCocoa::resume(WebKit::NetworkDataTaskCocoa *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (kdebug_is_enabled())
  {
    int v15 = *MEMORY[0x1E4F30948];
    uint64_t v16 = WTFSignpostLogHandle();
    unsigned int v17 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = *((void *)this + 76);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = 0;
        __int16 v23 = 1024;
        int v24 = 0;
        __int16 v25 = 2048;
        uint64_t v26 = v18;
        __int16 v27 = 2048;
        uint64_t v28 = WTFCurrentContinuousTime();
        _os_log_impl(&dword_1985F2000, v17, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu resume", buf, 0x22u);
      }
    }
    else
    {
      uint64_t v19 = (const void *)*((void *)this + 76);
      if (v19)
      {
        os_signpost_id_t v20 = os_signpost_id_make_with_pointer(v16, v19);
        if (v20 - 1 > 0xFFFFFFFFFFFFFFFDLL) {
          goto LABEL_2;
        }
      }
      else
      {
        os_signpost_id_t v20 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v17))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1985F2000, v17, OS_SIGNPOST_EVENT, v20, "DataTask", "resume", buf, 2u);
      }
    }
  }
LABEL_2:
  if (!*((unsigned char *)this + 545))
  {
    uint64_t v2 = *((void *)this + 2);
    if (v2) {
      uint64_t v3 = *(void *)(v2 + 8);
    }
    else {
      uint64_t v3 = 0;
    }
    if (*(unsigned char *)(v3 + 1184) && *((unsigned char *)this + 776))
    {
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 1);
      uint64_t v4 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
      uint64_t v5 = v4;
      void *v4 = MEMORY[0x1E4F14398];
      v4[1] = 50331650;
      v4[2] = WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke;
      v4[3] = &WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::descriptor;
      v4[4] = this;
      v4[5] = this;
      if (*(unsigned char *)(v3 + 1185))
      {
        v4[5] = 0;
        uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
        *(void *)uint64_t v6 = &unk_1EE9BC0E0;
        *(void *)(v6 + 8) = this;
        *(void *)(v6 + 16) = this;
        *(unsigned char *)(v6 + 24) = 1;
        *(void *)long long buf = v6;
        WTF::callOnMainRunLoop();
        uint64_t v7 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      else
      {
        os_signpost_id_t v8 = objc_msgSend((id)objc_msgSend(*((id *)this + 76), "currentRequest"), "URL");
        uint64_t v9 = v8;
        if (v8) {
          os_signpost_id_t v8 = (void *)CFRetain(v8);
        }
        __int16 v10 = *(void **)(v3 + 1176);
        if (!v10)
        {
          __int16 v10 = (void *)[objc_alloc((Class)WebKit::getDMFWebsitePolicyMonitorClass[0]((WebKit *)v8)) initWithPolicyChangeHandler:0];
          int v11 = *(const void **)(v3 + 1176);
          *(void *)(v3 + 1176) = v10;
          if (v11)
          {
            CFRelease(v11);
            __int16 v10 = *(void **)(v3 + 1176);
          }
        }
        uint64_t v21 = v9;
        uint64_t v12 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v21 count:1];
        uint64_t v13 = _Block_copy(v5);
        if (v9) {
          CFRetain(v9);
        }
        __int16 v14 = malloc_type_malloc(0x30uLL, 0x10E00408A4B35D9uLL);
        void *v14 = MEMORY[0x1E4F14398];
        v14[1] = 50331650;
        uint64_t v14[2] = WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::{lambda(void *,NSDictionary<NSURL *,NSNumber *> *,NSError *)#1}::__invoke;
        v14[3] = &WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::descriptor;
        void v14[4] = v13;
        v14[5] = v9;
        _Block_release(0);
        [v10 requestPoliciesForWebsites:v12 completionHandler:v14];
        _Block_release(v14);
        _Block_release(0);
        if (v9) {
          CFRelease(v9);
        }
      }
      _Block_release(v5);
    }
    else
    {
      [*((id *)this + 76) resume];
    }
  }
}

void sub_198A40A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Block_release(v13);
  CFRelease(v12);
  _Block_release(v11);
  _Unwind_Resume(a1);
}

unint64_t WebKit::NetworkDataTaskCocoa::state(id *this)
{
  unint64_t result = [this[76] state];
  if (result >= 4) {
    return 3;
  }
  else {
    return result;
  }
}

void WebKit::NetworkDataTaskCocoa::description(id *this)
{
  [this[76] description];

  JUMPOUT(0x19972EAD0);
}

uint64_t *WebKit::NetworkDataTaskCocoa::setH2PingCallback(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v6 += 2;
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  long long v31 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)int v32 = v7;
  uint64_t v8 = WTF::fastMalloc((WTF *)0x30);
  uint64_t v9 = v8;
  *(void *)uint64_t v8 = &unk_1EE9BC398;
  if (v6) {
    *(_DWORD *)v6 += 2;
  }
  *(void *)(v8 + 8) = v6;
  *(_OWORD *)(v8 + 16) = v31;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)v32;
  int v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v11 = &unk_1EE9BC3C0;
  uint64_t v12 = *a3;
  *a3 = 0;
  v11[1] = v12;
  if (!v12)
  {
    __break(0xC471u);
    JUMPOUT(0x198A40DDCLL);
  }
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v10);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v13 = *(void **)(a1 + 608);
  v30[0] = 0;
  v30[1] = 0;
  __int16 v14 = *(WTF::StringImpl **)a2;
  if (*(void *)a2) {
    *(_DWORD *)v14 += 2;
  }
  uint64_t v26 = 0;
  __int16 v27 = v14;
  long long v15 = *(_OWORD *)(a2 + 24);
  long long v28 = *(_OWORD *)(a2 + 8);
  long long v29 = v15;
  uint64_t v25 = 0;
  *(void *)&long long v31 = v11;
  *((void *)&v31 + 1) = v9;
  if (v14) {
    *(_DWORD *)v14 += 2;
  }
  *(void *)int v32 = v14;
  *(_OWORD *)&v32[8] = v28;
  long long v33 = v29;
  unsigned int v17 = (char *)malloc_type_malloc(0x58uLL, 0x10E004071618FDAuLL);
  *(void *)unsigned int v17 = MEMORY[0x1E4F14398];
  *((void *)v17 + 1) = 50331650;
  *((void *)v17 + 2) = WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::{lambda(void *,_NSHTTPConnectionInfo *)#1}::__invoke;
  *((void *)v17 + 3) = &WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::descriptor;
  long long v18 = v31;
  long long v31 = 0uLL;
  *((_OWORD *)v17 + 2) = v18;
  uint64_t v19 = *(WTF::StringImpl **)v32;
  if (*(void *)v32)
  {
    **(_DWORD **)v32 += 2;
    *((void *)v17 + 6) = v19;
    long long v20 = *(_OWORD *)&v32[8];
    *(_OWORD *)(v17 + 72) = v33;
    *(_OWORD *)(v17 + 56) = v20;
    *(void *)int v32 = 0;
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, v16);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  else
  {
    *((void *)v17 + 6) = 0;
    long long v24 = v33;
    *(_OWORD *)(v17 + 56) = *(_OWORD *)&v32[8];
    *(_OWORD *)(v17 + 72) = v24;
    *(void *)int v32 = 0;
  }
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)&v31);
  objc_msgSend(v13, "getUnderlyingHTTPConnectionInfoWithCompletionHandler:", v17, v25, v26);
  _Block_release(v17);
  uint64_t v22 = v27;
  __int16 v27 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2) {
      WTF::StringImpl::destroy(v22, v21);
    }
    else {
      *(_DWORD *)v22 -= 2;
    }
  }
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(&v25);
  return WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(v30);
}

void sub_198A40DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,WTF::StringImpl *a21)
{
  _Block_release(v21);
  long long v24 = a11;
  a11 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(&a9);
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(&a17);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTaskCocoa::setPriority(uint64_t a1, unsigned int a2, double a3)
{
  uint64_t v3 = (_DWORD *)((char *)&unk_1994F60C0 + 4 * (char)a2);
  if (a2 >= 5) {
    uint64_t v3 = (_DWORD *)MEMORY[0x1E4F18CF0];
  }
  LODWORD(a3) = *v3;
  return [*(id *)(a1 + 608) setPriority:a3];
}

uint64_t WebKit::NetworkDataTaskCocoa::setTimingAllowFailedFlag(uint64_t this)
{
  *(unsigned char *)(this + 714) |= 0x40u;
  return this;
}

uint64_t WebKit::NetworkDataTaskCocoa::task(WebKit::NetworkDataTaskCocoa *this)
{
  return *((void *)this + 76);
}

uint64_t non-virtual thunk to'WebKit::NetworkDataTaskCocoa::task(WebKit::NetworkDataTaskCocoa *this)
{
  return *((void *)this + 7);
}

uint64_t WebKit::NetworkProcess::sourceApplicationAuditToken@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(this + 40);
  if (!v3) {
    goto LABEL_6;
  }
  this = *(void *)(v3 + 352);
  if (!this)
  {
    LOBYTE(v3) = 0;
LABEL_6:
    *(unsigned char *)a2 = 0;
    goto LABEL_4;
  }
  this = xpc_connection_get_audit_token();
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  LOBYTE(v3) = 1;
LABEL_4:
  *(unsigned char *)(a2 + 32) = v3;
  return this;
}

uint64_t WebKit::NetworkProcess::hostNamesWithHSTSCache@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  v12[0] = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), v12);
  if (result)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v5 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(result + 1104) + 40), "configuration"), "_hstsStorage"), "nonPreloadedHosts");
    uint64_t result = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    uint64_t v6 = result;
    if (result)
    {
      uint64_t v7 = *(void *)v15;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v5);
          }
          MEMORY[0x19972EAD0](&v13, *(void *)(*((void *)&v14 + 1) + 8 * v8));
          WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(a3, &v13, v9, (uint64_t)v12);
          int v11 = v13;
          uint64_t v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          ++v8;
        }
        while (v6 != v8);
        uint64_t result = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        uint64_t v6 = result;
      }
      while (result);
    }
  }
  return result;
}

void sub_198A410B8(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, WTF::StringImpl *a12)
{
  if (*v12) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(*v12, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkProcess::deleteHSTSCacheForHostNames(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v11);
  if (result)
  {
    uint64_t v5 = *(unsigned int *)(a3 + 12);
    if (v5)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void **)a3;
      uint64_t v8 = 8 * v5;
      do
      {
        uint64_t v9 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(v6 + 1104) + 40), "configuration"), "_hstsStorage");
        if (*v7) {
          __int16 v10 = (__CFString *)WTF::StringImpl::operator NSString *();
        }
        else {
          __int16 v10 = &stru_1EEA10550;
        }
        uint64_t result = [v9 resetHSTSForHost:v10];
        ++v7;
        v8 -= 8;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t WebKit::NetworkProcess::clearHSTSCache(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSince1970:");
  uint64_t v7 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v7);
  if (result)
  {
    uint64_t v6 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(result + 1104) + 40), "configuration"), "_hstsStorage");
    return [v6 resetHSTSHostsSinceDate:v4];
  }
  return result;
}

void WebKit::NetworkProcess::platformFlushCookies(uint64_t a1, const void *a2, uint64_t *a3)
{
  CFTypeRef cf = a2;
  uint64_t v4 = (WebCore::NetworkStorageSession *)WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 232), &cf);
  if (v4)
  {
    WebCore::NetworkStorageSession::nsCookieStorage((uint64_t *)&cf, v4);
    WebKit::saveCookies((void *)cf, a3);
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
  }
  else
  {
    WTF::CompletionHandler<void ()(void)>::operator()(a3);
  }
}

void sub_198A412D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::saveCookies(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
  void *v4 = MEMORY[0x1E4F14398];
  v4[1] = 50331650;
  v4[2] = WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke;
  v4[3] = &WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
  v4[4] = v3;
  [a1 _saveCookies:v4];

  _Block_release(v4);
}

void sub_198A4139C(_Unwind_Exception *a1)
{
  _Block_release(v1);
  _Unwind_Resume(a1);
}

void sub_198A413B0()
{
  if (v0) {
    (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  }
  JUMPOUT(0x198A413A8);
}

unsigned int *WebKit::NetworkProcess::setBackupExclusionPeriodForTesting(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v8 = 1;
  uint64_t v9 = *a3;
  *a3 = 0;
  *(void *)(v8 + 8) = v9;
  long long v15 = (void *)a2;
  uint64_t v10 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v15);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 1048);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v11 + 16));
    atomic_fetch_add((atomic_uint *volatile)v8, 1u);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v12 = &unk_1EE9BC3E8;
    v12[1] = v8;
    long long v15 = v12;
    WebKit::NetworkStorageManager::setBackupExclusionPeriodForTesting(v11, (uint64_t *)&v15, a4);
    if (v15)
    {
      (*(void (**)(void *))(*v15 + 8))(v15);
      if (!v11) {
        return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v8);
      }
      goto LABEL_4;
    }
    if (v11) {
LABEL_4:
    }
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v11 + 16), v13);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v8);
}

void sub_198A414F8(_Unwind_Exception *a1)
{
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v1);
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*v2, v5);
  }
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkProcess::clearProxyConfigData(WebKit::NetworkProcess *this, SessionID a2)
{
  unint64_t m_identifier = a2.m_identifier;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)this + 28, &m_identifier);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 264);
    return v3();
  }
  return result;
}

uint64_t WebKit::NetworkProcess::setProxyConfigData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t result = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(a1 + 224), &v4);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 272);
    return v3();
  }
  return result;
}

void sub_198A4176C(_Unwind_Exception *a1, void *a2)
{
  WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198A417E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(a10 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198A418FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, WTF::RefCountedBase *a11, uint64_t a12)
{
  if (a11) {
    WTF::RefCounted<WebCore::FormData>::deref(a11);
  }
  if (a12) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(a12 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198A41CFC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 72);
  *(void *)(v1 - 72) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  _Unwind_Resume(a1);
}

void downgradeRequest(NSURLRequest *a1, void *a2)
{
  uint64_t v4 = (void *)[a2 mutableCopy];
  if (objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "URL"), "scheme"), "isEqualToString:", @"https"))
  {
    CFTypeRef v5 = objc_msgSend(MEMORY[0x1E4F29088], "componentsWithURL:resolvingAgainstBaseURL:", objc_msgSend(v4, "URL"), 0);
    [v5 setScheme:@"http"];
    objc_msgSend(v4, "setURL:", objc_msgSend(v5, "URL"));
    a1->super.isa = (Class)v4;
  }
  else
  {
    a1->super.isa = (Class)a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4)
    {
      CFRelease(v4);
    }
  }
}

void sub_198A41F20(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void updateIgnoreStrictTransportSecuritySetting(id *a1, uint64_t a2)
{
  uint64_t v4 = objc_msgSend((id)objc_msgSend(*a1, "URL"), "scheme");
  if ([v4 isEqualToString:@"https"])
  {
    if (!a2) {
      return;
    }
    id v5 = *a1;
    if ((objc_opt_respondsToSelector() & 1) == 0 || ([v5 _ignoreHSTS] & 1) == 0) {
      return;
    }
    a2 = 0;
  }
  else
  {
    if (![v4 isEqualToString:@"http"]) {
      return;
    }
    id v6 = *a1;
    if (objc_opt_respondsToSelector())
    {
      if ([v6 _ignoreHSTS] == a2) {
        return;
      }
    }
    else
    {
      if ((a2 & 1) == 0) {
        return;
      }
      a2 = 1;
    }
  }
  uint64_t v7 = (void *)[*a1 mutableCopy];
  if (objc_opt_respondsToSelector()) {
    [v7 _setIgnoreHSTS:a2];
  }
  if (v7) {
    CFRetain(v7);
  }
  id v8 = *a1;
  *a1 = v7;
  if (v8)
  {
    CFRelease(v8);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }

  CFRelease(v7);
}

void sub_198A42074(_Unwind_Exception *a1)
{
  CFRelease(v1);
  _Unwind_Resume(a1);
}

void sub_198A42368(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198A430C8(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, WTF::StringImpl *a12, uint64_t a13, uint64_t a14)
{
  if (*(_DWORD *)v14 == 2) {
    WTF::StringImpl::destroy(v14, a2);
  }
  else {
    *(_DWORD *)v14 -= 2;
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a12)
  {
    if (*(_DWORD *)a12 == 2) {
      WTF::StringImpl::destroy(a12, a2);
    }
    else {
      *(_DWORD *)a12 -= 2;
    }
  }
  if (a14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(a14 + 8));
  }
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::continueDidReceiveChallenge(uint64_t a1, uint64_t a2, WebCore::AuthenticationChallengeBase *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7)
{
  v114[2] = *MEMORY[0x1E4F143B8];
  if (*a6)
  {
    uint64_t v13 = *(atomic_uint **)(a1 + 32);
    atomic_fetch_add(v13 + 32, 1u);
    unint64_t v105 = (WTF::StringImpl *)v13;
    WebKit::createChallengeCompletionHandler(&v104, (uint64_t *)&v105, *(void *)(a1 + 24), a3, (WTF::StringImpl **)(*a6 + 64), a5, a7);
    long long v14 = (unsigned int *)v105;
    unint64_t v105 = 0;
    if (v14 && atomic_fetch_add((atomic_uint *volatile)v14 + 32, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v14 + 32);
      (*(void (**)(unsigned int *))(*(void *)v14 + 8))(v14);
      if (a4) {
        goto LABEL_5;
      }
    }
    else if (a4)
    {
LABEL_5:
      uint64_t v15 = *a6;
      if (*(unsigned char *)(a1 + 1187) && !*(unsigned char *)(v15 + 544))
      {
        WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v105);
        CFTypeRef v107 = 0;
        WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(&v104);
        CFTypeRef v17 = v107;
        CFTypeRef v107 = 0;
        if (v17) {
          CFRelease(v17);
        }
        long long v18 = v106;
        long long v106 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2) {
            WTF::StringImpl::destroy(v18, v16);
          }
          else {
            *(_DWORD *)v18 -= 2;
          }
        }
        uint64_t v36 = v105;
        unint64_t v105 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2) {
            WTF::StringImpl::destroy(v36, v16);
          }
          else {
            *(_DWORD *)v36 -= 2;
          }
        }
        goto LABEL_109;
      }
LABEL_36:
      WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v105, a3);
      char v37 = (const void *)*((void *)a3 + 52);
      CFTypeRef v108 = v37;
      if (v37) {
        CFRetain(v37);
      }
      uint64_t v38 = (const void *)*((void *)a3 + 53);
      CFTypeRef cf = v38;
      if (v38) {
        CFRetain(v38);
      }
      if (!kdebug_is_enabled()) {
        goto LABEL_41;
      }
      int v77 = *MEMORY[0x1E4F30948];
      __int16 v78 = WTFSignpostLogHandle();
      uint64_t v79 = v78;
      if (v77)
      {
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v80 = *(void *)(v15 + 608);
          uint64_t v81 = WTFCurrentContinuousTime();
          *(_DWORD *)long long buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = 0;
          uint64_t v112 = 0x800000000000400;
          uint64_t v113 = v80;
          LOWORD(v114[0]) = 2048;
          *(void *)((char *)v114 + 2) = v81;
          _os_log_impl(&dword_1985F2000, v79, OS_LOG_TYPE_DEFAULT, "type=%d name=%d p=%lu ts=%llu received challenge", buf, 0x22u);
        }
        goto LABEL_41;
      }
      int v102 = *(const void **)(v15 + 608);
      if (v102)
      {
        os_signpost_id_t v103 = os_signpost_id_make_with_pointer(v78, v102);
        if (v103 - 1 > 0xFFFFFFFFFFFFFFFDLL)
        {
LABEL_41:
          __int16 v39 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v105);
          if (!WebCore::ProtectionSpaceBase::isPasswordBased(v39)) {
            goto LABEL_91;
          }
          int v41 = (WTF::StringImpl **)(v15 + 48);
          uint64_t v40 = *(void *)(v15 + 48);
          if (v40 && *(_DWORD *)(v40 + 4) || (uint64_t v42 = *(void *)(v15 + 56)) != 0 && *(_DWORD *)(v42 + 4))
          {
            uint64_t v43 = (WTF::StringImpl **)(v15 + 56);
            WebCore::CredentialBase::CredentialBase();
            v114[0] = 0;
            WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(&v104);
            uint64_t v45 = (const void *)v114[0];
            v114[0] = 0;
            if (v45) {
              CFRelease(v45);
            }
            uint64_t v46 = (WTF::StringImpl *)v112;
            uint64_t v112 = 0;
            if (v46)
            {
              if (*(_DWORD *)v46 == 2) {
                WTF::StringImpl::destroy(v46, v44);
              }
              else {
                *(_DWORD *)v46 -= 2;
              }
            }
            int v55 = *(WTF::StringImpl **)buf;
            *(void *)long long buf = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2) {
                WTF::StringImpl::destroy(v55, v44);
              }
              else {
                *(_DWORD *)v55 -= 2;
              }
            }
            int v56 = *v41;
            *int v41 = 0;
            if (v56)
            {
              if (*(_DWORD *)v56 == 2) {
                WTF::StringImpl::destroy(v56, v44);
              }
              else {
                *(_DWORD *)v56 -= 2;
              }
            }
            uint64_t v57 = *v43;
            const char *v43 = 0;
            if (!v57) {
              goto LABEL_104;
            }
            goto LABEL_101;
          }
          if (*(unsigned char *)(v15 + 104) == 1)
          {
            if (!WebCore::Credential::isEmpty((WebCore::Credential *)(v15 + 72))
              || WebCore::AuthenticationChallengeBase::previousFailureCount((WebCore::AuthenticationChallengeBase *)&v105))
            {
              uint64_t v47 = *(void *)(*(void *)(*(void *)(v15 + 16) + 8) + 32);
              *(void *)long long buf = *(void *)(*(void *)(*(void *)(v15 + 16) + 8) + 24);
              uint64_t v48 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v47 + 232), buf);
              if (v48)
              {
                uint64_t v49 = v48;
                int v50 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v105);
                WebCore::CredentialStorage::remove((WebCore::CredentialStorage *)(v49 + 96), (const WTF::String *)(v15 + 64), v50);
              }
            }
            if (!WebCore::AuthenticationChallengeBase::previousFailureCount((WebCore::AuthenticationChallengeBase *)&v105))
            {
              uint64_t v51 = *(void *)(*(void *)(*(void *)(v15 + 16) + 8) + 32);
              uint64_t v110 = *(WTF::StringImpl **)(*(void *)(*(void *)(v15 + 16) + 8) + 24);
              if (WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v51 + 232), &v110))
              {
                uint64_t v52 = *(void *)(*(void *)(*(void *)(v15 + 16) + 8) + 32);
                uint64_t v110 = *(WTF::StringImpl **)(*(void *)(*(void *)(v15 + 16) + 8) + 24);
                uint64_t v53 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v52 + 232), &v110);
                long long v54 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v105);
                WebCore::CredentialStorage::get((uint64_t *)buf, (WebCore::CredentialStorage *)(v53 + 96), (const WTF::String *)(v15 + 64), v54);
              }
              else
              {
                WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
                v114[0] = 0;
              }
              if ((WebCore::Credential::isEmpty((WebCore::Credential *)buf) & 1) != 0
                || (WebCore::CredentialBase::compare((WebCore::CredentialBase *)buf, (const WebCore::Credential *)(v15 + 72), v58) & 1) != 0)
              {
                char v59 = 1;
              }
              else
              {
                uint64_t v60 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)&v105);
                if (WebCore::ResourceResponseBase::httpStatusCode(v60) == 401)
                {
                  uint64_t v61 = *(void *)(*(void *)(*(void *)(v15 + 16) + 8) + 32);
                  uint64_t v110 = *(WTF::StringImpl **)(*(void *)(*(void *)(v15 + 16) + 8) + 24);
                  uint64_t v62 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v61 + 232), &v110);
                  if (v62)
                  {
                    uint64_t v63 = v62;
                    CFTypeRef v64 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)&v105);
                    char v65 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)&v105);
                    uint64_t v66 = (const WTF::URL *)WebCore::ResourceResponseBase::url(v65);
                    WebCore::CredentialStorage::set((WebCore::CredentialStorage *)(v63 + 96), (const WTF::String *)(v15 + 64), (const WebCore::Credential *)buf, v64, v66);
                  }
                }
                WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(&v104);
                char v59 = 0;
              }
              uint64_t v67 = (const void *)v114[0];
              v114[0] = 0;
              if (v67) {
                CFRelease(v67);
              }
              uint64_t v68 = (WTF::StringImpl *)v112;
              uint64_t v112 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2) {
                  WTF::StringImpl::destroy(v68, v44);
                }
                else {
                  *(_DWORD *)v68 -= 2;
                }
              }
              uint64_t v69 = *(WTF::StringImpl **)buf;
              *(void *)long long buf = 0;
              if (v69)
              {
                if (*(_DWORD *)v69 == 2) {
                  WTF::StringImpl::destroy(v69, v44);
                }
                else {
                  *(_DWORD *)v69 -= 2;
                }
              }
              if ((v59 & 1) == 0) {
                goto LABEL_104;
              }
            }
          }
          uint64_t v70 = (WebCore::Credential *)WebCore::AuthenticationChallengeBase::proposedCredential((WebCore::AuthenticationChallengeBase *)&v105);
          if ((WebCore::Credential::isEmpty(v70) & 1) != 0
            || WebCore::AuthenticationChallengeBase::previousFailureCount((WebCore::AuthenticationChallengeBase *)&v105))
          {
LABEL_91:
            uint64_t v71 = *(void *)(v15 + 24);
            if (!v71 || (uint64_t v72 = *(void *)(v71 + 8)) == 0)
            {
              WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)buf);
              v114[0] = 0;
              WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(&v104);
              uint64_t v73 = (const void *)v114[0];
              v114[0] = 0;
              if (v73) {
                CFRelease(v73);
              }
              __int16 v74 = (WTF::StringImpl *)v112;
              uint64_t v112 = 0;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2) {
                  WTF::StringImpl::destroy(v74, v44);
                }
                else {
                  *(_DWORD *)v74 -= 2;
                }
              }
              uint64_t v57 = *(WTF::StringImpl **)buf;
              *(void *)long long buf = 0;
              if (!v57) {
                goto LABEL_104;
              }
LABEL_101:
              if (*(_DWORD *)v57 == 2) {
                WTF::StringImpl::destroy(v57, v44);
              }
              else {
                *(_DWORD *)v57 -= 2;
              }
              goto LABEL_104;
            }
            (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t, uint64_t *))(*(void *)v72 + 8))(v72, &v105, a4, &v104);
          }
          else
          {
            WebCore::AuthenticationChallengeBase::proposedCredential((WebCore::AuthenticationChallengeBase *)&v105);
            WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(&v104);
          }
LABEL_104:
          CFTypeRef v75 = cf;
          CFTypeRef cf = 0;
          if (v75) {
            CFRelease(v75);
          }
          CFTypeRef v76 = v108;
          CFTypeRef v108 = 0;
          if (v76) {
            CFRelease(v76);
          }
          WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v105, v44);
LABEL_109:
          uint64_t v35 = v104;
          uint64_t v104 = 0;
          if (!v35) {
            return;
          }
          goto LABEL_110;
        }
      }
      else
      {
        os_signpost_id_t v103 = 0xEEEEB0B5B2B2EEEELL;
      }
      if (os_signpost_enabled(v79))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1985F2000, v79, OS_SIGNPOST_EVENT, v103, "DataTask", "received challenge", buf, 2u);
      }
      goto LABEL_41;
    }
    uint64_t v15 = *a6;
    goto LABEL_36;
  }
  WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>((atomic_uint **)&v105, *(void *)(a2 + 40), a5);
  uint64_t v21 = (unsigned int *)v105;
  if (v105)
  {
    uint64_t v22 = *((void *)v105 + 1);
    unint64_t v105 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v21, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v21);
      WTF::fastFree((WTF *)v21, v20);
      if (v22)
      {
LABEL_15:
        __int16 v23 = *(atomic_uint **)(a1 + 32);
        atomic_fetch_add(v23 + 32, 1u);
        unint64_t v105 = (WTF::StringImpl *)v23;
        uint64_t v24 = *(void *)(a1 + 24);
        uint64_t v25 = *(WTF::StringImpl **)(v22 + 128);
        if (v25) {
          *(_DWORD *)v25 += 2;
        }
        uint64_t v110 = v25;
        WebKit::createChallengeCompletionHandler(buf, (uint64_t *)&v105, v24, a3, &v110, 0, a7);
        if (v25)
        {
          if (*(_DWORD *)v25 == 2) {
            WTF::StringImpl::destroy(v25, v26);
          }
          else {
            *(_DWORD *)v25 -= 2;
          }
        }
        __int16 v27 = (unsigned int *)v105;
        unint64_t v105 = 0;
        if (v27 && atomic_fetch_add((atomic_uint *volatile)v27 + 32, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v27 + 32);
          (*(void (**)(unsigned int *))(*(void *)v27 + 8))(v27);
        }
        long long v28 = (uint64_t *)(*(void *)(a1 + 32) + 208);
        unint64_t v105 = (WTF::StringImpl *)"AuthenticationManager";
        long long v106 = (WTF::StringImpl *)22;
        long long v29 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v28, (WTF::ASCIILiteralHash *)&v105);
        uint64_t v30 = *(void *)(a1 + 24);
        uint64_t v31 = *(void *)(v22 + 72);
        int v32 = (WebCore::SecurityOriginData *)(v22 + 144);
        WebCore::SecurityOriginData::isNull(v32);
        if (v33) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = (uint64_t)v32;
        }
        WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v29, v30, v31, v34, a3, a4, (uint64_t *)buf);
        uint64_t v35 = *(void *)buf;
        *(void *)long long buf = 0;
        if (v35)
        {
LABEL_110:
          (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
          return;
        }
        return;
      }
    }
    else if (v22)
    {
      goto LABEL_15;
    }
  }
  uint64_t v82 = *(void *)(a2 + 32);
  if (v82)
  {
    unsigned int v83 = *(_DWORD *)(v82 - 8);
    unint64_t v84 = (~(a5 << 32) + a5) ^ ((unint64_t)(~(a5 << 32) + a5) >> 22);
    unint64_t v85 = 9 * ((v84 + ~(v84 << 13)) ^ ((v84 + ~(v84 << 13)) >> 8));
    unint64_t v86 = (v85 ^ (v85 >> 15)) + ~((v85 ^ (v85 >> 15)) << 27);
    uint64_t v87 = v83 & ((v86 >> 31) ^ v86);
    uint64_t v88 = *(void *)(v82 + 16 * v87);
    if (v88 == a5)
    {
LABEL_122:
      unsigned int v90 = (uint64_t *)(*(void *)(a1 + 32) + 192);
      unint64_t v105 = *(WTF::StringImpl **)(v82 + 16 * v87 + 8);
      uint64_t v91 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v90, &v105);
      if (v91)
      {
        uint64_t v92 = v91;
        WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v105, a3);
        CFTypeRef v93 = (const void *)*((void *)a3 + 52);
        CFTypeRef v108 = v93;
        if (v93) {
          CFRetain(v93);
        }
        int v94 = (const void *)*((void *)a3 + 53);
        CFTypeRef cf = v94;
        if (v94) {
          CFRetain(v94);
        }
        WebKit::Download::didReceiveChallenge(v92, (WebCore::AuthenticationChallengeBase *)&v105, a7);
        CFTypeRef v96 = cf;
        CFTypeRef cf = 0;
        if (v96) {
          CFRelease(v96);
        }
        CFTypeRef v97 = v108;
        CFTypeRef v108 = 0;
        if (v97) {
          CFRelease(v97);
        }
        WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&v105, v95);
        return;
      }
    }
    else
    {
      int v89 = 1;
      while (v88)
      {
        uint64_t v87 = (v87 + v89) & v83;
        uint64_t v88 = *(void *)(v82 + 16 * v87);
        ++v89;
        if (v88 == a5) {
          goto LABEL_122;
        }
      }
    }
  }
  WebCore::CredentialBase::CredentialBase((WebCore::CredentialBase *)&v105);
  CFTypeRef v107 = 0;
  WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(a7);
  CFTypeRef v99 = v107;
  CFTypeRef v107 = 0;
  if (v99) {
    CFRelease(v99);
  }
  uint64_t v100 = v106;
  long long v106 = 0;
  if (v100)
  {
    if (*(_DWORD *)v100 == 2) {
      WTF::StringImpl::destroy(v100, v98);
    }
    else {
      *(_DWORD *)v100 -= 2;
    }
  }
  uint64_t v101 = v105;
  unint64_t v105 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2) {
      WTF::StringImpl::destroy(v101, v98);
    }
    else {
      *(_DWORD *)v101 -= 2;
    }
  }
}

void sub_198A43D2C(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, CFTypeRef a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,CFTypeRef a62,CFTypeRef cf)
{
  char v65 = *(const void **)(v63 - 88);
  *(void *)(v63 - 88) = 0;
  if (v65) {
    CFRelease(v65);
  }
  uint64_t v66 = *(WTF::StringImpl **)(v63 - 104);
  *(void *)(v63 - 104) = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2) {
      WTF::StringImpl::destroy(v66, a2);
    }
    else {
      *(_DWORD *)v66 -= 2;
    }
  }
  uint64_t v67 = *(WTF::StringImpl **)(v63 - 112);
  *(void *)(v63 - 112) = 0;
  if (v67)
  {
    if (*(_DWORD *)v67 == 2) {
      WTF::StringImpl::destroy(v67, a2);
    }
    else {
      *(_DWORD *)v67 -= 2;
    }
  }
  CFTypeRef v68 = cf;
  CFTypeRef cf = 0;
  if (v68) {
    CFRelease(v68);
  }
  CFTypeRef v69 = a62;
  a62 = 0;
  if (v69) {
    CFRelease(v69);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a10, a2);
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(a1);
}

void sub_198A445CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a19) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(a19 + 8));
  }
  _Unwind_Resume(exception_object);
}

id extractResolutionReport(NSError *a1)
{
  unsigned char v24[4] = *MEMORY[0x1E4F143B8];
  id v2 = [(NSDictionary *)[(NSError *)a1 userInfo] objectForKeyedSubscript:@"_NSURLErrorNWResolutionReportKey"];
  if (v2)
  {
    uint64_t v4 = [(NSDictionary *)[(NSError *)a1 userInfo] objectForKeyedSubscript:@"_NSURLErrorNWPathKey"];
    if (v4)
    {
      id v5 = v4;
      id v6 = (const void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:1];
      uint64_t v7 = v6;
      uint64_t v18 = MEMORY[0x1E4F143A8];
      uint64_t v19 = 3321888768;
      long long v20 = ___ZL23extractResolutionReportP7NSError_block_invoke;
      uint64_t v21 = &__block_descriptor_40_e8_32c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE_e35_B16__0__NSObject_OS_nw_interface__8l;
      CFTypeRef cf = v6;
      if (v6) {
        CFRetain(v6);
      }
      nw_path_enumerate_interfaces(v5, &v18);
      v23[0] = @"provider";
      id v8 = NSString;
      uint64_t provider_name = nw_resolution_report_get_provider_name();
      if (provider_name) {
        uint64_t v10 = (const char *)provider_name;
      }
      else {
        uint64_t v10 = "";
      }
      v24[0] = objc_msgSend(v8, "stringWithUTF8String:", v10, v18, v19, v20, v21);
      v23[1] = @"dnsFailureReason";
      unsigned int dns_failure_reason = nw_resolution_report_get_dns_failure_reason();
      if (dns_failure_reason > 3) {
        uint64_t v12 = &stru_1EEA10550;
      }
      else {
        uint64_t v12 = off_1E5811C10[dns_failure_reason];
      }
      v24[1] = v12;
      void v23[2] = @"extendedDNSErrorExtraText";
      uint64_t v13 = NSString;
      uint64_t extended_dns_error_extra_text = nw_resolution_report_get_extended_dns_error_extra_text();
      if (extended_dns_error_extra_text) {
        uint64_t v15 = (const char *)extended_dns_error_extra_text;
      }
      else {
        uint64_t v15 = "";
      }
      uint64_t v16 = [v13 stringWithUTF8String:v15];
      v23[3] = @"interfaces";
      v24[2] = v16;
      v24[3] = v7;
      id v2 = (id)[MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v24 forKeys:v23 count:4];
      CFTypeRef v17 = cf;
      CFTypeRef cf = 0;
      if (v17) {
        CFRelease(v17);
      }
      if (v7) {
        CFRelease(v7);
      }
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void sub_198A4484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, CFTypeRef cf)
{
  CFRelease(v13);
  _Unwind_Resume(a1);
}

unint64_t WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::takeOptional(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    goto LABEL_10;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unint64_t v4 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  uint64_t v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t v8 = *(void *)(v2 + 16 * v7);
  if (v8 != a2)
  {
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(void *)(v2 + 16 * v7);
      ++v9;
      if (v8 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t v7 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v7 == *(_DWORD *)(v2 - 4))
  {
    uint64_t v2 = 0;
LABEL_10:
    unint64_t v10 = 0;
    return v10 | v2;
  }
  uint64_t v11 = (void *)(v2 + 16 * v7);
  uint64_t v12 = v11[1];
  void *v11 = -1;
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v13 = *a1;
  if (*a1) {
    int v14 = *(_DWORD *)(v13 - 12) - 1;
  }
  else {
    int v14 = -1;
  }
  *(_DWORD *)(v13 - 12) = v14;
  uint64_t v15 = *a1;
  if (*a1)
  {
    unsigned int v16 = 6 * *(_DWORD *)(v15 - 12);
    unsigned int v17 = *(_DWORD *)(v15 - 4);
    if (v16 < v17 && v17 >= 9) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DownloadIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v17 >> 1, 0);
    }
  }
  unint64_t v10 = v12 & 0xFFFFFFFFFFFFFF00;
  uint64_t v2 = v12;
  return v10 | v2;
}

void sub_198A451F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF::StringImpl *a34,WebCore::AdditionalNetworkLoadMetricsForWebInspector *a35,uint64_t a36)
{
  if (a34)
  {
    if (*(_DWORD *)a34 == 2) {
      WTF::StringImpl::destroy(a34, a2);
    }
    else {
      *(_DWORD *)a34 -= 2;
    }
  }
  if (a35) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(a35);
  }
  if (a36) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(a36 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebCore::AdditionalNetworkLoadMetricsForWebInspector::create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)uint64_t v3 = 1;
  *(unsigned char *)(v3 + 4) = 3;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  uint64_t result = WebCore::HTTPHeaderMap::HTTPHeaderMap((WebCore::HTTPHeaderMap *)(v3 + 40));
  *(void *)(v3 + 80) = -1;
  *(void *)(v3 + 88) = -1;
  *(void *)(v3 + 72) = -1;
  *(unsigned char *)(v3 + 96) = 0;
  *a1 = v3;
  return result;
}

void sub_198A45358(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  unint64_t v5 = (WTF::StringImpl *)*((void *)v2 + 4);
  *((void *)v2 + 4) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  unint64_t v6 = (WTF::StringImpl *)*((void *)v2 + 3);
  *((void *)v2 + 3) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)v2 + 2);
  *((void *)v2 + 2) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = *v3;
  _DWORD *v3 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, a2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WTF::makeString<WTF::String,char,unsigned int>(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned int v3 = a3;
  unint64_t v5 = (void *)result;
  void v23[2] = *MEMORY[0x1E4F143B8];
  if (a2) {
    int v6 = *(_DWORD *)(a2 + 4);
  }
  else {
    int v6 = 0;
  }
  int v7 = 0;
  unsigned int v8 = a3;
  do
  {
    ++v7;
    BOOL v9 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v9);
  if ((v7 & 0x80000000) == 0)
  {
    BOOL v10 = __OFADD__(v7, 1);
    int v11 = v7 + 1;
    BOOL v12 = v10;
    if ((v6 & 0x80000000) == 0 && !v12)
    {
      uint64_t v13 = (v6 + v11);
      if (!__OFADD__(v6, v11))
      {
        if (!a2 || (*(unsigned char *)(a2 + 16) & 4) != 0)
        {
          if ((v13 & 0x80000000) == 0)
          {
            uint64_t result = WTF::tryFastCompactMalloc((WTF *)(v13 + 20));
            uint64_t v14 = v23[0];
            if (v23[0])
            {
              *(_DWORD *)v23[0] = 2;
              *(_DWORD *)(v14 + 4) = v13;
              *(void *)(v14 + 8) = v14 + 20;
              *(_DWORD *)(v14 + 16) = 4;
              uint64_t v22 = a2;
              uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v22, (char *)(v14 + 20));
              uint64_t v19 = v22;
              if (v22) {
                uint64_t v19 = *(unsigned int *)(v22 + 4);
              }
              uint64_t v20 = 0;
              uint64_t v21 = (unsigned char *)(v14 + 20 + v19);
              unsigned char *v21 = 58;
              do
              {
                *((unsigned char *)&v23[1] + v20-- + 4) = (v3 % 0xA) | 0x30;
                BOOL v9 = v3 > 9;
                v3 /= 0xAu;
              }
              while (v9);
              if (v20 + 14 <= 13) {
                uint64_t result = (uint64_t)memcpy(v21 + 1, (char *)&v23[1] + v20 + 5, -v20);
              }
              goto LABEL_33;
            }
          }
        }
        else if (v13 <= 0x7FFFFFEF)
        {
          uint64_t result = WTF::tryFastCompactMalloc((WTF *)(2 * (v6 + v11) + 20));
          uint64_t v14 = v23[0];
          if (v23[0])
          {
            *(_DWORD *)v23[0] = 2;
            *(_DWORD *)(v14 + 4) = v13;
            *(void *)(v14 + 8) = v14 + 20;
            *(_DWORD *)(v14 + 16) = 0;
            uint64_t v22 = a2;
            uint64_t result = (uint64_t)WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v22, (char *)(v14 + 20));
            if (v22) {
              uint64_t v15 = *(unsigned int *)(v22 + 4);
            }
            else {
              uint64_t v15 = 0;
            }
            uint64_t v16 = 0;
            *(_WORD *)(v14 + 20 + 2 * v15) = 58;
            do
            {
              *((unsigned char *)&v23[1] + v16-- + 4) = (v3 % 0xA) | 0x30;
              BOOL v9 = v3 > 9;
              v3 /= 0xAu;
            }
            while (v9);
            if (v16 + 14 <= 13)
            {
              unsigned int v17 = (_WORD *)(v14 + 2 * v15 + 22);
              do
                *v17++ = *((unsigned __int8 *)&v23[1] + v16 + 5);
              while (!__CFADD__(v16++, 1));
            }
LABEL_33:
            void *v5 = v14;
            return result;
          }
        }
      }
    }
  }
  void *v5 = 0;
  __break(0xC471u);
  return result;
}

void sub_198A45664(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v2 == 2) {
    WTF::StringImpl::destroy(v2, a2);
  }
  else {
    *(_DWORD *)v2 -= 2;
  }
  _Unwind_Resume(exception_object);
}

void *stringForTLSProtocolVersion(void *result, int a2)
{
  uint64_t v2 = result;
  switch(a2)
  {
    case 769:
    case 770:
    case 771:
    case 772:
      goto LABEL_7;
    default:
      if (a2 == 65277 || a2 == 65279)
      {
LABEL_7:
        uint64_t result = (void *)WTF::StringImpl::createWithoutCopyingNonEmpty();
        void *v2 = v3;
      }
      else
      {
        *uint64_t result = 0;
      }
      return result;
  }
}

void *stringForTLSCipherSuite(void *result, int a2)
{
  uint64_t v2 = result;
  if (a2 > 49186)
  {
    switch(a2)
    {
      case 49187:
      case 49188:
      case 49191:
      case 49192:
      case 49195:
      case 49196:
      case 49199:
      case 49200:
        goto LABEL_26;
      case 49189:
      case 49190:
      case 49193:
      case 49194:
      case 49197:
      case 49198:
        goto LABEL_25;
      default:
        if (a2 == 52392 || a2 == 52393) {
          goto LABEL_26;
        }
        goto LABEL_25;
    }
  }
  if (a2 > 4865)
  {
    switch(a2)
    {
      case 49160:
      case 49161:
      case 49162:
      case 49170:
      case 49171:
      case 49172:
        goto LABEL_26;
      case 49163:
      case 49164:
      case 49165:
      case 49166:
      case 49167:
      case 49168:
      case 49169:
        goto LABEL_25;
      default:
        if (a2 == 4866 || a2 == 4867) {
          goto LABEL_26;
        }
        goto LABEL_25;
    }
  }
  if (a2 > 60)
  {
    if (a2 > 156)
    {
      if (a2 == 157 || a2 == 4865) {
        goto LABEL_26;
      }
    }
    else if (a2 == 61 || a2 == 156)
    {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (a2 > 52)
  {
    if (a2 == 53 || a2 == 60) {
      goto LABEL_26;
    }
LABEL_25:
    *uint64_t result = 0;
    return result;
  }
  if (a2 != 10 && a2 != 47) {
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = (void *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  void *v2 = v3;
  return result;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = 0;
  *(void *)(result + 48) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a2 + 56) = 0;
  *(_DWORD *)(result + 56) = v2;
  LODWORD(v2) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a2 + 60) = 0;
  *(_DWORD *)(result + 60) = v2;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  uint64_t v3 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(result + 64) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(result + 72) = v3;
  LODWORD(v3) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(result + 76) = v3;
  return result;
}

WTF::ASCIILiteral *__Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v1 = (WTF::ASCIILiteral *)(a1 + 48);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 64));

  return WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector(v1);
}

void sub_198A45BDC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A45CF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 24);
  *(void *)(v1 - 24) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198A46220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = *(void *)(v11 - 144);
  *(void *)(v11 - 144) = 0;
  if (v13) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v13 + 8));
  }
  _Unwind_Resume(exception_object);
}

void sub_198A46514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(a11 + 8));
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebCore::SharedBuffer::create<NSData *&>@<X0>(WebCore::FragmentedSharedBuffer **a1@<X0>, NSData *a2@<X1>, uint64_t *a3@<X8>)
{
  WebCore::FragmentedSharedBuffer::create((uint64_t *)&v7, *a1, a2);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x38);
  MEMORY[0x199730FA0](v4, &v7);
  *a3 = v4;
  uint64_t result = v7;
  int v7 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  }
  return result;
}

void sub_198A465B8(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  WTF::fastFree(v10, a2);
  if (a10) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a10, v12);
  }
  _Unwind_Resume(a1);
}

void sub_198A46A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*v16);
  if (a16) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(a16 + 8));
  }
  _Unwind_Resume(a1);
}

void sub_198A46A9C()
{
}

void sub_198A46BA0(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_198A46C90(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::setProxyConfigData(uint64_t a1, uint64_t *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (void (*)(uint64_t))nw_context_clear_proxiesPtr();
  if (byte_1E93CF505 == 1)
  {
    int v6 = off_1E93CF540;
  }
  else
  {
    if (byte_1E93CF504 == 1)
    {
      uint64_t v35 = (void *)qword_1E93CF538;
    }
    else
    {
      uint64_t v35 = dlopen("/usr/lib/libnetwork.dylib", 2);
      qword_1E93CF538 = (uint64_t)v35;
      byte_1E93CF504 = 1;
    }
    int v6 = dlsym(v35, "nw_context_add_proxy");
    off_1E93CF540 = v6;
    byte_1E93CF505 = 1;
  }
  if (byte_1E93CF506 == 1)
  {
    uint64_t v40 = off_1E93CF548;
  }
  else
  {
    if (byte_1E93CF504 == 1)
    {
      uint64_t v36 = (void *)qword_1E93CF538;
    }
    else
    {
      uint64_t v36 = dlopen("/usr/lib/libnetwork.dylib", 2);
      qword_1E93CF538 = (uint64_t)v36;
      byte_1E93CF504 = 1;
    }
    uint64_t v40 = dlsym(v36, "nw_proxy_config_create_with_agent_data");
    off_1E93CF548 = v40;
    byte_1E93CF506 = 1;
  }
  if (byte_1E93CF507 == 1)
  {
    __int16 v39 = off_1E93CF550;
    if (!v5) {
      return;
    }
  }
  else
  {
    if (byte_1E93CF504 == 1)
    {
      char v37 = (void *)qword_1E93CF538;
    }
    else
    {
      char v37 = dlopen("/usr/lib/libnetwork.dylib", 2);
      qword_1E93CF538 = (uint64_t)v37;
      byte_1E93CF504 = 1;
    }
    __int16 v39 = dlsym(v37, "nw_proxy_config_stack_requires_http_protocols");
    off_1E93CF550 = v39;
    byte_1E93CF507 = 1;
    if (!v5) {
      return;
    }
  }
  if (v6 && v40 && v39)
  {
    int v41 = (WTF **)(a1 + 1160);
    WTF::Vector<WTF::RetainPtr<NSObject  {objcproto18OS_nw_proxy_config}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WTF *)(a1 + 1160), v4);
    uint64_t v7 = *((unsigned int *)a2 + 3);
    if (!v7) {
      goto LABEL_36;
    }
    char v8 = 0;
    uint64_t v9 = *a2;
    uint64_t v38 = *a2 + 32 * v7;
    do
    {
      long long v49 = *(_OWORD *)(v9 + 16);
      uint64_t v10 = ((uint64_t (*)(void, void, long long *))v40)(*(void *)v9, *(unsigned int *)(v9 + 12), &v49);
      char v42 = ((uint64_t (*)(void))v39)();
      unint64_t v11 = *(unsigned int *)(a1 + 1172);
      if (v11 == *(_DWORD *)(a1 + 1168))
      {
        unint64_t v12 = v11 + (v11 >> 2);
        if (v12 >= 0x10) {
          unint64_t v13 = v12 + 1;
        }
        else {
          unint64_t v13 = 16;
        }
        if (v13 <= v11 + 1) {
          unint64_t v14 = v11 + 1;
        }
        else {
          unint64_t v14 = v13;
        }
        if (v14 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x198A471E8);
        }
        uint64_t v15 = *v41;
        unsigned int v17 = (WTF *)WTF::fastMalloc((WTF *)(8 * v14));
        *(_DWORD *)(a1 + 1168) = v14;
        *(void *)(a1 + 1160) = v17;
        if (v11)
        {
          uint64_t v18 = 8 * v11;
          uint64_t v19 = v15;
          do
          {
            uint64_t v20 = *(const void **)v19;
            *(void *)uint64_t v19 = 0;
            *(void *)unsigned int v17 = v20;
            uint64_t v21 = *(const void **)v19;
            *(void *)uint64_t v19 = 0;
            if (v21) {
              CFRelease(v21);
            }
            unsigned int v17 = (WTF *)((char *)v17 + 8);
            uint64_t v19 = (WTF *)((char *)v19 + 8);
            v18 -= 8;
          }
          while (v18);
          unsigned int v17 = *v41;
        }
        if (v15)
        {
          if (v17 == v15)
          {
            *(void *)(a1 + 1160) = 0;
            *(_DWORD *)(a1 + 1168) = 0;
          }
          WTF::fastFree(v15, v16);
          unsigned int v17 = *v41;
        }
        char v22 = v42;
        unint64_t v11 = *(unsigned int *)(a1 + 1172);
        __int16 v23 = (uint64_t *)((char *)v17 + 8 * v11);
      }
      else
      {
        __int16 v23 = (uint64_t *)((char *)*v41 + 8 * v11);
        char v22 = v42;
      }
      v8 |= v22;
      uint64_t *v23 = v10;
      *(_DWORD *)(a1 + 1172) = v11 + 1;
      v9 += 32;
    }
    while (v9 != v38);
    if (v8)
    {
      uint64_t v24 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v24 = &unk_1EE9BC628;
      v24[1] = a1;
      *(void *)&long long v49 = v24;
      WebKit::NetworkSessionCocoa::forEachSessionWrapper((void *)a1, (uint64_t *)&v49);
      if ((void)v49) {
        (*(void (**)(void))(*(void *)v49 + 8))(v49);
      }
    }
    else
    {
LABEL_36:
      *(void *)&long long v49 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
      uint64_t v25 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v25 = &unk_1EE9BC650;
      v25[1] = &v49;
      uint64_t v47 = v25;
      WebKit::NetworkSessionCocoa::forEachSessionWrapper((void *)a1, (uint64_t *)&v47);
      if (v47) {
        (*(void (**)(void *))(*v47 + 8))(v47);
      }
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      uint64_t v26 = (void *)v49;
      uint64_t v27 = [(id)v49 countByEnumeratingWithState:&v43 objects:v48 count:16];
      if (v27)
      {
        uint64_t v28 = *(void *)v44;
        do
        {
          for (uint64_t i = 0; i != v27; ++i)
          {
            if (*(void *)v44 != v28) {
              objc_enumerationMutation(v26);
            }
            uint64_t v30 = *(void *)(*((void *)&v43 + 1) + 8 * i);
            v5(v30);
            uint64_t v31 = *(unsigned int *)(a1 + 1172);
            if (v31)
            {
              int v32 = *(void **)(a1 + 1160);
              uint64_t v33 = 8 * v31;
              do
              {
                ((void (*)(uint64_t, void))v6)(v30, *v32++);
                v33 -= 8;
              }
              while (v33);
            }
          }
          uint64_t v27 = [v26 countByEnumeratingWithState:&v43 objects:v48 count:16];
        }
        while (v27);
      }
      uint64_t v34 = (const void *)v49;
      *(void *)&long long v49 = 0;
      if (v34) {
        CFRelease(v34);
      }
    }
  }
}

void sub_198A47264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v26 = *(void *)(v24 - 112);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::~NetworkSessionCocoa(WebKit::NetworkSessionCocoa *this, void *a2)
{
  uint64_t v3 = *((void *)this + 152);
  if (v3) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 151);
  if (v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v4, a2);
  }
  unint64_t v5 = (WTF::StringImpl *)*((void *)this + 149);
  *((void *)this + 149) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  int v6 = (const void *)*((void *)this + 147);
  *((void *)this + 147) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WTF::Vector<WTF::RetainPtr<__SecCertificate *>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 1160, a2);
  char v8 = (const void *)*((void *)this + 144);
  *((void *)this + 144) = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = (WTF::StringImpl *)*((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v7);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = (WTF::StringImpl *)*((void *)this + 142);
  *((void *)this + 142) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v7);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  unint64_t v11 = (WTF::StringImpl *)*((void *)this + 141);
  *((void *)this + 141) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v7);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  uint64_t v12 = *((void *)this + 140);
  if (v12) {
    WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(v12, v7);
  }
  uint64_t v13 = *((void *)this + 139);
  if (v13) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v13, v7);
  }
  unint64_t v14 = (WebKit::SessionSet *)*((void *)this + 138);
  *((void *)this + 138) = 0;
  if (v14) {
    WTF::RefCounted<WebKit::SessionSet>::deref(v14, v7);
  }

  WebKit::NetworkSession::~NetworkSession(this);
}

{
  _DWORD *v2;
  void *v3;
  uint64_t vars8;

  WebKit::NetworkSessionCocoa::~NetworkSessionCocoa(this, a2);
  if (v2[4])
  {
    bzero(v2, 0x4C8uLL);
  }
  else
  {
    WTF::fastFree((WTF *)v2, v3);
  }
}

uint64_t WebKit::NetworkSessionCocoa::initializeEphemeralStatelessSessionIfNeeded(uint64_t a1, uint64_t a2)
{
  if (!a2
    || (uint64_t v3 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 1112), a2)) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 1104);
  }

  return WebKit::SessionSet::initializeEphemeralStatelessSessionIfNeeded(v3, (WebKit **)a1);
}

uint64_t WebKit::SessionSet::initializeEphemeralStatelessSessionIfNeeded(uint64_t a1, WebKit **a2)
{
  uint64_t v2 = a1 + 80;
  if (!*(void *)(a1 + 88))
  {
    unint64_t v5 = (void *)[MEMORY[0x1E4F18DD0] ephemeralSessionConfiguration];
    int v6 = (void *)[*(id *)(a1 + 40) configuration];
    [v5 setHTTPCookieAcceptPolicy:1];
    [v5 setURLCredentialStorage:0];
    [v5 setURLCache:0];
    objc_msgSend(v5, "setAllowsCellularAccess:", objc_msgSend(v6, "allowsCellularAccess"));
    objc_msgSend(v5, "setConnectionProxyDictionary:", objc_msgSend(v6, "connectionProxyDictionary"));
    objc_msgSend(v5, "set_shouldSkipPreferredClientCertificateLookup:", 1);
    objc_msgSend(v5, "set_sourceApplicationAuditTokenData:", objc_msgSend(v6, "_sourceApplicationAuditTokenData"));
    objc_msgSend(v5, "set_sourceApplicationSecondaryIdentifier:", objc_msgSend(v6, "_sourceApplicationSecondaryIdentifier"));
    objc_msgSend(v5, "set_CTDataConnectionServiceType:", objc_msgSend(v6, "_CTDataConnectionServiceType"));
    WebKit::SessionWrapper::initialize(v2, (WebKit::AuxiliaryProcess *)v5, a2, 2);
  }
  return v2;
}

BOOL WebKit::NetworkSessionCocoa::hasAppBoundSession(WebKit::NetworkSessionCocoa *this)
{
  if (*(void *)(*((void *)this + 138) + 24)) {
    return 1;
  }
  uint64_t v2 = (void *)*((void *)this + 139);
  if (v2)
  {
    uint64_t v3 = *((unsigned int *)v2 - 1);
    uint64_t v4 = &v2[2 * v3];
    if (*((_DWORD *)v2 - 3))
    {
      unint64_t v5 = (void *)*((void *)this + 139);
      if (v3)
      {
        uint64_t v6 = 16 * v3;
        unint64_t v5 = (void *)*((void *)this + 139);
        while ((unint64_t)(*v5 + 1) <= 1)
        {
          v5 += 2;
          v6 -= 16;
          if (!v6)
          {
            unint64_t v5 = v4;
            goto LABEL_13;
          }
        }
      }
      goto LABEL_13;
    }
    unint64_t v5 = &v2[2 * v3];
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v3 = 0;
  }
  uint64_t v4 = &v2[2 * v3];
LABEL_13:
  if (v2) {
    v2 += 2 * *((unsigned int *)v2 - 1);
  }
  if (v2 == v5) {
    return 0;
  }
  do
  {
    uint64_t v7 = *(void *)(v5[1] + 24);
    BOOL result = v7 != 0;
    if (v7) {
      break;
    }
    char v8 = v5 + 2;
    unint64_t v5 = v4;
    if (v8 != v4)
    {
      unint64_t v5 = v8;
      while ((unint64_t)(*v5 + 1) <= 1)
      {
        v5 += 2;
        if (v5 == v4)
        {
          unint64_t v5 = v4;
          break;
        }
      }
    }
  }
  while (v5 != v2);
  return result;
}

void WebKit::NetworkSessionCocoa::clearAppBoundSession(WebKit::NetworkSessionCocoa *this)
{
  uint64_t v2 = *((void *)this + 138);
  unint64_t v5 = *(void **)(v2 + 24);
  uint64_t v3 = (void *)(v2 + 24);
  uint64_t v4 = v5;
  void *v3 = 0;
  if (v5) {
    std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v3, v4);
  }
  uint64_t v6 = (void *)*((void *)this + 139);
  if (!v6)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
LABEL_12:
    char v8 = &v6[2 * v7];
    goto LABEL_13;
  }
  uint64_t v7 = *((unsigned int *)v6 - 1);
  char v8 = &v6[2 * v7];
  if (!*((_DWORD *)v6 - 3))
  {
    uint64_t v9 = &v6[2 * v7];
    goto LABEL_12;
  }
  uint64_t v9 = v6;
  if (v7)
  {
    uint64_t v10 = 16 * v7;
    uint64_t v9 = v6;
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      v9 += 2;
      v10 -= 16;
      if (!v10)
      {
        uint64_t v9 = v8;
        break;
      }
    }
  }
LABEL_13:
  if (v6) {
    unint64_t v11 = &v6[2 * *((unsigned int *)v6 - 1)];
  }
  else {
    unint64_t v11 = 0;
  }
  while (v9 != v11)
  {
    uint64_t v12 = v9[1];
    uint64_t v15 = *(void **)(v12 + 24);
    uint64_t v13 = (void *)(v12 + 24);
    unint64_t v14 = v15;
    void *v13 = 0;
    if (v15) {
      std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v13, v14);
    }
    uint64_t v16 = v9 + 2;
    uint64_t v9 = v8;
    if (v16 != v8)
    {
      uint64_t v9 = v16;
      while ((unint64_t)(*v9 + 1) <= 1)
      {
        v9 += 2;
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
}

uint64_t WebKit::NetworkSessionCocoa::hasIsolatedSession(WebKit::NetworkSessionCocoa *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(*(void *)(*((void *)this + 138) + 16), a2))return 1; {
  unint64_t v5 = (void *)*((void *)this + 139);
  }
  if (!v5)
  {
    char v8 = 0;
    uint64_t v6 = 0;
LABEL_12:
    uint64_t v7 = &v5[2 * v6];
    goto LABEL_13;
  }
  uint64_t v6 = *((unsigned int *)v5 - 1);
  uint64_t v7 = &v5[2 * v6];
  if (!*((_DWORD *)v5 - 3))
  {
    char v8 = &v5[2 * v6];
    goto LABEL_12;
  }
  char v8 = v5;
  if (v6)
  {
    uint64_t v9 = 16 * v6;
    char v8 = v5;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        char v8 = v7;
        break;
      }
    }
  }
LABEL_13:
  if (v5) {
    uint64_t v10 = &v5[2 * *((unsigned int *)v5 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 != v8)
  {
    while (1)
    {
      uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(*(void *)(v8[1] + 16), a2);
      if (result) {
        return 1;
      }
      unint64_t v11 = v8 + 2;
      char v8 = v7;
      if (v11 != v7)
      {
        char v8 = v11;
        while ((unint64_t)(*v8 + 1) <= 1)
        {
          v8 += 2;
          if (v8 == v7)
          {
            char v8 = v7;
            break;
          }
        }
      }
      if (v8 == v10) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t WebKit::NetworkSessionCocoa::clearIsolatedSessions(WebKit::NetworkSessionCocoa *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 138);
  uint64_t result = *(void *)(v3 + 16);
  if (result)
  {
    *(void *)(v3 + 16) = 0;
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, a2);
  }
  unint64_t v5 = (void *)*((void *)this + 139);
  if (!v5)
  {
    char v8 = 0;
    uint64_t v6 = 0;
LABEL_12:
    uint64_t v7 = &v5[2 * v6];
    goto LABEL_13;
  }
  uint64_t v6 = *((unsigned int *)v5 - 1);
  uint64_t v7 = &v5[2 * v6];
  if (!*((_DWORD *)v5 - 3))
  {
    char v8 = &v5[2 * v6];
    goto LABEL_12;
  }
  char v8 = v5;
  if (v6)
  {
    uint64_t v9 = 16 * v6;
    char v8 = v5;
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
      {
        char v8 = v7;
        break;
      }
    }
  }
LABEL_13:
  if (v5) {
    uint64_t v10 = &v5[2 * *((unsigned int *)v5 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  while (v8 != v10)
  {
    uint64_t v11 = v8[1];
    uint64_t result = *(void *)(v11 + 16);
    if (result)
    {
      *(void *)(v11 + 16) = 0;
      uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, a2);
    }
    uint64_t v12 = v8 + 2;
    char v8 = v7;
    if (v12 != v7)
    {
      char v8 = v12;
      while ((unint64_t)(*v8 + 1) <= 1)
      {
        v8 += 2;
        if (v8 == v7)
        {
          char v8 = v7;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::invalidateAndCancelSessionSet(WebKit::NetworkSessionCocoa *this, WebKit::SessionSet *a2)
{
  [*((id *)this + 5) invalidateAndCancel];
  [*((id *)this + 11) invalidateAndCancel];
  [*((id *)this + 6) sessionInvalidated];
  [*((id *)this + 12) sessionInvalidated];
  uint64_t v6 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*((void *)this + 2), v3, v4);
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t v8 = result + 16 * *(unsigned int *)(result - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  v13[1] = v5;
  if (v8 != v6)
  {
    do
    {
      [*(id *)(*(void *)(v6 + 8) + 8) invalidateAndCancel];
      [*(id *)(*(void *)(v6 + 8) + 16) sessionInvalidated];
      v13[0] = v6 + 16;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v13, v9, v10);
      uint64_t v6 = v13[0];
    }
    while (v13[0] != v8);
    uint64_t result = *((void *)this + 2);
  }
  if (result)
  {
    *((void *)this + 2) = 0;
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(result, v5);
  }
  uint64_t v11 = *((void *)this + 3);
  if (v11)
  {
    [*(id *)(v11 + 8) invalidateAndCancel];
    uint64_t v12 = *(void **)(*((void *)this + 3) + 16);
    return [v12 sessionInvalidated];
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::invalidateAndCancel(WebKit::NetworkSessionCocoa **this, void *a2)
{
  WebKit::NetworkSession::invalidateAndCancel((WebKit::NetworkSession *)this, a2);
  uint64_t result = WebKit::NetworkSessionCocoa::invalidateAndCancelSessionSet(this[138], v3);
  uint64_t v6 = this[139];
  if (!v6)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
LABEL_10:
    uint64_t v8 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * v7);
    goto LABEL_11;
  }
  uint64_t v7 = *((unsigned int *)v6 - 1);
  uint64_t v8 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * v7);
  if (!*((_DWORD *)v6 - 3))
  {
    uint64_t v9 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * v7);
    goto LABEL_10;
  }
  uint64_t v9 = v6;
  if (v7)
  {
    uint64_t v10 = 16 * v7;
    uint64_t v9 = v6;
    while ((unint64_t)(*(void *)v9 + 1) <= 1)
    {
      uint64_t v9 = (WebKit::NetworkSessionCocoa *)((char *)v9 + 16);
      v10 -= 16;
      if (!v10)
      {
        uint64_t v9 = v8;
        break;
      }
    }
  }
LABEL_11:
  if (v6) {
    uint64_t v11 = (WebKit::NetworkSessionCocoa *)((char *)v6 + 16 * *((unsigned int *)v6 - 1));
  }
  else {
    uint64_t v11 = 0;
  }
  while (v9 != v11)
  {
    uint64_t result = WebKit::NetworkSessionCocoa::invalidateAndCancelSessionSet(*((WebKit::NetworkSessionCocoa **)v9 + 1), v5);
    uint64_t v12 = (WebKit::NetworkSessionCocoa *)((char *)v9 + 16);
    uint64_t v9 = v8;
    if (v12 != v8)
    {
      uint64_t v9 = v12;
      while ((unint64_t)(*(void *)v9 + 1) <= 1)
      {
        uint64_t v9 = (WebKit::NetworkSessionCocoa *)((char *)v9 + 16);
        if (v9 == v8)
        {
          uint64_t v9 = v8;
          break;
        }
      }
    }
  }
  return result;
}

void *WebKit::NetworkSessionCocoa::originsWithCredentials@<X0>(WebKit::NetworkSessionCocoa *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)this + 138) + 40), "configuration"), "URLCredentialStorage");
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = [MEMORY[0x1E4F18D90] sharedCredentialStorage];
    unsigned int v17 = a2;
    *a2 = 0;
    uint64_t v6 = (void *)[v4 allCredentials];
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    uint64_t result = (void *)[v6 countByEnumeratingWithState:&v26 objects:v33 count:16];
    uint64_t v7 = (uint64_t)result;
    if (result)
    {
      uint64_t v18 = *(void *)v27;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v27 != v18) {
            objc_enumerationMutation(v6);
          }
          uint64_t v9 = *(void **)(*((void *)&v26 + 1) + 8 * v8);
          long long v22 = 0u;
          long long v23 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          uint64_t v10 = objc_msgSend((id)objc_msgSend(v6, "objectForKeyedSubscript:", v9), "allValues");
          uint64_t v11 = [v10 countByEnumeratingWithState:&v22 objects:v32 count:16];
          if (v11)
          {
            uint64_t v12 = *(void *)v23;
            while (2)
            {
              for (uint64_t i = 0; i != v11; ++i)
              {
                if (*(void *)v23 != v12) {
                  objc_enumerationMutation(v10);
                }
                if (v4 != (void *)v5 || [*(id *)(*((void *)&v22 + 1) + 8 * i) persistence] == 1)
                {
                  MEMORY[0x19972EAD0](&v21, [v9 protocol]);
                  MEMORY[0x19972EAD0](&v20, [v9 host]);
                  WebCore::SecurityOriginData::SecurityOriginData((uint64_t)v30, (_DWORD **)&v21, (_DWORD **)&v20, (unsigned __int16)[v9 port] | 0x10000);
                  WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(v17, (uint64_t)v30, (uint64_t)v19);
                  if (v31 != -1) {
                    ((void (*)(unsigned char *, unsigned char *))off_1EE9BC228[v31])(v19, v30);
                  }
                  int v31 = -1;
                  uint64_t v15 = v20;
                  uint64_t v20 = 0;
                  if (v15)
                  {
                    if (*(_DWORD *)v15 == 2) {
                      WTF::StringImpl::destroy(v15, v14);
                    }
                    else {
                      *(_DWORD *)v15 -= 2;
                    }
                  }
                  uint64_t v16 = v21;
                  uint64_t v21 = 0;
                  if (v16)
                  {
                    if (*(_DWORD *)v16 == 2) {
                      WTF::StringImpl::destroy(v16, v14);
                    }
                    else {
                      *(_DWORD *)v16 -= 2;
                    }
                  }
                  goto LABEL_27;
                }
              }
              uint64_t v11 = [v10 countByEnumeratingWithState:&v22 objects:v32 count:16];
              if (v11) {
                continue;
              }
              break;
            }
          }
LABEL_27:
          ++v8;
        }
        while (v8 != v7);
        uint64_t result = (void *)[v6 countByEnumeratingWithState:&v26 objects:v33 count:16];
        uint64_t v7 = (uint64_t)result;
      }
      while (result);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

void sub_198A47E84(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, WTF::StringImpl *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,int a37)
{
  if (*a10) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(*a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::removeCredentialsForOrigins(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 1104) + 40), "configuration"), "URLCredentialStorage");
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v36 = 0;
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v5)
    {
      uint64_t v6 = *(WebCore::SecurityOriginData **)a2;
      uint64_t v7 = 32 * v5;
      do
      {
        WebCore::SecurityOriginData::isNull(v6);
        if ((v8 & 1) == 0 && *((_DWORD *)v6 + 6) != 1) {
          WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(&v36, (uint64_t)v6, (uint64_t)v37);
        }
        uint64_t v6 = (WebCore::SecurityOriginData *)((char *)v6 + 32);
        v7 -= 32;
      }
      while (v7);
    }
    uint64_t v9 = [MEMORY[0x1E4F18D90] sharedCredentialStorage];
    uint64_t v10 = (void *)[v4 allCredentials];
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    uint64_t v12 = [v10 countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v12)
    {
      long long v23 = v10;
      uint64_t v24 = *(void *)v33;
      do
      {
        uint64_t v13 = 0;
        uint64_t v25 = v12;
        do
        {
          if (*(void *)v33 != v24) {
            objc_enumerationMutation(v10);
          }
          unint64_t v14 = *(void **)(*((void *)&v32 + 1) + 8 * v13);
          long long v28 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          uint64_t v15 = objc_msgSend((id)objc_msgSend(v10, "objectForKeyedSubscript:", v14), "allValues");
          uint64_t v16 = [v15 countByEnumeratingWithState:&v28 objects:v39 count:16];
          if (v16)
          {
            uint64_t v17 = *(void *)v29;
            do
            {
              for (uint64_t i = 0; i != v16; ++i)
              {
                if (*(void *)v29 != v17) {
                  objc_enumerationMutation(v15);
                }
                uint64_t v19 = *(void *)(*((void *)&v28 + 1) + 8 * i);
                if (v4 != (void *)v9 || [*(id *)(*((void *)&v28 + 1) + 8 * i) persistence] == 1)
                {
                  MEMORY[0x19972EAD0](&v27, [v14 protocol]);
                  MEMORY[0x19972EAD0](&v26, [v14 host]);
                  WebCore::SecurityOriginData::SecurityOriginData((uint64_t)v37, (_DWORD **)&v27, (_DWORD **)&v26, (unsigned __int16)[v14 port] | 0x10000);
                  uint64_t v21 = v26;
                  long long v26 = 0;
                  if (v21)
                  {
                    if (*(_DWORD *)v21 == 2) {
                      WTF::StringImpl::destroy(v21, v20);
                    }
                    else {
                      *(_DWORD *)v21 -= 2;
                    }
                  }
                  long long v22 = v27;
                  long long v27 = 0;
                  if (v22)
                  {
                    if (*(_DWORD *)v22 == 2) {
                      WTF::StringImpl::destroy(v22, v20);
                    }
                    else {
                      *(_DWORD *)v22 -= 2;
                    }
                  }
                  if (WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(&v36, (uint64_t)v37))[v4 removeCredential:v19 forProtectionSpace:v14]; {
                  if (v38 != -1)
                  }
                    ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9BC228[v38])(&v27, v37);
                }
              }
              uint64_t v16 = [v15 countByEnumeratingWithState:&v28 objects:v39 count:16];
            }
            while (v16);
          }
          ++v13;
          uint64_t v10 = v23;
        }
        while (v13 != v25);
        uint64_t v12 = [v23 countByEnumeratingWithState:&v32 objects:v40 count:16];
      }
      while (v12);
    }
    uint64_t result = v36;
    if (v36) {
      return WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v36, v11);
    }
  }
  return result;
}

void sub_198A48248(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF::StringImpl *a13, WTF::StringImpl *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,int a36)
{
  if (a32) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(a32, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::clearCredentials(uint64_t a1, double a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 1104) + 40), "configuration"), "URLCredentialStorage");
  if (result)
  {
    uint64_t v4 = (void *)result;
    uint64_t v5 = [MEMORY[0x1E4F18D90] sharedCredentialStorage];
    BOOL v6 = a2 > 0.0 || v4 == (void *)v5;
    BOOL v7 = v6;
    char v8 = (void *)[v4 allCredentials];
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t result = [v8 countByEnumeratingWithState:&v23 objects:v28 count:16];
    uint64_t v18 = result;
    if (result)
    {
      uint64_t v17 = *(void *)v24;
      do
      {
        uint64_t v9 = 0;
        do
        {
          if (*(void *)v24 != v17) {
            objc_enumerationMutation(v8);
          }
          uint64_t v10 = *(void *)(*((void *)&v23 + 1) + 8 * v9);
          long long v19 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          long long v22 = 0u;
          uint64_t v11 = objc_msgSend((id)objc_msgSend(v8, "objectForKeyedSubscript:", v10, v17), "allValues");
          uint64_t v12 = [v11 countByEnumeratingWithState:&v19 objects:v27 count:16];
          if (v12)
          {
            uint64_t v13 = v12;
            uint64_t v14 = *(void *)v20;
            do
            {
              uint64_t v15 = 0;
              do
              {
                if (*(void *)v20 != v14) {
                  objc_enumerationMutation(v11);
                }
                uint64_t v16 = *(void *)(*((void *)&v19 + 1) + 8 * v15);
                if (!v7 || [*(id *)(*((void *)&v19 + 1) + 8 * v15) persistence] == 1) {
                  [v4 removeCredential:v16 forProtectionSpace:v10];
                }
                ++v15;
              }
              while (v13 != v15);
              uint64_t v13 = [v11 countByEnumeratingWithState:&v19 objects:v27 count:16];
            }
            while (v13);
          }
          ++v9;
        }
        while (v9 != v18);
        uint64_t result = [v8 countByEnumeratingWithState:&v23 objects:v28 count:16];
        uint64_t v18 = result;
      }
      while (result);
    }
  }
  return result;
}

void WebKit::createChallengeCompletionHandler(void *a1, uint64_t *a2, uint64_t a3, WebCore::AuthenticationChallengeBase *a4, WTF::StringImpl **a5, uint64_t a6, uint64_t *a7)
{
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v36, a4);
  uint64_t v14 = (const void *)*((void *)a4 + 52);
  CFTypeRef cf = v14;
  if (v14) {
    CFRetain(v14);
  }
  uint64_t v15 = (const void *)*((void *)a4 + 53);
  CFTypeRef v38 = v15;
  if (v15) {
    CFRetain(v15);
  }
  uint64_t v16 = *a7;
  *a7 = 0;
  uint64_t v17 = *a2;
  *a2 = 0;
  uint64_t v29 = v16;
  uint64_t v30 = v17;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v31, (const WebCore::AuthenticationChallengeBase *)v36);
  CFTypeRef v32 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFTypeRef v33 = v38;
  if (v38) {
    CFRetain(v38);
  }
  uint64_t v34 = a6;
  uint64_t v18 = *a5;
  if (*a5) {
    *(_DWORD *)v18 += 2;
  }
  long long v35 = v18;
  long long v19 = (void *)WTF::fastMalloc((WTF *)0x1E0);
  void *v19 = &unk_1EE9BC248;
  v19[1] = v29;
  v19[2] = v30;
  v19[3] = a3;
  WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase((uint64_t)(v19 + 4), (uint64_t)v31);
  v19[56] = v32;
  CFTypeRef v21 = v33;
  CFTypeRef v32 = 0;
  CFTypeRef v33 = 0;
  v19[57] = v21;
  v19[58] = v34;
  long long v22 = v35;
  if (!v35)
  {
    v19[59] = 0;
    *a1 = v19;
    long long v35 = 0;
    goto LABEL_14;
  }
  int v23 = *(_DWORD *)v35;
  *(_DWORD *)v35 += 2;
  v19[59] = v22;
  *a1 = v19;
  long long v35 = 0;
  if (v23)
  {
    *(_DWORD *)long long v22 = v23;
LABEL_14:
    CFTypeRef v33 = 0;
    goto LABEL_15;
  }
  WTF::StringImpl::destroy(v22, v20);
  CFTypeRef v28 = v33;
  CFTypeRef v33 = 0;
  if (v28) {
    CFRelease(v28);
  }
LABEL_15:
  CFTypeRef v24 = v32;
  CFTypeRef v32 = 0;
  if (v24) {
    CFRelease(v24);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v31, v20);
  CFTypeRef v26 = v38;
  CFTypeRef v38 = 0;
  if (v26) {
    CFRelease(v26);
  }
  CFTypeRef v27 = cf;
  CFTypeRef cf = 0;
  if (v27) {
    CFRelease(v27);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)v36, v25);
}

void sub_198A4875C(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (cf) {
    CFRelease(cf);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase(v69, a2);
  if (a10 && atomic_fetch_add((atomic_uint *volatile)a10 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, a10 + 32);
    (*(void (**)(unsigned int *))(*(void *)a10 + 8))(a10);
  }
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  uint64_t v72 = (const void *)STACK[0x388];
  STACK[0x388] = 0;
  if (v72) {
    CFRelease(v72);
  }
  uint64_t v73 = (const void *)STACK[0x380];
  STACK[0x380] = 0;
  if (v73) {
    CFRelease(v73);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a69, v71);
  _Unwind_Resume(a1);
}

void sub_198A48904()
{
}

void WebKit::NetworkSessionCocoa::createWebSocketTask(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, WebCore::ResourceRequestBase *a7@<X6>, uint64_t *a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, char a11, char a12, int a13, unsigned __int16 a14, int a15, char a16, char a17)
{
  long long v25 = (void *)WebCore::ResourceRequest::nsURLRequest();
  CFTypeRef v26 = v25;
  if (v25) {
    CFRetain(v25);
  }
  if (*a8)
  {
    CFTypeRef v27 = (void *)[v26 mutableCopy];
    CFTypeRef v28 = v27;
    if (v27) {
      CFRetain(v27);
    }
    if (v26) {
      CFRelease(v26);
    }
    *(void *)&long long v66 = 0;
    DWORD2(v66) = 0;
    LOBYTE(v29) = 1;
    BYTE12(v66) = 1;
    uint64_t v30 = *a8;
    if (*a8)
    {
      unsigned int v31 = *(unsigned __int8 *)(v30 + 16);
      uint64_t v32 = *(void *)(v30 + 8);
      LODWORD(v30) = *(_DWORD *)(v30 + 4);
      *(void *)&long long v66 = v32;
      int v29 = (v31 >> 2) & 1;
    }
    DWORD2(v66) = v30;
    BYTE12(v66) = v29;
    WTF::StringView::createNSString((uint64_t *)&cf, (WTF::StringView *)&v66);
    [v28 addValue:cf forHTTPHeaderField:@"Sec-WebSocket-Protocol"];
    CFTypeRef v33 = cf;
    CFTypeRef cf = 0;
    if (v33) {
      CFRelease(v33);
    }
    CFTypeRef v26 = v28;
  }
  else
  {
    CFTypeRef v28 = 0;
  }
  [v26 _setProperty:MEMORY[0x1E4F1CC28] forKey:*MEMORY[0x1E4F18F38]];
  if ((*((unsigned char *)a7 + 148) & 4) == 0)
  {
    if (v28)
    {
      uint64_t v34 = v28;
    }
    else
    {
      long long v35 = (void *)[v26 mutableCopy];
      uint64_t v34 = v35;
      if (v35) {
        CFRetain(v35);
      }
      if (v26) {
        CFRelease(v26);
      }
      CFTypeRef v26 = v34;
    }
    CFTypeRef v28 = v34;
    [v34 setAttribution:1];
  }
  uint64_t v36 = [v26 attribution];
  uint64_t v37 = 1064;
  if (v36) {
    uint64_t v37 = 1065;
  }
  *(unsigned char *)(a1 + v37) = 1;
  if ((a12 & 1) == 0)
  {
    if (v28)
    {
      CFTypeRef v38 = v28;
    }
    else
    {
      __int16 v39 = (void *)[v26 mutableCopy];
      CFTypeRef v38 = v39;
      if (v39) {
        CFRetain(v39);
      }
      if (v26) {
        CFRelease(v26);
      }
      CFTypeRef v26 = v38;
    }
    CFTypeRef v28 = v38;
    [v38 _setProhibitPrivacyProxy:1];
  }
  if (a11) {
    goto LABEL_79;
  }
  uint64_t v40 = (WTF::URL *)WebCore::ResourceRequestBase::url(a7);
  uint64_t v41 = (unsigned __int8 *)WTF::URL::host(v40);
  int v43 = *(_DWORD *)(a10 + 24);
  if (v43)
  {
    if (v43 != 1)
    {
      uint64_t v53 = std::__throw_bad_variant_access[abi:sn180100]();
      __break(1u);
      goto LABEL_76;
    }
    long long v44 = (uint64_t *)MEMORY[0x1E4F30980];
  }
  else
  {
    long long v44 = (uint64_t *)(a10 + 8);
  }
  uint64_t v45 = *v44;
  if (v45)
  {
    unint64_t v46 = *(unsigned int *)(v45 + 16);
    uint64_t v47 = *(unsigned __int8 **)(v45 + 8);
    LODWORD(v45) = *(_DWORD *)(v45 + 4);
    uint64_t v48 = (v46 >> 2) & 1;
  }
  else
  {
    uint64_t v47 = 0;
    uint64_t v48 = 1;
  }
  if (WTF::operator==(v41, v42, v47, v45 | (unint64_t)(v48 << 32)))
  {
LABEL_79:
    if ([MEMORY[0x1E4F18D50] instancesRespondToSelector:sel__setPrivacyProxyFailClosedForUnreachableNonMainHosts_])
    {
      if (v28)
      {
        long long v49 = v28;
      }
      else
      {
        uint64_t v50 = (void *)[v26 mutableCopy];
        long long v49 = v50;
        if (v50) {
          CFRetain(v50);
        }
        if (v26) {
          CFRelease(v26);
        }
        CFTypeRef v26 = v49;
      }
      CFTypeRef v28 = v49;
      [v49 _setPrivacyProxyFailClosedForUnreachableNonMainHosts:1];
    }
  }
  if (!v28)
  {
    uint64_t v51 = (void *)[v26 mutableCopy];
    uint64_t v52 = v51;
    if (v51) {
      CFRetain(v51);
    }
    if (v26) {
      CFRelease(v26);
    }
    CFTypeRef v28 = v52;
    CFTypeRef v26 = v52;
  }
  WebKit::enableAdvancedPrivacyProtections((WebKit *)v28, (NSURLRequest *)a14);
  uint64_t v62 = a9;
  if (!a2
    || (uint64_t v53 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 1112), a2)) == 0)
  {
    uint64_t v54 = a5;
    uint64_t v55 = *(void *)(a1 + 1104);
    goto LABEL_58;
  }
LABEL_76:
  uint64_t v55 = v53;
  uint64_t v54 = a5;
LABEL_58:
  ++*(_DWORD *)v55;
  int v56 = (void *)[*(id *)(v55 + 40) webSocketTaskWithRequest:v26];
  uint64_t v57 = v56;
  CFTypeRef v64 = v56;
  if (v56) {
    CFRetain(v56);
  }
  [v57 setMaximumMessageSize:0x7FFFFFFFFFFFFFFFLL];
  uint64_t v58 = WTF::fastMalloc((WTF *)0xB0);
  long long v66 = *(_OWORD *)a3;
  uint64_t v67 = *(void *)(a3 + 16);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v55 + 8), v55);
  char v59 = *(atomic_uint **)(v55 + 8);
  if (v59) {
    atomic_fetch_add(v59, 1u);
  }
  CFTypeRef cf = v59;
  WebKit::WebSocketTask::WebSocketTask(v58, a6, a2, &v66, a4, v54, (uint64_t *)&cf, (uint64_t)a7, a10, (uint64_t *)&v64, a16, a17);
  uint64_t *v62 = v58;
  uint64_t v61 = (unsigned int *)cf;
  CFTypeRef cf = 0;
  if (v61 && atomic_fetch_add((atomic_uint *volatile)v61, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v61);
    WTF::fastFree((WTF *)v61, v60);
  }
  if (v64) {
    CFRelease(v64);
  }
  WTF::RefCounted<WebKit::SessionSet>::deref((WebKit::SessionSet *)v55, v60);
  if (v28) {
    CFRelease(v28);
  }
  if (v26) {
    CFRelease(v26);
  }
}

void sub_198A48D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, CFTypeRef a15, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v16)
  {
    CFRelease(v16);
    CFRelease(v16);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::addWebSocketTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2
    && (uint64_t v5 = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(*(void *)(a1 + 1112), a2)) != 0)
  {
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 1104);
  }
  uint64_t v7 = [*(id *)(a3 + 56) taskIdentifier];
  uint64_t v10 = *(void *)(v6 + 72);
  uint64_t v9 = (uint64_t *)(v6 + 72);
  uint64_t v8 = v10;
  if (v10
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v9, 0), (uint64_t v8 = *v9) != 0))
  {
    int v11 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v11 = 0;
  }
  unint64_t v12 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v7)
      {
        __break(0xC471u);
        JUMPOUT(0x198A490A0);
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v11;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v9 - 16);
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v7;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 40), a3);
  CFTypeRef v21 = *(atomic_uint **)(a3 + 40);
  if (v21) {
    atomic_fetch_add(v21, 1u);
  }
  long long v22 = (unsigned int *)v16[1];
  v16[1] = (uint64_t)v21;
  if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v22);
    WTF::fastFree((WTF *)v22, v20);
  }
  uint64_t v23 = *v9;
  if (*v9) {
    int v24 = *(_DWORD *)(v23 - 12) + 1;
  }
  else {
    int v24 = 1;
  }
  *(_DWORD *)(v23 - 12) = v24;
  uint64_t v25 = *v9;
  if (*v9) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 <= 0x400)
  {
    if (3 * v28 > 4 * v27) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v28 <= 2 * v27) {
LABEL_28:
  }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v9, (uint64_t)v16);
LABEL_29:
  int v29 = qword_1EB3581B8;
  if (os_log_type_enabled((os_log_t)qword_1EB3581B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = *v9;
    if (*v9) {
      LODWORD(v30) = *(_DWORD *)(v30 - 12);
    }
    v31[0] = 67109120;
    v31[1] = v30;
    _os_log_impl(&dword_1985F2000, v29, OS_LOG_TYPE_DEFAULT, "NetworkSessionCocoa::addWebSocketTask, web socket count is %u", (uint8_t *)v31, 8u);
  }
}

void WebKit::NetworkSessionCocoa::removeWebSocketTask(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [*(id *)(a3 + 56) taskIdentifier];
  uint64_t v8 = *(void *)(a2 + 72);
  uint64_t v7 = (uint64_t *)(a2 + 72);
  uint64_t v6 = v8;
  if (!v8) {
    goto LABEL_27;
  }
  unsigned int v9 = *(_DWORD *)(v6 - 8);
  unint64_t v10 = (v4 + ~(v4 << 32)) ^ ((unint64_t)(v4 + ~(v4 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  uint64_t v13 = v9 & ((v12 >> 31) ^ v12);
  uint64_t v14 = *(void *)(v6 + 16 * v13);
  if (v14 != v4)
  {
    int v15 = 1;
    while (v14)
    {
      uint64_t v13 = (v13 + v15) & v9;
      uint64_t v14 = *(void *)(v6 + 16 * v13);
      ++v15;
      if (v14 == v4) {
        goto LABEL_8;
      }
    }
    uint64_t v13 = *(unsigned int *)(v6 - 4);
  }
LABEL_8:
  if (v13 == *(_DWORD *)(v6 - 4))
  {
LABEL_27:
    __break(0xC471u);
    JUMPOUT(0x198A4928CLL);
  }
  uint64_t v16 = (void *)(v6 + 16 * v13);
  uint64_t v17 = (unsigned int *)v16[1];
  void *v16 = -1;
  v16[1] = 0;
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v5);
  }
  ++*(_DWORD *)(*v7 - 16);
  uint64_t v18 = *v7;
  if (*v7) {
    int v19 = *(_DWORD *)(v18 - 12) - 1;
  }
  else {
    int v19 = -1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v20 = *v7;
  if (*v7)
  {
    unsigned int v21 = 6 * *(_DWORD *)(v20 - 12);
    unsigned int v22 = *(_DWORD *)(v20 - 4);
    if (v21 < v22 && v22 >= 9) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(v7, v22 >> 1, 0);
    }
  }
  int v24 = qword_1EB3581B8;
  if (os_log_type_enabled((os_log_t)qword_1EB3581B8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *v7;
    if (*v7) {
      LODWORD(v25) = *(_DWORD *)(v25 - 12);
    }
    v26[0] = 67109120;
    v26[1] = v25;
    _os_log_impl(&dword_1985F2000, v24, OS_LOG_TYPE_DEFAULT, "NetworkSessionCocoa::removeWebSocketTask, web socket count is %u", (uint8_t *)v26, 8u);
  }
}

void WebKit::NetworkSessionCocoa::addWebPageNetworkParameters(uint64_t a1, uint64_t a2, const WTF::StringImpl **a3)
{
  uint64_t v6 = (uint64_t *)(a1 + 1120);
  uint64_t v7 = *(void *)(a1 + 1120);
  if (v7
    || (WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::expand((uint64_t *)(a1 + 1120), 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = *a3;
  if (*a3)
  {
    unsigned int v10 = *((_DWORD *)v9 + 4);
    if (v10 >= 0x100) {
      LODWORD(v9) = v10 >> 8;
    }
    else {
      LODWORD(v9) = WTF::StringImpl::hashSlowCase(v9);
    }
  }
  unsigned int v11 = v9 & v8;
  uint64_t v12 = v7 + 16 * (v9 & v8);
  if ((WTF::equal(*(WTF **)v12, 0, (const WTF::StringImpl *)a3) & 1) == 0)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    do
    {
      if (*(void *)v12 == -1)
      {
        uint64_t v14 = (void *)v12;
      }
      else if (WTF::equal(*(WTF **)v12, *a3, v13))
      {
        goto LABEL_29;
      }
      unsigned int v11 = (v11 + v15) & v8;
      uint64_t v12 = v7 + 16 * v11;
      ++v15;
    }
    while (!WTF::equal(*(WTF **)v12, 0, v13));
    if (v14)
    {
      void *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v12 = (uint64_t)v14;
    }
  }
  WTF::String::operator=((uint64_t *)v12, a3);
  uint64_t v17 = *(unsigned int **)(v12 + 8);
  *(void *)(v12 + 8) = 0;
  if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v17);
    WTF::fastFree((WTF *)v17, v16);
  }
  uint64_t v18 = *v6;
  if (*v6) {
    int v19 = *(_DWORD *)(v18 - 12) + 1;
  }
  else {
    int v19 = 1;
  }
  *(_DWORD *)(v18 - 12) = v19;
  uint64_t v20 = *v6;
  if (*v6) {
    int v21 = *(_DWORD *)(v20 - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(v20 - 16) + v21);
  unint64_t v23 = *(unsigned int *)(v20 - 4);
  if (v23 <= 0x400)
  {
    if (3 * v23 > 4 * v22) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v23 <= 2 * v22) {
LABEL_28:
  }
    uint64_t v12 = WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::expand(v6, (WTF **)v12);
LABEL_29:
  uint64_t v24 = *(void *)(v12 + 8);
  if (v24)
  {
    atomic_fetch_add((atomic_uint *volatile)v24, 1u);
    uint64_t v25 = *(_DWORD **)(v24 + 8);
    if (v25)
    {
      int v26 = (uint64_t *)(a1 + 1112);
      uint64_t v27 = *(void *)(a1 + 1112);
      if (v27
        || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 1112), 0), (uint64_t v27 = *v26) != 0))
      {
        int v28 = *(_DWORD *)(v27 - 8);
      }
      else
      {
        int v28 = 0;
      }
      unint64_t v29 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
      unint64_t v30 = 9 * ((v29 + ~(v29 << 13)) ^ ((v29 + ~(v29 << 13)) >> 8));
      unint64_t v31 = (v30 ^ (v30 >> 15)) + ~((v30 ^ (v30 >> 15)) << 27);
      unsigned int v32 = v28 & ((v31 >> 31) ^ v31);
      CFTypeRef v33 = (uint64_t *)(v27 + 16 * v32);
      uint64_t v34 = *v33;
      if (*v33)
      {
        long long v35 = 0;
        int v36 = 1;
        while (v34 != a2)
        {
          if (v34 == -1) {
            long long v35 = v33;
          }
          unsigned int v32 = (v32 + v36) & v28;
          CFTypeRef v33 = (uint64_t *)(v27 + 16 * v32);
          uint64_t v34 = *v33;
          ++v36;
          if (!*v33)
          {
            if (v35)
            {
              uint64_t *v35 = 0;
              v35[1] = 0;
              --*(_DWORD *)(*v26 - 16);
              CFTypeRef v33 = v35;
            }
            goto LABEL_42;
          }
        }
        goto LABEL_70;
      }
LABEL_42:
      uint64_t v37 = (WebKit::SessionSet *)v33[1];
      uint64_t *v33 = a2;
      ++*v25;
      v33[1] = (uint64_t)v25;
      if (v37) {
        WTF::RefCounted<WebKit::SessionSet>::deref(v37, v16);
      }
      uint64_t v38 = *v26;
      if (*v26) {
        int v39 = *(_DWORD *)(v38 - 12) + 1;
      }
      else {
        int v39 = 1;
      }
      *(_DWORD *)(v38 - 12) = v39;
      uint64_t v57 = *v26;
      if (*v26) {
        int v58 = *(_DWORD *)(v57 - 12);
      }
      else {
        int v58 = 0;
      }
      uint64_t v59 = (*(_DWORD *)(v57 - 16) + v58);
      unint64_t v60 = *(unsigned int *)(v57 - 4);
      if (v60 > 0x400)
      {
        if (v60 > 2 * v59)
        {
LABEL_70:
          if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v24);
            WTF::fastFree((WTF *)v24, v16);
          }
          return;
        }
      }
      else if (3 * v60 > 4 * v59)
      {
        goto LABEL_70;
      }
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v26, v33);
      goto LABEL_70;
    }
    if (atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v24);
      WTF::fastFree((WTF *)v24, v16);
    }
  }
  uint64_t v40 = (uint64_t *)(a1 + 1112);
  uint64_t v42 = WTF::fastMalloc((WTF *)0x80);
  *(_DWORD *)uint64_t v42 = 1;
  *(_OWORD *)(v42 + 8) = 0u;
  *(_OWORD *)(v42 + 24) = 0u;
  *(_OWORD *)(v42 + 40) = 0u;
  *(_OWORD *)(v42 + 56) = 0u;
  *(_OWORD *)(v42 + 72) = 0u;
  *(_OWORD *)(v42 + 88) = 0u;
  *(_OWORD *)(v42 + 104) = 0u;
  *(void *)(v42 + 120) = 0;
  uint64_t v43 = *(void *)(a1 + 1112);
  if (v43
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 1112), 0), (uint64_t v43 = *v40) != 0))
  {
    int v44 = *(_DWORD *)(v43 - 8);
  }
  else
  {
    int v44 = 0;
  }
  unint64_t v45 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
  unint64_t v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
  unsigned int v48 = (v47 >> 31) ^ v47;
  unsigned int v49 = v44 & v48;
  uint64_t v50 = (uint64_t *)(v43 + 16 * (v44 & v48));
  uint64_t v51 = *v50;
  if (*v50)
  {
    uint64_t v52 = 0;
    int v53 = 1;
    do
    {
      if (v51 == a2)
      {
        WTF::RefCounted<WebKit::SessionSet>::deref((WebKit::SessionSet *)v42, v41);
        goto LABEL_81;
      }
      if (v51 == -1) {
        uint64_t v52 = v50;
      }
      unsigned int v49 = (v49 + v53) & v44;
      uint64_t v50 = (uint64_t *)(v43 + 16 * v49);
      uint64_t v51 = *v50;
      ++v53;
    }
    while (*v50);
    if (v52)
    {
      *uint64_t v52 = 0;
      v52[1] = 0;
      --*(_DWORD *)(*v40 - 16);
      uint64_t v50 = v52;
    }
  }
  uint64_t v54 = (WebKit::SessionSet *)v50[1];
  uint64_t *v50 = a2;
  v50[1] = v42;
  if (v54) {
    WTF::RefCounted<WebKit::SessionSet>::deref(v54, v41);
  }
  uint64_t v55 = *v40;
  if (*v40) {
    int v56 = *(_DWORD *)(v55 - 12) + 1;
  }
  else {
    int v56 = 1;
  }
  *(_DWORD *)(v55 - 12) = v56;
  uint64_t v61 = *v40;
  if (*v40) {
    int v62 = *(_DWORD *)(v61 - 12);
  }
  else {
    int v62 = 0;
  }
  uint64_t v63 = (*(_DWORD *)(v61 - 16) + v62);
  unint64_t v64 = *(unsigned int *)(v61 - 4);
  if (v64 <= 0x400)
  {
    if (3 * v64 > 4 * v63) {
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if (v64 <= 2 * v63) {
LABEL_80:
  }
    uint64_t v50 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 1112), v50);
LABEL_81:
  char v65 = (NSURLSessionConfiguration *)objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 1104) + 40), "configuration"), "copy");
  if (objc_opt_respondsToSelector())
  {
    if (*a3) {
      long long v66 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      long long v66 = &stru_1EEA10550;
    }
    [(NSURLSessionConfiguration *)v65 set_attributedBundleIdentifier:v66];
  }
  WebKit::NetworkSessionCocoa::initializeNSURLSessionsInSet((WebKit **)a1, (WebKit::SessionSet *)v50[1], v65);
  uint64_t v67 = v50[1];
  CFTypeRef v68 = (atomic_uint **)(v67 + 8);
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v67 + 8), v67);
  uint64_t v70 = *v68;
  if (*v68) {
    atomic_fetch_add(v70, 1u);
  }
  uint64_t v71 = *(unsigned int **)(v12 + 8);
  *(void *)(v12 + 8) = v70;
  if (v71 && atomic_fetch_add((atomic_uint *volatile)v71, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v71);
    WTF::fastFree((WTF *)v71, v69);
  }
  uint64_t v72 = (uint64_t *)(a1 + 1072);
  uint64_t v73 = *(void *)(a1 + 1072);
  if (v73
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(a1 + 1072), 0), (uint64_t v73 = *v72) != 0))
  {
    int v74 = *(_DWORD *)(v73 - 8);
  }
  else
  {
    int v74 = 0;
  }
  unsigned int v75 = v74 & v48;
  CFTypeRef v76 = (uint64_t *)(v73 + 16 * (v74 & v48));
  uint64_t v77 = *v76;
  if (*v76)
  {
    __int16 v78 = 0;
    int v79 = 1;
    while (v77 != a2)
    {
      if (v77 == -1) {
        __int16 v78 = v76;
      }
      unsigned int v75 = (v75 + v79) & v74;
      CFTypeRef v76 = (uint64_t *)(v73 + 16 * v75);
      uint64_t v77 = *v76;
      ++v79;
      if (!*v76)
      {
        if (v78)
        {
          *__int16 v78 = 0;
          v78[1] = 0;
          --*(_DWORD *)(*v72 - 16);
          CFTypeRef v76 = v78;
        }
        goto LABEL_101;
      }
    }
    goto LABEL_117;
  }
LABEL_101:
  *CFTypeRef v76 = a2;
  uint64_t v80 = *a3;
  if (*a3) {
    *(_DWORD *)v80 += 2;
  }
  uint64_t v81 = (WTF::StringImpl *)v76[1];
  v76[1] = (uint64_t)v80;
  if (v81)
  {
    if (*(_DWORD *)v81 == 2) {
      WTF::StringImpl::destroy(v81, (WTF::StringImpl *)v69);
    }
    else {
      *(_DWORD *)v81 -= 2;
    }
  }
  uint64_t v82 = *v72;
  if (*v72) {
    int v83 = *(_DWORD *)(v82 - 12) + 1;
  }
  else {
    int v83 = 1;
  }
  *(_DWORD *)(v82 - 12) = v83;
  uint64_t v84 = *v72;
  if (*v72) {
    int v85 = *(_DWORD *)(v84 - 12);
  }
  else {
    int v85 = 0;
  }
  uint64_t v86 = (*(_DWORD *)(v84 - 16) + v85);
  unint64_t v87 = *(unsigned int *)(v84 - 4);
  if (v87 <= 0x400)
  {
    if (3 * v87 > 4 * v86) {
      goto LABEL_117;
    }
    goto LABEL_116;
  }
  if (v87 <= 2 * v86) {
LABEL_116:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v72, v76);
LABEL_117:
  if (v65)
  {
    CFRelease(v65);
  }
}

void sub_198A49994(_Unwind_Exception *a1, void *a2)
{
  WTF::RefCounted<WebKit::SessionSet>::deref(v2, a2);
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::loadImageForDecoding(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  WebKit::NetworkLoadParameters::NetworkLoadParameters((WebKit::NetworkLoadParameters *)&v12);
  WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v13, a2);
  uint64_t v4 = *(WTF::StringImpl **)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  uint64_t v5 = v14;
  uint64_t v14 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(WTF::StringImpl **)(a2 + 160);
  *(void *)(a2 + 160) = 0;
  uint64_t v7 = v15;
  int v15 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = *(WTF::RefCountedBase **)(a2 + 168);
  *(void *)(a2 + 168) = 0;
  unsigned int v9 = v16;
  uint64_t v16 = v8;
  if (v9) {
    WTF::RefCounted<WebCore::FormData>::deref(v9);
  }
  uint64_t v17 = *(void *)(a2 + 176);
  char v18 = *(unsigned char *)(a2 + 184);
  unsigned int v10 = *(const void **)(a2 + 192);
  *(void *)(a2 + 192) = 0;
  CFTypeRef v11 = cf;
  CFTypeRef cf = v10;
  if (v11) {
    CFRelease(v11);
  }
  operator new();
}

void sub_198A49C6C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, WTF *a13, WTF *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,CFTypeRef cf,uint64_t a45,uint64_t a46,uint64_t a47)
{
  uint64_t v51 = (unsigned int *)v48[13];
  v48[13] = 0;
  if (v51) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v51, a2);
  }
  uint64_t v52 = v48[12];
  v48[12] = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v53 = v48[11];
  v48[11] = 0;
  if (v53) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v53 + 8));
  }
  uint64_t v54 = (WTF::StringImpl *)v48[3];
  uint64_t v48[3] = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  uint64_t v55 = (unsigned int *)v48[2];
  _OWORD v48[2] = 0;
  if (v55 && atomic_fetch_add((atomic_uint *volatile)v55 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v55 + 32);
    (*(void (**)(unsigned int *))(*(void *)v55 + 8))(v55);
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v49, a2);
  MEMORY[0x199740C10](v48, 0x10A1C4056C4F33ALL);
  if (LOBYTE(STACK[0xB88]))
  {
    int v58 = (const void *)STACK[0xB80];
    STACK[0xB80] = 0;
    if (v58) {
      CFRelease(v58);
    }
  }
  WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&STACK[0xB58], v56);
  if (LOBYTE(STACK[0xB40])) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&a47);
  }
  if (cf) {
    CFRelease(cf);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(v47);
  if (a14) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a14, v57);
  }
  if (a13) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)a13, v57);
  }
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::dataTaskWithRequest(void *a1, WebKit::AuxiliaryProcess *a2, WebCore::ResourceRequestBase *a3, unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  WebCore::ResourceRequestBase::url(a3);
  if (WTF::URL::protocolIs())
  {
    CFTypeRef v11 = *(atomic_uchar *volatile **)(a1[4] + 40);
    uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x30);
    v12[1] = 0;
    *uint64_t v12 = &unk_1EE9BC528;
    WebCore::ResourceRequestBase::url(a3);
    WebCore::BlobRegistryImpl::filesInBlob();
    int v13 = a4[32];
    if (a4[32])
    {
      WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v63, (WebCore::SecurityOriginData *)a4);
      uint64_t v14 = v63;
      if (v63) {
        atomic_fetch_add((atomic_uint *volatile)v63, 1u);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v64 = v14;
    uint64_t v34 = WTF::fastMalloc((WTF *)0x2C8);
    v12[2] = WebKit::NetworkDataTaskBlob::NetworkDataTaskBlob(v34, (uint64_t)a1, (uint64_t)v12, a3, (uint64_t)v65, (uint64_t *)&v64);
    if (v14) {
      WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v14, v35);
    }
    if (v13)
    {
      int v36 = v63;
      uint64_t v63 = 0;
      if (v36) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v36, v35);
      }
    }
    WTF::Vector<WTF::RefPtr<WebCore::BlobDataFileReference,WTF::RawPtrTraits<WebCore::BlobDataFileReference>,WTF::DefaultRefDerefTraits<WebCore::BlobDataFileReference>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v65, v35);
    if (v11)
    {
      char v37 = 0;
      atomic_uchar *volatile v38 = *v11;
      int v39 = 1;
      atomic_compare_exchange_strong_explicit(*v11, (unsigned __int8 *)&v37, 1u, memory_order_acquire, memory_order_acquire);
      if (v37) {
        MEMORY[0x19972E8D0](v38);
      }
      ++*((void *)v38 + 1);
      atomic_compare_exchange_strong_explicit(v38, (unsigned __int8 *)&v39, 0, memory_order_release, memory_order_relaxed);
      if (v39 != 1) {
        WTF::Lock::unlockSlow((WTF::Lock *)v38);
      }
    }
    void v12[3] = v11;
    void v12[4] = 0;
    v12[5] = IdentifierInternal;
    (*(void (**)(void))(*(void *)v12[2] + 24))(v12[2]);
    uint64_t v41 = a1 + 151;
    uint64_t v42 = a1[151];
    if (v42
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 151),
          (uint64_t v42 = *v41) != 0))
    {
      int v43 = *(_DWORD *)(v42 - 8);
    }
    else
    {
      int v43 = 0;
    }
    unint64_t v44 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                                 + ~(IdentifierInternal << 32)) >> 22);
    unint64_t v45 = 9 * ((v44 + ~(v44 << 13)) ^ ((v44 + ~(v44 << 13)) >> 8));
    unint64_t v46 = (v45 ^ (v45 >> 15)) + ~((v45 ^ (v45 >> 15)) << 27);
    unsigned int v47 = v43 & ((v46 >> 31) ^ v46);
    unsigned int v48 = (uint64_t *)(v42 + 16 * v47);
    uint64_t v49 = *v48;
    if (*v48)
    {
      uint64_t v50 = 0;
      int v51 = 1;
      do
      {
        if (v49 == IdentifierInternal)
        {
          std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100]((uint64_t)v12, v40);
          goto LABEL_71;
        }
        if (v49 == -1) {
          uint64_t v50 = v48;
        }
        unsigned int v47 = (v47 + v51) & v43;
        unsigned int v48 = (uint64_t *)(v42 + 16 * v47);
        uint64_t v49 = *v48;
        ++v51;
      }
      while (*v48);
      if (v50)
      {
        uint64_t *v50 = 0;
        v50[1] = 0;
        --*(_DWORD *)(*v41 - 16);
        unsigned int v48 = v50;
      }
    }
    uint64_t v52 = v48[1];
    uint64_t *v48 = IdentifierInternal;
    v48[1] = (uint64_t)v12;
    if (v52) {
      std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](v52, v40);
    }
    uint64_t v53 = *v41;
    if (*v41) {
      int v54 = *(_DWORD *)(v53 - 12) + 1;
    }
    else {
      int v54 = 1;
    }
    *(_DWORD *)(v53 - 12) = v54;
    uint64_t v59 = *v41;
    if (*v41) {
      int v60 = *(_DWORD *)(v59 - 12);
    }
    else {
      int v60 = 0;
    }
    uint64_t v61 = (*(_DWORD *)(v59 - 16) + v60);
    unint64_t v62 = *(unsigned int *)(v59 - 4);
    if (v62 > 0x400)
    {
      if (v62 > 2 * v61) {
        goto LABEL_71;
      }
    }
    else if (3 * v62 > 4 * v61)
    {
LABEL_71:
      WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)>::operator()(a5);
      return;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v41);
    goto LABEL_71;
  }
  uint64_t v15 = WebCore::ResourceRequest::nsURLRequest();
  uint64_t v16 = WebKit::NetworkSessionCocoa::sessionWrapperForTask((uint64_t)a1, a2, a3, 1u, 0);
  uint64_t v17 = *(void **)(v16 + 8);
  if (v17) {
    CFRetain(*(CFTypeRef *)(v16 + 8));
  }
  char v18 = (void *)[v17 dataTaskWithRequest:v15];
  int v19 = [[WKURLSessionTaskDelegate alloc] initWithTask:v18 identifier:IdentifierInternal session:a1];
  [v18 setDelegate:v19];
  uint64_t v20 = a1 + 152;
  uint64_t v21 = a1[152];
  if (v21
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a1 + 152, 0), (uint64_t v21 = *v20) != 0))
  {
    int v22 = *(_DWORD *)(v21 - 8);
  }
  else
  {
    int v22 = 0;
  }
  unint64_t v23 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                               + ~(IdentifierInternal << 32)) >> 22);
  unint64_t v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
  unint64_t v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
  unsigned int v26 = v22 & ((v25 >> 31) ^ v25);
  uint64_t v27 = (uint64_t *)(v21 + 16 * v26);
  uint64_t v28 = *v27;
  if (*v27)
  {
    unint64_t v29 = 0;
    int v30 = 1;
    do
    {
      if (v28 == IdentifierInternal)
      {
        __break(0xC471u);
        return;
      }
      if (v28 == -1) {
        unint64_t v29 = v27;
      }
      unsigned int v26 = (v26 + v30) & v22;
      uint64_t v27 = (uint64_t *)(v21 + 16 * v26);
      uint64_t v28 = *v27;
      ++v30;
    }
    while (*v27);
    if (v29)
    {
      uint64_t *v29 = 0;
      v29[1] = 0;
      --*(_DWORD *)(*v20 - 16);
      uint64_t v27 = v29;
    }
  }
  *uint64_t v27 = IdentifierInternal;
  if (v18) {
    CFRetain(v18);
  }
  unint64_t v31 = (const void *)v27[1];
  v27[1] = (uint64_t)v18;
  if (v31) {
    CFRelease(v31);
  }
  uint64_t v32 = *v20;
  if (*v20) {
    int v33 = *(_DWORD *)(v32 - 12) + 1;
  }
  else {
    int v33 = 1;
  }
  *(_DWORD *)(v32 - 12) = v33;
  uint64_t v55 = *v20;
  if (*v20) {
    int v56 = *(_DWORD *)(v55 - 12);
  }
  else {
    int v56 = 0;
  }
  uint64_t v57 = (*(_DWORD *)(v55 - 16) + v56);
  unint64_t v58 = *(unsigned int *)(v55 - 4);
  if (v58 > 0x400)
  {
    if (v58 > 2 * v57) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
  if (3 * v58 <= 4 * v57) {
LABEL_56:
  }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v20, v27);
LABEL_57:
  [v18 resume];
  WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)>::operator()(a5);
  if (v19) {
    CFRelease(v19);
  }
  if (v17)
  {
    CFRelease(v17);
  }
}

void sub_198A4A33C(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF *a9, uint64_t a10, char a11)
{
  uint64_t v14 = *((void *)v11 + 2);
  *((void *)v11 + 2) = 0;
  if (v14) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v14 + 8));
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(v12, a2);
  WTF::fastFree(v11, v15);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A4A4B8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::cancelDataTask(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 1216);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 1216), &v16);
  uint64_t v5 = *(void **)(a1 + 1216);
  if (v5) {
    v5 += 2 * *((unsigned int *)v5 - 1);
  }
  if (v5 == v4) {
    goto LABEL_13;
  }
  uint64_t v6 = (void *)v4[1];
  v4[1] = 0;
  if (*v3)
  {
    uint64_t v7 = *v3 + 16 * *(unsigned int *)(*v3 - 4);
    if ((void *)v7 == v4) {
      goto LABEL_11;
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_11;
    }
    uint64_t v7 = 0;
  }
  if ((void *)v7 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
LABEL_11:
  if (v6)
  {
    [v6 cancel];
    CFRelease(v6);
    return;
  }
LABEL_13:
  uint64_t v8 = *(void *)(a1 + 1208);
  uint64_t v9 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8, v16);
  unsigned int v10 = (void *)v9;
  if (v8) {
    uint64_t v11 = v8 + 16 * *(unsigned int *)(v8 - 4);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11 != v9)
  {
    uint64_t v12 = (uint64_t *)(a1 + 1208);
    uint64_t v13 = v10[1];
    v10[1] = 0;
    if (*v12)
    {
      uint64_t v14 = *v12 + 16 * *(unsigned int *)(*v12 - 4);
      if ((void *)v14 == v10)
      {
LABEL_24:
        if (v13)
        {
          (*(void (**)(void))(**(void **)(v13 + 16) + 16))(*(void *)(v13 + 16));
          std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](v13, v15);
        }
        return;
      }
    }
    else
    {
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v14 = 0;
    }
    if ((void *)v14 != v10) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v12, v10);
    }
    goto LABEL_24;
  }
}

void sub_198A4A640(_Unwind_Exception *exception_object, void *a2)
{
  if (v2) {
    std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](v2, a2);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::removeDataTask(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 1216);
  uint64_t v4 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 1216), &v7);
  uint64_t v5 = *(void *)(a1 + 1216);
  if (v5)
  {
    uint64_t v6 = (void *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == v4) {
      return;
    }
  }
  else
  {
    if (!v4) {
      return;
    }
    uint64_t v6 = 0;
  }
  if (v6 != v4) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, v4);
  }
}

void *WebKit::NetworkSessionCocoa::removeWebPageNetworkParameters(uint64_t a1, void *a2)
{
  uint64_t v32 = a2;
  uint64_t v3 = *(void *)(a1 + 1112);
  if (v3)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 8);
    unint64_t v5 = ((unint64_t)a2 + ~((void)a2 << 32)) ^ (((unint64_t)a2 + ~((void)a2 << 32)) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = *(void **)(v3 + 16 * v8);
    if (v9 != a2)
    {
      int v10 = 1;
      while (v9)
      {
        uint64_t v8 = (v8 + v10) & v4;
        uint64_t v9 = *(void **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a2) {
          goto LABEL_8;
        }
      }
      uint64_t v8 = *(unsigned int *)(v3 - 4);
    }
LABEL_8:
    if (v8 != *(_DWORD *)(v3 - 4))
    {
      uint64_t v11 = (uint64_t *)(a1 + 1112);
      uint64_t v12 = (void *)(v3 + 16 * v8);
      uint64_t v13 = (WebKit::SessionSet *)v12[1];
      *uint64_t v12 = -1;
      v12[1] = 0;
      if (v13) {
        WTF::RefCounted<WebKit::SessionSet>::deref(v13, a2);
      }
      ++*(_DWORD *)(*v11 - 16);
      uint64_t v14 = *v11;
      if (*v11) {
        int v15 = *(_DWORD *)(v14 - 12) - 1;
      }
      else {
        int v15 = -1;
      }
      *(_DWORD *)(v14 - 12) = v15;
      uint64_t v16 = *v11;
      if (*v11)
      {
        unsigned int v17 = 6 * *(_DWORD *)(v16 - 12);
        unsigned int v18 = *(_DWORD *)(v16 - 4);
        if (v17 < v18 && v18 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(a1 + 1112), v18 >> 1, 0);
        }
      }
    }
  }
  uint64_t v20 = (uint64_t *)(a1 + 1072);
  uint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 1072), &v32);
  uint64_t v23 = *(void *)(a1 + 1072);
  if (v23)
  {
    unint64_t v24 = (void *)(v23 + 16 * *(unsigned int *)(v23 - 4));
    if (v24 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    unint64_t v24 = 0;
  }
  if (v24 != result)
  {
    unint64_t v25 = (WTF::StringImpl *)result[1];
    *uint64_t result = -1;
    result[1] = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        uint64_t result = (void *)WTF::StringImpl::destroy(v25, v22);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    ++*(_DWORD *)(*v20 - 16);
    uint64_t v26 = *v20;
    if (*v20) {
      int v27 = *(_DWORD *)(v26 - 12) - 1;
    }
    else {
      int v27 = -1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v28 = *v20;
    if (*v20)
    {
      unsigned int v29 = 6 * *(_DWORD *)(v28 - 12);
      unsigned int v30 = *(_DWORD *)(v28 - 4);
      if (v29 < v30 && v30 >= 9) {
        return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash((uint64_t *)(a1 + 1072), v30 >> 1, 0);
      }
    }
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::countNonDefaultSessionSets(WebKit::NetworkSessionCocoa *this)
{
  int v27 = 0;
  uint64_t v1 = *((void *)this + 139);
  if (v1)
  {
    uint64_t v2 = *(unsigned int *)(v1 - 4);
    uint64_t v3 = (void *)(v1 + 16 * v2);
    if (*(_DWORD *)(v1 - 12))
    {
      unsigned int v4 = (void *)*((void *)this + 139);
      if (v2)
      {
        uint64_t v5 = 16 * v2;
        unsigned int v4 = (void *)*((void *)this + 139);
        while ((unint64_t)(*v4 + 1) <= 1)
        {
          v4 += 2;
          v5 -= 16;
          if (!v5)
          {
            unsigned int v4 = v3;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    unsigned int v4 = (void *)(v1 + 16 * v2);
  }
  else
  {
    unsigned int v4 = 0;
    uint64_t v2 = 0;
  }
  uint64_t v3 = (void *)(v1 + 16 * v2);
  if (!v1)
  {
    unint64_t v6 = 0;
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v6 = (void *)(v1 + 16 * *(unsigned int *)(v1 - 4));
LABEL_13:
  if (v6 == v4) {
    return 0;
  }
  do
  {
    unint64_t v7 = v27;
    if (v27
      || (WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::expand((uint64_t *)&v27),
          (unint64_t v7 = v27) != 0))
    {
      int v8 = *((_DWORD *)v7 - 2);
    }
    else
    {
      int v8 = 0;
    }
    uint64_t v9 = 0;
    int v10 = (WebKit::SessionSet *)v4[1];
    unint64_t v11 = ((unint64_t)v10 + ~((void)v10 << 32)) ^ (((unint64_t)v10 + ~((void)v10 << 32)) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    unsigned int v14 = (v13 >> 31) ^ v13;
    for (int i = 1; ; ++i)
    {
      unsigned int v16 = v14 & v8;
      unsigned int v17 = &v7[v16];
      unsigned int v18 = *v17;
      if (*v17 == (WebKit::SessionSet *)-1)
      {
        uint64_t v9 = &v7[v16];
        goto LABEL_23;
      }
      if (!v18) {
        break;
      }
      if (v18 == v10) {
        goto LABEL_33;
      }
LABEL_23:
      unsigned int v14 = i + v16;
    }
    if (v9)
    {
      void *v9 = 0;
      --*((_DWORD *)v27 - 4);
      int v19 = (WebKit::SessionSet *)v4[1];
      ++*(_DWORD *)v19;
      void *v9 = v19;
      unsigned int v17 = v9;
    }
    else
    {
      ++*(_DWORD *)v10;
      void *v17 = v10;
    }
    uint64_t v20 = v27;
    if (v27) {
      int v21 = *((_DWORD *)v27 - 3) + 1;
    }
    else {
      int v21 = 1;
    }
    *((_DWORD *)v27 - 3) = v21;
    uint64_t v22 = (*((_DWORD *)v20 - 4) + v21);
    unint64_t v23 = *((unsigned int *)v20 - 1);
    if (v23 > 0x400)
    {
      if (v23 <= 2 * v22) {
LABEL_32:
      }
        WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::expand((uint64_t *)&v27);
    }
    else if (3 * v23 <= 4 * v22)
    {
      goto LABEL_32;
    }
LABEL_33:
    unint64_t v24 = v4 + 2;
    unsigned int v4 = v3;
    if (v24 != v3)
    {
      unsigned int v4 = v24;
      while ((unint64_t)(*v4 + 1) <= 1)
      {
        v4 += 2;
        if (v4 == v3)
        {
          unsigned int v4 = v3;
          break;
        }
      }
    }
  }
  while (v4 != v6);
  if (!v27) {
    return 0;
  }
  uint64_t v25 = *((unsigned int *)v27 - 3);
  WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::deallocateTable(v27, v17);
  return v25;
}

void sub_198A4AB28(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WebKit::SessionSet **a10)
{
  if (a10) {
    WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::deallocateTable(a10, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::hostNamesWithAlternativeServices@<X0>(WebKit::NetworkSessionCocoa *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = objc_msgSend((id)objc_msgSend(*(id *)(*((void *)this + 138) + 40), "configuration"), "_alternativeServicesStorage");
  unsigned int v4 = objc_msgSend(v3, "HTTPServiceEntriesWithFilter:", objc_msgSend(MEMORY[0x1E4F18E38], "emptyFilter"));
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t result = [v4 countByEnumeratingWithState:&v15 objects:v22 count:16];
  uint64_t v6 = result;
  if (result)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v15 + 1) + 8 * v8);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        unsigned int v14 = v19;
        MEMORY[0x19972EAD0](&v19, [v9 host]);
        WebCore::SecurityOriginData::SecurityOriginData((uint64_t)v20, (_DWORD **)&v14, (_DWORD **)&v19, (unsigned __int16)[v9 port] | 0x10000);
        unint64_t v11 = v19;
        int v19 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2) {
            WTF::StringImpl::destroy(v11, v10);
          }
          else {
            *(_DWORD *)v11 -= 2;
          }
        }
        unint64_t v12 = v14;
        unsigned int v14 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v10);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
        uint64_t v13 = *(unsigned int *)(a2 + 12);
        if (v13 == *(_DWORD *)(a2 + 8))
        {
          WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>(a2, (unint64_t)v20);
        }
        else
        {
          std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(*(void *)a2 + 32 * v13, (uint64_t)v20);
          ++*(_DWORD *)(a2 + 12);
        }
        if (v21 != -1) {
          ((void (*)(WTF::StringImpl **, unsigned char *))off_1EE9BC228[v21])(&v19, v20);
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t result = [v4 countByEnumeratingWithState:&v15 objects:v22 count:16];
      uint64_t v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_198A4AD58(_Unwind_Exception *a1, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, WTF::StringImpl *a19, char a20,uint64_t a21,uint64_t a22,int a23)
{
  WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23, a2);
  _Unwind_Resume(a1);
}

void WebKit::NetworkSessionCocoa::donateToSKAdNetwork(uint64_t a1, uint64_t a2)
{
  v66[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_opt_new();
  if (!*(unsigned char *)(a2 + 48)) {
    goto LABEL_105;
  }
  uint64_t v2 = v6;
  objc_msgSend(v6, "setAppAdamId:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", *(void *)(a2 + 40)));
  uint64_t v7 = *(void *)(a2 + 16) ? (__CFString *)WTF::StringImpl::operator NSString *() : &stru_1EEA10550;
  [v2 setAdNetworkRegistrableDomain:v7];
  if (!*(unsigned char *)(a2 + 232)) {
    goto LABEL_105;
  }
  uint64_t v3 = *(void *)(a2 + 224);
  if (!v3) {
    goto LABEL_106;
  }
  *(_DWORD *)v3 += 2;
  for (int i = (__CFString *)WTF::StringImpl::operator NSString *(); ; int i = &stru_1EEA10550)
  {
    [v2 setImpressionId:i];
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)v3, v9);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    if (*(void *)(a2 + 8)) {
      int v10 = (__CFString *)WTF::StringImpl::operator NSString *();
    }
    else {
      int v10 = &stru_1EEA10550;
    }
    [v2 setSourceWebRegistrableDomain:v10];
    [v2 setVersion:@"4.0"];
    [v2 setAttributionContext:0];
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F4BC38], "sharedInstance"), "addInstallWebAttributionParamsWithConfig:completionHandler:", v2, &__block_literal_global_8);
    if (!*(unsigned char *)(a1 + 168)) {
      goto LABEL_100;
    }
    if (*(unsigned char *)(a2 + 48))
    {
      unint64_t v11 = *(void *)(a2 + 40);
      uint64_t v3 = *(void *)(a2 + 16);
      if (v3) {
        *(_DWORD *)v3 += 2;
      }
      if (*(unsigned char *)(a2 + 232)) {
        break;
      }
    }
LABEL_105:
    __break(1u);
LABEL_106:
    ;
  }
  uint64_t v12 = *(void *)(a2 + 224);
  if (v12) {
    *(_DWORD *)v12 += 4;
  }
  uint64_t v13 = *(void *)(a2 + 8);
  if (v13) {
    *(_DWORD *)v13 += 2;
  }
  int v14 = 0;
  unint64_t v15 = v11;
  do
  {
    ++v14;
    BOOL v16 = v15 > 9;
    v15 /= 0xAuLL;
  }
  while (v16);
  if (v3)
  {
    int v17 = *(_DWORD *)(v3 + 4);
    if (v12) {
      goto LABEL_26;
    }
LABEL_108:
    int v18 = 0;
    if (v13) {
      goto LABEL_27;
    }
    goto LABEL_109;
  }
  int v17 = 0;
  if (!v12) {
    goto LABEL_108;
  }
LABEL_26:
  int v18 = *(_DWORD *)(v12 + 4);
  if (v13)
  {
LABEL_27:
    int v19 = *(_DWORD *)(v13 + 4);
    goto LABEL_28;
  }
LABEL_109:
  int v19 = 0;
LABEL_28:
  WTF::checkedSum<int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int>(53, v14, 30, v17, 16, v18, 30, v19, (uint64_t)v62, 12);
  if (v62[0]) {
    goto LABEL_115;
  }
  if (v3 && (*(unsigned char *)(v3 + 16) & 4) == 0
    || v12 && (*(unsigned char *)(v12 + 16) & 4) == 0
    || v13 && (*(unsigned char *)(v13 + 16) & 4) == 0)
  {
    unsigned int v21 = v63;
    if (v63)
    {
      if (v63 <= 0x7FFFFFEF)
      {
        WTF::tryFastCompactMalloc((WTF *)(2 * v63 + 20));
        uint64_t v22 = v66[0];
        if (v66[0])
        {
          *(_DWORD *)v66[0] = 2;
          *(_DWORD *)(v22 + 4) = v21;
          *(void *)(v22 + 8) = v22 + 20;
          *(_DWORD *)(v22 + 16) = 0;
          uint64_t v23 = "Submitting potential install attribution for AdamId: ";
          for (uint64_t j = 20; j != 126; j += 2)
          {
            __int16 v25 = *(unsigned __int8 *)v23++;
            *(_WORD *)(v22 + j) = v25;
          }
          uint64_t v26 = 0;
          unint64_t v27 = v11;
          do
          {
            *((unsigned char *)&v66[3] + v26--) = (v27 % 0xA) | 0x30;
            BOOL v16 = v27 > 9;
            v27 /= 0xAuLL;
          }
          while (v16);
          if (v26 + 26 <= 25)
          {
            uint64_t v28 = (_WORD *)(v22 + 126);
            do
              *v28++ = *((unsigned __int8 *)&v66[3] + v26 + 1);
            while (!__CFADD__(v26++, 1));
          }
          unsigned int v30 = 0;
          do
          {
            ++v30;
            BOOL v16 = v11 > 9;
            v11 /= 0xAuLL;
          }
          while (v16);
          uint64_t v31 = 0;
          uint64_t v32 = v22 + 126 + 2 * v30;
          do
          {
            *(_WORD *)(v22 + 2 * v30 + 126 + 2 * v31) = aAdnetworkregis[v31];
            ++v31;
          }
          while (v31 != 30);
          uint64_t v33 = v32 + 60;
          uint64_t v64 = v3;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v64, (char *)(v32 + 60));
          if (v64) {
            uint64_t v34 = *(unsigned int *)(v64 + 4);
          }
          else {
            uint64_t v34 = 0;
          }
          uint64_t v35 = 0;
          uint64_t v36 = v33 + 2 * v34;
          do
          {
            *(_WORD *)(v22 + 2 * v34 + 2 * v30 + 186 + 2 * v35) = aImpressionid[v35];
            ++v35;
          }
          while (v35 != 16);
          uint64_t v37 = v36 + 32;
          uint64_t v65 = v12;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v65, (char *)(v36 + 32));
          if (v65) {
            uint64_t v38 = *(unsigned int *)(v65 + 4);
          }
          else {
            uint64_t v38 = 0;
          }
          for (uint64_t k = 0; k != 30; ++k)
            *(_WORD *)(2 * v34 + 2 * v38 + v22 + 2 * v30 + 218 + 2 * k) = aSourcewebregis[k];
          v66[0] = v13;
          WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(v66, (char *)(v37 + 2 * v38 + 60));
          if (v66[0]) {
            uint64_t v40 = *(unsigned int *)(v66[0] + 4);
          }
          else {
            uint64_t v40 = 0;
          }
          uint64_t v41 = 0;
          uint64_t v42 = 2 * v38 + 2 * v34 + 2 * v40 + v22 + 2 * v30 + 278;
          do
          {
            *(_WORD *)(v42 + 2 * v41) = aVersion3[v41];
            ++v41;
          }
          while (v41 != 12);
          goto LABEL_80;
        }
      }
LABEL_115:
      __break(0xC471u);
      return;
    }
LABEL_79:
    uint64_t v22 = MEMORY[0x1E4F30960];
    *MEMORY[0x1E4F30960] += 2;
    goto LABEL_80;
  }
  unsigned int v43 = v63;
  if (!v63) {
    goto LABEL_79;
  }
  if ((v63 & 0x80000000) != 0) {
    goto LABEL_115;
  }
  WTF::tryFastCompactMalloc((WTF *)(v63 + 20));
  uint64_t v22 = v66[0];
  if (!v66[0]) {
    goto LABEL_115;
  }
  uint64_t v44 = 0;
  *(_OWORD *)(v66[0] + 20) = *(_OWORD *)"Submitting potential install attribution for AdamId: ";
  *(_DWORD *)uint64_t v22 = 2;
  *(_DWORD *)(v22 + 4) = v43;
  *(void *)(v22 + 8) = v22 + 20;
  *(_DWORD *)(v22 + 16) = 4;
  qmemcpy((void *)(v22 + 36), "tial install attribution for AdamId: ", 37);
  unint64_t v45 = v11;
  do
  {
    *((unsigned char *)&v66[3] + v44--) = (v45 % 0xA) | 0x30;
    BOOL v16 = v45 > 9;
    v45 /= 0xAuLL;
  }
  while (v16);
  if (v44 + 26 <= 25) {
    memcpy((void *)(v22 + 73), (char *)&v66[3] + v44 + 1, -v44);
  }
  unsigned int v46 = 0;
  do
  {
    ++v46;
    BOOL v16 = v11 > 9;
    v11 /= 0xAuLL;
  }
  while (v16);
  unsigned int v47 = (char *)(v22 + 73 + v46);
  qmemcpy(v47, ", adNetworkRegistrableDomain: ", 30);
  unsigned int v48 = v47 + 30;
  uint64_t v64 = v3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v64, v47 + 30);
  uint64_t v49 = v64;
  if (v64) {
    uint64_t v49 = *(unsigned int *)(v64 + 4);
  }
  uint64_t v50 = &v48[v49];
  *(_OWORD *)uint64_t v50 = *(_OWORD *)", impressionId: ";
  int v51 = v50 + 16;
  uint64_t v65 = v12;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(&v65, v50 + 16);
  uint64_t v52 = v65;
  if (v65) {
    uint64_t v52 = *(unsigned int *)(v65 + 4);
  }
  uint64_t v53 = &v51[v52];
  qmemcpy(v53, ", sourceWebRegistrableDomain: ", 30);
  int v54 = v53 + 30;
  v66[0] = v13;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<unsigned char>(v66, v53 + 30);
  uint64_t v55 = v66[0];
  if (v66[0]) {
    uint64_t v55 = *(unsigned int *)(v66[0] + 4);
  }
  int v56 = &v54[v55];
  *(void *)int v56 = *(void *)", version: 3";
  *((_DWORD *)v56 + 2) = 857750126;
LABEL_80:
  uint64_t v61 = (WTF::StringImpl *)v22;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
    {
      WTF::StringImpl::destroy((WTF::StringImpl *)v13, v20);
      if (!v12) {
        goto LABEL_91;
      }
      goto LABEL_86;
    }
    *(_DWORD *)v13 -= 2;
  }
  if (!v12)
  {
LABEL_91:
    if (!v3) {
      goto LABEL_97;
    }
LABEL_94:
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy((WTF::StringImpl *)v3, v20);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
    goto LABEL_97;
  }
LABEL_86:
  int v57 = *(_DWORD *)v12 - 2;
  if (*(_DWORD *)v12 == 2)
  {
    WTF::StringImpl::destroy((WTF::StringImpl *)v12, v20);
    int v57 = *(_DWORD *)v12;
  }
  else
  {
    *(_DWORD *)uint64_t v12 = v57;
  }
  int v58 = v57 - 2;
  if (v58)
  {
    *(_DWORD *)uint64_t v12 = v58;
    goto LABEL_91;
  }
  WTF::StringImpl::destroy((WTF::StringImpl *)v12, v20);
  if (v3) {
    goto LABEL_94;
  }
LABEL_97:
  WebKit::NetworkProcess::broadcastConsoleMessage(*(void *)(a1 + 32), *(void *)(a1 + 24), 14, 3, (uint64_t)&v61);
  int v60 = v61;
  uint64_t v61 = 0;
  if (!v60) {
    goto LABEL_100;
  }
  if (*(_DWORD *)v60 != 2)
  {
    *(_DWORD *)v60 -= 2;
LABEL_100:
    if (!v2) {
      return;
    }
    goto LABEL_101;
  }
  WTF::StringImpl::destroy(v60, v59);
  if (v2) {
LABEL_101:
  }
    CFRelease(v2);
}

void sub_198A4B570(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  if (*(_DWORD *)v6 == 2) {
    WTF::StringImpl::destroy(v6, a2);
  }
  else {
    *(_DWORD *)v6 -= 2;
  }
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (v4)
  {
    int v8 = *(_DWORD *)v4 - 2;
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      int v8 = *(_DWORD *)v4;
    }
    else
    {
      *(_DWORD *)unsigned int v4 = v8;
    }
    int v9 = v8 - 2;
    if (v9) {
      *(_DWORD *)unsigned int v4 = v9;
    }
    else {
      WTF::StringImpl::destroy(v4, a2);
    }
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  if (v2) {
    CFRelease(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::deleteAlternativeServicesForHostNames(uint64_t a1, uint64_t a2)
{
  uint64_t result = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 1104) + 40), "configuration"), "_alternativeServicesStorage");
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    uint64_t v5 = (void *)result;
    uint64_t v6 = *(void **)a2;
    uint64_t v7 = 8 * v4;
    do
    {
      if (*v6) {
        int v8 = (__CFString *)WTF::StringImpl::operator NSString *();
      }
      else {
        int v8 = &stru_1EEA10550;
      }
      uint64_t result = [v5 removeHTTPAlternativeServiceEntriesWithRegistrableDomain:v8];
      ++v6;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

uint64_t WebKit::NetworkSessionCocoa::clearAlternativeServices(uint64_t a1, double a2)
{
  uint64_t v3 = objc_msgSend((id)objc_msgSend(*(id *)(*(void *)(a1 + 1104) + 40), "configuration"), "_alternativeServicesStorage");
  uint64_t v4 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:a2];

  return [v3 removeHTTPAlternativeServiceEntriesCreatedAfterDate:v4];
}

uint64_t WebKit::NetworkSessionCocoa::forEachSessionWrapper(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = a1[138];
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4 + 32);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v4 + 80);
  uint64_t v6 = *(void *)(v4 + 24);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
  }
  uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*(void *)(v4 + 16), v6, v5);
  uint64_t v10 = result;
  uint64_t v11 = *(void *)(v4 + 16);
  if (v11) {
    uint64_t v12 = v11 + 16 * *(unsigned int *)(v11 - 4);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v47 = v8;
  if (v12 != result)
  {
    do
    {
      uint64_t v13 = *(void *)(v10 + 8);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
      }
      uint64_t v46 = v10 + 16;
      uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v46, v13, v9);
      uint64_t v10 = v46;
    }
    while (v46 != v12);
  }
  uint64_t v14 = a1[139];
  if (v14)
  {
    uint64_t v15 = *(unsigned int *)(v14 - 4);
    BOOL v16 = (void *)(v14 + 16 * v15);
    if (*(_DWORD *)(v14 - 12))
    {
      int v17 = (void *)a1[139];
      if (v15)
      {
        uint64_t v18 = 16 * v15;
        int v17 = (void *)a1[139];
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          v17 += 2;
          v18 -= 16;
          if (!v18)
          {
            int v17 = v16;
            goto LABEL_17;
          }
        }
      }
      goto LABEL_17;
    }
    int v17 = (void *)(v14 + 16 * v15);
  }
  else
  {
    int v17 = 0;
    uint64_t v15 = 0;
  }
  BOOL v16 = (void *)(v14 + 16 * v15);
  if (v14)
  {
LABEL_17:
    int v19 = (void *)(v14 + 16 * *(unsigned int *)(v14 - 4));
    goto LABEL_22;
  }
  int v19 = 0;
LABEL_22:
  while (v17 != v19)
  {
    uint64_t v20 = v17[1];
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v20 + 32);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v20 + 80);
    uint64_t v22 = *(void *)(v20 + 24);
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
    uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*(void *)(v20 + 16), v22, v21);
    uint64_t v23 = result;
    uint64_t v24 = *(void *)(v20 + 16);
    if (v24) {
      uint64_t v25 = v24 + 16 * *(unsigned int *)(v24 - 4);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v47 = v8;
    if (v25 != result)
    {
      do
      {
        uint64_t v26 = *(void *)(v23 + 8);
        if (v26) {
          (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
        }
        uint64_t v46 = v23 + 16;
        uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v46, v26, v9);
        uint64_t v23 = v46;
      }
      while (v46 != v25);
    }
    unint64_t v27 = v17 + 2;
    int v17 = v16;
    if (v27 != v16)
    {
      int v17 = v27;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 2;
        if (v17 == v16)
        {
          int v17 = v16;
          break;
        }
      }
    }
  }
  uint64_t v28 = a1[140];
  if (!v28)
  {
    uint64_t v30 = 0;
    uint64_t v33 = 0;
    goto LABEL_44;
  }
  if (!*(_DWORD *)(v28 - 12))
  {
    uint64_t v33 = *(unsigned int *)(v28 - 4);
    uint64_t v30 = v28 + 16 * v33;
LABEL_44:
    uint64_t v31 = v28 + 16 * v33;
    if (!v28) {
      goto LABEL_41;
    }
LABEL_45:
    uint64_t v32 = v28 + 16 * *(unsigned int *)(v28 - 4);
    goto LABEL_46;
  }
  uint64_t v29 = v28 + 16 * *(unsigned int *)(v28 - 4);
  uint64_t v46 = a1[140];
  uint64_t v47 = v29;
  uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v46, v8, v9);
  uint64_t v30 = v46;
  uint64_t v31 = v47;
  uint64_t v28 = a1[140];
  if (v28) {
    goto LABEL_45;
  }
LABEL_41:
  uint64_t v32 = 0;
LABEL_46:
  v45[0] = v30;
  v45[1] = v31;
  while (1)
  {
    uint64_t v34 = v45[0];
    if (v45[0] == v32) {
      break;
    }
    uint64_t v35 = *(void *)(v45[0] + 8);
    if (v35)
    {
      uint64_t v36 = *(void *)(v35 + 8);
      if (v36)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v36 + 32);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v36 + 80);
        uint64_t v38 = *(void *)(v36 + 24);
        if (v38) {
          (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
        }
        uint64_t v39 = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(*(void *)(v36 + 16), v38, v37);
        uint64_t v40 = v39;
        uint64_t v41 = *(void *)(v36 + 16);
        if (v41) {
          uint64_t v42 = v41 + 16 * *(unsigned int *)(v41 - 4);
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v47 = v8;
        if (v42 != v39)
        {
          do
          {
            uint64_t v43 = *(void *)(v40 + 8);
            if (v43) {
              (*(void (**)(uint64_t))(*(void *)v3 + 16))(v3);
            }
            uint64_t v46 = v40 + 16;
            WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)&v46, v43, v9);
            uint64_t v40 = v46;
          }
          while (v46 != v42);
        }
      }
    }
    v45[0] = v34 + 16;
    uint64_t result = WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v45, v8, v9);
  }
  if (v3)
  {
    uint64_t v44 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);
    return v44(v3);
  }
  return result;
}

void sub_198A4BC2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void WebKit::NetworkSessionCocoa::clearProxyConfigData(WebKit::NetworkSessionCocoa *this)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void (*)(void))nw_context_clear_proxiesPtr();
  if (v2)
  {
    uint64_t v4 = v2;
    WTF::Vector<WTF::RetainPtr<NSObject  {objcproto18OS_nw_proxy_config}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((WebKit::NetworkSessionCocoa *)((char *)this + 1160), v3);
    CFTypeRef cf = objc_alloc_init(MEMORY[0x1E4F1CA80]);
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v5 = &unk_1EE9BC600;
    v5[1] = &cf;
    uint64_t v15 = v5;
    WebKit::NetworkSessionCocoa::forEachSessionWrapper(this, (uint64_t *)&v15);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    uint64_t v6 = (void *)cf;
    uint64_t v7 = [(id)cf countByEnumeratingWithState:&v11 objects:v17 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v6);
          }
          v4(*(void *)(*((void *)&v11 + 1) + 8 * i));
        }
        uint64_t v7 = [v6 countByEnumeratingWithState:&v11 objects:v17 count:16];
      }
      while (v7);
    }
    CFTypeRef v10 = cf;
    CFTypeRef cf = 0;
    if (v10) {
      CFRelease(v10);
    }
  }
}

void sub_198A4BE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void *nw_context_clear_proxiesPtr(void)
{
  if (byte_1E93CF503 == 1) {
    return (void *)qword_1E93CF530;
  }
  if (byte_1E93CF504 == 1)
  {
    uint64_t v1 = (void *)qword_1E93CF538;
  }
  else
  {
    uint64_t v1 = dlopen("/usr/lib/libnetwork.dylib", 2);
    qword_1E93CF538 = (uint64_t)v1;
    byte_1E93CF504 = 1;
  }
  uint64_t result = dlsym(v1, "nw_context_clear_proxies");
  qword_1E93CF530 = (uint64_t)result;
  byte_1E93CF503 = 1;
  return result;
}

WTF::StringImpl *WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5)
{
  v61[1] = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a1 + 24);
  if (v10 < 0 && v10 != -1)
  {
    return (WTF::StringImpl *)WTF::CompletionHandler<void ()(void)>::operator()(a5);
  }
  WebCore::applicationBundleIdentifier((uint64_t *)&v52, (WebCore *)a1);
  if ((WebKit::isParentProcessAFullWebBrowser(*(WebKit **)(a1 + 32), v11) & 1) == 0
    && (MEMORY[0x19972E990](v52, "com.apple.webbookmarksd", 23) & 1) == 0)
  {
    goto LABEL_71;
  }
  if (byte_1E93CF508 == 1)
  {
    if (!qword_1E93CF558) {
      goto LABEL_71;
    }
  }
  else
  {
    qword_1E93CF558 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomAnalytics.framework/SymptomAnalytics", 2);
    byte_1E93CF508 = 1;
    if (!qword_1E93CF558) {
      goto LABEL_71;
    }
  }
  if (byte_1E93CF509 == 1)
  {
    if (!qword_1E93CF560) {
      goto LABEL_71;
    }
  }
  else
  {
    qword_1E93CF560 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
    byte_1E93CF509 = 1;
    if (!qword_1E93CF560) {
      goto LABEL_71;
    }
  }
  if (byte_1E93CF50A == 1)
  {
    if (!qword_1E93CF568) {
      goto LABEL_71;
    }
  }
  else
  {
    qword_1E93CF568 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationLite.framework/SymptomPresentationLite", 2);
    byte_1E93CF50A = 1;
    if (!qword_1E93CF568) {
      goto LABEL_71;
    }
  }
  if (_MergedGlobals_28() && off_1EB352F90())
  {
    if (HIBYTE(word_1E93CF50B) == 1)
    {
      if (word_1E93CF50B) {
        goto LABEL_14;
      }
    }
    else
    {
      if (byte_1E93CF50A == 1)
      {
        uint64_t v41 = (void *)qword_1E93CF568;
      }
      else
      {
        uint64_t v41 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationLite.framework/SymptomPresentationLite", 2);
        qword_1E93CF568 = (uint64_t)v41;
        byte_1E93CF50A = 1;
      }
      uint64_t v42 = (uint64_t *)dlsym(v41, "kSymptomAnalyticsServiceEndpoint");
      if (v42)
      {
        qword_1E93CF580 = *v42;
        word_1E93CF50B = 257;
LABEL_14:
        long long v12 = (const void *)[objc_alloc((Class)_MergedGlobals_28()) initWorkspaceWithService:qword_1E93CF580];
        long long v13 = (void *)[objc_alloc((Class)off_1EB352F90()) initWithWorkspace:v12];
        if ((objc_opt_respondsToSelector() & 1) == 0) {
          goto LABEL_100;
        }
        if (HIBYTE(word_1E93CF50D) == 1)
        {
          if (!(_BYTE)word_1E93CF50D) {
            goto LABEL_100;
          }
        }
        else
        {
          if (byte_1E93CF509 == 1)
          {
            uint64_t v43 = (void *)qword_1E93CF560;
          }
          else
          {
            uint64_t v43 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
            qword_1E93CF560 = (uint64_t)v43;
            byte_1E93CF509 = 1;
          }
          uint64_t v44 = (uint64_t *)dlsym(v43, "kSymptomAnalyticsServiceDomainTrackingClearHistoryKey");
          unint64_t v45 = &word_1E93CF50D;
          if (!v44) {
            goto LABEL_99;
          }
          qword_1E93CF588 = *v44;
          word_1E93CF50D = 257;
        }
        if (HIBYTE(word_1E93CF50F) == 1)
        {
          if (!(_BYTE)word_1E93CF50F) {
            goto LABEL_100;
          }
        }
        else
        {
          if (byte_1E93CF509 == 1)
          {
            uint64_t v46 = (void *)qword_1E93CF560;
          }
          else
          {
            uint64_t v46 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
            qword_1E93CF560 = (uint64_t)v46;
            byte_1E93CF509 = 1;
          }
          uint64_t v47 = dlsym(v46, "kSymptomAnalyticsServiceDomainTrackingClearHistoryBundleIDs");
          unint64_t v45 = &word_1E93CF50F;
          if (!v47) {
            goto LABEL_99;
          }
          unk_1E93CF590 = *v47;
          word_1E93CF50F = 257;
        }
        if (HIBYTE(word_1E93CF511) == 1)
        {
          if (!(_BYTE)word_1E93CF511) {
            goto LABEL_100;
          }
        }
        else
        {
          if (byte_1E93CF509 == 1)
          {
            unsigned int v48 = (void *)qword_1E93CF560;
          }
          else
          {
            unsigned int v48 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
            qword_1E93CF560 = (uint64_t)v48;
            byte_1E93CF509 = 1;
          }
          uint64_t v49 = (uint64_t *)dlsym(v48, "kSymptomAnalyticsServiceDomainTrackingClearHistoryStartDate");
          unint64_t v45 = &word_1E93CF511;
          if (!v49) {
            goto LABEL_99;
          }
          qword_1E93CF598 = *v49;
          word_1E93CF511 = 257;
        }
        if (HIBYTE(word_1E93CF513) == 1)
        {
          if ((_BYTE)word_1E93CF513) {
            goto LABEL_23;
          }
LABEL_100:
          WTF::CompletionHandler<void ()(void)>::operator()(a5);
LABEL_101:
          if (v13) {
            CFRelease(v13);
          }
          if (v12) {
            CFRelease(v12);
          }
          goto LABEL_72;
        }
        if (byte_1E93CF509 == 1)
        {
          uint64_t v50 = (void *)qword_1E93CF560;
        }
        else
        {
          uint64_t v50 = dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
          qword_1E93CF560 = (uint64_t)v50;
          byte_1E93CF509 = 1;
        }
        int v51 = dlsym(v50, "kSymptomAnalyticsServiceDomainTrackingClearHistoryEndDate");
        unint64_t v45 = &word_1E93CF513;
        if (v51)
        {
          unk_1E93CF5A0 = *v51;
          word_1E93CF513 = 257;
LABEL_23:
          uint64_t v14 = [MEMORY[0x1E4F1C9C8] distantPast];
          if (a3) {
            uint64_t v14 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:*(double *)&a2];
          }
          uint64_t v15 = v14;
          id v16 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
          if (*(unsigned char *)(a4 + 8))
          {
            id v17 = objc_alloc(MEMORY[0x1E4F1CA48]);
            if (*(void *)a4) {
              uint64_t v18 = *(unsigned int *)(*(void *)a4 - 12);
            }
            else {
              uint64_t v18 = 0;
            }
            int v19 = (void *)[v17 initWithCapacity:v18];
            v54[0] = WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin((uint64_t *)a4, v20, v21);
            v54[1] = v22;
            if (*(void *)a4) {
              uint64_t v23 = *(void *)a4 + 8 * *(unsigned int *)(*(void *)a4 - 4);
            }
            else {
              uint64_t v23 = 0;
            }
            while (v54[0] != v23)
            {
              uint64_t v24 = *(WTF::StringImpl **)v54[0];
              if (*(void *)v54[0]) {
                *(_DWORD *)v24 += 2;
              }
              uint64_t v53 = v24;
              uint64_t v25 = NSString;
              WTF::String::utf8();
              if (v55) {
                uint64_t v26 = (char *)v55 + 16;
              }
              else {
                uint64_t v26 = 0;
              }
              uint64_t v29 = [v25 stringWithUTF8String:v26];
              uint64_t v30 = v55;
              uint64_t v55 = 0;
              if (v30)
              {
                if (*(_DWORD *)v30 == 1) {
                  WTF::fastFree(v30, v27);
                }
                else {
                  --*(_DWORD *)v30;
                }
              }
              if (v29) {
                [v19 addObject:v29];
              }
              uint64_t v31 = v53;
              uint64_t v53 = 0;
              if (v31)
              {
                if (*(_DWORD *)v31 == 2) {
                  WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v27);
                }
                else {
                  *(_DWORD *)v31 -= 2;
                }
              }
              v54[0] += 8;
              WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v54, (uint64_t)v27, v28);
            }
            if (v16) {
              CFRelease(v16);
            }
            id v16 = v19;
          }
          if (MEMORY[0x19972E990](v52, "com.apple.webbookmarksd", 23))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            uint64_t v33 = (WTF::StringImpl *)v54[0];
            uint64_t v34 = v52;
            uint64_t v52 = (WTF::StringImpl *)v54[0];
            if (!v34) {
              goto LABEL_57;
            }
            if (*(_DWORD *)v34 == 2) {
              WTF::StringImpl::destroy(v34, v32);
            }
            else {
              *(_DWORD *)v34 -= 2;
            }
          }
          uint64_t v33 = v52;
LABEL_57:
          uint64_t v60 = qword_1E93CF588;
          v58[0] = unk_1E93CF590;
          if (v33) {
            uint64_t v35 = (__CFString *)WTF::StringImpl::operator NSString *();
          }
          else {
            uint64_t v35 = &stru_1EEA10550;
          }
          int v56 = v35;
          id v57 = v16;
          v59[0] = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", &v57, &v56, 1, v52, v53);
          v59[1] = v15;
          v58[1] = qword_1E93CF598;
          v58[2] = unk_1E93CF5A0;
          v59[2] = [MEMORY[0x1E4F1C9C8] distantFuture];
          v61[0] = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v59 forKeys:v58 count:3];
          uint64_t v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v61 forKeys:&v60 count:1];
          uint64_t v37 = *a5;
          *a5 = 0;
          uint64_t v38 = malloc_type_malloc(0x28uLL, 0x10E004053C0834CuLL);
          *uint64_t v38 = MEMORY[0x1E4F14398];
          v38[1] = 50331650;
          _DWORD v38[2] = WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke;
          v38[3] = &WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::descriptor;
          v38[4] = v37;
          [v13 performNetworkDomainsActionWithOptions:v36 reply:v38];
          _Block_release(v38);
          if (v16) {
            CFRelease(v16);
          }
          goto LABEL_101;
        }
LABEL_99:
        *(unsigned char *)unint64_t v45 = 0;
        *((unsigned char *)v45 + 1) = 1;
        goto LABEL_100;
      }
      word_1E93CF50B = 256;
    }
  }
LABEL_71:
  WTF::CompletionHandler<void ()(void)>::operator()(a5);
LABEL_72:
  uint64_t result = v52;
  uint64_t v52 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198A4C710(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, WTF *a13)
{
  if (v15) {
    CFRelease(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v13) {
    CFRelease(v13);
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkTaskCocoa::statelessCookieStorage(WebKit::NetworkTaskCocoa *this)
{
  if (_MergedGlobals_176)
  {
    uint64_t result = qword_1E93CF518;
    if (qword_1E93CF518) {
      return result;
    }
  }
  else
  {
    qword_1E93CF518 = 0;
    _MergedGlobals_176 = 1;
  }
  uint64_t v2 = (void *)[objc_alloc(MEMORY[0x1E4F18D30]) _initWithIdentifier:0 private:1];
  uint64_t v3 = (const void *)qword_1E93CF518;
  qword_1E93CF518 = (uint64_t)v2;
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = (void *)qword_1E93CF518;
  }
  [v2 setCookieAcceptPolicy:1];
  return qword_1E93CF518;
}

uint64_t WebKit::NetworkTaskCocoa::lastCNAMEDomain(WTF::StringImpl **a1, WTF::StringImpl **a2)
{
  if (*a2 && WTF::StringImpl::endsWith())
  {
    unsigned int v4 = *a2 ? *((_DWORD *)*a2 + 1) - 1 : -1;
    WTF::String::left(a2, v4, &v11);
    uint64_t v6 = v11;
    long long v11 = 0;
    uint64_t v7 = *a2;
    *a2 = v6;
    if (v7)
    {
      int v8 = *(_DWORD *)v7 - 2;
      if (*(_DWORD *)v7 != 2)
      {
LABEL_9:
        *(_DWORD *)uint64_t v7 = v8;
        return WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)a2, a1);
      }
      WTF::StringImpl::destroy(v7, v5);
      uint64_t v7 = v11;
      long long v11 = 0;
      if (v7)
      {
        int v8 = *(_DWORD *)v7 - 2;
        if (*(_DWORD *)v7 == 2)
        {
          WTF::StringImpl::destroy(v7, v9);
          return WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)a2, a1);
        }
        goto LABEL_9;
      }
    }
  }
  return WebCore::RegistrableDomain::uncheckedCreateFromHost((WebCore::RegistrableDomain *)a2, a1);
}

WTF::StringImpl *WTF::String::left@<X0>(WTF::StringImpl **this@<X0>, unsigned int a2@<W1>, WTF::StringImpl **a3@<X8>)
{
  uint64_t result = *this;
  if (result)
  {
    if (*((_DWORD *)result + 1) > a2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::substring(result);
      *a3 = v5;
    }
    else
    {
      *(_DWORD *)result += 2;
      *a3 = result;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t WebCore::RegistrableDomain::uncheckedCreateFromHost@<X0>(WebCore::RegistrableDomain *this@<X0>, WTF::StringImpl **a2@<X8>)
{
  WebCore::PublicSuffixStore::singleton(this);
  uint64_t result = WebCore::PublicSuffixStore::topPrivatelyControlledDomain();
  if (v7 && *((_DWORD *)v7 + 1))
  {
    *a2 = v7;
  }
  else
  {
    WebCore::RegistrableDomain::uncheckedCreateFromRegistrableDomainString((WTF::StringImpl **)this, a2);
    uint64_t result = (uint64_t)v7;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        return WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
  }
  return result;
}

void sub_198A4CAAC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10)
{
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  objc_destroyWeak((id *)(a1 + 144));
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](a1 + 120, v4);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](a1 + 80, v5);
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = *(WTF::StringImpl **)a1;
  *(void *)a1 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A4CC04(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkDataTaskCocoa::storedCredentialsPolicy(WebKit::NetworkDataTaskCocoa *this)
{
  return *((unsigned __int8 *)this + 104);
}

__n128 non-virtual thunk to'WebKit::NetworkDataTaskCocoa::frameID@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = this[12];
  *a2 = result;
  a2[1].n128_u8[0] = 1;
  return result;
}

uint64_t non-virtual thunk to'WebKit::NetworkDataTaskCocoa::pageID(WebKit::NetworkDataTaskCocoa *this)
{
  return *((void *)this + 26);
}

uint64_t non-virtual thunk to'WebKit::NetworkDataTaskCocoa::storedCredentialsPolicy(WebKit::NetworkDataTaskCocoa *this)
{
  return *((unsigned __int8 *)this - 448);
}

uint64_t WebKit::NetworkSessionCocoa::shouldLogCookieInformation(WebKit::NetworkSessionCocoa *this)
{
  return *((unsigned __int8 *)this + 1186);
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  __n128 result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

void WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::read(unsigned long,unsigned long,WTF::WorkQueueBase &,WTF::Function<void ()(WebKit::NetworkCache::Data &,int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 48))
  {
    if (a3) {
      id v7 = a3;
    }
    v9[1] = 0;
    _DWORD v9[2] = 0;
    v9[0] = a3;
    char v10 = 0;
    uint64_t v8 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = 0;
    (*(void (**)(uint64_t, id *, uint64_t))(*(void *)v8 + 16))(v8, v9, a4);
    *(unsigned char *)(a1 + 48) = 1;
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v9[0]) {
  }
    }
}

void sub_198A4CDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (a9) {

  }
  _Unwind_Resume(a1);
}

unsigned int *WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  __n128 result = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)>::fromCallable<WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0>(WebKit::NetworkCache::IOChannel::write(unsigned long,WebKit::NetworkCache::Data const&,WTF::WorkQueueBase &,WTF::Function<void ()(int)> &&)::$_0)::{lambda(void *,BOOL,NSObject  {objcproto16OS_dispatch_data}*,int)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a4);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void sub_198A4CF04(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebCore::RegistrableDomain::matches(void *a1, uint64_t a2, uint64_t a3)
{
  if (!a3 && (MEMORY[0x19972E990](*a1, "nullOrigin", 10) & 1) != 0) {
    return 1;
  }
  uint64_t result = WTF::StringView::endsWith();
  if (!result) {
    return result;
  }
  if (!*a1) {
    goto LABEL_16;
  }
  int v5 = *(_DWORD *)(*a1 + 4);
  if (a3 == v5) {
    return 1;
  }
  for (int i = ~v5; ; int i = -1)
  {
    unsigned int v7 = i + a3;
    if (!BYTE4(a3)) {
      break;
    }
    if (a3 > v7)
    {
      int v8 = *(unsigned __int8 *)(a2 + v7);
      return v8 == 46;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    if (!a3) {
      return 1;
    }
  }
  if (a3 <= v7) {
    goto LABEL_15;
  }
  int v8 = *(unsigned __int16 *)(a2 + 2 * v7);
  return v8 == 46;
}

uint64_t WTF::equalLettersIgnoringASCIICaseCommon<WTF::StringImpl>(uint64_t a1, char *a2, unint64_t a3)
{
  if (a3 == *(_DWORD *)(a1 + 4))
  {
    uint64_t v3 = *(unsigned __int8 **)(a1 + 8);
    if ((*(unsigned char *)(a1 + 16) & 4) != 0)
    {
      if (a3)
      {
        if ((*v3 | 0x20) == *a2)
        {
          uint64_t v4 = 1;
          do
          {
            unint64_t v5 = v4;
            if (a3 == v4) {
              break;
            }
            int v6 = a2[v4];
            int v7 = v3[v4++] | 0x20;
          }
          while (v7 == v6);
          return v5 >= a3;
        }
        return 0;
      }
    }
    else if (a3)
    {
      if ((*(unsigned __int16 *)v3 | 0x20) == (unsigned __int16)*a2)
      {
        uint64_t v9 = 1;
        do
        {
          unint64_t v5 = v9;
          if (a3 == v9) {
            break;
          }
          int v10 = *(unsigned __int16 *)&v3[2 * v9++] | 0x20;
        }
        while (v10 == (unsigned __int16)a2[v5]);
        return v5 >= a3;
      }
      return 0;
    }
    return 1;
  }
  return 0;
}

atomic_uchar *WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::{lambda(void const*)#1}::__invoke(atomic_uchar *result)
{
  uint64_t v1 = *((void *)result + 5);
  *((void *)result + 5) = 0;
  if (v1) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v1 + 8));
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(BOOL)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_0>(WebKit::NetworkDataTaskCocoa::resume(void)::$_0)::{lambda(void *,BOOL)#1}::__invoke(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v5 = &unk_1EE9BC0E0;
  *(void *)(v5 + 8) = v4;
  *(void *)(v5 + 16) = v3;
  *(unsigned char *)(v5 + 24) = a2;
  uint64_t v7 = v5;
  WTF::callOnMainRunLoop();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void sub_198A4D194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::resume(void)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BC0E0;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::resume(void)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC0E0;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::resume(void)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 24)) {
    return WebKit::NetworkDataTask::scheduleFailure(v2, 2);
  }
  else {
    return [*(id *)(v2 + 608) resume];
  }
}

void WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 32);

  _Block_release(v3);
}

uint64_t WTF::BlockPtr<void ()(NSDictionary<NSURL *,NSNumber *> *,NSError *)>::fromCallable<WebKit::NetworkDataTaskCocoa::resume(void)::$_1>(WebKit::NetworkDataTaskCocoa::resume(void)::$_1)::{lambda(void *,NSDictionary<NSURL *,NSNumber *> *,NSError *)#1}::__invoke(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3) {
    objc_msgSend((id)objc_msgSend(a2, "objectForKeyedSubscript:", *(void *)(a1 + 40)), "integerValue");
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v4();
}

uint64_t *WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)(a1 + 32));
}

WTF::StringImpl *WTF::BlockPtr<void ()(_NSHTTPConnectionInfo *)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0)::{lambda(void *,_NSHTTPConnectionInfo *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (uint64_t *)(a1 + 32);
  if ([a2 isValid])
  {
    *(_OWORD *)uint64_t v20 = 0u;
    long long v4 = *(_OWORD *)v3;
    *(_OWORD *)uint64_t v3 = 0u;
    *(_OWORD *)uint64_t v24 = v4;
    uint64_t v5 = malloc_type_malloc(0x30uLL, 0x10E0040FAC56454uLL);
    void *v5 = MEMORY[0x1E4F14398];
    v5[1] = 50331650;
    void v5[2] = WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::{lambda(void *,NSError *,double)#1}::__invoke;
    v5[3] = &WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::descriptor;
    long long v6 = *(_OWORD *)v24;
    *(_OWORD *)uint64_t v24 = 0uLL;
    *((_OWORD *)v5 + 2) = v6;
    WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(v24);
    [a2 sendPingWithReceiveHandler:v5];
    _Block_release(v5);
    return (WTF::StringImpl *)WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)v20);
  }
  else
  {
    WebCore::createInternalError();
    std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)v20, (uint64_t *)&v16);
    std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v24, (uint64_t *)v20);
    int v25 = 1;
    WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::operator()(v3);
    if (v25 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9BC138[v25])(&v23, v24);
    }
    int v25 = -1;
    CFTypeRef v9 = cf;
    CFTypeRef cf = 0;
    if (v9) {
      CFRelease(v9);
    }
    int v10 = v21;
    unsigned int v21 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v8);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    long long v11 = v20[1];
    v20[1] = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v8);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    long long v12 = v20[0];
    v20[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v8);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    CFTypeRef v13 = v19;
    CFTypeRef v19 = 0;
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v14 = v18;
    uint64_t v18 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v8);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v15 = v17;
    id v17 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v8);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    uint64_t result = v16;
    id v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198A4D658(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, WTF::StringImpl *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef a17, uint64_t a18, WTF::StringImpl *a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,WTF::StringImpl *a25,uint64_t a26,CFTypeRef cf)
{
  uint64_t v29 = *(unsigned int *)(v27 - 48);
  if (v29 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9BC138[v29])(v27 - 129, v27 - 128);
  }
  *(_DWORD *)(v27 - 48) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a25)
  {
    if (*(_DWORD *)a25 == 2) {
      WTF::StringImpl::destroy(a25, a2);
    }
    else {
      *(_DWORD *)a25 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a19)
  {
    if (*(_DWORD *)a19 == 2) {
      WTF::StringImpl::destroy(a19, a2);
    }
    else {
      *(_DWORD *)a19 -= 2;
    }
  }
  if (a17) {
    CFRelease(a17);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A4D854(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  uint64_t v5 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  return a1;
}

void sub_198A4D8F0(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  const void *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  *(void *)a1 = v4;
  WTF::URL::URL(a1 + 8, a2 + 1);
  uint64_t v5 = a2[6];
  a2[6] = 0;
  *(void *)(a1 + 48) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 14);
  *(_WORD *)(a1 + 60) = *((_WORD *)a2 + 30);
  *(_DWORD *)(a1 + 56) = v5;
  uint64_t v6 = a2[8];
  a2[8] = 0;
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  return a1;
}

void sub_198A4D988(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *v2;
  const void *v2 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF7SecondsEN7WebCore13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t *WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer((uint64_t *)(a1 + 32));
}

uint64_t WTF::BlockPtr<void ()(NSError *,double)>::fromCallable<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1}>(WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_0::operator()(_NSHTTPConnectionInfo *)::{lambda(NSError *,double)#1})::{lambda(void *,NSError *,double)#1}::__invoke(uint64_t a1, double a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = a2;
  int v5 = 0;
  WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::operator()((uint64_t *)(a1 + 32));
  return ((uint64_t (*)(char *, double *))off_1EE9BC138[v5])(&v3, v4);
}

void sub_198A4DB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9BC138[a24])(&a13, &a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(void)>::fromCallable<WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::saveCookies(NSHTTPCookieStorage *,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *)#1}::__invoke(WTF::RunLoop *a1)
{
  uint64_t v1 = (uint64_t *)((char *)a1 + 32);
  WTF::RunLoop::main(a1);
  WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v3, v1);
  WTF::RunLoop::dispatch();
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_198A4DBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

WebCore::ResourceResponse *WebCore::ResourceResponse::ResourceResponse(WebCore::ResourceResponse *this, NSURLResponse *a2)
{
  *(void *)(WebCore::ResourceResponseBase::ResourceResponseBase(this) + 240) = a2;
  if (a2) {
    CFRetain(a2);
  }
  *((unsigned char *)this + 248) = 0;
  *((unsigned char *)this + 138) = *((unsigned char *)this + 138) & 0xF0 | (a2 == 0);
  return this;
}

void sub_198A4DC80(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase::~ResourceResponseBase(v2, a2);
  _Unwind_Resume(a1);
}

void sub_198A4DF30(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  CFTypeRef v69 = cf;
  CFTypeRef cf = 0;
  if (v69) {
    CFRelease(v69);
  }
  CFTypeRef v70 = a64;
  a64 = 0;
  if (v70) {
    CFRelease(v70);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)&a12, a2);
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  if (v67) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v67 + 8));
  }
  CFRelease(v65);
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<processServerTrustEvaluation(WebKit::NetworkSessionCocoa &,WebKit::SessionWrapper &,NSURLAuthenticationChallenge *,WebKit::NegotiatedLegacyTLS,unsigned long long,WebKit::NetworkDataTaskCocoa *,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&)::{lambda(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)#1},void,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&,WebCore::Credential const>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9BC1B8;
  uint64_t v2 = (const void *)a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<processServerTrustEvaluation(WebKit::NetworkSessionCocoa &,WebKit::SessionWrapper &,NSURLAuthenticationChallenge *,WebKit::NegotiatedLegacyTLS,unsigned long long,WebKit::NetworkDataTaskCocoa *,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&)::{lambda(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)#1},void,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&,WebCore::Credential const>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC1B8;
  uint64_t v3 = (const void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<processServerTrustEvaluation(WebKit::NetworkSessionCocoa &,WebKit::SessionWrapper &,NSURLAuthenticationChallenge *,WebKit::NegotiatedLegacyTLS,unsigned long long,WebKit::NetworkDataTaskCocoa *,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&)::{lambda(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)#1},void,WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)> &&,WebCore::Credential const>::call(uint64_t a1, int a2, WebCore::Credential *this)
{
  uint64_t v4 = (uint64_t *)(a1 + 8);
  switch(a2)
  {
    case 0:
      if (WebCore::Credential::nsCredential(this)) {
        goto LABEL_3;
      }
      [MEMORY[0x1E4F18D88] credentialForTrust:*(void *)(a1 + 16)];
      uint64_t v6 = v4;
      break;
    default:
LABEL_3:
      WebCore::Credential::nsCredential(this);
      uint64_t v6 = v4;
      break;
  }

  return WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::operator()(v6);
}

uint64_t WTF::CompletionHandler<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A4E2C0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>,void,NSURLSessionAuthChallengeDisposition,NSURLCredential *>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BC1E0;
  _Block_release(*(const void **)(a1 + 8));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>,void,NSURLSessionAuthChallengeDisposition,NSURLCredential *>::~CallableWrapper(const void **a1)
{
  *a1 = &unk_1EE9BC1E0;
  _Block_release(a1[1]);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::BlockPtr<void ()(NSURLSessionAuthChallengeDisposition,NSURLCredential *)>,void,NSURLSessionAuthChallengeDisposition,NSURLCredential *>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t ___ZL23extractResolutionReportP7NSError_block_invoke(uint64_t a1, nw_interface_t interface)
{
  v11[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 32);
  v10[0] = @"type";
  nw_interface_type_t type = nw_interface_get_type(interface);
  if (type > nw_interface_type_loopback) {
    int v5 = &stru_1EEA10550;
  }
  else {
    int v5 = off_1E5811C30[type];
  }
  v11[0] = v5;
  v10[1] = @"name";
  uint64_t v6 = NSString;
  name = nw_interface_get_name(interface);
  if (name) {
    int v8 = name;
  }
  else {
    int v8 = "";
  }
  v11[1] = [v6 stringWithUTF8String:v8];
  objc_msgSend(v3, "addObject:", objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v11, v10, 2));
  return 1;
}

CFTypeRef __copy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void __destroy_helper_block_e8_32c38_ZTSN3WTF9RetainPtrI14NSMutableArrayEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    CFRelease(v2);
  }
}

uint64_t WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (unsigned int **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (unsigned int *)-1)
      {
        int v5 = *v4;
        uint64_t *v4 = 0;
        if (v5)
        {
          if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v5);
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WTF::StringImpl **)(a1 + 8);
    do
    {
      int v5 = *(v4 - 1);
      if (v5 != (WTF::StringImpl *)-1)
      {
        a2 = *v4;
        uint64_t *v4 = 0;
        if (a2)
        {
          std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v4, a2);
          int v5 = *(v4 - 1);
        }
        *(v4 - 1) = 0;
        if (v5)
        {
          if (*(_DWORD *)v5 == 2) {
            WTF::StringImpl::destroy(v5, a2);
          }
          else {
            *(_DWORD *)v5 -= 2;
          }
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (const void **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (const void *)-1)
      {
        int v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          CFRelease(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*(void *)v4 != -1)
      {
        uint64_t v5 = *(unsigned int **)(v4 + 8);
        *(void *)(v4 + 8) = 0;
        if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
        }
        uint64_t v6 = *(WTF::StringImpl **)v4;
        *(void *)uint64_t v4 = 0;
        if (v6)
        {
          if (*(_DWORD *)v6 == 2) {
            WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
          }
          else {
            *(_DWORD *)v6 -= 2;
          }
        }
      }
      v4 += 16;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (WebKit::SessionSet **)(a1 + 8);
    do
    {
      if (*(v4 - 1) != (WebKit::SessionSet *)-1)
      {
        uint64_t v5 = *v4;
        uint64_t *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::SessionSet>::deref(v5, a2);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

void std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[5];
    if (v3) {
      WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
    }
    uint64_t v4 = a2[4];
    if (v4) {
      WTF::fastFree((WTF *)(v4 - 16), a2);
    }
    uint64_t v5 = a2[3];
    if (v5) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, a2);
    }
    uint64_t v6 = (const void *)a2[2];
    a2[2] = 0;
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = (const void *)a2[1];
    a2[1] = 0;
    if (v7) {
      CFRelease(v7);
    }
    int v8 = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)a2, a2);
    WTF::fastFree((WTF *)v8, v9);
  }
}

uint64_t WebCore::SecurityOriginData::SecurityOriginData(uint64_t result, _DWORD **a2, _DWORD **a3, int a4)
{
  uint64_t v4 = *a2;
  if (*a2) {
    *v4 += 2;
  }
  uint64_t v5 = *a3;
  if (*a3) {
    *v5 += 2;
  }
  *(void *)CFTypeRef result = v4;
  *(void *)(result + 8) = v5;
  *(_DWORD *)(result + 16) = a4 & 0xFFFFFF;
  *(_DWORD *)(result + 24) = 0;
  if (v4 == (_DWORD *)-1)
  {
    CFTypeRef result = 58;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::createChallengeCompletionHandler(WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &&,PAL::SessionID,WebCore::AuthenticationChallenge const&,WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,PAL::SessionID::Credential const&)> &&)::$_0,void,WTF::CompletionHandler,PAL::SessionID::Credential const>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9BC248;
  uint64_t v3 = (WTF::StringImpl *)a1[59];
  a1[59] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (const void *)a1[57];
  a1[57] = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)a1[56];
  a1[56] = 0;
  if (v5) {
    CFRelease(v5);
  }
  WebCore::AuthenticationChallengeBase::~AuthenticationChallengeBase((WebCore::AuthenticationChallengeBase *)(a1 + 4), a2);
  uint64_t v6 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6 + 32);
    (*(void (**)(unsigned int *))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::createChallengeCompletionHandler(WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &&,PAL::SessionID,WebCore::AuthenticationChallenge const&,WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,PAL::SessionID::Credential const&)> &&)::$_0,void,WTF::CompletionHandler,PAL::SessionID::Credential const>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v2 = (WTF *)WTF::Detail::CallableWrapper<WebKit::createChallengeCompletionHandler(WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &&,PAL::SessionID,WebCore::AuthenticationChallenge const&,WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,PAL::SessionID::Credential const&)> &&)::$_0,void,WTF::CompletionHandler,PAL::SessionID::Credential const>::~CallableWrapper(a1, a2);

  return WTF::fastFree(v2, v3);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::createChallengeCompletionHandler(WTF::Ref<WebKit::NetworkProcess,WTF::RawPtrTraits<WebKit::NetworkProcess>,WTF::DefaultRefDerefTraits<WebKit::NetworkProcess>> &&,PAL::SessionID,WebCore::AuthenticationChallenge const&,WTF::String const&,unsigned long long,WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,PAL::SessionID::Credential const&)> &&)::$_0,void,WTF::CompletionHandler,PAL::SessionID::Credential const>::call(uint64_t *a1, int a2, WebCore::CredentialBase *this)
{
  uint64_t v5 = a1 + 1;
  if (WebCore::CredentialBase::persistence(this) == 1
    && (uint64_t v6 = (WebCore::ProtectionSpaceBase *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(a1 + 4)),
        WebCore::ProtectionSpaceBase::isPasswordBased(v6)))
  {
    WebCore::CredentialBase::user(this);
    WebCore::CredentialBase::password(this);
    WebCore::CredentialBase::CredentialBase();
    CFTypeRef cf = 0;
    WTF::URL::URL((WTF::URL *)&v20);
    uint64_t v7 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)(a1 + 4));
    if (WebCore::ResourceResponseBase::httpStatusCode(v7) == 401)
    {
      int v8 = (WebCore::ResourceResponseBase *)WebCore::AuthenticationChallengeBase::failureResponse((WebCore::AuthenticationChallengeBase *)(a1 + 4));
      uint64_t v9 = WebCore::ResourceResponseBase::url(v8);
      WTF::String::operator=((uint64_t *)&v20, (WTF::StringImpl **)v9);
      long long v10 = *(_OWORD *)(v9 + 8);
      long long v22 = *(_OWORD *)(v9 + 24);
      long long v21 = v10;
    }
    uint64_t v11 = a1[2];
    uint64_t v26 = a1[3];
    uint64_t v12 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(v11 + 232), &v26);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = (const WebCore::ProtectionSpace *)WebCore::AuthenticationChallengeBase::protectionSpace((WebCore::AuthenticationChallengeBase *)(a1 + 4));
      WebCore::CredentialStorage::set((WebCore::CredentialStorage *)(v13 + 96), (const WTF::String *)(a1 + 59), (const WebCore::Credential *)&v23, v14, (const WTF::URL *)&v20);
    }
    WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(v5);
    id v16 = v20;
    uint64_t v20 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    CFTypeRef v18 = cf;
    CFTypeRef cf = 0;
    if (v18) {
      CFRelease(v18);
    }
    CFTypeRef v19 = v24;
    uint64_t v24 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, v15);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    CFTypeRef result = v23;
    char v23 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    return (WTF::StringImpl *)WTF::CompletionHandler<void ()(WebKit::AuthenticationChallengeDisposition,WebCore::Credential const&)>::operator()(v5);
  }
  return result;
}

void sub_198A4EC14(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF::StringImpl *a14, WTF::StringImpl *a15, uint64_t a16, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a15)
  {
    if (*(_DWORD *)a15 == 2) {
      WTF::StringImpl::destroy(a15, a2);
    }
    else {
      *(_DWORD *)a15 -= 2;
    }
  }
  if (a14)
  {
    if (*(_DWORD *)a14 == 2) {
      WTF::StringImpl::destroy(a14, a2);
    }
    else {
      *(_DWORD *)a14 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

WebCore::AuthenticationChallengeBase *WebCore::AuthenticationChallengeBase::AuthenticationChallengeBase(WebCore::AuthenticationChallengeBase *this, const WebCore::AuthenticationChallengeBase *a2)
{
  *(unsigned char *)this = *(unsigned char *)a2;
  uint64_t v4 = (_DWORD *)*((void *)a2 + 1);
  if (v4) {
    *v4 += 2;
  }
  *((void *)this + 1) = v4;
  uint64_t v5 = (_DWORD *)*((void *)a2 + 2);
  if (v5) {
    *v5 += 2;
  }
  *((void *)this + 2) = v5;
  int v6 = *((_DWORD *)a2 + 6);
  *(_DWORD *)((char *)this + 27) = *(_DWORD *)((char *)a2 + 27);
  *((_DWORD *)this + 6) = v6;
  uint64_t v7 = (const void *)*((void *)a2 + 4);
  *((void *)this + 4) = v7;
  if (v7) {
    CFRetain(v7);
  }
  int v8 = (_DWORD *)*((void *)a2 + 5);
  if (v8) {
    *v8 += 2;
  }
  *((void *)this + 5) = v8;
  uint64_t v9 = (_DWORD *)*((void *)a2 + 6);
  if (v9) {
    *v9 += 2;
  }
  *((void *)this + 6) = v9;
  *((unsigned char *)this + 56) = *((unsigned char *)a2 + 56);
  long long v10 = (const void *)*((void *)a2 + 8);
  *((void *)this + 8) = v10;
  if (v10) {
    CFRetain(v10);
  }
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::AuthenticationChallengeBase *)((char *)this + 80), (const WebCore::AuthenticationChallengeBase *)((char *)a2 + 80));
  uint64_t v11 = (const void *)*((void *)a2 + 40);
  *((void *)this + 40) = v11;
  if (v11) {
    CFRetain(v11);
  }
  *((unsigned char *)this + 328) = *((unsigned char *)a2 + 328);
  WebCore::ResourceError::ResourceError((uint64_t)this + 336, (uint64_t)a2 + 336);
  return this;
}

void sub_198A4EDB8(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  int v6 = (const void *)v2[8];
  v2[8] = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (WTF::StringImpl *)v2[6];
  v2[6] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v5);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  int v8 = (WTF::StringImpl *)v2[5];
  v2[5] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v5);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  uint64_t v9 = (const void *)v2[4];
  v2[4] = 0;
  if (v9) {
    CFRelease(v9);
  }
  long long v10 = (WTF::StringImpl *)v2[2];
  v2[2] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v5);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v11 = (WTF::StringImpl *)v2[1];
  v2[1] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, v5);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WebKit::NetworkLoadParameters *WebKit::NetworkLoadParameters::NetworkLoadParameters(WebKit::NetworkLoadParameters *this)
{
  *((unsigned char *)this + 84) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(void *)((char *)this + 45) = 0;
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)((char *)this + 88));
  *((_DWORD *)this + 72) = 0;
  *((_WORD *)this + 146) = 1;
  *((unsigned char *)this + 294) = 0;
  *((unsigned char *)this + 304) = 0;
  *((unsigned char *)this + 2880) = 0;
  *((unsigned char *)this + 2896) = 0;
  *((unsigned char *)this + 2928) = 0;
  *((unsigned char *)this + 2952) = 0;
  *((unsigned char *)this + 2920) = 0;
  *(_OWORD *)((char *)this + 2904) = 0u;
  *((_DWORD *)this + 740) = 16777472;
  *((_WORD *)this + 1482) = 0;
  return this;
}

void sub_198A4EF34(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  uint64_t v4 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  uint64_t v5 = *(void *)(v2 + 32);
  *(void *)(v2 + 32) = 0;
  if (v5) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v5, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::willPerformHTTPRedirection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(a4);
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didReceiveChallenge(void *a1, WebCore::AuthenticationChallengeBase *a2, char a3, uint64_t *a4)
{
  int v8 = (uint64_t *)(a1[2] + 208);
  v13[0] = "AuthenticationManager";
  v13[1] = 22;
  uint64_t v9 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::NetworkProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::NetworkProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>(v8, (WTF::ASCIILiteralHash *)v13);
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];

  return WebKit::AuthenticationManager::didReceiveAuthenticationChallenge((uint64_t)v9, v10, v11, 0, a2, a3, a4);
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return WTF::CompletionHandler<void ()(WebCore::PolicyAction)>::operator()(a5);
}

WTF::StringImpl *WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didReceiveData(uint64_t *a1)
{
  WebCore::SharedBufferBuilder::ensureBuffer((WebCore::SharedBufferBuilder *)(a1 + 13));
  CFTypeRef result = (WTF::StringImpl *)WebCore::FragmentedSharedBuffer::append();
  uint64_t v3 = a1[13];
  if (v3 && *(void *)(v3 + 48) > (unint64_t)a1[10])
  {
    MEMORY[0x199731570](&v13, [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F289A0] code:-1103 userInfo:0]);
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v10);
    WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didCompleteWithError(a1, (uint64_t)&v13);
    uint64_t v5 = v12;
    uint64_t v12 = 0;
    if (v5) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v5);
    }
    int v6 = v11;
    uint64_t v11 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2) {
        WTF::StringImpl::destroy(v6, v4);
      }
      else {
        *(_DWORD *)v6 -= 2;
      }
    }
    uint64_t v7 = v16;
    id v16 = 0;
    if (v7) {
      CFRelease(v7);
    }
    int v8 = v15;
    uint64_t v15 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v4);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v4);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    CFTypeRef result = v13;
    uint64_t v13 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void sub_198A4F148(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,uint64_t a23,WebCore::AdditionalNetworkLoadMetricsForWebInspector *a24)
{
  if (a24) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(a24);
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  uint64_t v26 = *(const void **)(v24 - 32);
  *(void *)(v24 - 32) = 0;
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v27 = *(WTF::StringImpl **)(v24 - 48);
  *(void *)(v24 - 48) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, a2);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t v28 = *(WTF::StringImpl **)(v24 - 88);
  *(void *)(v24 - 88) = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2) {
      WTF::StringImpl::destroy(v28, a2);
    }
    else {
      *(_DWORD *)v28 -= 2;
    }
  }
  uint64_t v29 = *(WTF::StringImpl **)(v24 - 96);
  *(void *)(v24 - 96) = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2) {
      WTF::StringImpl::destroy(v29, a2);
    }
    else {
      *(_DWORD *)v29 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didCompleteWithError(uint64_t *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 60))
  {
    WebCore::ResourceError::ResourceError((uint64_t)v8, a2);
    int v9 = 0;
    CFTypeRef result = (unsigned int *)WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>> &&)>::operator()(a1 + 12);
    if (v9 != -1)
    {
      CFTypeRef result = (unsigned int *)((uint64_t (*)(unsigned int **, void *))off_1EE9BC2E8[v9])(&v6, v8);
      if (!a1) {
        return result;
      }
      return (unsigned int *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
    }
LABEL_8:
    if (!a1) {
      return result;
    }
    return (unsigned int *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
  }
  WebCore::SharedBufferBuilder::take((uint64_t *)&v6, (WebCore::SharedBufferBuilder *)(a1 + 13));
  uint64_t v4 = (uint64_t)v6;
  int v6 = 0;
  v8[0] = v4;
  int v9 = 1;
  WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>> &&)>::operator()(a1 + 12);
  if (v9 != -1) {
    ((void (*)(char *, void *))off_1EE9BC2E8[v9])(&v7, v8);
  }
  int v9 = -1;
  CFTypeRef result = v6;
  int v6 = 0;
  if (!result) {
    goto LABEL_8;
  }
  CFTypeRef result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v5);
  if (!a1) {
    return result;
  }
  return (unsigned int *)(*(uint64_t (**)(uint64_t *))(*a1 + 112))(a1);
}

void sub_198A4F34C(_Unwind_Exception *exception_object, void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24)
{
  if (a24 != -1) {
    ((void (*)(char *, char *))off_1EE9BC2E8[a24])(&a13, &a14);
  }
  a24 = -1;
  if (a9) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(a9, a2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WebKit::NetworkDataTaskClient::shouldCaptureExtraNetworkLoadMetrics(WebKit::NetworkDataTaskClient *this)
{
  return 0;
}

uint64_t WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::~Client(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9BC270;
  uint64_t v3 = *(unsigned int **)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
  }
  int v6 = *(WTF::StringImpl **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  char v7 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7 + 32, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7 + 32);
    (*(void (**)(unsigned int *))(*(void *)v7 + 8))(v7);
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);
  return a1;
}

void WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::~Client(uint64_t a1, void *a2)
{
  WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::~Client(a1, a2);

  JUMPOUT(0x199740C10);
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v5 = *((void *)v1 + 3);
    *((void *)v1 + 3) = 0;
    BOOL v6 = v9 == 0;
  }
  else
  {
    uint64_t v5 = 0;
    BOOL v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1) {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (!v4)
  {
    uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9BC678;
    *(void *)(v8 + 8) = v1;
    *(void *)(v8 + 16) = v5;
    *(unsigned char *)(v8 + 24) = v6;
    uint64_t v10 = (atomic_uchar *)v8;
    WTF::ensureOnMainThread();
    this = v10;
    if (v10) {
      return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
    }
  }
  return this;
}

void sub_198A4F638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

unsigned int **WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(unsigned int **a1, void *a2)
{
  if (*a1)
  {
    *((void *)*a1 + 1) = 0;
    uint64_t v3 = *a1;
    *a1 = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *a1 = 0;
  }
  return a1;
}

uint64_t WTF::CompletionHandler<void ()(WebCore::PolicyAction)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  char v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A4F7DC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WTF::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>> &&)>::operator()(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  char v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A4F890(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (const void *)*((void *)a2 + 8);
  *((void *)a2 + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  BOOL v5 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)a2;
  *(void *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore13ResourceErrorEN3WTF3RefINS8_22FragmentedSharedBufferENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJS9_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

void WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::completeWithBlockedError(uint64_t a1)
{
  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v13, (const String *)(a1 + 24), 0);
  CFTypeRef cf = 0;
  WebKit::blockedError((WebKit *)v13, (uint64_t)&v15);
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)v10);
  WebKit::NetworkSessionCocoa::loadImageForDecoding(WebCore::ResourceRequest &&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WebCore::ResourceRequest &&::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WebCore::ResourceRequest &&::SupportsObjectIdentifierNullState)1>,unsigned long,WebCore::ResourceRequest &&::CompletionHandler<void ()(std::variant<WebCore::ResourceError,WebCore::ResourceRequest &&::Ref<WebCore::FragmentedSharedBuffer,WebCore::ResourceRequest &&::RawPtrTraits<WebCore::ResourceRequest &&::Ref>,WebCore::ResourceRequest &&::DefaultRefDerefTraits<WebCore::ResourceRequest &&::Ref>>> &&)> &&)::Client::didCompleteWithError((uint64_t *)a1, (uint64_t)&v15);
  uint64_t v3 = v12;
  uint64_t v12 = 0;
  if (v3) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v3);
  }
  uint64_t v4 = v11;
  uint64_t v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  BOOL v5 = v18;
  CFTypeRef v18 = 0;
  if (v5) {
    CFRelease(v5);
  }
  BOOL v6 = v17;
  id v17 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  int v7 = v16;
  id v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t v8 = v15;
  uint64_t v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v2);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v13);
}

void sub_198A4FAB8(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,WebCore::AdditionalNetworkLoadMetricsForWebInspector *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,CFTypeRef cf)
{
  if (a25) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(a25);
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  uint64_t v52 = *(const void **)(v50 - 32);
  *(void *)(v50 - 32) = 0;
  if (v52) {
    CFRelease(v52);
  }
  uint64_t v53 = *(WTF::StringImpl **)(v50 - 48);
  *(void *)(v50 - 48) = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2) {
      WTF::StringImpl::destroy(v53, a2);
    }
    else {
      *(_DWORD *)v53 -= 2;
    }
  }
  int v54 = *(WTF::StringImpl **)(v50 - 88);
  *(void *)(v50 - 88) = 0;
  if (v54)
  {
    if (*(_DWORD *)v54 == 2) {
      WTF::StringImpl::destroy(v54, a2);
    }
    else {
      *(_DWORD *)v54 -= 2;
    }
  }
  uint64_t v55 = *(WTF::StringImpl **)(v50 - 96);
  *(void *)(v50 - 96) = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2) {
      WTF::StringImpl::destroy(v55, a2);
    }
    else {
      *(_DWORD *)v55 -= 2;
    }
  }
  CFTypeRef v56 = cf;
  CFTypeRef cf = 0;
  if (v56) {
    CFRelease(v56);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a26);
  _Unwind_Resume(a1);
}

uint64_t std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *(atomic_uchar ***)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v4);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);

  return WTF::fastFree((WTF *)a1, v6);
}

void WebKit::NetworkSessionCocoa::BlobDataTaskClient::~BlobDataTaskClient(WebKit::NetworkSessionCocoa::BlobDataTaskClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  atomic_uchar **v4;
  uint64_t v5;
  void *v6;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (atomic_uchar **)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::Connection,(WTF::DestructionThread)2>(*v4);
  }
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
  }
  WTF::WeakPtrFactory<WebKit::NetworkDataTaskClient,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v6);
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::deallocateTable(WebKit::SessionSet **a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      uint64_t v5 = *v4;
      if (*v4 != (WebKit::SessionSet *)-1)
      {
        WTF::StringImpl *v4 = 0;
        if (v5) {
          WTF::RefCounted<WebKit::SessionSet>::deref(v5, a2);
        }
      }
      ++v4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

Class initAnalyticsWorkspace(void)
{
  if ((byte_1E93CF508 & 1) == 0)
  {
    qword_1E93CF558 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomAnalytics.framework/SymptomAnalytics", 2);
    byte_1E93CF508 = 1;
  }
  Class result = objc_getClass("AnalyticsWorkspace");
  qword_1E93CF570 = (uint64_t)result;
  _MergedGlobals_28 = AnalyticsWorkspaceFunction;
  return result;
}

uint64_t AnalyticsWorkspaceFunction(void)
{
  return qword_1E93CF570;
}

Class initUsageFeed(void)
{
  if ((byte_1E93CF509 & 1) == 0)
  {
    qword_1E93CF560 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/Symptoms.framework/Frameworks/SymptomPresentationFeed.framework/SymptomPresentationFeed", 2);
    byte_1E93CF509 = 1;
  }
  Class result = objc_getClass("UsageFeed");
  qword_1E93CF578 = (uint64_t)result;
  off_1EB352F90 = UsageFeedFunction;
  return result;
}

uint64_t UsageFeedFunction(void)
{
  return qword_1E93CF578;
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t WTF::BlockPtr<void ()(NSDictionary *,NSError *)>::fromCallable<WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::NetworkSessionCocoa::removeNetworkWebsiteData(std::optional<WTF::WallTime>,std::optional<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)::{lambda(void *,NSDictionary *,NSError *)#1}::__invoke(uint64_t a1)
{
  return WTF::CompletionHandler<void ()(void)>::operator()((uint64_t *)(a1 + 32));
}

WTF::StringImpl **WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::add<WebCore::RegistrableDomain>(uint64_t a1, uint64_t *a2, WTF::ASCIICaseInsensitiveHash **a3, WTF::StringImpl **a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = WTF::ASCIICaseInsensitiveHash::hash(*a3, (const WTF::StringImpl *)a2) & v9;
  uint64_t v11 = (WTF::StringImpl **)(v8 + 16 * v10);
  if ((WTF::equal(*v11, 0, v12) & 1) == 0)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    do
    {
      if (*v11 == (WTF::StringImpl *)-1)
      {
        uint64_t v14 = v11;
      }
      else
      {
        uint64_t result = (WTF::StringImpl **)WTF::equalIgnoringASCIICase(*v11, *a3, v13);
        if (result)
        {
          uint64_t v25 = *a2;
          if (*a2) {
            uint64_t v26 = *(unsigned int *)(v25 - 4);
          }
          else {
            uint64_t v26 = 0;
          }
          char v28 = 0;
          uint64_t v27 = v25 + 16 * v26;
          goto LABEL_31;
        }
      }
      unsigned int v10 = (v10 + v15) & v9;
      uint64_t v11 = (WTF::StringImpl **)(v8 + 16 * v10);
      ++v15;
    }
    while (!WTF::equal(*v11, 0, v13));
    if (v14)
    {
      WTF::StringImpl *v14 = 0;
      v14[1] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v11 = v14;
    }
  }
  WTF::String::operator=((uint64_t *)v11, (uint64_t *)a3);
  CFTypeRef v18 = *a4;
  *a4 = 0;
  uint64_t result = (WTF::StringImpl **)v11[1];
  v11[1] = v18;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl **)WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v21 = *a2;
  if (*a2) {
    int v22 = *(_DWORD *)(v21 - 12);
  }
  else {
    int v22 = 0;
  }
  uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
  unint64_t v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 <= 2 * v23)
    {
LABEL_25:
      uint64_t result = WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(a2, v11);
      uint64_t v11 = result;
      uint64_t v21 = *a2;
      if (*a2) {
        unint64_t v24 = *(unsigned int *)(v21 - 4);
      }
      else {
        unint64_t v24 = 0;
      }
    }
  }
  else if (3 * v24 <= 4 * v23)
  {
    goto LABEL_25;
  }
  uint64_t v27 = v21 + 16 * v24;
  char v28 = 1;
LABEL_31:
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v27;
  *(unsigned char *)(a1 + 16) = v28;
  return result;
}

WTF::StringImpl **WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WebCore::RegistrableDomain>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
    if (v4)
    {
      unsigned int v6 = v4 << (6 * v5 >= (2 * v4));
      goto LABEL_6;
    }
  }
  else
  {
    int v4 = 0;
    int v5 = 0;
  }
  unsigned int v6 = 8;
LABEL_6:
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(16 * v6 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = v6;
  *(_DWORD *)(*a1 - 8) = v6 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (WTF::ASCIICaseInsensitiveHash **)(v3 + 16 * v10);
      if (*v12 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v12, 0, v9))
        {
          uint64_t v13 = v3 + 16 * v10;
          uint64_t v14 = *(WTF::StringImpl **)(v13 + 8);
          *(void *)(v13 + 8) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v8);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
          uint64_t v23 = *v12;
          *uint64_t v12 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v8);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
        }
        else
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v17 = WTF::ASCIICaseInsensitiveHash::hash(*v12, v8);
          int v18 = 0;
          do
          {
            uint64_t v19 = v17 & v16;
            int v20 = WTF::equal(*(WTF **)(v15 + 16 * v19), 0, v9);
            int v17 = ++v18 + v19;
          }
          while (!v20);
          uint64_t v21 = (WTF::StringImpl **)(v15 + 16 * v19);
          int v22 = v21[1];
          v21[1] = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 2) {
              WTF::StringImpl::destroy(v22, v8);
            }
            else {
              *(_DWORD *)v22 -= 2;
            }
          }
          unint64_t v24 = *v21;
          WTF::StringImpl *v21 = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2) {
              WTF::StringImpl::destroy(v24, v8);
            }
            else {
              *(_DWORD *)v24 -= 2;
            }
          }
          uint64_t v25 = *v12;
          *uint64_t v12 = 0;
          WTF::StringImpl *v21 = v25;
          uint64_t v26 = v3 + 16 * v10;
          uint64_t v27 = *(WTF::StringImpl **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          v21[1] = v27;
          char v28 = *(WTF::StringImpl **)(v26 + 8);
          *(void *)(v26 + 8) = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v8);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v29 = *v12;
          *uint64_t v12 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2) {
              WTF::StringImpl::destroy(v29, v8);
            }
            else {
              *(_DWORD *)v29 -= 2;
            }
          }
          if (v12 == a2) {
            uint64_t v11 = v21;
          }
        }
      }
      ++v10;
    }
    while (v10 != v4);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v3) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v3 - 16), v8);
  return v11;
}

uint64_t WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0::$_0(uint64_t a1, uint64_t a2)
{
  WTF::URL::URL(a1, (uint64_t *)a2);
  WTF::URL::URL(v4 + 40, (uint64_t *)(a2 + 40));
  *(unsigned char *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*(unsigned char *)(a2 + 88))
  {
    uint64_t v10 = *(void *)(a2 + 80);
    *(void *)(a2 + 80) = 0;
    *(void *)(a1 + 80) = v10;
    *(unsigned char *)(a1 + 88) = 1;
  }
  long long v5 = *(_OWORD *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = v6;
  *(_OWORD *)(a1 + 96) = v5;
  *(unsigned char *)(a1 + 128) = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    uint64_t v11 = *(void *)(a2 + 120);
    *(void *)(a2 + 120) = 0;
    *(void *)(a1 + 120) = v11;
    *(unsigned char *)(a1 + 128) = 1;
  }
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = v7;
  objc_moveWeak((id *)(a1 + 144), (id *)(a2 + 144));
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 152) = v8;
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

void sub_198A50380(_Unwind_Exception *a1, WTF::StringImpl *a2)
{
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](v5, a2);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](v4, v7);
  int v9 = *v3;
  unsigned int *v3 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = *v2;
  WTF::StringImpl *v2 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v8);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  _Unwind_Resume(a1);
}

WTF::StringImpl *WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::{lambda(void const*)#1}::__invoke(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  objc_destroyWeak((id *)(a1 + 176));
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](a1 + 152, v4);
  std::__optional_destruct_base<WebCore::RegistrableDomain,false>::~__optional_destruct_base[abi:sn180100](a1 + 112, v5);
  uint64_t v7 = *(WTF::StringImpl **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v6);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  uint64_t result = *(WTF::StringImpl **)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::BlockPtr<NSArray<NSHTTPCookie *> * ()(NSArray<NSHTTPCookie *> *)>::fromCallable<WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0>(WebKit::NetworkTaskCocoa::applyCookiePolicyForThirdPartyCloaking(WebCore::ResourceRequest const&)::$_0)::{lambda(void *,NSArray<NSHTTPCookie *> *)#1}::__invoke(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 176));
  if (!WeakRetained) {
    return (uint64_t)a2;
  }
  uint64_t v7 = WeakRetained;
  if (![a2 count])
  {
LABEL_51:
    CFRelease(v7);
    return (uint64_t)a2;
  }
  uint64_t v8 = objc_msgSend((id)objc_msgSend(v7, "_resolvedCNAMEChain"), "lastObject");
  if (!v8)
  {
    unsigned int v48 = 0;
LABEL_12:
    if (*(unsigned char *)(a1 + 160)) {
      WTF::String::operator=((uint64_t *)&v48, (WTF::StringImpl **)(a1 + 152));
    }
    goto LABEL_14;
  }
  MEMORY[0x19972EAD0](v50);
  WebKit::NetworkTaskCocoa::lastCNAMEDomain(&v48, v50);
  int v9 = v50[0];
  v50[0] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  if (!v48 || !*((_DWORD *)v48 + 1) || MEMORY[0x19972E990]()) {
    goto LABEL_12;
  }
LABEL_14:
  if (v48 && *((_DWORD *)v48 + 1) && !MEMORY[0x19972E990]())
  {
    uint64_t v12 = WTF::URL::host((WTF::URL *)(a1 + 72));
    if ((WebCore::RegistrableDomain::matches(&v48, v12, v13) & 1) == 0
      && (!*(unsigned char *)(a1 + 120) || (WTF::equal(v48, *(const WTF::StringImpl **)(a1 + 112), v14) & 1) == 0))
    {
      uint64_t v15 = WebKit::cookiesByCappingExpiry(a2);
      a2 = v15;
      if (*(unsigned char *)(a1 + 192))
      {
        long long v46 = 0u;
        long long v47 = 0u;
        *(_OWORD *)uint64_t v44 = 0u;
        long long v45 = 0u;
        uint64_t v16 = [v15 countByEnumeratingWithState:v44 objects:v50 count:16];
        if (v16)
        {
          uint64_t v17 = *(void *)v45;
          do
          {
            for (uint64_t i = 0; i != v16; ++i)
            {
              if (*(void *)v45 != v17) {
                objc_enumerationMutation(a2);
              }
              uint64_t v19 = qword_1EB357E70;
              if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
              {
                uint64_t v20 = [*((id *)v44[1] + i) name];
                *(_DWORD *)long long buf = 138543362;
                uint64_t v52 = v20;
                _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_INFO, "Capped the expiry of third-party CNAME cloaked cookie named %{public}@.", buf, 0xCu);
              }
            }
            uint64_t v16 = [a2 countByEnumeratingWithState:v44 objects:v50 count:16];
          }
          while (v16);
        }
      }
    }
    goto LABEL_47;
  }
  if (!*(unsigned char *)(a1 + 148)) {
    goto LABEL_47;
  }
  MEMORY[0x19972EAD0](v50, objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v7, "_incompleteTaskMetrics"), "transactionMetrics"), "lastObject"), "remoteAddress"));
  WebCore::IPAddress::fromString((uint64_t *)buf, (WebCore::IPAddress *)v50, v10);
  uint64_t v11 = v50[0];
  v50[0] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v8);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  if (!v54) {
    goto LABEL_47;
  }
  uint64_t v21 = (const char *)*(unsigned __int8 *)(a1 + 148);
  if (!*(unsigned char *)(a1 + 148))
  {
    __break(1u);
    goto LABEL_83;
  }
  unsigned int v22 = WebCore::IPAddress::matchingNetMaskLength((WebCore::IPAddress *)buf, (const WebCore::IPAddress *)(a1 + 128));
  if (v53 == 1) {
    unsigned int v23 = 16;
  }
  else {
    unsigned int v23 = 64;
  }
  if (v22 >= v23) {
    goto LABEL_47;
  }
  uint64_t v24 = WTF::URL::host((WTF::URL *)(a1 + 32));
  uint64_t v2 = v24;
  uint64_t v3 = v8;
  uint64_t v21 = "accounts.google.com";
  if ((char *)v24 == "accounts.google.com" || v8 != 19)
  {
    if ((char *)v24 != "accounts.google.com" || v8 != 19) {
      goto LABEL_55;
    }
LABEL_47:
    uint64_t v26 = v48;
    unsigned int v48 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    goto LABEL_51;
  }
  if ((v8 & 0xFF00000000) == 0)
  {
LABEL_83:
    if (*(_WORD *)v2 == 97)
    {
      uint16x8_t v39 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v2 + 2), (int16x8_t)xmmword_1994F60B0);
      v39.i16[0] = vminvq_u16(v39);
      if (v39.i32[0])
      {
        uint64_t v40 = (int16x8_t *)(v2 + 6);
        uint64_t v41 = 3u;
        while (1)
        {
          uint16x8_t v42 = (uint16x8_t)vceqq_s16(*v40, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v21[v41]));
          v42.i16[0] = vminvq_u16(v42);
          if (!v42.i32[0]) {
            break;
          }
          unint64_t v43 = v41 - 1;
          v41 += 8;
          ++v40;
          if (v43 > 9) {
            goto LABEL_47;
          }
        }
      }
    }
    goto LABEL_55;
  }
  if (*(unsigned char *)v24 == 97)
  {
    uint8x16_t v25 = (uint8x16_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v24 + 3), (int8x16_t)xmmword_1994F60A0), vceqq_s8(*(int8x16_t *)(v24 + 1), (int8x16_t)xmmword_1994F6090));
    v25.i8[0] = vminvq_u8(v25);
    if (v25.i32[0]) {
      goto LABEL_47;
    }
  }
LABEL_55:
  uint64_t v28 = *(void *)(a1 + 184);
  if (v28)
  {
    if (WTF::StringImpl::startsWith()) {
      goto LABEL_59;
    }
    uint64_t v28 = *(void *)(a1 + 184);
  }
  if ((MEMORY[0x19972E990](v28, "youtube.com", 11) & 1) == 0)
  {
LABEL_71:
    uint64_t v33 = WebKit::cookiesByCappingExpiry(a2);
    a2 = v33;
    if (*(unsigned char *)(a1 + 192))
    {
      long long v46 = 0u;
      long long v47 = 0u;
      *(_OWORD *)uint64_t v44 = 0u;
      long long v45 = 0u;
      uint64_t v34 = [v33 countByEnumeratingWithState:v44 objects:v50 count:16];
      if (v34)
      {
        uint64_t v35 = *(void *)v45;
        do
        {
          for (uint64_t j = 0; j != v34; ++j)
          {
            if (*(void *)v45 != v35) {
              objc_enumerationMutation(a2);
            }
            uint64_t v37 = qword_1EB357E70;
            if (os_log_type_enabled((os_log_t)qword_1EB357E70, OS_LOG_TYPE_INFO))
            {
              uint64_t v38 = [*((id *)v44[1] + j) name];
              *(_DWORD *)uint64_t v49 = 138543362;
              *(void *)&v49[4] = v38;
              _os_log_impl(&dword_1985F2000, v37, OS_LOG_TYPE_INFO, "Capped the expiry of third-party IP address cookie named %{public}@.", v49, 0xCu);
            }
          }
          uint64_t v34 = [a2 countByEnumeratingWithState:v44 objects:v50 count:16];
        }
        while (v34);
      }
    }
    goto LABEL_47;
  }
LABEL_59:
  uint64_t v29 = *(_DWORD **)(a1 + 184);
  if (v29) {
    *v29 += 2;
  }
  *(void *)uint64_t v49 = v29;
  v50[0] = (WTF::StringImpl *)"consent.";
  v50[1] = (WTF::StringImpl *)9;
  uint64_t result = WTF::tryMakeString<WTF::ASCIILiteral,WTF::String>((uint64_t *)v50, (uint64_t *)v49, v44);
  if (v44[0])
  {
    BOOL v30 = WTF::operator==((unsigned __int8 *)v2, v3, *((unsigned __int8 **)v44[0] + 1), *((unsigned int *)v44[0] + 1) | ((unint64_t)((*((_DWORD *)v44[0] + 4) >> 2) & 1) << 32));
    uint64_t v31 = v44[0];
    v44[0] = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2) {
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v31 -= 2;
      }
    }
    uint64_t v32 = *(WTF::StringImpl **)v49;
    *(void *)uint64_t v49 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2) {
        WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v8);
      }
      else {
        *(_DWORD *)v32 -= 2;
      }
    }
    if (v30) {
      goto LABEL_47;
    }
    goto LABEL_71;
  }
  __break(0xC471u);
  return result;
}

void sub_198A50AAC(_Unwind_Exception *a1, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, WTF::StringImpl *a20,uint64_t a21,uint64_t a22,WTF::StringImpl *a23)
{
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  CFRelease(v23);
  _Unwind_Resume(a1);
}

void *WebKit::cookiesByCappingExpiry(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1CA48], "arrayWithCapacity:", objc_msgSend(a1, "count"));
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  uint64_t v3 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(a1);
        }
        [v2 addObject:WebCore::NetworkStorageSession::capExpiryOfPersistentCookie()];
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [a1 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }
  return v2;
}

uint64_t WebCore::RegistrableDomain::isolatedCopy@<X0>(WTF::StringImpl **a1@<X8>)
{
  uint64_t result = WTF::String::isolatedCopy();
  if (v4 && *((_DWORD *)v4 + 1))
  {
    *a1 = v4;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    uint64_t result = (uint64_t)v4;
    *a1 = v5;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        return WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  return result;
}

void sub_198A50D3C(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, WTF::StringImpl *a9)
{
  if (a9)
  {
    if (*(_DWORD *)a9 == 2) {
      WTF::StringImpl::destroy(a9, a2);
    }
    else {
      *(_DWORD *)a9 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned int *WTF::ThreadSafeRefCounted<WebKit::NetworkCache::IOChannel,(WTF::DestructionThread)0>::deref(unsigned int *result, WTF::StringImpl *a2)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    WebKit::NetworkCache::IOChannel::~IOChannel((WebKit::NetworkCache::IOChannel *)result, a2);
    return (unsigned int *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  uint64_t v4 = WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(a2) & v3;
  uint64_t v5 = (WebCore::SecurityOriginData *)(v2 + 32 * v4);
  WebCore::SecurityOriginData::isNull(v5);
  if (v6) {
    return 0;
  }
  for (int i = 1; ; ++i)
  {
    int v9 = *((_DWORD *)v5 + 6);
    if (!v9)
    {
      if (*(void *)v5 == -1) {
        goto LABEL_8;
      }
      goto LABEL_7;
    }
    if (v9 != 1) {
      break;
    }
LABEL_7:
    if (WebCore::operator==()) {
      return 1;
    }
LABEL_8:
    uint64_t v4 = (v4 + i) & v3;
    uint64_t v5 = (WebCore::SecurityOriginData *)(v2 + 32 * v4);
    WebCore::SecurityOriginData::isNull(v5);
    if (v10) {
      return 0;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
  return 1;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::hash<WebCore::SecurityOriginData>(uint64_t a1)
{
  int v2 = -1640531527;
  __int16 v3 = 0;
  char v4 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v2, a1);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v2);
}

WebKit::SessionSet *WTF::RefCounted<WebKit::SessionSet>::deref(WebKit::SessionSet *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::SessionSet::~SessionSet(result, a2);
    return (WebKit::SessionSet *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void WebKit::SessionSet::~SessionSet(WebKit::SessionSet *this, void *a2)
{
  uint64_t v3 = *((void *)this + 15);
  if (v3) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 14);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  uint64_t v5 = *((void *)this + 13);
  if (v5) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v5, a2);
  }
  char v6 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v7) {
    CFRelease(v7);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 10, a2);
  uint64_t v9 = *((void *)this + 9);
  if (v9) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v9, v8);
  }
  uint64_t v10 = *((void *)this + 8);
  if (v10) {
    WTF::fastFree((WTF *)(v10 - 16), v8);
  }
  uint64_t v11 = *((void *)this + 7);
  if (v11) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v11, v8);
  }
  uint64_t v12 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = (const void *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v13) {
    CFRelease(v13);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 4, v8);
  uint64_t v14 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v14) {
    std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)this + 24, v14);
  }
  uint64_t v15 = *((void *)this + 2);
  if (v15) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v15, v14);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v14);
}

uint64_t WTF::StringViewHashTranslator::hash(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0)
  {
    int v3 = WTF::SuperFastHash::computeHashImpl<unsigned char,WTF::StringHasher::DefaultConverter>(a1, a2);
    unsigned int v4 = (v3 ^ (8 * v3)) + ((v3 ^ (8 * v3)) >> 5);
    unsigned int v5 = (v4 ^ (4 * v4)) + ((v4 ^ (4 * v4)) >> 15);
    unsigned int v6 = (v5 ^ (v5 << 10)) & 0xFFFFFF;
    if (v6) {
      return v6;
    }
    else {
      return 0x800000;
    }
  }
  else
  {
    return WTF::StringHasher::computeHashAndMaskTop8Bits<char16_t,WTF::StringHasher::DefaultConverter>(a1, a2);
  }
}

uint64_t WTF::StringHasher::computeHashAndMaskTop8Bits<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  int v2 = WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(a1, a2);
  unsigned int v3 = (v2 ^ (8 * v2)) + ((v2 ^ (8 * v2)) >> 5);
  unsigned int v4 = (v3 ^ (4 * v3)) + ((v3 ^ (4 * v3)) >> 15);
  unsigned int v5 = (v4 ^ (v4 << 10)) & 0xFFFFFF;
  if (v5) {
    return v5;
  }
  else {
    return 0x800000;
  }
}

uint64_t WTF::SuperFastHash::computeHashImpl<char16_t,WTF::StringHasher::DefaultConverter>(uint64_t a1, unint64_t a2)
{
  uint64_t result = 2654435769;
  if (a2 >= 2)
  {
    uint64_t v4 = 0;
    do
    {
      unsigned int v5 = (*(unsigned __int16 *)(a1 + 2 * v4 + 2) << 11) ^ ((result + *(unsigned __int16 *)(a1 + 2 * v4)) << 16) ^ (result + *(unsigned __int16 *)(a1 + 2 * v4));
      uint64_t result = v5 + (v5 >> 11);
      unint64_t v6 = v4 + 3;
      v4 += 2;
    }
    while (v6 < a2);
  }
  if (a2)
  {
    int v7 = result + *(unsigned __int16 *)(a1 + 2 * a2 - 2);
    return (v7 ^ (v7 << 11)) + ((v7 ^ (v7 << 11)) >> 17);
  }
  return result;
}

BOOL WTF::StringViewHashTranslator::equal(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unint64_t v6 = *(unsigned __int8 **)(v5 + 8);
    unint64_t v7 = *(unsigned int *)(v5 + 4) | ((unint64_t)((*(_DWORD *)(v5 + 16) >> 2) & 1) << 32);
  }
  else
  {
    unint64_t v6 = 0;
    unint64_t v7 = 0x100000000;
  }
  return WTF::operator==(v6, v7, a2, a3);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v3);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::NetworkDataTaskCocoa>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
    int v5 = *(_DWORD *)(v3 - 12);
  }
  else
  {
    unsigned int v4 = 0;
    int v5 = 0;
  }
  uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v8 = v6;
  uint64_t v9 = v6 + 16;
  if (a2) {
    bzero((void *)(v6 + 16), 24 * a2);
  }
  *a1 = v9;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v5;
  if (v4)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v4;
    do
    {
      uint64_t v12 = (uint64_t *)(v3 + 24 * v10);
      uint64_t v13 = *v12;
      if (*v12)
      {
        if (v13 != -1)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            unsigned int v22 = (uint64_t *)(v14 + 24 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          unsigned int v23 = v21;
          uint64_t v24 = v14 + 24 * v21;
          uint64_t v27 = *(atomic_uchar **)(v24 + 8);
          uint64_t v26 = (void *)(v24 + 8);
          uint8x16_t v25 = v27;
          void *v26 = 0;
          if (v27) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v25, v7);
          }
          uint64_t *v22 = *v12;
          uint64_t v28 = v3 + 24 * v10;
          void *v26 = *(void *)(v28 + 8);
          uint64_t v29 = *(void *)(v28 + 16);
          *(void *)(v28 + 8) = 0;
          *(void *)(v28 + 16) = 0;
          *(void *)(v14 + 24 * v23 + 16) = v29;
          BOOL v30 = *(atomic_uchar **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v30, v7);
          }
        }
      }
      else
      {
        uint64_t v31 = v3 + 24 * v10;
        uint64_t v32 = *(atomic_uchar **)(v31 + 8);
        *(void *)(v31 + 8) = 0;
        if (v32) {
          WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v32, v7);
        }
      }
      ++v10;
    }
    while (v10 != v11);
  }
  else if (!v3)
  {
    return;
  }

  WTF::fastFree((WTF *)(v3 - 16), v7);
}

void *WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>(void *result, atomic_uchar *this, uint64_t a3)
{
  int v5 = result;
  char v6 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
  if (v6) {
    uint64_t result = (void *)MEMORY[0x19972E8D0](this);
  }
  if (*((void *)this + 3)) {
    ++*((void *)this + 1);
  }
  else {
    a3 = 0;
  }
  void *v5 = a3;
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 != 1)
  {
    return (void *)WTF::Lock::unlockSlow((WTF::Lock *)this);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9BC348;
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a1 + 5);
  unsigned int v4 = (const void *)a1[35];
  a1[35] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  char v6 = (atomic_uchar *)a1[3];
  a1[3] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9BC348;
  uint64_t v3 = (WebCore::ResourceResponseBase *)(a1 + 5);
  unsigned int v4 = (const void *)a1[35];
  a1[35] = 0;
  if (v4) {
    CFRelease(v4);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase(v3, a2);
  char v6 = (atomic_uchar *)a1[3];
  a1[3] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v6, v5);
  }
  uint64_t v7 = a1[1];
  a1[1] = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }

  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0,void,WebCore::ResourceRequest>::call(void *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  unsigned int v4 = (atomic_uchar *)a1[3];
  if (v4
    && (uint64_t v7 = a1[2],
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>(&v20, v4, a1[4]),
        (uint64_t v8 = v20) != 0))
  {
    uint64_t v9 = *(void *)(v7 + 24);
    if (v9 && (uint64_t v10 = *(void (****)(void, uint64_t, uint64_t, void *))(v9 + 8)) != 0)
    {
      uint64_t v11 = a1[1];
      a1[1] = 0;
      uint64_t v12 = (atomic_uchar *)a1[3];
      if (v12) {
        uint64_t v13 = WTF::ThreadSafeWeakPtrControlBlock::weakRef(v12);
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v14 = a1[4];
      int v15 = (void *)WTF::fastMalloc((WTF *)0x28);
      void *v15 = &unk_1EE9BC370;
      v15[1] = v11;
      void v15[2] = v7;
      v15[3] = v13;
      v15[4] = v14;
      v18[0] = v15;
      (**v10)(v10, (uint64_t)(a1 + 5), a2, v18);
      uint64_t v16 = v18[0];
      v18[0] = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    else
    {
      WebCore::ResourceRequest::ResourceRequest((StringImpl *)v18);
      WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(v3);
      CFTypeRef v17 = cf;
      CFTypeRef cf = 0;
      if (v17) {
        CFRelease(v17);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
    }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v8 + 8));
  }
  else
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v18);
    WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(v3);
    CFTypeRef v5 = cf;
    CFTypeRef cf = 0;
    if (v5) {
      CFRelease(v5);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
  }
}

void sub_198A51708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,CFTypeRef cf)
{
  CFTypeRef v35 = cf;
  CFTypeRef cf = 0;
  if (v35) {
    CFRelease(v35);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&a9);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v33 + 8));
  _Unwind_Resume(a1);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0::operator()(WebCore::ResourceRequest)::{lambda(WebCore::ResourceRequest)#1},void,WebCore::ResourceRequest>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9BC370;
  uint64_t v3 = (atomic_uchar *)a1[3];
  a1[3] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0::operator()(WebCore::ResourceRequest)::{lambda(WebCore::ResourceRequest)#1},void,WebCore::ResourceRequest>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC370;
  uint64_t v3 = (atomic_uchar *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::weakDeref(v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::willPerformHTTPRedirection(WebCore::ResourceResponse &&,WebCore::ResourceRequest &&,WTF::CompletionHandler<void ()(WebCore::ResourceRequest)> &&)::$_0::operator()(WebCore::ResourceRequest)::{lambda(WebCore::ResourceRequest)#1},void,WebCore::ResourceRequest>::call(void *a1, CFTypeRef *a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = (atomic_uchar *)a1[3];
  if (v4
    && (uint64_t v12 = a2,
        uint64_t v7 = a1[2],
        WTF::ThreadSafeWeakPtrControlBlock::makeStrongReferenceIfPossible<WebKit::NetworkDataTaskCocoa>(&v15, v4, a1[4]),
        (uint64_t v11 = v15) != 0))
  {
    uint64_t v8 = *(void *)(v7 + 16);
    if (v8 && *(void *)(v8 + 8))
    {
      if ((WebCore::ResourceRequestBase::isNull((WebCore::ResourceRequestBase *)v12) & 1) == 0) {
        WebKit::NetworkDataTask::restrictRequestReferrerToOriginIfNeeded(v7, (WebCore::ResourceRequest *)v12);
      }
      WebCore::ResourceRequestBase::operator=(v7 + 328, (uint64_t)v12);
      CFTypeRef v9 = v12[24];
      if (v9) {
        CFRetain(v12[24]);
      }
      uint64_t v10 = *(const void **)(v7 + 520);
      *(void *)(v7 + 520) = v9;
      if (v10) {
        CFRelease(v10);
      }
      WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(v3);
      uint64_t v5 = v11;
      goto LABEL_6;
    }
    uint64_t v5 = v15;
  }
  else
  {
    uint64_t v5 = 0;
  }
  WebCore::ResourceRequest::ResourceRequest((StringImpl *)v13);
  WTF::CompletionHandler<void ()(WebCore::ResourceRequest &&)>::operator()(v3);
  CFTypeRef v6 = cf;
  CFTypeRef cf = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v13);
  if (v5) {
LABEL_6:
  }
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::NetworkDataTask,(WTF::DestructionThread)1>(*(atomic_uchar **)(v5 + 8));
}

void sub_198A519EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,CFTypeRef cf)
{
}

uint64_t WebCore::ResourceRequestBase::operator=(uint64_t a1, uint64_t a2)
{
  WTF::String::operator=((uint64_t *)a1, (WTF::StringImpl **)a2);
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v4;
  WTF::String::operator=((uint64_t *)(a1 + 40), (WTF::StringImpl **)(a2 + 40));
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  WTF::String::operator=((uint64_t *)(a1 + 88), (WTF::StringImpl **)(a2 + 88));
  WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(a1 + 96, a2 + 96);
  WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(a1 + 112, a2 + 112);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a1 + 128), a2 + 128);
  char v6 = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 148) = v6;
  WTF::String::operator=((uint64_t *)(a1 + 152), (WTF::StringImpl **)(a2 + 152));
  WTF::String::operator=((uint64_t *)(a1 + 160), (WTF::StringImpl **)(a2 + 160));
  uint64_t v7 = *(_DWORD **)(a2 + 168);
  if (v7) {
    ++*v7;
  }
  uint64_t v8 = *(WTF::RefCountedBase **)(a1 + 168);
  *(void *)(a1 + 168) = v7;
  if (v8) {
    WTF::RefCounted<WebCore::FormData>::deref(v8);
  }
  uint64_t v9 = *(void *)(a2 + 176);
  *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
  *(void *)(a1 + 176) = v9;
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      int v13 = *(_DWORD *)(a2 + 12);
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::CommonHeader>::destruct((WebCore::ExceptionData *)(*(void *)a1 + 16 * v5), (WebCore::ExceptionData *)(*(void *)a1 + 16 * v4));
      LODWORD(v4) = v13;
      *(_DWORD *)(a1 + 12) = v13;
    }
    else if (v5 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
      LODWORD(v4) = *(_DWORD *)(a1 + 12);
    }
    std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader*,0>(*(void *)a2, *(void *)a2 + 16 * v4, *(void *)a1);
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v6 != v7)
    {
      uint64_t v8 = *(void *)a2 + 16 * v7;
      uint64_t v9 = *(void *)a1 + 16 * v6;
      uint64_t v10 = *(void *)a2 + 16 * v6;
      do
      {
        *(_WORD *)uint64_t v9 = *(_WORD *)v10;
        uint64_t v11 = *(_DWORD **)(v10 + 8);
        if (v11) {
          *v11 += 2;
        }
        *(void *)(v9 + 8) = v11;
        v10 += 16;
        v9 += 16;
      }
      while (v10 != v8);
    }
    *(_DWORD *)(a1 + 12) = v7;
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 12);
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v4 > v5)
    {
      WTF::VectorDestructor<true,WebCore::HTTPHeaderMap::UncommonHeader>::destruct((WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)a1 + 16 * v5), (WebCore::HTTPHeaderMap::UncommonHeader *)(*(void *)a1 + 16 * v4));
      *(_DWORD *)(a1 + 12) = v5;
      LODWORD(v4) = v5;
    }
    else if (v5 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::shrinkCapacity(a1, 0);
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a2 + 12));
      LODWORD(v4) = *(_DWORD *)(a1 + 12);
    }
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader*>((uint64_t)&v14, *(WTF::StringImpl ***)a2, (WTF::StringImpl **)(*(void *)a2 + 16 * v4), *(uint64_t **)a1);
    uint64_t v6 = *(unsigned int *)(a1 + 12);
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v6 != v7)
    {
      uint64_t v9 = *(void *)a2 + 16 * v7;
      uint64_t v10 = (void *)(*(void *)a1 + 16 * v6);
      uint64_t v11 = *(void *)a2 + 16 * v6;
      do
      {
        uint64_t v12 = *(_DWORD **)v11;
        if (*(void *)v11) {
          *v12 += 2;
        }
        void *v10 = v12;
        int v13 = *(_DWORD **)(v11 + 8);
        if (v13) {
          *v13 += 2;
        }
        v10[1] = v13;
        v11 += 16;
        v10 += 2;
      }
      while (v11 != v9);
    }
    *(_DWORD *)(a1 + 12) = v7;
  }
  return a1;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader const*,WebCore::HTTPHeaderMap::CommonHeader*,0>(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    do
    {
      uint64_t v5 = result + 16;
      *(_WORD *)a3 = *(_WORD *)result;
      uint64_t v4 = a3 + 16;
      WTF::String::operator=((uint64_t *)(a3 + 8), (WTF::StringImpl **)(result + 8));
      a3 = v4;
      uint64_t result = v5;
    }
    while (v5 != a2);
    return a2;
  }
  return result;
}

WTF::StringImpl **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader const*,WebCore::HTTPHeaderMap::UncommonHeader*>(uint64_t a1, WTF::StringImpl **a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t result = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v6 = a4;
      uint64_t v7 = result;
      WTF::String::operator=(a4, result);
      WTF::String::operator=(v6 + 1, v7 + 1);
      a4 = v6 + 2;
      uint64_t result = v7 + 2;
    }
    while (v7 + 2 != a3);
    return a3;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_1,void,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&> &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)a1[1];
  *a1 = &unk_1EE9BC398;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_1,void,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&> &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BC398;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::NetworkDataTaskCocoa::setH2PingCallback(WTF::URL const&,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&)::$_1,void,WTF::Function<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&> &>::call(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  WebCore::createInternalError();
  std::experimental::fundamentals_v3::unexpected<WebCore::ResourceError>::unexpected<WebCore::ResourceError>((uint64_t)&v16, (uint64_t *)&v12);
  std::__variant_detail::__alt<1ul,WebCore::ResourceError>::__alt[abi:sn180100]<WebCore::ResourceError>((uint64_t)v21, (uint64_t *)&v16);
  int v22 = 1;
  (*(void (**)(void, unsigned char *))(*(void *)*a2 + 16))(*a2, v21);
  if (v22 != -1) {
    ((void (*)(char *, unsigned char *))off_1EE9BC138[v22])(&v20, v21);
  }
  int v22 = -1;
  CFTypeRef v4 = cf;
  CFTypeRef cf = 0;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = v18;
  unint64_t v18 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = v17;
  CFTypeRef v17 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v3);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = v16;
  uint64_t v16 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, v3);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  CFTypeRef v8 = v15;
  CFTypeRef v15 = 0;
  if (v8) {
    CFRelease(v8);
  }
  uint64_t v9 = v14;
  char v14 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v3);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  uint64_t v10 = v13;
  int v13 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v3);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void sub_198A520DC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF::StringImpl *a10, WTF::StringImpl *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, WTF::StringImpl *a16, uint64_t a17, CFTypeRef a18, uint64_t a19, WTF::StringImpl *a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,WTF::StringImpl *a26,uint64_t a27,CFTypeRef cf)
{
  uint64_t v30 = *(unsigned int *)(v28 - 32);
  if (v30 != -1) {
    ((void (*)(uint64_t, uint64_t))off_1EE9BC138[v30])(v28 - 113, v28 - 112);
  }
  *(_DWORD *)(v28 - 32) = -1;
  if (cf) {
    CFRelease(cf);
  }
  if (a26)
  {
    if (*(_DWORD *)a26 == 2) {
      WTF::StringImpl::destroy(a26, a2);
    }
    else {
      *(_DWORD *)a26 -= 2;
    }
  }
  if (a21)
  {
    if (*(_DWORD *)a21 == 2) {
      WTF::StringImpl::destroy(a21, a2);
    }
    else {
      *(_DWORD *)a21 -= 2;
    }
  }
  if (a20)
  {
    if (*(_DWORD *)a20 == 2) {
      WTF::StringImpl::destroy(a20, a2);
    }
    else {
      *(_DWORD *)a20 -= 2;
    }
  }
  if (a18) {
    CFRelease(a18);
  }
  if (a16)
  {
    if (*(_DWORD *)a16 == 2) {
      WTF::StringImpl::destroy(a16, a2);
    }
    else {
      *(_DWORD *)a16 -= 2;
    }
  }
  if (a11)
  {
    if (*(_DWORD *)a11 == 2) {
      WTF::StringImpl::destroy(a11, a2);
    }
    else {
      *(_DWORD *)a11 -= 2;
    }
  }
  if (a10)
  {
    if (*(_DWORD *)a10 == 2) {
      WTF::StringImpl::destroy(a10, a2);
    }
    else {
      *(_DWORD *)a10 -= 2;
    }
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BC3C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BC3C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>,void,std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void sub_198A52394(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t *WTF::CompletionHandlerWithFinalizer<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>::~CompletionHandlerWithFinalizer(uint64_t *a1)
{
  if (*a1) {
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1[1] + 16))(a1[1], a1);
  }
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_198A52480(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v1[1];
  v1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *v1;
  *uint64_t v1 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setBackupExclusionPeriodForTesting(PAL::SessionID,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9BC3E8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkProcess::setBackupExclusionPeriodForTesting(PAL::SessionID,WTF::Seconds,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9BC3E8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void sub_198A526C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A527FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_198A52948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint **WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<unsigned long long>>,unsigned long long>(atomic_uint **result, uint64_t a2, uint64_t a3)
{
  if (!a2)
  {
LABEL_8:
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  unsigned int v3 = *(_DWORD *)(a2 - 8);
  unint64_t v4 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v5 = 9 * ((v4 + ~(v4 << 13)) ^ ((v4 + ~(v4 << 13)) >> 8));
  unint64_t v6 = (v5 ^ (v5 >> 15)) + ~((v5 ^ (v5 >> 15)) << 27);
  uint64_t v7 = v3 & ((v6 >> 31) ^ v6);
  uint64_t v8 = *(void *)(a2 + 16 * v7);
  if (v8 != a3)
  {
    int v9 = 1;
    while (v8)
    {
      uint64_t v7 = (v7 + v9) & v3;
      uint64_t v8 = *(void *)(a2 + 16 * v7);
      ++v9;
      if (v8 == a3) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v10 = *(atomic_uint **)(a2 + 16 * v7 + 8);
  if (v10) {
    atomic_fetch_add(v10, 1u);
  }
LABEL_9:
  *uint64_t result = v10;
  return result;
}

uint64_t WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(_DWORD *)(result - 8);
    uint64_t v5 = WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::hash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a2) & v4;
    uint64_t v6 = *(void *)(v3 + 16 * v5);
    if (v6 == a2)
    {
      return *(void *)(v3 + 16 * v5 + 8);
    }
    else
    {
      int v7 = 1;
      while (v6)
      {
        uint64_t v5 = (v5 + v7) & v4;
        uint64_t v6 = *(void *)(v3 + 16 * v5);
        ++v7;
        if (v6 == a2) {
          return *(void *)(v3 + 16 * v5 + 8);
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(uint64_t *a1, WTF::ASCIICaseInsensitiveHash **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::rehash(uint64_t *a1, unsigned int a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      int v13 = (WTF::ASCIICaseInsensitiveHash **)(v5 + 16 * v11);
      if (*v13 != (WTF::ASCIICaseInsensitiveHash *)-1)
      {
        if (WTF::equal(*v13, 0, v10))
        {
          uint64_t v15 = v5 + 16 * v11;
          CFTypeRef v17 = *(WTF::StringImpl **)(v15 + 8);
          uint64_t v16 = (void *)(v15 + 8);
          int v9 = v17;
          void *v16 = 0;
          if (v17) {
            std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v16, v9);
          }
          unint64_t v18 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v9);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
        }
        else
        {
          uint64_t v19 = *a1;
          if (*a1) {
            unsigned int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            unsigned int v20 = 0;
          }
          int v21 = WTF::ASCIICaseInsensitiveHash::hash(*v13, v14);
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v20;
            int v24 = WTF::equal(*(WTF **)(v19 + 16 * v23), 0, v10);
            int v21 = ++v22 + v23;
          }
          while (!v24);
          uint64_t v25 = v19 + 16 * v23;
          uint64_t v27 = (void *)(v25 + 8);
          uint64_t v26 = *(WTF::StringImpl **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (v26) {
            std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v27, v26);
          }
          uint64_t v28 = *(WTF::StringImpl **)v25;
          *(void *)uint64_t v25 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 2) {
              WTF::StringImpl::destroy(v28, v26);
            }
            else {
              *(_DWORD *)v28 -= 2;
            }
          }
          uint64_t v29 = *v13;
          WTF::StringImpl *v13 = 0;
          *(void *)uint64_t v25 = v29;
          uint64_t v30 = v5 + 16 * v11;
          uint64_t v32 = *(void *)(v30 + 8);
          uint64_t v31 = (WTF::StringImpl **)(v30 + 8);
          WTF::StringImpl *v31 = 0;
          *uint64_t v27 = v32;
          int v9 = *v31;
          WTF::StringImpl *v31 = 0;
          if (v9) {
            std::default_delete<WebKit::IsolatedSession>::operator()[abi:sn180100]((uint64_t)v31, v9);
          }
          uint64_t v33 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v33)
          {
            if (*(_DWORD *)v33 == 2) {
              WTF::StringImpl::destroy(v33, v9);
            }
            else {
              *(_DWORD *)v33 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v12 = v25;
          }
        }
      }
      ++v11;
    }
    while (v11 != v6);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v12;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = a1 + 16 * *(unsigned int *)(a1 - 4);
  if (*(_DWORD *)(a1 - 12))
  {
    v5[0] = a1;
    v5[1] = v3;
    WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::String>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::String,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v5, a2, a3);
    return v5[0];
  }
  return v3;
}

WTF::StringImpl *WTF::hashTraitsDeleteBucket<WTF::HashTraits<WebCore::RegistrableDomain>,WebCore::RegistrableDomain>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *a1 = (WTF::StringImpl *)-1;
  return result;
}

uint64_t WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebKit::IsolatedSession>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebKit::IsolatedSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>(uint64_t result, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (result)
  {
    uint64_t v3 = result;
    int v4 = *(_DWORD *)(result - 8);
    unsigned int v5 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v4;
    int v6 = (WTF **)(v3 + 16 * v5);
    if (WTF::equal(*v6, 0, v7))
    {
      return 0;
    }
    else
    {
      int v9 = 1;
      while (*v6 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v6, *a2, v8) & 1) == 0)
      {
        unsigned int v5 = (v5 + v9) & v4;
        int v6 = (WTF **)(v3 + 16 * v5);
        ++v9;
        if (WTF::equal(*v6, 0, v8)) {
          return 0;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>::translate<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(WebCore::SecurityOriginData const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v6, *a3);
  uint64_t result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v6);
  if (v7 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9BC228[v7])(&v5, v6);
  }
  return result;
}

void sub_198A53284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, int a16)
{
  if (a16 != -1) {
    ((void (*)(char *, char *))off_1EE9BC228[a16])(&a12, &a13);
  }
  _Unwind_Resume(exception_object);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v5, a2);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v5 - 4);
    int v8 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a3;
    do
    {
      uint64_t v15 = (uint64_t *)(v5 + 16 * v13);
      uint64_t v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            int v21 = 0;
          }
          unint64_t v22 = (v16 + ~(v16 << 32)) ^ ((unint64_t)(v16 + ~(v16 << 32)) >> 22);
          unint64_t v23 = 9 * ((v22 + ~(v22 << 13)) ^ ((v22 + ~(v22 << 13)) >> 8));
          unint64_t v24 = (v23 ^ (v23 >> 15)) + ~((v23 ^ (v23 >> 15)) << 27);
          unsigned int v25 = v21 & ((v24 >> 31) ^ v24);
          int v26 = 1;
          do
          {
            unsigned int v27 = v25;
            uint64_t v28 = *(void *)(v20 + 16 * v25);
            unsigned int v25 = (v25 + v26++) & v21;
          }
          while (v28);
          uint64_t v29 = (uint64_t *)(v20 + 16 * v27);
          uint64_t v30 = (unsigned int *)v29[1];
          v29[1] = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            uint64_t v35 = v14;
            WTF::fastFree((WTF *)v30, v10);
            uint64_t v14 = v35;
          }
          uint64_t *v29 = *v15;
          uint64_t v31 = v5 + 16 * v13;
          uint64_t v32 = *(void *)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          v29[1] = v32;
          uint64_t v33 = *(unsigned int **)(v31 + 8);
          *(void *)(v31 + 8) = 0;
          if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v33);
            uint64_t v34 = v14;
            WTF::fastFree((WTF *)v33, v10);
            uint64_t v14 = v34;
          }
        }
        else
        {
          uint64_t v17 = v5 + 16 * v13;
          unint64_t v18 = *(unsigned int **)(v17 + 8);
          *(void *)(v17 + 8) = 0;
          if (v18 && atomic_fetch_add((atomic_uint *volatile)v18, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v18);
            uint64_t v19 = v14;
            WTF::fastFree((WTF *)v18, v10);
            uint64_t v14 = v19;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else if (!v5)
  {
    return;
  }

  WTF::fastFree((WTF *)(v5 - 16), v10);
}

uint64_t WTF::HashTable<WebKit::WebPageNetworkParameters,WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashMap<WebKit::WebPageNetworkParameters,WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WebKit::WebPageNetworkParameters>,WTF::HashTraits<WTF::WeakPtr<WebKit::SessionSet,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebKit::WebPageNetworkParameters>>::expand(uint64_t *a1, WTF **a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t v6 = WTF::fastMalloc((WTF *)(16 * v5 + 16));
  uint64_t v9 = v6;
  uint64_t v10 = v6 + 16;
  if (v5) {
    bzero((void *)(v6 + 16), 16 * v5);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (WTF **)(v2 + 16 * v11);
      if (*v13 != (WTF *)-1)
      {
        if (WTF::equal(*v13, 0, v8))
        {
          uint64_t v14 = v2 + 16 * v11;
          uint64_t v15 = *(unsigned int **)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15 && atomic_fetch_add((atomic_uint *volatile)v15, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, v7);
          }
          uint64_t v16 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
        else
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          uint64_t v19 = *v13;
          if (*v13)
          {
            unsigned int v20 = *((_DWORD *)v19 + 4);
            if (v20 >= 0x100) {
              LODWORD(v19) = v20 >> 8;
            }
            else {
              LODWORD(v19) = WTF::StringImpl::hashSlowCase(v19);
            }
          }
          int v21 = 0;
          do
          {
            uint64_t v22 = v19 & v18;
            int v23 = WTF::equal(*(WTF **)(v17 + 16 * v22), 0, v8);
            LODWORD(v19) = ++v21 + v22;
          }
          while (!v23);
          uint64_t v24 = v17 + 16 * v22;
          unsigned int v25 = *(unsigned int **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (v25 && atomic_fetch_add((atomic_uint *volatile)v25, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v25);
            WTF::fastFree((WTF *)v25, v7);
          }
          int v26 = *(WTF::StringImpl **)v24;
          *(void *)uint64_t v24 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2) {
              WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v26 -= 2;
            }
          }
          unsigned int v27 = *v13;
          WTF::StringImpl *v13 = 0;
          *(void *)uint64_t v24 = v27;
          uint64_t v28 = v2 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          *(void *)(v24 + 8) = v29;
          uint64_t v30 = *(unsigned int **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30 && atomic_fetch_add((atomic_uint *volatile)v30, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v30);
            WTF::fastFree((WTF *)v30, v7);
          }
          uint64_t v31 = *v13;
          WTF::StringImpl *v13 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v7);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
          if (v13 == a2) {
            uint64_t v12 = v24;
          }
        }
      }
      ++v11;
    }
    while (v11 != v3);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v2 - 16), v7);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          int v26 = (uint64_t *)(v17 + 16 * v24);
          unsigned int v27 = (WebKit::SessionSet *)v26[1];
          v26[1] = 0;
          if (v27) {
            WTF::RefCounted<WebKit::SessionSet>::deref(v27, v10);
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(WebKit::SessionSet **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            WTF::RefCounted<WebKit::SessionSet>::deref(v30, v10);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(WebKit::SessionSet **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            WTF::RefCounted<WebKit::SessionSet>::deref(v16, v10);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, void *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v11 = 0;
  if (v7)
  {
    uint64_t v12 = v7;
    uint64_t v13 = (void *)v6;
    do
    {
      if (*v13 != -1)
      {
        if (*v13)
        {
          uint64_t v15 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v13);
          uint64_t v16 = (WTF::StringImpl *)v15[1];
          v15[1] = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v10);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          void *v15 = *v13;
          uint64_t v17 = v13[1];
          v13[1] = 0;
          v15[1] = v17;
          int v18 = (WTF::StringImpl *)v13[1];
          v13[1] = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2) {
              WTF::StringImpl::destroy(v18, v10);
            }
            else {
              *(_DWORD *)v18 -= 2;
            }
          }
          if (v13 == a3) {
            uint64_t v11 = v15;
          }
        }
        else
        {
          uint64_t v14 = (WTF::StringImpl *)v13[1];
          v13[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2) {
              WTF::StringImpl::destroy(v14, v10);
            }
            else {
              *(_DWORD *)v14 -= 2;
            }
          }
        }
      }
      v13 += 2;
      --v12;
    }
    while (v12);
  }
  else
  {
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v11;
}

IPC::Encoder *WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(uint64_t a1, WebCore::ResourceResponseBase *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  unsigned int v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    uint64_t v8 = *a5;
    *a5 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v9 = &unk_1EE9BC5B0;
    v9[1] = v8;
    uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 318;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 68) = 0;
    *((void *)v11 + 70) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    int v18 = v11;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, (uint64_t *)(a1 + 40));
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v11, a2);
    v17[0] = (uint64_t)v9;
    v17[1] = v10;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v18, v17, 0, 0);
    uint64_t v13 = v17[0];
    v17[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t result = v18;
    int v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
    return (IPC::Encoder *)WTF::CompletionHandler<void ()(WebCore::PolicyAction)>::operator()(a5);
  }
  return result;
}

void sub_198A53CF4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveData(uint64_t this, const WebCore::SharedBuffer *a2)
{
  if (*(void *)(this + 24))
  {
    uint64_t v2 = this;
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v3 = &unk_1EE9BC5D8;
    v3[1] = v2;
    uint64_t v4 = (uint64_t)v3;
    WebCore::FragmentedSharedBuffer::forEachSegment();
    this = v4;
    if (v4) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return this;
}

void sub_198A53E10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void *WebKit::NetworkSessionCocoa::BlobDataTaskClient::didCompleteWithError(WebKit::NetworkSessionCocoa::BlobDataTaskClient *this, const WebCore::ResourceError *a2, const WebCore::NetworkLoadMetrics *a3)
{
  uint64_t result = (void *)*((void *)this + 3);
  if (result)
  {
    v10[0] = (char *)this + 40;
    v10[1] = a2;
    uint64_t result = (void *)IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidCompleteWithError>((uint64_t)result, (uint64_t)v10, 0, 0, 0);
    uint64_t v5 = *((void *)this + 4);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v7 = *((void *)this + 5);
        uint64_t v8 = *(void *)(v6 + 1208);
        uint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v8, v7);
        if (v8)
        {
          uint64_t v9 = (void *)(v8 + 16 * *(unsigned int *)(v8 - 4));
          if (v9 == result) {
            return result;
          }
        }
        else
        {
          if (!result) {
            return result;
          }
          uint64_t v9 = 0;
        }
        if (v9 != result) {
          return (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove((uint64_t *)(v6 + 1208), result);
        }
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::PrivateRelayed<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1})#1},void,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9BC5B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateRelayed<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1})#1},void,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9BC5B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PrivateRelayed<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkProcessProxy::DataTaskDidReceiveResponse,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1} &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1})#1},void,WebKit::NetworkSessionCocoa::BlobDataTaskClient::didReceiveResponse(WebCore::ResourceResponse &&,WebKit::NegotiatedLegacyTLS,WebKit::PrivateRelayed,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::{lambda(BOOL)#1}>::call(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    if (*a2)
    {
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2) <= 0xFFu)
      {
        uint64_t v4 = *a2;
        uint64_t v5 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v6 = a2[3];
        if (v6)
        {
          if (v5) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v4);
          }
        }
      }
    }
  }

  return WTF::CompletionHandler<void ()(WebCore::PolicyAction)>::operator()((uint64_t *)(a1 + 8));
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN6WebKit19NetworkSessionCocoa18BlobDataTaskClient14didReceiveDataERKN7WebCore12SharedBufferEEUlT_E_vJNSt3__14spanIKhLm18446744073709551615EEEEE4callESE_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 24);
  v6[0] = v3 + 40;
  v6[1] = v7;
  return IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidReceiveData>(v4, (uint64_t)v6, 0, 0, 0);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 317;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void sub_198A54258(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t IPC::Connection::send<Messages::NetworkProcessProxy::DataTaskDidCompleteWithError>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 316;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v10, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v10, *(WebCore::ResourceError **)(a2 + 8));
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

void sub_198A54340(_Unwind_Exception *a1, void *a2)
{
  IPC::Encoder::~Encoder(v2, a2);
  WTF::fastFree(v4, v5);
  _Unwind_Resume(a1);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          int v23 = (uint64_t *)(v14 + 16 * v21);
          uint64_t v24 = v23[1];
          v23[1] = 0;
          if (v24) {
            std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](v24, v8);
          }
          uint64_t *v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13) {
            goto LABEL_19;
          }
LABEL_18:
          std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](v13, v8);
          goto LABEL_19;
        }
        uint64_t v12 = v4 + 16 * v9;
        uint64_t v13 = *(void *)(v12 + 8);
        *(void *)(v12 + 8) = 0;
        if (v13) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v5) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          unsigned int v27 = (const void *)v26[1];
          v26[1] = 0;
          if (v27) {
            CFRelease(v27);
          }
          uint64_t *v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(const void **)(v28 + 8);
          *(void *)(v28 + 8) = 0;
          if (v30) {
            CFRelease(v30);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          unint64_t v16 = *(const void **)(v15 + 8);
          *(void *)(v15 + 8) = 0;
          if (v16) {
            CFRelease(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = (const void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    CFRelease(v3);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RetainPtr<NSURLSessionDataTask>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::RetainPtr<NSURLSessionDataTask>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  uint64_t result = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    uint64_t result = std::default_delete<WebKit::NetworkSessionCocoa::BlobDataTaskClient>::operator()[abi:sn180100](result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t result, uint64_t a2)
{
  if (result)
  {
    unsigned int v2 = *(_DWORD *)(result - 8);
    unint64_t v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
    unint64_t v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
    uint64_t v6 = v2 & ((v5 >> 31) ^ v5);
    uint64_t v7 = *(void *)(result + 16 * v6);
    if (v7 == a2)
    {
LABEL_6:
      result += 16 * v6;
    }
    else
    {
      int v8 = 1;
      while (v7)
      {
        uint64_t v6 = (v6 + v8) & v2;
        uint64_t v7 = *(void *)(result + 16 * v6);
        ++v8;
        if (v7 == a2) {
          goto LABEL_6;
        }
      }
      result += 16 * *(unsigned int *)(result - 4);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>,WTF::HashTraits<WTF::Ref<WebKit::SessionSet,WTF::RawPtrTraits<WebKit::SessionSet>,WTF::DefaultRefDerefTraits<WebKit::SessionSet>>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(8 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v9 = (WebKit::SessionSet **)(v2 + 8 * i);
      uint64_t v10 = *v9;
      if (*v9 != (WebKit::SessionSet *)-1)
      {
        if (v10)
        {
          uint64_t v11 = *a1;
          if (*a1) {
            int v12 = *(_DWORD *)(v11 - 8);
          }
          else {
            int v12 = 0;
          }
          unint64_t v13 = ((unint64_t)v10 + ~((void)v10 << 32)) ^ (((unint64_t)v10 + ~((void)v10 << 32)) >> 22);
          unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
          int v17 = 1;
          do
          {
            unsigned int v18 = v16;
            uint64_t v19 = *(void *)(v11 + 8 * v16);
            unsigned int v16 = (v16 + v17++) & v12;
          }
          while (v19);
          unint64_t v20 = (WebKit::SessionSet **)(v11 + 8 * v18);
          *unint64_t v20 = 0;
          unint64_t v21 = *v9;
          void *v9 = 0;
          *unint64_t v20 = v21;
          unsigned int v22 = *v9;
          void *v9 = 0;
          if (v22) {
            WTF::RefCounted<WebKit::SessionSet>::deref(v22, v7);
          }
        }
        else
        {
          void *v9 = 0;
        }
      }
    }
  }
  else if (!v2)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v2 - 16), v7);
}

uint64_t WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SecurityOriginData&>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::SecurityOriginData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>::__copy_constructor(*(void *)a1 + 32 * *(unsigned int *)(a1 + 12), v3);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

uint64_t *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(char *a1, int8x16_t *a2, int a3, uint64_t a4, int8x16_t *a5, int a6, uint64_t a7, uint64_t a8, int8x16_t *a9, int a10)
{
  unint64_t v13 = &a1[2 * a3];
  if ((a3 & 0xFFFFFFC0) != 0)
  {
    unint64_t v14 = &a1[2 * (a3 & 0xFFFFFFC0)];
    long long v15 = 0uLL;
    do
    {
      v51.val[0] = *a2;
      int8x16_t v16 = a2[1];
      v54.val[0] = a2[2];
      int8x16_t v17 = a2[3];
      a2 += 4;
      int8x16_t v18 = v17;
      v54.val[1] = 0uLL;
      v57.val[0] = v16;
      v51.val[1] = 0uLL;
      uint64_t v19 = a1;
      vst2q_s8(v19, v51);
      v19 += 32;
      v57.val[1] = 0uLL;
      vst2q_s8(v19, v57);
      unint64_t v20 = a1 + 64;
      vst2q_s8(v20, v54);
      unint64_t v21 = a1 + 96;
      vst2q_s8(v21, *(int8x16x2_t *)(&v15 - 1));
      a1 += 128;
    }
    while (a1 != v14);
    a1 = v14;
  }
  while (a1 != v13)
  {
    __int16 v22 = a2->u8[0];
    a2 = (int8x16_t *)((char *)a2 + 1);
    *(_WORD *)a1 = v22;
    a1 += 2;
  }
  uint64_t v49 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v49, v13);
  uint64_t v23 = v49;
  if (v49) {
    uint64_t v23 = *(unsigned int *)(v49 + 4);
  }
  unsigned int v24 = &v13[2 * v23];
  uint64_t v25 = &v24[2 * a6];
  if ((a6 & 0xFFFFFFC0) != 0)
  {
    uint64_t v26 = &v24[2 * (a6 & 0xFFFFFFC0)];
    long long v27 = 0uLL;
    do
    {
      v52.val[0] = *a5;
      int8x16_t v28 = a5[1];
      v55.val[0] = a5[2];
      int8x16_t v29 = a5[3];
      a5 += 4;
      int8x16_t v30 = v29;
      v55.val[1] = 0uLL;
      v58.val[0] = v28;
      v52.val[1] = 0uLL;
      uint64_t v31 = v24;
      vst2q_s8(v31, v52);
      v31 += 32;
      v58.val[1] = 0uLL;
      vst2q_s8(v31, v58);
      uint64_t v32 = v24 + 64;
      vst2q_s8(v32, v55);
      uint64_t v33 = v24 + 96;
      vst2q_s8(v33, *(int8x16x2_t *)(&v27 - 1));
      v24 += 128;
    }
    while (v24 != v26);
    unsigned int v24 = v26;
  }
  while (v24 != v25)
  {
    __int16 v34 = a5->u8[0];
    a5 = (int8x16_t *)((char *)a5 + 1);
    *(_WORD *)unsigned int v24 = v34;
    v24 += 2;
  }
  uint64_t v50 = a7;
  uint64_t result = WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v50, v25);
  uint64_t v37 = v50;
  if (v50) {
    uint64_t v37 = *(unsigned int *)(v50 + 4);
  }
  uint64_t v38 = &v25[2 * v37];
  uint16x8_t v39 = &v38[2 * a10];
  if ((a10 & 0xFFFFFFC0) != 0)
  {
    uint64_t v40 = &v38[2 * (a10 & 0xFFFFFFC0)];
    long long v41 = 0uLL;
    do
    {
      v53.val[0] = *a9;
      int8x16_t v42 = a9[1];
      v56.val[0] = a9[2];
      int8x16_t v43 = a9[3];
      a9 += 4;
      int8x16_t v44 = v43;
      v56.val[1] = 0uLL;
      v59.val[0] = v42;
      v53.val[1] = 0uLL;
      long long v45 = v38;
      vst2q_s8(v45, v53);
      v45 += 32;
      v59.val[1] = 0uLL;
      vst2q_s8(v45, v59);
      long long v46 = v38 + 64;
      vst2q_s8(v46, v56);
      long long v47 = v38 + 96;
      vst2q_s8(v47, *(int8x16x2_t *)(&v41 - 1));
      v38 += 128;
    }
    while (v38 != v40);
    uint64_t v38 = v40;
  }
  while (v38 != v39)
  {
    __int16 v48 = a9->u8[0];
    a9 = (int8x16_t *)((char *)a9 + 1);
    *(_WORD *)uint64_t v38 = v48;
    v38 += 2;
  }
  return result;
}

WTF *WTF::Vector<WTF::RetainPtr<NSObject  {objcproto18OS_nw_proxy_config}*>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(WTF *result, void *a2)
{
  if (*((_DWORD *)result + 2))
  {
    uint64_t v2 = result;
    uint64_t v3 = *((unsigned int *)result + 3);
    if (v3)
    {
      int v4 = *(const void ***)result;
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *v4;
        WTF *v4 = 0;
        if (v6) {
          CFRelease(v6);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      *((_DWORD *)v2 + 3) = 0;
    }
    uint64_t result = *(WTF **)v2;
    if (*(void *)v2)
    {
      *(void *)uint64_t v2 = 0;
      *((_DWORD *)v2 + 2) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkSessionCocoa::clearProxyConfigData(void)::$_0,void,WebKit::SessionWrapper &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 8);
  if (result)
  {
    int v4 = **(void ***)(a1 + 8);
    uint64_t v5 = [result _networkContext];
    return (void *)[v4 addObject:v5];
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::NetworkSessionCocoa::setProxyConfigData(WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebKit::SessionWrapper &>::call(uint64_t a1, uint64_t a2)
{
  int v4 = (const void **)(a2 + 8);
  uint64_t result = *(void *)(a2 + 8);
  if (result)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      uint64_t v7 = *(WebKit::NetworkSessionCocoa **)(a1 + 8);
      uint64_t v8 = *(unsigned __int8 *)(v6 + 24);
      uint64_t v9 = (NSURLSessionConfiguration *)[(id)result configuration];
      WebKit::NetworkSessionCocoa::applyProxyConfigurationToSessionConfiguration(v7, v9);
      [*(id *)(a2 + 8) invalidateAndCancel];
      [*(id *)(a2 + 16) sessionInvalidated];
      uint64_t v10 = [[WKNetworkSessionDelegate alloc] initWithNetworkSession:v7 wrapper:a2 withCredentials:v8];
      uint64_t v11 = *(const void **)(a2 + 16);
      *(void *)(a2 + 16) = v10;
      if (v11)
      {
        CFRelease(v11);
        uint64_t v10 = *(WKNetworkSessionDelegate **)(a2 + 16);
      }
      WTF::RetainPtr<NSURLSession>::operator=(v4, (CFTypeRef)objc_msgSend(MEMORY[0x1E4F18DC0], "sessionWithConfiguration:delegate:delegateQueue:", v9, v10, objc_msgSend(MEMORY[0x1E4F28F08], "mainQueue")));
      uint64_t v13 = *(void *)(a2 + 24);
      if (v13)
      {
        *(void *)(a2 + 24) = 0;
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ThreadSafeWeakPtr<WebKit::SpeechRecognitionRemoteRealtimeMediaSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v13, v12);
      }
      uint64_t v14 = *(void *)(a2 + 32);
      if (v14)
      {
        *(void *)(a2 + 32) = 0;
        WTF::fastFree((WTF *)(v14 - 16), v12);
      }
      uint64_t result = *(void *)(a2 + 40);
      if (result)
      {
        *(void *)(a2 + 40) = 0;
        return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebSocketTask,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(result, v12);
      }
    }
    else
    {
      uint64_t result = 1351;
      __break(0xC471u);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::NetworkSessionCocoa::setProxyConfigData(WTF::Vector<std::pair<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::UUID>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void,WebKit::SessionWrapper &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)(a2 + 8);
  if (result)
  {
    int v4 = **(void ***)(a1 + 8);
    uint64_t v5 = [result _networkContext];
    return (void *)[v4 addObject:v5];
  }
  return result;
}

void WebKit::RemoteGraphicsContextGL::didReceiveStreamMessage(WebKit::RemoteGraphicsContextGL *this, IPC::StreamServerConnection *a2, WTF **a3)
{
  if (*((unsigned char *)this + 228)) {
    BOOL v3 = *((unsigned char *)this + 214) == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return;
  }
  int v4 = a3;
  int v6 = *((unsigned __int16 *)a3 + 25);
  switch(*((_WORD *)a3 + 25))
  {
    case 0x388:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::activeTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x389:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v143 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v144)
      {
        unint64_t v145 = HIDWORD(v143);
        LODWORD(v2137) = HIDWORD(v143);
        LODWORD(v2131[0]) = v143;
        if (v143 <= 0xFFFFFFFD)
        {
          if (v143) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          if (v145 <= 0xFFFFFFFD)
          {
            if (v145) {
              LODWORD(v2137) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)&v2137);
            }
            WebCore::GraphicsContextGLANGLE::attachShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          }
        }
      }
      goto LABEL_1498;
    case 0x38D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2137, (uint64_t **)a2 + 5);
      double v126 = v4[1];
      uint64_t v127 = (uint64_t)*v4;
      unint64_t v128 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v126 < v128 || (unint64_t)v126 - v128 <= 3)
      {
        v891 = 0;
        uint64_t v892 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v893 = v4[3];
        if (v893)
        {
          if (v126)
          {
            (*(void (**)(WTF *))(*(void *)v893 + 16))(v893);
            uint64_t v892 = (uint64_t)*v4;
            v891 = v4[1];
          }
          else
          {
            v891 = 0;
            uint64_t v892 = 0;
          }
        }
        goto LABEL_1522;
      }
      uint64_t v130 = (unsigned int *)(v127 + v128);
      v4[2] = (WTF *)(v130 + 1);
      if (!v127)
      {
        v891 = v126;
        uint64_t v892 = 0;
LABEL_1522:
        void *v4 = 0;
        v4[1] = 0;
        v894 = v4[3];
        if (v894 && v891) {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v894 + 16))(v894, v892, v891);
        }
        goto LABEL_1887;
      }
      unint64_t v131 = (((unint64_t)v130 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v127;
      if ((unint64_t)v126 >= v131 && (unint64_t)v126 - v131 > 3)
      {
        uint64_t v133 = *v130;
        uint64_t v134 = *(unsigned int *)(((unint64_t)v130 + 7) & 0xFFFFFFFFFFFFFFFCLL);
        v4[2] = (WTF *)((((unint64_t)v130 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        IPC::Decoder::decode<WTF::String>((IPC::Decoder *)v4, (uint64_t)v2131);
        if (!LOBYTE(v2131[1])) {
          goto LABEL_1887;
        }
        *(_DWORD *)CFTypeRef cf = v133;
        *(_DWORD *)&cf[4] = v134;
        *(WTF **)&cf[8] = v2131[0];
        cf[16] = 1;
        WebKit::RemoteGraphicsContextGL::bindAttribLocation((uint64_t)this, v133, v134, (WTF::String *)&cf[8]);
        if (cf[16])
        {
          int v136 = *(WTF::StringImpl **)&cf[8];
          *(void *)&cf[8] = 0;
          if (v136)
          {
            if (*(_DWORD *)v136 == 2) {
              WTF::StringImpl::destroy(v136, v135);
            }
            else {
              *(_DWORD *)v136 -= 2;
            }
          }
        }
        goto LABEL_1888;
      }
      void *v4 = 0;
      v4[1] = 0;
      v903 = v4[3];
      if (v903)
      {
        if (v126)
        {
          (*(void (**)(WTF *))(*(void *)v903 + 16))(v903);
          uint64_t v814 = (uint64_t)*v4;
          v813 = v4[1];
          v816 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (v816) {
            goto LABEL_1425;
          }
        }
      }
      goto LABEL_1887;
    case 0x38E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v150 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v151)
      {
        LODWORD(v2131[0]) = HIDWORD(v150);
        if (HIDWORD(v150) <= 0xFFFFFFFD)
        {
          if (HIDWORD(v150)) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::bindBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x391:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v152 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v153)
      {
        LODWORD(v2131[0]) = HIDWORD(v152);
        if (HIDWORD(v152) <= 0xFFFFFFFD)
        {
          if (HIDWORD(v152)) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::bindFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x392:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v139 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v140)
      {
        LODWORD(v2131[0]) = HIDWORD(v139);
        if (HIDWORD(v139) <= 0xFFFFFFFD)
        {
          if (HIDWORD(v139)) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::bindRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x394:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v146 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v147)
      {
        LODWORD(v2131[0]) = HIDWORD(v146);
        if (HIDWORD(v146) <= 0xFFFFFFFD)
        {
          if (HIDWORD(v146)) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::bindTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x397:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<float,float,float,float>>((uint64_t)cf, v4);
      if (cf[16]) {
        WebCore::GraphicsContextGLANGLE::blendColor(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)cf, *(float *)&cf[4], *(float *)&cf[8], *(float *)&cf[12]);
      }
      goto LABEL_1450;
    case 0x398:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::blendEquation(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x399:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v154) {
        WebCore::GraphicsContextGLANGLE::blendEquationSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x39C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v78) {
        WebCore::GraphicsContextGLANGLE::blendFunc(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x39D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v4, cf);
      if (cf[16]) {
        WebCore::GraphicsContextGLANGLE::blendFuncSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1450;
    case 0x3A4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::clear(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3A9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<float,float,float,float>>((uint64_t)cf, v4);
      if (cf[16]) {
        WebCore::GraphicsContextGLANGLE::clearColor(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)cf, *(float *)&cf[4], *(float *)&cf[8], *(float *)&cf[12]);
      }
      goto LABEL_1450;
    case 0x3AA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v148 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v148 & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::clearDepth(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v148);
      }
      goto LABEL_1498;
    case 0x3AB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::clearStencil(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3AD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v160 = (unint64_t)v4[1];
      uint64_t v161 = (uint64_t)*v4;
      unint64_t v162 = v4[2] - *v4;
      if (v160 <= v162)
      {
        v860 = 0;
        uint64_t v861 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v862 = v4[3];
        if (v862)
        {
          if (v160)
          {
            (*(void (**)(WTF *))(*(void *)v862 + 16))(v862);
            uint64_t v861 = (uint64_t)*v4;
            v860 = v4[1];
          }
          else
          {
            v860 = 0;
            uint64_t v861 = 0;
          }
        }
      }
      else
      {
        char v163 = (unsigned __int8 *)(v161 + v162);
        v4[2] = (WTF *)(v161 + v162 + 1);
        if (v161)
        {
          if (*v163 < 2u)
          {
            if (v160 > v162 + 1)
            {
              v4[2] = (WTF *)(v163 + 2);
              if (v163[1] >= 2u) {
                goto LABEL_2891;
              }
              if (v160 <= v162 + 2) {
                goto LABEL_1435;
              }
              v4[2] = (WTF *)(v163 + 3);
              if (v163[2] >= 2u)
              {
LABEL_2891:
                v821 = (WTF *)v160;
                uint64_t v822 = v161;
LABEL_1436:
                void *v4 = 0;
                v4[1] = 0;
                v824 = v4[3];
                if (v824 && v821) {
                  (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v824 + 16))(v824, v822, v821);
                }
                goto LABEL_1493;
              }
              if (v160 > v162 + 3)
              {
                v4[2] = (WTF *)(v163 + 4);
                if (v163[3] < 2u)
                {
                  WebCore::GraphicsContextGLANGLE::colorMask(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                  goto LABEL_1498;
                }
                goto LABEL_2891;
              }
            }
LABEL_1435:
            v821 = 0;
            uint64_t v822 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v823 = v4[3];
            if (v823)
            {
              (*(void (**)(WTF *))(*(void *)v823 + 16))(v823);
              v821 = 0;
              uint64_t v1431 = (uint64_t)*v4;
              v1432 = v4[1];
              v1433 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              uint64_t v822 = 0;
              if (v1433)
              {
                if (v1432)
                {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1433 + 16))(v1433, v1431);
                  uint64_t v822 = (uint64_t)*v4;
                  v821 = v4[1];
                }
              }
            }
            goto LABEL_1436;
          }
LABEL_1492:
          void *v4 = 0;
          v4[1] = 0;
          v864 = v4[3];
          if (v864 && v160) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v864 + 16))(v864, v161);
          }
LABEL_1493:
          uint64_t v789 = (uint64_t)*v4;
          v790 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v791 = v4[3];
          if (!v791) {
            goto LABEL_1498;
          }
          goto LABEL_1503;
        }
        v860 = (WTF *)v160;
        uint64_t v861 = 0;
      }
      unint64_t v160 = 0;
      uint64_t v161 = 0;
      void *v4 = 0;
      v4[1] = 0;
      v863 = v4[3];
      if (v863)
      {
        if (v860)
        {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v863 + 16))(v863, v861, v860);
          uint64_t v161 = (uint64_t)*v4;
          unint64_t v160 = (unint64_t)v4[1];
        }
        else
        {
          unint64_t v160 = 0;
          uint64_t v161 = 0;
        }
      }
      goto LABEL_1492;
    case 0x3AF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v159 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v159 & 0xFF00000000) != 0)
      {
        LODWORD(v2131[0]) = v159;
        if (v159 <= 0xFFFFFFFD)
        {
          if (v159) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::compileShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x3B9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      long long v41 = v4[1];
      uint64_t v42 = (uint64_t)*v4;
      unint64_t v43 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v41 < v43 || (unint64_t)v41 - v43 <= 3)
      {
        v879 = 0;
        uint64_t v880 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v881 = v4[3];
        if (v881)
        {
          if (v41)
          {
            (*(void (**)(WTF *))(*(void *)v881 + 16))(v881);
            uint64_t v880 = (uint64_t)*v4;
            v879 = v4[1];
          }
          else
          {
            v879 = 0;
            uint64_t v880 = 0;
          }
        }
        goto LABEL_1510;
      }
      long long v45 = (unsigned int *)(v42 + v43);
      v4[2] = (WTF *)(v45 + 1);
      if (!v42)
      {
        v879 = v41;
        uint64_t v880 = 0;
LABEL_1510:
        void *v4 = 0;
        v4[1] = 0;
        v882 = v4[3];
        if (v882 && v879) {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v882 + 16))(v882, v880, v879);
        }
        goto LABEL_1380;
      }
      unint64_t v46 = (((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v42;
      if ((unint64_t)v41 >= v46 && (unint64_t)v41 - v46 > 3)
      {
        unsigned int v48 = *v45;
        v4[2] = (WTF *)(v42 + v46 + 4);
        uint64_t v50 = v42 + v46 + 7;
        int v49 = *(_DWORD *)(v42 + v46);
        unint64_t v51 = (v50 & 0xFFFFFFFFFFFFFFFCLL) - v42;
        if ((unint64_t)v41 >= v51 && (unint64_t)v41 - v51 > 3)
        {
          int8x16x2_t v53 = (unsigned int *)(v42 + v51);
          v4[2] = (WTF *)(v53 + 1);
          unsigned int v54 = *v53;
          unint64_t v55 = (((unint64_t)v53 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v42;
          if ((unint64_t)v41 >= v55 && (unint64_t)v41 - v55 > 3)
          {
            int8x16x2_t v57 = (int *)(v42 + v55);
            v4[2] = (WTF *)(v57 + 1);
            int v58 = *v57;
            unint64_t v59 = (((unint64_t)v57 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v42;
            if ((unint64_t)v41 >= v59 && (unint64_t)v41 - v59 > 3)
            {
              uint64_t v61 = (int *)(v42 + v59);
              v4[2] = (WTF *)(v61 + 1);
              int v62 = *v61;
              unint64_t v63 = (((unint64_t)v61 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v42;
              if ((unint64_t)v41 >= v63 && (unint64_t)v41 - v63 > 3)
              {
                uint64_t v65 = (int *)(v42 + v63);
                v4[2] = (WTF *)(v65 + 1);
                int v66 = *v65;
                unint64_t v67 = (((unint64_t)v65 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v42;
                if ((unint64_t)v41 >= v67 && (unint64_t)v41 - v67 > 3)
                {
                  CFTypeRef v69 = (int *)(v42 + v67);
                  v4[2] = (WTF *)(v69 + 1);
                  unint64_t v70 = (((unint64_t)v69 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v42;
                  if ((unint64_t)v41 >= v70 && (unint64_t)v41 - v70 > 3)
                  {
                    int v72 = *v69;
                    int v73 = *(_DWORD *)(((unint64_t)v69 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                    v4[2] = (WTF *)((((unint64_t)v69 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                    WebCore::GraphicsContextGLANGLE::copyTexImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v48, v49, v54, v58, v62, v66, v72, v73);
                    goto LABEL_1498;
                  }
                }
              }
            }
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v788 = v4[3];
      if (v788)
      {
        if (v41)
        {
          (*(void (**)(WTF *))(*(void *)v788 + 16))(v788);
          uint64_t v1367 = (uint64_t)*v4;
          v1368 = v4[1];
          v1369 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (v1369)
          {
            if (v1368) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v1369 + 16))(v1369, v1367);
            }
          }
        }
      }
LABEL_1380:
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (!v791) {
        goto LABEL_1498;
      }
      goto LABEL_1503;
    case 0x3BA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      CFTypeRef v93 = v4[1];
      uint64_t v94 = (uint64_t)*v4;
      unint64_t v95 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v93 < v95 || (unint64_t)v93 - v95 <= 3)
      {
        v887 = 0;
        uint64_t v888 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v889 = v4[3];
        if (v889)
        {
          if (v93)
          {
            (*(void (**)(WTF *))(*(void *)v889 + 16))(v889);
            uint64_t v888 = (uint64_t)*v4;
            v887 = v4[1];
          }
          else
          {
            v887 = 0;
            uint64_t v888 = 0;
          }
        }
        goto LABEL_1518;
      }
      CFTypeRef v97 = (unsigned int *)(v94 + v95);
      v4[2] = (WTF *)(v97 + 1);
      if (!v94)
      {
        v887 = v93;
        uint64_t v888 = 0;
LABEL_1518:
        void *v4 = 0;
        v4[1] = 0;
        v890 = v4[3];
        if (v890 && v887) {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v890 + 16))(v890, v888, v887);
        }
        goto LABEL_1383;
      }
      unint64_t v98 = (((unint64_t)v97 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v94;
      if ((unint64_t)v93 >= v98 && (unint64_t)v93 - v98 > 3)
      {
        unsigned int v100 = *v97;
        v4[2] = (WTF *)(v94 + v98 + 4);
        uint64_t v102 = v94 + v98 + 7;
        int v101 = *(_DWORD *)(v94 + v98);
        unint64_t v103 = (v102 & 0xFFFFFFFFFFFFFFFCLL) - v94;
        if ((unint64_t)v93 >= v103 && (unint64_t)v93 - v103 > 3)
        {
          unint64_t v105 = (int *)(v94 + v103);
          v4[2] = (WTF *)(v105 + 1);
          int v106 = *v105;
          unint64_t v107 = (((unint64_t)v105 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v94;
          if ((unint64_t)v93 >= v107 && (unint64_t)v93 - v107 > 3)
          {
            uint64_t v109 = (int *)(v94 + v107);
            v4[2] = (WTF *)(v109 + 1);
            int v110 = *v109;
            unint64_t v111 = (((unint64_t)v109 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v94;
            if ((unint64_t)v93 >= v111 && (unint64_t)v93 - v111 > 3)
            {
              uint64_t v113 = (int *)(v94 + v111);
              v4[2] = (WTF *)(v113 + 1);
              int v114 = *v113;
              unint64_t v115 = (((unint64_t)v113 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v94;
              if ((unint64_t)v93 >= v115 && (unint64_t)v93 - v115 > 3)
              {
                long long v117 = (int *)(v94 + v115);
                v4[2] = (WTF *)(v117 + 1);
                int v118 = *v117;
                unint64_t v119 = (((unint64_t)v117 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v94;
                if ((unint64_t)v93 >= v119 && (unint64_t)v93 - v119 > 3)
                {
                  uint64_t v121 = (int *)(v94 + v119);
                  v4[2] = (WTF *)(v121 + 1);
                  unint64_t v122 = (((unint64_t)v121 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v94;
                  if ((unint64_t)v93 >= v122 && (unint64_t)v93 - v122 > 3)
                  {
                    int v124 = *v121;
                    int v125 = *(_DWORD *)(((unint64_t)v121 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                    v4[2] = (WTF *)((((unint64_t)v121 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                    WebCore::GraphicsContextGLANGLE::copyTexSubImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v100, v101, v106, v110, v114, v118, v124, v125);
                    goto LABEL_1498;
                  }
                }
              }
            }
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v792 = v4[3];
      if (v792)
      {
        if (v93)
        {
          (*(void (**)(WTF *))(*(void *)v792 + 16))(v792);
          uint64_t v1370 = (uint64_t)*v4;
          v1371 = v4[1];
          v1372 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (v1372)
          {
            if (v1371) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v1372 + 16))(v1372, v1370);
            }
          }
        }
      }
LABEL_1383:
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (!v791) {
        goto LABEL_1498;
      }
      goto LABEL_1503;
    case 0x3BC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v180 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v180 & 0xFF00000000) == 0) {
        goto LABEL_1450;
      }
      LODWORD(v2137) = v180;
      if (v180 > 0xFFFFFFFD) {
        goto LABEL_1450;
      }
      int Buffer = WebCore::GraphicsContextGLANGLE::createBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_307;
    case 0x3BD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v74 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v74 & 0xFF00000000) == 0) {
        goto LABEL_1450;
      }
      LODWORD(v2137) = v74;
      if (v74 > 0xFFFFFFFD) {
        goto LABEL_1450;
      }
      int Buffer = WebCore::GraphicsContextGLANGLE::createFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_307;
    case 0x3BE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v92 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v92 & 0xFF00000000) == 0) {
        goto LABEL_1450;
      }
      LODWORD(v2137) = v92;
      if (v92 > 0xFFFFFFFD) {
        goto LABEL_1450;
      }
      int Buffer = WebCore::GraphicsContextGLANGLE::createProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_307;
    case 0x3C1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v77 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v77 & 0xFF00000000) == 0) {
        goto LABEL_1450;
      }
      LODWORD(v2137) = v77;
      if (v77 > 0xFFFFFFFD) {
        goto LABEL_1450;
      }
      int Buffer = WebCore::GraphicsContextGLANGLE::createRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_307;
    case 0x3C3:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      unsigned int v141 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (!v142) {
        goto LABEL_1450;
      }
      LODWORD(v2137) = v141;
      if (v141 > 0xFFFFFFFD) {
        goto LABEL_1450;
      }
      int Buffer = WebCore::GraphicsContextGLANGLE::createShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_307;
    case 0x3C4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v76 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v76 & 0xFF00000000) == 0) {
        goto LABEL_1450;
      }
      LODWORD(v2137) = v76;
      if (v76 > 0xFFFFFFFD) {
        goto LABEL_1450;
      }
      int Buffer = WebCore::GraphicsContextGLANGLE::createTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_307;
    case 0x3C7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::cullFace(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3C8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v218 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v218 & 0xFF00000000) != 0 && (v218 + 2) >= 3)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v218);
        WebCore::GraphicsContextGLANGLE::deleteBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3CA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v79 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v79 & 0xFF00000000) != 0 && (v79 + 2) >= 3)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v79);
        WebCore::GraphicsContextGLANGLE::deleteFramebuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3CB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v137 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v137 & 0xFF00000000) != 0 && (v137 + 2) >= 3)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v137);
        WebCore::GraphicsContextGLANGLE::deleteProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3CE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v149 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v149 & 0xFF00000000) != 0 && (v149 + 2) >= 3)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v149);
        WebCore::GraphicsContextGLANGLE::deleteRenderbuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3D0:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v138 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v138 & 0xFF00000000) != 0 && (v138 + 2) >= 3)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v138);
        WebCore::GraphicsContextGLANGLE::deleteShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3D2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v222 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v222 & 0xFF00000000) != 0 && (v222 + 2) >= 3)
      {
        WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v222);
        WebCore::GraphicsContextGLANGLE::deleteTexture(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3D5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::depthFunc(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3D6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((unsigned __int16)IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(v4) > 0xFFu)
      {
        WebCore::GraphicsContextGLANGLE::depthMask(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        goto LABEL_1498;
      }
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (v791) {
        goto LABEL_1503;
      }
      goto LABEL_1498;
    case 0x3D7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v220 = IPC::Decoder::decode<std::tuple<float,float>>((uint64_t *)v4);
      if (v221) {
        WebCore::GraphicsContextGLANGLE::depthRange(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v220, *((float *)&v220 + 1));
      }
      goto LABEL_1498;
    case 0x3D8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v38 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v39)
      {
        unint64_t v40 = HIDWORD(v38);
        LODWORD(v2137) = HIDWORD(v38);
        LODWORD(v2131[0]) = v38;
        if (v38 <= 0xFFFFFFFD)
        {
          if (v38) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          if (v40 <= 0xFFFFFFFD)
          {
            if (v40) {
              LODWORD(v2137) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)&v2137);
            }
            WebCore::GraphicsContextGLANGLE::detachShader(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          }
        }
      }
      goto LABEL_1498;
    case 0x3D9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::disable(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3DA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::disableVertexAttribArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3DC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v25 = v4[1];
      uint64_t v26 = (uint64_t)*v4;
      unint64_t v27 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v25 >= v27 && (unint64_t)v25 - v27 > 3)
      {
        unint64_t v29 = v26 + v27;
        v4[2] = (WTF *)(v29 + 4);
        if (v26)
        {
          unint64_t v30 = ((v29 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v26;
          if ((unint64_t)v25 >= v30 && (unint64_t)v25 - v30 > 3)
          {
            unint64_t v32 = (v29 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v32 + 4);
            unint64_t v33 = ((v32 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v26;
            if ((unint64_t)v25 >= v33 && (unint64_t)v25 - v33 > 3)
            {
              uint64_t v35 = (unsigned int *)((v32 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v36 = *v35;
              v4[2] = (WTF *)(v35 + 1);
              uint64_t v37 = v36 | 0x100000000;
              goto LABEL_53;
            }
          }
          void *v4 = 0;
          v4[1] = 0;
          v837 = v4[3];
          if (v837)
          {
            if (v25)
            {
              (*(void (**)(WTF *))(*(void *)v837 + 16))(v837);
              uint64_t v838 = (uint64_t)*v4;
              v839 = v4[1];
              v840 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v840)
              {
                if (v839) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v840 + 16))(v840, v838);
                }
              }
            }
          }
LABEL_1507:
          uint64_t v876 = (uint64_t)*v4;
          v877 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v878 = v4[3];
          if (v878 && v877) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v878 + 16))(v878, v876);
          }
          uint64_t v37 = 0;
LABEL_53:
          if ((v37 & 0xFF00000000) != 0) {
            WebCore::GraphicsContextGLANGLE::drawArrays(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          }
          goto LABEL_1498;
        }
        v872 = v25;
        uint64_t v873 = 0;
      }
      else
      {
        v872 = 0;
        uint64_t v873 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v874 = v4[3];
        if (v874)
        {
          if (v25)
          {
            (*(void (**)(WTF *))(*(void *)v874 + 16))(v874);
            uint64_t v873 = (uint64_t)*v4;
            v872 = v4[1];
          }
          else
          {
            v872 = 0;
            uint64_t v873 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v875 = v4[3];
      if (v875 && v872) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v875 + 16))(v875, v873, v872);
      }
      goto LABEL_1507;
    case 0x3E1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v80 = v4[1];
      uint64_t v81 = (uint64_t)*v4;
      unint64_t v82 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v80 < v82 || (unint64_t)v80 - v82 <= 3)
      {
        v883 = 0;
        uint64_t v884 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v885 = v4[3];
        if (v885)
        {
          if (v80)
          {
            (*(void (**)(WTF *))(*(void *)v885 + 16))(v885);
            uint64_t v884 = (uint64_t)*v4;
            v883 = v4[1];
          }
          else
          {
            v883 = 0;
            uint64_t v884 = 0;
          }
        }
        goto LABEL_1514;
      }
      unint64_t v84 = v81 + v82;
      v4[2] = (WTF *)(v84 + 4);
      if (!v81)
      {
        v883 = v80;
        uint64_t v884 = 0;
LABEL_1514:
        void *v4 = 0;
        v4[1] = 0;
        v886 = v4[3];
        if (v886 && v883) {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v886 + 16))(v886, v884, v883);
        }
        goto LABEL_1515;
      }
      unint64_t v85 = ((v84 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v81;
      if ((unint64_t)v80 >= v85 && (unint64_t)v80 - v85 > 3)
      {
        v4[2] = (WTF *)(((v84 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        unint64_t v87 = ((((v84 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v81;
        if ((unint64_t)v80 >= v87 && (unint64_t)v80 - v87 > 3)
        {
          unint64_t v89 = (((v84 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          v4[2] = (WTF *)(v89 + 4);
          unint64_t v90 = ((v89 + 11) & 0xFFFFFFFFFFFFFFF8) - v81;
          if ((unint64_t)v80 >= v90 && (unint64_t)v80 - v90 > 7)
          {
            v4[2] = (WTF *)(((v89 + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
            WebCore::GraphicsContextGLANGLE::drawElements(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v825 = v4[3];
      if (v825)
      {
        if (v80)
        {
          (*(void (**)(WTF *))(*(void *)v825 + 16))(v825);
          uint64_t v826 = (uint64_t)*v4;
          v827 = v4[1];
          v828 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (v828)
          {
            if (v827) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v828 + 16))(v828, v826);
            }
          }
        }
      }
LABEL_1515:
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (!v791) {
        goto LABEL_1498;
      }
      goto LABEL_1503;
    case 0x3E5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::enable(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3E6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::enableVertexAttribArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3EB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>((IPC::Decoder *)v4, (uint64_t)cf);
      if (cf[8])
      {
        WebKit::RemoteGraphicsContextGL::ensureExtensionEnabled((uint64_t)this);
        if (cf[8])
        {
          uint64_t v8 = *(WTF::StringImpl **)cf;
          *(void *)CFTypeRef cf = 0;
          if (v8)
          {
LABEL_11:
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, v7);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
        }
      }
      goto LABEL_1450;
    case 0x3EC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      WebCore::GraphicsContextGLANGLE::finish(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1498;
    case 0x3ED:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      WebCore::GraphicsContextGLANGLE::flush(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1498;
    case 0x3EE:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v4, cf);
      if (cf[16]) {
        WebKit::RemoteGraphicsContextGL::framebufferRenderbuffer((uint64_t)this, *(unsigned int *)cf, *(unsigned int *)&cf[4], *(unsigned int *)&cf[8], *(unsigned int *)&cf[12]);
      }
      goto LABEL_1450;
    case 0x3EF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v223 = v4[1];
      uint64_t v224 = (uint64_t)*v4;
      unint64_t v225 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v223 < v225 || (unint64_t)v223 - v225 <= 3)
      {
        v895 = 0;
        uint64_t v896 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v897 = v4[3];
        if (v897)
        {
          if (v223)
          {
            (*(void (**)(WTF *))(*(void *)v897 + 16))(v897);
            uint64_t v896 = (uint64_t)*v4;
            v895 = v4[1];
          }
          else
          {
            v895 = 0;
            uint64_t v896 = 0;
          }
        }
        goto LABEL_1526;
      }
      v227 = (unsigned int *)(v224 + v225);
      v4[2] = (WTF *)(v227 + 1);
      if (!v224)
      {
        v895 = v223;
        uint64_t v896 = 0;
LABEL_1526:
        void *v4 = 0;
        v4[1] = 0;
        v898 = v4[3];
        if (v898 && v895) {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v898 + 16))(v898, v896, v895);
        }
        goto LABEL_1527;
      }
      unint64_t v228 = (((unint64_t)v227 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v224;
      if ((unint64_t)v223 >= v228 && (unint64_t)v223 - v228 > 3)
      {
        unsigned int v230 = *v227;
        v4[2] = (WTF *)(v224 + v228 + 4);
        uint64_t v232 = v224 + v228 + 7;
        unsigned int v231 = *(_DWORD *)(v224 + v228);
        unint64_t v233 = (v232 & 0xFFFFFFFFFFFFFFFCLL) - v224;
        if ((unint64_t)v223 >= v233 && (unint64_t)v223 - v233 > 3)
        {
          v235 = (unsigned int *)(v224 + v233);
          v4[2] = (WTF *)(v235 + 1);
          unsigned int v236 = *v235;
          unint64_t v237 = (((unint64_t)v235 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v224;
          if ((unint64_t)v223 >= v237 && (unint64_t)v223 - v237 > 3)
          {
            v239 = (unsigned int *)(v224 + v237);
            v4[2] = (WTF *)(v239 + 1);
            unint64_t v240 = (((unint64_t)v239 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v224;
            if ((unint64_t)v223 >= v240 && (unint64_t)v223 - v240 > 3)
            {
              unsigned int v242 = *v239;
              v4[2] = (WTF *)((((unint64_t)v239 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
              WebKit::RemoteGraphicsContextGL::framebufferTexture2D((uint64_t)this, v230, v231, v236, v242);
              goto LABEL_1498;
            }
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v817 = v4[3];
      if (v817)
      {
        if (v223)
        {
          (*(void (**)(WTF *))(*(void *)v817 + 16))(v817);
          uint64_t v818 = (uint64_t)*v4;
          v819 = v4[1];
          v820 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (v820)
          {
            if (v819) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v820 + 16))(v820, v818);
            }
          }
        }
      }
LABEL_1527:
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (!v791) {
        goto LABEL_1498;
      }
      goto LABEL_1503;
    case 0x3F1:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::frontFace(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3F2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::generateMipmap(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3F3:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v9) {
        WebCore::GraphicsContextGLANGLE::hint(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x3F6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v245 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v245 & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::lineWidth(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v245);
      }
      goto LABEL_1498;
    case 0x3F7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v219 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v219 & 0xFF00000000) != 0)
      {
        LODWORD(v2131[0]) = v219;
        if (v219 <= 0xFFFFFFFD)
        {
          if (v219) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::linkProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x3F8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2137, (uint64_t **)a2 + 5);
      uint64_t v10 = v4[1];
      uint64_t v11 = (uint64_t)*v4;
      unint64_t v21 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v10 < v21 || (unint64_t)v10 - v21 <= 3) {
        goto LABEL_1423;
      }
      uint64_t v23 = (unsigned int *)(v11 + v21);
      v4[2] = (WTF *)(v23 + 1);
      if (!v11) {
        goto LABEL_2890;
      }
      uint64_t v24 = *v23;
      IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int>>((unint64_t *)v2131, (uint64_t *)v4);
      if (!BYTE8(v2132)) {
        goto LABEL_1887;
      }
      *(_DWORD *)CFTypeRef cf = v24;
      *(_OWORD *)&cf[8] = *(_OWORD *)v2131;
      *(void *)&long long v2121 = v2132;
      BYTE8(v2121) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawArraysANGLE((uint64_t)this, v24, (uint64_t)&cf[8]);
      goto LABEL_1888;
    case 0x3F9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2137, (uint64_t **)a2 + 5);
      uint64_t v10 = v4[1];
      uint64_t v11 = (uint64_t)*v4;
      unint64_t v155 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v10 < v155 || (unint64_t)v10 - v155 <= 3) {
        goto LABEL_1423;
      }
      uint64_t v157 = (unsigned int *)(v11 + v155);
      v4[2] = (WTF *)(v157 + 1);
      if (!v11) {
        goto LABEL_2890;
      }
      uint64_t v158 = *v157;
      IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int,int>>(v2131, (uint64_t *)v4);
      if (!v2133) {
        goto LABEL_1887;
      }
      *(_DWORD *)CFTypeRef cf = v158;
      *(_OWORD *)&cf[8] = *(_OWORD *)v2131;
      long long v2121 = v2132;
      LOBYTE(v2122) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedANGLE((uint64_t)this, v158, (uint64_t)&cf[8]);
      goto LABEL_1888;
    case 0x3FA:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v164 = v4[1];
      uint64_t v165 = (uint64_t)*v4;
      unint64_t v166 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v164 < v166 || (unint64_t)v164 - v166 <= 3) {
        goto LABEL_1992;
      }
      char v168 = (unsigned int *)(v165 + v166);
      v4[2] = (WTF *)(v168 + 1);
      if (!v165) {
        goto LABEL_2894;
      }
      unint64_t v169 = (((unint64_t)v168 + 11) & 0xFFFFFFFFFFFFFFF8) - v165;
      if ((unint64_t)v164 < v169 || (unint64_t)v164 - v169 <= 7) {
        goto LABEL_1447;
      }
      uint64_t v171 = *v168;
      unint64_t v172 = *(void *)(((unint64_t)v168 + 11) & 0xFFFFFFFFFFFFFFF8);
      v4[2] = (WTF *)((((unint64_t)v168 + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (!v172)
      {
        uint64_t v174 = 0;
        uint64_t v176 = 0;
        uint64_t v178 = 0;
        uint64_t v179 = 0;
LABEL_301:
        *(_DWORD *)CFTypeRef cf = v171;
        *(void *)&cf[8] = v172;
        *(void *)&cf[16] = v174;
        *(void *)&long long v2121 = v176;
        *((void *)&v2121 + 1) = v178;
        uint64_t v2122 = v179;
        LOBYTE(v2123) = 1;
        WebKit::RemoteGraphicsContextGL::multiDrawArraysInstancedBaseInstanceANGLE((uint64_t)this, v171, (uint64_t)&cf[8]);
        goto LABEL_1450;
      }
      if (!(v172 >> 62))
      {
        uint64_t v173 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v172);
        if (v173)
        {
          uint64_t v174 = v173;
          uint64_t v175 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v172);
          if (v175)
          {
            uint64_t v176 = v175;
            uint64_t v177 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v172);
            if (v177)
            {
              uint64_t v178 = v177;
              uint64_t v179 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v172);
              if (v179) {
                goto LABEL_301;
              }
            }
          }
        }
      }
LABEL_1448:
      uint64_t v830 = (uint64_t)*v4;
      v831 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v832 = v4[3];
      if (!v832) {
        goto LABEL_1449;
      }
      goto LABEL_2091;
    case 0x3FB:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2137, (uint64_t **)a2 + 5);
      uint64_t v10 = v4[1];
      uint64_t v11 = (uint64_t)*v4;
      unint64_t v12 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v10 < v12 || (unint64_t)v10 - v12 <= 3) {
        goto LABEL_1423;
      }
      uint64_t v14 = (unsigned int *)(v11 + v12);
      v4[2] = (WTF *)(v14 + 1);
      if (!v11) {
        goto LABEL_2890;
      }
      uint64_t v15 = *v14;
      IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int>>((unint64_t *)v2131, (uint64_t *)v4);
      if (!BYTE8(v2132)) {
        goto LABEL_1887;
      }
      int8x16_t v16 = v4[1];
      int8x16_t v17 = *v4;
      unint64_t v18 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v16 < v18 || (unint64_t)v16 - v18 <= 3) {
        goto LABEL_1885;
      }
      uint64_t v19 = (int *)((char *)v17 + v18);
      v4[2] = (WTF *)(v19 + 1);
      if (!v17) {
        goto LABEL_2905;
      }
      int v20 = *v19;
      *(_DWORD *)CFTypeRef cf = v15;
      *(_OWORD *)&cf[8] = *(_OWORD *)v2131;
      *(void *)&long long v2121 = v2132;
      DWORD2(v2121) = v20;
      LOBYTE(v2122) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawElementsANGLE((uint64_t)this, v15, (uint64_t)&cf[8]);
      goto LABEL_1888;
    case 0x3FC:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2137, (uint64_t **)a2 + 5);
      uint64_t v10 = v4[1];
      uint64_t v11 = (uint64_t)*v4;
      unint64_t v211 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v10 >= v211 && (unint64_t)v10 - v211 > 3)
      {
        v213 = (unsigned int *)(v11 + v211);
        v4[2] = (WTF *)(v213 + 1);
        if (v11)
        {
          uint64_t v214 = *v213;
          IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int,int>>(v2131, (uint64_t *)v4);
          if (!v2133) {
            goto LABEL_1887;
          }
          int8x16_t v16 = v4[1];
          int8x16_t v17 = *v4;
          unint64_t v215 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if ((unint64_t)v16 < v215 || (unint64_t)v16 - v215 <= 3)
          {
LABEL_1885:
            v1127 = 0;
            uint64_t v1128 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v1129 = v4[3];
            if (v1129)
            {
              if (v16)
              {
                (*(void (**)(WTF *))(*(void *)v1129 + 16))(v1129);
                uint64_t v1128 = (uint64_t)*v4;
                v1127 = v4[1];
              }
              else
              {
                v1127 = 0;
                uint64_t v1128 = 0;
              }
            }
          }
          else
          {
            v216 = (int *)((char *)v17 + v215);
            v4[2] = (WTF *)(v216 + 1);
            if (v17)
            {
              int v217 = *v216;
              *(_DWORD *)CFTypeRef cf = v214;
              *(_OWORD *)&cf[8] = *(_OWORD *)v2131;
              long long v2121 = v2132;
              LODWORD(v2122) = v217;
              LOBYTE(v2123) = 1;
              WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedANGLE((uint64_t)this, v214, (uint64_t)&cf[8]);
              goto LABEL_1888;
            }
LABEL_2905:
            v1127 = v16;
            uint64_t v1128 = (uint64_t)v17;
          }
          void *v4 = 0;
          v4[1] = 0;
          v1130 = v4[3];
          if (v1130 && v1127) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v1130 + 16))(v1130, v1128);
          }
LABEL_1887:
          uint64_t v1131 = (uint64_t)*v4;
          v1132 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v1133 = v4[3];
          if (v1133 && v1132) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v1133 + 16))(v1133, v1131);
          }
LABEL_1888:
          v836 = (WTF **)&v2137;
          goto LABEL_1499;
        }
LABEL_2890:
        v813 = v10;
        uint64_t v814 = v11;
      }
      else
      {
LABEL_1423:
        v813 = 0;
        uint64_t v814 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v815 = v4[3];
        if (v815)
        {
          if (v10)
          {
            (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v815 + 16))(v815, v11, v10);
            uint64_t v814 = (uint64_t)*v4;
            v813 = v4[1];
          }
          else
          {
            v813 = 0;
            uint64_t v814 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v816 = v4[3];
      if (v816)
      {
LABEL_1425:
        if (v813) {
          (*(void (**)(WTF *, uint64_t))(*(void *)v816 + 16))(v816, v814);
        }
      }
      goto LABEL_1887;
    case 0x3FD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v164 = v4[1];
      uint64_t v165 = (uint64_t)*v4;
      unint64_t v181 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v164 < v181 || (unint64_t)v164 - v181 <= 3) {
        goto LABEL_1992;
      }
      v183 = (unsigned int *)(v165 + v181);
      v4[2] = (WTF *)(v183 + 1);
      if (!v165) {
        goto LABEL_2894;
      }
      unint64_t v184 = (((unint64_t)v183 + 11) & 0xFFFFFFFFFFFFFFF8) - v165;
      if ((unint64_t)v164 < v184 || (unint64_t)v164 - v184 <= 7)
      {
LABEL_1447:
        void *v4 = 0;
        v4[1] = 0;
        v829 = v4[3];
        if (v829)
        {
          if (v164)
          {
            (*(void (**)(WTF *))(*(void *)v829 + 16))(v829);
            uint64_t v1434 = (uint64_t)*v4;
            v1435 = v4[1];
            v1436 = v4[3];
            void *v4 = 0;
            v4[1] = 0;
            if (v1436)
            {
              if (v1435) {
                (*(void (**)(WTF *, uint64_t))(*(void *)v1436 + 16))(v1436, v1434);
              }
            }
          }
        }
        goto LABEL_1448;
      }
      uint64_t v186 = *v183;
      unint64_t v187 = (((unint64_t)v183 + 11) & 0xFFFFFFFFFFFFFFF8) + 8;
      unint64_t v188 = *(void *)(v165 + v184);
      v4[2] = (WTF *)v187;
      if (v188)
      {
        if (v188 >> 62) {
          goto LABEL_1448;
        }
        uint64_t v189 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v188);
        if (!v189) {
          goto LABEL_1448;
        }
        uint64_t v190 = v189;
        uint64_t v191 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v188);
        if (!v191) {
          goto LABEL_1448;
        }
        uint64_t v192 = v191;
        uint64_t v193 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v188);
        if (!v193) {
          goto LABEL_1448;
        }
        uint64_t v194 = v193;
        uint64_t v195 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v188);
        if (!v195) {
          goto LABEL_1448;
        }
        char v196 = (WTF *)v195;
        uint64_t v197 = IPC::Decoder::decodeSpan<int>((uint64_t *)v4, v188);
        if (!v197) {
          goto LABEL_1448;
        }
        unint64_t v198 = v188 & 0xFFFFFFFFFFFFFF00;
        uint64_t v199 = v188;
        uint64_t v164 = v4[1];
        unint64_t v187 = (unint64_t)v4[2];
        uint64_t v165 = (uint64_t)*v4;
      }
      else
      {
        unint64_t v198 = 0;
        uint64_t v190 = 0;
        uint64_t v192 = 0;
        uint64_t v194 = 0;
        char v196 = 0;
        uint64_t v199 = 0;
        uint64_t v197 = 0;
      }
      unint64_t v200 = ((v187 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v200 || (unint64_t)v164 - v200 <= 3) {
        goto LABEL_1992;
      }
      v202 = (unsigned int *)(v165 + v200);
      v4[2] = (WTF *)(v165 + v200 + 4);
      v203 = v164;
      uint64_t v204 = v165;
      if (!v165) {
        goto LABEL_1993;
      }
      unsigned int v205 = *v202;
      *(_DWORD *)CFTypeRef cf = v186;
      *(void *)&cf[8] = v199 | v198;
      *(void *)&cf[16] = v190;
      *(void *)&long long v2121 = v192;
      *((void *)&v2121 + 1) = v194;
      uint64_t v2122 = (uint64_t)v196;
      unint64_t v2123 = v197;
      unsigned int v2124 = v205;
      LOBYTE(v2126) = 1;
      WebKit::RemoteGraphicsContextGL::multiDrawElementsInstancedBaseVertexBaseInstanceANGLE((uint64_t)this, v186, (uint64_t)&cf[8]);
      goto LABEL_1450;
    case 0x3FF:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v246 = v4[1];
      uint64_t v247 = (uint64_t)*v4;
      unint64_t v248 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v246 < v248 || (unint64_t)v246 - v248 <= 3)
      {
        v899 = 0;
        uint64_t v900 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v901 = v4[3];
        if (v901)
        {
          if (v246)
          {
            (*(void (**)(WTF *))(*(void *)v901 + 16))(v901);
            uint64_t v900 = (uint64_t)*v4;
            v899 = v4[1];
          }
          else
          {
            v899 = 0;
            uint64_t v900 = 0;
          }
        }
        goto LABEL_1530;
      }
      unint64_t v250 = v247 + v248;
      v4[2] = (WTF *)(v250 + 4);
      if (!v247)
      {
        v899 = v246;
        uint64_t v900 = 0;
LABEL_1530:
        void *v4 = 0;
        v4[1] = 0;
        v902 = v4[3];
        if (v902 && v899) {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v902 + 16))(v902, v900, v899);
        }
        goto LABEL_1538;
      }
      unint64_t v251 = ((v250 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v247;
      if ((unint64_t)v246 >= v251 && (unint64_t)v246 - v251 > 3)
      {
        v4[2] = (WTF *)(((v250 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        WebCore::GraphicsContextGLANGLE::pixelStorei(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        goto LABEL_1498;
      }
      void *v4 = 0;
      v4[1] = 0;
      v904 = v4[3];
      if (v904)
      {
        if (v246)
        {
          (*(void (**)(WTF *))(*(void *)v904 + 16))(v904);
          uint64_t v1441 = (uint64_t)*v4;
          v1442 = v4[1];
          v1443 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (v1443)
          {
            if (v1442) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v1443 + 16))(v1443, v1441);
            }
          }
        }
      }
LABEL_1538:
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (!v791) {
        goto LABEL_1498;
      }
      goto LABEL_1503;
    case 0x40A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v243 = IPC::Decoder::decode<std::tuple<int,int>>((uint64_t *)v4);
      if (v244) {
        WebKit::RemoteGraphicsContextGL::reshape(this, v243, SHIDWORD(v243));
      }
      goto LABEL_1498;
    case 0x411:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<WebCore::SharedMemoryHandle>>((IPC::Decoder *)v4, (uint64_t)cf);
      if (cf[16])
      {
        WebKit::RemoteGraphicsContextGL::setSharedVideoFrameMemory((uint64_t)this);
        if (cf[16]) {
          goto LABEL_400;
        }
      }
      goto LABEL_1450;
    case 0x412:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<IPC::Semaphore>>((IPC::Decoder *)v4, (uint64_t)cf);
      if (!cf[8]) {
        goto LABEL_1450;
      }
      WebKit::RemoteGraphicsContextGL::setSharedVideoFrameSemaphore((uint64_t)this, (IPC::Semaphore *)cf);
      if (!cf[8]) {
        goto LABEL_1450;
      }
      IPC::Semaphore::destroy((IPC::Semaphore *)cf);
LABEL_400:
      WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)cf);
      goto LABEL_1450;
    case 0x414:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v206 = v4[1];
      uint64_t v207 = (uint64_t)*v4;
      unint64_t v208 = v4[2] - *v4;
      if ((unint64_t)v206 <= v208)
      {
        v865 = 0;
        uint64_t v866 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v867 = v4[3];
        if (v867)
        {
          if (v206)
          {
            (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v867 + 16))(v867, v207, v206);
            uint64_t v866 = (uint64_t)*v4;
            v865 = v4[1];
          }
          else
          {
            v865 = 0;
            uint64_t v866 = 0;
          }
        }
      }
      else
      {
        v209 = (unsigned __int8 *)(v207 + v208);
        v4[2] = (WTF *)(v209 + 1);
        if (v207)
        {
          unsigned int v210 = *v209;
          if (v210 < 3)
          {
            WebKit::RemoteGraphicsContextGL::simulateEventForTesting((uint64_t)this, v210);
            goto LABEL_1498;
          }
LABEL_1497:
          uint64_t v869 = (uint64_t)*v4;
          v870 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v871 = v4[3];
          if (!v871) {
            goto LABEL_1498;
          }
          if (!v870) {
            goto LABEL_1498;
          }
          (*(void (**)(WTF *, uint64_t))(*(void *)v871 + 16))(v871, v869);
          uint64_t v789 = (uint64_t)*v4;
          v790 = v4[1];
          v791 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (!v791) {
            goto LABEL_1498;
          }
          goto LABEL_1503;
        }
        v865 = v206;
        uint64_t v866 = 0;
      }
      void *v4 = 0;
      v4[1] = 0;
      v868 = v4[3];
      if (v868 && v865) {
        (*(void (**)(WTF *, uint64_t))(*(void *)v868 + 16))(v868, v866);
      }
      goto LABEL_1497;
    default:
      if (*((unsigned __int16 *)a3 + 25) <= 0x3C5u)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x3B0:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v164 = v4[1];
            uint64_t v165 = (uint64_t)*v4;
            unint64_t v265 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v164 < v265 || (unint64_t)v164 - v265 <= 3) {
              goto LABEL_1992;
            }
            unint64_t v267 = v165 + v265;
            v4[2] = (WTF *)(v267 + 4);
            if (!v165) {
              goto LABEL_2894;
            }
            unint64_t v268 = ((v267 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v268 || (unint64_t)v164 - v268 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(((v267 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v270 = ((((v267 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v270 || (unint64_t)v164 - v270 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v272 = v165 + v270;
            v4[2] = (WTF *)(v272 + 4);
            unint64_t v273 = ((v272 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v273 || (unint64_t)v164 - v273 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v275 = v165 + v273;
            v4[2] = (WTF *)(v275 + 4);
            unint64_t v276 = ((v275 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v276 || (unint64_t)v164 - v276 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v278 = v165 + v276;
            v4[2] = (WTF *)(v278 + 4);
            unint64_t v279 = ((v278 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v279 || (unint64_t)v164 - v279 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v281 = v165 + v279;
            v4[2] = (WTF *)(v281 + 4);
            unint64_t v282 = ((v281 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v282 || (unint64_t)v164 - v282 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(v165 + v282 + 4);
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
            if (!cf[16]) {
              goto LABEL_1449;
            }
            WebCore::GraphicsContextGLANGLE::compressedTexImage2D();
            goto LABEL_1450;
          case 0x3B1:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v253 = (unint64_t)v4[1];
            uint64_t v254 = (uint64_t)*v4;
            unint64_t v285 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v253 < v285 || v253 - v285 <= 3) {
              goto LABEL_2097;
            }
            v287 = (unsigned int *)(v254 + v285);
            v4[2] = (WTF *)(v287 + 1);
            if (!v254) {
              goto LABEL_2980;
            }
            unint64_t v288 = (((unint64_t)v287 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v288 || v253 - v288 <= 3) {
              goto LABEL_1769;
            }
            unsigned int v290 = *v287;
            v4[2] = (WTF *)(v254 + v288 + 4);
            uint64_t v292 = v254 + v288 + 7;
            int v291 = *(_DWORD *)(v254 + v288);
            unint64_t v293 = (v292 & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v293 || v253 - v293 <= 3) {
              goto LABEL_1769;
            }
            v295 = (unsigned int *)(v254 + v293);
            v4[2] = (WTF *)(v295 + 1);
            unsigned int v296 = *v295;
            unint64_t v297 = (((unint64_t)v295 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v297 || v253 - v297 <= 3) {
              goto LABEL_1769;
            }
            v299 = (int *)(v254 + v297);
            v4[2] = (WTF *)(v299 + 1);
            int v300 = *v299;
            unint64_t v301 = (((unint64_t)v299 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v301 || v253 - v301 <= 3) {
              goto LABEL_1769;
            }
            v303 = (int *)(v254 + v301);
            v4[2] = (WTF *)(v303 + 1);
            int v304 = *v303;
            unint64_t v305 = (((unint64_t)v303 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v305 || v253 - v305 <= 3) {
              goto LABEL_1769;
            }
            v307 = (int *)(v254 + v305);
            v4[2] = (WTF *)(v307 + 1);
            int v308 = *v307;
            unint64_t v309 = (((unint64_t)v307 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v309 || v253 - v309 <= 3) {
              goto LABEL_1769;
            }
            v311 = (int *)(v254 + v309);
            v4[2] = (WTF *)(v311 + 1);
            unint64_t v312 = (((unint64_t)v311 + 11) & 0xFFFFFFFFFFFFFFF8) - v254;
            if (v253 < v312 || v253 - v312 <= 7) {
              goto LABEL_1769;
            }
            int v314 = *v311;
            uint64_t v315 = *(void *)(((unint64_t)v311 + 11) & 0xFFFFFFFFFFFFFFF8);
            v4[2] = (WTF *)((((unint64_t)v311 + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
            WebCore::GraphicsContextGLANGLE::compressedTexImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v290, v291, v296, v300, v304, v308, v314, v315);
            goto LABEL_1498;
          case 0x3B2:
          case 0x3B3:
          case 0x3B6:
          case 0x3B7:
            goto LABEL_657;
          case 0x3B4:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v164 = v4[1];
            uint64_t v165 = (uint64_t)*v4;
            unint64_t v352 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v164 < v352 || (unint64_t)v164 - v352 <= 3) {
              goto LABEL_1992;
            }
            unint64_t v354 = v165 + v352;
            v4[2] = (WTF *)(v354 + 4);
            if (!v165) {
              goto LABEL_2894;
            }
            unint64_t v355 = ((v354 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v355 || (unint64_t)v164 - v355 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(((v354 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v357 = ((((v354 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v357 || (unint64_t)v164 - v357 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v359 = v165 + v357;
            v4[2] = (WTF *)(v359 + 4);
            unint64_t v360 = ((v359 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v360 || (unint64_t)v164 - v360 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v362 = v165 + v360;
            v4[2] = (WTF *)(v362 + 4);
            unint64_t v363 = ((v362 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v363 || (unint64_t)v164 - v363 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v365 = v165 + v363;
            v4[2] = (WTF *)(v365 + 4);
            unint64_t v366 = ((v365 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v366 || (unint64_t)v164 - v366 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v368 = v165 + v366;
            v4[2] = (WTF *)(v368 + 4);
            unint64_t v369 = ((v368 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v369 || (unint64_t)v164 - v369 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v371 = v165 + v369;
            v4[2] = (WTF *)(v371 + 4);
            unint64_t v372 = ((v371 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v372 || (unint64_t)v164 - v372 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(v165 + v372 + 4);
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
            if (!cf[16]) {
              goto LABEL_1449;
            }
            WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D();
            goto LABEL_1450;
          case 0x3B5:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v253 = (unint64_t)v4[1];
            uint64_t v254 = (uint64_t)*v4;
            unint64_t v316 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v253 < v316 || v253 - v316 <= 3) {
              goto LABEL_2097;
            }
            v318 = (unsigned int *)(v254 + v316);
            v4[2] = (WTF *)(v318 + 1);
            if (!v254) {
              goto LABEL_2980;
            }
            unint64_t v319 = (((unint64_t)v318 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v319 || v253 - v319 <= 3) {
              goto LABEL_1769;
            }
            unsigned int v321 = *v318;
            v4[2] = (WTF *)(v254 + v319 + 4);
            uint64_t v323 = v254 + v319 + 7;
            int v322 = *(_DWORD *)(v254 + v319);
            unint64_t v324 = (v323 & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v324 || v253 - v324 <= 3) {
              goto LABEL_1769;
            }
            v326 = (int *)(v254 + v324);
            v4[2] = (WTF *)(v326 + 1);
            int v327 = *v326;
            unint64_t v328 = (((unint64_t)v326 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v328 || v253 - v328 <= 3) {
              goto LABEL_1769;
            }
            v330 = (int *)(v254 + v328);
            v4[2] = (WTF *)(v330 + 1);
            int v331 = *v330;
            unint64_t v332 = (((unint64_t)v330 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v332 || v253 - v332 <= 3) {
              goto LABEL_1769;
            }
            v334 = (int *)(v254 + v332);
            v4[2] = (WTF *)(v334 + 1);
            int v335 = *v334;
            unint64_t v336 = (((unint64_t)v334 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v336 || v253 - v336 <= 3) {
              goto LABEL_1769;
            }
            v338 = (int *)(v254 + v336);
            v4[2] = (WTF *)(v338 + 1);
            int v339 = *v338;
            unint64_t v340 = (((unint64_t)v338 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v340 || v253 - v340 <= 3) {
              goto LABEL_1769;
            }
            v342 = (unsigned int *)(v254 + v340);
            v4[2] = (WTF *)(v342 + 1);
            unsigned int v343 = *v342;
            unint64_t v344 = (((unint64_t)v342 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
            if (v253 < v344 || v253 - v344 <= 3) {
              goto LABEL_1769;
            }
            v346 = (int *)(v254 + v344);
            v4[2] = (WTF *)(v346 + 1);
            unint64_t v347 = (((unint64_t)v346 + 11) & 0xFFFFFFFFFFFFFFF8) - v254;
            if (v253 < v347 || v253 - v347 <= 7) {
              goto LABEL_1769;
            }
            int v349 = *v346;
            v350 = (uint64_t *)(v254 + v347);
            uint64_t v351 = *v350;
            v4[2] = (WTF *)(v350 + 1);
            WebCore::GraphicsContextGLANGLE::compressedTexSubImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v321, v322, v327, v331, v335, v339, v343, v349, v351);
            goto LABEL_1498;
          case 0x3B8:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v253 = (unint64_t)v4[1];
            uint64_t v254 = (uint64_t)*v4;
            unint64_t v374 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v253 >= v374 && v253 - v374 > 3)
            {
              unint64_t v376 = v254 + v374;
              v4[2] = (WTF *)(v376 + 4);
              if (v254)
              {
                unint64_t v377 = ((v376 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
                if (v253 >= v377 && v253 - v377 > 3)
                {
                  v4[2] = (WTF *)(((v376 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  unint64_t v379 = ((((v376 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) - v254;
                  if (v253 >= v379 && v253 - v379 > 7)
                  {
                    unint64_t v381 = (((v376 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
                    v4[2] = (WTF *)(v381 + 8);
                    unint64_t v382 = ((v381 + 15) & 0xFFFFFFFFFFFFFFF8) - v254;
                    if (v253 >= v382 && v253 - v382 > 7)
                    {
                      unint64_t v384 = v254 + v382;
                      v4[2] = (WTF *)(v384 + 8);
                      unint64_t v385 = ((v384 + 15) & 0xFFFFFFFFFFFFFFF8) - v254;
                      if (v253 >= v385 && v253 - v385 > 7)
                      {
                        v4[2] = (WTF *)(((v384 + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
                        WebCore::GraphicsContextGLANGLE::copyBufferSubData(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                        goto LABEL_1498;
                      }
                    }
                  }
                }
LABEL_1769:
                void *v4 = 0;
                v4[1] = 0;
                v1063 = v4[3];
                if (v1063 && v253)
                {
LABEL_1771:
                  (*(void (**)(WTF *))(*(void *)v1063 + 16))(v1063);
                  uint64_t v1064 = (uint64_t)*v4;
                  v1065 = v4[1];
                  v1066 = v4[3];
                  void *v4 = 0;
                  v4[1] = 0;
                  if (v1066 && v1065) {
                    (*(void (**)(WTF *, uint64_t))(*(void *)v1066 + 16))(v1066, v1064);
                  }
                }
LABEL_2099:
                uint64_t v789 = (uint64_t)*v4;
                v1269 = v4[1];
                void *v4 = 0;
                v4[1] = 0;
                v791 = v4[3];
                if (!v791) {
                  goto LABEL_1498;
                }
                goto LABEL_2100;
              }
LABEL_2980:
              v1265 = (WTF *)v253;
              uint64_t v1266 = v254;
            }
            else
            {
LABEL_2097:
              v1265 = 0;
              uint64_t v1266 = 0;
              void *v4 = 0;
              v4[1] = 0;
              v1267 = v4[3];
              if (v1267)
              {
                if (v253)
                {
LABEL_2665:
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1267 + 16))(v1267, v254);
                  uint64_t v1266 = (uint64_t)*v4;
                  v1265 = v4[1];
                }
                else
                {
LABEL_2668:
                  v1265 = 0;
                  uint64_t v1266 = 0;
                }
              }
            }
LABEL_2098:
            void *v4 = 0;
            v4[1] = 0;
            v1268 = v4[3];
            if (v1268 && v1265) {
              (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1268 + 16))(v1268, v1266, v1265);
            }
            goto LABEL_2099;
          default:
LABEL_3094:
            JUMPOUT(0);
        }
      }
      return;
  }
  switch(*((_WORD *)a3 + 25))
  {
    case 0x3DD:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v255 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v255 || v253 - v255 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v257 = v254 + v255;
      v4[2] = (WTF *)(v257 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v258 = ((v257 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v258 || v253 - v258 <= 3) {
        goto LABEL_1769;
      }
      v4[2] = (WTF *)(((v257 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v260 = ((((v257 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v260 || v253 - v260 <= 3) {
        goto LABEL_1769;
      }
      unint64_t v262 = (((v257 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v4[2] = (WTF *)(v262 + 4);
      unint64_t v263 = ((v262 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v263 || v253 - v263 <= 3) {
        goto LABEL_1769;
      }
      v4[2] = (WTF *)(((v262 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::drawArraysInstanced(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1498;
    case 0x3DE:
    case 0x3DF:
    case 0x3E0:
    case 0x3E1:
    case 0x3E3:
    case 0x3E4:
    case 0x3E5:
    case 0x3E6:
    case 0x3E7:
    case 0x3E8:
    case 0x3E9:
    case 0x3EA:
    case 0x3EB:
    case 0x3EC:
    case 0x3ED:
    case 0x3EE:
    case 0x3EF:
    case 0x3F0:
    case 0x3F1:
    case 0x3F2:
    case 0x3F3:
    case 0x3F4:
    case 0x3F5:
    case 0x3F6:
    case 0x3F7:
    case 0x3F8:
    case 0x3F9:
    case 0x3FA:
    case 0x3FB:
    case 0x3FC:
    case 0x3FD:
    case 0x3FE:
    case 0x3FF:
    case 0x400:
    case 0x402:
    case 0x403:
    case 0x404:
    case 0x405:
    case 0x408:
    case 0x409:
    case 0x40A:
    case 0x40B:
    case 0x40D:
    case 0x40E:
    case 0x410:
    case 0x411:
    case 0x412:
    case 0x414:
    case 0x41D:
    case 0x41E:
    case 0x421:
    case 0x422:
    case 0x425:
    case 0x426:
    case 0x427:
    case 0x42C:
    case 0x42D:
    case 0x432:
    case 0x433:
    case 0x438:
    case 0x439:
    case 0x43E:
    case 0x43F:
    case 0x440:
    case 0x442:
    case 0x443:
    case 0x445:
    case 0x446:
    case 0x448:
    case 0x449:
    case 0x455:
    case 0x456:
    case 0x457:
    case 0x458:
    case 0x459:
      goto LABEL_657;
    case 0x3E2:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v675 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v675 || v253 - v675 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v677 = v254 + v675;
      v4[2] = (WTF *)(v677 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v678 = ((v677 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v678 || v253 - v678 <= 3) {
        goto LABEL_1769;
      }
      v4[2] = (WTF *)(((v677 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v680 = ((((v677 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v680 || v253 - v680 <= 3) {
        goto LABEL_1769;
      }
      unint64_t v682 = (((v677 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v4[2] = (WTF *)(v682 + 4);
      unint64_t v683 = ((v682 + 11) & 0xFFFFFFFFFFFFFFF8) - v254;
      if (v253 < v683 || v253 - v683 <= 7) {
        goto LABEL_1769;
      }
      unint64_t v685 = v254 + v683;
      v4[2] = (WTF *)(v685 + 8);
      unint64_t v686 = ((v685 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v686 || v253 - v686 <= 3) {
        goto LABEL_1769;
      }
      v4[2] = (WTF *)(((v685 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::drawElementsInstanced(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1498;
    case 0x401:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v700 = IPC::Decoder::decode<std::tuple<float,float>>((uint64_t *)v4);
      if (v701) {
        WebCore::GraphicsContextGLANGLE::polygonOffset(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v700, *((float *)&v700 + 1));
      }
      goto LABEL_1498;
    case 0x406:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v4, (uint64_t)cf);
      if (!cf[16]) {
        goto LABEL_1449;
      }
      uint64_t v164 = v4[1];
      uint64_t v165 = (uint64_t)*v4;
      unint64_t v688 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v164 < v688 || (unint64_t)v164 - v688 <= 3) {
        goto LABEL_1992;
      }
      unint64_t v689 = v165 + v688;
      v4[2] = (WTF *)(v689 + 4);
      if (!v165) {
        goto LABEL_2894;
      }
      unint64_t v690 = ((v689 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v690 || (unint64_t)v164 - v690 <= 3) {
        goto LABEL_2088;
      }
      v4[2] = (WTF *)(((v689 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v692 = ((((v689 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) - v165;
      if ((unint64_t)v164 < v692 || (unint64_t)v164 - v692 <= 7) {
        goto LABEL_2088;
      }
      unint64_t v694 = v165 + v692;
      v4[2] = (WTF *)(v694 + 8);
      unint64_t v695 = ((v694 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v695 || (unint64_t)v164 - v695 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v697 = v165 + v695;
      v4[2] = (WTF *)(v697 + 4);
      unint64_t v698 = ((v697 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v698 || (unint64_t)v164 - v698 <= 3) {
        goto LABEL_2088;
      }
      v4[2] = (WTF *)(((v697 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::readPixelsBufferObject(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(IntRect *)cf);
      goto LABEL_1450;
    case 0x407:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v708 = v4[1];
      uint64_t v709 = (uint64_t)*v4;
      unint64_t v710 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v708 < v710 || (unint64_t)v708 - v710 <= 3)
      {
        v1400 = 0;
        uint64_t v1401 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1402 = v4[3];
        if (v1402)
        {
          if (v708)
          {
            (*(void (**)(WTF *))(*(void *)v1402 + 16))(v1402);
            uint64_t v1401 = (uint64_t)*v4;
            v1400 = v4[1];
          }
          else
          {
            v1400 = 0;
            uint64_t v1401 = 0;
          }
        }
        goto LABEL_2326;
      }
      unint64_t v712 = v709 + v710;
      v4[2] = (WTF *)(v712 + 4);
      if (!v709)
      {
        v1400 = v708;
        uint64_t v1401 = 0;
LABEL_2326:
        void *v4 = 0;
        v4[1] = 0;
        v1403 = v4[3];
        if (v1403 && v1400) {
          (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1403 + 16))(v1403, v1401, v1400);
        }
        goto LABEL_2327;
      }
      unint64_t v713 = ((v712 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v709;
      if ((unint64_t)v708 >= v713 && (unint64_t)v708 - v713 > 3)
      {
        v4[2] = (WTF *)(((v712 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        unint64_t v715 = ((((v712 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v709;
        if ((unint64_t)v708 >= v715 && (unint64_t)v708 - v715 > 3)
        {
          unint64_t v717 = (((v712 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          v4[2] = (WTF *)(v717 + 4);
          unint64_t v718 = ((v717 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v709;
          if ((unint64_t)v708 >= v718 && (unint64_t)v708 - v718 > 3)
          {
            v4[2] = (WTF *)(((v717 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            WebCore::GraphicsContextGLANGLE::renderbufferStorage(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v1297 = v4[3];
      if (v1297)
      {
        if (v708)
        {
          (*(void (**)(WTF *))(*(void *)v1297 + 16))(v1297);
          uint64_t v1298 = (uint64_t)*v4;
          v1299 = v4[1];
          v1300 = v4[3];
          void *v4 = 0;
          v4[1] = 0;
          if (v1300)
          {
            if (v1299) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v1300 + 16))(v1300, v1298);
            }
          }
        }
      }
LABEL_2327:
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (!v791) {
        goto LABEL_1498;
      }
      goto LABEL_1503;
    case 0x40C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v702 = (unint64_t)v4[1];
      uint64_t v703 = (uint64_t)*v4;
      unint64_t v704 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v702 < v704 || v702 - v704 <= 3)
      {
        v1397 = 0;
        uint64_t v1398 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1399 = v4[3];
        if (!v1399) {
          goto LABEL_2342;
        }
        if (!v702)
        {
LABEL_3055:
          v1397 = 0;
          uint64_t v1398 = 0;
          goto LABEL_2342;
        }
        goto LABEL_2853;
      }
      v706 = (float *)(v703 + v704);
      v4[2] = (WTF *)(v706 + 1);
      if (!v703) {
        goto LABEL_2998;
      }
      if (v702 <= (unint64_t)v706 - v703 + 4)
      {
        v1397 = 0;
        uint64_t v1398 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1422 = v4[3];
        if (!v1422) {
          goto LABEL_2342;
        }
        if (!v702) {
          goto LABEL_3055;
        }
        (*(void (**)(WTF *))(*(void *)v1422 + 16))(v1422);
        v1397 = 0;
        v2016 = v4[1];
        v1399 = v4[3];
        void *v4 = 0;
        v4[1] = 0;
        uint64_t v1398 = 0;
        if (v1399 && v2016)
        {
LABEL_2853:
          (*(void (**)(WTF *))(*(void *)v1399 + 16))(v1399);
          uint64_t v1398 = (uint64_t)*v4;
          v1397 = v4[1];
        }
      }
      else
      {
        float v707 = *v706;
        v4[2] = (WTF *)((char *)v706 + 5);
        if (*((unsigned __int8 *)v706 + 4) < 2u)
        {
          WebCore::GraphicsContextGLANGLE::sampleCoverage(*((WebCore::GraphicsContextGLANGLE **)this + 7), v707);
          goto LABEL_1498;
        }
LABEL_2998:
        v1397 = (WTF *)v702;
        uint64_t v1398 = v703;
      }
LABEL_2342:
      void *v4 = 0;
      v4[1] = 0;
      v1423 = v4[3];
      if (v1423 && v1397) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1423 + 16))(v1423, v1398, v1397);
      }
      uint64_t v789 = (uint64_t)*v4;
      v790 = v4[1];
      void *v4 = 0;
      v4[1] = 0;
      v791 = v4[3];
      if (!v791) {
        goto LABEL_1498;
      }
LABEL_1503:
      if (v790) {
LABEL_1504:
      }
        (*(void (**)(WTF *, uint64_t))(*(void *)v791 + 16))(v791, v789);
LABEL_1498:
      v836 = (WTF **)cf;
      goto LABEL_1499;
    case 0x40F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,int,int,int>>((uint64_t)cf, v4);
      if (cf[16]) {
        WebCore::GraphicsContextGLANGLE::scissor(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1450;
    case 0x413:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,WTF::String>>((IPC::Decoder *)v4, cf);
      if (!cf[16]) {
        goto LABEL_1450;
      }
      WebKit::RemoteGraphicsContextGL::shaderSource((uint64_t)this, *(unsigned int *)cf, (WTF::String *)&cf[8]);
      if (!cf[16]) {
        goto LABEL_1450;
      }
      uint64_t v8 = *(WTF::StringImpl **)&cf[8];
      *(void *)&cf[8] = 0;
      if (!v8) {
        goto LABEL_1450;
      }
      goto LABEL_11;
    case 0x415:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v722 = v4[1];
      uint64_t v723 = (uint64_t)*v4;
      unint64_t v724 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v722 >= v724 && (unint64_t)v722 - v724 > 3)
      {
        unint64_t v726 = v723 + v724;
        v4[2] = (WTF *)(v726 + 4);
        if (v723)
        {
          unint64_t v727 = ((v726 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v723;
          if ((unint64_t)v722 >= v727 && (unint64_t)v722 - v727 > 3)
          {
            unint64_t v729 = (v726 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v729 + 4);
            unint64_t v730 = ((v729 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v723;
            if ((unint64_t)v722 >= v730 && (unint64_t)v722 - v730 > 3)
            {
              v732 = (unsigned int *)((v729 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v733 = *v732;
              v4[2] = (WTF *)(v732 + 1);
              uint64_t v734 = v733 | 0x100000000;
              goto LABEL_1272;
            }
          }
          void *v4 = 0;
          v4[1] = 0;
          v1341 = v4[3];
          if (v1341)
          {
            if (v722)
            {
              (*(void (**)(WTF *))(*(void *)v1341 + 16))(v1341);
              uint64_t v1342 = (uint64_t)*v4;
              v1343 = v4[1];
              v1344 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v1344)
              {
                if (v1343) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1344 + 16))(v1344, v1342);
                }
              }
            }
          }
LABEL_2331:
          uint64_t v1408 = (uint64_t)*v4;
          v1409 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v1410 = v4[3];
          if (v1410 && v1409) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v1410 + 16))(v1410, v1408);
          }
          uint64_t v734 = 0;
LABEL_1272:
          if ((v734 & 0xFF00000000) != 0) {
            WebCore::GraphicsContextGLANGLE::stencilFunc(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          }
          goto LABEL_1498;
        }
        v1404 = v722;
        uint64_t v1405 = 0;
      }
      else
      {
        v1404 = 0;
        uint64_t v1405 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1406 = v4[3];
        if (v1406)
        {
          if (v722)
          {
            (*(void (**)(WTF *))(*(void *)v1406 + 16))(v1406);
            uint64_t v1405 = (uint64_t)*v4;
            v1404 = v4[1];
          }
          else
          {
            v1404 = 0;
            uint64_t v1405 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v1407 = v4[3];
      if (v1407 && v1404) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1407 + 16))(v1407, v1405, v1404);
      }
      goto LABEL_2331;
    case 0x416:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v661 = v4[1];
      uint64_t v662 = (uint64_t)*v4;
      unint64_t v663 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v661 >= v663 && (unint64_t)v661 - v663 > 3)
      {
        unint64_t v665 = v662 + v663;
        v4[2] = (WTF *)(v665 + 4);
        if (v662)
        {
          unint64_t v666 = ((v665 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v662;
          if ((unint64_t)v661 >= v666 && (unint64_t)v661 - v666 > 3)
          {
            v4[2] = (WTF *)(((v665 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v668 = ((((v665 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v662;
            if ((unint64_t)v661 >= v668 && (unint64_t)v661 - v668 > 3)
            {
              unint64_t v670 = (((v665 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
              v4[2] = (WTF *)(v670 + 4);
              unint64_t v671 = ((v670 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v662;
              if ((unint64_t)v661 >= v671 && (unint64_t)v661 - v671 > 3)
              {
                v4[2] = (WTF *)(((v670 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                WebCore::GraphicsContextGLANGLE::stencilFuncSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                goto LABEL_1498;
              }
            }
          }
          void *v4 = 0;
          v4[1] = 0;
          v1293 = v4[3];
          if (v1293)
          {
            if (v661)
            {
              (*(void (**)(WTF *))(*(void *)v1293 + 16))(v1293);
              uint64_t v1294 = (uint64_t)*v4;
              v1295 = v4[1];
              v1296 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v1296)
              {
                if (v1295) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1296 + 16))(v1296, v1294);
                }
              }
            }
          }
LABEL_2320:
          uint64_t v789 = (uint64_t)*v4;
          v790 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v791 = v4[3];
          if (!v791) {
            goto LABEL_1498;
          }
          goto LABEL_1503;
        }
        v1393 = v661;
        uint64_t v1394 = 0;
      }
      else
      {
        v1393 = 0;
        uint64_t v1394 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1395 = v4[3];
        if (v1395)
        {
          if (v661)
          {
            (*(void (**)(WTF *))(*(void *)v1395 + 16))(v1395);
            uint64_t v1394 = (uint64_t)*v4;
            v1393 = v4[1];
          }
          else
          {
            v1393 = 0;
            uint64_t v1394 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v1396 = v4[3];
      if (v1396 && v1393) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1396 + 16))(v1396, v1394, v1393);
      }
      goto LABEL_2320;
    case 0x417:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::stencilMask(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x418:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v673) {
        WebCore::GraphicsContextGLANGLE::stencilMaskSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x419:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)v4);
      if ((v674 & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::stencilOp(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x41A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(v4, cf);
      if (cf[16]) {
        WebCore::GraphicsContextGLANGLE::stencilOpSeparate(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1450;
    case 0x41B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v164 = v4[1];
      uint64_t v165 = (uint64_t)*v4;
      unint64_t v638 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v164 < v638 || (unint64_t)v164 - v638 <= 3) {
        goto LABEL_1992;
      }
      unint64_t v640 = v165 + v638;
      v4[2] = (WTF *)(v640 + 4);
      if (!v165) {
        goto LABEL_2894;
      }
      unint64_t v641 = ((v640 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v641 || (unint64_t)v164 - v641 <= 3) {
        goto LABEL_2088;
      }
      v4[2] = (WTF *)(((v640 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v643 = ((((v640 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v643 || (unint64_t)v164 - v643 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v645 = v165 + v643;
      v4[2] = (WTF *)(v645 + 4);
      unint64_t v646 = ((v645 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v646 || (unint64_t)v164 - v646 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v648 = v165 + v646;
      v4[2] = (WTF *)(v648 + 4);
      unint64_t v649 = ((v648 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v649 || (unint64_t)v164 - v649 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v651 = v165 + v649;
      v4[2] = (WTF *)(v651 + 4);
      unint64_t v652 = ((v651 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v652 || (unint64_t)v164 - v652 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v654 = v165 + v652;
      v4[2] = (WTF *)(v654 + 4);
      unint64_t v655 = ((v654 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v655 || (unint64_t)v164 - v655 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v657 = v165 + v655;
      v4[2] = (WTF *)(v657 + 4);
      unint64_t v658 = ((v657 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v658 || (unint64_t)v164 - v658 <= 3) {
        goto LABEL_2088;
      }
      v4[2] = (WTF *)(v165 + v658 + 4);
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
      if (!cf[16]) {
        goto LABEL_1449;
      }
      WebCore::GraphicsContextGLANGLE::texImage2D();
      goto LABEL_1450;
    case 0x41C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v484 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v484 || v253 - v484 <= 3) {
        goto LABEL_2097;
      }
      v486 = (unsigned int *)(v254 + v484);
      v4[2] = (WTF *)(v486 + 1);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v487 = (((unint64_t)v486 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v487 || v253 - v487 <= 3) {
        goto LABEL_1769;
      }
      unsigned int v489 = *v486;
      v4[2] = (WTF *)(v254 + v487 + 4);
      uint64_t v491 = v254 + v487 + 7;
      int v490 = *(_DWORD *)(v254 + v487);
      unint64_t v492 = (v491 & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v492 || v253 - v492 <= 3) {
        goto LABEL_1769;
      }
      v494 = (unsigned int *)(v254 + v492);
      v4[2] = (WTF *)(v494 + 1);
      unsigned int v495 = *v494;
      unint64_t v496 = (((unint64_t)v494 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v496 || v253 - v496 <= 3) {
        goto LABEL_1769;
      }
      v498 = (int *)(v254 + v496);
      v4[2] = (WTF *)(v498 + 1);
      int v499 = *v498;
      unint64_t v500 = (((unint64_t)v498 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v500 || v253 - v500 <= 3) {
        goto LABEL_1769;
      }
      v502 = (int *)(v254 + v500);
      v4[2] = (WTF *)(v502 + 1);
      int v503 = *v502;
      unint64_t v504 = (((unint64_t)v502 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v504 || v253 - v504 <= 3) {
        goto LABEL_1769;
      }
      v506 = (int *)(v254 + v504);
      v4[2] = (WTF *)(v506 + 1);
      int v507 = *v506;
      unint64_t v508 = (((unint64_t)v506 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v508 || v253 - v508 <= 3) {
        goto LABEL_1769;
      }
      v510 = (unsigned int *)(v254 + v508);
      v4[2] = (WTF *)(v510 + 1);
      unsigned int v511 = *v510;
      unint64_t v512 = (((unint64_t)v510 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v512 || v253 - v512 <= 3) {
        goto LABEL_1769;
      }
      v514 = (unsigned int *)(v254 + v512);
      v4[2] = (WTF *)(v514 + 1);
      unint64_t v515 = (((unint64_t)v514 + 11) & 0xFFFFFFFFFFFFFFF8) - v254;
      if (v253 < v515 || v253 - v515 <= 7) {
        goto LABEL_1769;
      }
      unsigned int v517 = *v514;
      v518 = (uint64_t *)(v254 + v515);
      uint64_t v519 = *v518;
      v4[2] = (WTF *)(v518 + 1);
      WebCore::GraphicsContextGLANGLE::texImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v489, v490, v495, v499, v503, v507, v511, v517, v519);
      goto LABEL_1498;
    case 0x41F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,float>>(v4);
      if ((v660 & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::texParameterf(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v660);
      }
      goto LABEL_1498;
    case 0x420:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,int>>(v4);
      if ((v721 & 0xFF00000000) != 0) {
        WebCore::GraphicsContextGLANGLE::texParameteri(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x423:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      uint64_t v164 = v4[1];
      uint64_t v165 = (uint64_t)*v4;
      unint64_t v616 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v164 < v616 || (unint64_t)v164 - v616 <= 3) {
        goto LABEL_1992;
      }
      unint64_t v618 = v165 + v616;
      v4[2] = (WTF *)(v618 + 4);
      if (!v165) {
        goto LABEL_2894;
      }
      unint64_t v619 = ((v618 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v619 || (unint64_t)v164 - v619 <= 3) {
        goto LABEL_2088;
      }
      v4[2] = (WTF *)(((v618 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v621 = ((((v618 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v621 || (unint64_t)v164 - v621 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v623 = v165 + v621;
      v4[2] = (WTF *)(v623 + 4);
      unint64_t v624 = ((v623 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v624 || (unint64_t)v164 - v624 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v626 = v165 + v624;
      v4[2] = (WTF *)(v626 + 4);
      unint64_t v627 = ((v626 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v627 || (unint64_t)v164 - v627 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v629 = v165 + v627;
      v4[2] = (WTF *)(v629 + 4);
      unint64_t v630 = ((v629 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v630 || (unint64_t)v164 - v630 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v632 = v165 + v630;
      v4[2] = (WTF *)(v632 + 4);
      unint64_t v633 = ((v632 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v633 || (unint64_t)v164 - v633 <= 3) {
        goto LABEL_2088;
      }
      unint64_t v635 = v165 + v633;
      v4[2] = (WTF *)(v635 + 4);
      unint64_t v636 = ((v635 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
      if ((unint64_t)v164 < v636 || (unint64_t)v164 - v636 <= 3) {
        goto LABEL_2088;
      }
      v4[2] = (WTF *)(v165 + v636 + 4);
      IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
      if (!cf[16]) {
        goto LABEL_1449;
      }
      WebCore::GraphicsContextGLANGLE::texSubImage2D();
      goto LABEL_1450;
    case 0x424:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v520 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v520 || v253 - v520 <= 3) {
        goto LABEL_2097;
      }
      v522 = (unsigned int *)(v254 + v520);
      v4[2] = (WTF *)(v522 + 1);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v523 = (((unint64_t)v522 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v523 || v253 - v523 <= 3) {
        goto LABEL_1769;
      }
      unsigned int v525 = *v522;
      v4[2] = (WTF *)(v254 + v523 + 4);
      uint64_t v527 = v254 + v523 + 7;
      int v526 = *(_DWORD *)(v254 + v523);
      unint64_t v528 = (v527 & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v528 || v253 - v528 <= 3) {
        goto LABEL_1769;
      }
      v530 = (int *)(v254 + v528);
      v4[2] = (WTF *)(v530 + 1);
      int v531 = *v530;
      unint64_t v532 = (((unint64_t)v530 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v532 || v253 - v532 <= 3) {
        goto LABEL_1769;
      }
      v534 = (int *)(v254 + v532);
      v4[2] = (WTF *)(v534 + 1);
      int v535 = *v534;
      unint64_t v536 = (((unint64_t)v534 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v536 || v253 - v536 <= 3) {
        goto LABEL_1769;
      }
      v538 = (int *)(v254 + v536);
      v4[2] = (WTF *)(v538 + 1);
      int v539 = *v538;
      unint64_t v540 = (((unint64_t)v538 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v540 || v253 - v540 <= 3) {
        goto LABEL_1769;
      }
      v542 = (int *)(v254 + v540);
      v4[2] = (WTF *)(v542 + 1);
      int v543 = *v542;
      unint64_t v544 = (((unint64_t)v542 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v544 || v253 - v544 <= 3) {
        goto LABEL_1769;
      }
      v546 = (unsigned int *)(v254 + v544);
      v4[2] = (WTF *)(v546 + 1);
      unsigned int v547 = *v546;
      unint64_t v548 = (((unint64_t)v546 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v548 || v253 - v548 <= 3) {
        goto LABEL_1769;
      }
      v550 = (unsigned int *)(v254 + v548);
      v4[2] = (WTF *)(v550 + 1);
      unint64_t v551 = (((unint64_t)v550 + 11) & 0xFFFFFFFFFFFFFFF8) - v254;
      if (v253 < v551 || v253 - v551 <= 7) {
        goto LABEL_1769;
      }
      unsigned int v553 = *v550;
      v554 = (uint64_t *)(v254 + v551);
      uint64_t v555 = *v554;
      v4[2] = (WTF *)(v554 + 1);
      WebCore::GraphicsContextGLANGLE::texSubImage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v525, v526, v531, v535, v539, v543, v547, v553, v555);
      goto LABEL_1498;
    case 0x428:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v754 = v4[1];
      uint64_t v755 = (uint64_t)*v4;
      unint64_t v756 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v754 >= v756 && (unint64_t)v754 - v756 > 3)
      {
        unint64_t v758 = v755 + v756;
        v4[2] = (WTF *)(v758 + 4);
        if (v755)
        {
          unint64_t v759 = ((v758 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v755;
          if ((unint64_t)v754 >= v759 && (unint64_t)v754 - v759 > 3)
          {
            v761 = (float *)((v758 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            float v762 = *v761;
            v4[2] = (WTF *)(v761 + 1);
            WebCore::GraphicsContextGLANGLE::uniform1f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v762);
            goto LABEL_1498;
          }
          void *v4 = 0;
          v4[1] = 0;
          v1428 = v4[3];
          if (v1428)
          {
            if (v754)
            {
              (*(void (**)(WTF *))(*(void *)v1428 + 16))(v1428);
              uint64_t v2029 = (uint64_t)*v4;
              v2030 = v4[1];
              v2031 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v2031)
              {
                if (v2030) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v2031 + 16))(v2031, v2029);
                }
              }
            }
          }
LABEL_2354:
          uint64_t v789 = (uint64_t)*v4;
          v790 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v791 = v4[3];
          if (!v791) {
            goto LABEL_1498;
          }
          goto LABEL_1503;
        }
        v1418 = v754;
        uint64_t v1419 = 0;
      }
      else
      {
        v1418 = 0;
        uint64_t v1419 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1420 = v4[3];
        if (v1420)
        {
          if (v754)
          {
            (*(void (**)(WTF *))(*(void *)v1420 + 16))(v1420);
            uint64_t v1419 = (uint64_t)*v4;
            v1418 = v4[1];
          }
          else
          {
            v1418 = 0;
            uint64_t v1419 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v1421 = v4[3];
      if (v1421 && v1418) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1421 + 16))(v1421, v1419, v1418);
      }
      goto LABEL_2354;
    case 0x429:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform1fv();
      }
      goto LABEL_1450;
    case 0x42A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,int>>((uint64_t *)v4);
      if (v763) {
        WebCore::GraphicsContextGLANGLE::uniform1i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x42B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform1iv();
      }
      goto LABEL_1450;
    case 0x42E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v569 = v4[1];
      uint64_t v570 = (uint64_t)*v4;
      unint64_t v571 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v569 >= v571 && (unint64_t)v569 - v571 > 3)
      {
        v573 = (unsigned int *)(v570 + v571);
        v4[2] = (WTF *)(v573 + 1);
        if (v570)
        {
          unint64_t v574 = (((unint64_t)v573 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v570;
          if ((unint64_t)v569 >= v574 && (unint64_t)v569 - v574 > 3)
          {
            uint64_t v576 = *v573;
            v577 = (unsigned int *)(((unint64_t)v573 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            v4[2] = (WTF *)(v577 + 1);
            unint64_t v578 = (((unint64_t)v577 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v570;
            if ((unint64_t)v569 >= v578 && (unint64_t)v569 - v578 > 3)
            {
              v580 = (unsigned int *)(((unint64_t)v577 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v581 = *v580;
              v4[2] = (WTF *)(v580 + 1);
              uint64_t v582 = v581 | 0x100000000;
              unint64_t v583 = v576 | ((unint64_t)*v577 << 32);
              goto LABEL_983;
            }
          }
          void *v4 = 0;
          v4[1] = 0;
          v1337 = v4[3];
          if (v1337)
          {
            if (v569)
            {
              (*(void (**)(WTF *))(*(void *)v1337 + 16))(v1337);
              uint64_t v1338 = (uint64_t)*v4;
              v1339 = v4[1];
              v1340 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v1340)
              {
                if (v1339) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1340 + 16))(v1340, v1338);
                }
              }
            }
          }
LABEL_2316:
          uint64_t v1390 = (uint64_t)*v4;
          v1391 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v1392 = v4[3];
          if (v1392 && v1391) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v1392 + 16))(v1392, v1390);
          }
          HIDWORD(v583) = 0;
          uint64_t v582 = 0;
LABEL_983:
          if ((v582 & 0xFF00000000) != 0) {
            WebCore::GraphicsContextGLANGLE::uniform2f(*((WebCore::GraphicsContextGLANGLE **)this + 7), *((float *)&v583 + 1), *(float *)&v582);
          }
          goto LABEL_1498;
        }
        v1386 = v569;
        uint64_t v1387 = 0;
      }
      else
      {
        v1386 = 0;
        uint64_t v1387 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1388 = v4[3];
        if (v1388)
        {
          if (v569)
          {
            (*(void (**)(WTF *))(*(void *)v1388 + 16))(v1388);
            uint64_t v1387 = (uint64_t)*v4;
            v1386 = v4[1];
          }
          else
          {
            v1386 = 0;
            uint64_t v1387 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v1389 = v4[3];
      if (v1389 && v1386) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1389 + 16))(v1389, v1387, v1386);
      }
      goto LABEL_2316;
    case 0x42F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform2fv();
      }
      goto LABEL_1450;
    case 0x430:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v741 = v4[1];
      uint64_t v742 = (uint64_t)*v4;
      unint64_t v743 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v741 >= v743 && (unint64_t)v741 - v743 > 3)
      {
        unint64_t v745 = v742 + v743;
        v4[2] = (WTF *)(v745 + 4);
        if (v742)
        {
          unint64_t v746 = ((v745 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v742;
          if ((unint64_t)v741 >= v746 && (unint64_t)v741 - v746 > 3)
          {
            unint64_t v748 = (v745 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v748 + 4);
            unint64_t v749 = ((v748 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v742;
            if ((unint64_t)v741 >= v749 && (unint64_t)v741 - v749 > 3)
            {
              v751 = (unsigned int *)((v748 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v752 = *v751;
              v4[2] = (WTF *)(v751 + 1);
              uint64_t v753 = v752 | 0x100000000;
              goto LABEL_1307;
            }
          }
          void *v4 = 0;
          v4[1] = 0;
          v1345 = v4[3];
          if (v1345)
          {
            if (v741)
            {
              (*(void (**)(WTF *))(*(void *)v1345 + 16))(v1345);
              uint64_t v1346 = (uint64_t)*v4;
              v1347 = v4[1];
              v1348 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v1348)
              {
                if (v1347) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1348 + 16))(v1348, v1346);
                }
              }
            }
          }
LABEL_2335:
          uint64_t v1415 = (uint64_t)*v4;
          v1416 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v1417 = v4[3];
          if (v1417 && v1416) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v1417 + 16))(v1417, v1415);
          }
          uint64_t v753 = 0;
LABEL_1307:
          if ((v753 & 0xFF00000000) != 0) {
            WebCore::GraphicsContextGLANGLE::uniform2i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          }
          goto LABEL_1498;
        }
        v1411 = v741;
        uint64_t v1412 = 0;
      }
      else
      {
        v1411 = 0;
        uint64_t v1412 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1413 = v4[3];
        if (v1413)
        {
          if (v741)
          {
            (*(void (**)(WTF *))(*(void *)v1413 + 16))(v1413);
            uint64_t v1412 = (uint64_t)*v4;
            v1411 = v4[1];
          }
          else
          {
            v1411 = 0;
            uint64_t v1412 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v1414 = v4[3];
      if (v1414 && v1411) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1414 + 16))(v1414, v1412, v1411);
      }
      goto LABEL_2335;
    case 0x431:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform2iv();
      }
      goto LABEL_1450;
    case 0x434:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v584 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v584 || v253 - v584 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v586 = v254 + v584;
      v4[2] = (WTF *)(v586 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v587 = ((v586 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v587 || v253 - v587 <= 3) {
        goto LABEL_1769;
      }
      v589 = (float *)((v586 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)(v589 + 1);
      float v590 = *v589;
      unint64_t v591 = (((unint64_t)v589 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v591 || v253 - v591 <= 3) {
        goto LABEL_1769;
      }
      v593 = (float *)(v254 + v591);
      v4[2] = (WTF *)(v593 + 1);
      unint64_t v594 = (((unint64_t)v593 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v594 || v253 - v594 <= 3) {
        goto LABEL_1769;
      }
      float v596 = *v593;
      float v597 = *(float *)(((unint64_t)v593 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)((((unint64_t)v593 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::uniform3f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v590, v596, v597);
      goto LABEL_1498;
    case 0x435:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform3fv();
      }
      goto LABEL_1450;
    case 0x436:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,int,int,int>>((uint64_t)cf, v4);
      if (cf[16]) {
        WebCore::GraphicsContextGLANGLE::uniform3i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1450;
    case 0x437:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform3iv();
      }
      goto LABEL_1450;
    case 0x43A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v598 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v598 || v253 - v598 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v600 = v254 + v598;
      v4[2] = (WTF *)(v600 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v601 = ((v600 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v601 || v253 - v601 <= 3) {
        goto LABEL_1769;
      }
      v603 = (float *)((v600 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)(v603 + 1);
      float v604 = *v603;
      unint64_t v605 = (((unint64_t)v603 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v605 || v253 - v605 <= 3) {
        goto LABEL_1769;
      }
      v607 = (float *)(v254 + v605);
      v4[2] = (WTF *)(v607 + 1);
      float v608 = *v607;
      unint64_t v609 = (((unint64_t)v607 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v609 || v253 - v609 <= 3) {
        goto LABEL_1769;
      }
      v611 = (float *)(v254 + v609);
      v4[2] = (WTF *)(v611 + 1);
      unint64_t v612 = (((unint64_t)v611 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v612 || v253 - v612 <= 3) {
        goto LABEL_1769;
      }
      float v614 = *v611;
      float v615 = *(float *)(((unint64_t)v611 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)((((unint64_t)v611 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::uniform4f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v604, v608, v614, v615);
      goto LABEL_1498;
    case 0x43B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform4fv();
      }
      goto LABEL_1450;
    case 0x43C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v556 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v556 || v253 - v556 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v558 = v254 + v556;
      v4[2] = (WTF *)(v558 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v559 = ((v558 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v559 || v253 - v559 <= 3) {
        goto LABEL_1769;
      }
      v4[2] = (WTF *)(((v558 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v561 = ((((v558 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v561 || v253 - v561 <= 3) {
        goto LABEL_1769;
      }
      unint64_t v563 = (((v558 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v4[2] = (WTF *)(v563 + 4);
      unint64_t v564 = ((v563 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v564 || v253 - v564 <= 3) {
        goto LABEL_1769;
      }
      unint64_t v566 = v254 + v564;
      v4[2] = (WTF *)(v566 + 4);
      unint64_t v567 = ((v566 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v567 || v253 - v567 <= 3) {
        goto LABEL_1769;
      }
      v4[2] = (WTF *)(((v566 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::uniform4i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      goto LABEL_1498;
    case 0x43D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>((uint64_t)cf, (uint64_t *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniform4iv();
      }
      goto LABEL_1450;
    case 0x441:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniformMatrix2fv();
      }
      goto LABEL_1450;
    case 0x444:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniformMatrix3fv();
      }
      goto LABEL_1450;
    case 0x447:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
      if ((_BYTE)v2121) {
        WebCore::GraphicsContextGLANGLE::uniformMatrix4fv();
      }
      goto LABEL_1450;
    case 0x44A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v483 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v483 & 0xFF00000000) != 0)
      {
        LODWORD(v2131[0]) = v483;
        if (v483 <= 0xFFFFFFFD)
        {
          if (v483) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::useProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x44B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      uint64_t v720 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
      if ((v720 & 0xFF00000000) != 0)
      {
        LODWORD(v2131[0]) = v720;
        if (v720 <= 0xFFFFFFFD)
        {
          if (v720) {
            LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
          }
          WebCore::GraphicsContextGLANGLE::validateProgram(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
      }
      goto LABEL_1498;
    case 0x44C:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v426 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v426 || v253 - v426 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v428 = v254 + v426;
      v4[2] = (WTF *)(v428 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v429 = ((v428 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v429 || v253 - v429 <= 3) {
        goto LABEL_1769;
      }
      v431 = (float *)((v428 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      float v432 = *v431;
      v4[2] = (WTF *)(v431 + 1);
      WebCore::GraphicsContextGLANGLE::vertexAttrib1f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v432);
      goto LABEL_1498;
    case 0x44D:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v735 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v735 || v253 - v735 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v737 = v254 + v735;
      v4[2] = (WTF *)(v737 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v738 = ((v737 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 >= v738 && v253 - v738 > 3)
      {
        v4[2] = (WTF *)(v254 + v738 + 4);
        char v740 = 1;
        goto LABEL_1288;
      }
      void *v4 = 0;
      v4[1] = 0;
      v1427 = v4[3];
      if (!v1427 || !v253) {
        goto LABEL_2352;
      }
      (*(void (**)(WTF *))(*(void *)v1427 + 16))(v1427);
      uint64_t v2026 = (uint64_t)*v4;
      v2027 = v4[1];
      v2028 = v4[3];
      void *v4 = 0;
      v4[1] = 0;
      char v740 = 0;
      if (v2028 && v2027)
      {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2028 + 16))(v2028, v2026, v2027);
LABEL_2352:
        char v740 = 0;
      }
LABEL_1288:
      if (!v740) {
        goto LABEL_2099;
      }
      WebCore::GraphicsContextGLANGLE::vertexAttrib1fv();
      goto LABEL_1498;
    case 0x44E:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      v411 = v4[1];
      uint64_t v412 = (uint64_t)*v4;
      unint64_t v413 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if ((unint64_t)v411 >= v413 && (unint64_t)v411 - v413 > 3)
      {
        v415 = (unsigned int *)(v412 + v413);
        v4[2] = (WTF *)(v415 + 1);
        if (v412)
        {
          unint64_t v416 = (((unint64_t)v415 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v412;
          if ((unint64_t)v411 >= v416 && (unint64_t)v411 - v416 > 3)
          {
            uint64_t v418 = *v415;
            v419 = (unsigned int *)(((unint64_t)v415 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            v4[2] = (WTF *)(v419 + 1);
            unint64_t v420 = (((unint64_t)v419 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v412;
            if ((unint64_t)v411 >= v420 && (unint64_t)v411 - v420 > 3)
            {
              v422 = (unsigned int *)(((unint64_t)v419 + 7) & 0xFFFFFFFFFFFFFFFCLL);
              uint64_t v423 = *v422;
              v4[2] = (WTF *)(v422 + 1);
              uint64_t v424 = v423 | 0x100000000;
              unint64_t v425 = v418 | ((unint64_t)*v419 << 32);
              goto LABEL_720;
            }
          }
          void *v4 = 0;
          v4[1] = 0;
          v1333 = v4[3];
          if (v1333)
          {
            if (v411)
            {
              (*(void (**)(WTF *))(*(void *)v1333 + 16))(v1333);
              uint64_t v1334 = (uint64_t)*v4;
              v1335 = v4[1];
              v1336 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v1336)
              {
                if (v1335) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1336 + 16))(v1336, v1334);
                }
              }
            }
          }
LABEL_2312:
          uint64_t v1383 = (uint64_t)*v4;
          v1384 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v1385 = v4[3];
          if (v1385 && v1384) {
            (*(void (**)(WTF *, uint64_t))(*(void *)v1385 + 16))(v1385, v1383);
          }
          HIDWORD(v425) = 0;
          uint64_t v424 = 0;
LABEL_720:
          if ((v424 & 0xFF00000000) != 0) {
            WebCore::GraphicsContextGLANGLE::vertexAttrib2f(*((WebCore::GraphicsContextGLANGLE **)this + 7), *((float *)&v425 + 1), *(float *)&v424);
          }
          goto LABEL_1498;
        }
        v1379 = v411;
        uint64_t v1380 = 0;
      }
      else
      {
        v1379 = 0;
        uint64_t v1380 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1381 = v4[3];
        if (v1381)
        {
          if (v411)
          {
            (*(void (**)(WTF *))(*(void *)v1381 + 16))(v1381);
            uint64_t v1380 = (uint64_t)*v4;
            v1379 = v4[1];
          }
          else
          {
            v1379 = 0;
            uint64_t v1380 = 0;
          }
        }
      }
      void *v4 = 0;
      v4[1] = 0;
      v1382 = v4[3];
      if (v1382 && v1379) {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1382 + 16))(v1382, v1380, v1379);
      }
      goto LABEL_2312;
    case 0x44F:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v471 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v471 || v253 - v471 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v473 = v254 + v471;
      v4[2] = (WTF *)(v473 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v474 = ((v473 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 >= v474 && v253 - v474 > 7)
      {
        v4[2] = (WTF *)(v254 + v474 + 8);
        char v476 = 1;
        goto LABEL_813;
      }
      void *v4 = 0;
      v4[1] = 0;
      v1425 = v4[3];
      if (!v1425 || !v253) {
        goto LABEL_2348;
      }
      (*(void (**)(WTF *))(*(void *)v1425 + 16))(v1425);
      uint64_t v2020 = (uint64_t)*v4;
      v2021 = v4[1];
      v2022 = v4[3];
      void *v4 = 0;
      v4[1] = 0;
      char v476 = 0;
      if (v2022 && v2021)
      {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2022 + 16))(v2022, v2020, v2021);
LABEL_2348:
        char v476 = 0;
      }
LABEL_813:
      if (!v476) {
        goto LABEL_2099;
      }
      WebCore::GraphicsContextGLANGLE::vertexAttrib2fv();
      goto LABEL_1498;
    case 0x450:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v433 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v433 || v253 - v433 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v435 = v254 + v433;
      v4[2] = (WTF *)(v435 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v436 = ((v435 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v436 || v253 - v436 <= 3) {
        goto LABEL_1769;
      }
      v438 = (float *)((v435 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)(v438 + 1);
      float v439 = *v438;
      unint64_t v440 = (((unint64_t)v438 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v440 || v253 - v440 <= 3) {
        goto LABEL_1769;
      }
      v442 = (float *)(v254 + v440);
      v4[2] = (WTF *)(v442 + 1);
      unint64_t v443 = (((unint64_t)v442 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v443 || v253 - v443 <= 3) {
        goto LABEL_1769;
      }
      float v445 = *v442;
      float v446 = *(float *)(((unint64_t)v442 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)((((unint64_t)v442 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::vertexAttrib3f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v439, v445, v446);
      goto LABEL_1498;
    case 0x451:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v477 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v477 || v253 - v477 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v479 = v254 + v477;
      v4[2] = (WTF *)(v479 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v480 = ((v479 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 >= v480 && v253 - v480 > 0xB)
      {
        v4[2] = (WTF *)(v254 + v480 + 12);
        char v482 = 1;
        goto LABEL_827;
      }
      void *v4 = 0;
      v4[1] = 0;
      v1426 = v4[3];
      if (!v1426 || !v253) {
        goto LABEL_2350;
      }
      (*(void (**)(WTF *))(*(void *)v1426 + 16))(v1426);
      uint64_t v2023 = (uint64_t)*v4;
      v2024 = v4[1];
      v2025 = v4[3];
      void *v4 = 0;
      v4[1] = 0;
      char v482 = 0;
      if (v2025 && v2024)
      {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2025 + 16))(v2025, v2023, v2024);
LABEL_2350:
        char v482 = 0;
      }
LABEL_827:
      if (!v482) {
        goto LABEL_2099;
      }
      WebCore::GraphicsContextGLANGLE::vertexAttrib3fv();
      goto LABEL_1498;
    case 0x452:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v453 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v453 || v253 - v453 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v455 = v254 + v453;
      v4[2] = (WTF *)(v455 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v456 = ((v455 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v456 || v253 - v456 <= 3) {
        goto LABEL_1769;
      }
      v458 = (float *)((v455 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)(v458 + 1);
      float v459 = *v458;
      unint64_t v460 = (((unint64_t)v458 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v460 || v253 - v460 <= 3) {
        goto LABEL_1769;
      }
      v462 = (float *)(v254 + v460);
      v4[2] = (WTF *)(v462 + 1);
      float v463 = *v462;
      unint64_t v464 = (((unint64_t)v462 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v464 || v253 - v464 <= 3) {
        goto LABEL_1769;
      }
      v466 = (float *)(v254 + v464);
      v4[2] = (WTF *)(v466 + 1);
      unint64_t v467 = (((unint64_t)v466 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v467 || v253 - v467 <= 3) {
        goto LABEL_1769;
      }
      float v469 = *v466;
      float v470 = *(float *)(((unint64_t)v466 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      v4[2] = (WTF *)((((unint64_t)v466 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      WebCore::GraphicsContextGLANGLE::vertexAttrib4f(*((WebCore::GraphicsContextGLANGLE **)this + 7), v459, v463, v469, v470);
      goto LABEL_1498;
    case 0x453:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v447 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v447 || v253 - v447 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v449 = v254 + v447;
      v4[2] = (WTF *)(v449 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v450 = ((v449 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 >= v450 && v253 - v450 > 0xF)
      {
        v4[2] = (WTF *)(v254 + v450 + 16);
        char v452 = 1;
        goto LABEL_772;
      }
      void *v4 = 0;
      v4[1] = 0;
      v1424 = v4[3];
      if (!v1424 || !v253) {
        goto LABEL_2346;
      }
      (*(void (**)(WTF *))(*(void *)v1424 + 16))(v1424);
      uint64_t v2017 = (uint64_t)*v4;
      v2018 = v4[1];
      v2019 = v4[3];
      void *v4 = 0;
      v4[1] = 0;
      char v452 = 0;
      if (v2019 && v2018)
      {
        (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2019 + 16))(v2019, v2017, v2018);
LABEL_2346:
        char v452 = 0;
      }
LABEL_772:
      if (!v452) {
        goto LABEL_2099;
      }
      WebCore::GraphicsContextGLANGLE::vertexAttrib4fv();
      goto LABEL_1498;
    case 0x454:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
      if (v764) {
        WebCore::GraphicsContextGLANGLE::vertexAttribDivisor(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1498;
    case 0x45A:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
      unint64_t v253 = (unint64_t)v4[1];
      uint64_t v254 = (uint64_t)*v4;
      unint64_t v765 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
      if (v253 < v765 || v253 - v765 <= 3) {
        goto LABEL_2097;
      }
      unint64_t v767 = v254 + v765;
      v4[2] = (WTF *)(v767 + 4);
      if (!v254) {
        goto LABEL_2980;
      }
      unint64_t v768 = ((v767 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v768 || v253 - v768 <= 3) {
        goto LABEL_1769;
      }
      v4[2] = (WTF *)(((v767 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
      unint64_t v770 = ((((v767 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v254;
      if (v253 < v770 || v253 - v770 <= 3) {
        goto LABEL_1769;
      }
      unint64_t v772 = (((v767 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
      v4[2] = (WTF *)(v772 + 4);
      if (v253 > v772 + 4 - v254)
      {
        v4[2] = (WTF *)(v772 + 5);
        if (*(unsigned __int8 *)(v772 + 4) >= 2u) {
          goto LABEL_2980;
        }
        unint64_t v773 = ((v772 + 8) & 0xFFFFFFFFFFFFFFFCLL) - v254;
        if (v253 >= v773 && v253 - v773 > 3)
        {
          unint64_t v775 = (v772 + 8) & 0xFFFFFFFFFFFFFFFCLL;
          v4[2] = (WTF *)(v775 + 4);
          unint64_t v776 = ((v775 + 11) & 0xFFFFFFFFFFFFFFF8) - v254;
          if (v253 >= v776 && v253 - v776 > 7)
          {
            v4[2] = (WTF *)(((v775 + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
            WebCore::GraphicsContextGLANGLE::vertexAttribPointer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          }
        }
        void *v4 = 0;
        v4[1] = 0;
        v1063 = v4[3];
        if (!v1063) {
          goto LABEL_2099;
        }
        goto LABEL_1771;
      }
      v1265 = 0;
      uint64_t v1266 = 0;
      void *v4 = 0;
      v4[1] = 0;
      v1429 = v4[3];
      if (!v1429) {
        goto LABEL_2098;
      }
      if (!v253) {
        goto LABEL_2668;
      }
      (*(void (**)(WTF *))(*(void *)v1429 + 16))(v1429);
      v1265 = 0;
      uint64_t v254 = (uint64_t)*v4;
      v1430 = v4[1];
      v1267 = v4[3];
      void *v4 = 0;
      v4[1] = 0;
      uint64_t v1266 = 0;
      if (v1267 && v1430) {
        goto LABEL_2665;
      }
      goto LABEL_2098;
    case 0x45B:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
      IPC::Decoder::decode<std::tuple<int,int,int,int>>((uint64_t)cf, v4);
      if (cf[16]) {
        WebCore::GraphicsContextGLANGLE::viewport(*((WebCore::GraphicsContextGLANGLE **)this + 7));
      }
      goto LABEL_1450;
    default:
      if (v6 == 966)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
        uint64_t v778 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
        if ((v778 & 0xFF00000000) == 0) {
          goto LABEL_1450;
        }
        LODWORD(v2137) = v778;
        if (v778 > 0xFFFFFFFD) {
          goto LABEL_1450;
        }
        int Buffer = WebCore::GraphicsContextGLANGLE::createVertexArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        goto LABEL_307;
      }
      if (v6 == 980)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
        uint64_t v284 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
        if ((v284 & 0xFF00000000) != 0 && (v284 + 2) >= 3)
        {
          WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v284);
          WebCore::GraphicsContextGLANGLE::deleteVertexArray(*((WebCore::GraphicsContextGLANGLE **)this + 7));
        }
        goto LABEL_1498;
      }
LABEL_657:
      if (*((unsigned __int16 *)a3 + 25) > 0x3FDu)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x41D:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v164 = v4[1];
            uint64_t v165 = (uint64_t)*v4;
            unint64_t v388 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v164 < v388 || (unint64_t)v164 - v388 <= 3) {
              goto LABEL_1992;
            }
            unint64_t v389 = v165 + v388;
            v4[2] = (WTF *)(v389 + 4);
            if (!v165) {
              goto LABEL_2894;
            }
            unint64_t v390 = ((v389 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v390 || (unint64_t)v164 - v390 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(((v389 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v391 = ((((v389 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v391 || (unint64_t)v164 - v391 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v393 = v165 + v391;
            v4[2] = (WTF *)(v393 + 4);
            unint64_t v394 = ((v393 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v394 || (unint64_t)v164 - v394 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v396 = v165 + v394;
            v4[2] = (WTF *)(v396 + 4);
            unint64_t v397 = ((v396 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v397 || (unint64_t)v164 - v397 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v399 = v165 + v397;
            v4[2] = (WTF *)(v399 + 4);
            unint64_t v400 = ((v399 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v400 || (unint64_t)v164 - v400 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v402 = v165 + v400;
            v4[2] = (WTF *)(v402 + 4);
            unint64_t v403 = ((v402 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v403 || (unint64_t)v164 - v403 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v405 = v165 + v403;
            v4[2] = (WTF *)(v405 + 4);
            unint64_t v406 = ((v405 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v406 || (unint64_t)v164 - v406 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v408 = v165 + v406;
            v4[2] = (WTF *)(v408 + 4);
            unint64_t v409 = ((v408 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v409 || (unint64_t)v164 - v409 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(v165 + v409 + 4);
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
            if (!cf[16]) {
              goto LABEL_1449;
            }
            WebCore::GraphicsContextGLANGLE::texImage3D();
            goto LABEL_1450;
          case 0x41E:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1134 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1134 || v842 - v1134 <= 3) {
              goto LABEL_2376;
            }
            v1135 = (unsigned int *)(v843 + v1134);
            v4[2] = (WTF *)(v1135 + 1);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1136 = (((unint64_t)v1135 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1136 || v842 - v1136 <= 3) {
              goto LABEL_2294;
            }
            unsigned int v1137 = *v1135;
            v4[2] = (WTF *)(v843 + v1136 + 4);
            uint64_t v1139 = v843 + v1136 + 7;
            int v1138 = *(_DWORD *)(v843 + v1136);
            unint64_t v1140 = (v1139 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1140 || v842 - v1140 <= 3) {
              goto LABEL_2294;
            }
            v1142 = (int *)(v843 + v1140);
            v4[2] = (WTF *)(v1142 + 1);
            int v1143 = *v1142;
            unint64_t v1144 = (((unint64_t)v1142 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1144 || v842 - v1144 <= 3) {
              goto LABEL_2294;
            }
            v1146 = (int *)(v843 + v1144);
            v4[2] = (WTF *)(v1146 + 1);
            int v1147 = *v1146;
            unint64_t v1148 = (((unint64_t)v1146 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1148 || v842 - v1148 <= 3) {
              goto LABEL_2294;
            }
            v1150 = (int *)(v843 + v1148);
            v4[2] = (WTF *)(v1150 + 1);
            int v1151 = *v1150;
            unint64_t v1152 = (((unint64_t)v1150 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1152 || v842 - v1152 <= 3) {
              goto LABEL_2294;
            }
            v1154 = (int *)(v843 + v1152);
            v4[2] = (WTF *)(v1154 + 1);
            int v1155 = *v1154;
            unint64_t v1156 = (((unint64_t)v1154 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1156 || v842 - v1156 <= 3) {
              goto LABEL_2294;
            }
            v1158 = (int *)(v843 + v1156);
            v4[2] = (WTF *)(v1158 + 1);
            int v1159 = *v1158;
            unint64_t v1160 = (((unint64_t)v1158 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1160 || v842 - v1160 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(v843 + v1160 + 4);
            uint64_t v1163 = v843 + v1160 + 7;
            unsigned int v1162 = *(_DWORD *)(v843 + v1160);
            unint64_t v1164 = (v1163 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1164 || v842 - v1164 <= 3) {
              goto LABEL_2294;
            }
            v1166 = (unsigned int *)(v843 + v1164);
            v4[2] = (WTF *)(v1166 + 1);
            unint64_t v1167 = (((unint64_t)v1166 + 11) & 0xFFFFFFFFFFFFFFF8) - v843;
            if (v842 < v1167 || v842 - v1167 <= 7) {
              goto LABEL_2294;
            }
            unsigned int v1169 = *v1166;
            v1170 = (uint64_t *)(v843 + v1167);
            uint64_t v1171 = *v1170;
            v4[2] = (WTF *)(v1170 + 1);
            WebCore::GraphicsContextGLANGLE::texImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1137, v1138, v1143, v1147, v1151, v1155, v1159, v1162, v1169, v1171);
            goto LABEL_1498;
          case 0x41F:
          case 0x420:
          case 0x423:
          case 0x424:
          case 0x428:
          case 0x429:
          case 0x42A:
          case 0x42B:
          case 0x42E:
          case 0x42F:
          case 0x430:
          case 0x431:
          case 0x434:
          case 0x435:
          case 0x436:
          case 0x437:
          case 0x43A:
          case 0x43B:
          case 0x43C:
          case 0x43D:
          case 0x441:
          case 0x444:
          case 0x447:
          case 0x44A:
          case 0x44B:
          case 0x44C:
          case 0x44D:
          case 0x44E:
          case 0x44F:
          case 0x450:
          case 0x451:
          case 0x452:
          case 0x453:
          case 0x454:
          case 0x45A:
          case 0x45B:
            goto LABEL_1544;
          case 0x421:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, v4);
            if (cf[20]) {
              WebCore::GraphicsContextGLANGLE::texStorage2D(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1450;
          case 0x422:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1092 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1092 || v842 - v1092 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1093 = v843 + v1092;
            v4[2] = (WTF *)(v1093 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1094 = ((v1093 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1094 || v842 - v1094 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1093 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v1095 = ((((v1093 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1095 || v842 - v1095 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1097 = (((v1093 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v1097 + 4);
            unint64_t v1098 = ((v1097 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1098 || v842 - v1098 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1100 = v843 + v1098;
            v4[2] = (WTF *)(v1100 + 4);
            unint64_t v1101 = ((v1100 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1101 || v842 - v1101 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1103 = v843 + v1101;
            v4[2] = (WTF *)(v1103 + 4);
            unint64_t v1104 = ((v1103 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1104 || v842 - v1104 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1103 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            WebCore::GraphicsContextGLANGLE::texStorage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          case 0x425:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v164 = v4[1];
            uint64_t v165 = (uint64_t)*v4;
            unint64_t v1174 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v164 < v1174 || (unint64_t)v164 - v1174 <= 3) {
              goto LABEL_1992;
            }
            unint64_t v1175 = v165 + v1174;
            v4[2] = (WTF *)(v1175 + 4);
            if (!v165) {
              goto LABEL_2894;
            }
            unint64_t v1176 = ((v1175 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1176 || (unint64_t)v164 - v1176 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(((v1175 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v1177 = ((((v1175 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1177 || (unint64_t)v164 - v1177 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v1179 = v165 + v1177;
            v4[2] = (WTF *)(v1179 + 4);
            unint64_t v1180 = ((v1179 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1180 || (unint64_t)v164 - v1180 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v1182 = v165 + v1180;
            v4[2] = (WTF *)(v1182 + 4);
            unint64_t v1183 = ((v1182 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1183 || (unint64_t)v164 - v1183 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v1185 = v165 + v1183;
            v4[2] = (WTF *)(v1185 + 4);
            unint64_t v1186 = ((v1185 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1186 || (unint64_t)v164 - v1186 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v1188 = v165 + v1186;
            v4[2] = (WTF *)(v1188 + 4);
            unint64_t v1189 = ((v1188 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1189 || (unint64_t)v164 - v1189 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v1191 = v165 + v1189;
            v4[2] = (WTF *)(v1191 + 4);
            unint64_t v1192 = ((v1191 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1192 || (unint64_t)v164 - v1192 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v1194 = v165 + v1192;
            v4[2] = (WTF *)(v1194 + 4);
            unint64_t v1195 = ((v1194 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1195 || (unint64_t)v164 - v1195 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v1197 = v165 + v1195;
            v4[2] = (WTF *)(v1197 + 4);
            unint64_t v1198 = ((v1197 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v1198 || (unint64_t)v164 - v1198 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(v165 + v1198 + 4);
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
            if (!cf[16]) {
              goto LABEL_1449;
            }
            WebCore::GraphicsContextGLANGLE::texSubImage3D();
            goto LABEL_1450;
          case 0x426:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1210 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1210 || v842 - v1210 <= 3) {
              goto LABEL_2376;
            }
            v1211 = (unsigned int *)(v843 + v1210);
            v4[2] = (WTF *)(v1211 + 1);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1212 = (((unint64_t)v1211 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1212 || v842 - v1212 <= 3) {
              goto LABEL_2294;
            }
            unsigned int v1213 = *v1211;
            v4[2] = (WTF *)(v843 + v1212 + 4);
            uint64_t v1215 = v843 + v1212 + 7;
            int v1214 = *(_DWORD *)(v843 + v1212);
            unint64_t v1216 = (v1215 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1216 || v842 - v1216 <= 3) {
              goto LABEL_2294;
            }
            v1218 = (int *)(v843 + v1216);
            v4[2] = (WTF *)(v1218 + 1);
            int v1219 = *v1218;
            unint64_t v1220 = (((unint64_t)v1218 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1220 || v842 - v1220 <= 3) {
              goto LABEL_2294;
            }
            v1222 = (int *)(v843 + v1220);
            v4[2] = (WTF *)(v1222 + 1);
            int v1223 = *v1222;
            unint64_t v1224 = (((unint64_t)v1222 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1224 || v842 - v1224 <= 3) {
              goto LABEL_2294;
            }
            v1226 = (int *)(v843 + v1224);
            v4[2] = (WTF *)(v1226 + 1);
            int v1227 = *v1226;
            unint64_t v1228 = (((unint64_t)v1226 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1228 || v842 - v1228 <= 3) {
              goto LABEL_2294;
            }
            v1230 = (int *)(v843 + v1228);
            v4[2] = (WTF *)(v1230 + 1);
            int v1231 = *v1230;
            unint64_t v1232 = (((unint64_t)v1230 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1232 || v842 - v1232 <= 3) {
              goto LABEL_2294;
            }
            v1234 = (int *)(v843 + v1232);
            v4[2] = (WTF *)(v1234 + 1);
            int v1235 = *v1234;
            unint64_t v1236 = (((unint64_t)v1234 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1236 || v842 - v1236 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(v843 + v1236 + 4);
            uint64_t v1239 = v843 + v1236 + 7;
            int v1238 = *(_DWORD *)(v843 + v1236);
            unint64_t v1240 = (v1239 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1240 || v842 - v1240 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(v843 + v1240 + 4);
            uint64_t v1243 = v843 + v1240 + 7;
            unsigned int v1242 = *(_DWORD *)(v843 + v1240);
            unint64_t v1244 = (v1243 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1244 || v842 - v1244 <= 3) {
              goto LABEL_2294;
            }
            v1246 = (unsigned int *)(v843 + v1244);
            v4[2] = (WTF *)(v1246 + 1);
            unint64_t v1247 = (((unint64_t)v1246 + 11) & 0xFFFFFFFFFFFFFFF8) - v843;
            if (v842 < v1247 || v842 - v1247 <= 7) {
              goto LABEL_2294;
            }
            unsigned int v1249 = *v1246;
            v1250 = (uint64_t *)(v843 + v1247);
            uint64_t v1251 = *v1250;
            v4[2] = (WTF *)(v1250 + 1);
            WebCore::GraphicsContextGLANGLE::texSubImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1213, v1214, v1219, v1223, v1227, v1231, v1235, v1238, v1242, v1249, v1251);
            goto LABEL_1498;
          case 0x427:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v2137, (uint64_t **)a2 + 5);
            int8x16_t v16 = v4[1];
            int8x16_t v17 = *v4;
            unint64_t v1117 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v16 < v1117 || (unint64_t)v16 - v1117 <= 3) {
              goto LABEL_1885;
            }
            v1118 = (unsigned int *)((char *)v17 + v1117);
            v4[2] = (WTF *)(v1118 + 1);
            if (!v17) {
              goto LABEL_2905;
            }
            unsigned int v1119 = *v1118;
            IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v4, v17, (uint64_t)v2131);
            if (!(_BYTE)v2132) {
              goto LABEL_1887;
            }
            v1120 = v4[1];
            v1121 = *v4;
            unint64_t v1122 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v1120 < v1122 || (unint64_t)v1120 - v1122 <= 3)
            {
              v1816 = 0;
              uint64_t v1817 = 0;
              void *v4 = 0;
              v4[1] = 0;
              v1818 = v4[3];
              if (v1818)
              {
                if (v1120)
                {
                  (*(void (**)(WTF *))(*(void *)v1818 + 16))(v1818);
                  uint64_t v1817 = (uint64_t)*v4;
                  v1816 = v4[1];
                }
                else
                {
                  v1816 = 0;
                  uint64_t v1817 = 0;
                }
              }
            }
            else
            {
              v1123 = (int *)((char *)v1121 + v1122);
              v4[2] = (WTF *)(v1123 + 1);
              if (v1121)
              {
                int v1124 = *v1123;
                *(_DWORD *)CFTypeRef cf = v1119;
                *(WTF **)&cf[8] = v2131[0];
                v1125 = v2131[1];
                v2131[0] = 0;
                v2131[1] = 0;
                *(void *)&cf[16] = v1125;
                LODWORD(v2121) = v1124;
                BYTE8(v2121) = 1;
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2131, v1121);
                WebKit::RemoteGraphicsContextGL::transformFeedbackVaryings((uint64_t)this, v1119);
                WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf[8], v1126);
                goto LABEL_1888;
              }
              v1816 = v1120;
              uint64_t v1817 = 0;
            }
            void *v4 = 0;
            v4[1] = 0;
            v1819 = v4[3];
            if (v1819 && v1816) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v1819 + 16))(v1819, v1817);
            }
            if ((_BYTE)v2132) {
              WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2131, v1121);
            }
            goto LABEL_1887;
          case 0x42C:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1089 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1089 || v842 - v1089 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1090 = v843 + v1089;
            v4[2] = (WTF *)(v1090 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1091 = ((v1090 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1091 || v842 - v1091 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1090 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            WebCore::GraphicsContextGLANGLE::uniform1ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          case 0x42D:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniform1uiv();
            }
            goto LABEL_1450;
          case 0x432:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            v1067 = v4[1];
            uint64_t v1068 = (uint64_t)*v4;
            unint64_t v1069 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v1067 < v1069 || (unint64_t)v1067 - v1069 <= 3)
            {
              v1808 = 0;
              uint64_t v1809 = 0;
              void *v4 = 0;
              v4[1] = 0;
              v1810 = v4[3];
              if (v1810)
              {
                if (v1067)
                {
                  (*(void (**)(WTF *))(*(void *)v1810 + 16))(v1810);
                  uint64_t v1809 = (uint64_t)*v4;
                  v1808 = v4[1];
                }
                else
                {
                  v1808 = 0;
                  uint64_t v1809 = 0;
                }
              }
            }
            else
            {
              unint64_t v1070 = v1068 + v1069;
              v4[2] = (WTF *)(v1070 + 4);
              if (v1068)
              {
                unint64_t v1071 = ((v1070 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1068;
                if ((unint64_t)v1067 >= v1071 && (unint64_t)v1067 - v1071 > 3)
                {
                  unint64_t v1072 = (v1070 + 7) & 0xFFFFFFFFFFFFFFFCLL;
                  v4[2] = (WTF *)(v1072 + 4);
                  unint64_t v1073 = ((v1072 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1068;
                  if ((unint64_t)v1067 >= v1073 && (unint64_t)v1067 - v1073 > 3)
                  {
                    v1075 = (unsigned int *)((v1072 + 7) & 0xFFFFFFFFFFFFFFFCLL);
                    uint64_t v1076 = *v1075;
                    v4[2] = (WTF *)(v1075 + 1);
                    uint64_t v1077 = v1076 | 0x100000000;
                    goto LABEL_1789;
                  }
                }
                void *v4 = 0;
                v4[1] = 0;
                v1790 = v4[3];
                if (v1790)
                {
                  if (v1067)
                  {
                    (*(void (**)(WTF *))(*(void *)v1790 + 16))(v1790);
                    uint64_t v1791 = (uint64_t)*v4;
                    v1792 = v4[1];
                    v1793 = v4[3];
                    void *v4 = 0;
                    v4[1] = 0;
                    if (v1793)
                    {
                      if (v1792) {
                        (*(void (**)(WTF *, uint64_t))(*(void *)v1793 + 16))(v1793, v1791);
                      }
                    }
                  }
                }
LABEL_2692:
                uint64_t v1812 = (uint64_t)*v4;
                v1813 = v4[1];
                void *v4 = 0;
                v4[1] = 0;
                v1814 = v4[3];
                if (v1814 && v1813) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v1814 + 16))(v1814, v1812);
                }
                uint64_t v1077 = 0;
LABEL_1789:
                if ((v1077 & 0xFF00000000) != 0) {
                  WebCore::GraphicsContextGLANGLE::uniform2ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_1498;
              }
              v1808 = v1067;
              uint64_t v1809 = 0;
            }
            void *v4 = 0;
            v4[1] = 0;
            v1811 = v4[3];
            if (v1811 && v1808) {
              (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1811 + 16))(v1811, v1809, v1808);
            }
            goto LABEL_2692;
          case 0x433:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniform2uiv();
            }
            goto LABEL_1450;
          case 0x438:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1202 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1202 || v842 - v1202 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1203 = v843 + v1202;
            v4[2] = (WTF *)(v1203 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1204 = ((v1203 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1204 || v842 - v1204 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1203 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v1205 = ((((v1203 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1205 || v842 - v1205 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1207 = (((v1203 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v1207 + 4);
            unint64_t v1208 = ((v1207 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1208 || v842 - v1208 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1207 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            WebCore::GraphicsContextGLANGLE::uniform3ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          case 0x439:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniform3uiv();
            }
            goto LABEL_1450;
          case 0x43E:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1106 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1106 || v842 - v1106 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1107 = v843 + v1106;
            v4[2] = (WTF *)(v1107 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1108 = ((v1107 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1108 || v842 - v1108 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1107 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v1109 = ((((v1107 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1109 || v842 - v1109 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1111 = (((v1107 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v1111 + 4);
            unint64_t v1112 = ((v1111 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1112 || v842 - v1112 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1114 = v843 + v1112;
            v4[2] = (WTF *)(v1114 + 4);
            unint64_t v1115 = ((v1114 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1115 || v842 - v1115 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1114 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            WebCore::GraphicsContextGLANGLE::uniform4ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          case 0x43F:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniform4uiv();
            }
            goto LABEL_1450;
          case 0x440:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unsigned int v1172 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)v4);
            if ((v1173 & 0xFF00000000) != 0)
            {
              LODWORD(v2131[0]) = v1172;
              if (v1172 <= 0xFFFFFFFD)
              {
                if (v1172) {
                  LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
                }
                WebCore::GraphicsContextGLANGLE::uniformBlockBinding(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              }
            }
            goto LABEL_1498;
          case 0x442:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniformMatrix2x3fv();
            }
            goto LABEL_1450;
          case 0x443:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniformMatrix2x4fv();
            }
            goto LABEL_1450;
          case 0x445:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniformMatrix3x2fv();
            }
            goto LABEL_1450;
          case 0x446:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniformMatrix3x4fv();
            }
            goto LABEL_1450;
          case 0x448:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniformMatrix4x2fv();
            }
            goto LABEL_1450;
          case 0x449:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>((uint64_t)cf, (IPC::Decoder *)v4);
            if ((_BYTE)v2121) {
              WebCore::GraphicsContextGLANGLE::uniformMatrix4x3fv();
            }
            goto LABEL_1450;
          case 0x455:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1252 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1252 || v842 - v1252 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1253 = v843 + v1252;
            v4[2] = (WTF *)(v1253 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1254 = ((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1254 || v842 - v1254 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v1255 = ((((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1255 || v842 - v1255 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1257 = (((v1253 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v1257 + 4);
            unint64_t v1258 = ((v1257 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1258 || v842 - v1258 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1260 = v843 + v1258;
            v4[2] = (WTF *)(v1260 + 4);
            unint64_t v1261 = ((v1260 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1261 || v842 - v1261 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1260 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            WebCore::GraphicsContextGLANGLE::vertexAttribI4i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          case 0x456:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            v1050 = v4[1];
            uint64_t v1051 = (uint64_t)*v4;
            unint64_t v1052 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v1050 < v1052 || (unint64_t)v1050 - v1052 <= 3)
            {
              v1804 = 0;
              uint64_t v1805 = 0;
              void *v4 = 0;
              v4[1] = 0;
              v1806 = v4[3];
              if (v1806)
              {
                if (v1050)
                {
                  (*(void (**)(WTF *))(*(void *)v1806 + 16))(v1806);
                  uint64_t v1805 = (uint64_t)*v4;
                  v1804 = v4[1];
                }
                else
                {
                  v1804 = 0;
                  uint64_t v1805 = 0;
                }
              }
            }
            else
            {
              v4[2] = (WTF *)(v1051 + v1052 + 4);
              if (v1051)
              {
                IPC::Decoder::decode<std::span<int const,4ul>>((uint64_t *)v4);
                if (!v1053) {
                  goto LABEL_2295;
                }
                WebCore::GraphicsContextGLANGLE::vertexAttribI4iv();
                goto LABEL_1498;
              }
              v1804 = v1050;
              uint64_t v1805 = 0;
            }
            void *v4 = 0;
            v4[1] = 0;
            v1807 = v4[3];
            if (v1807 && v1804) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v1807 + 16))(v1807, v1805);
            }
            goto LABEL_2295;
          case 0x457:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, v4);
            if (cf[20]) {
              WebCore::GraphicsContextGLANGLE::vertexAttribI4ui(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1450;
          case 0x458:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1054 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1054 || v842 - v1054 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1055 = v843 + v1054;
            v4[2] = (WTF *)(v1055 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1056 = ((v1055 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 >= v1056 && v842 - v1056 > 0xF)
            {
              v4[2] = (WTF *)(v843 + v1056 + 16);
              char v1057 = 1;
              goto LABEL_1760;
            }
            void *v4 = 0;
            v4[1] = 0;
            v1815 = v4[3];
            if (!v1815 || !v842) {
              goto LABEL_2695;
            }
            (*(void (**)(WTF *))(*(void *)v1815 + 16))(v1815);
            uint64_t v2054 = (uint64_t)*v4;
            v2055 = v4[1];
            v2056 = v4[3];
            void *v4 = 0;
            v4[1] = 0;
            char v1057 = 0;
            if (v2056 && v2055)
            {
              (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2056 + 16))(v2056, v2054, v2055);
LABEL_2695:
              char v1057 = 0;
            }
LABEL_1760:
            if (!v1057) {
              goto LABEL_2295;
            }
            WebCore::GraphicsContextGLANGLE::vertexAttribI4uiv();
            goto LABEL_1498;
          case 0x459:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1078 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1078 || v842 - v1078 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1079 = v843 + v1078;
            v4[2] = (WTF *)(v1079 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1080 = ((v1079 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1080 || v842 - v1080 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1079 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v1081 = ((((v1079 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1081 || v842 - v1081 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1083 = (((v1079 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v1083 + 4);
            unint64_t v1084 = ((v1083 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1084 || v842 - v1084 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1086 = v843 + v1084;
            v4[2] = (WTF *)(v1086 + 4);
            unint64_t v1087 = ((v1086 + 11) & 0xFFFFFFFFFFFFFFF8) - v843;
            if (v842 < v1087 || v842 - v1087 <= 7) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1086 + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
            WebCore::GraphicsContextGLANGLE::vertexAttribIPointer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          case 0x45C:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v253 = (unint64_t)v4[1];
            uint64_t v254 = (uint64_t)*v4;
            unint64_t v1058 = (((unint64_t)v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v4;
            if (v253 >= v1058 && v253 - v1058 > 7)
            {
              v1059 = (void **)(v254 + v1058);
              v4[2] = (WTF *)(v1059 + 1);
              if (!v254) {
                goto LABEL_2980;
              }
              unint64_t v1060 = (((unint64_t)v1059 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v254;
              if (v253 < v1060 || v253 - v1060 <= 3) {
                goto LABEL_1769;
              }
              v1061 = *v1059;
              v4[2] = (WTF *)((((unint64_t)v1059 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4);
              IPC::Decoder::decode<long long>((IPC::Decoder *)v4);
              if (!v1062) {
                goto LABEL_2099;
              }
              WebCore::GraphicsContextGLANGLE::waitSync(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1061);
              goto LABEL_1498;
            }
            v1265 = 0;
            uint64_t v1266 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v1267 = v4[3];
            if (!v1267) {
              goto LABEL_2098;
            }
            if (v253) {
              goto LABEL_2665;
            }
            goto LABEL_2668;
          default:
            switch(*((_WORD *)a3 + 25))
            {
              case 0x405:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
                  WebCore::GraphicsContextGLANGLE::readBuffer(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_1498;
              case 0x406:
              case 0x407:
              case 0x409:
              case 0x40A:
              case 0x40C:
                goto LABEL_1544;
              case 0x408:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
                IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, v4);
                if (cf[20]) {
                  WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisample(*((WebCore::GraphicsContextGLANGLE **)this
                }
                                                                                  + 7));
                goto LABEL_1450;
              case 0x40B:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                WebCore::GraphicsContextGLANGLE::resumeTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                goto LABEL_1498;
              case 0x40D:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                unsigned int v1045 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,float>>(v4);
                if ((v1046 & 0xFF00000000) != 0)
                {
                  LODWORD(v2131[0]) = v1045;
                  if (v1045 <= 0xFFFFFFFD)
                  {
                    float v1047 = *(float *)&v1046;
                    if (v1045) {
                      LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
                    }
                    WebCore::GraphicsContextGLANGLE::samplerParameterf(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1047);
                  }
                }
                goto LABEL_1498;
              case 0x40E:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                unsigned int v1048 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,int>>(v4);
                if ((v1049 & 0xFF00000000) != 0)
                {
                  LODWORD(v2131[0]) = v1048;
                  if (v1048 <= 0xFFFFFFFD)
                  {
                    if (v1048) {
                      LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
                    }
                    WebCore::GraphicsContextGLANGLE::samplerParameteri(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                  }
                }
                goto LABEL_1498;
              default:
                if (v6 != 1022) {
                  goto LABEL_1544;
                }
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                WebCore::GraphicsContextGLANGLE::pauseTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                break;
            }
            goto LABEL_1498;
        }
      }
      if (*((unsigned __int16 *)a3 + 25) <= 0x3CBu)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x3B2:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v164 = v4[1];
            uint64_t v165 = (uint64_t)*v4;
            unint64_t v793 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v164 < v793 || (unint64_t)v164 - v793 <= 3) {
              goto LABEL_1992;
            }
            unint64_t v794 = v165 + v793;
            v4[2] = (WTF *)(v794 + 4);
            if (!v165) {
              goto LABEL_2894;
            }
            unint64_t v795 = ((v794 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v795 || (unint64_t)v164 - v795 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(((v794 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v796 = ((((v794 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v796 || (unint64_t)v164 - v796 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v798 = v165 + v796;
            v4[2] = (WTF *)(v798 + 4);
            unint64_t v799 = ((v798 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v799 || (unint64_t)v164 - v799 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v801 = v165 + v799;
            v4[2] = (WTF *)(v801 + 4);
            unint64_t v802 = ((v801 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v802 || (unint64_t)v164 - v802 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v804 = v165 + v802;
            v4[2] = (WTF *)(v804 + 4);
            unint64_t v805 = ((v804 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v805 || (unint64_t)v164 - v805 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v807 = v165 + v805;
            v4[2] = (WTF *)(v807 + 4);
            unint64_t v808 = ((v807 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v808 || (unint64_t)v164 - v808 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v810 = v165 + v808;
            v4[2] = (WTF *)(v810 + 4);
            unint64_t v811 = ((v810 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v811 || (unint64_t)v164 - v811 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(v165 + v811 + 4);
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
            if (!cf[16]) {
              goto LABEL_1449;
            }
            WebCore::GraphicsContextGLANGLE::compressedTexImage3D();
            break;
          case 0x3B3:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v969 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v969 || v842 - v969 <= 3) {
              goto LABEL_2376;
            }
            v970 = (unsigned int *)(v843 + v969);
            v4[2] = (WTF *)(v970 + 1);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v971 = (((unint64_t)v970 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v971 || v842 - v971 <= 3) {
              goto LABEL_2294;
            }
            unsigned int v972 = *v970;
            v4[2] = (WTF *)(v843 + v971 + 4);
            uint64_t v974 = v843 + v971 + 7;
            int v973 = *(_DWORD *)(v843 + v971);
            unint64_t v975 = (v974 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v975 || v842 - v975 <= 3) {
              goto LABEL_2294;
            }
            v977 = (unsigned int *)(v843 + v975);
            v4[2] = (WTF *)(v977 + 1);
            unsigned int v978 = *v977;
            unint64_t v979 = (((unint64_t)v977 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v979 || v842 - v979 <= 3) {
              goto LABEL_2294;
            }
            v981 = (int *)(v843 + v979);
            v4[2] = (WTF *)(v981 + 1);
            int v982 = *v981;
            unint64_t v983 = (((unint64_t)v981 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v983 || v842 - v983 <= 3) {
              goto LABEL_2294;
            }
            v985 = (int *)(v843 + v983);
            v4[2] = (WTF *)(v985 + 1);
            int v986 = *v985;
            unint64_t v987 = (((unint64_t)v985 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v987 || v842 - v987 <= 3) {
              goto LABEL_2294;
            }
            v989 = (int *)(v843 + v987);
            v4[2] = (WTF *)(v989 + 1);
            int v990 = *v989;
            unint64_t v991 = (((unint64_t)v989 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v991 || v842 - v991 <= 3) {
              goto LABEL_2294;
            }
            v993 = (int *)(v843 + v991);
            v4[2] = (WTF *)(v993 + 1);
            int v994 = *v993;
            unint64_t v995 = (((unint64_t)v993 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v995 || v842 - v995 <= 3) {
              goto LABEL_2294;
            }
            v997 = (int *)(v843 + v995);
            v4[2] = (WTF *)(v997 + 1);
            unint64_t v998 = (((unint64_t)v997 + 11) & 0xFFFFFFFFFFFFFFF8) - v843;
            if (v842 < v998 || v842 - v998 <= 7) {
              goto LABEL_2294;
            }
            int v1000 = *v997;
            v1001 = (uint64_t *)(v843 + v998);
            uint64_t v1002 = *v1001;
            v4[2] = (WTF *)(v1001 + 1);
            WebCore::GraphicsContextGLANGLE::compressedTexImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v972, v973, v978, v982, v986, v990, v994, v1000, v1002);
            goto LABEL_1498;
          case 0x3B4:
          case 0x3B5:
          case 0x3B8:
          case 0x3B9:
          case 0x3BA:
          case 0x3BC:
          case 0x3BD:
          case 0x3BE:
          case 0x3C0:
          case 0x3C1:
          case 0x3C3:
          case 0x3C4:
            goto LABEL_1544;
          case 0x3B6:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v164 = v4[1];
            uint64_t v165 = (uint64_t)*v4;
            unint64_t v907 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if ((unint64_t)v164 < v907 || (unint64_t)v164 - v907 <= 3) {
              goto LABEL_1992;
            }
            unint64_t v908 = v165 + v907;
            v4[2] = (WTF *)(v908 + 4);
            if (!v165) {
              goto LABEL_2894;
            }
            unint64_t v909 = ((v908 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v909 || (unint64_t)v164 - v909 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(((v908 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v910 = ((((v908 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v910 || (unint64_t)v164 - v910 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v912 = v165 + v910;
            v4[2] = (WTF *)(v912 + 4);
            unint64_t v913 = ((v912 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v913 || (unint64_t)v164 - v913 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v915 = v165 + v913;
            v4[2] = (WTF *)(v915 + 4);
            unint64_t v916 = ((v915 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v916 || (unint64_t)v164 - v916 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v918 = v165 + v916;
            v4[2] = (WTF *)(v918 + 4);
            unint64_t v919 = ((v918 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v919 || (unint64_t)v164 - v919 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v921 = v165 + v919;
            v4[2] = (WTF *)(v921 + 4);
            unint64_t v922 = ((v921 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v922 || (unint64_t)v164 - v922 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v924 = v165 + v922;
            v4[2] = (WTF *)(v924 + 4);
            unint64_t v925 = ((v924 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v925 || (unint64_t)v164 - v925 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v927 = v165 + v925;
            v4[2] = (WTF *)(v927 + 4);
            unint64_t v928 = ((v927 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v928 || (unint64_t)v164 - v928 <= 3) {
              goto LABEL_2088;
            }
            unint64_t v930 = v165 + v928;
            v4[2] = (WTF *)(v930 + 4);
            unint64_t v931 = ((v930 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
            if ((unint64_t)v164 < v931 || (unint64_t)v164 - v931 <= 3) {
              goto LABEL_2088;
            }
            v4[2] = (WTF *)(v165 + v931 + 4);
            IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(v4, (uint64_t)cf);
            if (!cf[16]) {
              goto LABEL_1449;
            }
            WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D();
            break;
          case 0x3B7:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1003 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1003 || v842 - v1003 <= 3) {
              goto LABEL_2376;
            }
            v1004 = (unsigned int *)(v843 + v1003);
            v4[2] = (WTF *)(v1004 + 1);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1005 = (((unint64_t)v1004 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1005 || v842 - v1005 <= 3) {
              goto LABEL_2294;
            }
            unsigned int v1006 = *v1004;
            v4[2] = (WTF *)(v843 + v1005 + 4);
            uint64_t v1008 = v843 + v1005 + 7;
            int v1007 = *(_DWORD *)(v843 + v1005);
            unint64_t v1009 = (v1008 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1009 || v842 - v1009 <= 3) {
              goto LABEL_2294;
            }
            v1011 = (int *)(v843 + v1009);
            v4[2] = (WTF *)(v1011 + 1);
            int v1012 = *v1011;
            unint64_t v1013 = (((unint64_t)v1011 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1013 || v842 - v1013 <= 3) {
              goto LABEL_2294;
            }
            v1015 = (int *)(v843 + v1013);
            v4[2] = (WTF *)(v1015 + 1);
            int v1016 = *v1015;
            unint64_t v1017 = (((unint64_t)v1015 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1017 || v842 - v1017 <= 3) {
              goto LABEL_2294;
            }
            v1019 = (int *)(v843 + v1017);
            v4[2] = (WTF *)(v1019 + 1);
            int v1020 = *v1019;
            unint64_t v1021 = (((unint64_t)v1019 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1021 || v842 - v1021 <= 3) {
              goto LABEL_2294;
            }
            v1023 = (int *)(v843 + v1021);
            v4[2] = (WTF *)(v1023 + 1);
            int v1024 = *v1023;
            unint64_t v1025 = (((unint64_t)v1023 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1025 || v842 - v1025 <= 3) {
              goto LABEL_2294;
            }
            v1027 = (int *)(v843 + v1025);
            v4[2] = (WTF *)(v1027 + 1);
            int v1028 = *v1027;
            unint64_t v1029 = (((unint64_t)v1027 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1029 || v842 - v1029 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(v843 + v1029 + 4);
            uint64_t v1032 = v843 + v1029 + 7;
            int v1031 = *(_DWORD *)(v843 + v1029);
            unint64_t v1033 = (v1032 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1033 || v842 - v1033 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(v843 + v1033 + 4);
            uint64_t v1036 = v843 + v1033 + 7;
            unsigned int v1035 = *(_DWORD *)(v843 + v1033);
            unint64_t v1037 = (v1036 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1037 || v842 - v1037 <= 3) {
              goto LABEL_2294;
            }
            v1039 = (int *)(v843 + v1037);
            v4[2] = (WTF *)(v1039 + 1);
            unint64_t v1040 = (((unint64_t)v1039 + 11) & 0xFFFFFFFFFFFFFFF8) - v843;
            if (v842 < v1040 || v842 - v1040 <= 7) {
              goto LABEL_2294;
            }
            int v1042 = *v1039;
            v1043 = (uint64_t *)(v843 + v1040);
            uint64_t v1044 = *v1043;
            v4[2] = (WTF *)(v1043 + 1);
            WebCore::GraphicsContextGLANGLE::compressedTexSubImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1006, v1007, v1012, v1016, v1020, v1024, v1028, v1031, v1035, v1042, v1044);
            goto LABEL_1498;
          case 0x3BB:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v933 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v933 || v842 - v933 <= 3) {
              goto LABEL_2376;
            }
            v934 = (unsigned int *)(v843 + v933);
            v4[2] = (WTF *)(v934 + 1);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v935 = (((unint64_t)v934 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v935 || v842 - v935 <= 3) {
              goto LABEL_2294;
            }
            unsigned int v936 = *v934;
            v4[2] = (WTF *)(v843 + v935 + 4);
            uint64_t v938 = v843 + v935 + 7;
            int v937 = *(_DWORD *)(v843 + v935);
            unint64_t v939 = (v938 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v939 || v842 - v939 <= 3) {
              goto LABEL_2294;
            }
            v941 = (int *)(v843 + v939);
            v4[2] = (WTF *)(v941 + 1);
            int v942 = *v941;
            unint64_t v943 = (((unint64_t)v941 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v943 || v842 - v943 <= 3) {
              goto LABEL_2294;
            }
            v945 = (int *)(v843 + v943);
            v4[2] = (WTF *)(v945 + 1);
            int v946 = *v945;
            unint64_t v947 = (((unint64_t)v945 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v947 || v842 - v947 <= 3) {
              goto LABEL_2294;
            }
            v949 = (int *)(v843 + v947);
            v4[2] = (WTF *)(v949 + 1);
            int v950 = *v949;
            unint64_t v951 = (((unint64_t)v949 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v951 || v842 - v951 <= 3) {
              goto LABEL_2294;
            }
            v953 = (int *)(v843 + v951);
            v4[2] = (WTF *)(v953 + 1);
            int v954 = *v953;
            unint64_t v955 = (((unint64_t)v953 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v955 || v842 - v955 <= 3) {
              goto LABEL_2294;
            }
            v957 = (int *)(v843 + v955);
            v4[2] = (WTF *)(v957 + 1);
            int v958 = *v957;
            unint64_t v959 = (((unint64_t)v957 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v959 || v842 - v959 <= 3) {
              goto LABEL_2294;
            }
            v961 = (int *)(v843 + v959);
            v4[2] = (WTF *)(v961 + 1);
            unint64_t v962 = (((unint64_t)v961 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v962 || v842 - v962 <= 3) {
              goto LABEL_2294;
            }
            int v964 = *v961;
            v965 = (int *)(v843 + v962);
            int v966 = *v965;
            v4[2] = (WTF *)(v965 + 1);
            WebCore::GraphicsContextGLANGLE::copyTexSubImage3D(*((WebCore::GraphicsContextGLANGLE **)this + 7), v936, v937, v942, v946, v950, v954, v958, v964, v966);
            goto LABEL_1498;
          case 0x3BF:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v968 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
            if ((v968 & 0xFF00000000) == 0) {
              goto LABEL_1450;
            }
            LODWORD(v2137) = v968;
            if (v968 > 0xFFFFFFFD) {
              goto LABEL_1450;
            }
            int Buffer = WebCore::GraphicsContextGLANGLE::createQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_307;
          case 0x3C2:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v906 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
            if ((v906 & 0xFF00000000) == 0) {
              goto LABEL_1450;
            }
            LODWORD(v2137) = v906;
            if (v906 > 0xFFFFFFFD) {
              goto LABEL_1450;
            }
            int Buffer = WebCore::GraphicsContextGLANGLE::createSampler(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_307;
          case 0x3C5:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            uint64_t v967 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
            if ((v967 & 0xFF00000000) == 0) {
              goto LABEL_1450;
            }
            LODWORD(v2137) = v967;
            if (v967 > 0xFFFFFFFD) {
              goto LABEL_1450;
            }
            int Buffer = WebCore::GraphicsContextGLANGLE::createTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this
                                                                              + 7));
            goto LABEL_307;
          default:
            goto LABEL_3094;
        }
        goto LABEL_1450;
      }
      if (*((unsigned __int16 *)a3 + 25) <= 0x3EFu)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x3DF:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>((IPC::Decoder *)v4, (uint64_t)cf);
            if (cf[16]) {
              WebCore::GraphicsContextGLANGLE::drawBuffers();
            }
            goto LABEL_1450;
          case 0x3E0:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>((IPC::Decoder *)v4, (uint64_t)cf);
            if (cf[16]) {
              (*(void (**)(void, void, void))(**((void **)this + 7) + 1992))(*((void *)this + 7), *(void *)cf, *(void *)&cf[8]);
            }
            goto LABEL_1450;
          case 0x3E1:
          case 0x3E2:
          case 0x3E3:
          case 0x3E5:
          case 0x3E6:
          case 0x3E7:
          case 0x3E9:
            goto LABEL_1544;
          case 0x3E4:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1270 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1270 || v842 - v1270 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1271 = v843 + v1270;
            v4[2] = (WTF *)(v1271 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1272 = ((v1271 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1272) {
              goto LABEL_2294;
            }
            if (v842 - v1272 <= 3) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1271 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unint64_t v1273 = ((((v1271 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1273 || v842 - v1273 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1274 = (((v1271 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v4[2] = (WTF *)(v1274 + 4);
            unint64_t v1275 = ((v1274 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1275 || v842 - v1275 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1277 = v843 + v1275;
            v4[2] = (WTF *)(v1277 + 4);
            unint64_t v1278 = ((v1277 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 < v1278 || v842 - v1278 <= 3) {
              goto LABEL_2294;
            }
            unint64_t v1280 = v843 + v1278;
            v4[2] = (WTF *)(v1280 + 4);
            unint64_t v1281 = ((v1280 + 11) & 0xFFFFFFFFFFFFFFF8) - v843;
            if (v842 < v1281 || v842 - v1281 <= 7) {
              goto LABEL_2294;
            }
            v4[2] = (WTF *)(((v1280 + 11) & 0xFFFFFFFFFFFFFFF8) + 8);
            WebCore::GraphicsContextGLANGLE::drawRangeElements(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            break;
          case 0x3E8:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
              WebCore::GraphicsContextGLANGLE::endQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1498;
          case 0x3EA:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            WebCore::GraphicsContextGLANGLE::endTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            goto LABEL_1498;
          default:
            switch(*((_WORD *)a3 + 25))
            {
              case 0x3CC:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                uint64_t v859 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
                if ((v859 & 0xFF00000000) != 0 && (v859 + 2) >= 3)
                {
                  WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v859);
                  WebCore::GraphicsContextGLANGLE::deleteQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_1498;
              case 0x3CF:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                uint64_t v1283 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
                if ((v1283 & 0xFF00000000) != 0 && (v1283 + 2) >= 3)
                {
                  WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v1283);
                  WebCore::GraphicsContextGLANGLE::deleteSampler(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_1498;
              case 0x3D1:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                v1284 = (void *)IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)v4);
                if (v1285) {
                  WebCore::GraphicsContextGLANGLE::deleteSync(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1284);
                }
                goto LABEL_1498;
              case 0x3D3:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                uint64_t v1286 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
                if ((v1286 & 0xFF00000000) != 0 && (v1286 + 2) >= 3)
                {
                  WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v1286);
                  WebCore::GraphicsContextGLANGLE::deleteTransformFeedback(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_1498;
              default:
                goto LABEL_1544;
            }
        }
        goto LABEL_1498;
      }
      switch(v6)
      {
        case 1008:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          unint64_t v842 = (unint64_t)v4[1];
          uint64_t v843 = (uint64_t)*v4;
          unint64_t v844 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if (v842 < v844 || v842 - v844 <= 3) {
            goto LABEL_2376;
          }
          v845 = (unsigned int *)(v843 + v844);
          v4[2] = (WTF *)(v845 + 1);
          if (!v843) {
            goto LABEL_3025;
          }
          unint64_t v846 = (((unint64_t)v845 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
          if (v842 >= v846 && v842 - v846 > 3)
          {
            unsigned int v847 = *v845;
            v4[2] = (WTF *)(v843 + v846 + 4);
            uint64_t v849 = v843 + v846 + 7;
            unsigned int v848 = *(_DWORD *)(v843 + v846);
            unint64_t v850 = (v849 & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 >= v850 && v842 - v850 > 3)
            {
              v852 = (unsigned int *)(v843 + v850);
              v4[2] = (WTF *)(v852 + 1);
              unsigned int v853 = *v852;
              unint64_t v854 = (((unint64_t)v852 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
              if (v842 >= v854 && v842 - v854 > 3)
              {
                unint64_t v856 = v843 + v854;
                v4[2] = (WTF *)(v856 + 4);
                unint64_t v857 = ((v856 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
                if (v842 >= v857 && v842 - v857 > 3)
                {
                  v4[2] = (WTF *)(((v856 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                  WebKit::RemoteGraphicsContextGL::framebufferTextureLayer((uint64_t)this, v847, v848, v853);
                  goto LABEL_1498;
                }
              }
            }
          }
          goto LABEL_2294;
        case 1012:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          v779 = v4[1];
          uint64_t v780 = (uint64_t)*v4;
          unint64_t v841 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if ((unint64_t)v779 >= v841 && (unint64_t)v779 - v841 > 3)
          {
            v4[2] = (WTF *)(v780 + v841 + 4);
            if (v780)
            {
              IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>((IPC::Decoder *)v4, (uint64_t)cf);
              if (cf[16])
              {
                WebCore::GraphicsContextGLANGLE::invalidateFramebuffer();
                goto LABEL_1450;
              }
              goto LABEL_1449;
            }
            goto LABEL_2997;
          }
LABEL_2418:
          v1444 = 0;
          uint64_t v1445 = 0;
          void *v4 = 0;
          v4[1] = 0;
          v1446 = v4[3];
          if (v1446)
          {
            if (v779)
            {
              (*(void (**)(WTF *))(*(void *)v1446 + 16))(v1446);
              uint64_t v1445 = (uint64_t)*v4;
              v1444 = v4[1];
            }
            else
            {
              v1444 = 0;
              uint64_t v1445 = 0;
            }
          }
          goto LABEL_2271;
        case 1013:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          v779 = v4[1];
          uint64_t v780 = (uint64_t)*v4;
          unint64_t v781 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if ((unint64_t)v779 >= v781 && (unint64_t)v779 - v781 > 3)
          {
            v4[2] = (WTF *)(v780 + v781 + 4);
            if (v780)
            {
              IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>((IPC::Decoder *)v4, (uint64_t)cf);
              if (!cf[16]) {
                goto LABEL_1449;
              }
              uint64_t v164 = v4[1];
              uint64_t v165 = (uint64_t)*v4;
              unint64_t v782 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
              if ((unint64_t)v164 < v782 || (unint64_t)v164 - v782 <= 3)
              {
LABEL_1992:
                v203 = 0;
                uint64_t v204 = 0;
                void *v4 = 0;
                v4[1] = 0;
                v1200 = v4[3];
                if (v1200)
                {
                  if (v164)
                  {
                    (*(void (**)(WTF *))(*(void *)v1200 + 16))(v1200);
                    uint64_t v204 = (uint64_t)*v4;
                    v203 = v4[1];
                  }
                  else
                  {
                    v203 = 0;
                    uint64_t v204 = 0;
                  }
                }
              }
              else
              {
                unint64_t v783 = v165 + v782;
                v4[2] = (WTF *)(v783 + 4);
                if (v165)
                {
                  unint64_t v784 = ((v783 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
                  if ((unint64_t)v164 >= v784 && (unint64_t)v164 - v784 > 3)
                  {
                    v4[2] = (WTF *)(((v783 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                    unint64_t v785 = ((((v783 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
                    if ((unint64_t)v164 >= v785 && (unint64_t)v164 - v785 > 3)
                    {
                      unint64_t v786 = v165 + v785;
                      v4[2] = (WTF *)(v786 + 4);
                      unint64_t v787 = ((v786 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v165;
                      if ((unint64_t)v164 >= v787 && (unint64_t)v164 - v787 > 3)
                      {
                        v4[2] = (WTF *)(((v786 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                        WebCore::GraphicsContextGLANGLE::invalidateSubFramebuffer();
                        goto LABEL_1450;
                      }
                    }
                  }
LABEL_2088:
                  void *v4 = 0;
                  v4[1] = 0;
                  v1263 = v4[3];
                  if (v1263)
                  {
                    if (v164)
                    {
                      (*(void (**)(WTF *))(*(void *)v1263 + 16))(v1263);
                      uint64_t v830 = (uint64_t)*v4;
                      v831 = v4[1];
                      v832 = v4[3];
                      void *v4 = 0;
                      v4[1] = 0;
                      if (v832)
                      {
LABEL_2091:
                        if (v831) {
                          (*(void (**)(WTF *, uint64_t))(*(void *)v832 + 16))(v832, v830);
                        }
                      }
                    }
                  }
LABEL_1449:
                  uint64_t v833 = (uint64_t)*v4;
                  v834 = v4[1];
                  void *v4 = 0;
                  v4[1] = 0;
                  v835 = v4[3];
                  if (v835 && v834) {
                    (*(void (**)(WTF *, uint64_t))(*(void *)v835 + 16))(v835, v833);
                  }
                  goto LABEL_1450;
                }
LABEL_2894:
                v203 = v164;
                uint64_t v204 = v165;
              }
LABEL_1993:
              void *v4 = 0;
              v4[1] = 0;
              v1201 = v4[3];
              if (v1201 && v203) {
                (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1201 + 16))(v1201, v204, v203);
              }
              goto LABEL_1449;
            }
LABEL_2997:
            v1444 = v779;
            uint64_t v1445 = v780;
LABEL_2271:
            void *v4 = 0;
            v4[1] = 0;
            v1351 = v4[3];
            if (v1351 && v1444) {
              (*(void (**)(WTF *, uint64_t))(*(void *)v1351 + 16))(v1351, v1445);
            }
            goto LABEL_1449;
          }
          goto LABEL_2418;
      }
LABEL_1544:
      if (*((unsigned __int16 *)a3 + 25) > 0x3DDu)
      {
        if (*((unsigned __int16 *)a3 + 25) > 0x3E8u)
        {
          switch(*((_WORD *)a3 + 25))
          {
            case 0x400:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
              if (v1264) {
                WebCore::GraphicsContextGLANGLE::polygonModeANGLE(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              }
              goto LABEL_1498;
            case 0x401:
            case 0x405:
            case 0x406:
            case 0x407:
            case 0x408:
              goto LABEL_2306;
            case 0x402:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              v1352 = v4[1];
              uint64_t v1353 = (uint64_t)*v4;
              unint64_t v1354 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
              if ((unint64_t)v1352 < v1354 || (unint64_t)v1352 - v1354 <= 3)
              {
                v2037 = 0;
                uint64_t v2038 = 0;
                void *v4 = 0;
                v4[1] = 0;
                v2039 = v4[3];
                if (v2039)
                {
                  if (v1352)
                  {
                    (*(void (**)(WTF *))(*(void *)v2039 + 16))(v2039);
                    uint64_t v2038 = (uint64_t)*v4;
                    v2037 = v4[1];
                  }
                  else
                  {
                    v2037 = 0;
                    uint64_t v2038 = 0;
                  }
                }
              }
              else
              {
                v1355 = (unsigned int *)(v1353 + v1354);
                v4[2] = (WTF *)(v1355 + 1);
                if (v1353)
                {
                  unint64_t v1356 = (((unint64_t)v1355 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1353;
                  if ((unint64_t)v1352 >= v1356 && (unint64_t)v1352 - v1356 > 3)
                  {
                    uint64_t v1357 = *v1355;
                    v1358 = (unsigned int *)(v1353 + v1356);
                    v4[2] = (WTF *)(v1353 + v1356 + 4);
                    unint64_t v1359 = ((v1353 + v1356 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1353;
                    if ((unint64_t)v1352 >= v1359 && (unint64_t)v1352 - v1359 > 3)
                    {
                      v1360 = (unsigned int *)(v1353 + v1359);
                      uint64_t v1361 = *v1360;
                      v4[2] = (WTF *)(v1360 + 1);
                      uint64_t v1362 = v1361 | 0x100000000;
                      unint64_t v1363 = v1357 | ((unint64_t)*v1358 << 32);
                      goto LABEL_2282;
                    }
                  }
                  void *v4 = 0;
                  v4[1] = 0;
                  v2032 = v4[3];
                  if (v2032)
                  {
                    if (v1352)
                    {
                      (*(void (**)(WTF *))(*(void *)v2032 + 16))(v2032);
                      uint64_t v2033 = (uint64_t)*v4;
                      v2034 = v4[1];
                      v2035 = v4[3];
                      void *v4 = 0;
                      v4[1] = 0;
                      if (v2035)
                      {
                        if (v2034) {
                          (*(void (**)(WTF *, uint64_t))(*(void *)v2035 + 16))(v2035, v2033);
                        }
                      }
                    }
                  }
LABEL_2886:
                  uint64_t v2041 = (uint64_t)*v4;
                  v2042 = v4[1];
                  void *v4 = 0;
                  v4[1] = 0;
                  v2043 = v4[3];
                  if (v2043 && v2042) {
                    (*(void (**)(WTF *, uint64_t))(*(void *)v2043 + 16))(v2043, v2041);
                  }
                  unint64_t v1363 = 0;
                  uint64_t v1362 = 0;
LABEL_2282:
                  if ((v1362 & 0xFF00000000) != 0) {
                    WebCore::GraphicsContextGLANGLE::polygonOffsetClampEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7), *(float *)&v1363, *((float *)&v1363 + 1), *(float *)&v1362);
                  }
                  goto LABEL_1498;
                }
                v2037 = v1352;
                uint64_t v2038 = 0;
              }
              void *v4 = 0;
              v4[1] = 0;
              v2040 = v4[3];
              if (v2040 && v2037) {
                (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2040 + 16))(v2040, v2038, v2037);
              }
              goto LABEL_2886;
            case 0x403:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
                WebCore::GraphicsContextGLANGLE::provokingVertexANGLE(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              }
              goto LABEL_1498;
            case 0x404:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              unsigned int v1364 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
              if (v1365)
              {
                LODWORD(v2131[0]) = v1364;
                if (v1364 <= 0xFFFFFFFD)
                {
                  if (v1364) {
                    LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
                  }
                  WebCore::GraphicsContextGLANGLE::queryCounterEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
              }
              goto LABEL_1498;
            case 0x409:
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
              IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, v4);
              if (cf[20]) {
                WebCore::GraphicsContextGLANGLE::renderbufferStorageMultisampleANGLE(*((WebCore::GraphicsContextGLANGLE **)this
              }
                                                                                     + 7));
              break;
            default:
              if (v6 == 1001)
              {
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0) {
                  WebCore::GraphicsContextGLANGLE::endQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
                goto LABEL_1498;
              }
              if (v6 != 1040) {
                goto LABEL_2306;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
              IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>((uint64_t *)v4, v1291, (uint64_t)cf);
              if (cf[8])
              {
                WebCore::GraphicsContextGLCocoa::setDrawingBufferColorSpace(*((WebCore::GraphicsContextGLCocoa **)this + 7), (const WebCore::DestinationColorSpace *)cf);
                if (cf[8])
                {
                  v1292 = *(const void **)cf;
                  *(void *)CFTypeRef cf = 0;
                  if (v1292) {
                    CFRelease(v1292);
                  }
                }
              }
              break;
          }
LABEL_1450:
          v836 = v2131;
LABEL_1499:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v836);
          return;
        }
        switch(v6)
        {
          case 990:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1301 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1301 || v842 - v1301 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1302 = v843 + v1301;
            v4[2] = (WTF *)(v1302 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1303 = ((v1302 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 >= v1303 && v842 - v1303 > 3)
            {
              v4[2] = (WTF *)(((v1302 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
              unint64_t v1304 = ((((v1302 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
              if (v842 >= v1304 && v842 - v1304 > 3)
              {
                unint64_t v1305 = (((v1302 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
                v4[2] = (WTF *)(v1305 + 4);
                unint64_t v1306 = ((v1305 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
                if (v842 >= v1306 && v842 - v1306 > 3)
                {
                  unint64_t v1308 = v843 + v1306;
                  v4[2] = (WTF *)(v1308 + 4);
                  unint64_t v1309 = ((v1308 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
                  if (v842 >= v1309 && v842 - v1309 > 3)
                  {
                    v4[2] = (WTF *)(((v1308 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                    WebCore::GraphicsContextGLANGLE::drawArraysInstancedBaseInstanceANGLE(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                          + 7));
                    goto LABEL_1498;
                  }
                }
              }
            }
            break;
          case 995:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            unint64_t v842 = (unint64_t)v4[1];
            uint64_t v843 = (uint64_t)*v4;
            unint64_t v1311 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
            if (v842 < v1311 || v842 - v1311 <= 3) {
              goto LABEL_2376;
            }
            unint64_t v1312 = v843 + v1311;
            v4[2] = (WTF *)(v1312 + 4);
            if (!v843) {
              goto LABEL_3025;
            }
            unint64_t v1313 = ((v1312 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
            if (v842 >= v1313 && v842 - v1313 > 3)
            {
              v4[2] = (WTF *)(((v1312 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
              unint64_t v1314 = ((((v1312 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
              if (v842 >= v1314 && v842 - v1314 > 3)
              {
                unint64_t v1315 = (((v1312 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
                v4[2] = (WTF *)(v1315 + 4);
                unint64_t v1316 = ((v1315 + 11) & 0xFFFFFFFFFFFFFFF8) - v843;
                if (v842 >= v1316 && v842 - v1316 > 7)
                {
                  unint64_t v1317 = v843 + v1316;
                  v4[2] = (WTF *)(v1317 + 8);
                  unint64_t v1318 = ((v1317 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v843;
                  if (v842 >= v1318 && v842 - v1318 > 3)
                  {
                    unint64_t v1320 = v843 + v1318;
                    v4[2] = (WTF *)(v1320 + 4);
                    unint64_t v1321 = ((v1320 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
                    if (v842 >= v1321 && v842 - v1321 > 3)
                    {
                      unint64_t v1323 = v843 + v1321;
                      v4[2] = (WTF *)(v1323 + 4);
                      unint64_t v1324 = ((v1323 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v843;
                      if (v842 >= v1324 && v842 - v1324 > 3)
                      {
                        v4[2] = (WTF *)(((v1323 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                        WebCore::GraphicsContextGLANGLE::drawElementsInstancedBaseVertexBaseInstanceANGLE(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                        goto LABEL_1498;
                      }
                    }
                  }
                }
              }
            }
            break;
          case 999:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
            if (v1288) {
              WebCore::GraphicsContextGLANGLE::enableiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1498;
          default:
            goto LABEL_2306;
        }
LABEL_2294:
        void *v4 = 0;
        v4[1] = 0;
        v1366 = v4[3];
        if (v1366)
        {
          if (v842)
          {
            (*(void (**)(WTF *))(*(void *)v1366 + 16))(v1366);
            uint64_t v1820 = (uint64_t)*v4;
            v1821 = v4[1];
            v1822 = v4[3];
            void *v4 = 0;
            v4[1] = 0;
            if (v1822)
            {
              if (v1821) {
                (*(void (**)(WTF *, uint64_t))(*(void *)v1822 + 16))(v1822, v1820);
              }
            }
          }
        }
        goto LABEL_2295;
      }
      if (*((unsigned __int16 *)a3 + 25) <= 0x3ADu)
      {
        switch(*((_WORD *)a3 + 25))
        {
          case 0x39A:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)v4);
            if ((v905 & 0xFF00000000) != 0) {
              WebCore::GraphicsContextGLANGLE::blendEquationSeparateiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1498;
          case 0x39B:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
            if (v1327) {
              WebCore::GraphicsContextGLANGLE::blendEquationiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1498;
          case 0x39C:
          case 0x39D:
            goto LABEL_2306;
          case 0x39E:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>((uint64_t)cf, v4);
            if (cf[20]) {
              WebCore::GraphicsContextGLANGLE::blendFuncSeparateiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1450;
          case 0x39F:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)v4);
            if ((v1326 & 0xFF00000000) != 0) {
              WebCore::GraphicsContextGLANGLE::blendFunciOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1498;
          default:
            if (v6 == 907)
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              uint64_t v1349 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
              if (v1350)
              {
                LODWORD(v2131[0]) = HIDWORD(v1349);
                if (HIDWORD(v1349) <= 0xFFFFFFFD)
                {
                  if (HIDWORD(v1349)) {
                    LODWORD(v2131[0]) = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)this + 29, (int *)v2131);
                  }
                  WebCore::GraphicsContextGLANGLE::beginQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                }
              }
              goto LABEL_1498;
            }
            if (v6 != 940) {
              goto LABEL_2306;
            }
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
            if (v1289) {
              WebCore::GraphicsContextGLANGLE::clipControlEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            break;
        }
        goto LABEL_1498;
      }
      if (*((unsigned __int16 *)a3 + 25) > 0x3C8u)
      {
        switch(v6)
        {
          case 969:
            if (WebKit::RemoteGraphicsContextGL::webXREnabled(this))
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              uint64_t v1328 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v1328 & 0xFF00000000) != 0 && (v1328 + 2) >= 3)
              {
                WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v1328);
                WebCore::GraphicsContextGLANGLE::deleteExternalSync(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              }
              goto LABEL_1498;
            }
            int v6 = *((unsigned __int16 *)v4 + 25);
            break;
          case 973:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            uint64_t v1329 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
            if ((v1329 & 0xFF00000000) != 0 && (v1329 + 2) >= 3)
            {
              WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take((uint64_t *)this + 29, v1329);
              WebCore::GraphicsContextGLANGLE::deleteQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1498;
          case 987:
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
            if (v1287) {
              WebCore::GraphicsContextGLANGLE::disableiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
            }
            goto LABEL_1498;
        }
        goto LABEL_2306;
      }
      if (v6 == 942)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
        unint64_t v842 = (unint64_t)v4[1];
        uint64_t v843 = (uint64_t)*v4;
        unint64_t v1330 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
        if (v842 >= v1330 && v842 - v1330 > 3)
        {
          v1331 = (unsigned __int8 *)(v843 + v1330);
          uint64_t v1332 = v843 + v1330 + 4;
          v4[2] = (WTF *)v1332;
          if (!v843) {
            goto LABEL_3025;
          }
          if (v842 > v1332 - v843)
          {
            v4[2] = (WTF *)(v1331 + 5);
            if (v1331[4] < 2u)
            {
              if (v842 <= (unint64_t)&v1331[-v843 + 5]) {
                goto LABEL_2715;
              }
              v4[2] = (WTF *)(v1331 + 6);
              if (v1331[5] < 2u)
              {
                if (v842 <= (unint64_t)&v1331[-v843 + 6]) {
                  goto LABEL_2715;
                }
                v4[2] = (WTF *)(v1331 + 7);
                if (v1331[6] < 2u)
                {
                  if (v842 > (unint64_t)&v1331[-v843 + 7])
                  {
                    v4[2] = (WTF *)(v1331 + 8);
                    if (v1331[7] < 2u)
                    {
                      WebCore::GraphicsContextGLANGLE::colorMaskiOES(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                      goto LABEL_1498;
                    }
                    goto LABEL_3025;
                  }
LABEL_2715:
                  v1437 = 0;
                  uint64_t v1438 = 0;
                  void *v4 = 0;
                  v4[1] = 0;
                  v1823 = v4[3];
                  if (!v1823) {
                    goto LABEL_2377;
                  }
LABEL_2881:
                  (*(void (**)(WTF *))(*(void *)v1823 + 16))(v1823);
                  v1437 = 0;
                  uint64_t v843 = (uint64_t)*v4;
                  v2036 = v4[1];
                  v1439 = v4[3];
                  void *v4 = 0;
                  v4[1] = 0;
                  uint64_t v1438 = 0;
                  if (!v1439 || !v2036)
                  {
LABEL_2377:
                    void *v4 = 0;
                    v4[1] = 0;
                    v1440 = v4[3];
                    if (v1440 && v1437) {
                      (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v1440 + 16))(v1440, v1438, v1437);
                    }
LABEL_2295:
                    uint64_t v789 = (uint64_t)*v4;
                    v1269 = v4[1];
                    void *v4 = 0;
                    v4[1] = 0;
                    v791 = v4[3];
                    if (!v791) {
                      goto LABEL_1498;
                    }
LABEL_2100:
                    if (!v1269) {
                      goto LABEL_1498;
                    }
                    goto LABEL_1504;
                  }
                  goto LABEL_2889;
                }
              }
            }
LABEL_3025:
            v1437 = (WTF *)v842;
            uint64_t v1438 = v843;
            goto LABEL_2377;
          }
          v1437 = 0;
          uint64_t v1438 = 0;
          void *v4 = 0;
          v4[1] = 0;
          v1823 = v4[3];
          if (!v1823) {
            goto LABEL_2377;
          }
          if (v842) {
            goto LABEL_2881;
          }
LABEL_3068:
          v1437 = 0;
          uint64_t v1438 = 0;
          goto LABEL_2377;
        }
LABEL_2376:
        v1437 = 0;
        uint64_t v1438 = 0;
        void *v4 = 0;
        v4[1] = 0;
        v1439 = v4[3];
        if (!v1439) {
          goto LABEL_2377;
        }
        if (v842)
        {
LABEL_2889:
          (*(void (**)(WTF *, uint64_t))(*(void *)v1439 + 16))(v1439, v843);
          uint64_t v1438 = (uint64_t)*v4;
          v1437 = v4[1];
          goto LABEL_2377;
        }
        goto LABEL_3068;
      }
      if (v6 == 960)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
        uint64_t v1290 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
        if ((v1290 & 0xFF00000000) == 0) {
          goto LABEL_1450;
        }
        LODWORD(v2137) = v1290;
        if (v1290 > 0xFFFFFFFD) {
          goto LABEL_1450;
        }
        int Buffer = WebCore::GraphicsContextGLANGLE::createQueryEXT(*((WebCore::GraphicsContextGLANGLE **)this + 7));
LABEL_307:
        v2136[0] = Buffer;
        if (Buffer) {
          WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(cf, (uint64_t *)this + 29, (int *)&v2137, v2136);
        }
        goto LABEL_1450;
      }
LABEL_2306:
      switch(v6)
      {
        case 3637:
          uint64_t v1373 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1375 = v1374;
          if (v1374)
          {
            uint64_t v1376 = v1373;
            if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0)
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1377 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1377 = &unk_1EE9BC868;
              *(void *)(v1377 + 8) = v1376;
              *(unsigned char *)(v1377 + 16) = v1375;
              *(_DWORD *)(v1377 + 17) = *(_DWORD *)cf;
              *(_DWORD *)(v1377 + 20) = *(_DWORD *)&cf[3];
              *(void *)(v1377 + 24) = a2;
              uint64_t v1378 = WebCore::GraphicsContextGLANGLE::checkFramebufferStatus(*((WebCore::GraphicsContextGLANGLE **)this
                                                                              + 7));
              (*(void (**)(uint64_t, uint64_t))(*(void *)v1377 + 16))(v1377, v1378);
              (*(void (**)(uint64_t))(*(void *)v1377 + 8))(v1377);
            }
          }
          return;
        case 3639:
          uint64_t v1634 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v2118 = v1635;
          uint64_t v2119 = v1634;
          if (!v1635) {
            return;
          }
          IPC::Decoder::decode<WebKit::SharedVideoFrame>((IPC::Decoder *)v4, (uint64_t)v2131);
          if (!v2135)
          {
            cf[0] = 0;
            unsigned __int8 v2130 = 0;
            goto LABEL_2681;
          }
          unint64_t v1636 = (unint64_t)v4[1];
          uint64_t v1637 = (uint64_t)*v4;
          unint64_t v1638 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if (v1636 < v1638 || v1636 - v1638 <= 3)
          {
            v2074 = 0;
            uint64_t v2075 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2076 = v4[3];
            if (!v2076) {
              goto LABEL_2978;
            }
            if (v1636) {
              goto LABEL_3034;
            }
            goto LABEL_2976;
          }
          v1639 = (unsigned int *)(v1637 + v1638);
          v4[2] = (WTF *)(v1639 + 1);
          if (!v1637) {
            goto LABEL_3077;
          }
          unint64_t v1640 = (((unint64_t)v1639 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1637;
          if (v1636 >= v1640 && v1636 - v1640 > 3)
          {
            unsigned int v1641 = *v1639;
            v4[2] = (WTF *)((((unint64_t)v1639 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4);
            unsigned int v2116 = *(_DWORD *)(((unint64_t)v1639 + 7) & 0xFFFFFFFFFFFFFFFCLL);
            unsigned int v2117 = v1641;
            unint64_t v1642 = (((((unint64_t)v1639 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1637;
            if (v1636 >= v1642 && v1636 - v1642 > 3)
            {
              v1643 = (unsigned int *)(v1637 + v1642);
              v4[2] = (WTF *)(v1643 + 1);
              unsigned int v1644 = *v1643;
              unint64_t v1645 = (((unint64_t)v1643 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1637;
              if (v1636 >= v1645 && v1636 - v1645 > 3)
              {
                v1646 = (unsigned int *)(v1637 + v1645);
                v4[2] = (WTF *)(v1646 + 1);
                unsigned int v1647 = *v1646;
                unint64_t v1648 = (((unint64_t)v1646 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1637;
                if (v1636 >= v1648 && v1636 - v1648 > 3)
                {
                  v1649 = (unsigned int *)(v1637 + v1648);
                  v4[2] = (WTF *)(v1649 + 1);
                  unsigned int v1650 = *v1649;
                  unint64_t v1651 = (((unint64_t)v1649 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1637;
                  if (v1636 >= v1651 && v1636 - v1651 > 3)
                  {
                    v1652 = (unsigned int *)(v1637 + v1651);
                    unsigned int v1653 = *v1652;
                    v4[2] = (WTF *)(v1652 + 1);
                    if (v1636 > (unint64_t)v1652 - v1637 + 4)
                    {
                      v4[2] = (WTF *)((char *)v1652 + 5);
                      unsigned int v1654 = *((unsigned __int8 *)v1652 + 4);
                      if (v1654 < 2)
                      {
                        BOOL v1655 = v1654 != 0;
                        if (v1636 > (unint64_t)v1652 - v1637 + 5)
                        {
                          v4[2] = (WTF *)((char *)v1652 + 6);
                          unsigned int v1656 = *((unsigned __int8 *)v1652 + 5);
                          if (v1656 < 2)
                          {
                            BOOL v1657 = v1656 != 0;
                            *(_OWORD *)CFTypeRef cf = *(_OWORD *)v2131;
                            *(_DWORD *)&cf[16] = v2132;
                            LOBYTE(v2121) = 0;
                            LODWORD(v2122) = -1;
                            std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),IPC::ObjectIdentifierReadReference<WTF::ObjectIdentifierGeneric<WebKit::RemoteVideoFrameIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::MachSendRight,WebCore::IntSize>,(std::__variant_detail::_Trait)1>>((uint64_t)&v2121, (uint64_t)&v2132 + 8);
                            unint64_t v2123 = __PAIR64__(v2116, v2117);
                            unsigned int v2124 = v1644;
                            unsigned int v2125 = v1647;
                            unsigned int v2126 = v1650;
                            unsigned int v2127 = v1653;
                            char v2128 = v1655;
                            int v1658 = 1;
                            unsigned __int8 v2129 = v1657;
                            goto LABEL_2556;
                          }
                          goto LABEL_3077;
                        }
                        v2074 = 0;
                        uint64_t v2075 = 0;
                        void *v4 = 0;
                        v4[1] = 0;
                        v2095 = v4[3];
                        if (!v2095)
                        {
LABEL_2978:
                          void *v4 = 0;
                          v4[1] = 0;
                          v2096 = v4[3];
                          if (v2096 && v2074) {
                            (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2096 + 16))(v2096, v2075, v2074);
                          }
                          goto LABEL_2979;
                        }
                        goto LABEL_3032;
                      }
LABEL_3077:
                      v2074 = (WTF *)v1636;
                      uint64_t v2075 = v1637;
                      goto LABEL_2978;
                    }
                    v2074 = 0;
                    uint64_t v2075 = 0;
                    void *v4 = 0;
                    v4[1] = 0;
                    v2095 = v4[3];
                    if (!v2095) {
                      goto LABEL_2978;
                    }
                    if (v1636)
                    {
LABEL_3032:
                      (*(void (**)(WTF *))(*(void *)v2095 + 16))(v2095);
                      v2074 = 0;
                      v2113 = v4[1];
                      v2076 = v4[3];
                      void *v4 = 0;
                      v4[1] = 0;
                      uint64_t v2075 = 0;
                      if (!v2076 || !v2113) {
                        goto LABEL_2978;
                      }
LABEL_3034:
                      (*(void (**)(WTF *))(*(void *)v2076 + 16))(v2076);
                      uint64_t v2075 = (uint64_t)*v4;
                      v2074 = v4[1];
                      goto LABEL_2978;
                    }
LABEL_2976:
                    v2074 = 0;
                    uint64_t v2075 = 0;
                    goto LABEL_2978;
                  }
                }
              }
            }
          }
          void *v4 = 0;
          v4[1] = 0;
          v2044 = v4[3];
          if (v2044)
          {
            if (v1636)
            {
              (*(void (**)(WTF *))(*(void *)v2044 + 16))(v2044);
              uint64_t v2045 = (uint64_t)*v4;
              v2046 = v4[1];
              v2047 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              if (v2047)
              {
                if (v2046) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v2047 + 16))(v2047, v2045);
                }
              }
            }
          }
LABEL_2979:
          int v1658 = 0;
          cf[0] = 0;
LABEL_2556:
          unsigned __int8 v2130 = v1658;
          if (v2135 && v2134 != -1)
          {
            ((void (*)(long long *, char *))off_1EE9BC770[v2134])(&v2137, (char *)&v2132 + 8);
            int v1658 = v2130;
          }
          if (v1658) {
            goto LABEL_2560;
          }
LABEL_2681:
          uint64_t v1801 = (uint64_t)*v4;
          v1802 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v1803 = v4[3];
          if (!v1803) {
            return;
          }
          if (!v1802) {
            return;
          }
          (*(void (**)(WTF *, uint64_t))(*(void *)v1803 + 16))(v1803, v1801);
          if (!v2130) {
            return;
          }
LABEL_2560:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          if (!v2130) {
            goto LABEL_3054;
          }
          int v4 = v2131;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          if (!v2130) {
            goto LABEL_3054;
          }
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1659 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1659 = &unk_1EE9BC7A0;
          *(void *)(v1659 + 8) = v2119;
          *(unsigned char *)(v1659 + 16) = v2118;
          *(_DWORD *)(v1659 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(_DWORD *)(v1659 + 17) = v2137;
          *(void *)(v1659 + 24) = a2;
          v2131[0] = (WTF *)v1659;
          WebKit::RemoteGraphicsContextGL::copyTextureFromVideoFrame((uint64_t)this, (uint64_t)cf, v2123, HIDWORD(v2123), v2124, v2125, v2126, v2127, v2128, v2129, (uint64_t *)v2131);
          v1660 = v2131[0];
          v2131[0] = 0;
          if (v1660) {
            (*(void (**)(WTF *))(*(void *)v1660 + 8))(v1660);
          }
          if (v2130 && v2122 != -1) {
            ((void (*)(WTF **, long long *))off_1EE9BC770[v2122])(v2131, &v2121);
          }
          return;
        case 3640:
          uint64_t v1626 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1628 = v1627;
          if (!v1627) {
            return;
          }
          uint64_t v1629 = v1626;
          unsigned __int16 v1630 = IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v4);
          if (v1630 < 0x100u) {
            goto LABEL_2531;
          }
          v1794 = v4[1];
          uint64_t v1795 = (uint64_t)*v4;
          unint64_t v1796 = (((unint64_t)v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v4;
          if ((unint64_t)v1794 < v1796 || (unint64_t)v1794 - v1796 <= 7)
          {
            v2097 = 0;
            uint64_t v2098 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2099 = v4[3];
            if (v2099)
            {
              if (v1794)
              {
                (*(void (**)(WTF *))(*(void *)v2099 + 16))(v2099);
                uint64_t v2098 = (uint64_t)*v4;
                v2097 = v4[1];
              }
              else
              {
                v2097 = 0;
                uint64_t v2098 = 0;
              }
            }
          }
          else
          {
            v1797 = (uint64_t *)(v1795 + v1796);
            v4[2] = (WTF *)(v1797 + 1);
            if (v1795)
            {
              uint64_t v1798 = *v1797;
              if ((unint64_t)(*v1797 - 1) < 0xFFFFFFFFFFFFFFFELL)
              {
                char v1799 = v1630;
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                uint64_t v1800 = WTF::fastMalloc((WTF *)0x20);
                *(void *)uint64_t v1800 = &unk_1EE9BC730;
                *(void *)(v1800 + 8) = v1629;
                *(unsigned char *)(v1800 + 16) = v1628;
                *(_DWORD *)(v1800 + 17) = v2131[0];
                *(_DWORD *)(v1800 + 20) = *(_DWORD *)((char *)v2131 + 3);
                *(void *)(v1800 + 24) = a2;
                *(void *)CFTypeRef cf = v1800;
                WebKit::RemoteGraphicsContextGL::drawSurfaceBufferToImageBuffer((uint64_t)this, v1799 != 0, v1798, (uint64_t *)cf);
                uint64_t v1479 = *(void *)cf;
                *(void *)CFTypeRef cf = 0;
                if (!v1479) {
                  return;
                }
                goto LABEL_2679;
              }
LABEL_2983:
              void *v4 = 0;
              v4[1] = 0;
              v2049 = v4[3];
              if (!v2049) {
                goto LABEL_2531;
              }
              goto LABEL_2903;
            }
            v2097 = v1794;
            uint64_t v2098 = 0;
          }
          v1794 = 0;
          uint64_t v1795 = 0;
          void *v4 = 0;
          v4[1] = 0;
          v2100 = v4[3];
          if (v2100)
          {
            if (v2097)
            {
              (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2100 + 16))(v2100, v2098, v2097);
              if (*v4) {
                goto LABEL_3054;
              }
              uint64_t v1795 = 0;
              v1794 = v4[1];
            }
            else
            {
              v1794 = 0;
              uint64_t v1795 = 0;
            }
          }
          goto LABEL_2983;
        case 3642:
          uint64_t v1721 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1723 = v1722;
          if (!v1722) {
            return;
          }
          uint64_t v1724 = v1721;
          uint64_t v1725 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1726) {
            return;
          }
          unint64_t v1727 = v1725;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1728 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1728 = &unk_1EE9BC890;
          *(void *)(v1728 + 8) = v1724;
          *(unsigned char *)(v1728 + 16) = v1723;
          *(_DWORD *)(v1728 + 17) = v2131[0];
          *(_DWORD *)(v1728 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1728 + 24) = a2;
          *(void *)CFTypeRef cf = v1728;
          WebKit::RemoteGraphicsContextGL::getActiveAttrib((uint64_t *)this, v1727, HIDWORD(v1727), (uint64_t *)cf);
          goto LABEL_2614;
        case 3643:
          uint64_t v1605 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1607 = v1606;
          if (!v1606) {
            return;
          }
          uint64_t v1608 = v1605;
          uint64_t v1609 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1610) {
            return;
          }
          unint64_t v1611 = v1609;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1612 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1612 = &unk_1EE9BC8B8;
          *(void *)(v1612 + 8) = v1608;
          *(unsigned char *)(v1612 + 16) = v1607;
          *(_DWORD *)(v1612 + 17) = v2131[0];
          *(_DWORD *)(v1612 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1612 + 24) = a2;
          *(void *)CFTypeRef cf = v1612;
          WebKit::RemoteGraphicsContextGL::getActiveUniform((uint64_t *)this, v1611, HIDWORD(v1611), (uint64_t *)cf);
LABEL_2614:
          uint64_t v1509 = *(void *)cf;
          if (*(void *)cf) {
            goto LABEL_2766;
          }
          return;
        case 3647:
          uint64_t v1708 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1710 = v1709;
          if (!v1709) {
            return;
          }
          uint64_t v1711 = v1708;
          IPC::Decoder::decode<std::tuple<int,WTF::String>>((IPC::Decoder *)v4, cf);
          if (!cf[16]) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          if (!cf[16]) {
            goto LABEL_3054;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          if (!cf[16]) {
            goto LABEL_3054;
          }
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1712 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1712 = &unk_1EE9BC8E0;
          *(void *)(v1712 + 8) = v1711;
          *(unsigned char *)(v1712 + 16) = v1710;
          *(_DWORD *)(v1712 + 17) = v2137;
          *(_DWORD *)(v1712 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(void *)(v1712 + 24) = a2;
          v2131[0] = (WTF *)v1712;
          WebKit::RemoteGraphicsContextGL::getAttribLocation((uint64_t)this, *(unsigned int *)cf, (WTF::String *)&cf[8], (uint64_t *)v2131);
          goto LABEL_2643;
        case 3648:
          uint64_t v1595 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1597 = v1596;
          if (v1596)
          {
            uint64_t v1598 = v1595;
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>((uint64_t)cf, v4);
            if (cf[16])
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1599 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1599 = &unk_1EE9BCA48;
              *(void *)(v1599 + 8) = v1598;
              *(unsigned char *)(v1599 + 16) = v1597;
              *(_DWORD *)(v1599 + 17) = v2137;
              *(_DWORD *)(v1599 + 20) = *(_DWORD *)((char *)&v2137 + 3);
              *(void *)(v1599 + 24) = a2;
              v2131[0] = (WTF *)v1599;
              WebKit::RemoteGraphicsContextGL::getBooleanv((int)this, *(int *)cf, *(WTF **)&cf[8], (uint64_t *)v2131);
              v1568 = v2131[0];
              if (v2131[0]) {
                goto LABEL_2629;
              }
            }
          }
          return;
        case 3649:
          uint64_t v1600 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1602 = v1601;
          if (!v1601) {
            return;
          }
          uint64_t v1603 = v1600;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1604) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1581 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1581 = &unk_1EE9BC908;
          *(void *)(v1581 + 8) = v1603;
          *(unsigned char *)(v1581 + 16) = v1602;
          *(_DWORD *)(v1581 + 17) = *(_DWORD *)cf;
          *(_DWORD *)(v1581 + 20) = *(_DWORD *)&cf[3];
          *(void *)(v1581 + 24) = a2;
          BufferParameteruint64_t i = WebCore::GraphicsContextGLANGLE::getBufferParameteri(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                  + 7));
          goto LABEL_2652;
        case 3650:
          uint64_t v1677 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1679 = v1678;
          if (!v1678) {
            return;
          }
          v1450 = v4[1];
          uint64_t v1451 = (uint64_t)*v4;
          unint64_t v1680 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if ((unint64_t)v1450 < v1680 || (unint64_t)v1450 - v1680 <= 3)
          {
LABEL_2934:
            v2057 = 0;
            uint64_t v2058 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2059 = v4[3];
            if (v2059)
            {
              if (v1450)
              {
                (*(void (**)(WTF *))(*(void *)v2059 + 16))(v2059);
                uint64_t v2058 = (uint64_t)*v4;
                v2057 = v4[1];
              }
              else
              {
                v2057 = 0;
                uint64_t v2058 = 0;
              }
            }
          }
          else
          {
            v1681 = (int *)(v1451 + v1680);
            v4[2] = (WTF *)(v1681 + 1);
            if (v1451)
            {
              unint64_t v1682 = (((unint64_t)v1681 + 11) & 0xFFFFFFFFFFFFFFF8) - v1451;
              if ((unint64_t)v1450 < v1682
                || (unint64_t)v1450 - v1682 <= 7
                || (int v1683 = *v1681,
                    v1684 = (uint64_t *)(((unint64_t)v1681 + 11) & 0xFFFFFFFFFFFFFFF8),
                    v4[2] = (WTF *)(v1451 + v1682 + 8),
                    unint64_t v1685 = ((v1451 + v1682 + 15) & 0xFFFFFFFFFFFFFFF8) - v1451,
                    (unint64_t)v1450 < v1685)
                || (unint64_t)v1450 - v1685 <= 7)
              {
LABEL_2900:
                void *v4 = 0;
                v4[1] = 0;
                v2048 = v4[3];
                if (!v2048) {
                  goto LABEL_2531;
                }
                if (!v1450) {
                  goto LABEL_2531;
                }
                (*(void (**)(WTF *))(*(void *)v2048 + 16))(v2048);
                uint64_t v1795 = (uint64_t)*v4;
                v1794 = v4[1];
                v2049 = v4[3];
                void *v4 = 0;
                v4[1] = 0;
                if (!v2049) {
                  goto LABEL_2531;
                }
LABEL_2903:
                if (v1794) {
                  (*(void (**)(WTF *, uint64_t))(*(void *)v2049 + 16))(v2049, v1795);
                }
LABEL_2531:
                v1631 = v4[1];
                void *v4 = 0;
                v4[1] = 0;
                v1632 = v4[3];
                if (v1632 && v1631)
                {
                  v1633 = *(void (**)(void))(*(void *)v1632 + 16);
                  v1633();
                }
                return;
              }
              uint64_t v1686 = v1677;
              uint64_t v1687 = *v1684;
              v1688 = *(WTF **)(v1451 + v1685);
              v4[2] = (WTF *)(v1451 + v1685 + 8);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1689 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1689 = &unk_1EE9BC7C8;
              *(void *)(v1689 + 8) = v1686;
              *(unsigned char *)(v1689 + 16) = v1679;
              *(_DWORD *)(v1689 + 17) = v2131[0];
              *(_DWORD *)(v1689 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1689 + 24) = a2;
              *(void *)CFTypeRef cf = v1689;
              WebKit::RemoteGraphicsContextGL::getBufferSubDataInline((int)this, v1683, v1687, v1688, (uint64_t *)cf);
              uint64_t v1479 = *(void *)cf;
              *(void *)CFTypeRef cf = 0;
              if (!v1479) {
                return;
              }
LABEL_2679:
              (*(void (**)(uint64_t))(*(void *)v1479 + 8))(v1479);
              return;
            }
LABEL_3080:
            v2057 = v1450;
            uint64_t v2058 = v1451;
          }
          void *v4 = 0;
          v4[1] = 0;
          v2060 = v4[3];
          if (v2060 && v2057) {
            (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2060 + 16))(v2060, v2058, v2057);
          }
          goto LABEL_2531;
        case 3651:
          uint64_t v1661 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1663 = v1662;
          if (!v1662) {
            return;
          }
          uint64_t v1664 = v1661;
          v1665 = v4[1];
          uint64_t v1666 = (uint64_t)*v4;
          unint64_t v1667 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if ((unint64_t)v1665 < v1667 || (unint64_t)v1665 - v1667 <= 3)
          {
            v2061 = 0;
            uint64_t v2062 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2063 = v4[3];
            if (v2063)
            {
              if (v1665)
              {
                (*(void (**)(WTF *))(*(void *)v2063 + 16))(v2063);
                uint64_t v2062 = (uint64_t)*v4;
                v2061 = v4[1];
              }
              else
              {
                v2061 = 0;
                uint64_t v2062 = 0;
              }
            }
            goto LABEL_2939;
          }
          v1668 = (int *)(v1666 + v1667);
          v4[2] = (WTF *)(v1668 + 1);
          if (!v1666)
          {
            v2061 = v1665;
            uint64_t v2062 = 0;
LABEL_2939:
            void *v4 = 0;
            v4[1] = 0;
            v2064 = v4[3];
            if (v2064 && v2061) {
              (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2064 + 16))(v2064, v2062, v2061);
            }
            goto LABEL_2940;
          }
          unint64_t v1669 = (((unint64_t)v1668 + 11) & 0xFFFFFFFFFFFFFFF8) - v1666;
          if ((unint64_t)v1665 < v1669
            || (unint64_t)v1665 - v1669 <= 7
            || (int v1670 = *v1668,
                v4[2] = (WTF *)((((unint64_t)v1668 + 11) & 0xFFFFFFFFFFFFFFF8) + 8),
                uint64_t v1671 = *(void *)(((unint64_t)v1668 + 11) & 0xFFFFFFFFFFFFFFF8),
                unint64_t v1672 = (((((unint64_t)v1668 + 11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) - v1666,
                (unint64_t)v1665 < v1672)
            || (unint64_t)v1665 - v1672 <= 7)
          {
            void *v4 = 0;
            v4[1] = 0;
            v2050 = v4[3];
            if (v2050)
            {
              if (v1665)
              {
                (*(void (**)(WTF *))(*(void *)v2050 + 16))(v2050);
                uint64_t v2051 = (uint64_t)*v4;
                v2052 = v4[1];
                v2053 = v4[3];
                void *v4 = 0;
                v4[1] = 0;
                if (v2053)
                {
                  if (v2052) {
                    (*(void (**)(WTF *, uint64_t))(*(void *)v2053 + 16))(v2053, v2051);
                  }
                }
              }
            }
          }
          else
          {
            v1673 = (uint64_t *)(v1666 + v1672);
            uint64_t v1674 = *v1673;
            v4[2] = (WTF *)(v1673 + 1);
            IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)v4, (uint64_t)v2131);
            if ((_BYTE)v2132)
            {
              *(_DWORD *)CFTypeRef cf = v1670;
              *(void *)&cf[8] = v1671;
              *(void *)&cf[16] = v1674;
              WTF::MachSendRight::MachSendRight();
              *((WTF **)&v2121 + 1) = v2131[1];
              LOBYTE(v2122) = 1;
              if ((_BYTE)v2132) {
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2131);
              }
              goto LABEL_2578;
            }
          }
LABEL_2940:
          cf[0] = 0;
          LOBYTE(v2122) = 0;
          uint64_t v2065 = (uint64_t)*v4;
          v2066 = v4[1];
          void *v4 = 0;
          v4[1] = 0;
          v2067 = v4[3];
          if (!v2067) {
            return;
          }
          if (!v2066) {
            return;
          }
          (*(void (**)(WTF *, uint64_t))(*(void *)v2067 + 16))(v2067, v2065);
          if (!(_BYTE)v2122) {
            return;
          }
LABEL_2578:
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1675 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1675 = &unk_1EE9BC7F0;
          *(void *)(v1675 + 8) = v1664;
          *(unsigned char *)(v1675 + 16) = v1663;
          *(_DWORD *)(v1675 + 20) = *(_DWORD *)((char *)v2136 + 3);
          *(_DWORD *)(v1675 + 17) = v2136[0];
          *(void *)(v1675 + 24) = a2;
          *(void *)&long long v2137 = v1675;
          v1561 = (WTF::MachSendRight *)&v2121;
          WTF::MachSendRight::MachSendRight();
          v2131[1] = *((WTF **)&v2121 + 1);
          WebKit::RemoteGraphicsContextGL::getBufferSubDataSharedMemory((uint64_t)this, *(unsigned int *)cf, *(uint64_t *)&cf[8], *(unint64_t *)&cf[16], (uint64_t)v2131, (uint64_t *)&v2137);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2131);
          uint64_t v1676 = v2137;
          *(void *)&long long v2137 = 0;
          if (v1676) {
            (*(void (**)(uint64_t))(*(void *)v1676 + 8))(v1676);
          }
          if ((_BYTE)v2122) {
LABEL_2581:
          }
            WTF::MachSendRight::~MachSendRight(v1561);
          return;
        case 3652:
          uint64_t v1743 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1745 = v1744;
          if (v1744)
          {
            uint64_t v1746 = v1743;
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
            atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
            uint64_t v1747 = WTF::fastMalloc((WTF *)0x20);
            *(void *)uint64_t v1747 = &unk_1EE9BC708;
            *(void *)(v1747 + 8) = v1746;
            *(unsigned char *)(v1747 + 16) = v1745;
            *(_DWORD *)(v1747 + 17) = v2131[0];
            *(_DWORD *)(v1747 + 20) = *(_DWORD *)((char *)v2131 + 3);
            *(void *)(v1747 + 24) = a2;
            *(void *)CFTypeRef cf = v1747;
            WebKit::RemoteGraphicsContextGL::getErrors((uint64_t)this, (uint64_t *)cf);
            uint64_t v1479 = *(void *)cf;
            *(void *)CFTypeRef cf = 0;
            if (v1479) {
              goto LABEL_2679;
            }
          }
          return;
        case 3653:
          uint64_t v1563 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1565 = v1564;
          if (!v1564) {
            return;
          }
          uint64_t v1566 = v1563;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>((uint64_t)cf, v4);
          if (!cf[16]) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1567 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1567 = &unk_1EE9BC958;
          *(void *)(v1567 + 8) = v1566;
          *(unsigned char *)(v1567 + 16) = v1565;
          *(_DWORD *)(v1567 + 17) = v2137;
          *(_DWORD *)(v1567 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(void *)(v1567 + 24) = a2;
          v2131[0] = (WTF *)v1567;
          WebKit::RemoteGraphicsContextGL::getFloatv((uint64_t)this, *(unsigned int *)cf, *(unint64_t *)&cf[8], (uint64_t *)v2131);
          goto LABEL_2497;
        case 3655:
          uint64_t v1537 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1539 = v1538;
          if (!v1538) {
            return;
          }
          uint64_t v1540 = v1537;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int>>((uint64_t *)v4);
          if ((v1541 & 0xFF00000000) == 0) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1542 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1542 = &unk_1EE9BCA70;
          *(void *)(v1542 + 8) = v1540;
          *(unsigned char *)(v1542 + 16) = v1539;
          *(_DWORD *)(v1542 + 17) = *(_DWORD *)cf;
          *(_DWORD *)(v1542 + 20) = *(_DWORD *)&cf[3];
          *(void *)(v1542 + 24) = a2;
          FramebufferAttachmentParameteruint64_t i = WebCore::GraphicsContextGLANGLE::getFramebufferAttachmentParameteri(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          (*(void (**)(uint64_t, uint64_t))(*(void *)v1542 + 16))(v1542, FramebufferAttachmentParameteri);
          v1524 = *(void (**)(void))(*(void *)v1542 + 8);
          goto LABEL_2653;
        case 3656:
          uint64_t v1753 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1755 = v1754;
          if (!v1754) {
            return;
          }
          uint64_t v1756 = v1753;
          if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) == 0) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1593 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1593 = &unk_1EE9BC9D0;
          *(void *)(v1593 + 8) = v1756;
          *(unsigned char *)(v1593 + 16) = v1755;
          *(_DWORD *)(v1593 + 17) = *(_DWORD *)cf;
          *(_DWORD *)(v1593 + 20) = *(_DWORD *)&cf[3];
          *(void *)(v1593 + 24) = a2;
          uint64_t Integer64 = WebCore::GraphicsContextGLANGLE::getInteger64(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2511;
        case 3658:
          uint64_t v1690 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1692 = v1691;
          if (!v1691) {
            return;
          }
          uint64_t v1693 = v1690;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1694) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1593 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1593 = &unk_1EE9BC9F8;
          *(void *)(v1593 + 8) = v1693;
          *(unsigned char *)(v1593 + 16) = v1692;
          *(_DWORD *)(v1593 + 17) = *(_DWORD *)cf;
          *(_DWORD *)(v1593 + 20) = *(_DWORD *)&cf[3];
          *(void *)(v1593 + 24) = a2;
          uint64_t Integer64 = WebCore::GraphicsContextGLANGLE::getInteger64i(*((WebCore::GraphicsContextGLANGLE **)this + 7));
          goto LABEL_2511;
        case 3659:
          uint64_t v1695 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1697 = v1696;
          if (v1696)
          {
            uint64_t v1698 = v1695;
            uint64_t v1699 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
            if (v1700)
            {
              unint64_t v1701 = v1699;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1702 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1702 = &unk_1EE9BC9A8;
              *(void *)(v1702 + 8) = v1698;
              *(unsigned char *)(v1702 + 16) = v1697;
              *(_DWORD *)(v1702 + 17) = v2131[0];
              *(_DWORD *)(v1702 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1702 + 24) = a2;
              *(void *)CFTypeRef cf = v1702;
              WebKit::RemoteGraphicsContextGL::getIntegeri_v((uint64_t)this, v1701, HIDWORD(v1701), (uint64_t *)cf);
              uint64_t v1509 = *(void *)cf;
              if (*(void *)cf) {
                goto LABEL_2766;
              }
            }
          }
          return;
        case 3660:
          uint64_t v1748 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1750 = v1749;
          if (!v1749) {
            return;
          }
          uint64_t v1751 = v1748;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>((uint64_t)cf, v4);
          if (!cf[16]) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1752 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1752 = &unk_1EE9BC980;
          *(void *)(v1752 + 8) = v1751;
          *(unsigned char *)(v1752 + 16) = v1750;
          *(_DWORD *)(v1752 + 17) = v2137;
          *(_DWORD *)(v1752 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(void *)(v1752 + 24) = a2;
          v2131[0] = (WTF *)v1752;
          WebKit::RemoteGraphicsContextGL::getIntegerv((uint64_t)this, *(unsigned int *)cf, *(unint64_t *)&cf[8], (uint64_t *)v2131);
          goto LABEL_2628;
        case 3662:
          uint64_t v1729 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1731 = v1730;
          if (!v1730) {
            return;
          }
          uint64_t v1732 = v1729;
          uint64_t v1733 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1733 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1734 = v1733;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1735 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1735 = &unk_1EE9BCA98;
          *(void *)(v1735 + 8) = v1732;
          *(unsigned char *)(v1735 + 16) = v1731;
          *(_DWORD *)(v1735 + 17) = v2131[0];
          *(_DWORD *)(v1735 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1735 + 24) = a2;
          *(void *)CFTypeRef cf = v1735;
          WebKit::RemoteGraphicsContextGL::getProgramInfoLog((uint64_t *)this, v1734, (uint64_t *)cf);
          goto LABEL_2636;
        case 3663:
          uint64_t v1493 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1495 = v1494;
          if (!v1494) {
            return;
          }
          uint64_t v1496 = v1493;
          uint64_t v1497 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1498) {
            return;
          }
          uint64_t v1499 = v1497;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1500 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1500 = &unk_1EE9BCA20;
          *(void *)(v1500 + 8) = v1496;
          *(unsigned char *)(v1500 + 16) = v1495;
          *(_DWORD *)(v1500 + 17) = v2131[0];
          *(_DWORD *)(v1500 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1500 + 24) = a2;
          *(void *)CFTypeRef cf = v1500;
          WebKit::RemoteGraphicsContextGL::getProgrami((uint64_t)this, v1499, HIDWORD(v1499), (uint64_t *)cf);
          goto LABEL_2466;
        case 3669:
          uint64_t v1576 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1578 = v1577;
          if (!v1577) {
            return;
          }
          uint64_t v1579 = v1576;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1580) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1581 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1581 = &unk_1EE9BCAC0;
          *(void *)(v1581 + 8) = v1579;
          *(unsigned char *)(v1581 + 16) = v1578;
          *(_DWORD *)(v1581 + 17) = *(_DWORD *)cf;
          *(_DWORD *)(v1581 + 20) = *(_DWORD *)&cf[3];
          *(void *)(v1581 + 24) = a2;
          BufferParameteruint64_t i = WebCore::GraphicsContextGLANGLE::getRenderbufferParameteri(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                        + 7));
          goto LABEL_2652;
        case 3672:
          uint64_t v1757 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1759 = v1758;
          if (!v1758) {
            return;
          }
          uint64_t v1760 = v1757;
          uint64_t v1761 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1761 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1762 = v1761;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1763 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1763 = &unk_1EE9BCB10;
          *(void *)(v1763 + 8) = v1760;
          *(unsigned char *)(v1763 + 16) = v1759;
          *(_DWORD *)(v1763 + 17) = v2131[0];
          *(_DWORD *)(v1763 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1763 + 24) = a2;
          *(void *)CFTypeRef cf = v1763;
          WebKit::RemoteGraphicsContextGL::getShaderInfoLog((uint64_t *)this, v1762, (uint64_t *)cf);
          goto LABEL_2636;
        case 3673:
          uint64_t v1501 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1503 = v1502;
          if (v1502)
          {
            uint64_t v1504 = v1501;
            uint64_t v1505 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
            if (v1506)
            {
              unint64_t v1507 = v1505;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1508 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1508 = &unk_1EE9BCB38;
              *(void *)(v1508 + 8) = v1504;
              *(unsigned char *)(v1508 + 16) = v1503;
              *(_DWORD *)(v1508 + 17) = v2131[0];
              *(_DWORD *)(v1508 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1508 + 24) = a2;
              *(void *)CFTypeRef cf = v1508;
              WebKit::RemoteGraphicsContextGL::getShaderPrecisionFormat((uint64_t)this, v1507, HIDWORD(v1507), (uint64_t *)cf);
              uint64_t v1509 = *(void *)cf;
              if (*(void *)cf) {
                goto LABEL_2766;
              }
            }
          }
          return;
        case 3674:
          uint64_t v1569 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1571 = v1570;
          if (!v1570) {
            return;
          }
          uint64_t v1572 = v1569;
          uint64_t v1573 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1573 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1574 = v1573;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1575 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1575 = &unk_1EE9BCB60;
          *(void *)(v1575 + 8) = v1572;
          *(unsigned char *)(v1575 + 16) = v1571;
          *(_DWORD *)(v1575 + 17) = v2131[0];
          *(_DWORD *)(v1575 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1575 + 24) = a2;
          *(void *)CFTypeRef cf = v1575;
          WebKit::RemoteGraphicsContextGL::getShaderSource((uint64_t *)this, v1574, (uint64_t *)cf);
          goto LABEL_2636;
        case 3675:
          uint64_t v1516 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1518 = v1517;
          if (!v1517) {
            return;
          }
          uint64_t v1519 = v1516;
          uint64_t v1520 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1521) {
            return;
          }
          uint64_t v1522 = v1520;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1523 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1523 = &unk_1EE9BCAE8;
          *(void *)(v1523 + 8) = v1519;
          *(unsigned char *)(v1523 + 16) = v1518;
          *(_DWORD *)(v1523 + 17) = v2131[0];
          *(_DWORD *)(v1523 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1523 + 24) = a2;
          *(void *)CFTypeRef cf = v1523;
          WebKit::RemoteGraphicsContextGL::getShaderi((uint64_t)this, v1522, HIDWORD(v1522), (uint64_t *)cf);
LABEL_2466:
          if (!*(void *)cf) {
            return;
          }
          v1524 = *(void (**)(void))(**(void **)cf + 8);
LABEL_2653:
          v1524();
          return;
        case 3676:
          uint64_t v1613 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1615 = v1614;
          if (!v1614) {
            return;
          }
          uint64_t v1616 = v1613;
          uint64_t v1617 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1617 & 0xFF00000000) == 0) {
            return;
          }
          uint64_t v1618 = v1617;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1619 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1619 = &unk_1EE9BC930;
          *(void *)(v1619 + 8) = v1616;
          *(unsigned char *)(v1619 + 16) = v1615;
          *(_DWORD *)(v1619 + 17) = v2131[0];
          *(_DWORD *)(v1619 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1619 + 24) = a2;
          *(void *)CFTypeRef cf = v1619;
          WebKit::RemoteGraphicsContextGL::getString((uint64_t)this, v1618, (uint64_t *)cf);
LABEL_2636:
          uint64_t v1509 = *(void *)cf;
          if (*(void *)cf) {
            goto LABEL_2766;
          }
          return;
        case 3678:
          uint64_t v1510 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1512 = v1511;
          if (v1511)
          {
            uint64_t v1513 = v1510;
            IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
            if (v1514)
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1515 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1515 = &unk_1EE9BCB88;
              *(void *)(v1515 + 8) = v1513;
              *(unsigned char *)(v1515 + 16) = v1512;
              *(_DWORD *)(v1515 + 17) = *(_DWORD *)cf;
              *(_DWORD *)(v1515 + 20) = *(_DWORD *)&cf[3];
              *(void *)(v1515 + 24) = a2;
              WebCore::GraphicsContextGLANGLE::getTexParameterf(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              (*(void (**)(uint64_t))(*(void *)v1515 + 16))(v1515);
              (*(void (**)(uint64_t))(*(void *)v1515 + 8))(v1515);
            }
          }
          return;
        case 3679:
          uint64_t v1771 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1773 = v1772;
          if (!v1772) {
            return;
          }
          uint64_t v1774 = v1771;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1775) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1581 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1581 = &unk_1EE9BCBB0;
          *(void *)(v1581 + 8) = v1774;
          *(unsigned char *)(v1581 + 16) = v1773;
          *(_DWORD *)(v1581 + 17) = *(_DWORD *)cf;
          *(_DWORD *)(v1581 + 20) = *(_DWORD *)&cf[3];
          *(void *)(v1581 + 24) = a2;
          BufferParameteruint64_t i = WebCore::GraphicsContextGLANGLE::getTexParameteri(*((WebCore::GraphicsContextGLANGLE **)this
                                                                               + 7));
LABEL_2652:
          (*(void (**)(uint64_t, uint64_t))(*(void *)v1581 + 16))(v1581, BufferParameteri);
          v1524 = *(void (**)(void))(*(void *)v1581 + 8);
          goto LABEL_2653;
        case 3684:
          uint64_t v1764 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1766 = v1765;
          if (!v1765) {
            return;
          }
          uint64_t v1767 = v1764;
          IPC::Decoder::decode<std::tuple<int,WTF::String>>((IPC::Decoder *)v4, cf);
          if (!cf[16]) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          if (!cf[16]) {
            goto LABEL_3054;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          if (!cf[16]) {
            goto LABEL_3054;
          }
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1768 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1768 = &unk_1EE9BCC50;
          *(void *)(v1768 + 8) = v1767;
          *(unsigned char *)(v1768 + 16) = v1766;
          *(_DWORD *)(v1768 + 17) = v2137;
          *(_DWORD *)(v1768 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(void *)(v1768 + 24) = a2;
          v2131[0] = (WTF *)v1768;
          WebKit::RemoteGraphicsContextGL::getUniformLocation((uint64_t)this, *(unsigned int *)cf, (WTF::String *)&cf[8], (uint64_t *)v2131);
LABEL_2643:
          v1769 = v2131[0];
          if (v2131[0]) {
LABEL_2644:
          }
            (*(void (**)(WTF *))(*(void *)v2131[0] + 8))(v1769);
LABEL_2645:
          if (cf[16])
          {
            v1770 = *(WTF::StringImpl **)&cf[8];
            *(void *)&cf[8] = 0;
            if (v1770)
            {
              if (*(_DWORD *)v1770 == 2) {
                WTF::StringImpl::destroy(v1770, v1713);
              }
              else {
                *(_DWORD *)v1770 -= 2;
              }
            }
          }
          return;
        case 3685:
          uint64_t v1532 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1534 = v1533;
          if (!v1533) {
            return;
          }
          uint64_t v1535 = v1532;
          IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>((uint64_t)cf, v4);
          if (!cf[16]) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1536 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1536 = &unk_1EE9BCBD8;
          *(void *)(v1536 + 8) = v1535;
          *(unsigned char *)(v1536 + 16) = v1534;
          *(_DWORD *)(v1536 + 17) = v2137;
          *(_DWORD *)(v1536 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(void *)(v1536 + 24) = a2;
          v2131[0] = (WTF *)v1536;
          WebKit::RemoteGraphicsContextGL::getUniformfv((uint64_t)this, *(unsigned int *)cf, *(unsigned int *)&cf[4], *(unint64_t *)&cf[8], (uint64_t *)v2131);
LABEL_2497:
          v1568 = v2131[0];
          if (v2131[0]) {
            goto LABEL_2629;
          }
          return;
        case 3686:
          uint64_t v1583 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1585 = v1584;
          if (!v1584) {
            return;
          }
          uint64_t v1586 = v1583;
          IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>((uint64_t)cf, v4);
          if (!cf[16]) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1587 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1587 = &unk_1EE9BCC00;
          *(void *)(v1587 + 8) = v1586;
          *(unsigned char *)(v1587 + 16) = v1585;
          *(_DWORD *)(v1587 + 17) = v2137;
          *(_DWORD *)(v1587 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(void *)(v1587 + 24) = a2;
          v2131[0] = (WTF *)v1587;
          WebKit::RemoteGraphicsContextGL::getUniformiv((uint64_t)this, *(unsigned int *)cf, *(unsigned int *)&cf[4], *(unint64_t *)&cf[8], (uint64_t *)v2131);
LABEL_2628:
          v1568 = v2131[0];
          if (v2131[0]) {
LABEL_2629:
          }
            (*(void (**)(WTF *))(*(void *)v2131[0] + 8))(v1568);
          return;
        case 3687:
          uint64_t v1703 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1705 = v1704;
          if (v1704)
          {
            uint64_t v1706 = v1703;
            IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>((uint64_t)cf, v4);
            if (cf[16])
            {
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1707 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1707 = &unk_1EE9BCC28;
              *(void *)(v1707 + 8) = v1706;
              *(unsigned char *)(v1707 + 16) = v1705;
              *(_DWORD *)(v1707 + 17) = v2137;
              *(_DWORD *)(v1707 + 20) = *(_DWORD *)((char *)&v2137 + 3);
              *(void *)(v1707 + 24) = a2;
              v2131[0] = (WTF *)v1707;
              WebKit::RemoteGraphicsContextGL::getUniformuiv((uint64_t)this, *(unsigned int *)cf, *(unsigned int *)&cf[4], *(unint64_t *)&cf[8], (uint64_t *)v2131);
              v1568 = v2131[0];
              if (v2131[0]) {
                goto LABEL_2629;
              }
            }
          }
          return;
        case 3688:
          uint64_t v1588 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1590 = v1589;
          if (!v1589) {
            return;
          }
          uint64_t v1591 = v1588;
          IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
          if (!v1592) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1593 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1593 = &unk_1EE9BCC78;
          *(void *)(v1593 + 8) = v1591;
          *(unsigned char *)(v1593 + 16) = v1590;
          *(_DWORD *)(v1593 + 17) = *(_DWORD *)cf;
          *(_DWORD *)(v1593 + 20) = *(_DWORD *)&cf[3];
          *(void *)(v1593 + 24) = a2;
          uint64_t Integer64 = WebCore::GraphicsContextGLANGLE::getVertexAttribOffset(*((WebCore::GraphicsContextGLANGLE **)this
                                                                             + 7));
LABEL_2511:
          (*(void (**)(uint64_t, uint64_t))(*(void *)v1593 + 16))(v1593, Integer64);
          (*(void (**)(uint64_t))(*(void *)v1593 + 8))(v1593);
          return;
        case 3689:
          uint64_t v1783 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1785 = v1784;
          if (!v1784) {
            return;
          }
          uint64_t v1786 = v1783;
          uint64_t v1787 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1787 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1788 = v1787;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1789 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1789 = &unk_1EE9BCCA0;
          *(void *)(v1789 + 8) = v1786;
          *(unsigned char *)(v1789 + 16) = v1785;
          *(_DWORD *)(v1789 + 17) = v2131[0];
          *(_DWORD *)(v1789 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1789 + 24) = a2;
          *(void *)CFTypeRef cf = v1789;
          WebKit::RemoteGraphicsContextGL::isBuffer((uint64_t)this, v1788, (uint64_t *)cf);
          goto LABEL_2660;
        case 3690:
          uint64_t v1525 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1527 = v1526;
          if (!v1526) {
            return;
          }
          uint64_t v1528 = v1525;
          uint64_t v1529 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1529 & 0xFF00000000) == 0) {
            return;
          }
          uint64_t v1530 = v1529;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1531 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1531 = &unk_1EE9BCCC8;
          *(void *)(v1531 + 8) = v1528;
          *(unsigned char *)(v1531 + 16) = v1527;
          *(_DWORD *)(v1531 + 17) = v2131[0];
          *(_DWORD *)(v1531 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1531 + 24) = a2;
          *(void *)CFTypeRef cf = v1531;
          WebKit::RemoteGraphicsContextGL::isEnabled((uint64_t)this, v1530, (uint64_t *)cf);
          goto LABEL_2660;
        case 3691:
          uint64_t v1736 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1738 = v1737;
          if (!v1737) {
            return;
          }
          uint64_t v1739 = v1736;
          uint64_t v1740 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1740 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1741 = v1740;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1742 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1742 = &unk_1EE9BCCF0;
          *(void *)(v1742 + 8) = v1739;
          *(unsigned char *)(v1742 + 16) = v1738;
          *(_DWORD *)(v1742 + 17) = v2131[0];
          *(_DWORD *)(v1742 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1742 + 24) = a2;
          *(void *)CFTypeRef cf = v1742;
          WebKit::RemoteGraphicsContextGL::isFramebuffer((uint64_t)this, v1741, (uint64_t *)cf);
          goto LABEL_2660;
        case 3692:
          uint64_t v1776 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1778 = v1777;
          if (!v1777) {
            return;
          }
          uint64_t v1779 = v1776;
          uint64_t v1780 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1780 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1781 = v1780;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1782 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1782 = &unk_1EE9BCD18;
          *(void *)(v1782 + 8) = v1779;
          *(unsigned char *)(v1782 + 16) = v1778;
          *(_DWORD *)(v1782 + 17) = v2131[0];
          *(_DWORD *)(v1782 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1782 + 24) = a2;
          *(void *)CFTypeRef cf = v1782;
          WebKit::RemoteGraphicsContextGL::isProgram((uint64_t)this, v1781, (uint64_t *)cf);
          goto LABEL_2660;
        case 3695:
          uint64_t v1486 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1488 = v1487;
          if (!v1487) {
            return;
          }
          uint64_t v1489 = v1486;
          uint64_t v1490 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1490 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1491 = v1490;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1492 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1492 = &unk_1EE9BCD40;
          *(void *)(v1492 + 8) = v1489;
          *(unsigned char *)(v1492 + 16) = v1488;
          *(_DWORD *)(v1492 + 17) = v2131[0];
          *(_DWORD *)(v1492 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1492 + 24) = a2;
          *(void *)CFTypeRef cf = v1492;
          WebKit::RemoteGraphicsContextGL::isRenderbuffer((uint64_t)this, v1491, (uint64_t *)cf);
          goto LABEL_2660;
        case 3697:
          uint64_t v1714 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1716 = v1715;
          if (!v1715) {
            return;
          }
          uint64_t v1717 = v1714;
          uint64_t v1718 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
          if ((v1718 & 0xFF00000000) == 0) {
            return;
          }
          unsigned int v1719 = v1718;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1720 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1720 = &unk_1EE9BCD68;
          *(void *)(v1720 + 8) = v1717;
          *(unsigned char *)(v1720 + 16) = v1716;
          *(_DWORD *)(v1720 + 17) = v2131[0];
          *(_DWORD *)(v1720 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1720 + 24) = a2;
          *(void *)CFTypeRef cf = v1720;
          WebKit::RemoteGraphicsContextGL::isShader((uint64_t)this, v1719, (uint64_t *)cf);
LABEL_2660:
          uint64_t v1509 = *(void *)cf;
          if (*(void *)cf) {
LABEL_2766:
          }
            (*(void (**)(uint64_t))(**(void **)cf + 8))(v1509);
          return;
        case 3702:
          uint64_t v1480 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1482 = v1481;
          if (!v1481) {
            return;
          }
          uint64_t v1483 = v1480;
          IPC::Decoder::decode<std::tuple<IPC::Semaphore>>((IPC::Decoder *)v4, (uint64_t)cf);
          if (!cf[8]) {
            return;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
          if (!cf[8]) {
            goto LABEL_3054;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
          if (!cf[8]) {
            goto LABEL_3054;
          }
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1484 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1484 = &unk_1EE9BC6E0;
          *(void *)(v1484 + 8) = v1483;
          *(unsigned char *)(v1484 + 16) = v1482;
          *(_DWORD *)(v1484 + 20) = *(_DWORD *)((char *)&v2137 + 3);
          *(_DWORD *)(v1484 + 17) = v2137;
          *(void *)(v1484 + 24) = a2;
          v2131[0] = (WTF *)v1484;
          (*(void (**)(WebKit::RemoteGraphicsContextGL *, unsigned char *, WTF **))(*(void *)this + 48))(this, cf, v2131);
          v1485 = v2131[0];
          v2131[0] = 0;
          if (v1485) {
            (*(void (**)(WTF *))(*(void *)v1485 + 8))(v1485);
          }
          if (cf[8])
          {
            IPC::Semaphore::destroy((IPC::Semaphore *)cf);
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)cf);
          }
          return;
        case 3703:
          uint64_t v1460 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1462 = v1461;
          if (!v1461) {
            return;
          }
          uint64_t v1463 = v1460;
          IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v4, (uint64_t)cf);
          if (!cf[16]) {
            goto LABEL_2965;
          }
          v1464 = v4[1];
          uint64_t v1465 = (uint64_t)*v4;
          unint64_t v1466 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if ((unint64_t)v1464 < v1466 || (unint64_t)v1464 - v1466 <= 3)
          {
            v2068 = 0;
            uint64_t v2069 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2070 = v4[3];
            if (!v2070) {
              goto LABEL_2964;
            }
            if (v1464) {
              goto LABEL_3044;
            }
          }
          else
          {
            v1467 = (unsigned int *)(v1465 + v1466);
            v4[2] = (WTF *)(v1467 + 1);
            if (!v1465)
            {
LABEL_3078:
              v2068 = v1464;
              uint64_t v2069 = v1465;
              goto LABEL_2964;
            }
            unint64_t v1468 = (((unint64_t)v1467 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1465;
            if ((unint64_t)v1464 < v1468 || (unint64_t)v1464 - v1468 <= 3)
            {
              void *v4 = 0;
              v4[1] = 0;
              v2077 = v4[3];
              if (v2077)
              {
                if (v1464)
                {
                  (*(void (**)(WTF *))(*(void *)v2077 + 16))(v2077);
                  uint64_t v2078 = (uint64_t)*v4;
                  v2079 = v4[1];
                  v2080 = v4[3];
                  void *v4 = 0;
                  v4[1] = 0;
                  if (v2080)
                  {
                    if (v2079) {
                      (*(void (**)(WTF *, uint64_t))(*(void *)v2080 + 16))(v2080, v2078);
                    }
                  }
                }
              }
              goto LABEL_2965;
            }
            v1469 = (WebCore::GraphicsContextGL *)*v1467;
            unint64_t v1470 = ((unint64_t)v1467 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v1471 = (unsigned int *)(v1465 + v1468);
            unsigned int v1473 = *v1471++;
            unsigned int v1472 = v1473;
            v4[2] = (WTF *)v1471;
            if (v1464 > (WTF *)((char *)v1471 - v1465))
            {
              v4[2] = (WTF *)(v1470 + 5);
              unsigned int v1474 = *(unsigned __int8 *)(v1470 + 4);
              if (v1474 < 2)
              {
                BOOL v1475 = v1474 != 0;
                int v1476 = *(_DWORD *)cf;
                unint64_t v1477 = *(void *)&cf[8];
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                uint64_t v1478 = WTF::fastMalloc((WTF *)0x20);
                *(void *)uint64_t v1478 = &unk_1EE9BC818;
                *(void *)(v1478 + 8) = v1463;
                *(unsigned char *)(v1478 + 16) = v1462;
                *(_DWORD *)(v1478 + 17) = v2131[0];
                *(_DWORD *)(v1478 + 20) = *(_DWORD *)((char *)v2131 + 3);
                *(void *)(v1478 + 24) = a2;
                *(void *)CFTypeRef cf = v1478;
                WebKit::RemoteGraphicsContextGL::readPixelsInline((int)this, v1476, v1477, v1469, v1472, v1475, (uint64_t *)cf);
                uint64_t v1479 = *(void *)cf;
                *(void *)CFTypeRef cf = 0;
                if (!v1479) {
                  return;
                }
                goto LABEL_2679;
              }
              goto LABEL_3078;
            }
            v2068 = 0;
            uint64_t v2069 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2085 = v4[3];
            if (!v2085)
            {
LABEL_2964:
              void *v4 = 0;
              v4[1] = 0;
              v2086 = v4[3];
              if (v2086 && v2068) {
                (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2086 + 16))(v2086, v2069, v2068);
              }
LABEL_2965:
              uint64_t v2087 = (uint64_t)*v4;
              v2088 = v4[1];
              void *v4 = 0;
              v4[1] = 0;
              v2089 = v4[3];
              if (v2089 && v2088) {
                (*(void (**)(WTF *, uint64_t))(*(void *)v2089 + 16))(v2089, v2087);
              }
              return;
            }
            if (v1464)
            {
              (*(void (**)(WTF *))(*(void *)v2085 + 16))(v2085);
              v2068 = 0;
              v2114 = v4[1];
              v2070 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              uint64_t v2069 = 0;
              if (!v2070 || !v2114) {
                goto LABEL_2964;
              }
LABEL_3044:
              (*(void (**)(WTF *))(*(void *)v2070 + 16))(v2070);
              uint64_t v2069 = (uint64_t)*v4;
              v2068 = v4[1];
              goto LABEL_2964;
            }
          }
          v2068 = 0;
          uint64_t v2069 = 0;
          goto LABEL_2964;
        case 3704:
          uint64_t v1544 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1546 = v1545;
          if (!v1545) {
            return;
          }
          uint64_t v1547 = v1544;
          IPC::Decoder::decode<WebCore::IntRect>((unint64_t *)v4, (uint64_t)&v2137);
          if (!v2138) {
            goto LABEL_2970;
          }
          v1548 = v4[1];
          uint64_t v1549 = (uint64_t)*v4;
          unint64_t v1550 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
          if ((unint64_t)v1548 < v1550 || (unint64_t)v1548 - v1550 <= 3)
          {
            v2071 = 0;
            uint64_t v2072 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2073 = v4[3];
            if (!v2073) {
              goto LABEL_2969;
            }
            if (v1548) {
              goto LABEL_3048;
            }
          }
          else
          {
            v1551 = (int *)(v1549 + v1550);
            v4[2] = (WTF *)(v1551 + 1);
            if (!v1549)
            {
LABEL_3079:
              v2071 = v1548;
              uint64_t v2072 = v1549;
              goto LABEL_2969;
            }
            unint64_t v1552 = (((unint64_t)v1551 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v1549;
            if ((unint64_t)v1548 < v1552 || (unint64_t)v1548 - v1552 <= 3)
            {
              void *v4 = 0;
              v4[1] = 0;
              v2081 = v4[3];
              if (v2081)
              {
                if (v1548)
                {
                  (*(void (**)(WTF *))(*(void *)v2081 + 16))(v2081);
                  uint64_t v2082 = (uint64_t)*v4;
                  v2083 = v4[1];
                  v2084 = v4[3];
                  void *v4 = 0;
                  v4[1] = 0;
                  if (v2084)
                  {
                    if (v2083) {
                      (*(void (**)(WTF *, uint64_t))(*(void *)v2084 + 16))(v2084, v2082);
                    }
                  }
                }
              }
              goto LABEL_2970;
            }
            int v1553 = *v1551;
            unint64_t v1554 = ((unint64_t)v1551 + 7) & 0xFFFFFFFFFFFFFFFCLL;
            v1555 = (WTF *)(v1549 + v1552);
            int v1557 = *(_DWORD *)v1555;
            v1555 = (WTF *)((char *)v1555 + 4);
            int v1556 = v1557;
            v4[2] = v1555;
            if (v1548 > (WTF *)((char *)v1555 - v1549))
            {
              v4[2] = (WTF *)(v1554 + 5);
              unsigned int v1558 = *(unsigned __int8 *)(v1554 + 4);
              if (v1558 < 2)
              {
                BOOL v1559 = v1558 != 0;
                IPC::Decoder::decode<WebCore::SharedMemoryHandle>((IPC::Decoder *)v4, (uint64_t)v2131);
                if ((_BYTE)v2132)
                {
                  if (!v2138)
                  {
LABEL_3054:
                    __break(1u);
                    goto LABEL_3055;
                  }
                  *(_OWORD *)CFTypeRef cf = v2137;
                  *(_DWORD *)&cf[16] = v1553;
                  *(_DWORD *)&cf[20] = v1556;
                  LOBYTE(v2121) = v1559;
                  WTF::MachSendRight::MachSendRight();
                  uint64_t v2122 = (uint64_t)v2131[1];
                  LOBYTE(v2123) = 1;
                  if ((_BYTE)v2132) {
                    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2131);
                  }
                  goto LABEL_2490;
                }
LABEL_2970:
                cf[0] = 0;
                LOBYTE(v2123) = 0;
                uint64_t v2092 = (uint64_t)*v4;
                v2093 = v4[1];
                void *v4 = 0;
                v4[1] = 0;
                v2094 = v4[3];
                if (!v2094) {
                  return;
                }
                if (!v2093) {
                  return;
                }
                (*(void (**)(WTF *, uint64_t))(*(void *)v2094 + 16))(v2094, v2092);
                if (!(_BYTE)v2123) {
                  return;
                }
LABEL_2490:
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
                atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                uint64_t v1560 = WTF::fastMalloc((WTF *)0x20);
                *(void *)uint64_t v1560 = &unk_1EE9BC840;
                *(void *)(v1560 + 8) = v1547;
                *(unsigned char *)(v1560 + 16) = v1546;
                *(_DWORD *)(v1560 + 20) = *(_DWORD *)((char *)v2136 + 3);
                *(_DWORD *)(v1560 + 17) = v2136[0];
                *(void *)(v1560 + 24) = a2;
                *(void *)&long long v2137 = v1560;
                v1561 = (WTF::MachSendRight *)((char *)&v2121 + 8);
                WTF::MachSendRight::MachSendRight();
                v2131[1] = (WTF *)v2122;
                WebKit::RemoteGraphicsContextGL::readPixelsSharedMemory((uint64_t)this, *(uint64_t *)cf, *(uint64_t *)&cf[8], *(unsigned int *)&cf[16], *(unsigned int *)&cf[20], v2121, (uint64_t)v2131, (uint64_t *)&v2137);
                WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v2131);
                uint64_t v1562 = v2137;
                *(void *)&long long v2137 = 0;
                if (v1562) {
                  (*(void (**)(uint64_t))(*(void *)v1562 + 8))(v1562);
                }
                if ((_BYTE)v2123) {
                  goto LABEL_2581;
                }
                return;
              }
              goto LABEL_3079;
            }
            v2071 = 0;
            uint64_t v2072 = 0;
            void *v4 = 0;
            v4[1] = 0;
            v2090 = v4[3];
            if (!v2090)
            {
LABEL_2969:
              void *v4 = 0;
              v4[1] = 0;
              v2091 = v4[3];
              if (v2091 && v2071) {
                (*(void (**)(WTF *, uint64_t, WTF *))(*(void *)v2091 + 16))(v2091, v2072, v2071);
              }
              goto LABEL_2970;
            }
            if (v1548)
            {
              (*(void (**)(WTF *))(*(void *)v2090 + 16))(v2090);
              v2071 = 0;
              v2115 = v4[1];
              v2073 = v4[3];
              void *v4 = 0;
              v4[1] = 0;
              uint64_t v2072 = 0;
              if (!v2073 || !v2115) {
                goto LABEL_2969;
              }
LABEL_3048:
              (*(void (**)(WTF *))(*(void *)v2073 + 16))(v2073);
              uint64_t v2072 = (uint64_t)*v4;
              v2071 = v4[1];
              goto LABEL_2969;
            }
          }
          v2071 = 0;
          uint64_t v2072 = 0;
          goto LABEL_2969;
        case 3705:
          uint64_t v1620 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
          char v1622 = v1621;
          if (!v1621) {
            return;
          }
          uint64_t v1623 = v1620;
          unsigned int v1624 = (unsigned __int16)IPC::Decoder::decode<WebCore::ApplyTrackingPrevention>(v4);
          if (v1624 <= 0xFF) {
            goto LABEL_2531;
          }
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
          atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
          uint64_t v1625 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v1625 = &unk_1EE9BC758;
          *(void *)(v1625 + 8) = v1623;
          *(unsigned char *)(v1625 + 16) = v1622;
          *(_DWORD *)(v1625 + 17) = v2131[0];
          *(_DWORD *)(v1625 + 20) = *(_DWORD *)((char *)v2131 + 3);
          *(void *)(v1625 + 24) = a2;
          *(void *)CFTypeRef cf = v1625;
          WebKit::RemoteGraphicsContextGL::surfaceBufferToVideoFrame((uint64_t)this, v1624 != 256, (uint64_t *)cf);
          uint64_t v1479 = *(void *)cf;
          *(void *)CFTypeRef cf = 0;
          if (v1479) {
            goto LABEL_2679;
          }
          return;
        default:
          switch(v6)
          {
            case 3638:
              uint64_t v1447 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1449 = v1448;
              if (v1448)
              {
                v1450 = v4[1];
                uint64_t v1451 = (uint64_t)*v4;
                unint64_t v1452 = (((unint64_t)v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v4;
                if ((unint64_t)v1450 < v1452 || (unint64_t)v1450 - v1452 <= 7) {
                  goto LABEL_2934;
                }
                v1453 = (void **)(v1451 + v1452);
                v4[2] = (WTF *)(v1453 + 1);
                if (!v1451) {
                  goto LABEL_3080;
                }
                unint64_t v1454 = (((unint64_t)v1453 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v1451;
                if ((unint64_t)v1450 < v1454) {
                  goto LABEL_2900;
                }
                if ((unint64_t)v1450 - v1454 <= 3) {
                  goto LABEL_2900;
                }
                v1455 = *v1453;
                v4[2] = (WTF *)((((unint64_t)v1453 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4);
                unint64_t v1456 = (((((unint64_t)v1453 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) - v1451;
                if ((unint64_t)v1450 < v1456 || (unint64_t)v1450 - v1456 <= 7) {
                  goto LABEL_2900;
                }
                uint64_t v1457 = v1447;
                v4[2] = (WTF *)((((((unint64_t)v1453 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8)
                              + 8);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                uint64_t v1458 = WTF::fastMalloc((WTF *)0x20);
                *(void *)uint64_t v1458 = &unk_1EE9BCF48;
                *(void *)(v1458 + 8) = v1457;
                *(unsigned char *)(v1458 + 16) = v1449;
                *(_DWORD *)(v1458 + 17) = *(_DWORD *)cf;
                *(_DWORD *)(v1458 + 20) = *(_DWORD *)&cf[3];
                *(void *)(v1458 + 24) = a2;
                uint64_t v1459 = WebCore::GraphicsContextGLANGLE::clientWaitSync(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1455);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v1458 + 16))(v1458, v1459);
                (*(void (**)(uint64_t))(*(void *)v1458 + 8))(v1458);
              }
              return;
            case 3641:
              uint64_t v1913 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1915 = v1914;
              if (v1914)
              {
                uint64_t v1916 = v1913;
                IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
                if (v1917)
                {
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1593 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1593 = &unk_1EE9BCEF8;
                  *(void *)(v1593 + 8) = v1916;
                  *(unsigned char *)(v1593 + 16) = v1915;
                  *(_DWORD *)(v1593 + 17) = *(_DWORD *)cf;
                  *(_DWORD *)(v1593 + 20) = *(_DWORD *)&cf[3];
                  *(void *)(v1593 + 24) = a2;
                  uint64_t Integer64 = WebCore::GraphicsContextGLANGLE::fenceSync(*((WebCore::GraphicsContextGLANGLE **)this + 7));
                  goto LABEL_2511;
                }
              }
              return;
            case 3644:
              uint64_t v1867 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1869 = v1868;
              if (v1868)
              {
                uint64_t v1870 = v1867;
                uint64_t v1871 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
                if (v1872)
                {
                  uint64_t v1873 = v1871;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1874 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1874 = &unk_1EE9BD060;
                  *(void *)(v1874 + 8) = v1870;
                  *(unsigned char *)(v1874 + 16) = v1869;
                  *(_DWORD *)(v1874 + 17) = v2131[0];
                  *(_DWORD *)(v1874 + 20) = *(_DWORD *)((char *)v2131 + 3);
                  *(void *)(v1874 + 24) = a2;
                  *(void *)CFTypeRef cf = v1874;
                  WebKit::RemoteGraphicsContextGL::getActiveUniformBlockName((uint64_t *)this, v1873, HIDWORD(v1873), (uint64_t *)cf);
                  goto LABEL_2636;
                }
              }
              return;
            case 3645:
              uint64_t v1936 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1938 = v1937;
              if (v1937)
              {
                uint64_t v1939 = v1936;
                IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>>((uint64_t)cf, v4);
                if ((_BYTE)v2121)
                {
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1940 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1940 = &unk_1EE9BD088;
                  *(void *)(v1940 + 8) = v1939;
                  *(unsigned char *)(v1940 + 16) = v1938;
                  *(_DWORD *)(v1940 + 17) = v2137;
                  *(_DWORD *)(v1940 + 20) = *(_DWORD *)((char *)&v2137 + 3);
                  *(void *)(v1940 + 24) = a2;
                  v2131[0] = (WTF *)v1940;
                  WebKit::RemoteGraphicsContextGL::getActiveUniformBlockiv((uint64_t)this, *(unsigned int *)cf, *(unsigned int *)&cf[4], *(unsigned int *)&cf[8], *(unint64_t *)&cf[16], (uint64_t *)v2131);
                  goto LABEL_2628;
                }
              }
              return;
            case 3646:
              uint64_t v1959 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1961 = v1960;
              if (!v1960) {
                return;
              }
              v1888 = v4[1];
              v1889 = *v4;
              unint64_t v1962 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
              if ((unint64_t)v1888 < v1962 || (unint64_t)v1888 - v1962 <= 3) {
                goto LABEL_2988;
              }
              v1963 = (int *)((char *)v1889 + v1962);
              v4[2] = (WTF *)(v1963 + 1);
              if (!v1889) {
                goto LABEL_3084;
              }
              uint64_t v1964 = v1959;
              int v1965 = *v1963;
              IPC::Decoder::decode<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v4, v2131);
              if (!(_BYTE)v2132) {
                goto LABEL_3005;
              }
              v1966 = v4[1];
              v1967 = *v4;
              unint64_t v1968 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
              if ((unint64_t)v1966 < v1968 || (unint64_t)v1966 - v1968 <= 3)
              {
                v2105 = 0;
                uint64_t v2106 = 0;
                void *v4 = 0;
                v4[1] = 0;
                v2107 = v4[3];
                if (v2107)
                {
                  if (v1966)
                  {
                    (*(void (**)(WTF *))(*(void *)v2107 + 16))(v2107);
                    uint64_t v2106 = (uint64_t)*v4;
                    v2105 = v4[1];
                  }
                  else
                  {
                    v2105 = 0;
                    uint64_t v2106 = 0;
                  }
                }
              }
              else
              {
                v1969 = (int *)((char *)v1967 + v1968);
                v4[2] = (WTF *)(v1969 + 1);
                if (v1967)
                {
                  int v1970 = *v1969;
                  *(_DWORD *)CFTypeRef cf = v1965;
                  *(WTF **)&cf[8] = v2131[0];
                  *(WTF **)&cf[16] = v2131[1];
                  LODWORD(v2121) = v1970;
                  BYTE8(v2121) = 1;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1971 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1971 = &unk_1EE9BD010;
                  *(void *)(v1971 + 8) = v1964;
                  *(unsigned char *)(v1971 + 16) = v1961;
                  *(_DWORD *)(v1971 + 17) = v2137;
                  *(_DWORD *)(v1971 + 20) = *(_DWORD *)((char *)&v2137 + 3);
                  *(void *)(v1971 + 24) = a2;
                  v2131[0] = (WTF *)v1971;
                  WebKit::RemoteGraphicsContextGL::getActiveUniforms((uint64_t *)this, *(unsigned int *)cf, (uint64_t)&cf[8], v2121, (uint64_t *)v2131);
                  if (v2131[0]) {
                    (*(void (**)(WTF *))(*(void *)v2131[0] + 8))(v2131[0]);
                  }
                  if (BYTE8(v2121))
                  {
                    v1973 = *(WTF **)&cf[8];
                    if (*(void *)&cf[8])
                    {
                      *(void *)&cf[8] = 0;
                      *(_DWORD *)&cf[16] = 0;
                      WTF::fastFree(v1973, v1972);
                    }
                  }
                  return;
                }
                v2105 = v1966;
                uint64_t v2106 = 0;
              }
              void *v4 = 0;
              v4[1] = 0;
              v2108 = v4[3];
              if (v2108 && v2105) {
                (*(void (**)(WTF *, uint64_t))(*(void *)v2108 + 16))(v2108, v2106);
              }
              if ((_BYTE)v2132)
              {
                v2109 = v2131[0];
                if (v2131[0])
                {
                  v2131[0] = 0;
                  LODWORD(v2131[1]) = 0;
                  WTF::fastFree(v2109, v1967);
                }
              }
              goto LABEL_3005;
            case 3654:
              uint64_t v1875 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1877 = v1876;
              if (!v1876) {
                return;
              }
              uint64_t v1878 = v1875;
              IPC::Decoder::decode<std::tuple<int,WTF::String>>((IPC::Decoder *)v4, cf);
              if (!cf[16]) {
                return;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
              if (!cf[16]) {
                goto LABEL_3054;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
              if (!cf[16]) {
                goto LABEL_3054;
              }
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1879 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1879 = &unk_1EE9BCDE0;
              *(void *)(v1879 + 8) = v1878;
              *(unsigned char *)(v1879 + 16) = v1877;
              *(_DWORD *)(v1879 + 17) = v2137;
              *(_DWORD *)(v1879 + 20) = *(_DWORD *)((char *)&v2137 + 3);
              *(void *)(v1879 + 24) = a2;
              v2131[0] = (WTF *)v1879;
              WebKit::RemoteGraphicsContextGL::getFragDataLocation((uint64_t)this, *(unsigned int *)cf, (WTF::String *)&cf[8], (uint64_t *)v2131);
              goto LABEL_2643;
            case 3657:
              uint64_t v1925 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1927 = v1926;
              if (v1926)
              {
                uint64_t v1928 = v1925;
                if ((IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4) & 0xFF00000000) != 0)
                {
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1929 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1929 = &unk_1EE9BD178;
                  *(void *)(v1929 + 8) = v1928;
                  *(unsigned char *)(v1929 + 16) = v1927;
                  *(_DWORD *)(v1929 + 17) = *(_DWORD *)cf;
                  *(_DWORD *)(v1929 + 20) = *(_DWORD *)&cf[3];
                  *(void *)(v1929 + 24) = a2;
                  uint64_t Integer64EXT = WebCore::GraphicsContextGLANGLE::getInteger64EXT(*((WebCore::GraphicsContextGLANGLE **)this
                                                                                  + 7));
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v1929 + 16))(v1929, Integer64EXT);
                  (*(void (**)(uint64_t))(*(void *)v1929 + 8))(v1929);
                }
              }
              return;
            case 3661:
              uint64_t v1931 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1933 = v1932;
              if (!v1932) {
                return;
              }
              uint64_t v1934 = v1931;
              IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>>((uint64_t)cf, v4);
              if (!(_BYTE)v2121) {
                return;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1935 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1935 = &unk_1EE9BD1A0;
              *(void *)(v1935 + 8) = v1934;
              *(unsigned char *)(v1935 + 16) = v1933;
              *(_DWORD *)(v1935 + 17) = v2137;
              *(_DWORD *)(v1935 + 20) = *(_DWORD *)((char *)&v2137 + 3);
              *(void *)(v1935 + 24) = a2;
              v2131[0] = (WTF *)v1935;
              WebKit::RemoteGraphicsContextGL::getInternalformativ((uint64_t)this, *(unsigned int *)cf, *(unsigned int *)&cf[4], *(unsigned int *)&cf[8], *(unint64_t *)&cf[16], (uint64_t *)v2131);
              goto LABEL_2628;
            case 3664:
              uint64_t v1982 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1984 = v1983;
              if (!v1983) {
                return;
              }
              uint64_t v1985 = v1982;
              IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
              if (!v1986) {
                return;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1581 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1581 = &unk_1EE9BCE30;
              *(void *)(v1581 + 8) = v1985;
              *(unsigned char *)(v1581 + 16) = v1984;
              *(_DWORD *)(v1581 + 17) = *(_DWORD *)cf;
              *(_DWORD *)(v1581 + 20) = *(_DWORD *)&cf[3];
              *(void *)(v1581 + 24) = a2;
              BufferParameteruint64_t i = WebCore::GraphicsContextGLANGLE::getQuery(*((WebCore::GraphicsContextGLANGLE **)this + 7));
              goto LABEL_2652;
            case 3665:
              uint64_t v1974 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1976 = v1975;
              if (!v1975) {
                return;
              }
              uint64_t v1977 = v1974;
              uint64_t v1978 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
              if (!v1979) {
                return;
              }
              uint64_t v1980 = v1978;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1981 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1981 = &unk_1EE9BD128;
              *(void *)(v1981 + 8) = v1977;
              *(unsigned char *)(v1981 + 16) = v1976;
              *(_DWORD *)(v1981 + 17) = v2131[0];
              *(_DWORD *)(v1981 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1981 + 24) = a2;
              *(void *)CFTypeRef cf = v1981;
              WebKit::RemoteGraphicsContextGL::getQueryObjectiEXT((uint64_t)this, v1980, HIDWORD(v1980), (uint64_t *)cf);
              goto LABEL_2466;
            case 3666:
              uint64_t v1851 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1853 = v1852;
              if (v1852)
              {
                uint64_t v1854 = v1851;
                uint64_t v1855 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
                if (v1856)
                {
                  uint64_t v1857 = v1855;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1858 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1858 = &unk_1EE9BCE58;
                  *(void *)(v1858 + 8) = v1854;
                  *(unsigned char *)(v1858 + 16) = v1853;
                  *(_DWORD *)(v1858 + 17) = v2131[0];
                  *(_DWORD *)(v1858 + 20) = *(_DWORD *)((char *)v2131 + 3);
                  *(void *)(v1858 + 24) = a2;
                  *(void *)CFTypeRef cf = v1858;
                  WebKit::RemoteGraphicsContextGL::getQueryObjectui((uint64_t)this, v1857, HIDWORD(v1857), (uint64_t *)cf);
                  uint64_t v1509 = *(void *)cf;
                  if (*(void *)cf) {
                    goto LABEL_2766;
                  }
                }
              }
              return;
            case 3667:
              uint64_t v1905 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1907 = v1906;
              if (v1906)
              {
                uint64_t v1908 = v1905;
                uint64_t v1909 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
                if (v1910)
                {
                  uint64_t v1911 = v1909;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1912 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1912 = &unk_1EE9BD150;
                  *(void *)(v1912 + 8) = v1908;
                  *(unsigned char *)(v1912 + 16) = v1907;
                  *(_DWORD *)(v1912 + 17) = v2131[0];
                  *(_DWORD *)(v1912 + 20) = *(_DWORD *)((char *)v2131 + 3);
                  *(void *)(v1912 + 24) = a2;
                  *(void *)CFTypeRef cf = v1912;
                  WebKit::RemoteGraphicsContextGL::getQueryObjectui64EXT((uint64_t)this, v1911, HIDWORD(v1911), (uint64_t *)cf);
                  uint64_t v1509 = *(void *)cf;
                  if (*(void *)cf) {
                    goto LABEL_2766;
                  }
                }
              }
              return;
            case 3668:
              uint64_t v1880 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1882 = v1881;
              if (!v1881) {
                return;
              }
              uint64_t v1883 = v1880;
              IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
              if (!v1884) {
                return;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1581 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1581 = &unk_1EE9BD100;
              *(void *)(v1581 + 8) = v1883;
              *(unsigned char *)(v1581 + 16) = v1882;
              *(_DWORD *)(v1581 + 17) = *(_DWORD *)cf;
              *(_DWORD *)(v1581 + 20) = *(_DWORD *)&cf[3];
              *(void *)(v1581 + 24) = a2;
              BufferParameteruint64_t i = WebCore::GraphicsContextGLANGLE::getQueryiEXT(*((WebCore::GraphicsContextGLANGLE **)this
                                                                               + 7));
              goto LABEL_2652;
            case 3670:
              uint64_t v1829 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1831 = v1830;
              if (v1830)
              {
                uint64_t v1832 = v1829;
                uint64_t v1833 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
                if (v1834)
                {
                  uint64_t v1835 = v1833;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v1836 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v1836 = &unk_1EE9BCEA8;
                  *(void *)(v1836 + 8) = v1832;
                  *(unsigned char *)(v1836 + 16) = v1831;
                  *(_DWORD *)(v1836 + 17) = v2131[0];
                  *(_DWORD *)(v1836 + 20) = *(_DWORD *)((char *)v2131 + 3);
                  *(void *)(v1836 + 24) = a2;
                  *(void *)CFTypeRef cf = v1836;
                  WebKit::RemoteGraphicsContextGL::getSamplerParameterf((uint64_t)this, v1835, HIDWORD(v1835), (uint64_t *)cf);
                  uint64_t v1509 = *(void *)cf;
                  if (*(void *)cf) {
                    goto LABEL_2766;
                  }
                }
              }
              return;
            case 3671:
              uint64_t v1941 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1943 = v1942;
              if (!v1942) {
                return;
              }
              uint64_t v1944 = v1941;
              uint64_t v1945 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
              if (!v1946) {
                return;
              }
              uint64_t v1947 = v1945;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1948 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1948 = &unk_1EE9BCED0;
              *(void *)(v1948 + 8) = v1944;
              *(unsigned char *)(v1948 + 16) = v1943;
              *(_DWORD *)(v1948 + 17) = v2131[0];
              *(_DWORD *)(v1948 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1948 + 24) = a2;
              *(void *)CFTypeRef cf = v1948;
              WebKit::RemoteGraphicsContextGL::getSamplerParameteri((uint64_t)this, v1947, HIDWORD(v1947), (uint64_t *)cf);
              goto LABEL_2466;
            case 3677:
              uint64_t v1949 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1951 = v1950;
              if (!v1950) {
                return;
              }
              v1450 = v4[1];
              uint64_t v1451 = (uint64_t)*v4;
              unint64_t v1952 = (((unint64_t)v4[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)*v4;
              if ((unint64_t)v1450 < v1952 || (unint64_t)v1450 - v1952 <= 7) {
                goto LABEL_2934;
              }
              v1953 = (void **)(v1451 + v1952);
              v4[2] = (WTF *)(v1953 + 1);
              if (!v1451) {
                goto LABEL_3080;
              }
              unint64_t v1954 = (((unint64_t)v1953 + 11) & 0xFFFFFFFFFFFFFFFCLL) - v1451;
              if ((unint64_t)v1450 < v1954 || (unint64_t)v1450 - v1954 <= 3) {
                goto LABEL_2900;
              }
              uint64_t v1955 = v1949;
              v1956 = *v1953;
              v4[2] = (WTF *)((((unint64_t)v1953 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 4);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1957 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1957 = &unk_1EE9BCF70;
              *(void *)(v1957 + 8) = v1955;
              *(unsigned char *)(v1957 + 16) = v1951;
              *(_DWORD *)(v1957 + 17) = *(_DWORD *)cf;
              *(_DWORD *)(v1957 + 20) = *(_DWORD *)&cf[3];
              *(void *)(v1957 + 24) = a2;
              Syncuint64_t i = WebCore::GraphicsContextGLANGLE::getSynci(*((WebCore::GraphicsContextGLANGLE **)this + 7), v1956);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v1957 + 16))(v1957, Synci);
              v1524 = *(void (**)(void))(*(void *)v1957 + 8);
              goto LABEL_2653;
            case 3680:
              uint64_t v1994 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1996 = v1995;
              if (v1995)
              {
                uint64_t v1997 = v1994;
                uint64_t v1998 = IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(v4);
                if (v1999)
                {
                  unint64_t v2000 = v1998;
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
                  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
                  atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                  uint64_t v2001 = WTF::fastMalloc((WTF *)0x20);
                  *(void *)uint64_t v2001 = &unk_1EE9BCFC0;
                  *(void *)(v2001 + 8) = v1997;
                  *(unsigned char *)(v2001 + 16) = v1996;
                  *(_DWORD *)(v2001 + 17) = v2131[0];
                  *(_DWORD *)(v2001 + 20) = *(_DWORD *)((char *)v2131 + 3);
                  *(void *)(v2001 + 24) = a2;
                  *(void *)CFTypeRef cf = v2001;
                  WebKit::RemoteGraphicsContextGL::getTransformFeedbackVarying((uint64_t *)this, v2000, HIDWORD(v2000), (uint64_t *)cf);
                  uint64_t v1509 = *(void *)cf;
                  if (*(void *)cf) {
                    goto LABEL_2766;
                  }
                }
              }
              return;
            case 3681:
              uint64_t v1987 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1989 = v1988;
              if (!v1988) {
                return;
              }
              uint64_t v1990 = v1987;
              uint64_t v1991 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v1991 & 0xFF00000000) == 0) {
                return;
              }
              unsigned int v1992 = v1991;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1993 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1993 = &unk_1EE9BD0B0;
              *(void *)(v1993 + 8) = v1990;
              *(unsigned char *)(v1993 + 16) = v1989;
              *(_DWORD *)(v1993 + 17) = v2131[0];
              *(_DWORD *)(v1993 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1993 + 24) = a2;
              *(void *)CFTypeRef cf = v1993;
              WebKit::RemoteGraphicsContextGL::getTranslatedShaderSourceANGLE((uint64_t *)this, v1992, (uint64_t *)cf);
              goto LABEL_2636;
            case 3682:
              uint64_t v1824 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1826 = v1825;
              if (!v1825) {
                return;
              }
              uint64_t v1827 = v1824;
              IPC::Decoder::decode<std::tuple<int,WTF::String>>((IPC::Decoder *)v4, cf);
              if (!cf[16]) {
                return;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
              if (!cf[16]) {
                goto LABEL_3054;
              }
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
              if (!cf[16]) {
                goto LABEL_3054;
              }
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1828 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1828 = &unk_1EE9BD038;
              *(void *)(v1828 + 8) = v1827;
              *(unsigned char *)(v1828 + 16) = v1826;
              *(_DWORD *)(v1828 + 17) = v2137;
              *(_DWORD *)(v1828 + 20) = *(_DWORD *)((char *)&v2137 + 3);
              *(void *)(v1828 + 24) = a2;
              v2131[0] = (WTF *)v1828;
              WebKit::RemoteGraphicsContextGL::getUniformBlockIndex((uint64_t)this, *(unsigned int *)cf, (WTF::String *)&cf[8], (uint64_t *)v2131);
              v1769 = v2131[0];
              if (v2131[0]) {
                goto LABEL_2644;
              }
              goto LABEL_2645;
            case 3683:
              uint64_t v1885 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1887 = v1886;
              if (!v1886) {
                return;
              }
              v1888 = v4[1];
              v1889 = *v4;
              unint64_t v1890 = (((unint64_t)v4[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - (void)*v4;
              if ((unint64_t)v1888 < v1890 || (unint64_t)v1888 - v1890 <= 3)
              {
LABEL_2988:
                v2101 = 0;
                uint64_t v2102 = 0;
                void *v4 = 0;
                v4[1] = 0;
                v2103 = v4[3];
                if (v2103)
                {
                  if (v1888)
                  {
                    (*(void (**)(WTF *))(*(void *)v2103 + 16))(v2103);
                    uint64_t v2102 = (uint64_t)*v4;
                    v2101 = v4[1];
                  }
                  else
                  {
                    v2101 = 0;
                    uint64_t v2102 = 0;
                  }
                }
              }
              else
              {
                v1891 = (int *)((char *)v1889 + v1890);
                v4[2] = (WTF *)(v1891 + 1);
                if (v1889)
                {
                  uint64_t v1892 = v1885;
                  int v1893 = *v1891;
                  IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((IPC::Decoder *)v4, v1889, (uint64_t)v2131);
                  if ((_BYTE)v2132)
                  {
                    *(_DWORD *)CFTypeRef cf = v1893;
                    *(WTF **)&cf[8] = v2131[0];
                    v1895 = v2131[1];
                    v2131[0] = 0;
                    v2131[1] = 0;
                    *(void *)&cf[16] = v1895;
                    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v2131, v1894);
                    LOBYTE(v2121) = 1;
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v2131, (uint64_t **)a2 + 5);
                    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v2131);
                    atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
                    uint64_t v1896 = WTF::fastMalloc((WTF *)0x20);
                    *(void *)uint64_t v1896 = &unk_1EE9BCFE8;
                    *(void *)(v1896 + 8) = v1892;
                    *(unsigned char *)(v1896 + 16) = v1887;
                    *(_DWORD *)(v1896 + 17) = v2137;
                    *(_DWORD *)(v1896 + 20) = *(_DWORD *)((char *)&v2137 + 3);
                    *(void *)(v1896 + 24) = a2;
                    v2131[0] = (WTF *)v1896;
                    WebKit::RemoteGraphicsContextGL::getUniformIndices((uint64_t *)this, *(unsigned int *)cf, (uint64_t)&cf[8], (uint64_t *)v2131);
                    if (v2131[0]) {
                      (*(void (**)(WTF *))(*(void *)v2131[0] + 8))(v2131[0]);
                    }
                    if ((_BYTE)v2121) {
                      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&cf[8], v1897);
                    }
                    return;
                  }
LABEL_3005:
                  uint64_t v2110 = (uint64_t)*v4;
                  v2111 = v4[1];
                  void *v4 = 0;
                  v4[1] = 0;
                  v2112 = v4[3];
                  if (v2112 && v2111) {
                    (*(void (**)(WTF *, uint64_t))(*(void *)v2112 + 16))(v2112, v2110);
                  }
                  return;
                }
LABEL_3084:
                v2101 = v1888;
                uint64_t v2102 = (uint64_t)v1889;
              }
              void *v4 = 0;
              v4[1] = 0;
              v2104 = v4[3];
              if (v2104 && v2101) {
                (*(void (**)(WTF *, uint64_t))(*(void *)v2104 + 16))(v2104, v2102);
              }
              goto LABEL_3005;
            case 3693:
              uint64_t v2002 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v2004 = v2003;
              if (!v2003) {
                return;
              }
              uint64_t v2005 = v2002;
              uint64_t v2006 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v2006 & 0xFF00000000) == 0) {
                return;
              }
              unsigned int v2007 = v2006;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v2008 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v2008 = &unk_1EE9BCE08;
              *(void *)(v2008 + 8) = v2005;
              *(unsigned char *)(v2008 + 16) = v2004;
              *(_DWORD *)(v2008 + 17) = v2131[0];
              *(_DWORD *)(v2008 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v2008 + 24) = a2;
              *(void *)CFTypeRef cf = v2008;
              WebKit::RemoteGraphicsContextGL::isQuery((uint64_t)this, v2007, (uint64_t *)cf);
              goto LABEL_2660;
            case 3694:
              uint64_t v1837 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1839 = v1838;
              if (!v1838) {
                return;
              }
              uint64_t v1840 = v1837;
              uint64_t v1841 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v1841 & 0xFF00000000) == 0) {
                return;
              }
              unsigned int v1842 = v1841;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1843 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1843 = &unk_1EE9BD0D8;
              *(void *)(v1843 + 8) = v1840;
              *(unsigned char *)(v1843 + 16) = v1839;
              *(_DWORD *)(v1843 + 17) = v2131[0];
              *(_DWORD *)(v1843 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1843 + 24) = a2;
              *(void *)CFTypeRef cf = v1843;
              WebKit::RemoteGraphicsContextGL::isQueryEXT((uint64_t)this, v1842, (uint64_t *)cf);
              goto LABEL_2660;
            case 3696:
              uint64_t v1898 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1900 = v1899;
              if (!v1899) {
                return;
              }
              uint64_t v1901 = v1898;
              uint64_t v1902 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v1902 & 0xFF00000000) == 0) {
                return;
              }
              unsigned int v1903 = v1902;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1904 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1904 = &unk_1EE9BCE80;
              *(void *)(v1904 + 8) = v1901;
              *(unsigned char *)(v1904 + 16) = v1900;
              *(_DWORD *)(v1904 + 17) = v2131[0];
              *(_DWORD *)(v1904 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1904 + 24) = a2;
              *(void *)CFTypeRef cf = v1904;
              WebKit::RemoteGraphicsContextGL::isSampler((uint64_t)this, v1903, (uint64_t *)cf);
              goto LABEL_2660;
            case 3698:
              uint64_t v1859 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1861 = v1860;
              if (!v1860) {
                return;
              }
              uint64_t v1862 = v1859;
              unint64_t v1863 = IPC::Decoder::decode<std::tuple<unsigned long long>>((IPC::Decoder *)v4);
              if (!v1864) {
                return;
              }
              v1865 = (void *)v1863;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1866 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1866 = &unk_1EE9BCF20;
              *(void *)(v1866 + 8) = v1862;
              *(unsigned char *)(v1866 + 16) = v1861;
              *(_DWORD *)(v1866 + 17) = v2131[0];
              *(_DWORD *)(v1866 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1866 + 24) = a2;
              *(void *)CFTypeRef cf = v1866;
              WebKit::RemoteGraphicsContextGL::isSync((uint64_t)this, v1865, (uint64_t *)cf);
              goto LABEL_2660;
            case 3699:
              uint64_t v1918 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1920 = v1919;
              if (!v1919) {
                return;
              }
              uint64_t v1921 = v1918;
              uint64_t v1922 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v1922 & 0xFF00000000) == 0) {
                return;
              }
              unsigned int v1923 = v1922;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1924 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1924 = &unk_1EE9BCD90;
              *(void *)(v1924 + 8) = v1921;
              *(unsigned char *)(v1924 + 16) = v1920;
              *(_DWORD *)(v1924 + 17) = v2131[0];
              *(_DWORD *)(v1924 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1924 + 24) = a2;
              *(void *)CFTypeRef cf = v1924;
              WebKit::RemoteGraphicsContextGL::isTexture((uint64_t)this, v1923, (uint64_t *)cf);
              goto LABEL_2660;
            case 3700:
              uint64_t v1844 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v1846 = v1845;
              if (!v1845) {
                return;
              }
              uint64_t v1847 = v1844;
              uint64_t v1848 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v1848 & 0xFF00000000) == 0) {
                return;
              }
              unsigned int v1849 = v1848;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v1850 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v1850 = &unk_1EE9BCF98;
              *(void *)(v1850 + 8) = v1847;
              *(unsigned char *)(v1850 + 16) = v1846;
              *(_DWORD *)(v1850 + 17) = v2131[0];
              *(_DWORD *)(v1850 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v1850 + 24) = a2;
              *(void *)CFTypeRef cf = v1850;
              WebKit::RemoteGraphicsContextGL::isTransformFeedback((uint64_t)this, v1849, (uint64_t *)cf);
              goto LABEL_2660;
            case 3701:
              uint64_t v2009 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)v4);
              char v2011 = v2010;
              if (!v2010) {
                return;
              }
              uint64_t v2012 = v2009;
              uint64_t v2013 = IPC::Decoder::decode<std::tuple<float>>((uint64_t *)v4);
              if ((v2013 & 0xFF00000000) == 0) {
                return;
              }
              unsigned int v2014 = v2013;
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)cf, (uint64_t **)a2 + 5);
              WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)cf);
              atomic_fetch_add((atomic_uint *volatile)a2 + 2, 1u);
              uint64_t v2015 = WTF::fastMalloc((WTF *)0x20);
              *(void *)uint64_t v2015 = &unk_1EE9BCDB8;
              *(void *)(v2015 + 8) = v2012;
              *(unsigned char *)(v2015 + 16) = v2011;
              *(_DWORD *)(v2015 + 17) = v2131[0];
              *(_DWORD *)(v2015 + 20) = *(_DWORD *)((char *)v2131 + 3);
              *(void *)(v2015 + 24) = a2;
              *(void *)CFTypeRef cf = v2015;
              WebKit::RemoteGraphicsContextGL::isVertexArray((uint64_t)this, v2014, (uint64_t *)cf);
              goto LABEL_2660;
            default:
              return;
          }
      }
  }
}

uint64_t WebKit::RemoteGraphicsContextGL::bindAttribLocation(uint64_t result, uint64_t a2, uint64_t a3, WTF::String *a4)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v6 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
      int v7 = a2;
    }
    return WebCore::GraphicsContextGLANGLE::bindAttribLocation(*(WebCore::GraphicsContextGLANGLE **)(v6 + 56), a2, a3, a4);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::framebufferRenderbuffer(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v6 = a5;
  if (a5 <= 0xFFFFFFFD)
  {
    uint64_t v5 = this;
    if (a5) {
      int v6 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(this + 232), &v6);
    }
    return WebCore::GraphicsContextGLANGLE::framebufferRenderbuffer(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGL::framebufferTexture2D(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  int v6 = a5;
  if (a5 <= 0xFFFFFFFD)
  {
    uint64_t v5 = this;
    if (a5) {
      int v6 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(this + 232), &v6);
    }
    return WebCore::GraphicsContextGLANGLE::framebufferTexture2D(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGL::shaderSource(uint64_t result, uint64_t a2, WTF::String *a3)
{
  int v5 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v5);
      int v5 = a2;
    }
    return WebCore::GraphicsContextGLANGLE::shaderSource(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56), a2, a3);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::framebufferTextureLayer(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v5 = a4;
  if (a4 <= 0xFFFFFFFD)
  {
    uint64_t v4 = this;
    if (a4) {
      int v5 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(this + 232), &v5);
    }
    return WebCore::GraphicsContextGLANGLE::framebufferTextureLayer(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56));
  }
  return this;
}

uint64_t WebKit::RemoteGraphicsContextGL::transformFeedbackVaryings(uint64_t result, unsigned int a2)
{
  int v2 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    if (a2) {
      int v2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v2);
    }
    return WebCore::GraphicsContextGLANGLE::transformFeedbackVaryings();
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::bindBufferRange(uint64_t this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  int v5 = a4;
  if (a4 <= 0xFFFFFFFD)
  {
    uint64_t v4 = this;
    if (a4) {
      int v5 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(this + 232), &v5);
    }
    return WebCore::GraphicsContextGLANGLE::bindBufferRange(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56));
  }
  return this;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getActiveAttrib(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v11 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    int v6 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v11);
      int v11 = a2;
    }
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v7 = MEMORY[0x199736B10](v6[7], a2, a3, v10);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v8 + 16))(v8, v7, v10);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t result = (uint64_t *)v10[0];
    v10[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getActiveUniform(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v11 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    int v6 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v11);
      int v11 = a2;
    }
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v7 = MEMORY[0x199736BC0](v6[7], a2, a3, v10);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(void *)v8 + 16))(v8, v7, v10);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t result = (uint64_t *)v10[0];
    v10[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v9);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getAttribLocation(uint64_t result, uint64_t a2, WTF::String *a3, uint64_t *a4)
{
  int v9 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v6 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v9);
      int v9 = a2;
    }
    uint64_t AttribLocation = WebCore::GraphicsContextGLANGLE::getAttribLocation(*(WebCore::GraphicsContextGLANGLE **)(v6 + 56), a2, a3);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, AttribLocation);
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

WTF::StringImpl *WebKit::RemoteGraphicsContextGL::getString(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  WebCore::GraphicsContextGLANGLE::getString(*(WebCore::GraphicsContextGLANGLE **)(a1 + 56));
  uint64_t v4 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v4 + 16))(v4, &v7);
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WebKit::RemoteGraphicsContextGL::getFloatv(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unsigned int v5 = a3;
  int v9 = (WTF *)v11;
  unsigned int v10 = a3;
  if (a3 < 0x11)
  {
    uint64_t v6 = (WTF *)v11;
  }
  else
  {
    if (a3 >> 30)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v6 = (WTF *)WTF::fastMalloc((WTF *)(4 * a3));
    int v9 = v6;
    unsigned int v5 = v10;
  }
  if (v5) {
    bzero(v6, 4 * v5);
  }
  WebCore::GraphicsContextGLANGLE::getFloatv();
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF *, void))(*(void *)v7 + 16))(v7, v9, v10);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v11 != (unsigned char *)v9)
  {
    if (v9) {
      WTF::fastFree(v9, v8);
    }
  }
}

void WebKit::RemoteGraphicsContextGL::getIntegerv(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4)
{
  unsigned int v5 = a3;
  int v9 = (WTF *)v11;
  unsigned int v10 = a3;
  if (a3 < 5)
  {
    uint64_t v6 = v11;
    if (!a3) {
      goto LABEL_7;
    }
LABEL_6:
    bzero(v6, 4 * v5);
    goto LABEL_7;
  }
  if (a3 >> 30)
  {
    __break(0xC471u);
    return;
  }
  uint64_t v6 = (unsigned char *)WTF::fastMalloc((WTF *)(4 * a3));
  int v9 = (WTF *)v6;
  unsigned int v5 = v10;
  if (v10) {
    goto LABEL_6;
  }
LABEL_7:
  WebCore::GraphicsContextGLANGLE::getIntegerv();
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF *, void))(*(void *)v7 + 16))(v7, v9, v10);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v11 != (unsigned char *)v9)
  {
    if (v9) {
      WTF::fastFree(v9, v8);
    }
  }
}

uint64_t WebKit::RemoteGraphicsContextGL::getIntegeri_v(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v7[0] = 0;
  v7[1] = 0;
  WebCore::GraphicsContextGLANGLE::getIntegeri_v();
  uint64_t v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 16))(v5, v7);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

uint64_t WebKit::RemoteGraphicsContextGL::getProgrami(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v8);
    }
    Programuint64_t i = WebCore::GraphicsContextGLANGLE::getProgrami(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, Programi);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void WebKit::RemoteGraphicsContextGL::getBooleanv(int a1, int a2, WTF *this, uint64_t *a4)
{
  unsigned int v5 = this;
  int v9 = (WTF *)&v11;
  unsigned int v10 = this;
  if ((unint64_t)this < 5)
  {
    uint64_t v6 = &v11;
  }
  else
  {
    if ((unint64_t)this >> 32)
    {
      __break(0xC471u);
      return;
    }
    uint64_t v6 = (size_t *)WTF::fastMalloc(this);
    int v9 = (WTF *)v6;
    unsigned int v5 = v10;
  }
  bzero(v6, v5);
  WebCore::GraphicsContextGLANGLE::getBooleanv();
  uint64_t v7 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, WTF *, void))(*(void *)v7 + 16))(v7, v9, v10);
  (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (&v11 != (size_t *)v9)
  {
    if (v9) {
      WTF::fastFree(v9, v8);
    }
  }
}

uint64_t *WebKit::RemoteGraphicsContextGL::getProgramInfoLog(uint64_t *result, unsigned int a2, uint64_t *a3)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v8);
    }
    WebCore::GraphicsContextGLANGLE::getProgramInfoLog((WebCore::GraphicsContextGLANGLE *)v4[7]);
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = (uint64_t *)v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getShaderi(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v8);
    }
    Shaderuint64_t i = WebCore::GraphicsContextGLANGLE::getShaderi(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, Shaderi);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getShaderInfoLog(uint64_t *result, unsigned int a2, uint64_t *a3)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v8);
    }
    WebCore::GraphicsContextGLANGLE::getShaderInfoLog((WebCore::GraphicsContextGLANGLE *)v4[7]);
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = (uint64_t *)v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getShaderPrecisionFormat(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = 0;
  WebCore::GraphicsContextGLANGLE::getShaderPrecisionFormat();
  uint64_t v5 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 16))(v5, &v7, 0);
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
}

uint64_t *WebKit::RemoteGraphicsContextGL::getShaderSource(uint64_t *result, unsigned int a2, uint64_t *a3)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v8);
    }
    WebCore::GraphicsContextGLANGLE::getShaderSource((WebCore::GraphicsContextGLANGLE *)v4[7]);
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = (uint64_t *)v7;
    uint64_t v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getUniformfv(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  int v12 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    if (a2)
    {
      uint64_t result = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v12);
      int v12 = result;
    }
    unsigned int v10 = (WTF *)v11;
    if (a4 < 0x11)
    {
      uint64_t v7 = (WTF *)v11;
    }
    else
    {
      if (a4 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)(4 * a4));
      unsigned int v10 = v7;
    }
    if (a4) {
      bzero(v7, 4 * a4);
    }
    WebCore::GraphicsContextGLANGLE::getUniformfv();
    uint64_t v8 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF *, void))(*(void *)v8 + 16))(v8, v10, a4);
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    uint64_t result = (uint64_t)v10;
    if (v11 != (unsigned char *)v10)
    {
      if (v10) {
        return WTF::fastFree(v10, v9);
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getUniformiv(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  int v12 = a2;
  if (a2 > 0xFFFFFFFD) {
    return result;
  }
  if (a2)
  {
    uint64_t result = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v12);
    int v12 = result;
  }
  unsigned int v10 = (WTF *)v11;
  if (a4 >= 5)
  {
    if (a4 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)(4 * a4));
    unsigned int v10 = v7;
    if (!a4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v7 = (WTF *)v11;
  if (a4) {
LABEL_9:
  }
    bzero(v7, 4 * a4);
LABEL_10:
  WebCore::GraphicsContextGLANGLE::getUniformiv();
  uint64_t v8 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF *, void))(*(void *)v8 + 16))(v8, v10, a4);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t result = (uint64_t)v10;
  if (v11 != (unsigned char *)v10)
  {
    if (v10) {
      return WTF::fastFree(v10, v9);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getUniformuiv(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  int v12 = a2;
  if (a2 > 0xFFFFFFFD) {
    return result;
  }
  if (a2)
  {
    uint64_t result = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v12);
    int v12 = result;
  }
  unsigned int v10 = (WTF *)v11;
  if (a4 >= 5)
  {
    if (a4 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v7 = (WTF *)WTF::fastMalloc((WTF *)(4 * a4));
    unsigned int v10 = v7;
    if (!a4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v7 = (WTF *)v11;
  if (a4) {
LABEL_9:
  }
    bzero(v7, 4 * a4);
LABEL_10:
  WebCore::GraphicsContextGLANGLE::getUniformuiv();
  uint64_t v8 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, WTF *, void))(*(void *)v8 + 16))(v8, v10, a4);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  uint64_t result = (uint64_t)v10;
  if (v11 != (unsigned char *)v10)
  {
    if (v10) {
      return WTF::fastFree(v10, v9);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getUniformLocation(uint64_t result, uint64_t a2, WTF::String *a3, uint64_t *a4)
{
  int v9 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v6 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v9);
      int v9 = a2;
    }
    uint64_t UniformLocation = WebCore::GraphicsContextGLANGLE::getUniformLocation(*(WebCore::GraphicsContextGLANGLE **)(v6 + 56), a2, a3);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, UniformLocation);
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isBuffer(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isBuffer(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isEnabled(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  BOOL v4 = WebCore::GraphicsContextGLANGLE::isEnabled(*(WebCore::GraphicsContextGLANGLE **)(a1 + 56)) != 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::RemoteGraphicsContextGL::isFramebuffer(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isFramebuffer(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isProgram(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isProgram(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isRenderbuffer(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isRenderbuffer(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isShader(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isShader(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isTexture(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isTexture(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isVertexArray(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isVertexArray(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getFragDataLocation(uint64_t result, uint64_t a2, WTF::String *a3, uint64_t *a4)
{
  int v9 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v6 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v9);
      int v9 = a2;
    }
    uint64_t FragDataLocation = WebCore::GraphicsContextGLANGLE::getFragDataLocation(*(WebCore::GraphicsContextGLANGLE **)(v6 + 56), a2, a3);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, FragDataLocation);
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isQuery(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isQuery(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getQueryObjectui(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v8);
    }
    QueryObjectuuint64_t i = WebCore::GraphicsContextGLANGLE::getQueryObjectui(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, QueryObjectui);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isSampler(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isSampler(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getSamplerParameterf(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    WebCore::GraphicsContextGLANGLE::getSamplerParameterf(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getSamplerParameteri(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v8);
    }
    SamplerParameteruint64_t i = WebCore::GraphicsContextGLANGLE::getSamplerParameteri(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, SamplerParameteri);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isSync(uint64_t a1, void *a2, uint64_t *a3)
{
  BOOL v4 = WebCore::GraphicsContextGLANGLE::isSync(*(WebCore::GraphicsContextGLANGLE **)(a1 + 56), a2) != 0;
  uint64_t v5 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

uint64_t WebKit::RemoteGraphicsContextGL::isTransformFeedback(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isTransformFeedback(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getTransformFeedbackVarying(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v8);
    }
    v7[0] = 0;
    v7[1] = 0;
    WebCore::GraphicsContextGLANGLE::getTransformFeedbackVarying();
    uint64_t v5 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = (uint64_t *)v7[0];
    v7[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getUniformIndices(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t *a4)
{
  int v11 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    if (a2) {
      int v11 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v11);
    }
    WebCore::GraphicsContextGLANGLE::getUniformIndices();
    uint64_t v5 = *a4;
    int v9 = v7;
    uint64_t v10 = v8;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v5 + 16))(v5, &v9);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = (uint64_t *)v9;
    if (v9)
    {
      int v9 = 0;
      LODWORD(v10) = 0;
      return (uint64_t *)WTF::fastFree((WTF *)result, v6);
    }
  }
  return result;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getActiveUniforms(uint64_t *result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v12 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    if (a2) {
      int v12 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v12);
    }
    WebCore::GraphicsContextGLANGLE::getActiveUniforms();
    uint64_t v6 = *a5;
    uint64_t v10 = v8;
    uint64_t v11 = v9;
    *a5 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v6 + 16))(v6, &v10);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t result = (uint64_t *)v10;
    if (v10)
    {
      uint64_t v10 = 0;
      LODWORD(v11) = 0;
      return (uint64_t *)WTF::fastFree((WTF *)result, v7);
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getUniformBlockIndex(uint64_t result, uint64_t a2, WTF::String *a3, uint64_t *a4)
{
  int v9 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v6 = result;
    if (a2)
    {
      a2 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v9);
      int v9 = a2;
    }
    UniformBlockIndeCGFloat x = WebCore::GraphicsContextGLANGLE::getUniformBlockIndex(*(WebCore::GraphicsContextGLANGLE **)(v6 + 56), a2, a3);
    uint64_t v8 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, UniformBlockIndex);
    return (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return result;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getActiveUniformBlockName(uint64_t *result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v9 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v9 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v9);
    }
    WebCore::GraphicsContextGLANGLE::getActiveUniformBlockName((WebCore::GraphicsContextGLANGLE *)v5[7]);
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v6 + 16))(v6, &v8);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t result = (uint64_t *)v8;
    uint64_t v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getActiveUniformBlockiv(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  int v13 = a2;
  if (a2 > 0xFFFFFFFD) {
    return result;
  }
  if (a2)
  {
    uint64_t result = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v13);
    int v13 = result;
  }
  uint64_t v11 = (WTF *)v12;
  if (a5 >= 5)
  {
    if (a5 >> 30)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v8 = (WTF *)WTF::fastMalloc((WTF *)(4 * a5));
    uint64_t v11 = v8;
    if (!a5) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v8 = (WTF *)v12;
  if (a5) {
LABEL_9:
  }
    bzero(v8, 4 * a5);
LABEL_10:
  WebCore::GraphicsContextGLANGLE::getActiveUniformBlockiv();
  uint64_t v9 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF *, void))(*(void *)v9 + 16))(v9, v11, a5);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  uint64_t result = (uint64_t)v11;
  if (v12 != (unsigned char *)v11)
  {
    if (v11) {
      return WTF::fastFree(v11, v10);
    }
  }
  return result;
}

uint64_t *WebKit::RemoteGraphicsContextGL::getTranslatedShaderSourceANGLE(uint64_t *result, unsigned int a2, uint64_t *a3)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(result + 29, &v8);
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(void *)v4[7] + 1984))(&v7);
    uint64_t v5 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v5 + 16))(v5, &v7);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = (uint64_t *)v7;
    int v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::isQueryEXT(uint64_t result, unsigned int a2, uint64_t *a3)
{
  int v7 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v4 = result;
    if (a2) {
      int v7 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v7);
    }
    BOOL v5 = WebCore::GraphicsContextGLANGLE::isQueryEXT(*(WebCore::GraphicsContextGLANGLE **)(v4 + 56)) != 0;
    uint64_t v6 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, BOOL))(*(void *)v6 + 16))(v6, v5);
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getQueryObjectiEXT(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v8);
    }
    uint64_t QueryObjectiEXT = WebCore::GraphicsContextGLANGLE::getQueryObjectiEXT(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, QueryObjectiEXT);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::RemoteGraphicsContextGL::getQueryObjectui64EXT(uint64_t result, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  int v8 = a2;
  if (a2 <= 0xFFFFFFFD)
  {
    uint64_t v5 = result;
    if (a2) {
      int v8 = WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>((uint64_t *)(result + 232), &v8);
    }
    uint64_t QueryObjectui64EXT = WebCore::GraphicsContextGLANGLE::getQueryObjectui64EXT(*(WebCore::GraphicsContextGLANGLE **)(v5 + 56));
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, QueryObjectui64EXT);
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

void WebKit::RemoteGraphicsContextGL::getInternalformativ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6)
{
  unsigned int v7 = a5;
  uint64_t v11 = (WTF *)v13;
  unsigned int v12 = a5;
  if (a5 < 5)
  {
    int v8 = v13;
    if (!a5) {
      goto LABEL_7;
    }
LABEL_6:
    bzero(v8, 4 * v7);
    goto LABEL_7;
  }
  if (a5 >> 30)
  {
    __break(0xC471u);
    return;
  }
  int v8 = (unsigned char *)WTF::fastMalloc((WTF *)(4 * a5));
  uint64_t v11 = (WTF *)v8;
  unsigned int v7 = v12;
  if (v12) {
    goto LABEL_6;
  }
LABEL_7:
  WebCore::GraphicsContextGLANGLE::getInternalformativ();
  uint64_t v9 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, WTF *, void))(*(void *)v9 + 16))(v9, v11, v12);
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if (v13 != (unsigned char *)v11)
  {
    if (v11) {
      WTF::fastFree(v11, v10);
    }
  }
}

void non-virtual thunk to'WebKit::RemoteGraphicsContextGL::didReceiveStreamMessage(WebKit::RemoteGraphicsContextGL *this, IPC::StreamServerConnection *a2, WTF **a3)
{
}

void WebKit::RemoteGraphicsContextGLProxy::didReceiveMessage(WebKit::RemoteGraphicsContextGLProxy *this, IPC::Connection *a2, IPC::Decoder *a3)
{
  int v7 = *((unsigned __int16 *)a3 + 25);
  if (v7 == 903)
  {
    unint64_t v15 = *((void *)a3 + 1);
    uint64_t v16 = *(void *)a3;
    unint64_t v17 = ((*((void *)a3 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a3;
    if (v15 >= v17 && v15 - v17 > 3)
    {
      uint64_t v19 = (unsigned int *)(v16 + v17);
      *((void *)a3 + 2) = v19 + 1;
      if (v16)
      {
        unint64_t v20 = (((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v16;
        BOOL v21 = v15 >= v20 && v15 - v20 > 3;
        if (v21
          && ((unsigned int v22 = *v19,
               *((void *)a3 + 2) = (((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4,
               unsigned int v23 = *(_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL),
               unint64_t v24 = (((((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v16,
               v15 >= v24)
            ? (BOOL v25 = v15 - v24 > 3)
            : (BOOL v25 = 0),
              v25))
        {
          uint64_t v26 = (int *)(v16 + v24);
          int v27 = *v26;
          *((void *)a3 + 2) = v26 + 1;
          IPC::Decoder::decode<WTF::String>(a3, (uint64_t)&v72);
          if ((_BYTE)v73)
          {
            unint64_t v59 = __PAIR64__(v23, v22);
            LODWORD(v60) = v27;
            uint64_t v61 = v72;
            LOBYTE(v62) = 1;
            WebKit::RemoteGraphicsContextGLProxy::addDebugMessage(this);
            unint64_t v29 = v61;
            uint64_t v61 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v28);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
            return;
          }
        }
        else
        {
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v35 = *((void *)a3 + 3);
          if (v35)
          {
            if (v15)
            {
              (*(void (**)(uint64_t))(*(void *)v35 + 16))(v35);
              uint64_t v36 = *(void *)a3;
              uint64_t v37 = *((void *)a3 + 1);
              uint64_t v38 = *((void *)a3 + 3);
              *(void *)a3 = 0;
              *((void *)a3 + 1) = 0;
              if (v38)
              {
                if (v37) {
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
                }
              }
            }
          }
        }
LABEL_59:
        uint64_t v43 = *(void *)a3;
        uint64_t v44 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v45 = *((void *)a3 + 3);
        if (v45 && v44) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43);
        }
        return;
      }
      unint64_t v39 = v15;
      uint64_t v40 = 0;
    }
    else
    {
      unint64_t v39 = 0;
      uint64_t v40 = 0;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v41 = *((void *)a3 + 3);
      if (v41)
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(void *)v41 + 16))(v41);
          uint64_t v40 = *(void *)a3;
          unint64_t v39 = *((void *)a3 + 1);
        }
        else
        {
          unint64_t v39 = 0;
          uint64_t v40 = 0;
        }
      }
    }
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v42 = *((void *)a3 + 3);
    if (v42 && v39) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v42 + 16))(v42, v40, v39);
    }
    goto LABEL_59;
  }
  if (v7 != 902)
  {
    if (v7 != 901) {
      return;
    }
    IPC::Decoder::decode<IPC::Semaphore>(a3, v66);
    if (!v68)
    {
      LOBYTE(v59) = 0;
      char v65 = 0;
LABEL_47:
      if (v65
        || (uint64_t v46 = *(void *)a3,
            uint64_t v47 = *((void *)a3 + 1),
            *(void *)a3 = 0,
            *((void *)a3 + 1) = 0,
            (uint64_t v48 = *((void *)a3 + 3)) != 0)
        && v47
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46), v65))
      {
        WebKit::RemoteGraphicsContextGLProxy::wasCreated(this, (uint64_t)&v59, (uint64_t)&v60, (uint64_t *)&v61);
        if (v65)
        {
          std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v61, v34);
          IPC::Semaphore::destroy((IPC::Semaphore *)&v60);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v60);
          IPC::Semaphore::destroy((IPC::Semaphore *)&v59);
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v59);
        }
      }
      return;
    }
    IPC::Decoder::decode<IPC::Semaphore>(a3, v69);
    if (!v71)
    {
      LOBYTE(v59) = 0;
      char v65 = 0;
LABEL_45:
      if (v68)
      {
        IPC::Semaphore::destroy((IPC::Semaphore *)v66);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v66);
      }
      goto LABEL_47;
    }
    unint64_t v8 = *((void *)a3 + 1);
    uint64_t v9 = *(WTF::StringImpl **)a3;
    unint64_t v10 = *((void *)a3 + 2) - *(void *)a3;
    if (v8 > v10)
    {
      uint64_t v11 = (char *)v9 + v10;
      *((void *)a3 + 2) = v11 + 1;
      if (!v9)
      {
        unint64_t v49 = v8;
        uint64_t v50 = 0;
LABEL_68:
        unint64_t v8 = 0;
        uint64_t v9 = 0;
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v52 = *((void *)a3 + 3);
        if (v52)
        {
          if (v49)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v52 + 16))(v52, v50, v49);
            uint64_t v9 = *(WTF::StringImpl **)a3;
            unint64_t v8 = *((void *)a3 + 1);
          }
          else
          {
            unint64_t v8 = 0;
            uint64_t v9 = 0;
          }
        }
        goto LABEL_69;
      }
      unsigned int v12 = *v11;
      if (v12 >= 2)
      {
LABEL_69:
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v53 = *((void *)a3 + 3);
        if (v53 && v8) {
          (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v53 + 16))(v53, v9);
        }
        goto LABEL_74;
      }
      if (*v11)
      {
        IPC::ArgumentCoder<WebKit::RemoteGraphicsContextGLInitializationState,void>::decode(a3, (uint64_t)&v59);
        if (!(_BYTE)v62)
        {
          int v13 = *(WTF::StringImpl **)a3;
          uint64_t v54 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v55 = *((void *)a3 + 3);
          if (!v55
            || !v54
            || ((*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v55 + 16))(v55, v13), !(_BYTE)v62))
          {
            std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v59, v13);
LABEL_74:
            uint64_t v56 = *(void *)a3;
            uint64_t v57 = *((void *)a3 + 1);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            uint64_t v58 = *((void *)a3 + 3);
            if (v58 && v57) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v56);
            }
            LOBYTE(v59) = 0;
            char v65 = 0;
LABEL_43:
            if (v71)
            {
              IPC::Semaphore::destroy((IPC::Semaphore *)v69);
              WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v69);
            }
            goto LABEL_45;
          }
        }
        uint64_t v14 = (WTF::StringImpl *)v59;
        uint64_t v3 = v60;
        unint64_t v59 = 0;
        uint64_t v60 = 0;
        int v72 = v14;
        uint64_t v73 = v3;
        uint64_t v4 = v61;
        uint64_t v74 = v61;
        char v75 = 1;
        char v76 = 1;
        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v59, v13);
      }
      else
      {
        LOBYTE(v59) = 0;
        LOBYTE(v62) = 0;
        LOBYTE(v72) = 0;
        char v75 = 0;
        char v76 = 1;
        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v59, v9);
      }
      if (v68 && v71)
      {
        WTF::MachSendRight::MachSendRight();
        int v30 = v67;
        int v67 = 0;
        HIDWORD(v59) = v30;
        WTF::MachSendRight::MachSendRight();
        int v32 = v70;
        int v70 = 0;
        HIDWORD(v60) = v32;
        LOBYTE(v61) = 0;
        char v64 = 0;
        if (v12)
        {
          unint64_t v33 = v72;
          int v72 = 0;
          uint64_t v73 = 0;
          uint64_t v61 = v33;
          uint64_t v62 = v3;
          unint64_t v63 = v4;
          char v64 = 1;
        }
        char v65 = 1;
        std::__optional_destruct_base<WebCore::TextExtraction::Editable,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, v31);
        goto LABEL_43;
      }
      __break(1u);
    }
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    uint64_t v51 = *((void *)a3 + 3);
    if (v51)
    {
      if (v8)
      {
        (*(void (**)(uint64_t))(*(void *)v51 + 16))(v51);
        uint64_t v50 = *(void *)a3;
        unint64_t v49 = *((void *)a3 + 1);
      }
      else
      {
        unint64_t v49 = 0;
        uint64_t v50 = 0;
      }
    }
    goto LABEL_68;
  }

  WebKit::RemoteGraphicsContextGLProxy::wasLost(this);
}

atomic_uchar *volatile **WebKit::RemotePipelineLayout::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 1259)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
      if (v14)
      {
        WebKit::RemotePipelineLayout::setLabel(v4, (uint64_t *)&v13);
        if (v14)
        {
          uint64_t v11 = v13;
          int v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      uint64_t v9 = (WTF::StringImpl **)&v12;
    }
    else
    {
      if (v5 != 1258) {
        return this;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
      uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
      int v7 = (_DWORD *)(v6 + 8);
      ++*(_DWORD *)(v6 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v6, *(void *)(v4 + 48));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
      uint64_t v9 = &v13;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemotePresentationContext::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[8] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x4EC:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v16, a2 + 5);
        IPC::ArgumentCoder<WebKit::WebGPU::CanvasConfiguration,void>::decode((uint64_t *)a3, (uint64_t)&v24);
        if (v30) {
          goto LABEL_4;
        }
        uint64_t v10 = *(void *)a3;
        uint64_t v11 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v12 = *((void *)a3 + 3);
        if (v12 && v11)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
          if (v30)
          {
LABEL_4:
            unint64_t v17 = v24;
            __int16 v18 = v25;
            uint64_t v19 = v26;
            uint64_t v20 = v27;
            __int16 v21 = v28;
            char v22 = v29;
            char v23 = 1;
            WebKit::RemotePresentationContext::configure(v4, (uint64_t)&v17);
            if (v23)
            {
              uint64_t v6 = v19;
              if (v19)
              {
                uint64_t v19 = 0;
                LODWORD(v20) = 0;
                WTF::fastFree(v6, v5);
              }
            }
          }
          else
          {
            uint64_t v13 = *(void *)a3;
            uint64_t v14 = *((void *)a3 + 1);
            uint64_t v15 = *((void *)a3 + 3);
            *(void *)a3 = 0;
            *((void *)a3 + 1) = 0;
            if (v15 && v14) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
            }
          }
        }
        else
        {
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
        }
        int v7 = &v16;
        goto LABEL_13;
      case 0x4ED:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v24, a2 + 5);
        uint64_t v8 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v9) {
          WebKit::RemotePresentationContext::getCurrentTexture(v4, v8);
        }
        goto LABEL_12;
      case 0x4EE:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v24, a2 + 5);
        (*(void (**)(void, void))(**(void **)(v4 + 16) + 32))(*(void *)(v4 + 16), 0);
        goto LABEL_12;
      case 0x4EF:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v24, a2 + 5);
        (*(void (**)(void))(**(void **)(v4 + 16) + 24))(*(void *)(v4 + 16));
LABEL_12:
        int v7 = &v24;
LABEL_13:
        this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v7);
        break;
      default:
        return this;
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteQuerySet::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 1266)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
      if (v14)
      {
        WebKit::RemoteQuerySet::setLabel((uint64_t)v4, (uint64_t *)&v13);
        if (v14)
        {
          int v7 = v13;
          uint64_t v13 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, v6);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
        }
      }
      uint64_t v11 = (WTF::StringImpl **)&v12;
    }
    else
    {
      if (v5 == 1265)
      {
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
        uint64_t v8 = *((void *)v4[3] + 1);
        char v9 = (_DWORD *)(v8 + 8);
        ++*(_DWORD *)(v8 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v8, (uint64_t)v4[6]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v9, v10);
      }
      else
      {
        if (v5 != 1264) {
          return this;
        }
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
        WebKit::RemoteQuerySet::destroy((WebKit::RemoteQuerySet *)v4);
      }
      uint64_t v11 = &v13;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v11);
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteQueue::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (!*(unsigned char *)(*((void *)this[5] + 1) + 78)) {
    return this;
  }
  uint64_t v4 = a3;
  uint64_t v5 = (uint64_t)this;
  switch(*((_WORD *)a3 + 25))
  {
    case 0x4F3:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v76, a2 + 5);
      IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyExternalImage,void>::decode(v4, v80);
      if (v84
        || (uint64_t v33 = *(void *)v4,
            uint64_t v34 = *((void *)v4 + 1),
            *(void *)uint64_t v4 = 0,
            *((void *)v4 + 1) = 0,
            (uint64_t v35 = *((void *)v4 + 3)) != 0)
        && v34
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33), v84))
      {
        IPC::ArgumentCoder<WebKit::WebGPU::ImageCopyTextureTagged,void>::decode((uint64_t *)v4, (uint64_t)&v85);
        if (v93
          || (uint64_t v36 = *(void *)v4,
              uint64_t v37 = *((void *)v4 + 1),
              *(void *)uint64_t v4 = 0,
              *((void *)v4 + 1) = 0,
              (uint64_t v38 = *((void *)v4 + 3)) != 0)
          && v37
          && ((*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36), v93))
        {
          IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(v4, &v94);
          if (v96)
          {
            if (!v84 || !v93) {
              goto LABEL_125;
            }
            LOBYTE(v60) = 0;
            LOBYTE(v63) = 0;
            if (v82)
            {
              int v62 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin2DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v60, (uint64_t)v80);
              LOBYTE(v63) = 1;
            }
            LOBYTE(v64) = v83;
            char v65 = v85;
            int v66 = (int)v86;
            v67[0] = 0;
            LOBYTE(v70) = 0;
            if (v90)
            {
              int v69 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Origin3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v67, (uint64_t)v87);
              LOBYTE(v70) = 1;
            }
            BYTE8(v70) = v91;
            *(_WORD *)((char *)&v70 + 9) = v92;
            LOBYTE(v71) = 0;
            int v73 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)&v71, (uint64_t)&v94);
            LOBYTE(v74) = 1;
            if (v96 && v95 != -1) {
              ((void (*)(atomic_uchar *volatile **, long long *))off_1EE9BD218[v95])(&v59, &v94);
            }
          }
          else
          {
            LOBYTE(v60) = 0;
            LOBYTE(v74) = 0;
          }
          if (v93 && v90 && v89 != -1) {
            ((void (*)(long long *, char *))off_1EE9BD208[v89])(&v94, v87);
          }
        }
        else
        {
          LOBYTE(v60) = 0;
          LOBYTE(v74) = 0;
        }
        if (v84 && v82 && v81 != -1) {
          ((void (*)(uint64_t **, uint64_t **))off_1EE9BD250[v81])(&v85, v80);
        }
      }
      else
      {
        LOBYTE(v60) = 0;
        LOBYTE(v74) = 0;
      }
      if ((_BYTE)v74
        || (uint64_t v39 = *(void *)v4,
            uint64_t v40 = *((void *)v4 + 1),
            *(void *)uint64_t v4 = 0,
            *((void *)v4 + 1) = 0,
            (uint64_t v41 = *((void *)v4 + 3)) != 0)
        && v40
        && ((*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(v41, v39), (_BYTE)v74))
      {
        WebKit::RemoteQueue::copyExternalImageToTexture(v5, (uint64_t)&v60, (uint64_t)&v65, (uint64_t)&v71);
        if ((_BYTE)v74)
        {
          if (v73 != -1) {
            ((void (*)(uint64_t **, uint64_t *))off_1EE9BD218[v73])(&v85, &v71);
          }
          int v73 = -1;
          if ((_BYTE)v70)
          {
            if (v69 != -1) {
              ((void (*)(uint64_t **, char *))off_1EE9BD208[v69])(&v85, v67);
            }
            int v69 = -1;
          }
          if ((_BYTE)v63)
          {
            if (v62 != -1) {
              ((void (*)(uint64_t **, WTF::StringImpl **))off_1EE9BD250[v62])(&v85, &v60);
            }
          }
        }
      }
      char v14 = v76;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v14);
    case 0x4F4:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v60, a2 + 5);
      uint64_t v17 = *(void *)(*(void *)(v5 + 24) + 8);
      __int16 v18 = (_DWORD *)(v17 + 8);
      ++*(_DWORD *)(v17 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v17, *(void *)(v5 + 48));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v18, v19);
      char v14 = (uint64_t **)&v60;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v14);
    case 0x4F5:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(v80, a2 + 5);
      uint64_t v8 = (atomic_uchar *volatile *)v80[0];
      char v9 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if (v10)
      {
        uint64_t v11 = v9;
        uint64_t v60 = v9;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v8);
        uint64_t v12 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        *uint64_t v12 = (uint64_t)&unk_1EE9BD1C8;
        v12[1] = (uint64_t)v11;
        uint64_t v61 = 0;
        v12[2] = (uint64_t)v8;
        unint64_t v85 = v12;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v61);
        WebKit::RemoteQueue::onSubmittedWorkDone(v5, (uint64_t *)&v85);
        uint64_t v13 = v85;
        unint64_t v85 = 0;
        if (v13) {
          (*(void (**)(uint64_t *))(*v13 + 8))(v13);
        }
      }
      char v14 = v80;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v14);
    case 0x4F6:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(v4, (uint64_t)&v60);
      if ((_BYTE)v61)
      {
        WebKit::RemoteQueue::setLabel(v5, (uint64_t *)&v60);
        if ((_BYTE)v61)
        {
          uint64_t v16 = v60;
          uint64_t v60 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v15);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
        }
      }
      goto LABEL_83;
    case 0x4F7:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v85, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((uint64_t *)v4, (uint64_t)&v60);
      if ((_BYTE)v62)
      {
        WebKit::RemoteQueue::submit(v5, (uint64_t)&v60);
        if ((_BYTE)v62)
        {
          int v7 = v60;
          if (v60)
          {
            uint64_t v60 = 0;
            LODWORD(v61) = 0;
            WTF::fastFree(v7, v6);
          }
        }
      }
LABEL_83:
      char v14 = &v85;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v14);
    case 0x4F8:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v94, a2 + 5);
      uint64_t v3 = (atomic_uchar *volatile *)v94;
      uint64_t v20 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)v4);
      if (!v21) {
        goto LABEL_95;
      }
      unint64_t v22 = *((void *)v4 + 1);
      uint64_t v23 = *(void *)v4;
      unint64_t v24 = ((*((void *)v4 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)v4;
      if (v22 < v24 || v22 - v24 <= 7)
      {
        unint64_t v42 = 0;
        uint64_t v43 = 0;
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v44 = *((void *)v4 + 3);
        if (v44)
        {
          if (v22)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v44 + 16))(v44, v23, v22);
            uint64_t v43 = *(void *)v4;
            unint64_t v42 = *((void *)v4 + 1);
          }
          else
          {
            unint64_t v42 = 0;
            uint64_t v43 = 0;
          }
        }
        goto LABEL_94;
      }
      uint64_t v26 = (atomic_uchar *volatile **)(v23 + v24);
      *((void *)v4 + 2) = v26 + 1;
      if (!v23)
      {
        unint64_t v42 = v22;
        uint64_t v43 = 0;
LABEL_94:
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v45 = *((void *)v4 + 3);
        if (v45 && v42) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 16))(v45, v43);
        }
        goto LABEL_95;
      }
      uint64_t v27 = (WTF::StringImpl *)v20;
      __int16 v28 = *v26;
      IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(v4, (uint64_t)&v85);
      if (v88)
      {
        uint64_t v60 = v27;
        uint64_t v61 = v28;
        LOBYTE(v62) = 0;
        LOBYTE(v64) = 0;
        if (v87[0])
        {
          WTF::MachSendRight::MachSendRight();
          unint64_t v63 = v86;
          LOBYTE(v64) = 1;
          LOBYTE(v65) = 1;
          if (v88 && v87[0]) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v85);
          }
        }
        else
        {
          LOBYTE(v65) = 1;
        }
        goto LABEL_41;
      }
LABEL_95:
      LOBYTE(v60) = 0;
      LOBYTE(v65) = 0;
      uint64_t v46 = *(void *)v4;
      uint64_t v47 = *((void *)v4 + 1);
      *(void *)uint64_t v4 = 0;
      *((void *)v4 + 1) = 0;
      uint64_t v48 = *((void *)v4 + 3);
      if (!v48) {
        goto LABEL_96;
      }
      if (!v47) {
        goto LABEL_96;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 16))(v48, v46);
      if (!(_BYTE)v65) {
        goto LABEL_96;
      }
LABEL_41:
      char v29 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
      if (v30)
      {
        uint64_t v4 = (IPC::Decoder *)v29;
        unint64_t v85 = v29;
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
        uint64_t v31 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
        uint64_t *v31 = (uint64_t)&unk_1EE9BD1F0;
        v31[1] = (uint64_t)v4;
        uint64_t v86 = 0;
        _DWORD v31[2] = (uint64_t)v3;
        v80[0] = v31;
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v86);
        if (!(_BYTE)v65) {
          goto LABEL_125;
        }
        WebKit::RemoteQueue::writeBuffer(v5, (uint64_t)v60, (uint64_t)v61, (uint64_t)&v62, (uint64_t *)v80);
        int v32 = v80[0];
        v80[0] = 0;
        if (v32) {
          (*(void (**)(uint64_t *))(*v32 + 8))(v32);
        }
      }
      if ((_BYTE)v65 && (_BYTE)v64) {
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)&v62);
      }
LABEL_96:
      char v14 = (uint64_t **)&v94;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v14);
    case 0x4F9:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v59, a2 + 5);
      uint64_t v3 = v59;
      IPC::Decoder::decode<WebKit::WebGPU::ImageCopyTexture>((uint64_t *)v4, (uint64_t)&v85);
      if (v93)
      {
        IPC::Decoder::decode<std::optional<WebCore::SharedMemoryHandle>>(v4, (uint64_t)v76);
        if (v78)
        {
          IPC::ArgumentCoder<WebKit::WebGPU::ImageDataLayout,void>::decode(v4, (uint64_t)&v94);
          if ((v96
             || (uint64_t v49 = *(void *)v4,
                 uint64_t v50 = *((void *)v4 + 1),
                 *(void *)uint64_t v4 = 0,
                 *((void *)v4 + 1) = 0,
                 (uint64_t v51 = *((void *)v4 + 3)) != 0)
             && v50
             && ((*(void (**)(uint64_t, uint64_t))(*(void *)v51 + 16))(v51, v49), v96))
            && (IPC::Decoder::decode<std::variant<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>(v4, v80), v82))
          {
            if (!v93 || !v78 || !v96) {
              goto LABEL_125;
            }
            std::__tuple_leaf<1ul,WebKit::WebGPU::ImageCopyTexture,false>::__tuple_leaf[abi:sn180100]<WebKit::WebGPU::ImageCopyTexture,void>((uint64_t)&v60, (uint64_t *)&v85);
            v67[0] = 0;
            LOBYTE(v69) = 0;
            if (v77)
            {
              WTF::MachSendRight::MachSendRight();
              char v68 = v76[1];
              LOBYTE(v69) = 1;
            }
            long long v70 = v94;
            uint64_t v71 = v95;
            v72[0] = 0;
            int v74 = -1;
            std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::WebGPU::Extent3DDict>,(std::__variant_detail::_Trait)1>>((uint64_t)v72, (uint64_t)v80);
            char v75 = 1;
            if (v82 && v81 != -1) {
              ((void (*)(char *, uint64_t **))off_1EE9BD218[v81])(&v79, v80);
            }
          }
          else
          {
            LOBYTE(v60) = 0;
            char v75 = 0;
          }
          if (v78 && v77) {
            WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v76);
          }
        }
        else
        {
          LOBYTE(v60) = 0;
          char v75 = 0;
        }
        if (v93 && v90 && v89 != -1) {
          ((void (*)(uint64_t **, char *))off_1EE9BD208[v89])(v80, v87);
        }
      }
      else
      {
        LOBYTE(v60) = 0;
        char v75 = 0;
      }
      if (v75) {
        goto LABEL_110;
      }
      while (2)
      {
        uint64_t v56 = *(void *)v4;
        uint64_t v57 = *((void *)v4 + 1);
        *(void *)uint64_t v4 = 0;
        *((void *)v4 + 1) = 0;
        uint64_t v58 = *((void *)v4 + 3);
        if (!v58) {
          goto LABEL_122;
        }
        if (!v57) {
          goto LABEL_122;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v58 + 16))(v58, v56);
        if (!v75) {
          goto LABEL_122;
        }
LABEL_110:
        uint64_t v52 = (uint64_t *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4);
        if (v53)
        {
          uint64_t v4 = (IPC::Decoder *)v52;
          unint64_t v85 = v52;
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3);
          uint64_t v54 = (uint64_t *)WTF::fastMalloc((WTF *)0x18);
          *uint64_t v54 = (uint64_t)&unk_1EE9BD238;
          v54[1] = (uint64_t)v4;
          uint64_t v86 = 0;
          void v54[2] = (uint64_t)v3;
          v80[0] = v54;
          WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v86);
          if (v75)
          {
            WebKit::RemoteQueue::writeTexture(v5, (uint64_t)&v60, (uint64_t)v67, (uint64_t *)&v70, (uint64_t)v72, (uint64_t *)v80);
            uint64_t v55 = v80[0];
            v80[0] = 0;
            if (v55) {
              (*(void (**)(uint64_t *))(*v55 + 8))(v55);
            }
            break;
          }
LABEL_125:
          __break(1u);
          continue;
        }
        break;
      }
      if (v75)
      {
        if (v74 != -1) {
          ((void (*)(uint64_t **, char *))off_1EE9BD218[v74])(&v85, v72);
        }
        int v74 = -1;
        if ((_BYTE)v69) {
          WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v67);
        }
        if ((_BYTE)v65 && v64 != -1) {
          ((void (*)(uint64_t **, int *))off_1EE9BD208[v64])(&v85, &v62);
        }
      }
LABEL_122:
      char v14 = (uint64_t **)&v59;
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v14);
    default:
      return this;
  }
}

atomic_uchar *volatile **WebKit::RemoteRenderBundleEncoder::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[8] + 1) + 78))
  {
    uint64_t v4 = this;
    switch(*((_WORD *)a3 + 25))
    {
      case 0x4FC:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v26, a2 + 5);
        uint64_t v5 = *((void *)v4[3] + 1);
        uint64_t v6 = (_DWORD *)(v5 + 8);
        ++*(_DWORD *)(v5 + 8);
        WebKit::WebGPU::ObjectHeap::removeObject(v5, (uint64_t)v4[5]);
        WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v6, v7);
        goto LABEL_38;
      case 0x4FD:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<unsigned int>>>(a3, v26);
        if (BYTE4(v27)) {
          WebKit::RemoteRenderBundleEncoder::draw((uint64_t)v4);
        }
        goto LABEL_44;
      case 0x4FE:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned int>,std::optional<unsigned int>,std::optional<int>,std::optional<unsigned int>>>(a3, v26);
        if (BYTE4(v28)) {
          WebKit::RemoteRenderBundleEncoder::drawIndexed((uint64_t)v4);
        }
        goto LABEL_44;
      case 0x4FF:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, v26);
        if (LOBYTE(v26[2])) {
          WebKit::RemoteRenderBundleEncoder::drawIndexedIndirect((uint64_t)v4, (uint64_t)v26[0], (uint64_t)v26[1]);
        }
        goto LABEL_44;
      case 0x500:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::MediaPlayerClientIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,unsigned long long>>((uint64_t *)a3, v26);
        if (LOBYTE(v26[2])) {
          WebKit::RemoteRenderBundleEncoder::drawIndirect((uint64_t)v4, (uint64_t)v26[0], (uint64_t)v26[1]);
        }
        goto LABEL_44;
      case 0x501:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v25, a2 + 5);
        IPC::ArgumentCoder<WebCore::ApplePayAMSUIRequest,void>::decode(a3, (uint64_t)&v31);
        if (v32)
        {
          uint64_t v8 = (WTF::StringImpl *)IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>((uint64_t *)a3);
          if ((_BYTE)v9)
          {
            v26[0] = v31;
            v26[1] = v8;
            LOBYTE(v26[2]) = 1;
            WebKit::RemoteRenderBundleEncoder::finish(v4, v26, (uint64_t)v8);
            if (LOBYTE(v26[2]))
            {
              uint64_t v11 = v26[0];
              v26[0] = 0;
              if (v11)
              {
                if (*(_DWORD *)v11 == 2) {
                  WTF::StringImpl::destroy(v11, v10);
                }
                else {
                  *(_DWORD *)v11 -= 2;
                }
              }
            }
            goto LABEL_53;
          }
          if (v31)
          {
            if (*(_DWORD *)v31 == 2) {
              WTF::StringImpl::destroy(v31, v9);
            }
            else {
              *(_DWORD *)v31 -= 2;
            }
          }
        }
        else
        {
          uint64_t v22 = *(void *)a3;
          uint64_t v23 = *((void *)a3 + 1);
          *(void *)a3 = 0;
          *((void *)a3 + 1) = 0;
          uint64_t v24 = *((void *)a3 + 3);
          if (v24 && v23) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
          }
        }
        uint64_t v19 = *(void *)a3;
        uint64_t v20 = *((void *)a3 + 1);
        *(void *)a3 = 0;
        *((void *)a3 + 1) = 0;
        uint64_t v21 = *((void *)a3 + 3);
        if (v21 && v20) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
        }
LABEL_53:
        __int16 v18 = (WTF::StringImpl **)&v25;
LABEL_45:
        this = WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v18);
        break;
      case 0x502:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v26);
        if (!LOBYTE(v26[1])) {
          goto LABEL_44;
        }
        WebKit::RemoteRenderBundleEncoder::insertDebugMarker((uint64_t)v4);
        goto LABEL_32;
      case 0x503:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v26, a2 + 5);
        WebKit::RemoteRenderBundleEncoder::popDebugGroup((WebKit::RemoteRenderBundleEncoder *)v4);
        goto LABEL_38;
      case 0x504:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v26);
        if (!LOBYTE(v26[1])) {
          goto LABEL_44;
        }
        WebKit::RemoteRenderBundleEncoder::pushDebugGroup((uint64_t)v4);
        goto LABEL_32;
      case 0x505:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>((uint64_t *)a3, v26);
        if ((_BYTE)v29)
        {
          WebKit::RemoteRenderBundleEncoder::setBindGroup((uint64_t)v4, LODWORD(v26[0]), (uint64_t)v26[1], (uint64_t)&v26[2]);
          if ((_BYTE)v29)
          {
            if ((_BYTE)v28)
            {
              char v14 = v26[2];
              if (v26[2])
              {
                _DWORD v26[2] = 0;
                LODWORD(v27) = 0;
                WTF::fastFree(v14, v13);
              }
            }
          }
        }
        goto LABEL_44;
      case 0x506:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t *)a3, v26);
        if (v30) {
          WebKit::RemoteRenderBundleEncoder::setIndexBuffer((uint64_t)v4, (uint64_t)v26[0], LOBYTE(v26[1]), (uint64_t)v26[2], v27, v28, v29);
        }
        goto LABEL_44;
      case 0x507:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)v26);
        if (!LOBYTE(v26[1])) {
          goto LABEL_44;
        }
        WebKit::RemoteRenderBundleEncoder::setLabel((uint64_t)v4, (uint64_t *)v26);
LABEL_32:
        if (LOBYTE(v26[1]))
        {
          uint64_t v15 = v26[0];
          v26[0] = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v12);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
        }
        goto LABEL_44;
      case 0x508:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)v26, a2 + 5);
        uint64_t v16 = IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::LegacyCustomProtocolIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>((uint64_t *)a3);
        if (v17) {
          WebKit::RemoteRenderBundleEncoder::setPipeline((uint64_t)v4, v16);
        }
LABEL_38:
        __int16 v18 = v26;
        goto LABEL_45;
      case 0x509:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>>((uint64_t *)a3, v26);
        if (v30) {
          WebKit::RemoteRenderBundleEncoder::setVertexBuffer((uint64_t)v4, LODWORD(v26[0]), (uint64_t)v26[1], (uint64_t)v26[2], v27, v28, v29);
        }
        goto LABEL_44;
      case 0x50A:
        WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v31, a2 + 5);
        IPC::Decoder::decode<std::tuple<unsigned int,std::optional<unsigned long long>,std::optional<unsigned long long>>>(a3, v26);
        if ((_BYTE)v29) {
          WebKit::RemoteRenderBundleEncoder::unsetVertexBuffer((uint64_t)v4, LODWORD(v26[0]), (uint64_t)v26[1], (uint64_t)v26[2], v27, v28);
        }
LABEL_44:
        __int16 v18 = &v31;
        goto LABEL_45;
      default:
        return this;
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::RemoteRenderBundle::didReceiveStreamMessage(atomic_uchar *volatile **this, uint64_t **a2, IPC::Decoder *a3)
{
  if (*(unsigned char *)(*((void *)this[5] + 1) + 78))
  {
    uint64_t v4 = (uint64_t)this;
    int v5 = *((unsigned __int16 *)a3 + 25);
    if (v5 == 1292)
    {
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, a2 + 5);
      IPC::Decoder::decode<std::tuple<WTF::String>>(a3, (uint64_t)&v13);
      if (v14)
      {
        WebKit::RemoteRenderBundle::setLabel(v4, (uint64_t *)&v13);
        if (v14)
        {
          uint64_t v11 = v13;
          uint64_t v13 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
        }
      }
      char v9 = (WTF::StringImpl **)&v12;
    }
    else
    {
      if (v5 != 1291) {
        return this;
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v13, a2 + 5);
      uint64_t v6 = *(void *)(*(void *)(v4 + 24) + 8);
      int v7 = (_DWORD *)(v6 + 8);
      ++*(_DWORD *)(v6 + 8);
      WebKit::WebGPU::ObjectHeap::removeObject(v6, *(void *)(v4 + 48));
      WTF::RefCounted<WebKit::WebGPU::ObjectHeap>::deref(v7, v8);
      char v9 = &v13;
    }
    return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)v9);
  }
  return this;
}

uint64_t WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IntHash<unsigned int>>,unsigned int>(uint64_t *a1, int *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v3 = *(_DWORD *)(v2 - 8);
    int v4 = *a2;
    unsigned int v5 = 9 * ((v4 + ~(v4 << 15)) ^ ((v4 + ~(v4 << 15)) >> 10));
    unsigned int v6 = (v5 ^ (v5 >> 6)) + ~((v5 ^ (v5 >> 6)) << 11);
    uint64_t v7 = (v6 ^ HIWORD(v6)) & v3;
    int v8 = *(_DWORD *)(v2 + 8 * v7);
    if (v8 == *a2) {
      return *(unsigned int *)(v2 + 8 * v7 + 4);
    }
    int v9 = 1;
    while (v8 != -1)
    {
      uint64_t v7 = (v7 + v9) & v3;
      int v8 = *(_DWORD *)(v2 + 8 * v7);
      ++v9;
      if (v8 == v4) {
        return *(unsigned int *)(v2 + 8 * v7 + 4);
      }
    }
  }
  return 0;
}

void *WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<unsigned int &>(void *result, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *a2;
  if (*a2
    || (result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  int v11 = *a3;
  unsigned int v12 = 9 * ((v11 + ~(v11 << 15)) ^ ((v11 + ~(v11 << 15)) >> 10));
  unsigned int v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
  unsigned int v14 = (v13 ^ HIWORD(v13)) & v10;
  uint64_t v15 = (_DWORD *)(v8 + 8 * v14);
  int v16 = *v15;
  if (*v15 != -1)
  {
    char v17 = 0;
    int v18 = 1;
    do
    {
      if (v16 == v11)
      {
        if (v9) {
          uint64_t v21 = 0;
        }
        else {
          uint64_t v21 = *(unsigned int *)(v8 - 4);
        }
        char v26 = 0;
        uint64_t v27 = v8 + 8 * v21;
        goto LABEL_29;
      }
      if (v16 == -2) {
        char v17 = v15;
      }
      unsigned int v14 = (v14 + v18) & v10;
      uint64_t v15 = (_DWORD *)(v8 + 8 * v14);
      int v16 = *v15;
      ++v18;
    }
    while (*v15 != -1);
    if (v17)
    {
      void *v17 = 0xFFFFFFFFLL;
      --*(_DWORD *)(*a2 - 16);
      int v11 = *a3;
      uint64_t v15 = v17;
    }
  }
  _DWORD *v15 = v11;
  v15[1] = *a4;
  uint64_t v19 = *a2;
  if (*a2) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 <= 2 * v24)
    {
LABEL_22:
      uint64_t result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a2, v15);
      uint64_t v15 = result;
      uint64_t v22 = *a2;
      if (*a2) {
        unint64_t v25 = *(unsigned int *)(v22 - 4);
      }
      else {
        unint64_t v25 = 0;
      }
    }
  }
  else if (3 * v25 <= 4 * v24)
  {
    goto LABEL_22;
  }
  uint64_t v27 = v22 + 8 * v25;
  char v26 = 1;
LABEL_29:
  void *v7 = v15;
  v7[1] = v27;
  *((unsigned char *)v7 + 16) = v26;
  return result;
}

void *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(8 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    unsigned int v12 = (void *)(v9 + 16);
    do
    {
      *v12++ = 0xFFFFFFFFLL;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    do
    {
      uint64_t v15 = (_DWORD *)(v6 + 8 * v13);
      if (*v15 <= 0xFFFFFFFD)
      {
        uint64_t v16 = *a1;
        if (*a1) {
          int v17 = *(_DWORD *)(v16 - 8);
        }
        else {
          int v17 = 0;
        }
        int v18 = 0;
        unsigned int v19 = 9 * ((*v15 + ~(*v15 << 15)) ^ ((*v15 + ~(*v15 << 15)) >> 10));
        unsigned int v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          uint64_t v21 = v20 & v17;
          unsigned int v20 = ++v18 + v21;
        }
        while (*(_DWORD *)(v16 + 8 * v21) != -1);
        uint64_t v22 = (void *)(v16 + 8 * v21);
        void *v22 = *(void *)v15;
        if (v15 == a3) {
          unsigned int v14 = v22;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    unsigned int v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::take(uint64_t *a1, int a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(v2 - 8);
  unsigned int v4 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  unsigned int v5 = (v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11);
  uint64_t v6 = v3 & (v5 ^ HIWORD(v5));
  int v7 = *(_DWORD *)(v2 + 8 * v6);
  if (v7 != a2)
  {
    int v8 = 1;
    while (v7 != -1)
    {
      uint64_t v6 = (v6 + v8) & v3;
      int v7 = *(_DWORD *)(v2 + 8 * v6);
      ++v8;
      if (v7 == a2) {
        goto LABEL_8;
      }
    }
    uint64_t v6 = *(unsigned int *)(v2 - 4);
  }
LABEL_8:
  if (v6 == *(_DWORD *)(v2 - 4)) {
    return 0;
  }
  uint64_t v11 = (_DWORD *)(v2 + 8 * v6);
  uint64_t v9 = v11[1];
  _DWORD *v11 = -2;
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v12 = *a1;
  if (*a1) {
    int v13 = *(_DWORD *)(v12 - 12) - 1;
  }
  else {
    int v13 = -1;
  }
  *(_DWORD *)(v12 - 12) = v13;
  uint64_t v14 = *a1;
  if (*a1)
  {
    unsigned int v15 = 6 * *(_DWORD *)(v14 - 12);
    unsigned int v16 = *(_DWORD *)(v14 - 4);
    if (v15 < v16 && v16 >= 9) {
      WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,unsigned int>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,unsigned int,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v16 >> 1, 0);
    }
  }
  return v9;
}

unint64_t IPC::Decoder::decode<std::tuple<int,int>>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 3)
  {
    uint64_t v5 = (unsigned int *)(v2 + v3);
    a1[2] = v5 + 1;
    if (v2)
    {
      uint64_t v13 = *v5 | 0x100000000;
      return IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder,int>(a1, (unsigned int *)&v13);
    }
    unint64_t v8 = v1;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      uint64_t v12 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v2, v1);
        a1 = v12;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  uint64_t v6 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11)
  {
    if (v8) {
      (*(void (**)(uint64_t, uint64_t, unint64_t, void))(*(void *)v11 + 16))(v11, v9, v8, 0);
    }
    return 0;
  }
  return v6;
}

unint64_t IPC::ArgumentCoder<std::tuple<int,int>,void>::decode<IPC::Decoder,int>(void *a1, unsigned int *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    uint64_t v6 = (unsigned int *)(v3 + v4);
    a1[2] = v6 + 1;
    if (!v3)
    {
      unint64_t v9 = v2;
      uint64_t v10 = 0;
      goto LABEL_11;
    }
    uint64_t v3 = *((unsigned __int8 *)a2 + 4);
    if (*((unsigned char *)a2 + 4)) {
      return *a2 | ((unint64_t)*v6 << 32);
    }
    __break(1u);
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = (unsigned int *)a1[3];
    if (!v6) {
      goto LABEL_11;
    }
  }
  uint64_t v12 = a1;
  if (v2)
  {
    (*(void (**)(unsigned int *, uint64_t, unint64_t))(*(void *)v6 + 16))(v6, v3, v2);
    a1 = v12;
    uint64_t v10 = *v12;
    unint64_t v9 = v12[1];
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
  }
LABEL_11:
  uint64_t v7 = 0;
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11)
  {
    if (v9) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v10);
    }
    return 0;
  }
  return v7;
}

uint64_t IPC::Decoder::decodeSpan<int>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  unint64_t v6 = 4 * a2;
  if (v3 >= v5 && v3 - v5 >= v6)
  {
    uint64_t v8 = v4 + v5;
    a1[2] = v4 + v5 + v6;
  }
  else
  {
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
      }
      return 0;
    }
  }
  return v8;
}

unint64_t *IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int>>(unint64_t *result, uint64_t *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v5, v4);
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_14;
  }
  uint64_t v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v12 = v4;
    uint64_t v13 = 0;
LABEL_14:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v12) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13);
    }
    goto LABEL_15;
  }
  unint64_t v9 = *v8;
  if (!*v8)
  {
    *unint64_t result = 0;
    result[1] = 0;
    result[2] = 0;
    goto LABEL_12;
  }
  if (!(v9 >> 62))
  {
    uint64_t v10 = IPC::Decoder::decodeSpan<int>(a2, *v8);
    if (v10)
    {
      uint64_t v11 = v10;
      unint64_t result = (unint64_t *)IPC::Decoder::decodeSpan<int>(a2, v9);
      if (result)
      {
        unint64_t *v3 = v9;
        v3[1] = v11;
        v3[2] = (unint64_t)result;
LABEL_12:
        *((unsigned char *)v3 + 24) = 1;
        return result;
      }
    }
  }
LABEL_15:
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v16 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (unint64_t *)a2[3];
  if (result && v16)
  {
    int v17 = *(uint64_t (**)(void))(*result + 16);
    return (unint64_t *)v17();
  }
  return result;
}

_OWORD *IPC::Decoder::decode<IPC::ArrayReferenceTuple<int,int,int>>(_OWORD *result, uint64_t *a2)
{
  unint64_t v3 = result;
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a2;
  if (v4 < v6 || v4 - v6 <= 7)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v16 + 16))(v16, v5, v4);
        uint64_t v15 = *a2;
        uint64_t v14 = a2[1];
      }
      else
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
    }
    goto LABEL_15;
  }
  uint64_t v8 = (uint64_t *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v14 = v4;
    uint64_t v15 = 0;
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17 && v14) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v15);
    }
    goto LABEL_16;
  }
  unint64_t v9 = *v8;
  if (!*v8)
  {
    *unint64_t result = 0u;
    result[1] = 0u;
    goto LABEL_13;
  }
  if (!(v9 >> 62))
  {
    uint64_t v10 = IPC::Decoder::decodeSpan<int>(a2, *v8);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = IPC::Decoder::decodeSpan<int>(a2, v9);
      if (v12)
      {
        uint64_t v13 = v12;
        unint64_t result = (_OWORD *)IPC::Decoder::decodeSpan<int>(a2, v9);
        if (result)
        {
          *(void *)unint64_t v3 = v9;
          *((void *)v3 + 1) = v11;
          *((void *)v3 + 2) = v13;
          *((void *)v3 + 3) = result;
LABEL_13:
          *((unsigned char *)v3 + 32) = 1;
          return result;
        }
      }
    }
  }
LABEL_16:
  *(unsigned char *)unint64_t v3 = 0;
  *((unsigned char *)v3 + 32) = 0;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = (_OWORD *)a2[3];
  if (result && v18)
  {
    unsigned int v19 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (_OWORD *)v19();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      int v23 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        a1 = v23;
        uint64_t v13 = *v23;
        unint64_t v12 = v23[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
LABEL_14:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15 && v12)
    {
      uint64_t v22 = a1;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
LABEL_28:
      a1 = v22;
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  uint64_t v5 = (unsigned int *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    unint64_t v12 = v1;
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  unint64_t v6 = (((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v6 && v1 - v6 > 3)
  {
    uint64_t v8 = *v5;
    unint64_t v9 = (unsigned int *)(v2 + v6);
    uint64_t v10 = *v9;
    a1[2] = v9 + 1;
    return v8 | (v10 << 32);
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v16 = a1[3];
  if (v16)
  {
    if (v1)
    {
      uint64_t v22 = a1;
      (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
      a1 = v22;
      uint64_t v19 = *v22;
      uint64_t v20 = v22[1];
      uint64_t v21 = v22[3];
      void *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
          goto LABEL_28;
        }
      }
    }
  }
LABEL_18:
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
    }
    return 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<float,float,float,float>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v25 = a2[3];
    if (v25)
    {
      char v30 = a2;
      uint64_t v32 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v3);
        a2 = v30;
        uint64_t result = v32;
        uint64_t v24 = *v30;
        unint64_t v23 = v30[1];
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26 && v23)
    {
      uint64_t v29 = a2;
      uint64_t v31 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  unint64_t v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v23 = v2;
    uint64_t v24 = 0;
    goto LABEL_30;
  }
  unint64_t v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    int v9 = *v6;
    a2[2] = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
    int v10 = *(_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v11 = (((((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v11 && v2 - v11 > 3)
    {
      uint64_t v13 = (int *)(v3 + v11);
      a2[2] = v13 + 1;
      int v14 = *v13;
      unint64_t v15 = (((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
      if (v2 >= v15 && v2 - v15 > 3)
      {
        uint64_t v17 = (int *)(v3 + v15);
        int v18 = *v17;
        a2[2] = v17 + 1;
        *(_DWORD *)uint64_t result = v9;
        *(_DWORD *)(result + 4) = v10;
        *(_DWORD *)(result + 8) = v14;
        *(_DWORD *)(result + 12) = v18;
        *(unsigned char *)(result + 16) = 1;
        return result;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v19 = a2[3];
  if (v19)
  {
    if (v2)
    {
      uint64_t v29 = a2;
      uint64_t v31 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v3);
      a2 = v29;
      uint64_t result = v31;
      uint64_t v21 = *v29;
      uint64_t v20 = v29[1];
      uint64_t v22 = v29[3];
      void *v29 = 0;
      v29[1] = 0;
      if (v22)
      {
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v21);
LABEL_38:
          a2 = v29;
          uint64_t result = v31;
        }
      }
    }
  }
LABEL_31:
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v27 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v27)
  {
    uint64_t v28 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v28();
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[16])
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      unint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    unint64_t v6 = (unsigned int *)(v3 + v4);
    a1[2] = v6 + 1;
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
      return;
    }
    unint64_t v7 = v2;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      unint64_t v11 = a1;
      uint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v8 = *v11;
        unint64_t v7 = v11[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v10 = a1[3];
  if (v10)
  {
    if (v7)
    {
      unint64_t v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v3 >= v5 && v3 - v5 > 3)
  {
    unint64_t v7 = (unsigned int *)(v4 + v5);
    a1[2] = v7 + 1;
    if (v4)
    {
      uint64_t v15 = *v7 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(a1, a2, (int *)&v15, a3);
      return;
    }
    unint64_t v8 = v3;
    uint64_t v9 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v10 = a1[3];
    if (v10)
    {
      unint64_t v12 = a1;
      uint64_t v14 = a3;
      if (v3)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v4, v3);
        a1 = v12;
        a3 = v14;
        uint64_t v9 = *v12;
        unint64_t v8 = v12[1];
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v9 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v11 = a1[3];
  if (v11)
  {
    if (v8)
    {
      uint64_t v13 = a3;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v9);
      a3 = v13;
    }
  }
  *a3 = 0;
  a3[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int>(void *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, unsigned char *a4@<X8>)
{
  unint64_t v4 = a1[1];
  uint64_t v5 = *a1;
  unint64_t v6 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v4 >= v6 && v4 - v6 > 3)
  {
    unint64_t v8 = (unsigned int *)(v5 + v6);
    a1[2] = v8 + 1;
    if (v5)
    {
      uint64_t v16 = *v8 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int>(a1, a2, a3, (uint64_t)&v16, a4);
      return;
    }
    unint64_t v9 = v4;
    uint64_t v10 = 0;
  }
  else
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v11 = a1[3];
    if (v11)
    {
      uint64_t v13 = a1;
      uint64_t v15 = a4;
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v4);
        a1 = v13;
        a4 = v15;
        uint64_t v10 = *v13;
        unint64_t v9 = v13[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v12 = a1[3];
  if (v12)
  {
    if (v9)
    {
      uint64_t v14 = a4;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v10);
      a4 = v14;
    }
  }
  *a4 = 0;
  a4[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int>(void *a1@<X0>, uint64_t a2@<X1>, int *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v5 >= v7 && v5 - v7 > 3)
  {
    unint64_t v9 = (unsigned int *)(v6 + v7);
    a1[2] = v9 + 1;
    if (v6)
    {
      uint64_t v17 = *v9 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int,unsigned int>(a2, a3, a4, (int *)&v17, (uint64_t)a5);
      return;
    }
    unint64_t v10 = v5;
    uint64_t v11 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v14 = a1;
      uint64_t v16 = a5;
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v6, v5);
        a1 = v14;
        a5 = v16;
        uint64_t v11 = *v14;
        unint64_t v10 = v14[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13)
  {
    if (v10)
    {
      uint64_t v15 = a5;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      a5 = v15;
    }
  }
  *a5 = 0;
  a5[16] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,unsigned int,unsigned int,unsigned int>,void>::decode<IPC::Decoder,unsigned int,unsigned int,unsigned int,unsigned int>(uint64_t a1@<X1>, int *a2@<X2>, uint64_t a3@<X3>, int *a4@<X4>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 4) && *((unsigned char *)a2 + 4) && *(unsigned char *)(a3 + 4) && *((unsigned char *)a4 + 4))
  {
    int v5 = *a2;
    *(_DWORD *)a5 = *(_DWORD *)a1;
    *(_DWORD *)(a5 + 4) = v5;
    int v6 = *a4;
    *(_DWORD *)(a5 + 8) = *(_DWORD *)a3;
    *(_DWORD *)(a5 + 12) = v6;
    *(unsigned char *)(a5 + 16) = 1;
  }
  else
  {
    __break(1u);
  }
}

uint64_t IPC::Decoder::decode<std::tuple<int,int,int,int>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26)
    {
      uint64_t v31 = a2;
      uint64_t v33 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v3);
        a2 = v31;
        uint64_t result = v33;
        uint64_t v25 = *v31;
        unint64_t v24 = v31[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27 && v24)
    {
      char v30 = a2;
      uint64_t v32 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v25, v24);
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  int v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v24 = v2;
    uint64_t v25 = 0;
    goto LABEL_30;
  }
  unint64_t v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    int v9 = *v6;
    a2[2] = v3 + v7 + 4;
    uint64_t v11 = v3 + v7 + 7;
    int v10 = *(_DWORD *)(v3 + v7);
    unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      a2[2] = v3 + v12 + 4;
      uint64_t v15 = v3 + v12 + 7;
      int v14 = *(_DWORD *)(v3 + v12);
      unint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFFCLL) - v3;
      if (v2 >= v16 && v2 - v16 > 3)
      {
        int v18 = (int *)(v3 + v16);
        int v19 = *v18;
        a2[2] = v18 + 1;
        *(_DWORD *)uint64_t result = v9;
        *(_DWORD *)(result + 4) = v10;
        *(_DWORD *)(result + 8) = v14;
        *(_DWORD *)(result + 12) = v19;
        *(unsigned char *)(result + 16) = 1;
        return result;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v20 = a2[3];
  if (v20)
  {
    if (v2)
    {
      char v30 = a2;
      uint64_t v32 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v3);
      a2 = v30;
      uint64_t result = v32;
      uint64_t v22 = *v30;
      uint64_t v21 = v30[1];
      uint64_t v23 = v30[3];
      void *v30 = 0;
      v30[1] = 0;
      if (v23)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v22);
LABEL_38:
          a2 = v30;
          uint64_t result = v32;
        }
      }
    }
  }
LABEL_31:
  *(unsigned char *)uint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v28 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v28)
  {
    uint64_t v29 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v29();
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,float>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      unint64_t v24 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        a1 = v24;
        uint64_t v18 = *v24;
        unint64_t v17 = v24[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20 && v17)
    {
      uint64_t v23 = a1;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  int v5 = (unsigned int *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    unint64_t v17 = v1;
    uint64_t v18 = 0;
    goto LABEL_24;
  }
  unint64_t v6 = (((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v6 && v1 - v6 > 3)
  {
    uint64_t v8 = *v5;
    int v9 = (unsigned int *)(v2 + v6);
    a1[2] = v9 + 1;
    unint64_t v10 = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v10 && v1 - v10 > 3)
    {
      a1[2] = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      return v8 | ((unint64_t)*v9 << 32);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13)
  {
    if (v1)
    {
      uint64_t v23 = a1;
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
      a1 = v23;
      uint64_t v14 = *v23;
      uint64_t v15 = v23[1];
      uint64_t v16 = v23[3];
      void *v23 = 0;
      v23[1] = 0;
      if (v16)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
LABEL_31:
          a1 = v23;
        }
      }
    }
  }
LABEL_25:
  uint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t result = a1[3];
  if (result)
  {
    if (v22) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v21);
    }
    return 0;
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,int>>(void *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 < v3 || v1 - v3 <= 3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v19 = a1[3];
    if (v19)
    {
      unint64_t v24 = a1;
      if (v1)
      {
        (*(void (**)(uint64_t))(*(void *)v19 + 16))(v19);
        a1 = v24;
        uint64_t v18 = *v24;
        unint64_t v17 = v24[1];
      }
      else
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
      }
    }
LABEL_24:
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20 && v17)
    {
      uint64_t v23 = a1;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v18, v17);
      goto LABEL_31;
    }
    goto LABEL_25;
  }
  int v5 = (unsigned int *)(v2 + v3);
  a1[2] = v5 + 1;
  if (!v2)
  {
    unint64_t v17 = v1;
    uint64_t v18 = 0;
    goto LABEL_24;
  }
  unint64_t v6 = (((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
  if (v1 >= v6 && v1 - v6 > 3)
  {
    uint64_t v8 = *v5;
    int v9 = (unsigned int *)(v2 + v6);
    a1[2] = v9 + 1;
    unint64_t v10 = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v2;
    if (v1 >= v10 && v1 - v10 > 3)
    {
      a1[2] = (((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      return v8 | ((unint64_t)*v9 << 32);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v13 = a1[3];
  if (v13)
  {
    if (v1)
    {
      uint64_t v23 = a1;
      (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
      a1 = v23;
      uint64_t v14 = *v23;
      uint64_t v15 = v23[1];
      uint64_t v16 = v23[3];
      void *v23 = 0;
      v23[1] = 0;
      if (v16)
      {
        if (v15)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
LABEL_31:
          a1 = v23;
        }
      }
    }
  }
LABEL_25:
  uint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  unint64_t result = a1[3];
  if (result)
  {
    if (v22) {
      (*(void (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v21);
    }
    return 0;
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<int,std::span<float const,18446744073709551615ul>>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v5, v4);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_10;
  }
  uint64_t v8 = (int *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    }
    goto LABEL_11;
  }
  int v9 = *v8;
  unint64_t result = IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_DWORD *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (void *)*((void *)a2 + 3);
  if (result && v15)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v16();
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<int,std::span<int const,18446744073709551615ul>>>(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  uint64_t v5 = *a2;
  unint64_t v6 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v5, v4);
        uint64_t v12 = *a2;
        uint64_t v11 = a2[1];
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_10;
  }
  uint64_t v8 = (int *)(v5 + v6);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    }
    goto LABEL_11;
  }
  int v9 = *v8;
  unint64_t result = IPC::Decoder::decode<std::span<int const,18446744073709551615ul>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_DWORD *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v15)
  {
    uint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v16();
  }
  return result;
}

void *IPC::Decoder::decode<std::tuple<int,BOOL,std::span<float const,18446744073709551615ul>>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = (*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - v5;
  if (v6 < v7 || v6 - v7 <= 3)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v15 = *((void *)a2 + 3);
    if (v15)
    {
      if (!v6) {
        goto LABEL_29;
      }
LABEL_27:
      (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
      uint64_t v14 = *(void *)a2;
      unint64_t v13 = *((void *)a2 + 1);
    }
LABEL_15:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v17 = *((void *)a2 + 3);
    if (v17 && v13) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v14, v13);
    }
    goto LABEL_16;
  }
  int v9 = (int *)(v5 + v7);
  *((void *)a2 + 2) = v9 + 1;
  if (!v5) {
    goto LABEL_28;
  }
  if (v6 <= (unint64_t)v9 - v5 + 4)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (!v6)
      {
LABEL_29:
        unint64_t v13 = 0;
        uint64_t v14 = 0;
        goto LABEL_15;
      }
      (*(void (**)(uint64_t))(*(void *)v16 + 16))(v16);
      unint64_t v13 = 0;
      uint64_t v20 = *((void *)a2 + 1);
      uint64_t v15 = *((void *)a2 + 3);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v14 = 0;
      if (v15)
      {
        if (v20) {
          goto LABEL_27;
        }
      }
    }
    goto LABEL_15;
  }
  int v10 = *v9;
  *((void *)a2 + 2) = (char *)v9 + 5;
  unsigned int v11 = *((unsigned __int8 *)v9 + 4);
  if (v11 >= 2)
  {
LABEL_28:
    unint64_t v13 = v6;
    uint64_t v14 = v5;
    goto LABEL_15;
  }
  unint64_t result = IPC::Decoder::decode<std::span<float const,18446744073709551615ul>>(a2, (uint64_t)&v21);
  if (v22)
  {
    *(_DWORD *)a1 = v10;
    *(unsigned char *)(a1 + 4) = v11 != 0;
    *(_OWORD *)(a1 + 8) = v21;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
LABEL_16:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v18 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (void *)*((void *)a2 + 3);
  if (result && v18)
  {
    uint64_t v19 = *(uint64_t (**)(void))(*result + 16);
    return (void *)v19();
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned int,int,int>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v30 = a2[3];
    if (v30)
    {
      uint64_t v35 = a2;
      uint64_t v37 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v3);
        a2 = v35;
        unint64_t result = v37;
        uint64_t v29 = *v35;
        unint64_t v28 = v35[1];
      }
      else
      {
        unint64_t v28 = 0;
        uint64_t v29 = 0;
      }
    }
LABEL_35:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v31 = a2[3];
    if (v31 && v28)
    {
      uint64_t v34 = a2;
      uint64_t v36 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v29, v28);
      goto LABEL_43;
    }
    goto LABEL_36;
  }
  unint64_t v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v28 = v2;
    uint64_t v29 = 0;
    goto LABEL_35;
  }
  unint64_t v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    int v9 = *v6;
    a2[2] = v3 + v7 + 4;
    uint64_t v11 = v3 + v7 + 7;
    int v10 = *(_DWORD *)(v3 + v7);
    unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      a2[2] = v3 + v12 + 4;
      uint64_t v15 = v3 + v12 + 7;
      int v14 = *(_DWORD *)(v3 + v12);
      unint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFFCLL) - v3;
      if (v2 >= v16 && v2 - v16 > 3)
      {
        a2[2] = v3 + v16 + 4;
        uint64_t v19 = v3 + v16 + 7;
        int v18 = *(_DWORD *)(v3 + v16);
        unint64_t v20 = (v19 & 0xFFFFFFFFFFFFFFFCLL) - v3;
        if (v2 >= v20 && v2 - v20 > 3)
        {
          char v22 = (int *)(v3 + v20);
          int v23 = *v22;
          a2[2] = v22 + 1;
          *(_DWORD *)unint64_t result = v9;
          *(_DWORD *)(result + 4) = v10;
          *(_DWORD *)(result + 8) = v14;
          *(_DWORD *)(result + 12) = v18;
          *(_DWORD *)(result + 16) = v23;
          *(unsigned char *)(result + 20) = 1;
          return result;
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v24 = a2[3];
  if (v24)
  {
    if (v2)
    {
      uint64_t v34 = a2;
      uint64_t v36 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v3);
      a2 = v34;
      unint64_t result = v36;
      uint64_t v26 = *v34;
      uint64_t v25 = v34[1];
      uint64_t v27 = v34[3];
      void *v34 = 0;
      v34[1] = 0;
      if (v27)
      {
        if (v25)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v26);
LABEL_43:
          a2 = v34;
          unint64_t result = v36;
        }
      }
    }
  }
LABEL_36:
  *(unsigned char *)unint64_t result = 0;
  *(unsigned char *)(result + 20) = 0;
  uint64_t v32 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v32)
  {
    uint64_t v33 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v33();
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::tuple<int,std::span<unsigned int const,18446744073709551615ul>>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t v4 = *((void *)a2 + 1);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = ((*((void *)a2 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)a2;
  if (v4 < v6 || v4 - v6 <= 3)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v4)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v5, v4);
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_10;
  }
  uint64_t v8 = (int *)(v5 + v6);
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v11 = v4;
    uint64_t v12 = 0;
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v11) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v12);
    }
    goto LABEL_11;
  }
  int v9 = *v8;
  unint64_t result = IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>(a2, (uint64_t)&v17);
  if (v18)
  {
    *(_DWORD *)a1 = v9;
    *(_OWORD *)(a1 + 8) = v17;
    *(unsigned char *)(a1 + 24) = 1;
    return result;
  }
LABEL_11:
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v15 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = *((void *)a2 + 3);
  if (result && v15)
  {
    unint64_t v16 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v16();
  }
  return result;
}

unint64_t IPC::Decoder::decode<std::span<int const,4ul>>(uint64_t *a1)
{
  unint64_t result = IPC::ArgumentCoder<std::span<int const,4ul>,void>::decode<IPC::Decoder>(a1);
  if (!v3)
  {
    uint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v6 = a1[3];
    if (v6) {
      BOOL v7 = v4 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      unint64_t v8 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v5);
      return v8;
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<int const,4ul>,void>::decode<IPC::Decoder>(uint64_t *a1)
{
  unint64_t v1 = a1[1];
  uint64_t v2 = *a1;
  unint64_t v3 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v1 >= v3 && v1 - v3 > 0xF)
  {
    uint64_t v5 = v2 + v3;
    a1[2] = v5 + 16;
    if (!v2)
    {
LABEL_11:
      uint64_t v7 = 0;
      unint64_t v6 = 0;
      return v6 | v7;
    }
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFF00;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v6 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v8 = a1[3];
    if (v8)
    {
      if (v1) {
        (*(void (**)(uint64_t))(*(void *)v8 + 16))(v8);
      }
      goto LABEL_11;
    }
  }
  return v6 | v7;
}

unint64_t IPC::Decoder::decode<std::tuple<std::span<unsigned int const,18446744073709551615ul>>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<std::span<unsigned int const,18446744073709551615ul>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *(void *)a1;
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    unint64_t result = *((void *)a1 + 3);
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WebCore::DestinationColorSpace>>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  IPC::Decoder::decode<WebCore::DestinationColorSpace>(a1, a2, (uint64_t)&v9);
  if (v10)
  {
    *(void *)a3 = v9;
    *(unsigned char *)(a3 + 8) = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v7 = a1[3];
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5);
    }
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEN6WebKit23RemoteGraphicsContextGLES8_FvONS2_9SemaphoreEONS_17CompletionHandlerIFvONS_13MachSendRightEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC6E0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEN6WebKit23RemoteGraphicsContextGLES8_FvONS2_9SemaphoreEONS_17CompletionHandlerIFvONS_13MachSendRightEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC6E0;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17PrepareForDisplayEN6WebKit23RemoteGraphicsContextGLES8_FvONS2_9SemaphoreEONS_17CompletionHandlerIFvONS_13MachSendRightEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, unint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v12, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v12);
  if (!*(unsigned char *)(a1 + 16))
  {
    __break(1u);
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2872;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  IPC::Encoder::addAttachment((uint64_t)v7, a2);
  if (*(unsigned char *)(v5 + 120))
  {
    unint64_t v11 = v7;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v11);
    unint64_t result = v11;
    if (!v11) {
      return result;
    }
LABEL_6:
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v12, 0, 0);
  unint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    goto LABEL_6;
  }
  return result;
}

IPC::Encoder **std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100](IPC::Encoder **a1, IPC::Encoder **a2)
{
  unint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    IPC::Encoder::~Encoder(v4, a2);
    WTF::fastFree(v6, v7);
  }
  return a1;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetErrorsEN6WebKit23RemoteGraphicsContextGLES8_FvONS_17CompletionHandlerIFvNS_9OptionSetI13GCGLErrorCodeEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC708;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetErrorsEN6WebKit23RemoteGraphicsContextGLES8_FvONS_17CompletionHandlerIFvNS_9OptionSetI13GCGLErrorCodeEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC708;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetErrorsEN6WebKit23RemoteGraphicsContextGLES8_FvONS_17CompletionHandlerIFvNS_9OptionSetI13GCGLErrorCodeEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  int v23 = v16;
  long long v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A6A5A8);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    char v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  int v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferENS_23ObjectIdentifierGenericINS9_31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC730;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferENS_23ObjectIdentifierGenericINS9_31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC730;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30DrawSurfaceBufferToImageBufferEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferENS_23ObjectIdentifierGenericINS9_31RenderingResourceIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEONS_17CompletionHandlerIFvvEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v20, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v20);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_25;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v1 + 120))
  {
    uint64_t v7 = *(void *)(v1 + 56);
    uint64_t v6 = *(void *)(v1 + 64);
    unint64_t v5 = *(void *)(v6 + 8);
    if (v7 != 1)
    {
      BOOL v8 = v5 >= 0x100;
      v5 -= 256;
      if (!v8) {
        goto LABEL_25;
      }
      uint64_t v9 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v8 = v5 >= v7 - 1;
        unint64_t v5 = v7 - 1;
        if (!v8) {
          goto LABEL_25;
        }
      }
      uint64_t v10 = v9 + 256;
      unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
      if (v11 < v9 + 256) {
        goto LABEL_26;
      }
      goto LABEL_10;
    }
    if (v5 <= 0xFF)
    {
LABEL_25:
      __break(1u);
LABEL_26:
      if (v5) {
        return result;
      }
      goto LABEL_16;
    }
    uint64_t v9 = *(void *)(v6 + 16);
    uint64_t v10 = v9 + 256;
    unint64_t v11 = (v9 + 257) & 0xFFFFFFFFFFFFFFFELL;
    if (v11 >= v9 + 256)
    {
      unint64_t v5 = 0;
LABEL_10:
      unint64_t v12 = v11 - v10;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL && v12 + 2 <= v5)
      {
        uint64_t v14 = v9 + 256;
        *(_WORD *)(v14 + v12) = 2872;
        if (v5) {
          return result;
        }
        *(_WORD *)(v14 + v12) = 2870;
      }
    }
  }
LABEL_16:
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v15 = 2872;
  *((void *)v15 + 1) = v2;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  unint64_t v20 = v15;
  if (*(unsigned char *)(v1 + 120))
  {
    uint64_t v19 = v15;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v1 + 128), &v19);
    unint64_t result = v19;
    if (!v19) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v1 + 40), (uint64_t *)&v20, 0, 0);
    unint64_t result = v20;
    unint64_t v20 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v16);
  return (IPC::Encoder *)WTF::fastFree(v17, v18);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC758;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC758;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25SurfaceBufferToVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore30GraphicsContextGLSurfaceBufferEONS_17CompletionHandlerIFvONSt3__18optionalINS7_31RemoteVideoFrameProxyPropertiesEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v12 = (IPC::Encoder *)(v11 + 256);
    char v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>&>((uint64_t *)&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>&>((uint64_t *)&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  long long v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  char v22 = v17;
  IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::Encoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>>(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    long long v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    char v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

uint64_t *IPC::ArgumentCoder<std::optional<WebKit::RemoteVideoFrameProxyProperties>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebKit::RemoteVideoFrameProxyProperties>&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 56))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 56))
      {
        uint64_t v4 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
        return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(v4);
      }
    }
    return IPC::ArgumentCoder<WebKit::RemoteVideoFrameProxyProperties,void>::encode(result, a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC7A0;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC7A0;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25CopyTextureFromVideoFrameEN6WebKit23RemoteGraphicsContextGLES8_FvONS7_16SharedVideoFrameEjjijjjbbONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  unint64_t v23 = v16;
  long long v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A6AE98);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    char v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  unint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEN6WebKit23RemoteGraphicsContextGLES8_FvjymONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC7C8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEN6WebKit23RemoteGraphicsContextGLES8_FvjymONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC7C8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22GetBufferSubDataInlineEN6WebKit23RemoteGraphicsContextGLES8_FvjymONS_17CompletionHandlerIFvNSt3__14spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, size_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v14 = (IPC::Encoder *)(v13 + 256);
    unint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    uint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  unint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    unint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    unint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvjymN7WebCore18SharedMemoryHandleEONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC7F0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvjymN7WebCore18SharedMemoryHandleEONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC7F0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL28GetBufferSubDataSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvjymN7WebCore18SharedMemoryHandleEONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  unint64_t v23 = v16;
  long long v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A6B464);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    char v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  unint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEENSC_4spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SI_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC818;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEENSC_4spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SI_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC818;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16ReadPixelsInlineEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEENSC_4spanIKhLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSF_SI_EE4callESF_SI_(unint64_t a1, uint64_t a2, int a3, const void *a4, size_t a5)
{
  unint64_t v11 = a1;
  uint64_t v26 = a2;
  int v27 = a3;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v29, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v29);
  if (!*(unsigned char *)(v11 + 16)) {
    goto LABEL_29;
  }
  uint64_t v5 = *(void *)(v11 + 24);
  uint64_t v6 = *(void *)(v11 + 8);
  if (!*(unsigned char *)(v5 + 120)) {
    goto LABEL_22;
  }
  uint64_t v13 = *(void *)(v5 + 56);
  uint64_t v12 = *(void *)(v5 + 64);
  unint64_t v14 = *(void *)(v12 + 8);
  if (v13 == 1)
  {
    if (v14 < 0x100)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      unint64_t v30 = 0;
      goto LABEL_15;
    }
    unint64_t v11 = 0;
    uint64_t v15 = *(void *)(v12 + 16);
  }
  else
  {
    unint64_t v11 = v14 - 256;
    if (v14 < 0x100) {
      goto LABEL_29;
    }
    uint64_t v15 = *(void *)(v12 + 16);
    if (v13)
    {
      BOOL v16 = v11 >= v13 - 1;
      unint64_t v11 = v13 - 1;
      if (!v16) {
        goto LABEL_29;
      }
    }
  }
  unint64_t v7 = v15 + 256;
  uint64_t v29 = (IPC::Encoder *)(v15 + 256);
  unint64_t v30 = v11;
  unint64_t v31 = 0;
  unint64_t v8 = (_WORD *)((v15 + 257) & 0xFFFFFFFFFFFFFFFELL);
  BOOL v16 = (unint64_t)v8 >= v15 + 256;
  unint64_t v17 = (unint64_t)v8 - v15 - 256;
  if (!v16) {
    goto LABEL_15;
  }
  if (v17 > 0xFFFFFFFFFFFFFFFDLL || v17 + 2 > v11) {
    goto LABEL_30;
  }
  *(_WORD *)(v7 + v17) = 2872;
  unint64_t v31 = v17 + 2;
LABEL_15:
  IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>((uint64_t *)&v29, (uint64_t)&v26);
  unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v29, a4, a5);
  if (v30) {
    return result;
  }
  unint64_t v20 = (unint64_t)v8 - v7;
  if ((unint64_t)v8 >= v7 && v20 <= 0xFFFFFFFFFFFFFFFDLL && v20 + 2 <= v11) {
    *unint64_t v8 = 2870;
  }
LABEL_22:
  char v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v22 = 2872;
  *((void *)v22 + 1) = v6;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 68) = 0;
  *((void *)v22 + 70) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  uint64_t v29 = v22;
  IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>(v22, (uint64_t)&v26);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v22, a4, a5);
  if (*(unsigned char *)(v5 + 120))
  {
    unint64_t v28 = v22;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v28);
    unint64_t result = v28;
    if (!v28) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v24, v25);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v29, 0, 0);
  unint64_t result = v29;
  uint64_t v29 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>(uint64_t *result, uint64_t a2)
{
  unint64_t v3 = result[1];
  unint64_t v2 = result[2];
  if (*(unsigned char *)(a2 + 8))
  {
    if (v2 >= v3)
    {
      result[1] = 0;
    }
    else
    {
      *(unsigned char *)(*result + v2) = 1;
      result[2] = v2 + 1;
      if (!*(unsigned char *)(a2 + 8))
      {
        uint64_t v4 = std::__throw_bad_optional_access[abi:sn180100]();
        return (uint64_t *)IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>(v4);
      }
    }
    return IPC::StreamConnectionEncoder::operator<<<WebCore::IntPoint>(result, (_DWORD *)a2);
  }
  else if (v2 >= v3)
  {
    result[1] = 0;
  }
  else
  {
    *(unsigned char *)(*result + v2) = 0;
    result[2] = v2 + 1;
  }
  return result;
}

void *IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>(IPC::Encoder *a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 8);
  unint64_t result = (void *)IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A6B8ACLL);
    }
    *(unsigned char *)unint64_t result = 1;
    if (*(unsigned char *)(a2 + 8))
    {
      return (void *)IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(a1, (int *)a2);
    }
    else
    {
      unint64_t v7 = (void *)std::__throw_bad_optional_access[abi:sn180100]();
      return _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(v7);
    }
  }
  else
  {
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x198A6B8CCLL);
    }
    *(unsigned char *)unint64_t result = 0;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC840;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC840;
  unint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22ReadPixelsSharedMemoryEN6WebKit23RemoteGraphicsContextGLES8_FvN7WebCore7IntRectEjjbNS9_18SharedMemoryHandleEONS_17CompletionHandlerIFvNSt3__18optionalINS9_7IntSizeEEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v21 = a2;
  int v22 = a3;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v7 = *(void *)(v3 + 56);
    uint64_t v6 = *(void *)(v3 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v12 = (IPC::Encoder *)(v11 + 256);
    unint64_t v24 = v12;
    unint64_t v25 = v10;
    unint64_t v26 = 0;
    uint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>((uint64_t *)&v24, (uint64_t)&v21);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v13 = 2872;
    unint64_t v26 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::StreamConnectionEncoder,std::optional<WebCore::IntSize>&>((uint64_t *)&v24, (uint64_t)&v21);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 2872;
  *((void *)v17 + 1) = v4;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  unint64_t v24 = v17;
  IPC::ArgumentCoder<std::optional<WebCore::IntSize>,void>::encode<IPC::Encoder,std::optional<WebCore::IntSize>>(v17, (uint64_t)&v21);
  if (*(unsigned char *)(v3 + 120))
  {
    unint64_t v23 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    unint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC868;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC868;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL22CheckFramebufferStatusEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  unint64_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A6BEBCLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  unint64_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC890;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC890;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetActiveAttribEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EE4callEbSC_(uint64_t a1, char a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_32;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v6 + 120)) {
    goto LABEL_24;
  }
  uint64_t v9 = *(void *)(v6 + 56);
  uint64_t v8 = *(void *)(v6 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    unint64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 16);
  }
  else
  {
    unint64_t v11 = v10 - 256;
    if (v10 < 0x100) {
      goto LABEL_32;
    }
    uint64_t v12 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v13 = v11 >= v9 - 1;
      unint64_t v11 = v9 - 1;
      if (!v13) {
        goto LABEL_32;
      }
    }
  }
  unint64_t v14 = v12 + 256;
  unint64_t v30 = (IPC::Encoder *)(v12 + 256);
  unint64_t v31 = v11;
  unint64_t v32 = 0;
  unint64_t v15 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v16 = (unint64_t)v15 - v12 - 256;
  if ((unint64_t)v15 < v12 + 256)
  {
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v17 = v16 + 2;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v11)
    {
      unint64_t v19 = 0;
      unint64_t v17 = 0;
      unint64_t v31 = 0;
      goto LABEL_15;
    }
    *(_WORD *)(v14 + v16) = 2872;
    unint64_t v32 = v16 + 2;
  }
  unint64_t v19 = v11;
LABEL_15:
  if (v17 >= v19)
  {
    unint64_t v31 = 0;
  }
  else
  {
    *(unsigned char *)(v14 + v17) = a2;
    unint64_t v32 = v17 + 1;
  }
  unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v30, a3);
  if (v31) {
    return result;
  }
  unint64_t v21 = (unint64_t)v15 - v14;
  if ((unint64_t)v15 >= v14 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
    _WORD *v15 = 2870;
  }
LABEL_24:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v7;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  unint64_t v30 = v23;
  unint64_t v24 = (unsigned char *)IPC::Encoder::grow(v23, 1uLL, 1);
  if (!v25)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x198A6C204);
  }
  unsigned char *v24 = a2;
  IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(v23, a3);
  if (*(unsigned char *)(v6 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v6 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_29:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v6 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  unint64_t v30 = 0;
  if (result) {
    goto LABEL_29;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC8B8;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC8B8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetActiveUniformEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvbON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbSC_EE4callEbSC_(uint64_t a1, char a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_32;
  }
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v6 + 120)) {
    goto LABEL_24;
  }
  uint64_t v9 = *(void *)(v6 + 56);
  uint64_t v8 = *(void *)(v6 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    unint64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 16);
  }
  else
  {
    unint64_t v11 = v10 - 256;
    if (v10 < 0x100) {
      goto LABEL_32;
    }
    uint64_t v12 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v13 = v11 >= v9 - 1;
      unint64_t v11 = v9 - 1;
      if (!v13) {
        goto LABEL_32;
      }
    }
  }
  unint64_t v14 = v12 + 256;
  unint64_t v30 = (IPC::Encoder *)(v12 + 256);
  unint64_t v31 = v11;
  unint64_t v32 = 0;
  unint64_t v15 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v16 = (unint64_t)v15 - v12 - 256;
  if ((unint64_t)v15 < v12 + 256)
  {
    unint64_t v17 = 0;
  }
  else
  {
    unint64_t v17 = v16 + 2;
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v17 > v11)
    {
      unint64_t v19 = 0;
      unint64_t v17 = 0;
      unint64_t v31 = 0;
      goto LABEL_15;
    }
    *(_WORD *)(v14 + v16) = 2872;
    unint64_t v32 = v16 + 2;
  }
  unint64_t v19 = v11;
LABEL_15:
  if (v17 >= v19)
  {
    unint64_t v31 = 0;
  }
  else
  {
    *(unsigned char *)(v14 + v17) = a2;
    unint64_t v32 = v17 + 1;
  }
  unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v30, a3);
  if (v31) {
    return result;
  }
  unint64_t v21 = (unint64_t)v15 - v14;
  if ((unint64_t)v15 >= v14 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
    _WORD *v15 = 2870;
  }
LABEL_24:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v7;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  unint64_t v30 = v23;
  unint64_t v24 = (unsigned char *)IPC::Encoder::grow(v23, 1uLL, 1);
  if (!v25)
  {
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x198A6C558);
  }
  unsigned char *v24 = a2;
  IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(v23, a3);
  if (*(unsigned char *)(v6 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v6 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_29:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v6 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  unint64_t v30 = 0;
  if (result) {
    goto LABEL_29;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC8E0;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC8E0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetAttribLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        unint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  unint64_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A6C88CLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  unint64_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC908;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC908;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetBufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        unint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  unint64_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A6CBB4);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  unint64_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetStringEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC930;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetStringEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC930;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetStringEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v12 = (IPC::Encoder *)(v11 + 256);
    int v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  int v22 = v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    int v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned long>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      unint64_t v23 = a2;
      uint64_t v25 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v3);
        a2 = v23;
        unint64_t result = v25;
        uint64_t v13 = *v23;
        unint64_t v12 = v23[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
LABEL_15:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15 && v12)
    {
      int v22 = a2;
      uint64_t v24 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
LABEL_30:
      a2 = v22;
      unint64_t result = v24;
      goto LABEL_19;
    }
    goto LABEL_19;
  }
  uint64_t v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v12 = v2;
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  unint64_t v7 = (((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8) - v3;
  if (v2 >= v7 && v2 - v7 > 7)
  {
    BOOL v9 = (uint64_t *)(((unint64_t)v6 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v10 = *v9;
    int v11 = *v6;
    a2[2] = v9 + 1;
    *(_DWORD *)unint64_t result = v11;
    *(void *)(result + 8) = v10;
    *(unsigned char *)(result + 16) = 1;
    return result;
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      int v22 = a2;
      uint64_t v24 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v3);
      a2 = v22;
      unint64_t result = v24;
      uint64_t v20 = *v22;
      uint64_t v19 = v22[1];
      uint64_t v21 = v22[3];
      void *v22 = 0;
      v22[1] = 0;
      if (v21)
      {
        if (v19)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v20);
          goto LABEL_30;
        }
      }
    }
  }
LABEL_19:
  *(unsigned char *)unint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v17)
  {
    unint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetFloatvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC958;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetFloatvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC958;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9GetFloatvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v14 = (IPC::Encoder *)(v13 + 256);
    uint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    uint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  uint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    unint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    uint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetIntegervEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC980;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetIntegervEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC980;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetIntegervEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v14 = (IPC::Encoder *)(v13 + 256);
    uint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    uint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  uint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    unint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    uint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm4EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC9A8;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm4EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC9A8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetIntegeri_vEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm4EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, _OWORD *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v25, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25);
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v9 = *(void *)(v8 + 8);
  unint64_t v7 = v10 - 1;
  if (v10 != 1)
  {
    BOOL v11 = v9 >= 0x100;
    v9 -= 256;
    if (!v11) {
      goto LABEL_37;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v10)
    {
      BOOL v11 = v9 >= v7;
      unint64_t v9 = v10 - 1;
      if (!v11) {
        goto LABEL_37;
      }
    }
LABEL_9:
    unint64_t v7 = v8 + 256;
    unint64_t v8 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = v8 - v7;
    if (v8 < v7)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = v12 + 2;
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v9) {
        goto LABEL_38;
      }
      *(_WORD *)unint64_t v8 = 2872;
    }
    unint64_t v15 = v9;
    goto LABEL_16;
  }
  if (v9 >= 0x100)
  {
    unint64_t v9 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
    goto LABEL_9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  unint64_t v15 = 0;
  unint64_t v13 = 0;
LABEL_16:
  unint64_t v16 = (_OWORD *)((v7 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 < v7 + v13) {
    goto LABEL_22;
  }
  if ((unint64_t)v16 - v7 <= 0xFFFFFFFFFFFFFFEFLL && (unint64_t)v16 - v7 + 16 <= v15)
  {
    _OWORD *v16 = *a2;
LABEL_22:
    if (v15) {
      return result;
    }
  }
  BOOL v11 = v8 >= v7;
  unint64_t v18 = v8 - v7;
  if (v11 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v9) {
    *(_WORD *)(v7 + v18) = 2870;
  }
LABEL_30:
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 2872;
  *((void *)v20 + 1) = v3;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v25 = v20;
  IPC::ArgumentCoder<std::span<int const,4ul>,void>::encode<IPC::Encoder>(v20, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v24 = v20;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v24);
    unint64_t result = v24;
    if (!v24) {
      return result;
    }
LABEL_34:
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v25, 0, 0);
  unint64_t result = v25;
  unint64_t v25 = 0;
  if (result) {
    goto LABEL_34;
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::span<int const,4ul>,void>::encode<IPC::Encoder>(IPC::Encoder *a1, _OWORD *a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 4uLL, 16);
  if (v4 <= 0xF)
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *(_OWORD *)unint64_t result = *a2;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetInteger64EN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC9D0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetInteger64EN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC9D0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetInteger64EN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v25, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25);
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v9 = *(void *)(v8 + 8);
  unint64_t v7 = v10 - 1;
  if (v10 != 1)
  {
    BOOL v11 = v9 >= 0x100;
    v9 -= 256;
    if (!v11) {
      goto LABEL_37;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v10)
    {
      BOOL v11 = v9 >= v7;
      unint64_t v9 = v10 - 1;
      if (!v11) {
        goto LABEL_37;
      }
    }
LABEL_9:
    unint64_t v7 = v8 + 256;
    unint64_t v8 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = v8 - v7;
    if (v8 < v7)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = v12 + 2;
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v9) {
        goto LABEL_38;
      }
      *(_WORD *)unint64_t v8 = 2872;
    }
    unint64_t v15 = v9;
    goto LABEL_16;
  }
  if (v9 >= 0x100)
  {
    unint64_t v9 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
    goto LABEL_9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  unint64_t v15 = 0;
  unint64_t v13 = 0;
LABEL_16:
  unint64_t v16 = (void *)((v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v16 < v7 + v13) {
    goto LABEL_22;
  }
  if ((unint64_t)v16 - v7 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t)v16 - v7 + 8 <= v15)
  {
    void *v16 = a2;
LABEL_22:
    if (v15) {
      return result;
    }
  }
  BOOL v11 = v8 >= v7;
  unint64_t v18 = v8 - v7;
  if (v11 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v9) {
    *(_WORD *)(v7 + v18) = 2870;
  }
LABEL_30:
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 2872;
  *((void *)v20 + 1) = v3;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v25 = v20;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v20, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v24 = v20;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v24);
    unint64_t result = v24;
    if (!v24) {
      return result;
    }
LABEL_34:
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v25, 0, 0);
  unint64_t result = v25;
  unint64_t v25 = 0;
  if (result) {
    goto LABEL_34;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetInteger64iEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BC9F8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetInteger64iEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BC9F8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetInteger64iEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v25, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25);
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v9 = *(void *)(v8 + 8);
  unint64_t v7 = v10 - 1;
  if (v10 != 1)
  {
    BOOL v11 = v9 >= 0x100;
    v9 -= 256;
    if (!v11) {
      goto LABEL_37;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v10)
    {
      BOOL v11 = v9 >= v7;
      unint64_t v9 = v10 - 1;
      if (!v11) {
        goto LABEL_37;
      }
    }
LABEL_9:
    unint64_t v7 = v8 + 256;
    unint64_t v8 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = v8 - v7;
    if (v8 < v7)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = v12 + 2;
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v9) {
        goto LABEL_38;
      }
      *(_WORD *)unint64_t v8 = 2872;
    }
    unint64_t v15 = v9;
    goto LABEL_16;
  }
  if (v9 >= 0x100)
  {
    unint64_t v9 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
    goto LABEL_9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  unint64_t v15 = 0;
  unint64_t v13 = 0;
LABEL_16:
  unint64_t v16 = (void *)((v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v16 < v7 + v13) {
    goto LABEL_22;
  }
  if ((unint64_t)v16 - v7 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t)v16 - v7 + 8 <= v15)
  {
    void *v16 = a2;
LABEL_22:
    if (v15) {
      return result;
    }
  }
  BOOL v11 = v8 >= v7;
  unint64_t v18 = v8 - v7;
  if (v11 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v9) {
    *(_WORD *)(v7 + v18) = 2870;
  }
LABEL_30:
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 2872;
  *((void *)v20 + 1) = v3;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v25 = v20;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v20, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v24 = v20;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v24);
    unint64_t result = v24;
    if (!v24) {
      return result;
    }
LABEL_34:
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v25, 0, 0);
  unint64_t result = v25;
  unint64_t v25 = 0;
  if (result) {
    goto LABEL_34;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetProgramiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCA20;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetProgramiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCA20;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetProgramiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    uint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  unint64_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A6E2FCLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  unint64_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetBooleanvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKbLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCA48;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetBooleanvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKbLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCA48;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL11GetBooleanvEN6WebKit23RemoteGraphicsContextGLES8_FvjmONS_17CompletionHandlerIFvNSt3__14spanIKbLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, size_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v35, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v35);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_42;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v7 + 120))
  {
    uint64_t v10 = *(void *)(v7 + 56);
    uint64_t v9 = *(void *)(v7 + 64);
    unint64_t v11 = *(void *)(v9 + 8);
    if (v10 == 1)
    {
      if (v11 < 0x100)
      {
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v9 + 16);
    }
    else
    {
      unint64_t v12 = v11 - 256;
      if (v11 < 0x100) {
        goto LABEL_42;
      }
      uint64_t v13 = *(void *)(v9 + 16);
      if (v10)
      {
        BOOL v14 = v12 >= v10 - 1;
        unint64_t v12 = v10 - 1;
        if (!v14) {
          goto LABEL_42;
        }
      }
    }
    unint64_t v15 = v13 + 256;
    unint64_t v16 = (_WORD *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v17 = (unint64_t)v16 - v13 - 256;
    if ((unint64_t)v16 < v13 + 256)
    {
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v18 = v17 + 2;
      if (v17 > 0xFFFFFFFFFFFFFFFDLL || v18 > v12)
      {
        unint64_t v20 = 0;
        unint64_t v18 = 0;
LABEL_15:
        unint64_t v21 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v22 = v21 - (v15 + v18);
        if (v21 >= v15 + v18)
        {
          unint64_t v23 = v21 - v15;
          unint64_t v24 = v22 + v18 + 8;
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
          {
            unint64_t v20 = 0;
            if (!a3) {
              goto LABEL_25;
            }
            goto LABEL_22;
          }
          *(void *)(v15 + v23) = a3;
          unint64_t v18 = v24;
        }
        if (!a3) {
          goto LABEL_25;
        }
LABEL_22:
        if (__CFADD__(v18, a3) || v18 + a3 > v20)
        {
LABEL_26:
          unint64_t v26 = (unint64_t)v16 - v15;
          if ((unint64_t)v16 >= v15 && v26 <= 0xFFFFFFFFFFFFFFFDLL && v26 + 2 <= v12) {
            _WORD *v16 = 2870;
          }
          goto LABEL_32;
        }
        unint64_t result = (IPC::Encoder *)memcpy((void *)(v15 + v18), a2, a3);
LABEL_25:
        if (v20) {
          return result;
        }
        goto LABEL_26;
      }
      *(_WORD *)(v15 + v17) = 2872;
    }
    unint64_t v20 = v12;
    goto LABEL_15;
  }
LABEL_32:
  unint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v28 = 2872;
  *((void *)v28 + 1) = v8;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  uint64_t v35 = v28;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v28, a3);
  if (a3)
  {
    uint64_t v29 = (void *)IPC::Encoder::grow(v28, 1uLL, a3);
    if (v30 < a3)
    {
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x198A6E678);
    }
    memcpy(v29, a2, a3);
  }
  if (*(unsigned char *)(v7 + 120))
  {
    uint64_t v34 = v28;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v7 + 128), &v34);
    unint64_t result = v34;
    if (!v34) {
      return result;
    }
LABEL_39:
    IPC::Encoder::~Encoder(result, v31);
    return (IPC::Encoder *)WTF::fastFree(v32, v33);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v7 + 40), (uint64_t *)&v35, 0, 0);
  unint64_t result = v35;
  uint64_t v35 = 0;
  if (result) {
    goto LABEL_39;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCA70;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCA70;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL34GetFramebufferAttachmentParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    BOOL v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A6E9ACLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCA98;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCA98;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetProgramInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v12 = (IPC::Encoder *)(v11 + 256);
    unint64_t v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  unint64_t v22 = v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    unint64_t v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCAC0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCAC0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetRenderbufferParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A6EFB0);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10GetShaderiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCAE8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10GetShaderiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCAE8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10GetShaderiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A6F2D8);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCB10;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCB10;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetShaderInfoLogEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v12 = (IPC::Encoder *)(v11 + 256);
    unint64_t v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  unint64_t v22 = v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    unint64_t v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm2EEEiEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_iEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCB38;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm2EEEiEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_iEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCB38;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL24GetShaderPrecisionFormatEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvNSt3__14spanIKiLm2EEEiEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_iEE4callESD_i(uint64_t a1, void *a2, int a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v39, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v39);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_45;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v7 + 120))
  {
    uint64_t v10 = *(void *)(v7 + 56);
    uint64_t v9 = *(void *)(v7 + 64);
    unint64_t v11 = *(void *)(v9 + 8);
    if (v10 == 1)
    {
      if (v11 < 0x100)
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
      unint64_t v13 = 0;
      uint64_t v14 = *(void *)(v9 + 16);
    }
    else
    {
      BOOL v12 = v11 >= 0x100;
      unint64_t v13 = v11 - 256;
      if (!v12) {
        goto LABEL_45;
      }
      uint64_t v14 = *(void *)(v9 + 16);
      if (v10)
      {
        BOOL v12 = v13 >= v10 - 1;
        unint64_t v13 = v10 - 1;
        if (!v12) {
          goto LABEL_45;
        }
      }
    }
    unint64_t v15 = v14 + 256;
    unint64_t v16 = (_WORD *)((v14 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v17 = (unint64_t)v16 - v15;
    if ((unint64_t)v16 < v15)
    {
      unint64_t v18 = 0;
    }
    else
    {
      unint64_t v18 = v17 + 2;
      if (v17 > 0xFFFFFFFFFFFFFFFDLL || v18 > v13)
      {
        unint64_t v20 = 0;
        unint64_t v18 = 0;
LABEL_16:
        unint64_t v21 = (v15 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v22 = v21 - (v15 + v18);
        if (v21 >= v15 + v18)
        {
          unint64_t v23 = v21 - v15;
          unint64_t v24 = v22 + v18 + 8;
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v24 > v20)
          {
            unint64_t v20 = 0;
          }
          else
          {
            *(void *)(v15 + v23) = *a2;
            unint64_t v18 = v24;
          }
        }
        unint64_t v26 = (_DWORD *)((v15 + v18 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v26 >= v15 + v18)
        {
          if ((unint64_t)v26 - v15 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v26 - v15 + 4 > v20)
          {
LABEL_29:
            BOOL v12 = (unint64_t)v16 >= v15;
            unint64_t v28 = (unint64_t)v16 - v15;
            if (v12 && v28 <= 0xFFFFFFFFFFFFFFFDLL && v28 + 2 <= v13) {
              *(_WORD *)(v15 + v28) = 2870;
            }
            goto LABEL_36;
          }
          _DWORD *v26 = a3;
        }
        if (v20) {
          return result;
        }
        goto LABEL_29;
      }
      _WORD *v16 = 2872;
    }
    unint64_t v20 = v13;
    goto LABEL_16;
  }
LABEL_36:
  size_t v30 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)size_t v30 = 2872;
  *((void *)v30 + 1) = v8;
  *((void *)v30 + 66) = (char *)v30 + 16;
  *((void *)v30 + 67) = 512;
  *((void *)v30 + 68) = 0;
  *((void *)v30 + 70) = 0;
  *((void *)v30 + 69) = 0;
  IPC::Encoder::encodeHeader(v30);
  uint64_t v39 = v30;
  unint64_t v31 = (void *)IPC::Encoder::grow(v30, 4uLL, 8);
  if (v32 <= 7)
  {
LABEL_46:
    __break(0xC471u);
    JUMPOUT(0x198A6F93CLL);
  }
  void *v31 = *a2;
  uint64_t v33 = (_DWORD *)IPC::Encoder::grow(v30, 4uLL, 4);
  if (v34 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x198A6F95CLL);
  }
  _DWORD *v33 = a3;
  if (*(unsigned char *)(v7 + 120))
  {
    uint64_t v38 = v30;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v7 + 128), &v38);
    unint64_t result = v38;
    if (!v38) {
      return result;
    }
LABEL_42:
    IPC::Encoder::~Encoder(result, v35);
    return (IPC::Encoder *)WTF::fastFree(v36, v37);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v7 + 40), (uint64_t *)&v39, 0, 0);
  unint64_t result = v39;
  uint64_t v39 = 0;
  if (result) {
    goto LABEL_42;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCB60;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCB60;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetShaderSourceEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    BOOL v12 = (IPC::Encoder *)(v11 + 256);
    unint64_t v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  unint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  unint64_t v22 = v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    unint64_t v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCB88;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCB88;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEE4callEf(uint64_t a1, float a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v25, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25);
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v9 = *(void *)(v8 + 8);
  unint64_t v7 = v10 - 1;
  if (v10 != 1)
  {
    BOOL v11 = v9 >= 0x100;
    v9 -= 256;
    if (!v11) {
      goto LABEL_37;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v10)
    {
      BOOL v11 = v9 >= v7;
      unint64_t v9 = v10 - 1;
      if (!v11) {
        goto LABEL_37;
      }
    }
LABEL_9:
    unint64_t v7 = v8 + 256;
    unint64_t v8 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = v8 - v7;
    if (v8 < v7)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = v12 + 2;
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v9) {
        goto LABEL_38;
      }
      *(_WORD *)unint64_t v8 = 2872;
    }
    unint64_t v15 = v9;
    goto LABEL_16;
  }
  if (v9 >= 0x100)
  {
    unint64_t v9 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
    goto LABEL_9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  unint64_t v15 = 0;
  unint64_t v13 = 0;
LABEL_16:
  unint64_t v16 = (float *)((v7 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 < v7 + v13) {
    goto LABEL_22;
  }
  if ((unint64_t)v16 - v7 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t)v16 - v7 + 4 <= v15)
  {
    float *v16 = a2;
LABEL_22:
    if (v15) {
      return result;
    }
  }
  BOOL v11 = v8 >= v7;
  unint64_t v18 = v8 - v7;
  if (v11 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v9) {
    *(_WORD *)(v7 + v18) = 2870;
  }
LABEL_30:
  unint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v20 = 2872;
  *((void *)v20 + 1) = v3;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v25 = v20;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v20, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v24 = v20;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v24);
    unint64_t result = v24;
    if (!v24) {
      return result;
    }
LABEL_34:
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v25, 0, 0);
  unint64_t result = v25;
  unint64_t v25 = 0;
  if (result) {
    goto LABEL_34;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCBB0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCBB0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetTexParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A70268);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,int,unsigned long>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v22 = a2[3];
    if (v22)
    {
      int v27 = a2;
      uint64_t v29 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v3);
        a2 = v27;
        unint64_t result = v29;
        uint64_t v21 = *v27;
        unint64_t v20 = v27[1];
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
LABEL_25:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23 && v20)
    {
      unint64_t v26 = a2;
      uint64_t v28 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
      goto LABEL_33;
    }
    goto LABEL_26;
  }
  uint64_t v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v20 = v2;
    uint64_t v21 = 0;
    goto LABEL_25;
  }
  unint64_t v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    int v9 = *v6;
    a2[2] = v3 + v7 + 4;
    uint64_t v11 = v3 + v7 + 11;
    int v10 = *(_DWORD *)(v3 + v7);
    unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFF8) - v3;
    if (v2 >= v12 && v2 - v12 > 7)
    {
      unint64_t v14 = (uint64_t *)(v3 + v12);
      uint64_t v15 = *v14;
      a2[2] = v14 + 1;
      *(_DWORD *)unint64_t result = v9;
      *(_DWORD *)(result + 4) = v10;
      *(void *)(result + 8) = v15;
      *(unsigned char *)(result + 16) = 1;
      return result;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v16 = a2[3];
  if (v16)
  {
    if (v2)
    {
      unint64_t v26 = a2;
      uint64_t v28 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v3);
      a2 = v26;
      unint64_t result = v28;
      uint64_t v18 = *v26;
      uint64_t v17 = v26[1];
      uint64_t v19 = v26[3];
      void *v26 = 0;
      v26[1] = 0;
      if (v19)
      {
        if (v17)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v18);
LABEL_33:
          a2 = v26;
          unint64_t result = v28;
        }
      }
    }
  }
LABEL_26:
  *(unsigned char *)unint64_t result = 0;
  *(unsigned char *)(result + 16) = 0;
  uint64_t v24 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v24)
  {
    unint64_t v25 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v25();
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformfvEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCBD8;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformfvEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCBD8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformfvEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKfLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v14 = (IPC::Encoder *)(v13 + 256);
    uint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    uint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  uint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    uint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCC00;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCC00;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetUniformivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v14 = (IPC::Encoder *)(v13 + 256);
    uint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    uint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  uint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    uint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetUniformuivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKjLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCC28;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetUniformuivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKjLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCC28;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13GetUniformuivEN6WebKit23RemoteGraphicsContextGLES8_FvjimONS_17CompletionHandlerIFvNSt3__14spanIKjLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v14 = (IPC::Encoder *)(v13 + 256);
    uint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    uint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  uint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    uint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCC50;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCC50;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetUniformLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A7109CLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCC78;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCC78;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetVertexAttribOffsetEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (void *)((v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v13 + 8 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          void *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (void *)IPC::Encoder::grow(v23, 8uLL, 8);
  if (v25 <= 7)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A713C4);
  }
  void *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsBufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCCA0;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsBufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCCA0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsBufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A716ACLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsEnabledEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCCC8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsEnabledEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCCC8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsEnabledEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A7198CLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsFramebufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCCF0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsFramebufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCCF0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsFramebufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A71C6CLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsProgramEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCD18;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsProgramEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCD18;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsProgramEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A71F4CLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCD40;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCD40;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14IsRenderbufferEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A7222CLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsShaderEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCD68;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsShaderEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCD68;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8IsShaderEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A7250CLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsTextureEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCD90;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsTextureEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCD90;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsTextureEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A727ECLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCDB8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCDB8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL13IsVertexArrayEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A72ACCLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCDE0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCDE0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetFragDataLocationEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A72DECLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL7IsQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCE08;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL7IsQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCE08;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL7IsQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A730D4);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCE30;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCE30;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetQueryEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A733F4);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCE58;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCE58;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL16GetQueryObjectuiEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A7371CLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsSamplerEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCE80;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsSamplerEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCE80;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9IsSamplerEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A73A04);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCEA8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCEA8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameterfEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvfEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJfEE4callEf(uint64_t a1, float a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v25, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25);
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v9 = *(void *)(v8 + 8);
  unint64_t v7 = v10 - 1;
  if (v10 != 1)
  {
    BOOL v11 = v9 >= 0x100;
    v9 -= 256;
    if (!v11) {
      goto LABEL_37;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v10)
    {
      BOOL v11 = v9 >= v7;
      unint64_t v9 = v10 - 1;
      if (!v11) {
        goto LABEL_37;
      }
    }
LABEL_9:
    unint64_t v7 = v8 + 256;
    unint64_t v8 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = v8 - v7;
    if (v8 < v7)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = v12 + 2;
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v9) {
        goto LABEL_38;
      }
      *(_WORD *)unint64_t v8 = 2872;
    }
    unint64_t v15 = v9;
    goto LABEL_16;
  }
  if (v9 >= 0x100)
  {
    unint64_t v9 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
    goto LABEL_9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  unint64_t v15 = 0;
  unint64_t v13 = 0;
LABEL_16:
  unint64_t v16 = (float *)((v7 + v13 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v16 < v7 + v13) {
    goto LABEL_22;
  }
  if ((unint64_t)v16 - v7 <= 0xFFFFFFFFFFFFFFFBLL && (unint64_t)v16 - v7 + 4 <= v15)
  {
    float *v16 = a2;
LABEL_22:
    if (v15) {
      return result;
    }
  }
  BOOL v11 = v8 >= v7;
  unint64_t v18 = v8 - v7;
  if (v11 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v9) {
    *(_WORD *)(v7 + v18) = 2870;
  }
LABEL_30:
  unint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v20 = 2872;
  *((void *)v20 + 1) = v3;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v25 = v20;
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v20, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v24 = v20;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v24);
    unint64_t result = v24;
    if (!v24) {
      return result;
    }
LABEL_34:
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v25, 0, 0);
  unint64_t result = v25;
  unint64_t v25 = 0;
  if (result) {
    goto LABEL_34;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCED0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCED0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetSamplerParameteriEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A74024);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9FenceSyncEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCEF8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9FenceSyncEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCEF8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL9FenceSyncEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (void *)((v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v13 + 8 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          void *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (void *)IPC::Encoder::grow(v23, 8uLL, 8);
  if (v25 <= 7)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A7434CLL);
  }
  void *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL6IsSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCF20;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL6IsSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCF20;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL6IsSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A74634);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyjyONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCF48;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyjyONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCF48;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL14ClientWaitSyncEN6WebKit23RemoteGraphicsContextGLES8_FvyjyONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A74954);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetSynciEN6WebKit23RemoteGraphicsContextGLES8_FvyjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCF70;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetSynciEN6WebKit23RemoteGraphicsContextGLES8_FvyjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCF70;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL8GetSynciEN6WebKit23RemoteGraphicsContextGLES8_FvyjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  uint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A74C7CLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCF98;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCF98;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19IsTransformFeedbackEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  uint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A74F64);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  uint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCFC0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCFC0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL27GetTransformFeedbackVaryingEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvON7WebCore27GraphicsContextGLActiveInfoEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSC_EE4callESC_(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v12 = (IPC::Encoder *)(v11 + 256);
    uint64_t v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v22 = v17;
  IPC::ArgumentCoder<WebCore::GraphicsContextGLActiveInfo,void>::encode(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    uint64_t v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IjLm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BCFE8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IjLm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BCFE8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetUniformIndicesEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorINS_6StringELm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEONS_17CompletionHandlerIFvONS9_IjLm0ESB_Lm16ESC_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSH_EE4callESH_(unint64_t a1, uint64_t a2)
{
  unint64_t v7 = a1;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(v7 + 16)) {
    goto LABEL_29;
  }
  uint64_t v2 = *(void *)(v7 + 24);
  uint64_t v3 = *(void *)(v7 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      unint64_t v24 = 0;
      goto LABEL_15;
    }
    unint64_t v7 = 0;
    uint64_t v11 = *(void *)(v8 + 16);
  }
  else
  {
    unint64_t v7 = v10 - 256;
    if (v10 < 0x100) {
      goto LABEL_29;
    }
    uint64_t v11 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v12 = v7 >= v9 - 1;
      unint64_t v7 = v9 - 1;
      if (!v12) {
        goto LABEL_29;
      }
    }
  }
  unint64_t v4 = v11 + 256;
  unint64_t v23 = (IPC::Encoder *)(v11 + 256);
  unint64_t v24 = v7;
  unint64_t v25 = 0;
  uint64_t v5 = (_WORD *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
  BOOL v12 = (unint64_t)v5 >= v11 + 256;
  unint64_t v13 = (unint64_t)v5 - v11 - 256;
  if (!v12) {
    goto LABEL_15;
  }
  if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v7) {
    goto LABEL_30;
  }
  *(_WORD *)(v4 + v13) = 2872;
  unint64_t v25 = v13 + 2;
LABEL_15:
  unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<unsigned int const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v23, *(const void **)a2, *(unsigned int *)(a2 + 12));
  if (v24) {
    return result;
  }
  unint64_t v16 = (unint64_t)v5 - v4;
  if ((unint64_t)v5 >= v4 && v16 <= 0xFFFFFFFFFFFFFFFDLL && v16 + 2 <= v7) {
    _WORD *v5 = 2870;
  }
LABEL_22:
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2872;
  *((void *)v18 + 1) = v3;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  unint64_t v23 = v18;
  IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v18, *(const void **)a2, *(unsigned int *)(a2 + 12));
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v18;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  unint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjONS_17CompletionHandlerIFvONS9_IiLm0ESA_Lm16ESB_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD010;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjONS_17CompletionHandlerIFvONS9_IiLm0ESA_Lm16ESB_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD010;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL17GetActiveUniformsEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEEjONS_17CompletionHandlerIFvONS9_IiLm0ESA_Lm16ESB_EEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSG_EE4callESG_(unint64_t a1, uint64_t a2)
{
  unint64_t v7 = a1;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(v7 + 16)) {
    goto LABEL_29;
  }
  uint64_t v2 = *(void *)(v7 + 24);
  uint64_t v3 = *(void *)(v7 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_22;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  uint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_29:
      __break(1u);
LABEL_30:
      unint64_t v24 = 0;
      goto LABEL_15;
    }
    unint64_t v7 = 0;
    uint64_t v11 = *(void *)(v8 + 16);
  }
  else
  {
    unint64_t v7 = v10 - 256;
    if (v10 < 0x100) {
      goto LABEL_29;
    }
    uint64_t v11 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v12 = v7 >= v9 - 1;
      unint64_t v7 = v9 - 1;
      if (!v12) {
        goto LABEL_29;
      }
    }
  }
  unint64_t v4 = v11 + 256;
  unint64_t v23 = (IPC::Encoder *)(v11 + 256);
  unint64_t v24 = v7;
  unint64_t v25 = 0;
  uint64_t v5 = (_WORD *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
  BOOL v12 = (unint64_t)v5 >= v11 + 256;
  unint64_t v13 = (unint64_t)v5 - v11 - 256;
  if (!v12) {
    goto LABEL_15;
  }
  if (v13 > 0xFFFFFFFFFFFFFFFDLL || v13 + 2 > v7) {
    goto LABEL_30;
  }
  *(_WORD *)(v4 + v13) = 2872;
  unint64_t v25 = v13 + 2;
LABEL_15:
  unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v23, *(const void **)a2, *(unsigned int *)(a2 + 12));
  if (v24) {
    return result;
  }
  unint64_t v16 = (unint64_t)v5 - v4;
  if ((unint64_t)v5 >= v4 && v16 <= 0xFFFFFFFFFFFFFFFDLL && v16 + 2 <= v7) {
    _WORD *v5 = 2870;
  }
LABEL_22:
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2872;
  *((void *)v18 + 1) = v3;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 68) = 0;
  *((void *)v18 + 70) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  unint64_t v23 = v18;
  IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v18, *(const void **)a2, *(unsigned int *)(a2 + 12));
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v18;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  unint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD038;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD038;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL20GetUniformBlockIndexEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_6StringEONS_17CompletionHandlerIFvjEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJjEE4callEj(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A75B30);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD060;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD060;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL25GetActiveUniformBlockNameEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    uint64_t v12 = (IPC::Encoder *)(v11 + 256);
    uint64_t v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    unint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v22 = v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    uint64_t v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

uint64_t IPC::Decoder::decode<std::tuple<unsigned int,unsigned int,unsigned int,unsigned long>>(uint64_t result, void *a2)
{
  unint64_t v2 = a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = ((a2[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a2;
  if (v2 < v4 || v2 - v4 <= 3)
  {
    unint64_t v24 = 0;
    uint64_t v25 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26)
    {
      unint64_t v31 = a2;
      uint64_t v33 = result;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v3);
        a2 = v31;
        unint64_t result = v33;
        uint64_t v25 = *v31;
        unint64_t v24 = v31[1];
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v25 = 0;
      }
    }
LABEL_30:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v27 = a2[3];
    if (v27 && v24)
    {
      size_t v30 = a2;
      uint64_t v32 = result;
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v27 + 16))(v27, v25, v24);
      goto LABEL_38;
    }
    goto LABEL_31;
  }
  uint64_t v6 = (int *)(v3 + v4);
  a2[2] = v6 + 1;
  if (!v3)
  {
    unint64_t v24 = v2;
    uint64_t v25 = 0;
    goto LABEL_30;
  }
  unint64_t v7 = (((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL) - v3;
  if (v2 >= v7 && v2 - v7 > 3)
  {
    int v9 = *v6;
    a2[2] = v3 + v7 + 4;
    uint64_t v11 = v3 + v7 + 7;
    int v10 = *(_DWORD *)(v3 + v7);
    unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) - v3;
    if (v2 >= v12 && v2 - v12 > 3)
    {
      a2[2] = v3 + v12 + 4;
      uint64_t v15 = v3 + v12 + 11;
      int v14 = *(_DWORD *)(v3 + v12);
      unint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFF8) - v3;
      if (v2 >= v16 && v2 - v16 > 7)
      {
        unint64_t v18 = (uint64_t *)(v3 + v16);
        uint64_t v19 = *v18;
        a2[2] = v18 + 1;
        *(_DWORD *)unint64_t result = v9;
        *(_DWORD *)(result + 4) = v10;
        *(_DWORD *)(result + 8) = v14;
        *(void *)(result + 16) = v19;
        *(unsigned char *)(result + 24) = 1;
        return result;
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
  uint64_t v20 = a2[3];
  if (v20)
  {
    if (v2)
    {
      size_t v30 = a2;
      uint64_t v32 = result;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v3);
      a2 = v30;
      unint64_t result = v32;
      uint64_t v22 = *v30;
      uint64_t v21 = v30[1];
      uint64_t v23 = v30[3];
      void *v30 = 0;
      v30[1] = 0;
      if (v23)
      {
        if (v21)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v22);
LABEL_38:
          a2 = v30;
          unint64_t result = v32;
        }
      }
    }
  }
LABEL_31:
  *(unsigned char *)unint64_t result = 0;
  *(unsigned char *)(result + 24) = 0;
  uint64_t v28 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  unint64_t result = a2[3];
  if (result && v28)
  {
    uint64_t v29 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v29();
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD088;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD088;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL23GetActiveUniformBlockivEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    int v14 = (IPC::Encoder *)(v13 + 256);
    unint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    uint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  unint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    unint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD0B0;
  unint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD0B0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL30GetTranslatedShaderSourceANGLEEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvONS_6StringEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSB_EE4callESB_(uint64_t a1, uint64_t *a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v22, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v22);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v7 = *(void *)(v2 + 56);
    uint64_t v6 = *(void *)(v2 + 64);
    unint64_t v8 = *(void *)(v6 + 8);
    if (v7 == 1)
    {
      if (v8 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v10 = 0;
      uint64_t v11 = *(void *)(v6 + 16);
    }
    else
    {
      BOOL v9 = v8 >= 0x100;
      unint64_t v10 = v8 - 256;
      if (!v9) {
        goto LABEL_24;
      }
      uint64_t v11 = *(void *)(v6 + 16);
      if (v7)
      {
        BOOL v9 = v10 >= v7 - 1;
        unint64_t v10 = v7 - 1;
        if (!v9) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v12 = (IPC::Encoder *)(v11 + 256);
    uint64_t v22 = v12;
    unint64_t v23 = v10;
    unint64_t v24 = 0;
    uint64_t v13 = (char *)((v11 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v14 = v13 - (char *)v12;
    if (v13 < (char *)v12) {
      goto LABEL_26;
    }
    if (v14 > 0xFFFFFFFFFFFFFFFDLL || v14 + 2 > v10)
    {
LABEL_25:
      unint64_t v23 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
      if (v23) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)uint64_t v13 = 2872;
    unint64_t v24 = v14 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<WTF::String,void>::encode<IPC::StreamConnectionEncoder>(&v22, a2);
    if (v23) {
      return result;
    }
    *(_WORD *)((char *)v12 + v14) = 2870;
  }
LABEL_16:
  uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v17 = 2872;
  *((void *)v17 + 1) = v3;
  *((void *)v17 + 66) = (char *)v17 + 16;
  *((void *)v17 + 67) = 512;
  *((void *)v17 + 68) = 0;
  *((void *)v17 + 70) = 0;
  *((void *)v17 + 69) = 0;
  IPC::Encoder::encodeHeader(v17);
  uint64_t v22 = v17;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v21 = v17;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v21);
    unint64_t result = v21;
    if (!v21) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v22, 0, 0);
    unint64_t result = v22;
    uint64_t v22 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v18);
  return (IPC::Encoder *)WTF::fastFree(v19, v20);
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD0D8;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD0D8;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL10IsQueryEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvbEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v23, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v23);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_21;
  }
  uint64_t v9 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v10 = *(void *)(v8 + 8);
  unint64_t v7 = v9 - 1;
  if (v9 == 1)
  {
    if (v10 < 0x100)
    {
LABEL_19:
      __break(1u);
LABEL_20:
      *(_WORD *)(v7 + v8) = 2870;
      goto LABEL_21;
    }
    unint64_t v12 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
  }
  else
  {
    BOOL v11 = v10 >= 0x100;
    unint64_t v12 = v10 - 256;
    if (!v11) {
      goto LABEL_19;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v9)
    {
      BOOL v11 = v12 >= v7;
      unint64_t v12 = v9 - 1;
      if (!v11) {
        goto LABEL_19;
      }
    }
  }
  unint64_t v7 = v8 + 256;
  unint64_t v13 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
  BOOL v11 = v13 >= v7;
  unint64_t v8 = v13 - v7;
  if (v11)
  {
    unint64_t v14 = v8 + 2;
    if (v8 > 0xFFFFFFFFFFFFFFFDLL || v14 > v12) {
      goto LABEL_21;
    }
    *(_WORD *)(v7 + v8) = 2872;
    if (v14 >= v12) {
      goto LABEL_20;
    }
LABEL_16:
    *(unsigned char *)(v7 + v14) = a2;
    return result;
  }
  if (v12)
  {
    unint64_t v14 = 0;
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v16 = 2872;
  *((void *)v16 + 1) = v3;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 68) = 0;
  *((void *)v16 + 70) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  unint64_t v23 = v16;
  uint64_t v17 = (unsigned char *)IPC::Encoder::grow(v16, 1uLL, 1);
  if (!v18)
  {
    __break(0xC471u);
    JUMPOUT(0x198A7692CLL);
  }
  unsigned char *v17 = a2;
  if (*(unsigned char *)(v2 + 120))
  {
    uint64_t v22 = v16;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v22);
    unint64_t result = v22;
    if (!v22) {
      return result;
    }
LABEL_26:
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v20, v21);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v23, 0, 0);
  unint64_t result = v23;
  unint64_t v23 = 0;
  if (result) {
    goto LABEL_26;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD100;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD100;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL12GetQueryiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A76C4CLL);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD128;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD128;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL18GetQueryObjectiEXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFviEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJiEE4callEi(uint64_t a1, int a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (_DWORD *)((v13 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFFBLL || (unint64_t)v19 - v13 + 4 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          _DWORD *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (_DWORD *)IPC::Encoder::grow(v23, 4uLL, 4);
  if (v25 <= 3)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A76F74);
  }
  _DWORD *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD150;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD150;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL21GetQueryObjectui64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjjONS_17CompletionHandlerIFvyEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJyEE4callEy(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v30, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v30);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_38;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    unint64_t v9 = *(void *)(v7 + 8);
    if (v8 == 1)
    {
      if (v9 < 0x100)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      unint64_t v11 = 0;
      uint64_t v12 = *(void *)(v7 + 16);
    }
    else
    {
      BOOL v10 = v9 >= 0x100;
      unint64_t v11 = v9 - 256;
      if (!v10) {
        goto LABEL_38;
      }
      uint64_t v12 = *(void *)(v7 + 16);
      if (v8)
      {
        BOOL v10 = v11 >= v8 - 1;
        unint64_t v11 = v8 - 1;
        if (!v10) {
          goto LABEL_38;
        }
      }
    }
    unint64_t v13 = v12 + 256;
    unint64_t v14 = (_WORD *)((v12 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v15 = (unint64_t)v14 - v13;
    if ((unint64_t)v14 < v13)
    {
      unint64_t v16 = 0;
    }
    else
    {
      unint64_t v16 = v15 + 2;
      if (v15 > 0xFFFFFFFFFFFFFFFDLL || v16 > v11)
      {
        unint64_t v18 = 0;
        unint64_t v16 = 0;
LABEL_16:
        uint64_t v19 = (void *)((v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((unint64_t)v19 >= v13 + v16)
        {
          if ((unint64_t)v19 - v13 > 0xFFFFFFFFFFFFFFF7 || (unint64_t)v19 - v13 + 8 > v18)
          {
LABEL_23:
            BOOL v10 = (unint64_t)v14 >= v13;
            unint64_t v21 = (unint64_t)v14 - v13;
            if (v10 && v21 <= 0xFFFFFFFFFFFFFFFDLL && v21 + 2 <= v11) {
              *(_WORD *)(v13 + v21) = 2870;
            }
            goto LABEL_30;
          }
          void *v19 = a2;
        }
        if (v18) {
          return result;
        }
        goto LABEL_23;
      }
      _WORD *v14 = 2872;
    }
    unint64_t v18 = v11;
    goto LABEL_16;
  }
LABEL_30:
  unint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v23 = 2872;
  *((void *)v23 + 1) = v6;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  size_t v30 = v23;
  unint64_t v24 = (void *)IPC::Encoder::grow(v23, 8uLL, 8);
  if (v25 <= 7)
  {
LABEL_39:
    __break(0xC471u);
    JUMPOUT(0x198A7729CLL);
  }
  void *v24 = a2;
  if (*(unsigned char *)(v5 + 120))
  {
    uint64_t v29 = v23;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v5 + 128), &v29);
    unint64_t result = v29;
    if (!v29) {
      return result;
    }
LABEL_35:
    IPC::Encoder::~Encoder(result, v26);
    return (IPC::Encoder *)WTF::fastFree(v27, v28);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v5 + 40), (uint64_t *)&v30, 0, 0);
  unint64_t result = v30;
  size_t v30 = 0;
  if (result) {
    goto LABEL_35;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD178;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD178;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL15GetInteger64EXTEN6WebKit23RemoteGraphicsContextGLES8_FvjONS_17CompletionHandlerIFvxEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJxEE4callEx(uint64_t a1, uint64_t a2)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v25, (uint64_t **)(*(void *)(a1 + 24) + 40));
  unint64_t result = (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v25);
  unint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_37;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v2 + 120)) {
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v2 + 56);
  unint64_t v8 = *(void *)(v2 + 64);
  unint64_t v9 = *(void *)(v8 + 8);
  unint64_t v7 = v10 - 1;
  if (v10 != 1)
  {
    BOOL v11 = v9 >= 0x100;
    v9 -= 256;
    if (!v11) {
      goto LABEL_37;
    }
    unint64_t v8 = *(void *)(v8 + 16);
    if (v10)
    {
      BOOL v11 = v9 >= v7;
      unint64_t v9 = v10 - 1;
      if (!v11) {
        goto LABEL_37;
      }
    }
LABEL_9:
    unint64_t v7 = v8 + 256;
    unint64_t v8 = (v8 + 257) & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v12 = v8 - v7;
    if (v8 < v7)
    {
      unint64_t v13 = 0;
    }
    else
    {
      unint64_t v13 = v12 + 2;
      if (v12 > 0xFFFFFFFFFFFFFFFDLL || v13 > v9) {
        goto LABEL_38;
      }
      *(_WORD *)unint64_t v8 = 2872;
    }
    unint64_t v15 = v9;
    goto LABEL_16;
  }
  if (v9 >= 0x100)
  {
    unint64_t v9 = 0;
    unint64_t v8 = *(void *)(v8 + 16);
    goto LABEL_9;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  unint64_t v15 = 0;
  unint64_t v13 = 0;
LABEL_16:
  unint64_t v16 = (void *)((v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)v16 < v7 + v13) {
    goto LABEL_22;
  }
  if ((unint64_t)v16 - v7 <= 0xFFFFFFFFFFFFFFF7 && (unint64_t)v16 - v7 + 8 <= v15)
  {
    void *v16 = a2;
LABEL_22:
    if (v15) {
      return result;
    }
  }
  BOOL v11 = v8 >= v7;
  unint64_t v18 = v8 - v7;
  if (v11 && v18 <= 0xFFFFFFFFFFFFFFFDLL && v18 + 2 <= v9) {
    *(_WORD *)(v7 + v18) = 2870;
  }
LABEL_30:
  uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v20 = 2872;
  *((void *)v20 + 1) = v3;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unint64_t v25 = v20;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v20, a2);
  if (*(unsigned char *)(v2 + 120))
  {
    unint64_t v24 = v20;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v2 + 128), &v24);
    unint64_t result = v24;
    if (!v24) {
      return result;
    }
LABEL_34:
    IPC::Encoder::~Encoder(result, v21);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  IPC::Connection::sendMessageImpl(*(void *)(v2 + 40), (uint64_t *)&v25, 0, 0);
  unint64_t result = v25;
  unint64_t v25 = 0;
  if (result) {
    goto LABEL_34;
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetInternalformativEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED1Ev(void *a1)
{
  *a1 = &unk_1EE9BD1A0;
  uint64_t v2 = (unsigned int *)a1[3];
  a1[3] = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2 + 2);
    (*(void (**)(unsigned int *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetInternalformativEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9BD1A0;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC24handleMessageSynchronousIN8Messages23RemoteGraphicsContextGL19GetInternalformativEN6WebKit23RemoteGraphicsContextGLES8_FvjjjmONS_17CompletionHandlerIFvNSt3__14spanIKiLm18446744073709551615EEEEEEEEEvRNS2_22StreamServerConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJSD_EE4callESD_(uint64_t a1, const void *a2, uint64_t a3)
{
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((uint64_t **)&v24, (uint64_t **)(*(void *)(a1 + 24) + 40));
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v24);
  if (!*(unsigned char *)(a1 + 16)) {
    goto LABEL_24;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v3 + 120))
  {
    uint64_t v9 = *(void *)(v3 + 56);
    uint64_t v8 = *(void *)(v3 + 64);
    unint64_t v10 = *(void *)(v8 + 8);
    if (v9 == 1)
    {
      if (v10 < 0x100)
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      unint64_t v12 = 0;
      uint64_t v13 = *(void *)(v8 + 16);
    }
    else
    {
      BOOL v11 = v10 >= 0x100;
      unint64_t v12 = v10 - 256;
      if (!v11) {
        goto LABEL_24;
      }
      uint64_t v13 = *(void *)(v8 + 16);
      if (v9)
      {
        BOOL v11 = v12 >= v9 - 1;
        unint64_t v12 = v9 - 1;
        if (!v11) {
          goto LABEL_24;
        }
      }
    }
    unint64_t v14 = (IPC::Encoder *)(v13 + 256);
    unint64_t v24 = v14;
    unint64_t v25 = v12;
    unint64_t v26 = 0;
    unint64_t v15 = (char *)((v13 + 257) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v16 = v15 - (char *)v14;
    if (v15 < (char *)v14) {
      goto LABEL_26;
    }
    if (v16 > 0xFFFFFFFFFFFFFFFDLL || v16 + 2 > v12)
    {
LABEL_25:
      unint64_t v25 = 0;
LABEL_26:
      unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
      if (v25) {
        return result;
      }
      goto LABEL_16;
    }
    *(_WORD *)unint64_t v15 = 2872;
    unint64_t v26 = v16 + 2;
    unint64_t result = (IPC::Encoder *)IPC::ArgumentCoder<std::span<float const,18446744073709551615ul>,void>::encode<IPC::StreamConnectionEncoder>(&v24, a2, a3);
    if (v25) {
      return result;
    }
    *(_WORD *)((char *)v14 + v16) = 2870;
  }
LABEL_16:
  uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v19 = 2872;
  *((void *)v19 + 1) = v4;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 68) = 0;
  *((void *)v19 + 70) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  unint64_t v24 = v19;
  IPC::ArgumentCoder<std::span<int const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v19, a2, a3);
  if (*(unsigned char *)(v3 + 120))
  {
    unint64_t v23 = v19;
    std::unique_ptr<IPC::Encoder>::operator=[abi:sn180100]((IPC::Encoder **)(v3 + 128), &v23);
    unint64_t result = v23;
    if (!v23) {
      return result;
    }
  }
  else
  {
    IPC::Connection::sendMessageImpl(*(void *)(v3 + 40), (uint64_t *)&v24, 0, 0);
    unint64_t result = v24;
    unint64_t v24 = 0;
    if (!result) {
      return result;
    }
  }
  IPC::Encoder::~Encoder(result, v20);
  return (IPC::Encoder *)WTF::fastFree(v21, v22);
}

unint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    unint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = IPC::Decoder::decode<WTF::Vector<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, (uint64_t)v5);
  char v4 = v6;
  if (v6)
  {
    *(void *)a2 = v5[0];
    *(void *)(a2 + 8) = v5[1];
    char v4 = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
  }
  *(unsigned char *)(a2 + 16) = v4;
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue19OnSubmittedWorkDoneEN6WebKit11RemoteQueueES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD1C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue19OnSubmittedWorkDoneEN6WebKit11RemoteQueueES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BD1C8;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue19OnSubmittedWorkDoneEN6WebKit11RemoteQueueES8_FvONS_17CompletionHandlerIFvvEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJEE4callEv(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 3181;
  *((void *)v3 + 1) = v2;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 70) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v8 = v3;
  IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v8, 0, 0);
  unint64_t result = v8;
  uint64_t v8 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue11WriteBufferEN6WebKit11RemoteQueueES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD1F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue11WriteBufferEN6WebKit11RemoteQueueES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BD1F0;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue11WriteBufferEN6WebKit11RemoteQueueES8_FvNS_23ObjectIdentifierGenericINS7_20WebGPUIdentifierTypeENS_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNS_33SupportsObjectIdentifierNullStateE1EEEyONSt3__18optionalIN7WebCore18SharedMemoryHandleEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3182;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue12WriteTextureEN6WebKit11RemoteQueueES8_FvRKNS7_6WebGPU16ImageCopyTextureEONSt3__18optionalIN7WebCore18SharedMemoryHandleEEERKNS9_15ImageDataLayoutERKNSD_7variantIJNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_12Extent3DDictEEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED1Ev(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9BD238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)(a1 + 16));
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue12WriteTextureEN6WebKit11RemoteQueueES8_FvRKNS7_6WebGPU16ImageCopyTextureEONSt3__18optionalIN7WebCore18SharedMemoryHandleEEERKNS9_15ImageDataLayoutERKNSD_7variantIJNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_12Extent3DDictEEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEED0Ev(atomic_uchar *volatile **a1)
{
  *a1 = (atomic_uchar *volatile *)&unk_1EE9BD238;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(a1 + 2);

  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZN3IPC18handleMessageAsyncIN8Messages11RemoteQueue12WriteTextureEN6WebKit11RemoteQueueES8_FvRKNS7_6WebGPU16ImageCopyTextureEONSt3__18optionalIN7WebCore18SharedMemoryHandleEEERKNS9_15ImageDataLayoutERKNSD_7variantIJNS_6VectorIjLm0ENS_15CrashOnOverflowELm16ENS_10FastMallocEEENS9_12Extent3DDictEEEEONS_17CompletionHandlerIFvbEEEEEEvRNS2_10ConnectionERNS2_7DecoderEPT0_MT1_T2_EUlDpOT_E_vJbEE4callEb(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 3183;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unint64_t v12 = v5;
  char v6 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (v7)
  {
    unsigned char *v6 = a2;
    IPC::Connection::sendMessageImpl(*(void *)(a1 + 16), (uint64_t *)&v12, 0, 0);
    uint64_t result = (uint64_t)v12;
    unint64_t v12 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v8);
      return WTF::fastFree(v10, v11);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void IPC::Decoder::decode<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  v5[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, (uint64_t)v5, a2);
  }
  else
  {
    *a2 = 0;
    a2[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unsigned __int16 v6 = IPC::Decoder::decode<WebCore::TextManipulationControllerExclusionRule::Type>(a1);
  if (v6 > 0xFFu)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat>((IPC::Decoder *)a1, a2, &v6, a3);
  }
  else
  {
    *a3 = 0;
    a3[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)v8);
  if (v8[16])
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>>(a1, a2, a3, (uint64_t)v8, a4);
  }
  else
  {
    *a4 = 0;
    a4[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)&v9);
  if (v10)
  {
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>(a2, a3, a4, &v9, (uint64_t)a5);
  }
  else
  {
    *a5 = 0;
    a5[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::WebGPU::IndexFormat,std::optional<unsigned long long>,std::optional<unsigned long long>>(uint64_t a1@<X1>, unsigned char *a2@<X2>, uint64_t a3@<X3>, long long *a4@<X4>, uint64_t a5@<X8>)
{
  if (*(unsigned char *)(a1 + 8) && a2[1] && *(unsigned char *)(a3 + 16) && *((unsigned char *)a4 + 16))
  {
    *(void *)a5 = *(void *)a1;
    *(unsigned char *)(a5 + 8) = *a2;
    long long v5 = *a4;
    *(_OWORD *)(a5 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(a5 + 32) = v5;
    *(unsigned char *)(a5 + 48) = 1;
  }
  else
  {
    __break(1u);
  }
}

void IPC::Decoder::decode<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[48])
  {
    uint64_t v4 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t v5 = a1[3];
    if (v5 && v4 != 0)
    {
      uint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = ((a1[2] + 3) & 0xFFFFFFFFFFFFFFFCLL) - *a1;
  if (v2 >= v4 && v2 - v4 > 3)
  {
    unsigned __int16 v6 = (unsigned int *)(v3 + v4);
    a1[2] = (uint64_t)(v6 + 1);
    if (v3)
    {
      uint64_t v14 = *v6 | 0x100000000;
      IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int>(a1, (uint64_t)&v14, a2);
      return;
    }
    unint64_t v7 = v2;
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v9 = a1[3];
    if (v9)
    {
      BOOL v11 = a1;
      uint64_t v13 = a2;
      if (v2)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v9 + 16))(v9, v3, v2);
        a1 = v11;
        a2 = v13;
        uint64_t v8 = *v11;
        unint64_t v7 = v11[1];
      }
      else
      {
        unint64_t v7 = 0;
        uint64_t v8 = 0;
      }
    }
  }
  *a1 = 0;
  a1[1] = 0;
  uint64_t v10 = a1[3];
  if (v10)
  {
    if (v7)
    {
      unint64_t v12 = a2;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v8);
      a2 = v12;
    }
  }
  *a2 = 0;
  a2[48] = 0;
}

void IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v7[0] = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  v7[1] = v6;
  if ((_BYTE)v6)
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((IPC::Decoder *)a1, a2, (uint64_t)v7, a3);
  }
  else
  {
    *a3 = 0;
    a3[48] = 0;
  }
}

void IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  IPC::Decoder::decode<std::optional<unsigned long long>>(a1, (uint64_t)v8);
  if (v8[16])
  {
    IPC::ArgumentCoder<std::tuple<unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>,std::optional<unsigned long long>>,void>::decode<IPC::Decoder,unsigned int,WTF::ObjectIdentifierGeneric<WebKit::WebGPUIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<unsigned long long>>(a1, a2, a3, (uint64_t)v8, a4);
  }
  else
  {
    *a4 = 0;
    a4[48] = 0;
  }
}