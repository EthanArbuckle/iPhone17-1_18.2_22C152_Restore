uint64_t non-virtual thunk to'WebKit::LibWebRTCNetworkManager::networksChanged(uint64_t a1, int *a2, int *a3, int *a4)
{
  char v4;

  v4 = *(unsigned char *)(a1 + 57) == 0;
  *(unsigned char *)(a1 + 57) = 1;
  return WebKit::LibWebRTCNetworkManager::networksChanged(a1 - 296, a2, a3, a4, v4);
}

void *WebKit::LibWebRTCNetworkManager::interfaceNameForTesting(WebKit::LibWebRTCNetworkManager *this)
{
  result = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)this + 45);
  v3 = (void *)*((void *)this + 45);
  if (v3) {
    v3 += *((unsigned int *)v3 - 1);
  }
  if (v3 == result) {
    return (void *)MEMORY[0x1E4F30980];
  }
  return result;
}

void WebKit::LibWebRTCNetworkManager::signalUsedInterface(uint64_t a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add((uint64_t *)(a1 + 360), a2, a3, (uint64_t)v6);
  if (v6[16] && !*(unsigned char *)(a1 + 352) && *(unsigned char *)(a1 + 355))
  {
    {
      v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v5);
    }
    WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    if (*(unsigned char *)(v4 + 112)) {
      WebKit::LibWebRTCNetworkManager::networksChanged(a1, (int *)(v4 + 120), (int *)(v4 + 136), (int *)(v4 + 156), 0);
    }
  }
}

uint64_t WebKit::LibWebRTCNetworkManager::networkProcessCrashed(WebKit::LibWebRTCNetworkManager *this)
{
  *((unsigned char *)this + 353) = 0;
  uint64_t result = WebCore::LibWebRTCProvider::hasWebRTCThreads(this);
  if (result)
  {
    atomic_fetch_add((atomic_uint *volatile)this + 2, 1u);
    v3 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v3 = &unk_1EE9F26A8;
    v3[1] = this;
    v3[2] = this;
    uint64_t v4 = (uint64_t)v3;
    WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
    uint64_t result = v4;
    if (v4) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::LibWebRTCNetworkManager::networkProcessCrashed(WebKit::LibWebRTCNetworkManager *this)
{
  return WebKit::LibWebRTCNetworkManager::networkProcessCrashed((WebKit::LibWebRTCNetworkManager *)((char *)this - 296));
}

uint64_t WebKit::LibWebRTCNetworkManager::CreateNameForAddress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 304), a1 + 296);
  v6 = *(atomic_uint **)(a1 + 304);
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  v10 = (WTF *)v6;
  int v11 = *(_DWORD *)(a2 + 8);
  long long v12 = *(_OWORD *)(a2 + 12);
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::__value_func[abi:sn180100]((uint64_t)v13, a3);
  uint64_t v7 = WTF::fastMalloc((WTF *)0x50);
  uint64_t v8 = v7;
  *(void *)uint64_t v7 = &unk_1EE9F26D0;
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 16) = &unk_1EE9BD6E8;
  *(_DWORD *)(v7 + 24) = v11;
  *(_OWORD *)(v7 + 28) = v12;
  if (v14)
  {
    if (v14 == v13)
    {
      *(void *)(v7 + 72) = v7 + 48;
      (*(void (**)(void *))(v13[0] + 24))(v13);
    }
    else
    {
      *(void *)(v7 + 72) = v14;
      v14 = 0;
    }
  }
  else
  {
    *(void *)(v7 + 72) = 0;
  }
  WTF::callOnMainRunLoop();
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100](v13);
  return 0;
}

uint64_t non-virtual thunk to'WebKit::LibWebRTCNetworkManager::CreateNameForAddress(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebKit::LibWebRTCNetworkManager::CreateNameForAddress(a1 - 288, a2, a3);
}

void WebKit::LibWebRTCProvider::~LibWebRTCProvider(WebKit::LibWebRTCProvider *this, void *a2)
{
  v2 = (unsigned int *)*((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    v3 = this;
    WTF::fastFree((WTF *)v2, a2);
    this = v3;
  }

  WebCore::LibWebRTCProvider::~LibWebRTCProvider(this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::LibWebRTCProvider::~LibWebRTCProvider(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::LibWebRTCProvider::createPeerConnection@<X0>(WebKit::LibWebRTCCodecs *a1@<X0>, _OWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  WebKit::LibWebRTCCodecs::initializeIfNeeded(a1);
  long long v6 = a2[1];
  v11[0] = *a2;
  v11[1] = v6;
  uint64_t result = WebKit::LibWebRTCNetworkManager::getOrCreate((WebCore::Document *)v11);
  if (result)
  {
    uint64_t v8 = result;
    *(unsigned char *)(result + 354) = WebCore::LibWebRTCProvider::isEnumeratingAllNetworkInterfacesEnabled(a1);
    *(unsigned char *)(v8 + 355) = *((unsigned char *)a1 + 197);
    v9 = (void *)WTF::fastMalloc((WTF *)8);
    void *v9 = &unk_1EE9F2290;
    v10 = v9;
    WebCore::LibWebRTCProvider::createPeerConnection();
    uint64_t result = (uint64_t)v10;
    if (v10) {
      return (*(uint64_t (**)(void *))(*v10 + 8))(v10);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void WebKit::LibWebRTCProvider::disableNonLocalhostConnections(WebKit::LibWebRTCProvider *this)
{
  {
    v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  *(unsigned char *)(v1 + 40) = 1;
}

BOOL WebKit::LibWebRTCProvider::isSupportingVP9HardwareDecoder(WebKit::LibWebRTCProvider *this)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  v2 = (unsigned __int8 *)v1 + 128;
  if (!*((unsigned char *)v1 + 129)) {
    v2 = (unsigned __int8 *)v1 + 130;
  }
  return *v2 != 0;
}

WebKit::LibWebRTCCodecs *WebKit::LibWebRTCProvider::setVP9HardwareSupportForTesting(uint64_t a1, __int16 a2)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t result = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  *((_WORD *)result + 64) = a2;
  return result;
}

uint64_t WebKit::RTCSocketFactory::CreateUdpSocket(WebKit::RTCSocketFactory *this, const rtc::SocketAddress *a2, __int16 a3, __int16 a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  {
    int v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  long long v9 = *((_OWORD *)this + 3);
  v12[0] = *((_OWORD *)this + 2);
  v12[1] = v9;
  return WebKit::LibWebRTCSocketFactory::createUdpSocket(v8 + 24, v12, a2, a3, a4, *((void *)this + 1), *((unsigned char *)this + 64), *((unsigned char *)this + 65), (WTF::StringImpl **)this + 9);
}

uint64_t WebKit::RTCSocketFactory::CreateClientTcpSocket(uint64_t a1, const rtc::SocketAddress *a2, const rtc::SocketAddress *a3, _DWORD *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  {
    v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v9 = v8 + 24;
  long long v10 = *(_OWORD *)(a1 + 48);
  v18[0] = *(_OWORD *)(a1 + 32);
  v18[1] = v10;
  int v11 = *(WTF::StringImpl **)(a1 + 16);
  if (v11) {
    *(_DWORD *)v11 += 2;
  }
  v17 = v11;
  uint64_t ClientTcpSocket = WebKit::LibWebRTCSocketFactory::createClientTcpSocket(v9, v18, a2, a3, (_DWORD **)&v17, a4, *(void *)(a1 + 8), *(unsigned char *)(a1 + 64), *(unsigned char *)(a1 + 65), (_DWORD **)(a1 + 72));
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v12);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  return ClientTcpSocket;
}

uint64_t *WebKit::RTCSocketFactory::CreateAsyncDnsResolver@<X0>(WebKit::LibWebRTCResolver **a1@<X8>)
{
  {
    long long v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v4 = (WebKit::LibWebRTCSocketFactory *)(v3 + 24);

  return WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver(v4, a1);
}

uint64_t WebKit::RTCSocketFactory::suspend(WebKit::RTCSocketFactory *this)
{
  long long v4 = *((_OWORD *)this + 2);
  *(void *)&long long v5 = *((void *)this + 6);
  uint64_t v1 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v1 = &unk_1EE9F2748;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  uint64_t v3 = v1;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebKit::RTCSocketFactory::resume(WebKit::RTCSocketFactory *this)
{
  long long v4 = *((_OWORD *)this + 2);
  *(void *)&long long v5 = *((void *)this + 6);
  uint64_t v1 = WTF::fastMalloc((WTF *)0x30);
  *(void *)uint64_t v1 = &unk_1EE9F2798;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  uint64_t v3 = v1;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  uint64_t result = v3;
  if (v3) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return result;
}

void WebKit::LibWebRTCProvider::startedNetworkThread(WebKit::LibWebRTCProvider *this)
{
  {
    v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  *(unsigned char *)(v1 + 192) = 1;
  if (*(void *)(v1 + 200))
  {
    WebKit::LibWebRTCNetwork::setSocketFactoryConnection((WebKit::LibWebRTCNetwork *)v1);
  }
}

void WebKit::LibWebRTCProvider::createSocketFactory(uint64_t a1@<X0>, uint64_t *a2@<X1>, long long *a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v11 = *(void *)(*(void *)(a1 + 200) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  CFRetain(*(CFTypeRef *)(v12 + 8));
  uint64_t v13 = *(void *)(v12 + 2120);
  uint64_t v14 = WTF::fastMalloc((WTF *)0x50);
  long long v16 = *a3;
  long long v15 = a3[1];
  *(void *)uint64_t v14 = &unk_1EE9F21E0;
  *(void *)(v14 + 8) = v13;
  uint64_t v17 = *a2;
  *a2 = 0;
  *(void *)(v14 + 16) = v17;
  *(_OWORD *)(v14 + 32) = v16;
  *(_OWORD *)(v14 + 48) = v15;
  *(unsigned char *)(v14 + 64) = a4;
  *(unsigned char *)(v14 + 65) = 0;
  uint64_t v18 = *a5;
  *a5 = 0;
  *(void *)(v14 + 72) = v18;
  uint64_t v19 = *(void *)(v12 + 48);
  if (!v19 || (*(unsigned char *)(*(void *)(v19 + 112) + 725) & 0x10) == 0) {
    *(unsigned char *)(v14 + 65) = 1;
  }
  *a6 = v14;
  if (v11)
  {
    v20 = *(const void **)(v11 - 8);
    CFRelease(v20);
  }
}

uint64_t WebKit::RTCSocketFactory::disableRelay(uint64_t this)
{
  *(unsigned char *)(this + 65) = 1;
  return this;
}

uint64_t WebKit::LibWebRTCProvider::createRTCDataChannelRemoteHandlerConnection@<X0>(WebKit::LibWebRTCProvider *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (WebKit::RTCDataChannelRemoteManager *)WebKit::RTCDataChannelRemoteManager::sharedManager(this);
  uint64_t result = WebKit::RTCDataChannelRemoteManager::remoteHandlerConnection(v3);
  atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  *a2 = result;
  return result;
}

uint64_t WebKit::LibWebRTCProvider::setLoggingLevel(uint64_t a1, __int16 a2)
{
  WebCore::LibWebRTCProvider::setLoggingLevel();
  {
    long long v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = WebKit::WebProcess::libWebRTCCodecs((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);

  return WebKit::LibWebRTCCodecs::setLoggingLevel((uint64_t)v3, a2);
}

void WebKit::WebTransportReceiveStreamSource::~WebTransportReceiveStreamSource(WebKit::WebTransportReceiveStreamSource *this)
{
  WebCore::ReadableStreamSource::~ReadableStreamSource(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebCore::RefCountedReadableStreamSource::ref(uint64_t this)
{
  return this;
}

_DWORD *WebCore::RefCountedReadableStreamSource::deref(_DWORD *this)
{
  if (this[8] == 1) {
    return (_DWORD *)(*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  --this[8];
  return this;
}

uint64_t WebKit::WebTransportSession::ref(uint64_t this)
{
  return this;
}

unsigned int *WebKit::WebTransportSession::deref(WebKit::WebTransportSession *this)
{
  return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref((unsigned int *)this + 12);
}

uint64_t WebKit::LibWebRTCNetworkManager::setICECandidateFiltering(uint64_t this, char a2)
{
  *(unsigned char *)(this + 352) = a2;
  return this;
}

void WebKit::RTCSocketFactory::~RTCSocketFactory(WebKit::RTCSocketFactory *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  long long v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  long long v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::RTCSocketFactory::CreateServerTcpSocket()
{
  return 0;
}

uint64_t WebCore::DeferredPromise::resolve(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (v1 && *(void *)v1 && (*(unsigned char *)(v1 + 8) & 3) == 0)
  {
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction();
    return MEMORY[0x19972D170](v2);
  }
  return this;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 8);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F22B8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 8) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9F22C8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 8) = v5;
  }
  return result;
}

WTF::DeferrableRefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::DeferrableRefCountedBase **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (WTF::DeferrableRefCountedBase *)WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(result);
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1) {
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    }
    else {
      --*result;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEEEEEN7WebCore25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSQ_1EJSM_SO_EEEEEEDcSS_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(a2 + 8);
  if (v3 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F22B8[v3])(&v5, a2);
  }
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

uint64_t std::unique_ptr<rtc::Network>::reset[abi:sn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x19972EFC0]();
    JUMPOUT(0x199740C10);
  }
  return result;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<rtc::Network>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<rtc::Network>>>>::destroy(*((void *)a1 + 1));
    std::unique_ptr<rtc::Network>::reset[abi:sn180100]((uint64_t *)a1 + 7, 0);
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t sigslot::_signal_base<sigslot::single_threaded>::disconnect_all(uint64_t result)
{
  uint64_t v1 = (void *)result;
  for (uint64_t i = *(void *)(result + 32); i; uint64_t i = v1[4])
  {
    uint64_t v3 = (uint64_t *)v1[3];
    uint64_t v4 = v3[3];
    uint64_t v5 = *v3;
    *(void *)(v5 + 8) = v3[1];
    *(void *)v3[1] = v5;
    v1[4] = i - 1;
    operator delete(v3);
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(v4 + 16))(v4, v1);
  }
  v1[5] = v1 + 2;
  return result;
}

void *std::__list_imp<sigslot::_opaque_connection>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    uint64_t result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        uint64_t result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void *std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransportSession>,WTF::DefaultRefDerefTraits<WebCore::WebTransportSession>> &&)>,void,WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F2338;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransportSession>,WTF::DefaultRefDerefTraits<WebCore::WebTransportSession>> &&)>,void,WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F2338;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WebTransportSession,WTF::RawPtrTraits<WebCore::WebTransportSession>,WTF::DefaultRefDerefTraits<WebCore::WebTransportSession>> &&)>,void,WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit>,WTF::DefaultRefDerefTraits<WebKit>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  uint64_t v5 = v2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 16))(v3, &v5);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  uint64_t result = v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_11ArrayBufferENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9F2360;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 16))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_11ArrayBufferENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F2360;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_11ArrayBufferENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve(*(void *)(a1 + 8));
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_15ArrayBufferViewENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED1Ev(void *a1)
{
  uint64_t v2 = (_DWORD *)a1[1];
  *a1 = &unk_1EE9F2388;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 16))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_15ArrayBufferViewENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = (_DWORD *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F2388;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 16))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit26WebTransportSendStreamSink5writeERN7WebCore22ScriptExecutionContextEN3JSC7JSValueEONS4_18DOMPromiseDeferredIvEEENK3__0clINS_6RefPtrINS7_15ArrayBufferViewENS_12RawPtrTraitsISF_EENS_21DefaultRefDerefTraitsISF_EEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1)
{
  return WebCore::DeferredPromise::resolve(*(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F23B0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F23B0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      unint64_t v5 = a2[1];
      if (v5 <= a2[2] - v4)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v17 = a2[3];
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v4, v5);
            uint64_t v15 = 0;
            uint64_t v25 = *a2;
            uint64_t v26 = a2[1];
            uint64_t v27 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v16 = 0;
            if (v27 && v26)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v26);
              uint64_t v16 = *a2;
              uint64_t v15 = a2[1];
            }
          }
          else
          {
            uint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        char v6 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v6 + 1);
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (!v7)
          {
            v29[0] = 0;
LABEL_11:
            uint64_t v12 = *v2;
            uint64_t *v2 = 0;
            (*(void (**)(uint64_t, void *))(*(void *)v12 + 16))(v12, v29);
            uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 8))(v12);
            uint64_t v14 = v29[0];
            v29[0] = 0;
            if (v14) {
              return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref((unsigned int *)(v14 + 48));
            }
            return result;
          }
          uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
          if (v9)
          {
            uint64_t v10 = v8;
            uint64_t v11 = WTF::fastMalloc((WTF *)0x48);
            *(void *)(v11 + 8) = 0;
            *(void *)(v11 + 16) = 0;
            *(_DWORD *)(v11 + 48) = 1;
            *(void *)uint64_t v11 = &unk_1EE9F1E98;
            *(void *)(v11 + 24) = &unk_1EE9F1F00;
            *(void *)(v11 + ++*(_DWORD *)(this + 32) = 0;
            *(void *)(v11 + 40) = &unk_1EE9F1F38;
            *(void *)(v11 + 56) = v10;
            *(void *)(v11 + 64) = 0;
            {
              v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::WebProcess(v28);
            }
            if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 780))
            {
              __break(0xC471u);
              JUMPOUT(0x19917BDF4);
            }
            uint64_t v30 = *(void *)(v11 + 56);
            WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::WebTransportSession,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<WTF::ObjectIdentifierGeneric<WebKit::WebTransportSessionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WebKit::WebTransportSession&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 800), &v30, v11, (uint64_t)v29);
            v29[0] = v11;
            goto LABEL_11;
          }
          goto LABEL_16;
        }
        uint64_t v15 = v5;
        uint64_t v16 = v4;
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v18 = a2[3];
      if (v18 && v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
LABEL_16:
      uint64_t v19 = *a2;
      uint64_t v20 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v21 = a2[3];
      if (v21)
      {
        if (v20)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
          uint64_t v22 = *a2;
          uint64_t v23 = a2[1];
          uint64_t v24 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v24)
          {
            if (v23) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
            }
          }
        }
      }
    }
  }

  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(v2);
}

unsigned int *IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::InitializeWebTransportSession,WebKit::WebTransportSession::initialize(WTF::URL const&,WTF::CompletionHandler<void ()(WTF::RefPtr<WebKit::WebTransportSession,WTF::RawPtrTraits<WebKit::WebTransportSession>,WTF::DefaultRefDerefTraits<WebKit::WebTransportSession>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v1 + 16))(v1, &v4);
  uint64_t result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v4;
  uint64_t v4 = 0;
  if (v3) {
    return WTF::ThreadSafeRefCounted<WebKit::WebTransportSession,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 48));
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WebTransportSessionClient,(WTF::DestructionThread)0>(atomic_uchar *this, void *a2)
{
  uint64_t v2 = this;
  char v3 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v4 = *((void *)v2 + 1);
  int v5 = 1;
  uint64_t v6 = v4 - 1;
  *((void *)v2 + 1) = v4 - 1;
  if (v4 == 1)
  {
    uint64_t v9 = *((void *)v2 + 2);
    uint64_t v7 = *((void *)v2 + 3);
    *((void *)v2 + 3) = 0;
    BOOL v8 = v9 != 0;
  }
  else
  {
    uint64_t v7 = 0;
    BOOL v8 = 1;
  }
  atomic_compare_exchange_strong_explicit(v2, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
  if (v5 == 1)
  {
    if (v6) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v6) {
      return this;
    }
  }
  if (v7) {
    this = (atomic_uchar *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!v8)
  {
    return (atomic_uchar *)WTF::fastFree((WTF *)v2, a2);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::SendDatagram,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F23D8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::SendDatagram,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F23D8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::SendDatagram,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F2400;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2400;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>::call(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 1;
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)&v7, a2), v9))
  {
    if (v8 && (uint64_t v4 = a1[2]) != 0 && *(void *)(v4 + 8))
    {
      WebKit::WebTransportSendStreamSink::create(&v10, *v2, v7);
      uint64_t v11 = v10;
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v6 = a1[3];
    a1[3] = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v11);
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t result = (_DWORD *)v11;
    uint64_t v11 = 0;
    if (result)
    {
      if (result[2] == 1) {
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>((uint64_t)v2);
  }
  return result;
}

_DWORD *IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateOutgoingUnidirectionalStream,WebKit::WebTransportSession::createOutgoingUnidirectionalStream(WTF::CompletionHandler<void ()(WTF::RefPtr<WebCore::WritableStreamSink,WTF::RawPtrTraits<WebCore::WritableStreamSink>,WTF::DefaultRefDerefTraits<WebCore::WritableStreamSink>> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v3 = 0;
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, _DWORD **))(*(void *)v1 + 16))(v1, &v3);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_10;
  }
  char v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_10:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_11;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v5);
    }
    goto LABEL_12;
  }
  if (!v9)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  if (v11)
  {
    LOBYTE(v9) = 1;
LABEL_8:
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = 1;
    return result;
  }
LABEL_12:
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result)
  {
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
      uint64_t v18 = a2[1];
      uint64_t result = a2[3];
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *a2 = 0;
  a2[1] = 0;
  if (result && v18)
  {
    uint64_t v19 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v19();
  }
  return result;
}

unsigned int *WebKit::WebTransportSendStreamSink::create(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v6 + 8) = 1;
  *(void *)uint64_t v6 = &unk_1EE9F1E60;
  uint64_t result = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 32), a2 + 24);
  char v8 = *(atomic_uint **)(a2 + 32);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  *(void *)(v6 + 16) = v8;
  *(void *)(v6 + 24) = a3;
  *a1 = v6;
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F2428;
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2428;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0)#1},void,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>::call(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 1;
  if (a2)
  {
    if (*a2)
    {
      IPC::Decoder::decode<std::tuple<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>((uint64_t)&v33, a2);
      if (v35)
      {
        if (!v34 || (uint64_t v4 = a1[2]) == 0 || !*(void *)(v4 + 8))
        {
          LOBYTE(v39[0]) = 0;
          char v40 = 0;
          uint64_t v21 = a1[3];
          a1[3] = 0;
          (*(void (**)(uint64_t, void *))(*(void *)v21 + 16))(v21, v39);
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          if (!v40) {
            return;
          }
          uint64_t v22 = (WebCore::WebTransportBidirectionalStreamConstructionParameters *)v39;
          goto LABEL_48;
        }
        uint64_t v5 = v33;
        uint64_t v6 = *v2;
        uint64_t v7 = WTF::fastMalloc((WTF *)0x28);
        *(_OWORD *)uint64_t v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(void *)(v7 + ++*(_DWORD *)(this + 32) = 0;
        uint64_t v8 = WebCore::ReadableStreamSource::ReadableStreamSource((WebCore::ReadableStreamSource *)v7);
        *(_DWORD *)(v8 + ++*(_DWORD *)(this + 32) = 1;
        *(void *)uint64_t v8 = &unk_1EE9F2238;
        *(unsigned char *)(v8 + 36) = 0;
        uint64_t v10 = (uint64_t *)(v6 + 64);
        uint64_t v9 = *(void *)(v6 + 64);
        if (v9
          || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v6 + 64)),
              (uint64_t v9 = *v10) != 0))
        {
          int v11 = *(_DWORD *)(v9 - 8);
        }
        else
        {
          int v11 = 0;
        }
        unint64_t v12 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
        unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
        unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
        unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
        uint64_t v16 = (uint64_t *)(v9 + 16 * v15);
        uint64_t v17 = *v16;
        if (*v16)
        {
          uint64_t v18 = 0;
          int v19 = 1;
          while (v17 != v5)
          {
            if (v17 == -1) {
              uint64_t v18 = v16;
            }
            unsigned int v15 = (v15 + v19) & v11;
            uint64_t v16 = (uint64_t *)(v9 + 16 * v15);
            uint64_t v17 = *v16;
            ++v19;
            if (!*v16)
            {
              if (v18)
              {
                *uint64_t v18 = 0;
                v18[1] = 0;
                --*(_DWORD *)(*v10 - 16);
                uint64_t v16 = v18;
              }
              goto LABEL_18;
            }
          }
          ++*(_DWORD *)(v7 + 32);
          uint64_t v23 = (_DWORD *)v16[1];
          v16[1] = v7;
          if (v23)
          {
            if (v23[8] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
            }
            else {
              --v23[8];
            }
          }
          goto LABEL_39;
        }
LABEL_18:
        uint64_t *v16 = v5;
        ++*(_DWORD *)(v7 + 32);
        uint64_t v20 = (_DWORD *)v16[1];
        v16[1] = v7;
        if (v20)
        {
          if (v20[8] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v20 + 8))(v20);
          }
          else {
            --v20[8];
          }
        }
        uint64_t v24 = *v10;
        if (*v10) {
          int v25 = *(_DWORD *)(v24 - 12) + 1;
        }
        else {
          int v25 = 1;
        }
        *(_DWORD *)(v24 - 12) = v25;
        uint64_t v26 = *v10;
        if (*v10) {
          int v27 = *(_DWORD *)(v26 - 12);
        }
        else {
          int v27 = 0;
        }
        uint64_t v28 = (*(_DWORD *)(v26 - 16) + v27);
        unint64_t v29 = *(unsigned int *)(v26 - 4);
        if (v29 > 0x400)
        {
          if (v29 > 2 * v28) {
            goto LABEL_39;
          }
        }
        else if (3 * v29 > 4 * v28)
        {
LABEL_39:
          v39[0] = v7;
          WebKit::WebTransportSendStreamSink::create(&v36, v6, v5);
          uint64_t v37 = v36;
          WebCore::WebTransportBidirectionalStreamConstructionParameters::WebTransportBidirectionalStreamConstructionParameters();
          uint64_t v30 = (_DWORD *)v37;
          uint64_t v37 = 0;
          if (v30)
          {
            if (v30[2] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v30 + 8))(v30);
            }
            else {
              --v30[2];
            }
          }
          uint64_t v31 = v39[0];
          v39[0] = 0;
          if (v31) {
            (*(void (**)(uint64_t))(*(void *)v31 + 24))(v31);
          }
          WebCore::WebTransportBidirectionalStreamConstructionParameters::WebTransportBidirectionalStreamConstructionParameters();
          char v40 = 1;
          uint64_t v32 = a1[3];
          a1[3] = 0;
          (*(void (**)(uint64_t, void *))(*(void *)v32 + 16))(v32, v39);
          (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
          if (v40) {
            WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters((WebCore::WebTransportBidirectionalStreamConstructionParameters *)v39);
          }
          uint64_t v22 = (WebCore::WebTransportBidirectionalStreamConstructionParameters *)&v38;
LABEL_48:
          WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters(v22);
          return;
        }
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(v6 + 64));
        goto LABEL_39;
      }
    }
  }

  IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>((uint64_t)v2);
}

void IPC::Connection::cancelReply<Messages::NetworkTransportSession::CreateBidirectionalStream,WebKit::WebTransportSession::createBidirectionalStream(WTF::CompletionHandler<void ()(std::optional<WebCore::WebTransportBidirectionalStreamConstructionParameters> &&)> &&)::$_0>(uint64_t a1)
{
  v2[0] = 0;
  char v3 = 0;
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v3) {
    WebCore::WebTransportBidirectionalStreamConstructionParameters::~WebTransportBidirectionalStreamConstructionParameters((WebCore::WebTransportBidirectionalStreamConstructionParameters *)v2);
  }
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::Ref<WebKit::WebTransportReceiveStreamSource,WTF::RawPtrTraits<WebKit::WebTransportReceiveStreamSource>,WTF::DefaultRefDerefTraits<WebKit::WebTransportReceiveStreamSource>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebTransportStreamIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    int v3 = *(_DWORD *)(v2 - 4);
    int v4 = *(_DWORD *)(v2 - 12);
    if (v3)
    {
      unsigned int v5 = v3 << (6 * v4 >= (2 * v3));
      goto LABEL_6;
    }
  }
  else
  {
    int v3 = 0;
    int v4 = 0;
  }
  unsigned int v5 = 8;
LABEL_6:
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * v5 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v5;
  *(_DWORD *)(*a1 - 8) = v5 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v4;
  if (v3)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = (uint64_t *)(v2 + 16 * v8);
      uint64_t v10 = *v9;
      if (*v9 != -1)
      {
        if (v10)
        {
          uint64_t v13 = *a1;
          if (*a1) {
            int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            int v14 = 0;
          }
          unint64_t v15 = (v10 + ~(v10 << 32)) ^ ((unint64_t)(v10 + ~(v10 << 32)) >> 22);
          unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
          unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
          unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
          int v19 = 1;
          do
          {
            unsigned int v20 = v18;
            uint64_t v21 = *(void *)(v13 + 16 * v18);
            unsigned int v18 = (v18 + v19++) & v14;
          }
          while (v21);
          uint64_t v22 = (uint64_t *)(v13 + 16 * v20);
          uint64_t v23 = (_DWORD *)v22[1];
          v22[1] = 0;
          if (v23)
          {
            if (v23[8] == 1) {
              (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
            }
            else {
              --v23[8];
            }
          }
          *uint64_t v22 = *v9;
          uint64_t v24 = v2 + 16 * v8;
          uint64_t v25 = *(void *)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          v22[1] = v25;
          unint64_t v12 = *(_DWORD **)(v24 + 8);
          *(void *)(v24 + 8) = 0;
          if (!v12) {
            goto LABEL_27;
          }
          if (v12[8] == 1)
          {
LABEL_26:
            (*(void (**)(_DWORD *))(*(void *)v12 + 8))(v12);
            goto LABEL_27;
          }
          --v12[8];
        }
        else
        {
          uint64_t v11 = v2 + 16 * v8;
          unint64_t v12 = *(_DWORD **)(v11 + 8);
          *(void *)(v11 + 8) = 0;
          if (v12)
          {
            if (v12[8] == 1) {
              goto LABEL_26;
            }
            --v12[8];
          }
        }
      }
LABEL_27:
      if (++v8 == v3) {
        goto LABEL_30;
      }
    }
  }
  if (v2)
  {
LABEL_30:
    return WTF::fastFree((WTF *)(v2 - 16), v7);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::StreamSendBytes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F2450;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::StreamSendBytes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F2450;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkTransportSession::StreamSendBytes,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F2478;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F2478;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F24A0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F24A0;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::CreateAndResolve(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F24C8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F24C8;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F24F0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 24))(1, a1 + 8, a1 + 8);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F24F0;
  (*((void (**)(uint64_t, uint64_t, uint64_t))a1 + 3))(1, (uint64_t)a1 + 8, (uint64_t)a1 + 8);

  return WTF::fastFree(a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCDnsResolverFactory::Resolver::Start(rtc::SocketAddress const&,int,absl::AnyInvocable<void ()(void)>)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a1 + 8);
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) + 24;
  uint64_t v13 = 0;
  uint64_t result = WebKit::LibWebRTCSocketFactory::setConnection(v1, &v13);
  uint64_t v3 = v13;
  uint64_t v13 = 0;
  if (v3)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      uint64_t result = (atomic_uchar *volatile **)MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v12 = *((void *)v5 + 2);
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      BOOL v8 = v12 == 0;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v7) {
        return result;
      }
    }
    else
    {
      uint64_t result = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        return result;
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9B37E8;
    *(void *)(v11 + 8) = v5;
    *(void *)(v11 + 16) = v9;
    *(unsigned char *)(v11 + 24) = v8;
    int v14 = (atomic_uchar *volatile **)v11;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v14;
    int v14 = 0;
    if (result) {
      return (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*result + 1))(result);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CreateRTCProvider,WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1>(WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F2540;
  uint64_t v2 = (atomic_uchar *volatile *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = v5 - 1;
    *((void *)v4 + 1) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v12 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 3);
      *((void *)v4 + 3) = 0;
      BOOL v7 = v12 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        return a1;
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + 16) = v8;
    *(unsigned char *)(v10 + 24) = v7;
    uint64_t v13 = v10;
    WTF::ensureOnMainRunLoop();
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CreateRTCProvider,WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1>(WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2540;
  char v3 = (atomic_uchar *volatile *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v13 = *((void *)v5 + 2);
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      BOOL v8 = v13 == 0;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v7) {
        return WTF::fastFree(this, a2);
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        return WTF::fastFree(this, a2);
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9B37E8;
    *(void *)(v11 + 8) = v5;
    *(void *)(v11 + 16) = v9;
    *(unsigned char *)(v11 + 24) = v8;
    uint64_t v14 = v11;
    WTF::ensureOnMainRunLoop();
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::CreateRTCProvider,WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1>(WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(result + 16) + 33));
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 16);
    *(void *)(result + 16) = 0;
    char v4 = (void *)WTF::fastMalloc((WTF *)0x18);
    *char v4 = &unk_1EE9F2568;
    v4[1] = v1;
    v4[2] = v3;
    atomic_uchar *volatile v5 = v4;
    WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
    uint64_t result = (uint64_t)v5;
    if (v5) {
      return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F2568;
  unsigned __int8 v2 = (atomic_uchar *volatile *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = v5 - 1;
    *((void *)v4 + 1) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v12 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 3);
      *((void *)v4 + 3) = 0;
      BOOL v7 = v12 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        return a1;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        return a1;
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + 8) = v4;
    *(void *)(v10 + 16) = v8;
    *(unsigned char *)(v10 + 24) = v7;
    uint64_t v13 = v10;
    WTF::ensureOnMainRunLoop();
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2568;
  char v3 = (atomic_uchar *volatile *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    char v4 = 0;
    atomic_uchar *volatile v5 = *v3;
    atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
    if (v4) {
      MEMORY[0x19972E8D0](v5);
    }
    uint64_t v6 = *((void *)v5 + 1);
    uint64_t v7 = v6 - 1;
    *((void *)v5 + 1) = v6 - 1;
    if (v6 == 1)
    {
      uint64_t v13 = *((void *)v5 + 2);
      uint64_t v9 = *((void *)v5 + 3);
      *((void *)v5 + 3) = 0;
      BOOL v8 = v13 == 0;
    }
    else
    {
      BOOL v8 = 0;
      uint64_t v9 = 0;
    }
    int v10 = 1;
    atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
    if (v10 == 1)
    {
      if (v7) {
        return WTF::fastFree(this, a2);
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v5);
      if (v7) {
        return WTF::fastFree(this, a2);
      }
    }
    uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v11 = &unk_1EE9B37E8;
    *(void *)(v11 + 8) = v5;
    *(void *)(v11 + 16) = v9;
    *(unsigned char *)(v11 + 24) = v8;
    uint64_t v14 = v11;
    WTF::ensureOnMainRunLoop();
    if (v14) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  return WTF::fastFree(this, a2);
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetwork::setSocketFactoryConnection(void)::$_1::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebKit::LibWebRTCSocketFactory::setConnection(*(void *)(a1 + 8) + 24, (atomic_uchar *volatile **)(a1 + 16));
}

uint64_t WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    unsigned int v4 = *(_DWORD *)(v2 - 8);
    int v22 = -1640531527;
    __int16 v23 = 0;
    char v24 = 0;
    WTF::addArgs<WTF::UUID>(&v22, a2);
    int v5 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v22);
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    uint64_t v8 = a2[2];
    unsigned int v9 = v5 & v4;
    int v10 = (uint64_t *)(v2 + 48 * (v5 & v4));
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    BOOL v13 = v12 == v7 && v11 == v6;
    uint64_t v14 = v10[2];
    if (v13 && v14 == v8)
    {
LABEL_20:
      uint64_t v20 = *(void *)(v2 + 48 * v9 + 32);
      if (v20) {
        return *(void *)(v20 + 8);
      }
    }
    else
    {
      int v16 = 1;
      while (v11 | v12 || v14)
      {
        unsigned int v9 = (v9 + v16) & v4;
        unint64_t v17 = (uint64_t *)(v2 + 48 * v9);
        uint64_t v11 = *v17;
        uint64_t v12 = v17[1];
        BOOL v18 = v12 == v7 && v11 == v6;
        uint64_t v14 = v17[2];
        ++v16;
        if (v18 && v14 == v8) {
          goto LABEL_20;
        }
      }
    }
  }
  return 0;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9F2590;
    *((void *)v2 + 1) = v1;
    char v3 = v2;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::signalUsedInterface(WebCore::ProcessQualified<WTF::UUID>,WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F25B8;
  char v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::signalUsedInterface(WebCore::ProcessQualified<WTF::UUID>,WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F25B8;
  char v3 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::signalUsedInterface(WebCore::ProcessQualified<WTF::UUID>,WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  long long v2 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v2;
  uint64_t v3 = WebKit::LibWebRTCNetworkManager::getOrCreate((WebCore::Document *)v5);
  if (v3) {
    WebKit::LibWebRTCNetworkManager::signalUsedInterface(v3, (WTF::StringImpl **)(a1 + 48), v4);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F25E0;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F25E0;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0,void>::call(IPC::Encoder *result)
{
  uint64_t v1 = *((void *)result + 2);
  if (v1 && *(void *)(v1 + 8))
  {
    uint64_t v2 = *((void *)result + 1);
    {
      uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v6);
    }
    WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    unsigned int v4 = (WebKit::WebRTCMonitor *)(v3 + 88);
    if (*(unsigned char *)(v2 + 353))
    {
      atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
      int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
      void *v5 = &unk_1EE9F2608;
      v5[1] = v2;
      _OWORD v5[2] = v2;
      uint64_t v7 = v5;
      WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
      if (v7) {
        (*(void (**)(void *))(*v7 + 8))(v7);
      }
    }
    else if (*(unsigned char *)(v3 + 112))
    {
      *(unsigned char *)(v2 + 353) = 1;
      WebKit::LibWebRTCNetworkManager::networksChanged(v2, (int *)(v3 + 120), (int *)(v3 + 136), (int *)(v3 + 156), 1);
    }
    return WebKit::WebRTCMonitor::startUpdating(v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F2608;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0::operator() const(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2608;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StartUpdating(void)::$_0::operator() const(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v1 + 56);
  *(void *)(v1 + 72) = result;
  while (result != v1 + 48)
  {
    uint64_t v3 = *(void (**)(void))(result + 16);
    *(void *)(v1 + 72) = *(void *)(result + 8);
    v3();
    uint64_t result = *(void *)(v1 + 72);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StopUpdating(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F2630;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StopUpdating(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F2630;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::StopUpdating(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 && *(void *)(v1 + 8))
  {
    {
      unsigned int v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v4);
    }
    WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v3 = (WebKit::WebRTCMonitor *)(v2 + 88);
    WebKit::WebRTCMonitor::stopUpdating(v3);
  }
}

unsigned int *WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct((WTF *)(*(void *)result + 96 * this), (WTF *)(*(void *)result + 96 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    int v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x2AAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x19917E464);
      }
      uint64_t v6 = (WTF *)(96 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + 8) = (v6 & 0xFFFFFFE0) / 0x60;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebKit::RTCNetwork>::move(v5, (WTF *)((char *)v5 + 96 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF *WTF::VectorMover<false,WebKit::RTCNetwork>::move(WTF *result, WTF *a2, uint64_t a3)
{
  if (result != a2)
  {
    int v5 = result;
    do
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      uint64_t v6 = *(WTF **)v5;
      *(void *)int v5 = 0;
      *(void *)a3 = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 2);
      *((_DWORD *)v5 + 2) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *((_DWORD *)v5 + 3);
      *((_DWORD *)v5 + 3) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      uint64_t v7 = *((void *)v5 + 2);
      *((void *)v5 + 2) = 0;
      *(void *)(a3 + 16) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 6);
      *((_DWORD *)v5 + 6) = 0;
      *(_DWORD *)(a3 + 24) = v7;
      LODWORD(v7) = *((_DWORD *)v5 + 7);
      *((_DWORD *)v5 + 7) = 0;
      *(_DWORD *)(a3 + 28) = v7;
      long long v8 = *((_OWORD *)v5 + 2);
      long long v9 = *((_OWORD *)v5 + 3);
      *(_OWORD *)(a3 + 60) = *(_OWORD *)((char *)v5 + 60);
      *(_OWORD *)(a3 + ++*(_DWORD *)(this + 32) = v8;
      *(_OWORD *)(a3 + 48) = v9;
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      uint64_t v10 = *((void *)v5 + 10);
      *((void *)v5 + 10) = 0;
      *(void *)(a3 + 80) = v10;
      LODWORD(v10) = *((_DWORD *)v5 + 22);
      *((_DWORD *)v5 + 22) = 0;
      *(_DWORD *)(a3 + 88) = v10;
      LODWORD(v10) = *((_DWORD *)v5 + 23);
      *((_DWORD *)v5 + 23) = 0;
      *(_DWORD *)(a3 + 92) = v10;
      uint64_t v11 = (WTF *)*((void *)v5 + 10);
      if (v11)
      {
        *((void *)v5 + 10) = 0;
        *((_DWORD *)v5 + 22) = 0;
        WTF::fastFree(v11, a2);
      }
      uint64_t v12 = (WTF *)*((void *)v5 + 2);
      if (v12)
      {
        *((void *)v5 + 2) = 0;
        *((_DWORD *)v5 + 6) = 0;
        WTF::fastFree(v12, a2);
      }
      uint64_t result = *(WTF **)v5;
      if (*(void *)v5)
      {
        *(void *)int v5 = 0;
        *((_DWORD *)v5 + 2) = 0;
        uint64_t result = (WTF *)WTF::fastFree(result, a2);
      }
      int v5 = (WTF *)((char *)v5 + 96);
      a3 += 96;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  if (*(unsigned int *)(result + 8) >= a2) {
    return 1;
  }
  if (a2 < 0x2AAAAAB)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(WTF **)result;
    unint64_t v4 = (WTF *)(*(void *)result + 96 * *(unsigned int *)(result + 12));
    int v5 = 96 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(96 * a2));
    *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFE0) / 0x60;
    *(void *)uint64_t v2 = v6;
    WTF::VectorMover<false,WebKit::RTCNetwork>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  if (a2 != (const void **)a1)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 12);
    unsigned int v5 = *((_DWORD *)a2 + 3);
    if (v4 <= v5)
    {
      unsigned int v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4) {
            *(_DWORD *)(a1 + 12) = 0;
          }
          uint64_t v7 = *(WTF **)a1;
          if (*(void *)a1)
          {
            *(void *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v7, a2);
          }
        }
        WTF::Vector<char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, (WTF *)*((unsigned int *)a2 + 3));
        unsigned int v4 = *(_DWORD *)(a1 + 12);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 12) = v5;
      unsigned int v4 = v5;
    }
    if (v4)
    {
      memmove(*(void **)a1, *a2, v4);
      uint64_t v8 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      uint64_t v8 = 0;
    }
    memcpy((void *)(*(void *)a1 + v8), (char *)*a2 + v8, (unsigned char *)*a2 + *((unsigned int *)a2 + 3) - ((unsigned char *)*a2 + v8));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F2658;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F2658;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::String>>(a2, (uint64_t)&v10);
    if (v11)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      if (!v5) {
        goto LABEL_9;
      }
      uint64_t v6 = *(void *)(v5 + 8);
      if (!v6) {
        goto LABEL_9;
      }
      uint64_t v7 = (unsigned int *)(v6 - 288);
      atomic_fetch_add((atomic_uint *volatile)(v6 - 288), 1u);
      if (v10) {
        WebKit::LibWebRTCNetworkManager::signalUsedInterface(v6 - 296, &v10, v4);
      }
      uint64_t result = (WTF::StringImpl *)WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(v7);
      if (v11)
      {
LABEL_9:
        uint64_t result = v10;
        uint64_t v10 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(*(WTF::StringImpl **)(a1 + 8));
    }
  }
  else
  {
    long long v9 = *(WTF::StringImpl **)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(v9);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkRTCProvider::GetInterfaceName,WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_0>(WTF::StringImpl *result)
{
  uint64_t v3 = 0;
  if (result)
  {
    uint64_t v1 = *((void *)result + 1);
    if (v1)
    {
      atomic_fetch_add((atomic_uint *volatile)(v1 - 288), 1u);
      WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v1 - 288));
      uint64_t result = v3;
      uint64_t v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

unint64_t WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 96 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_2,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F2680;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_2,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F2680;
  WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v4 = *((void *)a1 + 2);
  *((void *)a1 + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v4 + 8));
  }

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networksChanged(WTF::Vector<WebKit::RTCNetwork,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebKit::RTC::Network::IPAddress const&,WebKit::RTC::Network::IPAddress const&,BOOL)::$_2,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(unsigned int *)(a1 + 36);
  if (v3)
  {
    uint64_t v4 = operator new(8 * v3);
    bzero(v4, 8 * v3);
    WebKit::RTCNetwork::value(*(WebKit::RTCNetwork **)(a1 + 24), (uint64_t)v9);
    operator new();
  }
  char v8 = 0;
  WebKit::RTC::Network::IPAddress::rtcAddress((int *)(a1 + 40), (uint64_t)v9);
  WebKit::RTC::Network::IPAddress::rtcAddress((int *)(a1 + 60), (uint64_t)v7);
  rtc::NetworkManagerBase::set_default_local_addresses((rtc::NetworkManagerBase *)(v2 + 2), (const rtc::IPAddress *)v9, (const rtc::IPAddress *)v7);
  memset(v7, 0, 24);
  memset(v9, 0, 24);
  rtc::NetworkManagerBase::MergeNetworkList();
  unint64_t v10 = (void **)v7;
  std::vector<std::unique_ptr<rtc::Network>>::__destroy_vector::operator()[abi:sn180100](&v10);
  if (v8 || *(unsigned char *)(a1 + 80))
  {
    uint64_t v5 = v2[7];
    v2[9] = v5;
    while ((void *)v5 != v2 + 6)
    {
      uint64_t v6 = *(void (**)(void))(v5 + 16);
      v2[9] = *(void *)(v5 + 8);
      v6();
      uint64_t v5 = v2[9];
    }
  }
  unint64_t v10 = (void **)v9;
  std::vector<std::unique_ptr<rtc::Network>>::__destroy_vector::operator()[abi:sn180100](&v10);
}

void std::vector<std::unique_ptr<rtc::Network>>::__destroy_vector::operator()[abi:sn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<rtc::Network>::reset[abi:sn180100](--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networkProcessCrashed(void)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F26A8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networkProcessCrashed(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F26A8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref((unsigned int *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::networkProcessCrashed(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v1 + 56);
  *(void *)(v1 + 72) = result;
  while (result != v1 + 48)
  {
    uint64_t v3 = *(void (**)(void))(result + 16);
    *(void *)(v1 + 72) = *(void *)(result + 8);
    v3();
    uint64_t result = *(void *)(v1 + 72);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::__value_func[abi:sn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::CreateNameForAddress(rtc::IPAddress const&,std::function<void ()(rtc::IPAddress const&,std::string_view)>)::$_0,void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F26D0;
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100](a1 + 6);
  uint64_t v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::CreateNameForAddress(rtc::IPAddress const&,std::function<void ()(rtc::IPAddress const&,std::string_view)>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F26D0;
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100]((void *)a1 + 6);
  uint64_t v3 = (unsigned int *)*((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, v2);
  }

  return WTF::fastFree(a1, v2);
}

void WTF::Detail::CallableWrapper<WebKit::LibWebRTCNetworkManager::CreateNameForAddress(rtc::IPAddress const&,std::function<void ()(rtc::IPAddress const&,std::string_view)>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1 && *(void *)(v1 + 8))
  {
    {
      BOOL v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v13);
    }
    WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    uint64_t v4 = (uint64_t *)(v3 + 176);
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        uint64_t v5 = v6 - 296;
      }
      else {
        uint64_t v5 = 0;
      }
    }
    long long v7 = *(_OWORD *)(v5 + 336);
    v22[0] = *(_OWORD *)(v5 + 320);
    v22[1] = v7;
    rtc::IPAddress::ToString((uint64_t *)&__p, (rtc::IPAddress *)(a1 + 16));
    WTF::String::fromUTF8();
    v17[1] = (WTF::StringImpl *)&unk_1EE9BD6E8;
    int v18 = *(_DWORD *)(a1 + 24);
    long long v19 = *(_OWORD *)(a1 + 28);
    std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::__value_func[abi:sn180100]((uint64_t)v20, a1 + 48);
    uint64_t v8 = WTF::fastMalloc((WTF *)0x48);
    uint64_t v9 = v8;
    *(void *)uint64_t v8 = &unk_1EE9F26F8;
    *(void *)(v8 + 8) = &unk_1EE9BD6E8;
    *(_DWORD *)(v8 + 16) = v18;
    *(_OWORD *)(v8 + 20) = v19;
    if (v21)
    {
      if (v21 == v20)
      {
        *(void *)(v8 + 64) = v8 + 40;
        (*(void (**)(void *))(v20[0] + 24))(v20);
      }
      else
      {
        *(void *)(v8 + 64) = v21;
        uint64_t v21 = 0;
      }
    }
    else
    {
      *(void *)(v8 + 64) = 0;
    }
    uint64_t v14 = v9;
    WebKit::WebMDNSRegister::registerMDNSName(v4, (uint64_t *)v22, v17, &v14);
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100](v20);
    uint64_t v12 = v17[0];
    v17[0] = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2) {
        WTF::StringImpl::destroy(v12, v11);
      }
      else {
        *(_DWORD *)v12 -= 2;
      }
    }
    if (v16 < 0) {
      operator delete(__p);
    }
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvEUlT_T0_E_vJRKNS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEED1Ev(void *a1)
{
  *a1 = &unk_1EE9F26F8;
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100](a1 + 5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvEUlT_T0_E_vJRKNS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEED0Ev(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F26F8;
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100]((void *)a1 + 5);

  return WTF::fastFree(a1, v2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvEUlT_T0_E_vJRKNS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEE4callESM_SQ_(uint64_t a1, WTF::StringImpl **a2, __int16 a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a2;
  if (*a2) {
    *(_DWORD *)v4 += 2;
  }
  uint64_t v12 = v4;
  int v13 = *(_DWORD *)(a1 + 16);
  long long v14 = *(_OWORD *)(a1 + 20);
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::__value_func[abi:sn180100]((uint64_t)v15, a1 + 40);
  WTF::String::isolatedCopy();
  __int16 v18 = a3;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x58);
  uint64_t v6 = v5;
  *(void *)uint64_t v5 = &unk_1EE9F2720;
  *(void *)(v5 + 8) = &unk_1EE9BD6E8;
  *(_DWORD *)(v5 + 16) = v13;
  *(_OWORD *)(v5 + 20) = v14;
  if (v16)
  {
    if (v16 == v15)
    {
      *(void *)(v5 + 64) = v5 + 40;
      (*(void (**)(void *))(v15[0] + 24))(v15);
    }
    else
    {
      *(void *)(v5 + 64) = v16;
      char v16 = 0;
    }
  }
  else
  {
    *(void *)(v5 + 64) = 0;
  }
  long long v7 = v17;
  unint64_t v17 = 0;
  *(void *)(v6 + 72) = v7;
  *(_WORD *)(v6 + 80) = v18;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v9 = v17;
  unint64_t v17 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2) {
      WTF::StringImpl::destroy(v9, v8);
    }
    else {
      *(_DWORD *)v9 -= 2;
    }
  }
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100](v15);
  uint64_t result = (uint64_t)v12;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      return WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvENUlT_T0_E_clINS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEEDaSH_SI_EUlvE_vJEED1Ev(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F2720;
  uint64_t v3 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100](a1 + 5);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvENUlT_T0_E_clINS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEEDaSH_SI_EUlvE_vJEED0Ev(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F2720;
  uint64_t v3 = (WTF::StringImpl *)*((void *)a1 + 9);
  *((void *)a1 + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  std::__function::__value_func<void ()(rtc::IPAddress const&,std::string_view)>::~__value_func[abi:sn180100]((void *)a1 + 5);

  return WTF::fastFree(a1, v4);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit23LibWebRTCNetworkManager20CreateNameForAddressERKN3rtc9IPAddressENSt3__18functionIFvS7_NS8_17basic_string_viewIcNS8_11char_traitsIcEEEEEEEEN3__0clEvENUlT_T0_E_clINS_6StringENS8_8optionalIN7WebCore17MDNSRegisterErrorEEEEEDaSH_SI_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 81))
  {
    uint64_t v6 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      int v7 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v7;
      _os_log_error_impl(&dword_1985F2000, v6, OS_LOG_TYPE_ERROR, "MDNS registration of a host candidate failed with error %hhu", buf, 8u);
    }
  }
  WTF::String::utf8();
  if (!v8)
  {
    __break(1u);
LABEL_12:
    std::__throw_bad_function_call[abi:sn180100]();
  }
  size_t v2 = strlen(v8 + 16);
  uint64_t v3 = *(void *)(a1 + 64);
  *(void *)buf = v8 + 16;
  size_t v10 = v2;
  if (!v3) {
    goto LABEL_12;
  }
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v3 + 48))(v3, a1 + 8, buf);
  uint64_t result = (uint64_t)v8;
  if (*(_DWORD *)v8 == 1) {
    return WTF::fastFree((WTF *)v8, v4);
  }
  --*(_DWORD *)v8;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCSocketFactory::suspend(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v3 = (void **)(v2 + 24);
  long long v4 = *(_OWORD *)(a1 + 32);
  v10[0] = *(_OWORD *)(a1 + 16);
  v10[1] = v4;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v5 = &unk_1EE9F2770;
  uint64_t v9 = v5;
  WebKit::LibWebRTCSocketFactory::forSocketInGroup(v3, v10, (uint64_t)&v9);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

IPC::Encoder *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit16RTCSocketFactory7suspendEvENK3__0clEvEUlRT_E_vJRNS2_15LibWebRTCSocketEEE4callES9_(uint64_t a1, IPC::Encoder *a2)
{
  return WebKit::LibWebRTCSocket::suspend(a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCSocketFactory::resume(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v3 = (void **)(v2 + 24);
  long long v4 = *(_OWORD *)(a1 + 32);
  v10[0] = *(_OWORD *)(a1 + 16);
  v10[1] = v4;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v5 = &unk_1EE9F27C0;
  uint64_t v9 = v5;
  WebKit::LibWebRTCSocketFactory::forSocketInGroup(v3, v10, (uint64_t)&v9);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v6(v5);
}

void _ZN3WTF6Detail15CallableWrapperIZZN6WebKit16RTCSocketFactory6resumeEvENK3__0clEvEUlRT_E_vJRNS2_15LibWebRTCSocketEEE4callES9_(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 584) = 0;
}

uint64_t WebKit::LibWebRTCResolver::sendOnMainThread(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9F2A70;
  v2[1] = v1;
  long long v4 = v2;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
  }
  return result;
}

void WebKit::LibWebRTCResolver::~LibWebRTCResolver(WebKit::LibWebRTCResolver *this)
{
  {
    uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v30);
  }
  WebKit::WebProcess::libWebRTCNetwork((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v6 = *(void *)(v3 + 32);
  long long v4 = (uint64_t *)(v3 + 32);
  uint64_t v5 = v6;
  if (v6)
  {
    uint64_t v7 = *((void *)this + 3);
    unsigned int v8 = *(_DWORD *)(v5 - 8);
    unint64_t v9 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
    unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    uint64_t v12 = v8 & ((v11 >> 31) ^ v11);
    uint64_t v13 = *(void *)(v5 + 16 * v12);
    if (v13 != v7)
    {
      int v14 = 1;
      while (v13)
      {
        uint64_t v12 = (v12 + v14) & v8;
        uint64_t v13 = *(void *)(v5 + 16 * v12);
        ++v14;
        if (v13 == v7) {
          goto LABEL_9;
        }
      }
      uint64_t v12 = *(unsigned int *)(v5 - 4);
    }
LABEL_9:
    if (v12 != *(_DWORD *)(v5 - 4))
    {
      unint64_t v15 = (void *)(v5 + 16 * v12);
      char v16 = (unsigned int *)v15[1];
      *unint64_t v15 = -1;
      v15[1] = 0;
      if (v16 && atomic_fetch_add((atomic_uint *volatile)v16, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v16);
        uint64_t v31 = v4;
        WTF::fastFree((WTF *)v16, v2);
        long long v4 = v31;
      }
      ++*(_DWORD *)(*v4 - 16);
      uint64_t v17 = *v4;
      if (*v4) {
        int v18 = *(_DWORD *)(v17 - 12) - 1;
      }
      else {
        int v18 = -1;
      }
      *(_DWORD *)(v17 - 12) = v18;
      uint64_t v19 = *v4;
      if (*v4)
      {
        unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
        unsigned int v21 = *(_DWORD *)(v19 - 4);
        if (v20 < v21 && v21 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::rehash(v4, v21 >> 1, 0);
        }
      }
    }
  }
  uint64_t v23 = *((void *)this + 3);
  char v24 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v24 = &unk_1EE9F2A98;
  v24[1] = v23;
  uint64_t v32 = v24;
  WebKit::LibWebRTCResolver::sendOnMainThread((uint64_t *)&v32);
  if (v32) {
    (*(void (**)(void *))(*v32 + 8))(v32);
  }
  uint64_t v26 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 32, v25);
  uint64_t v28 = *((void *)this + 2);
  if (v28)
  {
    *(void *)(v28 + 8) = 0;
    unint64_t v29 = (unsigned int *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v29)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v27);
      }
    }
  }
  else
  {
    *((void *)this + 2) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::LibWebRTCResolver::~LibWebRTCResolver(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::LibWebRTCResolver::~LibWebRTCResolver(WebKit::LibWebRTCResolver *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::LibWebRTCResolver::~LibWebRTCResolver((WebKit::LibWebRTCResolver *)((char *)this - 8));

  WTF::fastFree(v1, v2);
}

void WebKit::LibWebRTCResolver::start(uint64_t a1, rtc::SocketAddress *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  rtc::SocketAddress::operator=();
  *(_WORD *)(a1 + 1++*(_DWORD *)(this + 32) = rtc::SocketAddress::port(a2);
  rtc::SocketAddress::HostAsURIString((uint64_t *)&__p, a2);
  WTF::String::String();
  if (v16 && WTF::StringImpl::endsWithIgnoringASCIICase() && (WTF::isVersion4UUID() & 1) == 0)
  {
    unint64_t v11 = qword_1EB358820;
    if (os_log_type_enabled((os_log_t)qword_1EB358820, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl(&dword_1985F2000, v11, OS_LOG_TYPE_ERROR, "mDNS candidate is not a Version 4 UUID", (uint8_t *)&v13, 2u);
    }
    *(_DWORD *)(a1 + 128) = -1;
    (*(void (**)(void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120));
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 24);
    WTF::String::isolatedCopy();
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v7 = &unk_1EE9F2AC0;
    v7[1] = v13;
    unsigned int v8 = v14;
    int v14 = 0;
    v7[2] = v8;
    unint64_t v15 = v7;
    WebKit::LibWebRTCResolver::sendOnMainThread((uint64_t *)&v15);
    if (v15) {
      (*(void (**)(void *))(*v15 + 8))(v15);
    }
    unint64_t v10 = v14;
    int v14 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  uint64_t v12 = v16;
  char v16 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v9);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  if (v18 < 0) {
    operator delete(__p);
  }
}

uint64_t WebKit::LibWebRTCResolver::result(WebKit::LibWebRTCResolver *this)
{
  return (uint64_t)this + 8;
}

uint64_t WebKit::LibWebRTCResolver::GetResolvedAddress(WebKit::LibWebRTCResolver *this, int a2, rtc::SocketAddress *a3)
{
  if (*((_DWORD *)this + 32)) {
    return 0;
  }
  if (!*((_DWORD *)this + 11)) {
    return 0;
  }
  rtc::SocketAddress::operator=();
  uint64_t v7 = *((unsigned int *)this + 11);
  if (!v7) {
    return 0;
  }
  unsigned int v8 = (const rtc::IPAddress *)*((void *)this + 4);
  uint64_t v9 = 32 * v7;
  while (*((_DWORD *)v8 + 2) != a2)
  {
    unsigned int v8 = (const rtc::IPAddress *)((char *)v8 + 32);
    v9 -= 32;
    if (!v9) {
      return 0;
    }
  }
  rtc::SocketAddress::SetResolvedIP(a3, v8);
  rtc::SocketAddress::SetPort(a3);
  return 1;
}

uint64_t non-virtual thunk to'WebKit::LibWebRTCResolver::GetResolvedAddress(WebKit::LibWebRTCResolver *this, int a2, rtc::SocketAddress *a3)
{
  return WebKit::LibWebRTCResolver::GetResolvedAddress((WebKit::LibWebRTCResolver *)((char *)this - 8), a2, a3);
}

uint64_t WebKit::LibWebRTCSocket::LibWebRTCSocket(uint64_t a1, uint64_t a2, _OWORD *a3, int a4, const rtc::SocketAddress *a5, const rtc::SocketAddress *a6)
{
  *(void *)(a1 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(void *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(void *)(a1 + ++*(_DWORD *)(this + 32) = a1 + 40;
  *(void *)a1 = MEMORY[0x1E4FB6198] + 16;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(void *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(void *)(a1 + 72) = a1 + 72;
  *(void *)(a1 + 80) = a1 + 72;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 72;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(void *)(a1 + 120) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(void *)(a1 + 128) = a1 + 128;
  *(void *)(a1 + 136) = a1 + 128;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 128;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(void *)(a1 + 176) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(void *)(a1 + 184) = a1 + 184;
  *(void *)(a1 + 192) = a1 + 184;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a1 + 184;
  *(unsigned char *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(void *)(a1 + 2++*(_DWORD *)(this + 32) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(void *)(a1 + 240) = a1 + 240;
  *(void *)(a1 + 248) = a1 + 240;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = a1 + 240;
  *(unsigned char *)(a1 + 272) = 0;
  webrtc::callback_list_impl::CallbackListReceivers::CallbackListReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(a1 + 280));
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = absl::internal_any_invocable::EmptyManager;
  *(void *)(a1 + 352) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(void *)(a1 + 360) = a2;
  *(void *)a1 = &unk_1EE9F28C0;
  *(_DWORD *)(a1 + 368) = a4;
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(a1 + 376), a5);
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)(a1 + 448), a6);
  *(void *)(a1 + 520) = 0x100000000;
  uint64_t v13 = 528;
  do
  {
    int v14 = (unsigned char *)(a1 + v13);
    unsigned char *v14 = 0;
    v14[4] = 0;
    v13 += 8;
  }
  while (v14 + 8 != (unsigned char *)(a1 + 584));
  *(unsigned char *)(a1 + 584) = 0;
  long long v15 = a3[1];
  *(_OWORD *)(a1 + 592) = *a3;
  *(_OWORD *)(a1 + 608) = v15;
  uint64_t v17 = *(void *)(a1 + 352);
  char v16 = *(uint64_t **)(a1 + 360);
  uint64_t v18 = *v16;
  if (*v16
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(*(uint64_t **)(a1 + 360)),
        (uint64_t v18 = *v16) != 0))
  {
    int v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    int v19 = 0;
  }
  unint64_t v20 = (v17 + ~(v17 << 32)) ^ ((unint64_t)(v17 + ~(v17 << 32)) >> 22);
  unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  unsigned int v23 = v19 & ((v22 >> 31) ^ v22);
  char v24 = (void *)(v18 + 16 * v23);
  uint64_t v25 = *v24;
  if (!*v24)
  {
LABEL_14:
    *char v24 = v17;
    if (!*(void *)(a1 + 344))
    {
      uint64_t v28 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)uint64_t v28 = 1;
      *(void *)(v28 + 8) = a1;
      unint64_t v29 = *(unsigned int **)(a1 + 344);
      *(void *)(a1 + 344) = v28;
      if (v29)
      {
        if (atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v29);
          WTF::fastFree((WTF *)v29, v12);
        }
      }
    }
    uint64_t v30 = *(atomic_uint **)(a1 + 344);
    atomic_fetch_add(v30, 1u);
    uint64_t v31 = (unsigned int *)v24[1];
    v24[1] = v30;
    if (v31 && atomic_fetch_add((atomic_uint *volatile)v31, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v31);
      WTF::fastFree((WTF *)v31, v12);
    }
    uint64_t v32 = *v16;
    if (*v16) {
      int v33 = *(_DWORD *)(v32 - 12) + 1;
    }
    else {
      int v33 = 1;
    }
    *(_DWORD *)(v32 - 12) = v33;
    uint64_t v34 = *v16;
    if (*v16) {
      int v35 = *(_DWORD *)(v34 - 12);
    }
    else {
      int v35 = 0;
    }
    uint64_t v36 = (*(_DWORD *)(v34 - 16) + v35);
    unint64_t v37 = *(unsigned int *)(v34 - 4);
    if (v37 > 0x400)
    {
      if (v37 > 2 * v36) {
        return a1;
      }
    }
    else if (3 * v37 > 4 * v36)
    {
      return a1;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v16);
    return a1;
  }
  uint64_t v26 = 0;
  int v27 = 1;
  while (v25 != v17)
  {
    if (v25 == -1) {
      uint64_t v26 = v24;
    }
    unsigned int v23 = (v23 + v27) & v19;
    char v24 = (void *)(v18 + 16 * v23);
    uint64_t v25 = *v24;
    ++v27;
    if (!*v24)
    {
      if (v26)
      {
        *uint64_t v26 = 0;
        v26[1] = 0;
        --*(_DWORD *)(*v16 - 16);
        char v24 = v26;
      }
      goto LABEL_14;
    }
  }
  return a1;
}

void WebKit::LibWebRTCSocket::~LibWebRTCSocket(void **this)
{
  WebKit::LibWebRTCSocket::Close((WebKit::LibWebRTCSocket *)this);
  uint64_t v3 = (uint64_t *)this[45];
  uint64_t v4 = *v3;
  if (*v3)
  {
    uint64_t v5 = this[44];
    unsigned int v6 = *(_DWORD *)(v4 - 8);
    unint64_t v7 = ((unint64_t)v5 + ~((void)v5 << 32)) ^ (((unint64_t)v5 + ~((void)v5 << 32)) >> 22);
    unint64_t v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    unint64_t v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    uint64_t v10 = v6 & ((v9 >> 31) ^ v9);
    unint64_t v11 = *(void **)(v4 + 16 * v10);
    if (v11 != v5)
    {
      int v12 = 1;
      while (v11)
      {
        uint64_t v10 = (v10 + v12) & v6;
        unint64_t v11 = *(void **)(v4 + 16 * v10);
        ++v12;
        if (v11 == v5) {
          goto LABEL_8;
        }
      }
      uint64_t v10 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v10 != *(_DWORD *)(v4 - 4))
    {
      uint64_t v13 = (void *)(v4 + 16 * v10);
      int v14 = (unsigned int *)v13[1];
      *uint64_t v13 = -1;
      v13[1] = 0;
      if (v14 && atomic_fetch_add((atomic_uint *volatile)v14, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v14);
        unsigned int v23 = v3;
        WTF::fastFree((WTF *)v14, v2);
        uint64_t v3 = v23;
      }
      ++*(_DWORD *)(*v3 - 16);
      uint64_t v15 = *v3;
      if (*v3) {
        int v16 = *(_DWORD *)(v15 - 12) - 1;
      }
      else {
        int v16 = -1;
      }
      *(_DWORD *)(v15 - 12) = v16;
      uint64_t v17 = *v3;
      if (*v3)
      {
        unsigned int v18 = 6 * *(_DWORD *)(v17 - 12);
        unsigned int v19 = *(_DWORD *)(v17 - 4);
        if (v18 < v19 && v19 >= 9) {
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(v3, v19 >> 1);
        }
      }
    }
  }
  if (*((char *)this + 471) < 0) {
    operator delete(this[56]);
  }
  if (*((char *)this + 399) < 0) {
    operator delete(this[47]);
  }
  unint64_t v21 = this[43];
  if (v21)
  {
    v21[1] = 0;
    unint64_t v22 = (unsigned int *)this[43];
    this[43] = 0;
    if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v22);
      WTF::fastFree((WTF *)v22, v2);
    }
  }
  else
  {
    this[43] = 0;
  }

  MEMORY[0x1F416B538](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::LibWebRTCSocket::~LibWebRTCSocket(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::LibWebRTCSocket::Close(WebKit::LibWebRTCSocket *this)
{
  uint64_t v1 = *(atomic_uchar *volatile **)(*((void *)this + 45) + 24);
  if (v1)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v1;
    int v5 = 1;
    atomic_compare_exchange_strong_explicit(*v1, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      MEMORY[0x19972E8D0](v4);
    }
    ++*((void *)v4 + 1);
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v5, 0, memory_order_release, memory_order_relaxed);
    if (v5 != 1) {
      WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    if (*((_DWORD *)this + 131))
    {
      *((_DWORD *)this + 131) = 0;
      uint64_t v17 = *((void *)this + 44);
      unsigned int v18 = &v17;
      IPC::Connection::send<Messages::NetworkRTCProvider::CloseSocket>((uint64_t)v1, &v18);
    }
    char v6 = 0;
    atomic_uchar *volatile v7 = *v1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v6, 1u, memory_order_acquire, memory_order_acquire);
    if (v6) {
      MEMORY[0x19972E8D0](v7);
    }
    uint64_t v8 = *((void *)v7 + 1);
    uint64_t v9 = v8 - 1;
    *((void *)v7 + 1) = v8 - 1;
    if (v8 == 1)
    {
      uint64_t v16 = *((void *)v7 + 2);
      uint64_t v11 = *((void *)v7 + 3);
      *((void *)v7 + 3) = 0;
      BOOL v10 = v16 == 0;
    }
    else
    {
      BOOL v10 = 0;
      uint64_t v11 = 0;
    }
    int v12 = 1;
    atomic_compare_exchange_strong_explicit(v7, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
    if (v12 == 1)
    {
      if (v9) {
        return 0;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
      if (v9) {
        return 0;
      }
    }
    uint64_t v13 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v13 = &unk_1EE9B37E8;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + 16) = v11;
    *(unsigned char *)(v13 + 24) = v10;
    unsigned int v18 = (uint64_t *)v13;
    WTF::ensureOnMainRunLoop();
    int v14 = v18;
    unsigned int v18 = 0;
    if (v14) {
      (*(void (**)(uint64_t *))(*v14 + 8))(v14);
    }
  }
  return 0;
}

uint64_t WebKit::LibWebRTCSocket::GetLocalAddress@<X0>(WebKit::LibWebRTCSocket *this@<X0>, rtc::SocketAddress *a2@<X8>)
{
  return rtc::SocketAddress::SocketAddress(a2, (WebKit::LibWebRTCSocket *)((char *)this + 376));
}

uint64_t WebKit::LibWebRTCSocket::GetRemoteAddress@<X0>(WebKit::LibWebRTCSocket *this@<X0>, rtc::SocketAddress *a2@<X8>)
{
  return rtc::SocketAddress::SocketAddress(a2, (WebKit::LibWebRTCSocket *)((char *)this + 448));
}

void *WebKit::LibWebRTCSocket::signalAddressReady(WebKit::LibWebRTCSocket *this, const rtc::SocketAddress *a2)
{
  char v3 = (char *)this + 376;
  rtc::SocketAddress::operator=();
  if (*((_DWORD *)this + 92) == 1) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  *((_DWORD *)this + 131) = v4;
  uint64_t result = (void *)*((void *)this + 24);
  *((void *)this + 26) = result;
  while (result != (void *)((char *)this + 184))
  {
    atomic_uchar *volatile v7 = (void (*)(void *, WebKit::LibWebRTCSocket *, char *))result[2];
    char v6 = result + 2;
    *((void *)this + 26) = *(v6 - 1);
    v7(v6, this, v3);
    uint64_t result = (void *)*((void *)this + 26);
  }
  return result;
}

uint64_t WebKit::LibWebRTCSocket::signalReadPacket(uint64_t result)
{
  if (!*(unsigned char *)(result + 584))
  {
    rtc::SocketAddress::operator=();
    rtc::ReceivedPacket::ReceivedPacket();
    return rtc::AsyncPacketSocket::NotifyPacketReceived();
  }
  return result;
}

void WebKit::LibWebRTCSocket::signalSentPacket(WebKit::LibWebRTCSocket *this)
{
  rtc::SentPacket::SentPacket((rtc::SentPacket *)v5);
  uint64_t v2 = (void *)*((void *)this + 10);
  *((void *)this + 12) = v2;
  while (v2 != (void *)((char *)this + 72))
  {
    int v4 = (void (*)(void *, WebKit::LibWebRTCSocket *, unsigned char *))v2[2];
    char v3 = v2 + 2;
    *((void *)this + 12) = *(v3 - 1);
    v4(v3, this, v5);
    uint64_t v2 = (void *)*((void *)this + 12);
  }
  rtc::PacketInfo::~PacketInfo((rtc::PacketInfo *)&v6);
}

uint64_t WebKit::LibWebRTCSocket::signalClose(WebKit::LibWebRTCSocket *this, int a2)
{
  *((_DWORD *)this + 131) = 0;
  int v4 = a2;
  char v3 = this;
  int v5 = &v3;
  uint64_t v6 = &v4;
  return webrtc::callback_list_impl::CallbackListReceivers::Foreach();
}

size_t WebKit::LibWebRTCSocket::SendTo(WebKit::LibWebRTCSocket *this, const void *a2, size_t a3, const rtc::SocketAddress *a4, const rtc::PacketOptions *a5)
{
  int v5 = *(atomic_uchar *volatile **)(*((void *)this + 45) + 24);
  if (!v5) {
    return 0xFFFFFFFFLL;
  }
  size_t v7 = a3;
  char v10 = 0;
  atomic_uchar *volatile v11 = *v5;
  int v12 = 1;
  atomic_compare_exchange_strong_explicit(*v5, (unsigned __int8 *)&v10, 1u, memory_order_acquire, memory_order_acquire);
  if (v10) {
    MEMORY[0x19972E8D0](v11, a2, a3, a4, a5);
  }
  ++*((void *)v11 + 1);
  atomic_compare_exchange_strong_explicit(v11, (unsigned __int8 *)&v12, 0, memory_order_release, memory_order_relaxed);
  if (v12 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
  }
  if (!*((unsigned char *)this + 584))
  {
    uint64_t v35 = *((void *)this + 44);
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v32, a4);
    rtc::PacketOptions::PacketOptions();
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 525;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 68) = 0;
    *((void *)v13 + 70) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v36 = v13;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, &v35);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v13, a2, v7);
    IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode(v13, (uint64_t)v32);
    WebKit::RTCPacketOptions::serializableData((uint64_t)v31, (uint64_t)v37);
    IPC::ArgumentCoder<WebKit::RTCPacketOptions::SerializableData,void>::encode(v13, (uint64_t)v37);
    IPC::Connection::sendMessageImpl((uint64_t)v5, (uint64_t *)&v36, 0, 0);
    uint64_t v15 = v36;
    uint64_t v36 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v28, v29);
    }
    rtc::PacketOptions::~PacketOptions((rtc::PacketOptions *)v31);
    uint64_t v17 = v33;
    if (v33)
    {
      int v33 = 0;
      int v34 = 0;
      WTF::fastFree(v17, v16);
    }
  }
  char v18 = 0;
  atomic_uchar *volatile v19 = *v5;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v18, 1u, memory_order_acquire, memory_order_acquire);
  if (v18) {
    MEMORY[0x19972E8D0](v19);
  }
  uint64_t v20 = *((void *)v19 + 1);
  uint64_t v21 = v20 - 1;
  *((void *)v19 + 1) = v20 - 1;
  if (v20 == 1)
  {
    uint64_t v30 = *((void *)v19 + 2);
    uint64_t v23 = *((void *)v19 + 3);
    *((void *)v19 + 3) = 0;
    BOOL v22 = v30 == 0;
  }
  else
  {
    BOOL v22 = 0;
    uint64_t v23 = 0;
  }
  int v24 = 1;
  atomic_compare_exchange_strong_explicit(v19, (unsigned __int8 *)&v24, 0, memory_order_release, memory_order_relaxed);
  if (v24 == 1)
  {
    if (v21) {
      return v7;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v19);
    if (v21) {
      return v7;
    }
  }
  uint64_t v25 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v25 = &unk_1EE9B37E8;
  *(void *)(v25 + 8) = v19;
  *(void *)(v25 + 16) = v23;
  *(unsigned char *)(v25 + 24) = v22;
  v31[0] = v25;
  WTF::ensureOnMainRunLoop();
  uint64_t v26 = v31[0];
  v31[0] = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  return v7;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkRTCProvider::CloseSocket>(uint64_t a1, uint64_t **a2)
{
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 520;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::LibWebRTCSocket::GetOption(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 8 * a2 + 528);
  if ((v3 & 0xFF00000000) == 0) {
    return 0xFFFFFFFFLL;
  }
  *a3 = v3;
  return 0;
}

uint64_t WebKit::LibWebRTCSocket::SetOption(uint64_t a1, unsigned int a2, int a3)
{
  int v14 = a3;
  uint64_t v3 = a1 + 8 * a2;
  *(_DWORD *)(v3 + 528) = a3;
  *(unsigned char *)(v3 + 5++*(_DWORD *)(this + 32) = 1;
  uint64_t v4 = *(void *)(*(void *)(a1 + 360) + 24);
  if (v4)
  {
    uint64_t v13 = *(void *)(a1 + 352);
    unsigned int v12 = a2;
    int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v5 = 526;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 68) = 0;
    *((void *)v5 + 70) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v15 = v5;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v5, &v13);
    uint64_t v6 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v5, (int *)&v12);
    IPC::Encoder::operator<<<int>(v6, &v14);
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v15, 0, 0);
    uint64_t v8 = v15;
    uint64_t v15 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v10, v11);
    }
  }
  return 0;
}

IPC::Encoder *WebKit::LibWebRTCSocket::suspend(IPC::Encoder *this)
{
  *((unsigned char *)this + 584) = 1;
  if (*((_DWORD *)this + 131))
  {
    uint64_t v1 = this;
    *((_DWORD *)this + 131) = 0;
    int v3 = -1;
    uint64_t v2 = this;
    v4[0] = (uint64_t *)&v2;
    v4[1] = (uint64_t *)&v3;
    webrtc::callback_list_impl::CallbackListReceivers::Foreach();
    this = *(IPC::Encoder **)(*((void *)v1 + 45) + 24);
    if (this)
    {
      uint64_t v2 = (IPC::Encoder *)*((void *)v1 + 44);
      v4[0] = (uint64_t *)&v2;
      return IPC::Connection::send<Messages::NetworkRTCProvider::CloseSocket>((uint64_t)this, v4);
    }
  }
  return this;
}

atomic_uchar *volatile **WebKit::LibWebRTCSocketFactory::setConnection(uint64_t a1, atomic_uchar *volatile **a2)
{
  uint64_t result = WTF::RefPtr<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::copyRef(a2, &v32);
  int v5 = v32;
  uint64_t v32 = 0;
  uint64_t v6 = *(atomic_uchar *volatile **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  if (v6)
  {
    char v7 = 0;
    atomic_uchar *volatile v8 = *v6;
    atomic_compare_exchange_strong_explicit(*v6, (unsigned __int8 *)&v7, 1u, memory_order_acquire, memory_order_acquire);
    if (v7) {
      uint64_t result = (atomic_uchar *volatile **)MEMORY[0x19972E8D0](v8);
    }
    uint64_t v9 = *((void *)v8 + 1);
    uint64_t v10 = v9 - 1;
    *((void *)v8 + 1) = v9 - 1;
    if (v9 == 1)
    {
      uint64_t v30 = *((void *)v8 + 2);
      uint64_t v12 = *((void *)v8 + 3);
      *((void *)v8 + 3) = 0;
      BOOL v11 = v30 == 0;
    }
    else
    {
      BOOL v11 = 0;
      uint64_t v12 = 0;
    }
    int v13 = 1;
    atomic_compare_exchange_strong_explicit(v8, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
    if (v13 == 1)
    {
      if (v10) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t result = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v10) {
        goto LABEL_10;
      }
    }
    uint64_t v14 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v14 = &unk_1EE9B37E8;
    *(void *)(v14 + 8) = v8;
    *(void *)(v14 + 16) = v12;
    *(unsigned char *)(v14 + 24) = v11;
    int v33 = (atomic_uchar *volatile **)v14;
    WTF::ensureOnMainRunLoop();
    uint64_t result = v33;
    int v33 = 0;
    if (result) {
      uint64_t result = (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*result + 1))(result);
    }
LABEL_10:
    uint64_t v15 = v32;
    uint64_t v32 = 0;
    if (v15)
    {
      char v16 = 0;
      atomic_uchar *volatile v17 = *v15;
      atomic_compare_exchange_strong_explicit(*v15, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
      if (v16) {
        uint64_t result = (atomic_uchar *volatile **)MEMORY[0x19972E8D0](v17);
      }
      uint64_t v18 = *((void *)v17 + 1);
      uint64_t v19 = v18 - 1;
      *((void *)v17 + 1) = v18 - 1;
      if (v18 == 1)
      {
        uint64_t v31 = *((void *)v17 + 2);
        uint64_t v21 = *((void *)v17 + 3);
        *((void *)v17 + 3) = 0;
        BOOL v20 = v31 == 0;
      }
      else
      {
        BOOL v20 = 0;
        uint64_t v21 = 0;
      }
      int v22 = 1;
      atomic_compare_exchange_strong_explicit(v17, (unsigned __int8 *)&v22, 0, memory_order_release, memory_order_relaxed);
      if (v22 == 1)
      {
        if (!v19) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t result = (atomic_uchar *volatile **)WTF::Lock::unlockSlow((WTF::Lock *)v17);
        if (!v19)
        {
LABEL_17:
          uint64_t v23 = WTF::fastMalloc((WTF *)0x20);
          *(void *)uint64_t v23 = &unk_1EE9B37E8;
          *(void *)(v23 + 8) = v17;
          *(void *)(v23 + 16) = v21;
          *(unsigned char *)(v23 + 24) = v20;
          int v33 = (atomic_uchar *volatile **)v23;
          WTF::ensureOnMainRunLoop();
          uint64_t result = v33;
          int v33 = 0;
          if (result) {
            uint64_t result = (atomic_uchar *volatile **)(*((uint64_t (**)(atomic_uchar *volatile **))*result + 1))(result);
          }
        }
      }
    }
    int v5 = *(atomic_uchar *volatile **)(a1 + 24);
  }
  if (v5)
  {
    while (1)
    {
      uint64_t v24 = *(void *)(a1 + 32);
      if (v24 == *(void *)(a1 + 40)) {
        break;
      }
      uint64_t v25 = *(void *)(a1 + 48);
      uint64_t v26 = *(void *)(v25 + 8 * v24);
      *(void *)(v25 + 8 * v24) = 0;
      uint64_t v27 = *(void *)(a1 + 48);
      uint64_t v28 = *(void *)(v27 + 8 * v24);
      *(void *)(v27 + 8 * v24) = 0;
      if (v28)
      {
        (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        uint64_t v24 = *(void *)(a1 + 32);
      }
      if (v24 == *(unsigned int *)(a1 + 56) - 1) {
        uint64_t v29 = 0;
      }
      else {
        uint64_t v29 = v24 + 1;
      }
      *(void *)(a1 + ++*(_DWORD *)(this + 32) = v29;
      (*(void (**)(uint64_t, atomic_uchar *volatile *))(*(void *)v26 + 16))(v26, *a2);
      uint64_t result = (atomic_uchar *volatile **)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 8))(v26);
    }
  }
  return result;
}

uint64_t WebKit::LibWebRTCSocketFactory::createUdpSocket(uint64_t a1, _OWORD *a2, const rtc::SocketAddress *a3, __int16 a4, __int16 a5, uint64_t a6, char a7, char a8, WTF::StringImpl **a9)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v48 = a6;
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)&__p);
  uint64_t v17 = WTF::fastMalloc((WTF *)0x270);
  long long v18 = a2[1];
  *(_OWORD *)v49 = *a2;
  long long v50 = v18;
  WebKit::LibWebRTCSocket::LibWebRTCSocket(v17, a1, v49, 0, a3, (const rtc::SocketAddress *)&__p);
  if (SHIBYTE(v40) < 0) {
    operator delete(__p);
  }
  uint64_t v19 = *(void *)(a1 + 24);
  if (v19)
  {
    uint64_t v47 = *(void *)(v17 + 352);
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v49, a3);
    __p = &v47;
    v39 = v49;
    LOWORD(v40) = a4;
    WORD1(v40) = a5;
    v41 = &v48;
    LOBYTE(v42) = a7;
    BYTE1(v42) = a8;
    *((void *)&v42 + 1) = a9;
    IPC::Connection::send<Messages::NetworkRTCProvider::CreateUDPSocket>(v19, (uint64_t)&__p);
    uint64_t v21 = v49[1];
    if (v49[1])
    {
      v49[1] = 0;
      LODWORD(v50) = 0;
LABEL_6:
      WTF::fastFree(v21, v20);
      return v17;
    }
    return v17;
  }
  int v22 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v22 = &unk_1EE9F2AE8;
  __p = v22;
  WTF::callOnMainRunLoop();
  uint64_t v23 = __p;
  __p = 0;
  if (v23) {
    (*(void (**)(void *))(*(void *)v23 + 8))(v23);
  }
  __p = *(void **)(v17 + 352);
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)&v39, a3);
  LOWORD(v44) = a4;
  WORD1(v44) = a5;
  *((void *)&v44 + 1) = a6;
  LOBYTE(v45) = a7;
  HIBYTE(v45) = a8;
  uint64_t v24 = *a9;
  if (*a9) {
    *(_DWORD *)v24 += 2;
  }
  v46 = v24;
  uint64_t v25 = *(void *)(a1 + 32);
  uint64_t v26 = *(void *)(a1 + 40);
  if (v25)
  {
    if (v26 + 1 != v25) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  uint64_t v27 = *(unsigned int *)(a1 + 56);
  if (!v26)
  {
    if (v27)
    {
      uint64_t v26 = 0;
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v26 == v27 - 1)
  {
LABEL_19:
    WTF::Deque<WTF::Function<void ()(IPC::Connection &)>,0ul>::expandCapacity(a1 + 32);
    uint64_t v26 = *(void *)(a1 + 40);
  }
LABEL_20:
  uint64_t v28 = *(void *)(a1 + 48);
  uint64_t v29 = WTF::fastMalloc((WTF *)0x60);
  *(void *)uint64_t v29 = &unk_1EE9F2B10;
  *(void *)(v29 + 8) = __p;
  *(void *)(v29 + 16) = v39;
  *(void *)(v29 + 24) = v40;
  uint64_t v31 = v41;
  char v40 = 0;
  v41 = 0;
  *(void *)(v29 + ++*(_DWORD *)(this + 32) = v31;
  uint64_t v32 = v43;
  *(_OWORD *)(v29 + 40) = v42;
  *(void *)(v29 + 56) = v32;
  LOWORD(v++*(_DWORD *)(this + 32) = v45;
  *(_OWORD *)(v29 + 64) = v44;
  *(_WORD *)(v29 + 80) = v32;
  int v33 = v46;
  if (v46) {
    *(_DWORD *)v46 += 2;
  }
  *(void *)(v29 + 88) = v33;
  *(void *)(v28 + 8 * v26) = v29;
  uint64_t v34 = *(void *)(a1 + 40);
  if (v34 == *(unsigned int *)(a1 + 56) - 1) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v34 + 1;
  }
  *(void *)(a1 + 40) = v35;
  uint64_t v36 = v46;
  v46 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 != 2)
    {
      *(_DWORD *)v36 -= 2;
      return v17;
    }
    WTF::StringImpl::destroy(v36, v30);
    uint64_t v21 = v40;
    if (!v40) {
      return v17;
    }
    char v40 = 0;
    LODWORD(v41) = 0;
    goto LABEL_6;
  }
  return v17;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkRTCProvider::CreateUDPSocket>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 523;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v15 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode(v4, *(void *)(a2 + 8));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v4, *(_WORD *)(a2 + 16));
  IPC::ArgumentCoder<unsigned short,void>::encode<IPC::Encoder>(v4, *(_WORD *)(a2 + 18));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, *(uint64_t **)(a2 + 24));
  char v5 = *(unsigned char *)(a2 + 32);
  uint64_t v6 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1);
  if (!v7 || (unsigned char *v6 = v5, v8 = *(unsigned char *)(a2 + 33), v9 = (unsigned char *)IPC::Encoder::grow(v4, 1uLL, 1), !v10))
  {
    __break(0xC471u);
    JUMPOUT(0x1991813E8);
  }
  unsigned char *v9 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)(a2 + 40));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::LibWebRTCSocketFactory::createClientTcpSocket(uint64_t a1, long long *a2, const rtc::SocketAddress *a3, const rtc::SocketAddress *a4, _DWORD **a5, _DWORD *a6, uint64_t a7, char a8, char a9, _DWORD **a10)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v72 = a7;
  uint64_t v18 = WTF::fastMalloc((WTF *)0x270);
  long long v19 = a2[1];
  long long v73 = *a2;
  long long v74 = v19;
  *(_DWORD *)(WebKit::LibWebRTCSocket::LibWebRTCSocket(v18, a1, &v73, 1, a3, a4) + 524) = 3;
  uint64_t v20 = *(void *)(a1 + 24);
  if (v20)
  {
    uint64_t v71 = *(void *)(v18 + 352);
    int v21 = *(unsigned __int8 *)(a1 + 16);
    rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)&v73, a3);
    if (v21) {
      rtc::SocketAddress::SetIP();
    }
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v68, (const rtc::SocketAddress *)&v73);
    int v22 = *(unsigned __int8 *)(a1 + 16);
    rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)__p, a4);
    if (v22) {
      rtc::SocketAddress::SetIP();
    }
    WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)v65, (const rtc::SocketAddress *)__p);
    v55[0] = &v71;
    v55[1] = v68;
    v56 = v65;
    v57 = a5;
    v58 = a6;
    v59 = &v72;
    char v60 = a8;
    char v61 = a9;
    v62 = a10;
    IPC::Connection::send<Messages::NetworkRTCProvider::CreateClientTCPSocket>(v20, (uint64_t)v55);
    uint64_t v24 = v66;
    if (v66)
    {
      v66 = 0;
      int v67 = 0;
      WTF::fastFree(v24, v23);
    }
    if (v64 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v25 = v69;
    if (v69)
    {
      v69 = 0;
      int v70 = 0;
      WTF::fastFree(v25, v23);
    }
    if (SBYTE7(v74) < 0)
    {
      uint64_t v26 = (void *)v73;
LABEL_54:
      operator delete(v26);
      return v18;
    }
    return v18;
  }
  char v54 = a8;
  uint64_t v27 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v27 = &unk_1EE9F2B38;
  *(void *)&long long v73 = v27;
  WTF::callOnMainRunLoop();
  uint64_t v28 = v73;
  *(void *)&long long v73 = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  *(void *)&long long v73 = *(void *)(v18 + 352);
  int v29 = *(unsigned __int8 *)(a1 + 16);
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)__p, a3);
  if (v29) {
    rtc::SocketAddress::SetIP();
  }
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)((char *)&v73 + 8), (const rtc::SocketAddress *)__p);
  int v30 = *(unsigned __int8 *)(a1 + 16);
  rtc::SocketAddress::SocketAddress((rtc::SocketAddress *)v55, a4);
  if (v30) {
    rtc::SocketAddress::SetIP();
  }
  WebKit::RTC::Network::SocketAddress::SocketAddress((WebKit::RTC::Network::SocketAddress *)&v77, (const rtc::SocketAddress *)v55);
  uint64_t v31 = (WTF::StringImpl *)*a5;
  if (*a5) {
    *(_DWORD *)v31 += 2;
  }
  v82 = v31;
  LODWORD(v83) = *a6;
  *((void *)&v83 + 1) = a7;
  LOBYTE(v84) = v54;
  HIBYTE(v84) = a9;
  uint64_t v32 = (WTF::StringImpl *)*a10;
  if (*a10) {
    *(_DWORD *)v32 += 2;
  }
  v85 = v32;
  uint64_t v33 = *(void *)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 40);
  if (v33)
  {
    if (v34 + 1 != v33) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v35 = *(unsigned int *)(a1 + 56);
  if (!v34)
  {
    if (v35)
    {
      uint64_t v34 = 0;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v34 == v35 - 1)
  {
LABEL_32:
    WTF::Deque<WTF::Function<void ()(IPC::Connection &)>,0ul>::expandCapacity(a1 + 32);
    uint64_t v34 = *(void *)(a1 + 40);
  }
LABEL_33:
  uint64_t v36 = *(void *)(a1 + 48);
  uint64_t v37 = WTF::fastMalloc((WTF *)0x98);
  *(void *)uint64_t v37 = &unk_1EE9F2B60;
  *(_OWORD *)(v37 + 8) = v73;
  uint64_t v39 = v74;
  *(void *)&long long v74 = 0;
  *(void *)(v37 + 24) = v39;
  uint64_t v40 = *((void *)&v74 + 1);
  *((void *)&v74 + 1) = 0;
  *(void *)(v37 + ++*(_DWORD *)(this + 32) = v40;
  long long v41 = v75;
  *(void *)(v37 + 56) = v76;
  *(_OWORD *)(v37 + 40) = v41;
  *(void *)(v37 + 64) = v77;
  long long v42 = v78;
  v78 = 0;
  *(void *)(v37 + 72) = v42;
  *(void *)&long long v41 = v79;
  uint64_t v79 = 0;
  *(void *)(v37 + 80) = v41;
  long long v43 = v80;
  *(void *)(v37 + 104) = v81;
  *(_OWORD *)(v37 + 88) = v43;
  long long v44 = v82;
  v82 = 0;
  *(void *)(v37 + 112) = v44;
  long long v45 = v83;
  *(_WORD *)(v37 + 136) = v84;
  *(_OWORD *)(v37 + 120) = v45;
  v46 = v85;
  if (v85) {
    *(_DWORD *)v85 += 2;
  }
  *(void *)(v37 + 144) = v46;
  *(void *)(v36 + 8 * v34) = v37;
  uint64_t v47 = *(void *)(a1 + 40);
  if (v47 == *(unsigned int *)(a1 + 56) - 1) {
    uint64_t v48 = 0;
  }
  else {
    uint64_t v48 = v47 + 1;
  }
  *(void *)(a1 + 40) = v48;
  v49 = v85;
  v85 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2) {
      WTF::StringImpl::destroy(v49, v38);
    }
    else {
      *(_DWORD *)v49 -= 2;
    }
  }
  long long v50 = v82;
  v82 = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2) {
      WTF::StringImpl::destroy(v50, v38);
    }
    else {
      *(_DWORD *)v50 -= 2;
    }
  }
  uint64_t v51 = v78;
  if (v78)
  {
    v78 = 0;
    LODWORD(v79) = 0;
    WTF::fastFree(v51, v38);
  }
  v52 = (WTF *)v74;
  if ((void)v74)
  {
    *(void *)&long long v74 = 0;
    DWORD2(v74) = 0;
    WTF::fastFree(v52, v38);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  if (v64 < 0)
  {
    uint64_t v26 = __p[0];
    goto LABEL_54;
  }
  return v18;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkRTCProvider::CreateClientTCPSocket>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 521;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v16 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode(v4, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebKit::RTC::Network::SocketAddress,void>::encode(v4, *(void *)(a2 + 16));
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v4, *(uint64_t **)(a2 + 24));
  char v5 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v4, *(int **)(a2 + 32));
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v5, *(uint64_t **)(a2 + 40));
  char v6 = *(unsigned char *)(a2 + 48);
  uint64_t v7 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1);
  if (!v8 || (*uint64_t v7 = v6, v9 = *(unsigned char *)(a2 + 49), v10 = (unsigned char *)IPC::Encoder::grow(v5, 1uLL, 1), !v11))
  {
    __break(0xC471u);
    JUMPOUT(0x199181A14);
  }
  unsigned char *v10 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, *(uint64_t **)(a2 + 56));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void *WebKit::LibWebRTCSocketFactory::forSocketInGroup(void **a1, void *a2, uint64_t a3)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::WallTime>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::WallTime,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(a1);
  uint64_t v7 = result;
  char v9 = v8;
  if (*a1) {
    uint64_t v10 = (uint64_t)&(*a1)[2 * *((unsigned int *)*a1 - 1)];
  }
  else {
    uint64_t v10 = 0;
  }
  if ((void *)v10 != result)
  {
    do
    {
      uint64_t v11 = *(void **)(v7[1] + 8);
      if (v11[75] == a2[1] && v11[74] == *a2 && v11[76] == a2[2]) {
        uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)a3 + 16))();
      }
      while (1)
      {
        v7 += 2;
        if (v7 == v9) {
          break;
        }
        if ((unint64_t)(*v7 + 1) > 1) {
          goto LABEL_18;
        }
      }
      uint64_t v7 = v9;
LABEL_18:
      ;
    }
    while (v7 != (void *)v10);
  }
  return result;
}

uint64_t *WebKit::LibWebRTCSocketFactory::createAsyncDnsResolver@<X0>(WebKit::LibWebRTCSocketFactory *this@<X0>, WebKit::LibWebRTCResolver **a2@<X8>)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x88);
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + ++*(_DWORD *)(this + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(void *)(v4 + 128) = 0;
  *a2 = WebKit::LibWebRTCResolver::LibWebRTCResolver((WebKit::LibWebRTCResolver *)v4);
  uint64_t v7 = *(void *)(v4 + 24);
  return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCResolver,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCResolver,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::LibWebRTCResolver&>((uint64_t *)this + 1, &v7, v4, (uint64_t)&v6);
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCResolver,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::LibWebRTCResolverIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCResolver,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::add<WebKit::LibWebRTCResolver&>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  char v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v24 = 0;
        }
        else {
          uint64_t v24 = *(unsigned int *)(v8 - 4);
        }
        char v29 = 0;
        uint64_t v30 = v8 + 16 * v24;
        goto LABEL_30;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      char v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      char v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a3 + 16), a3);
  int v21 = *(atomic_uint **)(a3 + 16);
  atomic_fetch_add(v21, 1u);
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = (uint64_t)v21;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, (unsigned int *)result);
    uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, v20);
  }
  uint64_t v22 = *v6;
  if (*v6) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v25 = *v6;
  if (*v6) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27)
    {
LABEL_23:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::WeakRef<WebKit::ServiceWorkerFetchTask,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>::expand(v6, v16);
      char v16 = result;
      uint64_t v25 = *v6;
      if (*v6) {
        unint64_t v28 = *(unsigned int *)(v25 - 4);
      }
      else {
        unint64_t v28 = 0;
      }
    }
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_23;
  }
  uint64_t v30 = v25 + 16 * v28;
  char v29 = 1;
LABEL_30:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v30;
  *(unsigned char *)(a4 + 16) = v29;
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::sharedManager(WebKit::RTCDataChannelRemoteManager *this)
{
  return WebKit::RTCDataChannelRemoteManager::sharedManager(void)::sharedManager;
}

WebKit::RTCDataChannelRemoteManager *WebKit::RTCDataChannelRemoteManager::RTCDataChannelRemoteManager(WebKit::RTCDataChannelRemoteManager *this)
{
  *(void *)this = &unk_1EE9BB5E0;
  *((void *)this + 1) = 0;
  WTF::WorkQueue::create();
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v2 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  char v3 = 0;
  uint64_t v4 = *(atomic_uchar *volatile **)(v2 + 24);
  atomic_uchar *volatile v5 = *v4;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](v5);
  }
  ++*((void *)v5 + 1);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  *((void *)this + 3) = v4;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return this;
}

BOOL WebKit::RTCDataChannelRemoteManager::connectToRemoteSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  if (WebCore::Process::identifier((WebCore::Process *)a1) != a2) {
    return 0;
  }
  WebCore::RTCDataChannel::handlerFromIdentifier();
  uint64_t v6 = v15;
  if (!v15) {
    return 0;
  }
  uint64_t v15 = 0;
  uint64_t v12 = v6;
  uint64_t v7 = WebKit::RTCDataChannelRemoteManager::remoteSourceConnection((WebKit::RTCDataChannelRemoteManager *)a1);
  WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::RTCDataChannelRemoteSource,WebCore::RTCDataChannelIdentifier &,WTF::UniqueRef<WebCore::RTCDataChannelHandler>,WebCore::RTCDataChannelRemoteSourceConnection &>((uint64_t)v7, &v13);
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::add<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>(a1 + 6, &v17, (uint64_t *)&v13, (uint64_t)v14);
  uint64_t v8 = v13;
  unint64_t v13 = 0;
  if (v8) {
    (*(void (**)(unsigned int *))(*(void *)v8 + 8))(v8);
  }
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  BOOL v9 = v14[16] != 0;
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return v9;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::add<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = result;
  uint64_t v8 = *result;
  if (*result
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(result, 0), (v8 = *v6) != 0))
  {
    char v9 = 0;
    int v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v10 = 0;
    char v9 = 1;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = *a2 + ~(*a2 << 32);
  unint64_t v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v10 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if (v9) {
          uint64_t v23 = 0;
        }
        else {
          uint64_t v23 = *(unsigned int *)(v8 - 4);
        }
        char v28 = 0;
        uint64_t v29 = v8 + 16 * v23;
        goto LABEL_31;
      }
      if (v17 == -1) {
        uint64_t v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v10;
      uint64_t v16 = (uint64_t *)(v8 + 16 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *uint64_t v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      uint64_t v11 = *a2;
      uint64_t v16 = v18;
    }
  }
  uint64_t *v16 = v11;
  uint64_t v20 = *a3;
  *a3 = 0;
  uint64_t result = (uint64_t *)v16[1];
  v16[1] = v20;
  if (result) {
    uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v24 = *v6;
  if (*v6) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 > 0x400)
  {
    if (v27 <= 2 * v26)
    {
LABEL_24:
      uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v16);
      uint64_t v16 = result;
      uint64_t v24 = *v6;
      if (*v6) {
        unint64_t v27 = *(unsigned int *)(v24 - 4);
      }
      else {
        unint64_t v27 = 0;
      }
    }
  }
  else if (3 * v27 <= 4 * v26)
  {
    goto LABEL_24;
  }
  uint64_t v29 = v24 + 16 * v27;
  char v28 = 1;
LABEL_31:
  *(void *)a4 = v16;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *WebKit::RTCDataChannelRemoteManager::remoteSourceConnection(WebKit::RTCDataChannelRemoteManager *this)
{
  uint64_t result = (WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *)*((void *)this + 5);
  if (!result)
  {
    char v3 = (WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *)WTF::fastMalloc((WTF *)0x18);
    uint64_t result = WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::RemoteSourceConnection(v3);
    uint64_t v4 = *((void *)this + 5);
    *((void *)this + 5) = result;
    if (v4)
    {
      WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
      return (WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *)*((void *)this + 5);
    }
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::remoteHandlerConnection(WebKit::RTCDataChannelRemoteManager *this)
{
  uint64_t result = *((void *)this + 4);
  if (!result)
  {
    uint64_t v3 = *((void *)this + 2);
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
    uint64_t v7 = v3;
    uint64_t v4 = WTF::fastMalloc((WTF *)0x20);
    uint64_t v5 = WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::RemoteHandlerConnection(v4, &v7);
    uint64_t v6 = *((void *)this + 4);
    *((void *)this + 4) = v5;
    if (v6) {
      WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(v6 + 8));
    }
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
    }
    return *((void *)this + 4);
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::postTaskToHandler(WebCore::Process *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = WebCore::Process::identifier(a1);
  if (result == a2)
  {
    uint64_t v9 = *((void *)a1 + 7);
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v9 - 8);
      unint64_t v11 = (a3 + ~(a3 << 32)) ^ ((unint64_t)(a3 + ~(a3 << 32)) >> 22);
      unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      uint64_t v14 = v10 & ((v13 >> 31) ^ v13);
      uint64_t v15 = *(void *)(v9 + ((unint64_t)v14 << 6));
      if (v15 != a3)
      {
        int v16 = 1;
        while (v15)
        {
          uint64_t v14 = (v14 + v16) & v10;
          uint64_t v15 = *(void *)(v9 + ((unint64_t)v14 << 6));
          ++v16;
          if (v15 == a3) {
            goto LABEL_9;
          }
        }
        uint64_t v14 = *(unsigned int *)(v9 - 4);
      }
LABEL_9:
      if (v14 != *(_DWORD *)(v9 - 4))
      {
        uint64_t v17 = *(atomic_uint **)(v9 + (v14 << 6) + 16);
        if (v17) {
          atomic_fetch_add(v17, 1u);
        }
        uint64_t v18 = *a4;
        *a4 = 0;
        int v19 = (void *)WTF::fastMalloc((WTF *)0x18);
        *int v19 = &unk_1EE9F2B88;
        v19[1] = v17;
        v19[2] = v18;
        uint64_t v20 = v19;
        WebCore::ScriptExecutionContext::postTaskTo();
        uint64_t result = (uint64_t)v20;
        if (v20) {
          return (*(uint64_t (**)(void *))(*v20 + 8))(v20);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::sourceFromIdentifier(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  if (WebCore::Process::identifier((WebCore::Process *)a1) == a2) {
    return WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1 + 6, &v5);
  }
  else {
    return 0;
  }
}

WTF *WebKit::RTCDataChannelRemoteManager::sendData(uint64_t *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = (WTF *)WebKit::RTCDataChannelRemoteManager::sourceFromIdentifier(a1, a2, a3);
  if (result)
  {
    uint64_t v6 = result;
    if (a4)
    {
      uint64_t v7 = *(uint64_t (**)(void))(**((void **)result + 4) + 32);
      return (WTF *)v7();
    }
    else
    {
      WTF::CString::CString();
      (*(void (**)(void, WTF **))(**((void **)v6 + 4) + 24))(*((void *)v6 + 4), &v9);
      uint64_t result = v9;
      uint64_t v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 1) {
          return (WTF *)WTF::fastFree(result, v8);
        }
        else {
          --*(_DWORD *)result;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::close(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = WebKit::RTCDataChannelRemoteManager::sourceFromIdentifier(a1, a2, a3);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(**(void **)(result + 32) + 40);
    return v4();
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::changeReadyState(WebCore::Process *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v8 = &unk_1EE9F2BB0;
  *(unsigned char *)(v8 + 8) = a4;
  uint64_t v11 = v8;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(a1, a2, a3, &v11);
  uint64_t result = v11;
  if (v11)
  {
    unsigned int v10 = *(uint64_t (**)(void))(*(void *)v11 + 8);
    return v10();
  }
  return result;
}

WTF::StringImpl *WebKit::RTCDataChannelRemoteManager::receiveData(WTF::StringImpl *result, uint64_t a2, uint64_t a3, int a4, uint64_t a5, WTF *this)
{
  uint64_t v6 = this;
  char v8 = a4;
  uint64_t v11 = result;
  uint64_t v20 = 0;
  if (a4)
  {
    if (this)
    {
      if ((unint64_t)this >> 32)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v12 = WTF::fastMalloc(this);
      uint64_t v13 = v12;
      uint64_t v14 = 0;
      do
      {
        *((unsigned char *)v14 + v12) = *((unsigned char *)v14 + a5);
        uint64_t v14 = (WTF *)((char *)v14 + 1);
      }
      while (v6 != v14);
    }
    else
    {
      uint64_t v13 = 0;
    }
  }
  else
  {
    WTF::String::fromUTF8();
    uint64_t v13 = 0;
    LODWORD(v6) = 0;
  }
  WTF::String::isolatedCopy();
  LODWORD(v18) = v6;
  HIDWORD(v18) = v6;
  uint64_t v15 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v15 = &unk_1EE9F2BD8;
  *(unsigned char *)(v15 + 8) = v8;
  *(void *)(v15 + 16) = v17;
  *(void *)(v15 + 24) = v13;
  uint64_t v19 = v15;
  *(void *)(v15 + ++*(_DWORD *)(this + 32) = v18;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(v11, a2, a3, &v19);
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t result = v20;
  uint64_t v20 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v16);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::detectError(WebCore::Process *a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  *a5 = 0;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v10 = &unk_1EE9F2C00;
  *(unsigned char *)(v10 + 8) = a4;
  *(void *)(v10 + 16) = v9;
  uint64_t v13 = v10;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(a1, a2, a3, &v13);
  uint64_t result = v13;
  if (v13)
  {
    uint64_t v12 = *(uint64_t (**)(void))(*(void *)v13 + 8);
    return v12();
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::bufferedAmountIsDecreasing(WebCore::Process *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v8 = &unk_1EE9F2C28;
  v8[1] = a4;
  uint64_t v11 = v8;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(a1, a2, a3, (uint64_t *)&v11);
  uint64_t result = (uint64_t)v11;
  if (v11)
  {
    uint64_t v10 = *(uint64_t (**)(void))(*v11 + 8);
    return v10();
  }
  return result;
}

uint64_t WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::RemoteHandlerConnection(uint64_t a1, uint64_t *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE9F2930;
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v4 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)(a1 + 16), *(atomic_uchar *volatile **)(v4 + 24));
  uint64_t v5 = *a2;
  *a2 = 0;
  *(void *)(a1 + 24) = v5;
  return a1;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v29 = a4;
  *((void *)&v29 + 1) = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10) {
    goto LABEL_6;
  }
  uint64_t v10 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v10 = 1;
  *(void *)(v10 + 8) = a2;
  uint64_t v13 = *(unsigned int **)(a2 + 8);
  *(void *)(a2 + 8) = v10;
  if (!v13) {
    goto LABEL_6;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10) {
LABEL_6:
  }
    atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  *(_OWORD *)&v31[8] = *(_OWORD *)a3;
  *(void *)&long long v32 = *(void *)(a3 + 16);
  long long v33 = v29;
  uint64_t v14 = WTF::fastMalloc((WTF *)0x50);
  *(void *)uint64_t v14 = &unk_1EE9F2C50;
  *(void *)(v14 + 16) = v10;
  long long v15 = v33;
  long long v16 = *(_OWORD *)&v31[8];
  *(_OWORD *)(v14 + 48) = v32;
  *(_OWORD *)(v14 + 64) = v15;
  *(_OWORD *)(v14 + ++*(_DWORD *)(this + 32) = v16;
  uint64_t v30 = (IPC::Encoder *)v14;
  (*(void (**)(uint64_t, IPC::Encoder **))(*(void *)v9 + 32))(v9, &v30);
  uint64_t v17 = v30;
  uint64_t v30 = 0;
  if (v17) {
    (*(void (**)(IPC::Encoder *))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *(os_unfair_lock_s **)(a1 + 16);
  *(_OWORD *)uint64_t v31 = v29;
  uint64_t v19 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v19 = &unk_1EE9F2C78;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)v31;
  uint64_t v20 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v21 = 229;
  *((void *)v21 + 1) = 0;
  *((void *)v21 + 66) = (char *)v21 + 16;
  *((void *)v21 + 67) = 512;
  *((void *)v21 + 68) = 0;
  *((void *)v21 + 70) = 0;
  *((void *)v21 + 69) = 0;
  IPC::Encoder::encodeHeader(v21);
  uint64_t v30 = v21;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v21, (uint64_t *)&v29);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v21, (uint64_t *)&v29 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v21, &v27);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v21, &v28);
  *(void *)uint64_t v31 = v19;
  *(void *)&v31[8] = v20;
  IPC::Connection::sendMessageWithAsyncReply(v18, &v30, (uint64_t *)v31, 0, 0);
  uint64_t v23 = *(void *)v31;
  *(void *)uint64_t v31 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v22);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::sendData(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  v16[0] = a2;
  v16[1] = a3;
  v15[0] = a5;
  v15[1] = a6;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v12 = v16;
  char v13 = a4;
  uint64_t v14 = v15;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 692;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v7, (uint64_t)&v12);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::close(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 689;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, &v9);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, &v10);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::RemoteSourceConnection(WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection *this)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1EE9F2968;
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)this + 2, *(atomic_uchar *volatile **)(v2 + 24));
  return this;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didChangeReadyState(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 688;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v13 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v11);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v12);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v6, a4);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  char v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

WTF *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didReceiveStringData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[0] = a2;
  v14[1] = a3;
  WTF::String::utf8();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = v13;
  if (v13)
  {
    uint64_t v6 = (char *)v13 + 16;
    uint64_t v5 = (WTF *)*((void *)v13 + 1);
  }
  else
  {
    uint64_t v6 = 0;
  }
  v9[0] = v6;
  v9[1] = v5;
  uint64_t v10 = v14;
  char v11 = 0;
  uint64_t v12 = v9;
  IPC::Connection::send<Messages::RTCDataChannelRemoteManagerProxy::ReceiveData>(v4, (uint64_t)&v10);
  uint64_t result = v13;
  char v13 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      return (WTF *)WTF::fastFree(result, v7);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::RTCDataChannelRemoteManagerProxy::ReceiveData>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 691;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,BOOL,std::span<unsigned char const,18446744073709551615ul> const&>,0ul,1ul,2ul>(v4, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didReceiveRawData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a2;
  v11[1] = a3;
  v10[0] = a4;
  v10[1] = a5;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = v11;
  char v8 = 1;
  uint64_t v9 = v10;
  return IPC::Connection::send<Messages::RTCDataChannelRemoteManagerProxy::ReceiveData>(v5, (uint64_t)&v7);
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::didDetectError(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  v14[0] = a2;
  v14[1] = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  char v11 = v14;
  char v12 = a4;
  uint64_t v13 = a5;
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 690;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  long long v15 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::RTCDataChannelIdentifier const&,WebCore::RTCErrorDetailType,WTF::String const&>,0ul,1ul,2ul>(v6, (uint64_t)&v11);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  long long v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::bufferedAmountIsDecreasing(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 687;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v11);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v12);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v6, a4);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebMDNSRegister::finishedRegisteringMDNSName(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, void *a4, unsigned __int16 a5, uint64_t *a6)
{
  if ((a5 & 0xFF00) != 0) {
    goto LABEL_6;
  }
  uint64_t v11 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 8), a2);
  uint64_t v12 = *(uint64_t **)(a1 + 8);
  if (v12) {
    v12 += 6 * *((unsigned int *)v12 - 1);
  }
  if (v12 != v11)
  {
    WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::add<WTF::String&>(v11 + 4, a3, a4, (uint64_t)v18);
LABEL_6:
    uint64_t v13 = a5;
    uint64_t v14 = *a6;
    *a6 = 0;
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v14 + 16))(v14, a4, v13);
    return (*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v16 = *a6;
  *a6 = 0;
  (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v16 + 16))(v16, a4, 258);
  uint64_t v17 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 8);

  return v17(v16);
}

atomic_uchar *volatile **WebKit::WebMDNSRegister::unregisterMDNSNames(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 8), a2);
  WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::take(v3, (WTF::StringImpl *)v4, &v11);
  uint64_t result = v11;
  if (v11)
  {
    int v7 = *((_DWORD *)v11 - 3);
    uint64_t result = (atomic_uchar *volatile **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((WTF::StringImpl **)v11, v5);
    if (v7)
    {
      {
        uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v9);
      }
      uint64_t v8 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v11, *(atomic_uchar *volatile **)(v8 + 24));
      uint64_t v10 = a2;
      IPC::Connection::send<Messages::NetworkMDNSRegister::UnregisterMDNSNames>((uint64_t)v11, &v10, 0, 0, 0);
      return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v11);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkMDNSRegister::UnregisterMDNSNames>(uint64_t a1, uint64_t **a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 300;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v10, *a2);
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

IPC::Encoder *WebKit::WebMDNSRegister::registerMDNSName(uint64_t *a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t *a4)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1[1];
  if (v9
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(a1 + 1, 0), (uint64_t v9 = *v8) != 0))
  {
    int v10 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v10 = 0;
  }
  LODWORD(v58[0]) = -1640531527;
  WORD2(v58[0]) = 0;
  BYTE6(v58[0]) = 0;
  WTF::addArgs<WTF::UUID>(v58, a2);
  unsigned int v13 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v58) & v10;
  uint64_t v14 = (uint64_t *)(v9 + 48 * v13);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v17 = v14[2];
  if (*(_OWORD *)v14 == 0 && v17 == 0)
  {
LABEL_25:
    uint64_t v24 = (WTF::StringImpl **)v14[4];
    uint64_t v25 = a2[2];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    void v14[2] = v25;
    v14[4] = 0;
    if (v24) {
      WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v24, v11);
    }
    uint64_t v11 = (WTF::StringImpl *)v14;
LABEL_28:
    uint64_t v26 = *v8;
    if (*v8) {
      int v27 = *(_DWORD *)(v26 - 12) + 1;
    }
    else {
      int v27 = 1;
    }
    *(_DWORD *)(v26 - 12) = v27;
    uint64_t v28 = *v8;
    if (*v8) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30) {
        goto LABEL_36;
      }
    }
    else if (3 * v31 > 4 * v30)
    {
LABEL_36:
      uint64_t v14 = (uint64_t *)v11;
      goto LABEL_40;
    }
    uint64_t v14 = (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(v8, (uint64_t)v11);
    goto LABEL_40;
  }
  uint64_t v11 = 0;
  int v19 = 1;
  while (1)
  {
    BOOL v20 = v15 == a2[1] && v16 == *a2;
    if (v20 && v17 == a2[2]) {
      break;
    }
    if (v17 == -1) {
      uint64_t v11 = (WTF::StringImpl *)v14;
    }
    unsigned int v13 = (v13 + v19) & v10;
    uint64_t v14 = (uint64_t *)(v9 + 48 * v13);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = v14[2];
    ++v19;
    if (*(_OWORD *)v14 == 0 && v17 == 0)
    {
      if (!v11) {
        goto LABEL_25;
      }
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      *((void *)v11 + 4) = 0;
      --*(_DWORD *)(*v8 - 16);
      long long v23 = *(_OWORD *)a2;
      *((void *)v11 + 2) = a2[2];
      *(_OWORD *)uint64_t v11 = v23;
      *((void *)v11 + 4) = 0;
      goto LABEL_28;
    }
  }
LABEL_40:
  uint64_t v32 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v14 + 4, a3, v12);
  uint64_t v33 = v14[4];
  if (v33) {
    v33 += 16 * *(unsigned int *)(v33 - 4);
  }
  if (v33 != v32)
  {
    uint64_t v34 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v34 + 16))(v34, v32 + 8, 0);
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  {
    char v54 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v54);
  }
  uint64_t v36 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                             + 24);
  uint64_t v37 = *a1;
  if (*a1) {
    goto LABEL_50;
  }
  uint64_t v37 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v37 = 1;
  *(void *)(v37 + 8) = a1;
  uint64_t v39 = (unsigned int *)*a1;
  *a1 = v37;
  if (!v39) {
    goto LABEL_50;
  }
  if (atomic_fetch_add((atomic_uint *volatile)v39, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v39);
    WTF::fastFree((WTF *)v39, v38);
  }
  uint64_t v37 = *a1;
  if (*a1) {
LABEL_50:
  }
    atomic_fetch_add((atomic_uint *volatile)v37, 1u);
  uint64_t v40 = *a4;
  *a4 = 0;
  long long v56 = *(_OWORD *)a2;
  *(void *)&long long v57 = a2[2];
  long long v41 = *a3;
  if (*a3)
  {
    int v42 = *(_DWORD *)v41;
    *(_OWORD *)v58 = v56;
    long long v59 = v57;
    *(_DWORD *)long long v41 = v42 + 4;
  }
  else
  {
    *(_OWORD *)v58 = v56;
    long long v59 = v57;
  }
  uint64_t v43 = WTF::fastMalloc((WTF *)0x50);
  uint64_t v45 = v43;
  *(void *)uint64_t v43 = &unk_1EE9F2CC8;
  *(void *)(v43 + 16) = v37;
  *(void *)(v43 + 24) = v40;
  long long v46 = v59;
  *(_OWORD *)(v43 + ++*(_DWORD *)(this + 32) = *(_OWORD *)v58;
  *(_OWORD *)(v43 + 48) = v46;
  if (v41)
  {
    int v47 = *(_DWORD *)v41;
    *(_DWORD *)v41 += 2;
    *(void *)(v43 + 64) = v41;
    if (v47) {
      *(_DWORD *)long long v41 = v47;
    }
    else {
      WTF::StringImpl::destroy(v41, v44);
    }
  }
  else
  {
    *(void *)(v43 + 64) = 0;
  }
  uint64_t v48 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v49 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)v49 = 299;
  *((void *)v49 + 1) = 0;
  *((void *)v49 + 66) = (char *)v49 + 16;
  *((void *)v49 + 67) = 512;
  *((void *)v49 + 68) = 0;
  *((void *)v49 + 70) = 0;
  *((void *)v49 + 69) = 0;
  IPC::Encoder::encodeHeader(v49);
  v58[0] = v49;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v49, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v49, (uint64_t *)a3);
  v55[0] = v45;
  v55[1] = v48;
  IPC::Connection::sendMessageWithAsyncReply(v36, v58, v55, 0, 0);
  uint64_t v51 = v55[0];
  v55[0] = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t result = v58[0];
  v58[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v50);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v52, v53);
    if (!v41) {
      return result;
    }
  }
  else if (!v41)
  {
    return result;
  }
  if (*(_DWORD *)v41 == 2) {
    return (IPC::Encoder *)WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v50);
  }
  *(_DWORD *)v41 -= 2;
  return result;
}

IPC::Encoder *WebKit::WebRTCMonitor::startUpdating(WebKit::WebRTCMonitor *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v10 = 134217984;
    *(void *)&v10[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::StartUpdating - Asking network process to start updating", v10, 0xCu);
  }
  {
    uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 518;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  *(void *)int v10 = v4;
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)v10, 0, 0);
  uint64_t result = *(IPC::Encoder **)v10;
  *(void *)int v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  ++*(_DWORD *)this;
  return result;
}

void WebKit::WebRTCMonitor::stopUpdating(WebKit::WebRTCMonitor *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v12 = 134217984;
    *(void *)&v12[4] = this;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::StopUpdating", v12, 0xCu);
  }
  if ((*(_DWORD *)this)-- == 1)
  {
    uint64_t v4 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v12 = 134217984;
      *(void *)&v12[4] = this;
      _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::StopUpdating - Asking network process to stop updating", v12, 0xCu);
    }
    {
      uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v11);
    }
    uint64_t v5 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
    uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v6 = 519;
    *((void *)v6 + 1) = 0;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 68) = 0;
    *((void *)v6 + 70) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    *(void *)uint64_t v12 = v6;
    IPC::Connection::sendMessageImpl(v5, (uint64_t *)v12, 0, 0);
    uint64_t v8 = *(IPC::Encoder **)v12;
    *(void *)uint64_t v12 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v9, v10);
    }
  }
}

void *WebKit::WebRTCMonitor::networksChanged(uint64_t a1, uint64_t *a2, long long *a3, long long *a4)
{
  *(void *)&v29[9] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)int v29 = a1;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - WebRTCMonitor::NetworksChanged", buf, 0xCu);
  }
  *(unsigned char *)(a1 + 24) = 1;
  int v10 = (WTF **)(a1 + 32);
  unsigned int v11 = *(_DWORD *)(a1 + 44);
  if (v11) {
    WTF::VectorDestructor<true,WebKit::RTCNetwork>::destruct(*v10, (WTF *)((char *)*v10 + 96 * v11));
  }
  uint64_t v12 = *v10;
  if (*v10)
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v12, v9);
  }
  uint64_t v13 = *a2;
  *a2 = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 32) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 40) = v13;
  LODWORD(v13) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 44) = v13;
  long long v14 = *a3;
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a3 + 4);
  *(_OWORD *)(a1 + 48) = v14;
  long long v15 = *a4;
  *(_DWORD *)(a1 + 84) = *((_DWORD *)a4 + 4);
  *(_OWORD *)(a1 + 68) = v15;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)(a1 + 8), buf);
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16)
  {
    uint64_t v17 = *(unsigned int *)(v16 - 4);
    uint64_t v18 = v16 + 8 * v17;
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v23 = a1 + 8;
  uint64_t v24 = v18;
  uint64_t v25 = v18;
  uint64_t v26 = v18;
  uint64_t v27 = v16 + 8 * v17;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v23);
  uint64_t v20 = *(void *)&v29[1];
  if (*(void *)&v29[1] != v24)
  {
    uint64_t v21 = a1 + 48;
    uint64_t v22 = a1 + 68;
    do
    {
      (*(void (**)(void, WTF **, uint64_t, uint64_t))(**(void **)(*(void *)v20 + 8) + 16))(*(void *)(*(void *)v20 + 8), v10, v21, v22);
      uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(buf);
      uint64_t v20 = *(void *)&v29[1];
    }
    while (*(void *)&v29[1] != v24);
  }
  return result;
}

void *WebKit::WebRTCMonitor::networkProcessCrashed(WebKit::WebRTCMonitor *this)
{
  uint64_t v2 = (char *)this + 8;
  WTF::WeakHashSet<WebKit::ApplicationStateTracker,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((void **)this + 1, &v12);
  uint64_t v3 = *((void *)this + 1);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 8 * v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v4 = 0;
  }
  int v7 = v2;
  uint64_t v8 = v5;
  uint64_t v9 = v5;
  uint64_t v10 = v5;
  uint64_t v11 = v3 + 8 * v4;
  uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v7);
  while (v13 != v8)
  {
    (*(void (**)(void))(**(void **)(*(void *)v13 + 8) + 24))(*(void *)(*(void *)v13 + 8));
    uint64_t result = WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v12);
  }
  return result;
}

void *WebKit::WebRTCResolver::setResolvedAddress(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *result;
  uint64_t v4 = *(unsigned int *)(a2 + 12);
  if (v4)
  {
    if (v4 >> 27)
    {
      __break(0xC471u);
      return result;
    }
    uint64_t v6 = WTF::fastMalloc((WTF *)(32 * v4));
    if (*(_DWORD *)(a2 + 12))
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        WebKit::RTC::Network::IPAddress::rtcAddress((int *)(*(void *)a2 + v7), (uint64_t)v17);
        uint64_t v10 = v6 + v8;
        *(void *)uint64_t v10 = &unk_1EE9BD6E8;
        *(_DWORD *)(v10 + 8) = *(_DWORD *)&v17[8];
        *(_OWORD *)(v10 + 12) = *(_OWORD *)&v17[12];
        ++v9;
        v8 += 32;
        v7 += 20;
      }
      while (v9 < *(unsigned int *)(a2 + 12));
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  else
  {
    LODWORD(v9) = 0;
    uint64_t v6 = 0;
  }
  uint64_t v11 = v2[1];
  *(void *)uint64_t v17 = v3;
  *(void *)&v17[8] = v11;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v12 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v12 = &unk_1EE9F2CF0;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)v17;
  *(void *)(v12 + 24) = v6;
  *(void *)&v17[16] = 0;
  *(void *)&v17[24] = 0;
  *(_DWORD *)(v12 + ++*(_DWORD *)(this + 32) = v4;
  *(_DWORD *)(v12 + 36) = v9;
  uint64_t v15 = v12;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17[16], v13);
  return (void *)WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v16, v14);
}

uint64_t WebKit::WebRTCResolver::resolvedAddressError(WebKit::WebRTCResolver *this, int a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v5 = &unk_1EE9F2D18;
  *(void *)(v5 + 8) = v3;
  *(void *)(v5 + 16) = v4;
  *(_DWORD *)(v5 + 24) = a2;
  uint64_t v7 = v5;
  WebCore::LibWebRTCProvider::callOnWebRTCNetworkThread();
  uint64_t result = v7;
  if (v7) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return result;
}

uint64_t WebKit::NotificationPermissionRequestManager::create@<X0>(WebKit::NotificationPermissionRequestManager *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = WTF::fastMalloc((WTF *)0x18);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  *(_DWORD *)uint64_t result = 1;
  *(void *)(result + 8) = 0;
  if (this)
  {
    uint64_t result = (uint64_t)WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)this + 6, (uint64_t)this + 16);
    uint64_t v7 = (atomic_uint *)*((void *)this + 3);
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
  }
  *(void *)(v6 + 16) = v7;
  *a2 = v6;
  return result;
}

void WebKit::NotificationPermissionRequestManager::~NotificationPermissionRequestManager(WebKit::NotificationPermissionRequestManager *this)
{
  uint64_t v9 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  uint64_t v3 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(&v9);
  uint64_t v4 = v2;
  uint64_t v5 = v9;
  if (v9) {
    uint64_t v6 = (WebCore::SecurityOriginData *)(v9 + 48 * *(unsigned int *)(v9 - 4));
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 != v3)
  {
    do
    {
      WebKit::NotificationPermissionRequestManager::callPermissionHandlersWith((uint64_t)v3 + 32, 1);
      while (1)
      {
        uint64_t v3 = (WebCore::SecurityOriginData *)((char *)v3 + 48);
        if (v3 == v4) {
          break;
        }
        if (!WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v3)) {
          goto LABEL_10;
        }
      }
      uint64_t v3 = v4;
LABEL_10:
      ;
    }
    while (v3 != v6);
    uint64_t v5 = v9;
  }
  if (v5) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v5, v2);
  }
  uint64_t v7 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7 && atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, v2);
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8) {
    WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v8, v2);
  }
}

uint64_t WebKit::NotificationPermissionRequestManager::callPermissionHandlersWith(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 12);
  if (v2)
  {
    uint64_t v4 = *(uint64_t **)result;
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4;
      *v4++ = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a2);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

WTF::StringImpl *WebKit::NotificationPermissionRequestManager::startRequest(uint64_t a1, WebCore::SecurityOriginData *a2, WTF::StringImpl *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 8);
  long long v61 = 0uLL;
  if (v6
    || (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand((uint64_t *)(a1 + 8), 0), (uint64_t v6 = *v5) != 0))
  {
    int v7 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v7 = 0;
  }
  LODWORD(v65) = -1640531527;
  WORD2(v65) = 0;
  BYTE6(v65) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v65, (uint64_t)a2);
  unsigned int v8 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v65) & v7;
  uint64_t v9 = (unsigned int *)(v6 + 48 * v8);
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
  if (v10) {
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  int v12 = 1;
  while (1)
  {
    unsigned int v13 = v9[6];
    if (v13) {
      break;
    }
    if (*(void *)v9 != -1) {
      goto LABEL_8;
    }
    uint64_t v11 = v9;
LABEL_11:
    unsigned int v8 = (v8 + v12) & v7;
    uint64_t v9 = (unsigned int *)(v6 + 48 * v8);
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v9);
    ++v12;
    if (v15) {
      goto LABEL_15;
    }
  }
  if (v13 == 1)
  {
LABEL_8:
    if (WebCore::operator==())
    {
      char v53 = 1;
      char v54 = a3;
      goto LABEL_34;
    }
    goto LABEL_11;
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_15:
  if (v11)
  {
    *((_OWORD *)v11 + 1) = 0u;
    *((_OWORD *)v11 + 2) = 0u;
    *(_OWORD *)uint64_t v11 = 0u;
    --*(_DWORD *)(*v5 - 16);
    uint64_t v9 = v11;
  }
LABEL_17:
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_assign[abi:sn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v9, (uint64_t)a2);
  long long v17 = v61;
  long long v61 = 0uLL;
  uint64_t v18 = v9[11];
  if (v18)
  {
    int v19 = (uint64_t *)*((void *)v9 + 4);
    uint64_t v20 = 8 * v18;
    do
    {
      uint64_t v21 = *v19;
      *int v19 = 0;
      if (v21) {
        (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
      }
      ++v19;
      v20 -= 8;
    }
    while (v20);
  }
  uint64_t v22 = (WTF *)*((void *)v9 + 4);
  if (v22)
  {
    *((void *)v9 + 4) = 0;
    v9[10] = 0;
    WTF::fastFree(v22, v16);
  }
  long long v65 = 0uLL;
  *((_OWORD *)v9 + 2) = v17;
  WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v16);
  uint64_t v23 = *v5;
  if (*v5) {
    int v24 = *(_DWORD *)(v23 - 12) + 1;
  }
  else {
    int v24 = 1;
  }
  char v54 = a3;
  *(_DWORD *)(v23 - 12) = v24;
  uint64_t v25 = *v5;
  if (*v5) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 <= 2 * v27) {
LABEL_32:
    }
      uint64_t v9 = WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(v5, (uint64_t)v9);
  }
  else if (3 * v28 <= 4 * v27)
  {
    goto LABEL_32;
  }
  char v53 = 0;
LABEL_34:
  WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v14);
  int v29 = v9 + 8;
  uint64_t v30 = v9[11];
  if (v30 == v9[10])
  {
    uint64_t result = (WTF::StringImpl *)WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v29, v30 + 1, (unint64_t)v54);
    uint64_t v30 = v9[11];
    uint64_t v32 = (void *)(*((void *)v9 + 4) + 8 * v30);
  }
  else
  {
    uint64_t v32 = (void *)(*(void *)v29 + 8 * v30);
    uint64_t result = v54;
  }
  uint64_t v33 = *(void *)result;
  *(void *)uint64_t result = 0;
  *uint64_t v32 = v33;
  v9[11] = v30 + 1;
  if ((v53 & 1) == 0)
  {
    uint64_t v34 = *(void *)(a1 + 16);
    if (v34)
    {
      uint64_t v35 = *(void *)(v34 + 8);
      if (v35) {
        uint64_t v36 = v35 - 16;
      }
      else {
        uint64_t v36 = 0;
      }
    }
    else
    {
      uint64_t v36 = 0;
    }
    WebCore::SecurityOriginData::toString((uint64_t *)&v58, a2);
    ++*(_DWORD *)a1;
    *(void *)&long long v61 = a1;
    *((void *)&v61 + 1) = a1;
    v62[0] = 0;
    int v63 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v62, (uint64_t)a2);
    uint64_t v38 = *(void *)(v36 + 32);
    uint64_t v37 = v36 + 32;
    uint64_t v39 = *(void *)v54;
    *(void *)char v54 = 0;
    uint64_t v64 = v39;
    uint64_t v40 = (*(uint64_t (**)(uint64_t))(v38 + 56))(v37);
    long long v41 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v41 = 2046;
    *((void *)v41 + 1) = v40;
    *((void *)v41 + 66) = (char *)v41 + 16;
    *((void *)v41 + 67) = 512;
    *((void *)v41 + 68) = 0;
    *((void *)v41 + 70) = 0;
    *((void *)v41 + 69) = 0;
    IPC::Encoder::encodeHeader(v41);
    long long v59 = v41;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v41, (uint64_t *)&v58);
    long long v42 = v61;
    *((void *)&v61 + 1) = 0;
    long long v65 = v42;
    v66[0] = 0;
    int v67 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v66, (uint64_t)v62);
    uint64_t v43 = v64;
    uint64_t v64 = 0;
    uint64_t v68 = v43;
    uint64_t v44 = WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v44 = &unk_1EE9F2D40;
    *(void *)(v44 + 8) = v65;
    uint64_t v45 = *((void *)&v65 + 1);
    *((void *)&v65 + 1) = 0;
    *(void *)(v44 + 16) = v45;
    *(unsigned char *)(v44 + 24) = 0;
    *(_DWORD *)(v44 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v44 + 24, (uint64_t)v66);
    *(void *)(v44 + 56) = v68;
    uint64_t v68 = 0;
    if (v67 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v67])(&v60, v66);
    }
    int v67 = -1;
    long long v46 = (WebKit::NotificationPermissionRequestManager *)*((void *)&v65 + 1);
    *((void *)&v65 + 1) = 0;
    if (v46) {
      WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v46);
    }
    uint64_t v47 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    *(void *)&long long v65 = v44;
    *((void *)&v65 + 1) = v47;
    (*(void (**)(uint64_t, IPC::Encoder **, long long *, void))(*(void *)v37 + 40))(v37, &v59, &v65, 0);
    uint64_t v49 = v65;
    *(void *)&long long v65 = 0;
    if (v49) {
      (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
    }
    long long v50 = v59;
    long long v59 = 0;
    if (v50)
    {
      IPC::Encoder::~Encoder(v50, v48);
      WTF::fastFree(v55, v56);
    }
    uint64_t v51 = v64;
    uint64_t v64 = 0;
    if (v51) {
      (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
    }
    if (v63 != -1) {
      ((void (*)(long long *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v63])(&v65, v62);
    }
    int v63 = -1;
    v52 = (WebKit::NotificationPermissionRequestManager *)*((void *)&v61 + 1);
    *((void *)&v61 + 1) = 0;
    if (v52) {
      WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v52);
    }
    uint64_t result = v58;
    v58 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v48);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebKit::NotificationPermissionRequestManager::setPermissionLevelForTesting(WebKit::NotificationPermissionRequestManager *this, WTF::StringImpl **a2, char a3)
{
  {
    int v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  v8[0] = "WebNotificationManager";
  v8[1] = 23;
  uint64_t v5 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v8);
  return WebKit::WebNotificationManager::didUpdateNotificationDecision((uint64_t)v5, a2, a3);
}

WTF::StringImpl **WebKit::NotificationPermissionRequestManager::removeAllPermissionsForTesting(WebKit::NotificationPermissionRequestManager *this)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  v5[0] = "WebNotificationManager";
  v5[1] = 23;
  uint64_t v2 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v5);
  uint64_t result = (WTF::StringImpl **)*((void *)v2 + 4);
  if (result)
  {
    *((void *)v2 + 4) = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v1);
  }
  return result;
}

uint64_t WebKit::LibWebRTCResolver::GetError(WebKit::LibWebRTCResolver *this)
{
  return *((unsigned int *)this + 32);
}

uint64_t non-virtual thunk to'WebKit::LibWebRTCResolver::GetError(WebKit::LibWebRTCResolver *this)
{
  return *((unsigned int *)this + 30);
}

size_t WebKit::LibWebRTCSocket::Send(WebKit::LibWebRTCSocket *this, const void *a2, size_t a3, const rtc::PacketOptions *a4)
{
  return WebKit::LibWebRTCSocket::SendTo(this, a2, a3, (WebKit::LibWebRTCSocket *)((char *)this + 448), a4);
}

uint64_t WebKit::LibWebRTCSocket::GetState(WebKit::LibWebRTCSocket *this)
{
  return *((unsigned int *)this + 131);
}

uint64_t WebKit::LibWebRTCSocket::GetError(WebKit::LibWebRTCSocket *this)
{
  return *((unsigned int *)this + 130);
}

uint64_t WebKit::LibWebRTCSocket::SetError(uint64_t this, int a2)
{
  *(_DWORD *)(this + 520) = a2;
  return this;
}

void WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::~RemoteHandlerConnection(WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection *this)
{
  *(void *)this = &unk_1EE9F2930;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 2);
}

{
  uint64_t v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE9F2930;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 56))(v2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 2);

  WTF::fastFree(this, v3);
}

void WebKit::RTCDataChannelRemoteManager::RemoteSourceConnection::~RemoteSourceConnection(atomic_uchar *volatile **this)
{
  *this = (atomic_uchar *volatile *)&unk_1EE9F2968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2);
}

{
  void *v2;
  uint64_t vars8;

  *this = (atomic_uchar *volatile *)&unk_1EE9F2968;
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(this + 2);

  WTF::fastFree((WTF *)this, v2);
}

uint64_t *sigslot::has_slots<sigslot::single_threaded>::do_signal_connect(uint64_t *result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (uint64_t **)(result + 5);
  uint64_t v4 = (uint64_t *)result[5];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v4;
        unint64_t v7 = v4[4];
        if (v7 <= a2) {
          break;
        }
        uint64_t v4 = *v6;
        uint64_t v5 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      if (v7 >= a2) {
        break;
      }
      uint64_t v4 = v6[1];
      if (!v4)
      {
        uint64_t v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v6 = (uint64_t **)(result + 5);
LABEL_9:
    unsigned int v8 = (uint64_t *)operator new(0x28uLL);
    v8[4] = a2;
    *unsigned int v8 = 0;
    v8[1] = 0;
    void v8[2] = (uint64_t)v6;
    const char *v5 = v8;
    uint64_t v9 = *(void *)v3[4];
    if (v9)
    {
      v3[4] = v9;
      char v10 = *v5;
    }
    else
    {
      char v10 = v8;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v3[5], v10);
    ++v3[6];
  }
  return result;
}

void sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect(void *a1, unint64_t a2)
{
  uint64_t v4 = a1 + 5;
  uint64_t v3 = (uint64_t *)a1[5];
  if (v3)
  {
    uint64_t v5 = v4;
    uint64_t v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      char v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          char v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[4] == v5) {
        a1[4] = v11;
      }
      --a1[6];
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all(void *a1)
{
  uint64_t v1 = a1[6];
  if (v1)
  {
    uint64_t v3 = a1 + 5;
    do
    {
      uint64_t v5 = (void *)a1[4];
      v10[0] = a1[5];
      uint64_t v4 = (void *)v10[0];
      a1[5] = 0;
      a1[6] = 0;
      v10[1] = v1;
      v4[2] = v10;
      a1[4] = v3;
      if (v5 != v10)
      {
        do
        {
          uint64_t v6 = (void *)v5[1];
          unint64_t v7 = v5;
          if (v6)
          {
            do
            {
              BOOL v8 = v6;
              uint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              BOOL v8 = (void *)v7[2];
              BOOL v9 = *v8 == (void)v7;
              unint64_t v7 = v8;
            }
            while (!v9);
          }
          (*(void (**)(void))v5[4])();
          uint64_t v5 = v8;
        }
        while (v8 != v10);
        uint64_t v4 = (void *)v10[0];
      }
      std::__tree<sigslot::_signal_base_interface *>::destroy(v4);
      uint64_t v1 = a1[6];
    }
    while (v1);
  }
}

void std::__tree<sigslot::_signal_base_interface *>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(*a1);
    std::__tree<sigslot::_signal_base_interface *>::destroy(a1[1]);
    operator delete(a1);
  }
}

void sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect(void *a1, uint64_t a2)
{
  uint64_t v2 = a1 + 2;
  uint64_t v3 = (uint64_t *)a1[3];
  if (v3 != a1 + 2)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = (uint64_t *)v3[1];
      if (v6[3] == a2)
      {
        if (v6 == v2)
        {
          __break(1u);
          return;
        }
        uint64_t v7 = *v6;
        *(void *)(v7 + 8) = v3;
        *(void *)v6[1] = v7;
        BOOL v8 = (uint64_t *)a1[5];
        --a1[4];
        operator delete(v6);
        if (v8 == v6) {
          a1[5] = v3;
        }
      }
    }
    while (v3 != v2);
  }
}

void *sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)(result + 2);
  uint64_t v4 = result[3];
  if ((void *)v4 != result + 2)
  {
    uint64_t v7 = result;
    do
    {
      if (*(void *)(v4 + 24) == a2)
      {
        uint64_t v8 = *(void *)(v4 + 16);
        long long v10 = *(_OWORD *)(v4 + 32);
        uint64_t result = operator new(0x30uLL);
        result[2] = v8;
        result[3] = a3;
        *((_OWORD *)result + 2) = v10;
        uint64_t v9 = v7[2];
        WTF::StringImpl *result = v9;
        result[1] = v3;
        *(void *)(v9 + 8) = result;
        v7[2] = result;
        ++v7[4];
      }
      uint64_t v4 = *(void *)(v4 + 8);
    }
    while ((char *)v4 != v3);
  }
  return result;
}

uint64_t rtc::FunctionView<void ()(webrtc::UntypedFunction &)>::CallVoidPtr<void webrtc::CallbackList<rtc::AsyncPacketSocket *,int>::Send<rtc::AsyncPacketSocket *,int &>(rtc::AsyncPacketSocket *,int &)::{lambda(webrtc::UntypedFunction &)#1}>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(a2 + 32))(a2, **(void **)a1, **(unsigned int **)(a1 + 8));
}

WebKit::LibWebRTCResolver *WebKit::LibWebRTCResolver::LibWebRTCResolver(WebKit::LibWebRTCResolver *this)
{
  *(void *)this = &unk_1EE9F27E8;
  *((void *)this + 1) = &unk_1EE9F2A30;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *((void *)this + 4) = 0;
  *(void *)this = &unk_1EE9F29B0;
  *((void *)this + 1) = &unk_1EE9F2A00;
  *((void *)this + 5) = 0;
  rtc::SocketAddress::SocketAddress((WebKit::LibWebRTCResolver *)((char *)this + 48));
  *((void *)this + 15) = 0;
  *((_DWORD *)this + ++*(_DWORD *)(this + 32) = 0;
  *((_WORD *)this + 66) = 0;
  return this;
}

uint64_t WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    for (uint64_t i = a1; ; i += 48)
    {
      int v5 = *(_DWORD *)(i + 24);
      if (v5) {
        break;
      }
      if (*(void *)i != -1) {
        goto LABEL_5;
      }
LABEL_8:
      if (!--v3) {
        return WTF::fastFree((WTF *)(a1 - 16), a2);
      }
    }
    if (v5 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::fastFree((WTF *)(a1 - 16), a2);
    }
LABEL_5:
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(i + 32, a2);
    uint64_t v6 = *(unsigned int *)(i + 24);
    if (v6 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v6])(&v8, i);
    }
    *(_DWORD *)(i + 24) = -1;
    goto LABEL_8;
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

WebKit::NotificationPermissionRequestManager *WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(WebKit::NotificationPermissionRequestManager *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::NotificationPermissionRequestManager::~NotificationPermissionRequestManager(result);
    return (WebKit::NotificationPermissionRequestManager *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::sendOnMainThread(WTF::Function<void ()(IPC::Connection &)> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F2A70;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::sendOnMainThread(WTF::Function<void ()(IPC::Connection &)> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F2A70;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

atomic_uchar *volatile **WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::sendOnMainThread(WTF::Function<void ()(IPC::Connection &)> &&)::$_0,void>::call(uint64_t a1)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v2 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v5, *(atomic_uchar *volatile **)(v2 + 24));
  (*(void (**)(void, atomic_uchar *volatile *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v5);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v5);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::~LibWebRTCResolver()::$_0,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 527;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 70) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v9 = v4;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, v3);
  IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    uint64_t v4 = *(WTF **)a1;
    uint64_t v5 = 32 * v3;
    uint64_t v6 = *(WTF **)a1;
    uint64_t v7 = *(WTF **)a1;
    do
    {
      char v8 = *(void (***)(WTF *))v7;
      uint64_t v7 = (WTF *)((char *)v7 + 32);
      (*v8)(v6);
      uint64_t v4 = (WTF *)((char *)v4 + 32);
      uint64_t v6 = v7;
      v5 -= 32;
    }
    while (v5);
  }
  uint64_t v9 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::start(rtc::SocketAddress const&,WTF::Function<void ()(void)> &&)::$_0,void,IPC::Connection &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F2AC0;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::start(rtc::SocketAddress const&,WTF::Function<void ()(void)> &&)::$_0,void,IPC::Connection &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F2AC0;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCResolver::start(rtc::SocketAddress const&,WTF::Function<void ()(void)> &&)::$_0,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 522;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v10 = v5;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v5, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, v4);
  IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  long long v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0,void>::call()
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  v0 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;

  return WebKit::WebProcess::ensureNetworkProcessConnection(v0);
}

uint64_t WTF::Deque<WTF::Function<void ()(IPC::Connection &)>,0ul>::expandCapacity(uint64_t result)
{
  unint64_t v1 = *(unsigned int *)(result + 24);
  unint64_t v2 = v1 + (v1 >> 2);
  if (v2 <= 0xF) {
    unint64_t v2 = 15;
  }
  if (v2 >= 0x1FFFFFFF)
  {
    __break(0xC471u);
  }
  else
  {
    uint64_t v3 = result;
    uint64_t v4 = *(WTF **)(result + 16);
    unsigned int v5 = v2 + 1;
    uint64_t result = WTF::fastMalloc((WTF *)(8 * (v2 + 1)));
    uint64_t v7 = (void *)result;
    *(_DWORD *)(v3 + 24) = v5;
    *(void *)(v3 + 16) = result;
    uint64_t v8 = *(void *)v3;
    unint64_t v9 = *(void *)(v3 + 8);
    if (*(void *)v3 <= v9)
    {
      if (*(void *)v3 != v9)
      {
        int v19 = (uint64_t *)(result + 8 * v8);
        uint64_t v20 = (uint64_t *)((char *)v4 + 8 * v8);
        uint64_t v21 = 8 * v9 - 8 * v8;
        do
        {
          uint64_t v22 = *v20;
          uint64_t *v20 = 0;
          *int v19 = v22;
          uint64_t result = *v20;
          uint64_t *v20 = 0;
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          ++v19;
          ++v20;
          v21 -= 8;
        }
        while (v21);
      }
    }
    else
    {
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        uint64_t v11 = (uint64_t *)v4;
        do
        {
          uint64_t v12 = *v11;
          *uint64_t v11 = 0;
          *uint64_t v7 = v12;
          uint64_t result = *v11;
          *uint64_t v11 = 0;
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          ++v7;
          ++v11;
          v10 -= 8;
        }
        while (v10);
        unsigned int v5 = *(_DWORD *)(v3 + 24);
        uint64_t v8 = *(void *)v3;
        uint64_t v7 = *(void **)(v3 + 16);
      }
      uint64_t v13 = v8 - v1 + v5;
      if (v8 != v1)
      {
        uint64_t v14 = v5;
        int v15 = (uint64_t *)((char *)v4 + 8 * v8);
        uint64_t v16 = &v7[v14];
        uint64_t v17 = 8 * v8 - 8 * v1;
        do
        {
          uint64_t v18 = *v15;
          *int v15 = 0;
          *(void *)((char *)v16 + v17) = v18;
          uint64_t result = *v15;
          *int v15 = 0;
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
          }
          ++v15;
          v17 += 8;
        }
        while (v17);
      }
      *(void *)uint64_t v3 = v13;
    }
    if (v4)
    {
      if (*(WTF **)(v3 + 16) == v4)
      {
        *(void *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
      }
      return WTF::fastFree(v4, v6);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F2B10;
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(WTF **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 32) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F2B10;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF *)*((void *)this + 3);
  if (v4)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v4, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createUdpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,unsigned short,unsigned short,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  __int16 v3 = *(_WORD *)(a1 + 80);
  v5[0] = a1 + 8;
  v5[1] = a1 + 16;
  int v6 = v2;
  uint64_t v7 = a1 + 72;
  __int16 v8 = v3;
  uint64_t v9 = a1 + 88;
  return IPC::Connection::send<Messages::NetworkRTCProvider::CreateUDPSocket>(a2, (uint64_t)v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_0,void>::call()
{
  {
    int v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  v0 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process;

  return WebKit::WebProcess::ensureNetworkProcessConnection(v0);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F2B60;
  __int16 v3 = *(WTF::StringImpl **)(a1 + 144);
  *(void *)(a1 + 144) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = *(WTF **)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = 0;
    WTF::fastFree(v5, a2);
  }
  int v6 = *(WTF **)(a1 + 24);
  if (v6)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 32) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F2B60;
  __int16 v3 = (WTF::StringImpl *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unsigned int v5 = (WTF *)*((void *)this + 9);
  if (v5)
  {
    *((void *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v5, a2);
  }
  int v6 = (WTF *)*((void *)this + 3);
  if (v6)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }

  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::LibWebRTCSocketFactory::createClientTcpSocket(WebCore::ProcessQualified<WTF::UUID>,rtc::SocketAddress const&,rtc::SocketAddress const&,WTF::String &&,rtc::PacketSocketTcpOptions const&,WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL,BOOL,WebCore::RegistrableDomain const&)::$_1,void,IPC::Connection &>::call(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a1 + 136);
  v4[0] = a1 + 8;
  v4[1] = a1 + 16;
  v4[2] = a1 + 64;
  v4[3] = a1 + 112;
  v4[4] = a1 + 120;
  v4[5] = a1 + 128;
  __int16 v5 = v2;
  uint64_t v6 = a1 + 144;
  return IPC::Connection::send<Messages::NetworkRTCProvider::CreateClientTCPSocket>(a2, (uint64_t)v4);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakRef<WebKit::LibWebRTCSocket,WTF::DefaultWeakPtrImpl>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::LibWebRTCSocketIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    while (1)
    {
      uint64_t v10 = (uint64_t *)(v4 + 16 * v9);
      uint64_t v11 = *v10;
      if (*v10 != -1)
      {
        if (v11)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            int v15 = 0;
          }
          unint64_t v16 = (v11 + ~(v11 << 32)) ^ ((unint64_t)(v11 + ~(v11 << 32)) >> 22);
          unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
          int v20 = 1;
          do
          {
            unsigned int v21 = v19;
            uint64_t v22 = *(void *)(v14 + 16 * v19);
            unsigned int v19 = (v19 + v20++) & v15;
          }
          while (v22);
          uint64_t v23 = (uint64_t *)(v14 + 16 * v21);
          int v24 = (unsigned int *)v23[1];
          v23[1] = 0;
          if (v24 && atomic_fetch_add((atomic_uint *volatile)v24, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v24);
            WTF::fastFree((WTF *)v24, v8);
          }
          *uint64_t v23 = *v10;
          uint64_t v25 = v4 + 16 * v9;
          uint64_t v26 = *(void *)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          v23[1] = v26;
          uint64_t v13 = *(atomic_uint **)(v25 + 8);
          *(void *)(v25 + 8) = 0;
          if (!v13 || atomic_fetch_add(v13, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        else
        {
          uint64_t v12 = v4 + 16 * v9;
          uint64_t v13 = *(atomic_uint **)(v12 + 8);
          *(void *)(v12 + 8) = 0;
          if (!v13 || atomic_fetch_add(v13, 0xFFFFFFFF) != 1) {
            goto LABEL_18;
          }
        }
        atomic_store(1u, (unsigned int *)v13);
        WTF::fastFree((WTF *)v13, v8);
      }
LABEL_18:
      if (++v9 == v5) {
        goto LABEL_25;
      }
    }
  }
  if (v4)
  {
LABEL_25:
    return WTF::fastFree((WTF *)(v4 - 16), v8);
  }
  return result;
}

unsigned int *WTF::makeUniqueRefWithoutFastMallocCheck<WebCore::RTCDataChannelRemoteSource,WebCore::RTCDataChannelIdentifier &,WTF::UniqueRef<WebCore::RTCDataChannelHandler>,WebCore::RTCDataChannelRemoteSourceConnection &>@<X0>(uint64_t a1@<X2>, unsigned int **a2@<X8>)
{
  WTF::fastMalloc((WTF *)0x30);
  atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
  uint64_t result = (unsigned int *)WebCore::RTCDataChannelRemoteSource::RTCDataChannelRemoteSource();
  *a2 = result;
  if (a1) {
    return WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref((unsigned int *)(a1 + 8));
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebCore::RTCDataChannelRemoteSource>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = WTF::fastZeroedMalloc((WTF *)(16 * v7 + 16));
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 16 * v10);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            uint64_t v24 = *(void *)(v16 + 16 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (v24);
          uint64_t v25 = (uint64_t *)(v16 + 16 * v23);
          uint64_t v26 = v25[1];
          v25[1] = 0;
          if (v26) {
            (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
          }
          *uint64_t v25 = *v12;
          uint64_t v27 = v4 + 16 * v10;
          uint64_t v28 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          v25[1] = v28;
          uint64_t v29 = *(void *)(v27 + 8);
          *(void *)(v27 + 8) = 0;
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
          }
          if (v12 == a2) {
            uint64_t v11 = v25;
          }
        }
        else
        {
          uint64_t v14 = v4 + 16 * v10;
          uint64_t v15 = *(void *)(v14 + 8);
          *(void *)(v14 + 8) = 0;
          if (v15) {
            (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
          }
        }
      }
      ++v10;
    }
    while (v10 != v5);
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v11;
}

void *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::postTaskToHandler(WebCore::RTCDataChannelIdentifier,WTF::Function<void ()(WebCore::RTCDataChannelRemoteHandler &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F2B88;
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::postTaskToHandler(WebCore::RTCDataChannelIdentifier,WTF::Function<void ()(WebCore::RTCDataChannelRemoteHandler &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2B88;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::postTaskToHandler(WebCore::RTCDataChannelIdentifier,WTF::Function<void ()(WebCore::RTCDataChannelRemoteHandler &)> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    if (*(void *)(v1 + 8)) {
      return (*(uint64_t (**)(void))(**(void **)(result + 16) + 16))();
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::changeReadyState(WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelState)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4171940](a2, *(unsigned __int8 *)(a1 + 8));
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::receiveData(WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F2BD8;
  uint64_t v3 = *(WTF **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 32) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(WTF::StringImpl **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::receiveData(WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2BD8;
  uint64_t v3 = (WTF *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::receiveData(WebCore::RTCDataChannelIdentifier,BOOL,std::span<unsigned char const,18446744073709551615ul>)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    return MEMORY[0x1F4171938](a2, *(void *)(a1 + 24), *(unsigned int *)(a1 + 36));
  }
  else {
    return MEMORY[0x1F4171948](a2, a1 + 16);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::detectError(WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String &&)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F2C00;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::detectError(WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String &&)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F2C00;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::detectError(WebCore::RTCDataChannelIdentifier,WebCore::RTCErrorDetailType,WTF::String &&)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call()
{
  WebCore::RTCError::create((uint64_t *)&v1);
  WebCore::RTCDataChannelRemoteHandler::didDetectError();
  uint64_t result = v1;
  uint64_t v1 = 0;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WebCore::RTCError::create(uint64_t *a1)
{
  WTF::fastMalloc((WTF *)0x48);
  uint64_t result = WebCore::RTCError::RTCError();
  *a1 = result;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::bufferedAmountIsDecreasing(WebCore::RTCDataChannelIdentifier,unsigned long)::$_0,void,WebCore::RTCDataChannelRemoteHandler &>::call(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4171950](a2, *(void *)(a1 + 8));
}

void *WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F2C50;
  uint64_t v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2C50;
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = WebKit::RTCDataChannelRemoteManager::sharedManager((WebKit::RTCDataChannelRemoteManager *)a1);
  uint64_t v4 = *(unsigned int **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  int v6 = (uint64_t *)(result + 56);
  uint64_t v5 = *(void *)(result + 56);
  long long v23 = *(_OWORD *)(a1 + 32);
  uint64_t v24 = *(void *)(a1 + 48);
  if (v5
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(result + 56), 0), (v5 = *v6) != 0))
  {
    unsigned int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = (v8 + ~(v8 << 32)) ^ ((unint64_t)(v8 + ~(v8 << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  uint64_t v12 = v7 & ((v11 >> 31) ^ v11);
  uint64_t v13 = v5 + (v12 << 6);
  uint64_t v14 = *(void *)v13;
  if (*(void *)v13)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    while (v14 != v8)
    {
      if (v14 == -1) {
        uint64_t v15 = v13;
      }
      uint64_t v12 = (v12 + v16) & v7;
      uint64_t v13 = v5 + (v12 << 6);
      uint64_t v14 = *(void *)v13;
      ++v16;
      if (!*(void *)v13)
      {
        if (v15)
        {
          *(void *)uint64_t v15 = 0;
          *(_OWORD *)(v15 + 16) = 0u;
          *(_OWORD *)(v15 + ++*(_DWORD *)(this + 32) = 0u;
          *(_OWORD *)(v15 + 48) = 0u;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v8 = *(void *)(a1 + 72);
          uint64_t v13 = v15;
        }
        goto LABEL_12;
      }
    }
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      return WTF::fastFree((WTF *)v4, v3);
    }
  }
  else
  {
LABEL_12:
    *(void *)uint64_t v13 = v8;
    uint64_t result = *(void *)(v13 + 16);
    *(void *)(v13 + 16) = v4;
    if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)result);
      uint64_t result = WTF::fastFree((WTF *)result, v3);
    }
    *(_OWORD *)(v13 + ++*(_DWORD *)(this + 32) = v23;
    *(void *)(v13 + 48) = v24;
    uint64_t v17 = *v6;
    if (*v6) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v19 = *v6;
    if (*v6) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21) {
        return result;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6, v13);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::RTCDataChannelRemoteManager::RemoteHandler,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebKit::RTCDataChannelRemoteManager::RemoteHandler>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = a2;
    int v5 = *(_DWORD *)(v3 - 4);
    int v6 = *(_DWORD *)(v3 - 12);
    if (v5)
    {
      unsigned int v7 = v5 << (6 * v6 >= (2 * v5));
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = a2;
    int v5 = 0;
    int v6 = 0;
  }
  unsigned int v7 = 8;
LABEL_6:
  uint64_t v8 = v7;
  uint64_t result = WTF::fastMalloc((WTF *)(((unint64_t)v7 << 6) | 0x10));
  if (v7)
  {
    unint64_t v11 = (_OWORD *)(result + 32);
    do
    {
      *((void *)v11 - 2) = 0;
      *unint64_t v11 = 0uLL;
      v11[1] = 0uLL;
      void v11[2] = 0uLL;
      v11 += 4;
      --v8;
    }
    while (v8);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v7;
  *(_DWORD *)(*a1 - 8) = v7 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v12 = 0;
    uint64_t v13 = v4;
    do
    {
      uint64_t v14 = (uint64_t *)(v3 + (v12 << 6));
      uint64_t v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          uint64_t v19 = *a1;
          if (*a1) {
            int v20 = *(_DWORD *)(v19 - 8);
          }
          else {
            int v20 = 0;
          }
          unint64_t v21 = (v15 + ~(v15 << 32)) ^ ((unint64_t)(v15 + ~(v15 << 32)) >> 22);
          unint64_t v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
          unint64_t v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
          unsigned int v24 = v20 & ((v23 >> 31) ^ v23);
          int v25 = 1;
          do
          {
            unsigned int v26 = v24;
            uint64_t v27 = *(void *)(v19 + ((unint64_t)v24 << 6));
            unsigned int v24 = (v24 + v25++) & v20;
          }
          while (v27);
          uint64_t v28 = v19 + ((unint64_t)v26 << 6);
          uint64_t v29 = *(unsigned int **)(v28 + 16);
          *(void *)(v28 + 16) = 0;
          if (v29 && atomic_fetch_add((atomic_uint *volatile)v29, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v29);
            uint64_t v35 = v13;
            WTF::fastFree((WTF *)v29, v10);
            uint64_t v13 = v35;
          }
          *(void *)uint64_t v28 = *v14;
          uint64_t v30 = v3 + (v12 << 6);
          uint64_t v31 = *(void *)(v30 + 16);
          *(void *)(v30 + 16) = 0;
          *(void *)(v28 + 16) = v31;
          long long v32 = *(_OWORD *)(v30 + 48);
          *(_OWORD *)(v28 + ++*(_DWORD *)(this + 32) = *(_OWORD *)(v30 + 32);
          *(_OWORD *)(v28 + 48) = v32;
          uint64_t v33 = *(unsigned int **)(v30 + 16);
          *(void *)(v30 + 16) = 0;
          if (v33 && atomic_fetch_add((atomic_uint *volatile)v33, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v33);
            uint64_t v34 = v13;
            WTF::fastFree((WTF *)v33, v10);
            uint64_t v13 = v34;
          }
        }
        else
        {
          uint64_t v16 = v3 + (v12 << 6);
          uint64_t v17 = *(unsigned int **)(v16 + 16);
          *(void *)(v16 + 16) = 0;
          if (v17 && atomic_fetch_add((atomic_uint *volatile)v17, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v17);
            uint64_t v18 = v13;
            WTF::fastFree((WTF *)v17, v10);
            uint64_t v13 = v18;
          }
        }
      }
      ++v12;
    }
    while (v12 != v5);
  }
  else if (!v3)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v3 - 16), v10);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, IPC::Decoder *a2)
{
  int v2 = (WebKit::RTCDataChannelRemoteManager *)(a1 + 8);
  if (a2 && *(void *)a2 && (uint64_t v4 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(a2), (v4 & 0xFF0000) != 0))
  {
    __int16 v5 = v4;
    int v6 = (WebCore::Process *)WebKit::RTCDataChannelRemoteManager::sharedManager((WebKit::RTCDataChannelRemoteManager *)v4);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v9 = WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v9 = &unk_1EE9F2CA0;
    *(_WORD *)(v9 + 8) = v5;
    uint64_t v12 = v9;
    WebKit::RTCDataChannelRemoteManager::postTaskToHandler(v6, v8, v7, &v12);
    uint64_t result = v12;
    if (v12)
    {
      unint64_t v11 = *(uint64_t (**)(void))(*(void *)v12 + 8);
      return v11();
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(v2);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::ConnectToRTCDataChannelRemoteSource,WebKit::RTCDataChannelRemoteManager::RemoteHandlerConnection::connectToSource(WebCore::RTCDataChannelRemoteHandler &,WebCore::ProcessQualified<WTF::UUID>,WebCore::RTCDataChannelIdentifier,WebCore::RTCDataChannelIdentifier)::$_1>(WebKit::RTCDataChannelRemoteManager *a1)
{
  int v2 = (WebCore::Process *)WebKit::RTCDataChannelRemoteManager::sharedManager(a1);
  uint64_t v4 = *(void *)a1;
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v5 = &unk_1EE9F2CA0;
  *(_WORD *)(v5 + 8) = 0;
  uint64_t v8 = v5;
  WebKit::RTCDataChannelRemoteManager::postTaskToHandler(v2, v4, v3, &v8);
  uint64_t result = v8;
  if (v8)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)v8 + 8);
    return v7();
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit27RTCDataChannelRemoteManager23RemoteHandlerConnection15connectToSourceERN7WebCore27RTCDataChannelRemoteHandlerENS5_16ProcessQualifiedINS_4UUIDEEENS5_24RTCDataChannelIdentifierESB_ENK3__1clINSt3__18optionalIbEEEEDaOT_EUlRSI_E_vJS7_EE4callES7_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 9) && *(unsigned char *)(a1 + 8))
  {
    return MEMORY[0x1F4171928](a2);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::RTCError::create((uint64_t *)&v6);
    WebCore::RTCDataChannelRemoteHandler::didDetectError();
    uint64_t v3 = v6;
    int v6 = 0;
    if (v3)
    {
      if (v3[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      else {
        --v3[2];
      }
    }
    uint64_t result = (uint64_t)v5;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        return WTF::StringImpl::destroy(v5, v2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return result;
}

uint64_t *WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::take@<X0>(uint64_t *a1@<X0>, WTF::StringImpl *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = (WTF::StringImpl *)*a1;
  if (*a1) {
    uint64_t v3 = (WTF::StringImpl *)((char *)v3 + 48 * *((unsigned int *)v3 - 1));
  }
  if (v3 == a2)
  {
    *a3 = 0;
    return a1;
  }
  uint64_t v4 = *((void *)a2 + 4);
  *((void *)a2 + 4) = 0;
  *a3 = v4;
  if (*a1)
  {
    uint64_t v5 = (WTF::StringImpl *)(*a1 + 48 * *(unsigned int *)(*a1 - 4));
    if (v5 == a2) {
      return a1;
    }
  }
  else
  {
    if (!a2) {
      return a1;
    }
    uint64_t v5 = 0;
  }
  if (v5 != a2) {
    return (uint64_t *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(a1, a2);
  }
  return a1;
}

WTF::StringImpl **WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  *(void *)a2 = 1;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = -1;
  uint64_t result = (WTF::StringImpl **)*((void *)a2 + 4);
  if (result) {
    uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF::StringImpl **)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v10 = a2;
    unint64_t v11 = (void *)(v8 + 48);
    do
    {
      *(v11 - 4) = 0;
      *(v11 - 3) = 0;
      *(v11 - 2) = 0;
      *unint64_t v11 = 0;
      v11 += 6;
      --v10;
    }
    while (v10);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      uint64_t v14 = v5 + 48 * v12;
      uint64_t v15 = *(void *)(v14 + 16);
      if (v15 != -1)
      {
        if (v15) {
          BOOL v16 = 0;
        }
        else {
          BOOL v16 = *(_OWORD *)v14 == 0;
        }
        if (v16)
        {
          uint64_t v19 = *(WTF::StringImpl ***)(v5 + 48 * v12 + 32);
          if (v19) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v19, v9);
          }
        }
        else
        {
          uint64_t v17 = *a1;
          if (*a1) {
            unsigned int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            unsigned int v18 = 0;
          }
          int v35 = -1640531527;
          __int16 v36 = 0;
          char v37 = 0;
          WTF::addArgs<WTF::UUID>(&v35, (void *)(v5 + 48 * v12));
          int v20 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v35);
          int v21 = 0;
          do
          {
            unsigned int v22 = v20 & v18;
            uint64_t v23 = v17 + 48 * (v20 & v18);
            int v20 = ++v21 + (v20 & v18);
          }
          while (*(_OWORD *)v23 != 0 || *(void *)(v23 + 16) != 0);
          uint64_t v25 = v17 + 48 * v22;
          uint64_t v28 = *(WTF::StringImpl ***)(v25 + 32);
          uint64_t v27 = (void *)(v25 + 32);
          unsigned int v26 = v28;
          if (v28) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v26, v9);
          }
          long long v29 = *(_OWORD *)(v14 + 16);
          *(_OWORD *)uint64_t v23 = *(_OWORD *)v14;
          *(_OWORD *)(v23 + 16) = v29;
          uint64_t v30 = v5 + 48 * v12;
          *uint64_t v27 = 0;
          uint64_t v31 = *(void *)(v30 + 32);
          *(void *)(v30 + ++*(_DWORD *)(this + 32) = 0;
          *uint64_t v27 = v31;
          long long v32 = *(WTF::StringImpl ***)(v30 + 32);
          if (v32) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v32, v9);
          }
          if (v14 == a3) {
            uint64_t v13 = v23;
          }
        }
      }
      ++v12;
    }
    while (v12 != v6);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::String>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::String>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *a1;
  if (!*a1) {
    return 0;
  }
  int v6 = *(_DWORD *)(v3 - 8);
  unsigned int v7 = *((_DWORD *)*a2 + 4);
  if (v7 >= 0x100) {
    unsigned int v8 = v7 >> 8;
  }
  else {
    unsigned int v8 = WTF::StringImpl::hashSlowCase(*a2);
  }
  for (i = 0; ; unsigned int v8 = i + v11)
  {
    uint64_t v11 = v8 & v6;
    uint64_t v12 = *(WTF **)(v3 + 16 * v11);
    if (!v12) {
      break;
    }
    if (v12 != (WTF *)-1 && (WTF::equal(v12, *a2, a3) & 1) != 0) {
      return v3 + 16 * v11;
    }
    ++i;
  }
  if (*a1) {
    return *a1 + 16 * *(unsigned int *)(*a1 - 4);
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F2CC8;
  uint64_t v3 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[3];
  a1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unsigned int v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F2CC8;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  unsigned int v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 16;
  if (!a2 || !*(void *)a2)
  {
    uint64_t v14 = a1 + 16;
    return IPC::Connection::cancelReply<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(v14);
  }
  unsigned int v5 = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)v38);
  if (!LOBYTE(v38[1]))
  {
LABEL_48:
    long long v29 = *(WTF::StringImpl **)a2;
    uint64_t v30 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v31 = *((void *)a2 + 3);
    if (v31 && v30) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v31 + 16))(v31, v29);
    }
    return IPC::Connection::cancelReply<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(v2);
  }
  unint64_t v6 = *((void *)a2 + 1);
  unsigned int v7 = *(WTF::StringImpl **)a2;
  unint64_t v8 = *((void *)a2 + 2) - *(void *)a2;
  if (v6 <= v8)
  {
    unint64_t v16 = 0;
    uint64_t v17 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v18 = *((void *)a2 + 3);
    if (v18)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v18 + 16))(v18);
        uint64_t v17 = *(WTF::StringImpl **)a2;
        unint64_t v16 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
      }
    }
    goto LABEL_17;
  }
  uint64_t v9 = (unsigned __int8 *)v7 + v8;
  *((void *)a2 + 2) = v9 + 1;
  if (!v7)
  {
    unint64_t v16 = v6;
    uint64_t v17 = 0;
LABEL_17:
    unint64_t v6 = 0;
    unsigned int v7 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v19 = *((void *)a2 + 3);
    if (v19)
    {
      if (v16)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v19 + 16))(v19, v17, v16);
        unsigned int v7 = *(WTF::StringImpl **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        unsigned int v7 = 0;
      }
    }
    goto LABEL_18;
  }
  unsigned int v10 = *v9;
  if (v10 < 2)
  {
    if (!*v9)
    {
      __int16 v13 = 0;
      goto LABEL_15;
    }
    if (v6 <= v9 + 1 - (unsigned __int8 *)v7)
    {
      unint64_t v11 = 0;
      uint64_t v12 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v20 = *((void *)a2 + 3);
      if (v20)
      {
        (*(void (**)(uint64_t))(*(void *)v20 + 16))(v20);
        unint64_t v11 = 0;
        unsigned int v7 = *(WTF::StringImpl **)a2;
        uint64_t v32 = *((void *)a2 + 1);
        uint64_t v33 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v12 = 0;
        if (v33)
        {
          if (v32)
          {
            (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v33 + 16))(v33, v7);
            uint64_t v12 = *(WTF::StringImpl **)a2;
            unint64_t v11 = *((void *)a2 + 1);
          }
        }
      }
    }
    else
    {
      *((void *)a2 + 2) = v9 + 2;
      unsigned int v10 = v9[1];
      unint64_t v11 = v6;
      uint64_t v12 = v7;
      if (v10 <= 4)
      {
        __int16 v13 = 256;
LABEL_15:
        LODWORD(v11) = 0x10000;
        goto LABEL_24;
      }
    }
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unsigned int v5 = (WTF::StringImpl *)*((void *)a2 + 3);
    if (v5)
    {
      if (!v11) {
        goto LABEL_23;
      }
      unsigned int v5 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *, unint64_t))(*(void *)v5 + 16))(v5, v12, v11);
    }
    LODWORD(v11) = 0;
LABEL_23:
    LOWORD(v10) = 0;
    __int16 v13 = 256;
    goto LABEL_24;
  }
LABEL_18:
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unsigned int v5 = (WTF::StringImpl *)*((void *)a2 + 3);
  if (v5 && v6) {
    unsigned int v5 = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)v5 + 16))(v5, v7);
  }
  LODWORD(v11) = 0;
  LOWORD(v10) = 0;
  __int16 v13 = 0;
LABEL_24:
  if (!WORD1(v11))
  {
    unsigned int v7 = *(WTF::StringImpl **)a2;
    uint64_t v27 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v28 = *((void *)a2 + 3);
    if (v28 && v27) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v28 + 16))(v28, v7);
    }
    if (!LOBYTE(v38[1])) {
      goto LABEL_48;
    }
    unsigned int v5 = v38[0];
    v38[0] = 0;
    if (!v5) {
      goto LABEL_48;
    }
    if (*(_DWORD *)v5 != 2)
    {
      *(_DWORD *)v5 -= 2;
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  if (!LOBYTE(v38[1]))
  {
    __break(1u);
LABEL_47:
    WTF::StringImpl::destroy(v5, v7);
    goto LABEL_48;
  }
  __int16 v21 = v10 | v11 | v13;
  uint64_t v34 = v38[0];
  __int16 v35 = v21;
  char v36 = 1;
  if (*(void *)v2 && (uint64_t v22 = *(void *)(*(void *)v2 + 8)) != 0)
  {
    long long v23 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)uint64_t v38 = *(_OWORD *)(a1 + 32);
    long long v39 = v23;
    uint64_t result = (WTF::StringImpl *)WebKit::WebMDNSRegister::finishedRegisteringMDNSName(v22, (uint64_t *)v38, (WTF::StringImpl **)(a1 + 64), &v34, v21 & 0x1FF, (uint64_t *)(a1 + 24));
    if (!v36) {
      return result;
    }
  }
  else
  {
    char v37 = 0;
    uint64_t v25 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(void *)v25 + 16))(v25, &v37, 259);
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    unsigned int v26 = v37;
    char v37 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
  }
  uint64_t result = v34;
  uint64_t v34 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::NetworkMDNSRegister::RegisterMDNSName,WebKit::WebMDNSRegister::registerMDNSName(WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(WTF::String const&,std::optional<WebCore::MDNSRegisterError>)> &&)::$_1>(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = 0;
  if (*(void *)a1 && (uint64_t v1 = *(void *)(*(void *)a1 + 8)) != 0)
  {
    long long v2 = *(_OWORD *)(a1 + 32);
    v8[0] = *(_OWORD *)(a1 + 16);
    v8[1] = v2;
    WebKit::WebMDNSRegister::finishedRegisteringMDNSName(v1, (uint64_t *)v8, (WTF::StringImpl **)(a1 + 48), &v6, 0, (uint64_t *)(a1 + 8));
    uint64_t result = v6;
    unint64_t v6 = 0;
    if (!result) {
      return result;
    }
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **, uint64_t))(*(void *)v5 + 16))(v5, &v7, 259);
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t result = v7;
    unsigned int v7 = 0;
    if (!result) {
      return result;
    }
  }
  if (*(_DWORD *)result == 2) {
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
  }
  *(_DWORD *)result -= 2;
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::setResolvedAddress(WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F2CF0;
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::setResolvedAddress(WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F2CF0;
  WTF::Vector<rtc::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);

  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::setResolvedAddress(WTF::Vector<WebKit::RTC::Network::IPAddress,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_1,void>::call(uint64_t a1)
{
  uint64_t result = WebKit::LibWebRTCSocketFactory::resolver((unsigned int *)&v14, *(void *)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 16));
  uint64_t v4 = (unsigned int *)v14;
  if (v14)
  {
    uint64_t v5 = *((void *)v14 + 1);
    if (v5)
    {
      uint64_t v6 = *(unsigned int *)(v5 + 44);
      if (v6)
      {
        unsigned int v7 = *(void (****)(void))(v5 + 32);
        uint64_t v8 = 32 * v6;
        uint64_t v9 = v7;
        unsigned int v10 = v7;
        do
        {
          unint64_t v11 = *v10;
          v10 += 4;
          (*v11)(v9);
          v7 += 4;
          uint64_t v9 = v10;
          v8 -= 32;
        }
        while (v8);
      }
      uint64_t v12 = *(WTF **)(v5 + 32);
      if (v12)
      {
        *(void *)(v5 + ++*(_DWORD *)(this + 32) = 0;
        *(_DWORD *)(v5 + 40) = 0;
        WTF::fastFree(v12, v3);
      }
      uint64_t v13 = *(void *)(a1 + 24);
      *(void *)(a1 + 24) = 0;
      *(void *)(v5 + ++*(_DWORD *)(this + 32) = v13;
      LODWORD(v13) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + ++*(_DWORD *)(this + 32) = 0;
      *(_DWORD *)(v5 + 40) = v13;
      LODWORD(v13) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = 0;
      *(_DWORD *)(v5 + 44) = v13;
      uint64_t result = (unsigned int *)(*(uint64_t (**)(void))(**(void **)(v5 + 120) + 16))(*(void *)(v5 + 120));
    }
    uint64_t v14 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      return (unsigned int *)WTF::fastFree((WTF *)v4, v3);
    }
  }
  return result;
}

unsigned int *WebKit::LibWebRTCSocketFactory::resolver(unsigned int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (!a2) {
    goto LABEL_10;
  }
  unsigned int v4 = *(_DWORD *)(a2 - 8);
  unint64_t v5 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
  unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
  unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
  uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
  uint64_t v9 = *(void *)(a2 + 16 * v8);
  if (v9 != a3)
  {
    int v10 = 1;
    while (v9)
    {
      uint64_t v8 = (v8 + v10) & v4;
      uint64_t v9 = *(void *)(a2 + 16 * v8);
      ++v10;
      if (v9 == a3) {
        goto LABEL_6;
      }
    }
    goto LABEL_10;
  }
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 16 * v8 + 8);
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12)
    {
      uint64_t result = WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v12 + 16), *(void *)(v11 + 8));
      uint64_t v11 = *(void *)(v12 + 16);
      if (v11) {
        atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      }
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v11 = 0;
  }
LABEL_11:
  *(void *)uint64_t v3 = v11;
  return result;
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebRTCResolver::resolvedAddressError(int)::$_0,void>::call(uint64_t a1)
{
  uint64_t result = WebKit::LibWebRTCSocketFactory::resolver((unsigned int *)&v6, *(void *)(*(void *)(a1 + 8) + 8), *(void *)(a1 + 16));
  unsigned int v4 = (unsigned int *)v6;
  if (v6)
  {
    uint64_t v5 = *((void *)v6 + 1);
    if (v5)
    {
      *(_DWORD *)(v5 + 128) = *(_DWORD *)(a1 + 24);
      uint64_t result = (unsigned int *)(*(uint64_t (**)(void))(**(void **)(v5 + 120) + 16))(*(void *)(v5 + 120));
    }
    unint64_t v6 = 0;
    if (atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4);
      return (unsigned int *)WTF::fastFree((WTF *)v4, v3);
    }
  }
  return result;
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::begin(uint64_t *a1)
{
  uint64_t v1 = (WebCore::SecurityOriginData *)*a1;
  if (!*a1) {
    return 0;
  }
  if (*((_DWORD *)v1 - 3)) {
    return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::makeIterator(a1, v1);
  }
  return (WebCore::SecurityOriginData *)((char *)v1 + 48 * *((unsigned int *)v1 - 1));
}

WebCore::SecurityOriginData *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::makeIterator(uint64_t *a1, WebCore::SecurityOriginData *a2)
{
  long long v2 = a2;
  uint64_t v3 = *a1;
  if (*a1) {
    unsigned int v4 = *(_DWORD *)(v3 - 4);
  }
  else {
    unsigned int v4 = 0;
  }
  uint64_t v5 = (WebCore::SecurityOriginData *)(v3 + 48 * v4);
  if (v5 != a2)
  {
    while (WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,unsigned long long>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,unsigned long long,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<unsigned long long>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::isEmptyOrDeletedBucket(v2))
    {
      long long v2 = (WebCore::SecurityOriginData *)((char *)v2 + 48);
      if (v2 == v5) {
        return v5;
      }
    }
  }
  return v2;
}

uint64_t WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3)
  {
    unsigned int v4 = *(WTF **)a1;
    uint64_t v5 = 8 * v3;
    do
    {
      uint64_t v6 = *(void *)v4;
      *(void *)unsigned int v4 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      unsigned int v4 = (WTF *)((char *)v4 + 8);
      v5 -= 8;
    }
    while (v5);
  }
  unint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(a1, v5, a2);
}

unsigned int *WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 48 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = v5;
    while (1)
    {
      uint64_t v14 = v4 + 48 * v11;
      int v15 = *(_DWORD *)(v14 + 24);
      if (v15) {
        break;
      }
      if (*(void *)v14 != -1) {
        goto LABEL_10;
      }
LABEL_25:
      if (++v11 == v13) {
        goto LABEL_30;
      }
    }
    if (v15 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_29;
    }
LABEL_10:
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)(v4 + 48 * v11));
    if (v17)
    {
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 48 * v11 + 32, v16);
      uint64_t v18 = *(unsigned int *)(v14 + 24);
      if (v18 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v18])(&v41, v4 + 48 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
    }
    else
    {
      uint64_t v19 = *a1;
      uint64_t v40 = v12;
      if (*a1) {
        int v20 = *(_DWORD *)(v19 - 8);
      }
      else {
        int v20 = 0;
      }
      int v44 = -1640531527;
      __int16 v45 = 0;
      char v46 = 0;
      WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v44, v4 + 48 * v11);
      unsigned int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v44);
      int v22 = 0;
      do
      {
        unsigned int v23 = v21 & v20;
        unsigned int v24 = (unsigned int *)(v19 + 48 * (v21 & v20));
        WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v24);
        int v27 = v26;
        unsigned int v21 = ++v22 + v23;
      }
      while (!v27);
      uint64_t v28 = (void *)(v19 + 48 * v23 + 32);
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v28, v25);
      uint64_t v29 = v24[6];
      if (v29 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v29])(&v42, v19 + 48 * v23);
      }
      *(unsigned char *)unsigned int v24 = 0;
      v24[6] = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v19 + 48 * v23, v4 + 48 * v11);
      uint64_t v30 = v4 + 48 * v11;
      void *v28 = 0;
      *(void *)(v19 + 48 * v23 + 40) = 0;
      uint64_t v31 = *(void *)(v30 + 32);
      v30 += 32;
      *(void *)uint64_t v30 = 0;
      void *v28 = v31;
      int v32 = *(_DWORD *)(v30 + 8);
      *(_DWORD *)(v30 + 8) = 0;
      uint64_t v33 = v19 + 48 * v23;
      *(_DWORD *)(v33 + 40) = v32;
      int v34 = *(_DWORD *)(v30 + 12);
      *(_DWORD *)(v30 + 12) = 0;
      *(_DWORD *)(v33 + 44) = v34;
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v30, v35);
      uint64_t v36 = *(unsigned int *)(v14 + 24);
      if (v36 != -1) {
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v36])(&v43, v4 + 48 * v11);
      }
      *(_DWORD *)(v14 + 24) = -1;
      uint64_t v12 = v40;
      if (v14 == a3) {
        uint64_t v12 = v24;
      }
    }
    goto LABEL_25;
  }
LABEL_29:
  uint64_t v12 = 0;
  uint64_t result = 0;
  if (v4)
  {
LABEL_30:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v12;
  }
  return result;
}

unint64_t WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 8 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  if (result[2] < a2)
  {
    unsigned int v2 = a2;
    if (a2 >> 29)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = result;
      uint64_t v4 = *(WTF **)result;
      uint64_t v5 = result[3];
      uint64_t result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * a2));
      v3[2] = v2;
      *(void *)unint64_t v3 = result;
      if (v5)
      {
        unint64_t v7 = result;
        uint64_t v8 = 8 * v5;
        unint64_t v9 = (unsigned int **)v4;
        do
        {
          unint64_t v10 = *v9;
          unsigned __int8 *v9 = 0;
          *(void *)unint64_t v7 = v10;
          uint64_t result = *v9;
          unsigned __int8 *v9 = 0;
          if (result) {
            uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
          }
          v7 += 2;
          ++v9;
          v8 -= 8;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(void *)unint64_t v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestNotificationPermission,WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0>(WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F2D40;
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  if (v3 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v3])(&v6, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  uint64_t v4 = *(WebKit::NotificationPermissionRequestManager **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v4);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestNotificationPermission,WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0>(WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F2D40;
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v4])(&v7, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v5 = (WebKit::NotificationPermissionRequestManager *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(v5);
  }
  return WTF::fastFree(this, a2);
}

WebKit::NotificationPermissionRequestManager *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestNotificationPermission,WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0>(WebKit::NotificationPermissionRequestManager::startRequest(WebCore::SecurityOriginData const&,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  if (!a2 || !*a2)
  {
LABEL_6:
    BOOL v5 = 0;
    goto LABEL_7;
  }
  unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
  if (v4 <= 0xFFu)
  {
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
    goto LABEL_6;
  }
  BOOL v5 = v4 != 0;
LABEL_7:
  unint64_t v9 = *(_DWORD **)(a1 + 8);
  char v43 = v9;
  ++*v9;
  int v44 = (WebKit::NotificationPermissionRequestManager *)v9;
  v45[0] = 0;
  int v46 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v45, a1 + 24);
  uint64_t v10 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  uint64_t v47 = v10;
  uint64_t v11 = v43;
  {
    uint64_t v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v38);
  }
  char v41 = (WTF::StringImpl *)"WebNotificationManager";
  uint64_t v42 = 23;
  uint64_t v12 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)&v41);
  WebCore::SecurityOriginData::toString((uint64_t *)&v41, (WebCore::SecurityOriginData *)v45);
  WebKit::WebNotificationManager::didUpdateNotificationDecision((uint64_t)v12, &v41, v5);
  uint64_t v14 = v41;
  char v41 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v13);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t v17 = *((void *)v11 + 1);
  int v15 = (uint64_t *)(v11 + 2);
  uint64_t v16 = v17;
  if (!v17) {
    goto LABEL_25;
  }
  int v18 = *(_DWORD *)(v16 - 8);
  LODWORD(v41) = -1640531527;
  WORD2(v41) = 0;
  BYTE6(v41) = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v41, (uint64_t)v45);
  unsigned int v19 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v41) & v18;
  uint64_t v20 = v16 + 48 * v19;
  WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v20);
  if (v21)
  {
LABEL_14:
    uint64_t v22 = *v15;
    if (*v15)
    {
      uint64_t v20 = v22 + 48 * *(unsigned int *)(v22 - 4);
LABEL_16:
      v22 += 48 * *(unsigned int *)(v22 - 4);
      goto LABEL_17;
    }
    goto LABEL_25;
  }
  int v32 = 1;
  while (1)
  {
    int v33 = *(_DWORD *)(v20 + 24);
    if (!v33)
    {
      if (*(void *)v20 == -1) {
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    if (v33 != 1) {
      break;
    }
LABEL_39:
    if (WebCore::operator==()) {
      goto LABEL_44;
    }
LABEL_40:
    unsigned int v19 = (v19 + v32) & v18;
    uint64_t v20 = v16 + 48 * v19;
    WebCore::SecurityOriginData::isNull((WebCore::SecurityOriginData *)v20);
    ++v32;
    if (v34) {
      goto LABEL_14;
    }
  }
  std::__throw_bad_variant_access[abi:sn180100]();
LABEL_44:
  uint64_t v22 = *v15;
  if (*v15) {
    goto LABEL_16;
  }
LABEL_17:
  if (v22 == v20)
  {
LABEL_25:
    char v41 = 0;
    uint64_t v39 = 0;
    uint64_t v42 = 0;
    uint64_t v40 = 0;
    WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v13);
    goto LABEL_26;
  }
  uint64_t v39 = *(void *)(v20 + 32);
  uint64_t v23 = *(void *)(v20 + 40);
  *(void *)(v20 + ++*(_DWORD *)(this + 32) = 0;
  *(void *)(v20 + 40) = 0;
  uint64_t v40 = v23;
  uint64_t v24 = *v15;
  if (!*v15 || (v24 += 48 * *(unsigned int *)(v24 - 4), v24 != v20))
  {
    if (v24 != v20)
    {
      uint64_t v25 = *(unsigned int *)(v20 + 24);
      if (v25 != -1) {
        ((void (*)(WTF::StringImpl **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v25])(&v41, v20);
      }
      *(void *)uint64_t v20 = -1;
      *(void *)(v20 + 8) = 0;
      *(_DWORD *)(v20 + 16) = 0;
      *(_DWORD *)(v20 + 24) = 0;
      WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v20 + 32, v13);
      ++*(_DWORD *)(*v15 - 16);
      uint64_t v26 = *v15;
      if (*v15) {
        int v27 = *(_DWORD *)(v26 - 12) - 1;
      }
      else {
        int v27 = -1;
      }
      *(_DWORD *)(v26 - 12) = v27;
      uint64_t v35 = *v15;
      if (*v15)
      {
        unsigned int v36 = 6 * *(_DWORD *)(v35 - 12);
        unsigned int v37 = *(_DWORD *)(v35 - 4);
        if (v36 < v37 && v37 >= 9) {
          WTF::HashTable<WebCore::SecurityOriginData,WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashMap<WebCore::SecurityOriginData,WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::SecurityOriginData>>::rehash(v15, v37 >> 1, 0);
        }
      }
    }
  }
LABEL_26:
  if (v5) {
    uint64_t v28 = 2;
  }
  else {
    uint64_t v28 = 1;
  }
  WebKit::NotificationPermissionRequestManager::callPermissionHandlersWith((uint64_t)&v39, v28);
  WTF::Vector<WTF::CompletionHandler<void ()(WebCore::NotificationPermission)>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v29);
  uint64_t v30 = v47;
  uint64_t v47 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  if (v46 != -1) {
    ((void (*)(WTF::StringImpl **, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_10[v46])(&v41, v45);
  }
  int v46 = -1;
  uint64_t result = v44;
  int v44 = 0;
  if (result) {
    return WTF::RefCounted<WebKit::NotificationPermissionRequestManager>::deref(result);
  }
  return result;
}

void WebKit::WebNotificationManager::~WebNotificationManager(WebKit::WebNotificationManager *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F2D68;
  *((void *)this + 1) = &unk_1EE9F2DA8;
  uint64_t v3 = (WTF::StringImpl **)*((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v3, a2);
  }
  uint64_t v4 = *((void *)this + 3);
  if (v4) {
    WTF::fastFree((WTF *)(v4 - 16), a2);
  }
  *((void *)this + 1) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 2, a2);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebNotificationManager::~WebNotificationManager(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebNotificationManager::~WebNotificationManager(WebKit::WebNotificationManager *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebNotificationManager::~WebNotificationManager((WebKit::WebNotificationManager *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebNotificationManager::didUpdateNotificationDecision(uint64_t this, WTF::StringImpl **a2, char a3)
{
  char v4 = a3;
  if (*a2)
  {
    if (*((_DWORD *)*a2 + 1)) {
      return WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::inlineSet<WTF::String const&,BOOL &>((uint64_t *)(this + 32), a2, (const WTF::StringImpl *)&v4, (uint64_t)&v3);
    }
  }
  return this;
}

WTF::StringImpl **WebKit::WebNotificationManager::didRemoveNotificationDecisions(WTF::StringImpl **result, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  if (v3)
  {
    char v4 = *(WTF::StringImpl ***)a2;
    BOOL v5 = (uint64_t *)(result + 4);
    for (uint64_t i = 8 * v3; i; i -= 8)
    {
      if (*v4 && *((_DWORD *)*v4 + 1))
      {
        uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::RegistrableDomain>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebCore::RegistrableDomain,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(v5, v4, a3);
        if (*v5)
        {
          uint64_t v8 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
          if ((WTF::StringImpl **)v8 != result) {
            goto LABEL_8;
          }
        }
        else if (result)
        {
          uint64_t v8 = 0;
LABEL_8:
          if ((WTF::StringImpl **)v8 != result)
          {
            uint64_t result = (WTF::StringImpl **)WTF::HashTraits<WTF::String>::customDeleteBucket(result, v7);
            ++*(_DWORD *)(*v5 - 16);
            uint64_t v9 = *v5;
            int v10 = *v5 ? *(_DWORD *)(v9 - 12) - 1 : -1;
            *(_DWORD *)(v9 - 12) = v10;
            uint64_t v11 = *v5;
            if (*v5)
            {
              unsigned int v12 = 6 * *(_DWORD *)(v11 - 12);
              unsigned int v13 = *(_DWORD *)(v11 - 4);
              if (v12 < v13 && v13 >= 9) {
                uint64_t result = (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v5, v13 >> 1, 0);
              }
            }
          }
        }
      }
      ++v4;
    }
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::policyForOrigin(WebKit::WebNotificationManager *this, const WTF::StringImpl **a2, WebKit::WebPage *a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(this))
  {
    uint64_t v11 = *a2;
    if (!*a2) {
      return 0;
    }
    if (!*((_DWORD *)v11 + 1)) {
      return 0;
    }
    uint64_t v12 = *((void *)this + 4);
    if (!v12) {
      return 0;
    }
    unsigned int v13 = *(_DWORD *)(v12 - 8);
    unsigned int v14 = *((_DWORD *)v11 + 4);
    int v15 = v14 >= 0x100 ? v14 >> 8 : WTF::StringImpl::hashSlowCase(v11);
    for (i = 0; ; int v15 = ++i + v28)
    {
      uint64_t v28 = v15 & v13;
      uint64_t v29 = *(WTF **)(v12 + 16 * v28);
      if (v29 != (WTF *)-1)
      {
        if (!v29)
        {
          uint64_t v30 = *((void *)this + 4);
          if (!v30) {
            return 0;
          }
          uint64_t v31 = v30 + 16 * *(unsigned int *)(v30 - 4);
          goto LABEL_60;
        }
        if (WTF::equal(v29, *a2, v6)) {
          break;
        }
      }
    }
    uint64_t v31 = v12 + 16 * v28;
    uint64_t v30 = *((void *)this + 4);
    if (!v30) {
      goto LABEL_37;
    }
LABEL_60:
    v30 += 16 * *(unsigned int *)(v30 - 4);
LABEL_37:
    if (v30 == v31) {
      return 0;
    }
    int v32 = *(unsigned __int8 *)(v31 + 8);
    if (a3 && *(unsigned char *)(v31 + 8))
    {
      LOBYTE(v52[0]) = 0;
      int v33 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(void *)int v33 = &unk_1EE9F3AF0;
      *((void *)v33 + 1) = v52;
      uint64_t v42 = v33;
      WebKit::sendMessage(a3, (uint64_t)&v42);
      (*(void (**)(WTF::StringImpl *))(*(void *)v33 + 8))(v33);
      int v32 = *(unsigned __int8 *)(v31 + 8);
    }
    if (v32) {
      return 2;
    }
    else {
      return 1;
    }
  }
  {
    uint64_t v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v40);
  }
  uint64_t v7 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v45, *(atomic_uchar *volatile **)(v7 + 24));
  WTF::URL::URL((uint64_t)&v42, a2);
  WebCore::SecurityOriginData::fromURL(v52, (WebCore::SecurityOriginData *)&v42, v8);
  int v10 = v42;
  uint64_t v42 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2) {
      WTF::StringImpl::destroy(v10, v9);
    }
    else {
      *(_DWORD *)v10 -= 2;
    }
  }
  uint64_t v16 = v45;
  {
    char v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v41);
  }
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
  {
    __break(1u);
    goto LABEL_62;
  }
  uint64_t v17 = *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
  uint64_t v47 = 0;
  IPC::Connection::createSyncMessageEncoder(3624, v17, (uint64_t *)&v47, &v46);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v46, (uint64_t)v52);
  IPC::Connection::sendSyncMessage((uint64_t)v16, (uint64_t)v47, (uint64_t *)&v46, 0, (uint64_t)buf, INFINITY);
  int v18 = *(_DWORD *)&buf[8];
  if (*(_DWORD *)&buf[8])
  {
    if (*(_DWORD *)&buf[8] == 1)
    {
      LOBYTE(v19) = buf[0];
      LOBYTE(v42) = buf[0];
LABEL_22:
      int v44 = v18;
      int v22 = v18;
      goto LABEL_23;
    }
    goto LABEL_62;
  }
  unsigned __int16 v20 = IPC::Decoder::decode<std::tuple<WebCore::InspectorFrontendClientAppearance>>(*(uint64_t **)buf);
  if (v20 >= 0x100u)
  {
    if (!*(_DWORD *)&buf[8])
    {
      LOBYTE(v16) = v20;
      unsigned int v19 = *(WTF::StringImpl **)buf;
      *(void *)buf = 0;
      uint64_t v42 = v19;
      char v43 = v20;
      goto LABEL_22;
    }
LABEL_62:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v19) = 13;
  LOBYTE(v42) = 13;
  int v18 = 1;
  int v44 = 1;
  int v22 = *(_DWORD *)&buf[8];
  if (*(_DWORD *)&buf[8] != -1) {
LABEL_23:
  }
    ((void (*)(char *, unsigned char *))off_1EE9F3AD0[v22])(&v48, buf);
  uint64_t v23 = v46;
  int v46 = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v21);
    WTF::fastFree(v34, v35);
    if (v18)
    {
LABEL_26:
      uint64_t v24 = qword_1EB3581E0;
      if (os_log_type_enabled((os_log_t)qword_1EB3581E0, OS_LOG_TYPE_ERROR))
      {
        WTF::String::utf8();
        if (v47) {
          unsigned int v37 = (char *)v47 + 16;
        }
        else {
          unsigned int v37 = 0;
        }
        *(_DWORD *)buf = 136643075;
        *(void *)&uint8_t buf[4] = v37;
        __int16 v50 = 1024;
        int v51 = v19;
        _os_log_error_impl(&dword_1985F2000, v24, OS_LOG_TYPE_ERROR, "Could not look up notification permission for origin %{sensitive}s: %u", buf, 0x12u);
        uint64_t v39 = v47;
        uint64_t v47 = 0;
        if (v39)
        {
          if (*(_DWORD *)v39 == 1) {
            WTF::fastFree(v39, v38);
          }
          else {
            --*(_DWORD *)v39;
          }
        }
        uint64_t v26 = 1;
        uint64_t v25 = 1;
      }
      else
      {
        uint64_t v25 = 1;
        uint64_t v26 = 1;
      }
      goto LABEL_48;
    }
  }
  else if (v18)
  {
    goto LABEL_26;
  }
  if (v16 < 3u)
  {
    uint64_t v25 = 0;
    uint64_t v26 = dword_1994F7880[(char)v16];
LABEL_48:
    ((void (*)(unsigned char *, WTF::StringImpl **))off_1EE9F38A8[v25])(buf, &v42);
    if (v53 != -1) {
      ((void (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v53])(&v42, v52);
    }
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v45);
    return v26;
  }
  uint64_t result = 168;
  __break(0xC471u);
  return result;
}

uint64_t WebKit::WebNotificationManager::show(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::DeprecatedGlobalSettings *a4, uint64_t *a5)
{
  long long v14 = *(_OWORD *)(a2 + 144);
  if (!a4 || (*(unsigned char *)(*(void *)(*((void *)a4 + 6) + 112) + 719) & 2) != 0)
  {
    v13[0] = a2;
    v13[1] = a3;
    int v10 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v10 = &unk_1EE9F3B18;
    v10[1] = v13;
    void v10[2] = a5;
    int v15 = v10;
    int v11 = WebKit::sendMessage(a4, (uint64_t)&v15);
    (*(void (**)(void *))(*v10 + 8))(v10);
    if (v11)
    {
      if (!*(void *)(a2 + 96))
      {
        if (!*(unsigned char *)(a2 + 192))
        {
          uint64_t result = 214;
          __break(0xC471u);
          return result;
        }
        WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::add<WebCore::ProcessQualified<WTF::UUID>&>((uint64_t *)(a1 + 24), &v14, (long long *)(a2 + 160), (uint64_t)v13);
      }
      return 1;
    }
  }
  else
  {
    uint64_t v9 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return 0;
}

uint64_t WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::add<WebCore::ProcessQualified<WTF::UUID>&>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  int v29 = -1640531527;
  __int16 v30 = 0;
  char v31 = 0;
  WTF::addArgs<WTF::UUID>(&v29, a2);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
  unsigned int v11 = result & v9;
  uint64_t v12 = v8 + 48 * (result & v9);
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *(void *)(v12 + 8);
  if (*(_OWORD *)v12 != 0)
  {
    uint64_t v15 = 0;
    int v16 = 1;
    do
    {
      if (v13 == a2[1] && v14 == *a2)
      {
        uint64_t v21 = *a1;
        if (*a1) {
          unsigned int v22 = *(_DWORD *)(v21 - 4);
        }
        else {
          unsigned int v22 = 0;
        }
        char v28 = 0;
        uint64_t v27 = v21 + 48 * v22;
        goto LABEL_32;
      }
      if (!(v14 ^ 1 | v13)) {
        uint64_t v15 = v12;
      }
      unsigned int v11 = (v11 + v16) & v9;
      uint64_t v12 = v8 + 48 * v11;
      uint64_t v14 = *(void *)v12;
      uint64_t v13 = *(void *)(v12 + 8);
      ++v16;
    }
    while (*(_OWORD *)v12 != 0);
    if (v15)
    {
      *(void *)(v15 + ++*(_DWORD *)(this + 32) = 0;
      *(_OWORD *)uint64_t v15 = 0u;
      *(_OWORD *)(v15 + 16) = 0u;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v12 = v15;
    }
  }
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a2;
  long long v18 = *a3;
  *(void *)(v12 + ++*(_DWORD *)(this + 32) = *((void *)a3 + 2);
  *(_OWORD *)(v12 + 16) = v18;
  uint64_t v19 = *a1;
  if (*a1) {
    int v20 = *(_DWORD *)(v19 - 12) + 1;
  }
  else {
    int v20 = 1;
  }
  *(_DWORD *)(v19 - 12) = v20;
  uint64_t v23 = *a1;
  if (*a1) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
    {
LABEL_25:
      uint64_t result = (uint64_t)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(a1, (long long *)v12);
      uint64_t v12 = result;
      uint64_t v23 = *a1;
      if (*a1) {
        LODWORD(v26) = *(_DWORD *)(v23 - 4);
      }
      else {
        LODWORD(v26) = 0;
      }
    }
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_25;
  }
  uint64_t v27 = v23 + 48 * v26;
  char v28 = 1;
LABEL_32:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v27;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

uint64_t WebKit::WebNotificationManager::cancel(uint64_t a1, uint64_t a2, WebCore::DeprecatedGlobalSettings *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v10 = *(_OWORD *)(a2 + 144);
  WTF::URL::URL((uint64_t)v9, (WTF::StringImpl **)(a2 + 88));
  WebCore::SecurityOriginData::fromURL(v12, (WebCore::SecurityOriginData *)v9, v4);
  uint64_t v6 = v9[0];
  v9[0] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, v5);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  v9[0] = (WTF::StringImpl *)v12;
  v9[1] = (WTF::StringImpl *)&v10;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F3B68;
  v7[1] = v9;
  unsigned int v11 = v7;
  WebKit::sendMessage(a3, (uint64_t)&v11);
  uint64_t result = (*(uint64_t (**)(void *))(*v7 + 8))(v7);
  if (v13 != -1) {
    return ((uint64_t (*)(WTF::StringImpl **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v13])(v9, v12);
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::requestPermission(uint64_t a1, uint64_t a2, WebCore::DeprecatedGlobalSettings **a3, uint64_t a4)
{
  uint64_t v8 = a2;
  BOOL v5 = *a3;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x18);
  void *v6 = &unk_1EE9F3B90;
  v6[1] = &v8;
  v6[2] = a4;
  int v9 = v6;
  WebKit::sendMessage(v5, (uint64_t)&v9);
  return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
}

uint64_t WebKit::WebNotificationManager::didDestroyNotification(uint64_t a1, uint64_t a2, WebCore::DeprecatedGlobalSettings *a3)
{
  *(_OWORD *)uint64_t v12 = *(_OWORD *)(a2 + 144);
  if (!*(void *)(a2 + 96))
  {
    uint64_t v7 = (uint64_t *)(a1 + 24);
    uint64_t v8 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t *)(a1 + 24), v12);
    uint64_t v9 = *(void *)(a1 + 24);
    if (v9)
    {
      long long v10 = (uint64_t *)(v9 + 48 * *(unsigned int *)(v9 - 4));
      if (v10 == v8) {
        goto LABEL_2;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_2;
      }
      long long v10 = 0;
    }
    if (v10 != v8) {
      WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(v7, v8);
    }
  }
LABEL_2:
  unsigned int v11 = v12;
  char v4 = (void *)WTF::fastMalloc((WTF *)0x10);
  *char v4 = &unk_1EE9F3BE0;
  v4[1] = &v11;
  int v13 = v4;
  WebKit::sendMessage(a3, (uint64_t)&v13);
  return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
}

uint64_t WebKit::WebNotificationManager::didShowNotification(WebKit::WebNotificationManager *this, const WTF::UUID *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t result = WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t)this + 24, (uint64_t *)a2, (uint64_t)&v5);
  if (v5 != 0)
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v3 = &unk_1EE9F3C08;
    uint64_t v4 = (uint64_t)v3;
    WebCore::Notification::ensureOnNotificationThread();
    uint64_t result = v4;
    if (v4) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::didClickNotification(WebKit::WebNotificationManager *this, const WTF::UUID *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t result = WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>((uint64_t)this + 24, (uint64_t *)a2, (uint64_t)&v5);
  if (v5 != 0)
  {
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v3 = &unk_1EE9F3C30;
    uint64_t v4 = (uint64_t)v3;
    WebCore::Notification::ensureOnNotificationThread();
    uint64_t result = v4;
    if (v4) {
      return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  return result;
}

uint64_t WebKit::WebNotificationManager::didCloseNotifications(uint64_t result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = *(uint64_t **)a2;
    uint64_t v4 = result + 24;
    uint64_t v5 = 16 * v2;
    do
    {
      uint64_t result = WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(v4, v3, (uint64_t)&v8);
      if (v8 != 0)
      {
        uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
        void *v6 = &unk_1EE9F3C58;
        uint64_t v7 = v6;
        WebCore::Notification::ensureOnNotificationThread();
        uint64_t result = (uint64_t)v7;
        if (v7) {
          uint64_t result = (*(uint64_t (**)(void *))(*v7 + 8))(v7);
        }
      }
      v3 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return result;
}

void WebKit::PluginView::Stream::~Stream(WebKit::PluginView::Stream *this)
{
  *(void *)this = &unk_1EE9F2DE0;
  if (*((void *)this + 29))
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v11);
    uint64_t v2 = *((void *)this + 29);
    *((void *)this + 29) = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 16))(v2, v11);
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    CFTypeRef v3 = cf;
    CFTypeRef cf = 0;
    if (v3) {
      CFRelease(v3);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v11);
  }
  uint64_t v4 = (_DWORD *)*((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v4)
  {
    if (v4[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[4];
    }
  }
  uint64_t v5 = *((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = (const void *)*((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v6) {
    CFRelease(v6);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebKit::PluginView::Stream *)((char *)this + 32));
  long long v8 = (WTF *)*((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1) {
      WTF::fastFree(v8, v7);
    }
    else {
      --*(_DWORD *)v8;
    }
  }
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    *(void *)(v9 + 8) = 0;
    long long v10 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v10)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v7);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PluginView::Stream::~Stream(this);

  WTF::fastFree(v1, v2);
}

void WebKit::PluginView::Stream::willSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *a5;
  *a5 = 0;
  uint64_t v8 = *(void *)(a1 + 232);
  *(void *)(a1 + 2++*(_DWORD *)(this + 32) = v7;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  WebCore::ResourceRequestBase::RequestData::operator=(a1 + 32, a3);
  WTF::String::operator=((uint64_t *)(a1 + 184), (uint64_t *)(a3 + 152));
  WTF::String::operator=((uint64_t *)(a1 + 192), (uint64_t *)(a3 + 160));
  uint64_t v9 = *(void *)(a3 + 168);
  *(void *)(a3 + 168) = 0;
  long long v10 = *(WTF::RefCountedBase **)(a1 + 200);
  *(void *)(a1 + 200) = v9;
  if (v10) {
    WTF::RefCounted<WebCore::FormData>::deref(v10);
  }
  uint64_t v11 = *(void *)(a3 + 176);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a3 + 184);
  *(void *)(a1 + 208) = v11;
  uint64_t v12 = *(void *)(a3 + 192);
  *(void *)(a3 + 192) = 0;
  int v13 = *(const void **)(a1 + 224);
  *(void *)(a1 + 224) = v12;
  if (v13)
  {
    CFRelease(v13);
  }
}

atomic_uchar *WebKit::PluginView::Stream::didReceiveResponse(uint64_t a1, uint64_t a2, const WebCore::ResourceResponse *a3)
{
  uint64_t v4 = *(atomic_uchar *volatile **)(*(void *)(*(void *)(a1 + 24) + 8) + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 9);
  uint64_t result = (atomic_uchar *)WebKit::PDFPluginBase::streamDidReceiveResponse((WebKit::PDFPluginBase *)v4, a3);
  if (v4)
  {
    uint64_t v7 = (atomic_uchar *)*((void *)v4 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v7, v6);
  }
  return result;
}

atomic_uchar *WebKit::PluginView::Stream::didReceiveData(uint64_t a1, uint64_t a2, const WebCore::SharedBuffer *a3)
{
  uint64_t v4 = *(atomic_uchar *volatile **)(*(void *)(*(void *)(a1 + 24) + 8) + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 9);
  uint64_t result = (atomic_uchar *)WebKit::PDFPluginBase::streamDidReceiveData((WebKit::PDFPluginBase *)v4, a3);
  if (v4)
  {
    uint64_t v7 = (atomic_uchar *)*((void *)v4 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v7, v6);
  }
  return result;
}

WTF *WebKit::PluginView::Stream::didFail(uint64_t a1, void *a2)
{
  ++*(_DWORD *)(a1 + 16);
  if (!*(unsigned char *)(a1 + 240))
  {
    uint64_t v3 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8) + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 72));
    WebKit::PDFPluginBase::streamDidFail((atomic_uchar *)v3);
    if (v3) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 72), a2);
    }
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v5 = *(_DWORD **)(v4 + 184);
  *(void *)(v4 + 184) = 0;
  if (v5)
  {
    if (v5[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 56))(v5);
    }
    else {
      --v5[4];
    }
  }
  uint64_t result = *(WTF **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      uint64_t result = (WTF *)WTF::fastFree(result, a2);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 56);
    return (WTF *)v7(a1);
  }
  else
  {
    --*(_DWORD *)(a1 + 16);
  }
  return result;
}

WTF *WebKit::PluginView::Stream::didFinishLoading(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 16);
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 24) + 8) + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 72));
  WebKit::PDFPluginBase::streamDidFinishLoading((unsigned __int8 *)v2);
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 72), v3);
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
  uint64_t v5 = *(_DWORD **)(v4 + 184);
  *(void *)(v4 + 184) = 0;
  if (v5)
  {
    if (v5[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 56))(v5);
    }
    else {
      --v5[4];
    }
  }
  uint64_t result = *(WTF **)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1) {
      uint64_t result = (WTF *)WTF::fastFree(result, v3);
    }
    else {
      --*(_DWORD *)result;
    }
  }
  if (*(_DWORD *)(a1 + 16) == 1)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 56);
    return (WTF *)v7(a1);
  }
  else
  {
    --*(_DWORD *)(a1 + 16);
  }
  return result;
}

unsigned int *WebKit::PluginView::create@<X0>(unsigned int *result@<X0>, WTF::URL *a2@<X1>, WebCore::MIMETypeRegistry *a3@<X2>, char a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(*((void *)result + 6) + 8) + 544);
  if (v6 && (v7 = (uint64_t)result, (uint64_t result = *(unsigned int **)(v6 + 8)) != 0))
  {
    uint64_t v11 = result + 2;
    atomic_fetch_add((atomic_uint *volatile)result + 2, 1u);
    WebKit::WebFrame::fromCoreFrame((uint64_t)result, &v22);
    uint64_t v12 = v22;
    if (v22)
    {
      uint64_t v13 = *(void *)(v22 + 24);
      if (v13
        && (uint64_t v14 = *(void *)(v13 + 8)) != 0
        && (uint64_t v15 = *(void *)(v14 + 24)) != 0
        && (uint64_t v16 = *(void *)(v15 + 8)) != 0
        && (uint64_t v17 = *(void **)(*(void *)(v16 + 48) + 16),
            ((*(uint64_t (**)(void *))(*v17 + 1368))(v17) & 1) == 0)
        && (uint64_t v18 = *(void *)(v17[2] + 8)) != 0)
      {
        CFRetain(*(CFTypeRef *)(v18 - 8));
        WTF::URL::path(a2);
        if (WebKit::WebPage::shouldUsePDFPlugin(v18 - 16, a3))
        {
          uint64_t v19 = WTF::fastMalloc((WTF *)0x1D8);
          uint64_t v21 = WebKit::PluginView::PluginView(v19, v7, (uint64_t)a2, v20, a4, v18 - 16);
        }
        else
        {
          uint64_t v21 = 0;
        }
        *a5 = v21;
        CFRelease(*(CFTypeRef *)(v18 - 8));
      }
      else
      {
        *a5 = 0;
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    else
    {
      *a5 = 0;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
  }
  else
  {
    *a5 = 0;
  }
  return result;
}

uint64_t WebKit::PluginView::PluginView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v11 = (void *)WebCore::Widget::Widget();
  *uint64_t v11 = &unk_1EE9F2E30;
  *(_DWORD *)(a2 + 28) += 2;
  v11[8] = a2;
  if ((*(unsigned char *)(*(void *)(*(void *)(*(void *)(a2 + 48) + 8) + 712) + 721) & 8) != 0)
  {
    WebKit::UnifiedPDFPlugin::create(a2, v23);
    *(void *)(a1 + 72) = v23[0];
    uint64_t v12 = WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a6 + 24), a6 + 16);
    uint64_t v13 = *(atomic_uint **)(a6 + 24);
    if (v13) {
      atomic_fetch_add(v13, 1u);
    }
    *(void *)(a1 + 80) = v13;
    uint64_t v14 = *(_DWORD **)a3;
    if (*(void *)a3) {
      *v14 += 2;
    }
    *(void *)(a1 + 88) = v14;
    long long v15 = *(_OWORD *)(a3 + 24);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a1 + 112) = v15;
    *(void *)(a1 + 128) = 0;
    *(unsigned char *)(a1 + 136) = a5;
    *(unsigned char *)(a1 + 137) = 0;
    *(void *)(a1 + 144) = 0;
    uint64_t v16 = (WTF::RunLoop *)WTF::RunLoop::main((WTF::RunLoop *)v12);
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v17 = &unk_1EE9F3CA8;
    v17[1] = WebKit::PluginView::pendingResourceRequestTimerFired;
    v17[2] = 0;
    v17[3] = a1;
    WTF::RunLoop::TimerBase::TimerBase((WTF::RunLoop::TimerBase *)(a1 + 152), v16);
    *(void *)(a1 + 152) = &unk_1EE9B3390;
    *(void *)(a1 + 176) = v17;
    *(void *)(a1 + 184) = 0;
    *(_DWORD *)(a1 + 192) = 0;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)(a1 + 200));
    *(void *)(a1 + 440) = 0;
    *(unsigned char *)(a1 + 448) = 0;
    *(unsigned char *)(a1 + 338) = *(unsigned char *)(a1 + 338) & 0xF1 | 4;
    *(void *)(a1 + 456) = 0;
    *(void *)(a1 + 464) = 0;
    uint64_t v18 = *(void *)(a1 + 72);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v18 + 72));
    if (v18) {
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v18 + 72), v19);
    }
    uint64_t v20 = *(void *)(a1 + 80);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 8);
      if (v21) {
        uint64_t v20 = v21 - 16;
      }
      else {
        uint64_t v20 = 0;
      }
    }
    WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebKit::PluginView>(v20 + 160, a1, (uint64_t)v23);
    return a1;
  }
  else
  {
    uint64_t result = 228;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::PluginView::pendingResourceRequestTimerFired(WebKit::PluginView *this)
{
  uint64_t v2 = (WebCore::ResourceRequestBase *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  uint64_t v3 = (WTF::URL *)WebCore::ResourceRequestBase::url(v2);
  uint64_t result = WTF::URL::protocolIsJavaScript(v3);
  if (result)
  {
LABEL_21:
    if (!v2) {
      return result;
    }
    return std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v2);
  }
  ++*((_DWORD *)this + 2);
  uint64_t v5 = WTF::fastMalloc((WTF *)0x100);
  *(_DWORD *)(v5 + 16) = 1;
  *(void *)uint64_t v5 = &unk_1EE9F2DE0;
  *(void *)(v5 + 8) = 0;
  WTF::WeakPtrFactory<WebCore::Widget,WTF::SingleThreadWeakPtrImpl>::initializeIfNeeded((WebKit::PluginView *)((char *)this + 16), (uint64_t)this);
  uint64_t v6 = (_DWORD *)*((void *)this + 2);
  if (v6) {
    ++*v6;
  }
  *(void *)(v5 + 24) = v6;
  WebCore::ResourceRequest::ResourceRequest((CFTypeRef *)(v5 + 32), (const String *)v2);
  *(void *)(v5 + 2++*(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(v5 + 240) = 0;
  *(void *)(v5 + 248) = 0;
  ++*(_DWORD *)(v5 + 16);
  uint64_t v7 = (_DWORD *)*((void *)this + 23);
  *((void *)this + 23) = v5;
  if (v7)
  {
    if (v7[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v7 + 56))(v7);
    }
    else {
      --v7[4];
    }
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(v5 + 24) + 8) + 64) + 48) + 8)
                 + 544);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9) {
      atomic_fetch_add((atomic_uint *volatile)(v9 + 8), 1u);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v10 = *(void *)(WebKit::WebProcess::singleton(void)::process + 320);
  WebCore::ResourceRequest::ResourceRequest(v15, (const String *)(v5 + 32));
  ++*(_DWORD *)(v5 + 16);
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v11 = &unk_1EE9F3C80;
  v11[1] = v5;
  void v11[2] = v5;
  uint64_t v14 = v11;
  WebKit::WebLoaderStrategy::schedulePluginStreamLoad(v10, v9, v5, (uint64_t)v15, (uint64_t *)&v14);
  if (v14) {
    (*(void (**)(void *))(*v14 + 8))(v14);
  }
  CFTypeRef v12 = cf;
  CFTypeRef cf = 0;
  if (v12) {
    CFRelease(v12);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v15);
  uint64_t result = (uint64_t)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v9 + 8));
  if (*(_DWORD *)(v5 + 16) == 1) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  }
  else {
    --*(_DWORD *)(v5 + 16);
  }
  if (*((_DWORD *)this + 2) != 1)
  {
    --*((_DWORD *)this + 2);
    goto LABEL_21;
  }
  uint64_t result = (*(uint64_t (**)(WebKit::PluginView *))(*(void *)this + 8))(this);
  if (v2) {
    return std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v2);
  }
  return result;
}

void WebKit::PluginView::~PluginView(WebKit::PluginView *this)
{
  uint64_t v2 = *((void *)this + 10);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      CFRetain(*(CFTypeRef *)(v3 - 8));
      WTF::WeakHashSet<WebKit::PluginView,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebKit::PluginView>(v3 + 144, (uint64_t)this);
      CFRelease(*(CFTypeRef *)(v3 - 8));
    }
  }
  uint64_t v4 = *((void *)this + 23);
  if (v4)
  {
    ++*(_DWORD *)(v4 + 16);
    *(unsigned char *)(v4 + 240) = 1;
    uint64_t v5 = *(WebCore::ResourceLoader **)(v4 + 248);
    *(void *)(v4 + 248) = 0;
    WebCore::ResourceLoader::cancelledError((uint64_t *)&v24, v5);
    WebCore::ResourceLoader::cancel();
    CFTypeRef v7 = cf;
    CFTypeRef cf = 0;
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = v26;
    unint64_t v26 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = v25;
    uint64_t v25 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v6);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t v10 = v24;
    int v24 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v6);
        if (!v5) {
          goto LABEL_24;
        }
        goto LABEL_21;
      }
      *(_DWORD *)v10 -= 2;
    }
    if (!v5)
    {
LABEL_24:
      if (*(_DWORD *)(v4 + 16) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
      }
      else {
        --*(_DWORD *)(v4 + 16);
      }
      goto LABEL_27;
    }
LABEL_21:
    if (*((_DWORD *)v5 + 4) == 1) {
      (*(void (**)(WebCore::ResourceLoader *))(*(void *)v5 + 8))(v5);
    }
    else {
      --*((_DWORD *)v5 + 4);
    }
    goto LABEL_24;
  }
LABEL_27:
  uint64_t v11 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v11 + 9);
  WebKit::PDFPluginBase::destroy((WebKit::PDFPluginBase *)v11);
  if (v11) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v11 + 9), v12);
  }
  uint64_t v13 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v13) {
    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v13, v12);
  }
  uint64_t v14 = (unsigned int *)*((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v14, v12);
  }
  long long v15 = (const void *)*((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v15) {
    CFRelease(v15);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebKit::PluginView *)((char *)this + 200), (WTF::StringImpl *)v12);
  uint64_t v16 = (_DWORD *)*((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v16)
  {
    if (v16[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v16 + 56))(v16);
    }
    else {
      --v16[4];
    }
  }
  *((void *)this + 19) = &unk_1EE9B3390;
  uint64_t v17 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  WTF::RunLoop::TimerBase::~TimerBase((WebKit::PluginView *)((char *)this + 152));
  uint64_t v19 = (WebCore::ResourceRequestBase *)*((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v19) {
    std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v19);
  }
  uint64_t v20 = (WTF::StringImpl *)*((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2) {
      WTF::StringImpl::destroy(v20, v18);
    }
    else {
      *(_DWORD *)v20 -= 2;
    }
  }
  uint64_t v21 = (WTF::StringImpl *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, v18);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  uint64_t v22 = (unsigned int *)*((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v22);
    WTF::fastFree((WTF *)v22, v18);
  }
  uint64_t v23 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v23) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v23 + 72), v18);
  }
  WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)this + 8);

  MEMORY[0x1F4172E08](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::PluginView::~PluginView(this);

  WTF::fastFree(v1, v2);
}

void WebKit::PluginView::manualLoadDidReceiveResponse(WebKit::PluginView *this, CFTypeRef *a2)
{
  if (*((unsigned char *)this + 137))
  {
    uint64_t v4 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 9);
    WebKit::PDFPluginBase::streamDidReceiveResponse((WebKit::PDFPluginBase *)v4, (const WebCore::ResourceResponse *)a2);
    if (v4)
    {
      uint64_t v6 = (atomic_uchar *)*((void *)v4 + 9);
      WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v6, v5);
    }
  }
  else
  {
    *((_DWORD *)this + 48) = 1;
    WebCore::ResourceResponseBase::operator=((uint64_t)this + 200, (uint64_t)a2);
    CFTypeRef v7 = a2[30];
    if (v7) {
      CFRetain(a2[30]);
    }
    uint64_t v8 = (const void *)*((void *)this + 55);
    *((void *)this + 55) = v7;
    if (v8) {
      CFRelease(v8);
    }
    *((unsigned char *)this + 448) = *((unsigned char *)a2 + 248);
  }
}

atomic_uchar *WebKit::PluginView::manualLoadDidReceiveData(WebKit::PluginView *this, const WebCore::SharedBuffer *a2)
{
  if (*((unsigned char *)this + 137))
  {
    uint64_t v3 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 9);
    uint64_t result = (atomic_uchar *)WebKit::PDFPluginBase::streamDidReceiveData((WebKit::PDFPluginBase *)v3, a2);
    if (v3)
    {
      uint64_t v6 = (atomic_uchar *)*((void *)v3 + 9);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v6, v5);
    }
  }
  else
  {
    WebCore::SharedBufferBuilder::ensureBuffer((WebKit::PluginView *)((char *)this + 456));
    return (atomic_uchar *)WebCore::FragmentedSharedBuffer::append();
  }
  return result;
}

unsigned __int8 *WebKit::PluginView::manualLoadDidFinishLoading(unsigned __int8 *this)
{
  if (this[137])
  {
    uint64_t v1 = *((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v1 + 72));
    this = WebKit::PDFPluginBase::streamDidFinishLoading((unsigned __int8 *)v1);
    if (v1)
    {
      uint64_t v3 = *(atomic_uchar **)(v1 + 72);
      return (unsigned __int8 *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
    }
  }
  else
  {
    *((_DWORD *)this + 48) = 2;
  }
  return this;
}

uint64_t *WebKit::PluginView::layerHostingStrategyDidChange(uint64_t *this)
{
  if (*((unsigned char *)this + 137))
  {
    uint64_t v1 = (WebCore::Element *)this[8];
    *((_DWORD *)v1 + 7) += 2;
    uint64_t v2 = v1;
    WebCore::Element::invalidateStyleAndLayerComposition(v1);
    return WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v2);
  }
  return this;
}

unsigned int *WebKit::PluginView::manualLoadDidFail(unsigned int *this, void *a2)
{
  if (*((unsigned char *)this + 137))
  {
    uint64_t v2 = *((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 72));
    this = (unsigned int *)WebKit::PDFPluginBase::streamDidFail((atomic_uchar *)v2);
    if (v2)
    {
      uint64_t v4 = *(atomic_uchar **)(v2 + 72);
      return (unsigned int *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4, v3);
    }
  }
  else
  {
    this[48] = 2;
    uint64_t v5 = (unsigned int *)*((void *)this + 57);
    *((void *)this + 57) = 0;
    if (v5)
    {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v5, a2);
    }
  }
  return this;
}

atomic_uchar *WebKit::PluginView::viewGeometryDidChange(atomic_uchar *this)
{
  if (this[137])
  {
    uint64_t v1 = (WebCore::Widget *)this;
    this = (atomic_uchar *)WebCore::Widget::parent((WebCore::Widget *)this);
    if (this)
    {
      uint64_t v2 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)v1 + 8) + 48) + 8) + 544) + 8)
                     + 24);
      float v3 = 1.0;
      if (v2)
      {
        uint64_t v4 = *(void *)(v2 + 8);
        if (v4) {
          float v3 = *(float *)(v4 + 356);
        }
      }
      v16[0] = (int)(float)(v3 * (float)(int)WebCore::Widget::frameRect(v1));
      v16[1] = (int)(float)(v3 * (float)(int)((unint64_t)WebCore::Widget::frameRect(v1) >> 32));
      WebCore::Widget::protectedParent((uint64_t *)v13, v1);
      unint64_t v5 = WebCore::ScrollView::contentsToRootView(v13[0], (const WebCore::IntPoint *)v16);
      int v6 = v5;
      unint64_t v7 = HIDWORD(v5);
      uint64_t v8 = v13[0];
      v13[0] = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 2) == 1) {
          (*(void (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
        }
        else {
          --*((_DWORD *)v8 + 2);
        }
      }
      *(_OWORD *)uint64_t v13 = xmmword_1994F7850;
      long long v14 = unk_1994F7860;
      long long v15 = xmmword_1994F7870;
      WebCore::AffineTransform::translate((WebCore::AffineTransform *)v13, (double)v6, (double)(int)v7);
      WebCore::AffineTransform::scale((WebCore::AffineTransform *)v13, v3);
      uint64_t v9 = (atomic_uchar *volatile *)*((void *)v1 + 9);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v9 + 9);
      WebCore::Widget::frameRect(v1);
      uint64_t v12 = v10;
      (*((void (**)(atomic_uchar *volatile *, uint64_t *, WebCore::ScrollView **))*v9 + 125))(v9, &v12, v13);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v9 + 9), v11);
    }
  }
  return this;
}

atomic_uchar *WebKit::PluginView::setPageScaleFactor(atomic_uchar *result, uint64_t a2, unsigned int a3, double a4)
{
  if (result[137])
  {
    unint64_t v7 = result;
    WebKit::PluginView::pluginScaleFactorDidChange((WebKit::PluginView *)result);
    uint64_t v8 = (atomic_uchar *volatile *)*((void *)v7 + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v8 + 9);
    (*((void (**)(atomic_uchar *volatile *, uint64_t, void, double))*v8 + 122))(v8, a2, a3, a4);
    uint64_t v10 = (atomic_uchar *)*((void *)v8 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v10, v9);
  }
  return result;
}

void WebKit::PluginView::pluginScaleFactorDidChange(WebKit::PluginView *this)
{
  double v2 = WebKit::PluginView::pageScaleFactor(this);
  uint64_t v3 = *((void *)this + 10);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = v4 - 16;
    CFRetain(*(CFTypeRef *)(v4 - 8));
    char v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  uint64_t v7 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 32) + 56))(v5 + 32);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2025;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v20 = v9;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v9, v2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v5 + 32) + 32))(v5 + 32, &v20, 0);
  uint64_t v11 = v20;
  uint64_t v20 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v16, v17);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v5 + 32);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 2026;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v20 = v13;
  IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v13, v2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v5 + 32, &v20, 0);
  long long v15 = v20;
  uint64_t v20 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v18, v19);
    if (v6) {
      return;
    }
  }
  else if (v6)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

double WebKit::PluginView::pageScaleFactor(WebKit::PluginView *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  double v2 = (*((double (**)(atomic_uchar *volatile *))*v1 + 121))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

uint64_t WebKit::PluginView::accessibilityAssociatedPluginParentForElement(WebKit::PluginView *this, WebCore::Element *a2)
{
  uint64_t v2 = *((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 72));
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v2 + 72), v3);
  }
  return 0;
}

uint64_t WebKit::PluginView::accessibilityObject(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 152))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

atomic_uchar *WebKit::PluginView::viewVisibilityDidChange(atomic_uchar *this)
{
  if (this[137])
  {
    uint64_t v1 = this;
    this = (atomic_uchar *)WebCore::Widget::parent((WebCore::Widget *)this);
    if (this)
    {
      uint64_t v2 = (atomic_uchar *volatile *)*((void *)v1 + 9);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2 + 9);
      if (v1[24]) {
        BOOL v3 = v1[25] != 0;
      }
      else {
        BOOL v3 = 0;
      }
      (*((void (**)(atomic_uchar *volatile *, BOOL))*v2 + 126))(v2, v3);
      uint64_t v5 = (atomic_uchar *)*((void *)v2 + 9);
      return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5, v4);
    }
  }
  return this;
}

uint64_t WebKit::PluginView::layerHostingStrategy(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 112))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

uint64_t WebKit::PluginView::platformLayer(WebKit::PluginView *this)
{
  return 0;
}

uint64_t WebKit::PluginView::graphicsLayer(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  uint64_t v2 = (atomic_uchar **)(v1 + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  if ((*((unsigned int (**)(atomic_uchar *volatile *))*v1 + 112))(v1) == 2) {
    uint64_t v4 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 114))(v1);
  }
  else {
    uint64_t v4 = 0;
  }
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*v2, v3);
  return v4;
}

uint64_t WebKit::PluginView::scroll()
{
  return 0;
}

uint64_t WebKit::PluginView::scrollPositionForTesting(WebKit::PluginView *this)
{
  return 0;
}

uint64_t WebKit::PluginView::horizontalScrollbar(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 49))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

uint64_t WebKit::PluginView::verticalScrollbar(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 50))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

uint64_t WebKit::PluginView::wantsWheelEvents(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 131))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

atomic_uchar *WebKit::PluginView::setFrameRect(WebKit::PluginView *this, const IntRect *a2)
{
  WebCore::Widget::setFrameRect(this, a2);

  return WebKit::PluginView::viewGeometryDidChange((atomic_uchar *)this);
}

atomic_uchar *WebKit::PluginView::paint(atomic_uchar *result, WebCore::GraphicsContext *a2, IntRect *a3)
{
  if (!result[137]) {
    return result;
  }
  uint64_t v5 = result;
  if ((*(unsigned int (**)(WebCore::GraphicsContext *))(*(void *)a2 + 40))(a2))
  {
    uint64_t result = (atomic_uchar *)(*(uint64_t (**)(WebCore::GraphicsContext *))(*(void *)a2 + 56))(a2);
    if (result)
    {
      char v6 = (atomic_uchar *volatile *)*((void *)v5 + 9);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6 + 9);
      uint64_t result = (atomic_uchar *)WebKit::PDFPluginBase::updateControlTints((WebKit::PDFPluginBase *)v6, a2);
      if (v6)
      {
        uint64_t v8 = (atomic_uchar *)*((void *)v6 + 9);
        return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v8, v7);
      }
    }
    return result;
  }
  uint64_t result = (atomic_uchar *)WebCore::Widget::frameRect((WebCore::Widget *)v5);
  if (v10 < 1 || v9 < 1) {
    return result;
  }
  if (!*((void *)v5 + 58))
  {
    uint64_t v18 = *(WebCore::LocalFrameView **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)v5 + 8) + 48) + 8)
                                                              + 544)
                                                  + 8)
                                      + 288);
    if (v18)
    {
      ++*((_DWORD *)v18 + 2);
      __int16 v19 = WebCore::LocalFrameView::paintBehavior(v18);
      __int16 v20 = v19;
      if (*((_DWORD *)v18 + 2) == 1)
      {
        (*(void (**)(WebCore::LocalFrameView *))(*(void *)v18 + 8))(v18);
        if ((v20 & 0x400) != 0)
        {
LABEL_28:
          (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a2 + 96))(a2, 1);
          v29[0] = (IntPoint)WebCore::Widget::frameRect((WebCore::Widget *)v5);
          WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)&v30, v29);
          v25.n128_u32[0] = v30.m_location.m_x;
          v26.n128_u32[0] = v30.m_location.m_y;
          (*(void (**)(WebCore::GraphicsContext *, __n128, __n128))(*(void *)a2 + 640))(a2, v25, v26);
          IntRect v30 = *a3;
          v30.m_location = (IntPoint)vsub_s32((int32x2_t)v30.m_location, (int32x2_t)v29[0]);
          uint64_t v27 = (atomic_uchar *volatile *)*((void *)v5 + 9);
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v27 + 9);
          (*((void (**)(atomic_uchar *volatile *, WebCore::GraphicsContext *, IntRect *))*v27 + 120))(v27, a2, &v30);
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v27 + 9), v28);
          return (atomic_uchar *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(void *)a2 + 104))(a2, 1);
        }
      }
      else
      {
        --*((_DWORD *)v18 + 2);
        if ((v19 & 0x400) != 0) {
          goto LABEL_28;
        }
      }
    }
    uint64_t v22 = (atomic_uchar *volatile *)*((void *)v5 + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v22 + 9);
    int v23 = (*((uint64_t (**)(atomic_uchar *volatile *))*v22 + 112))(v22);
    uint64_t result = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v22 + 9), v24);
    if (v23 == 2) {
      return result;
    }
    goto LABEL_28;
  }
  if ((*(uint64_t (**)(WebCore::GraphicsContext *))(*(void *)a2 + 24))(a2))
  {
    uint64_t v11 = *(void *)(*(void *)(*(void *)(*((void *)v5 + 8) + 48) + 8) + 544);
    float v12 = 1.0;
    if (v11)
    {
      uint64_t v13 = *(void *)(v11 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(v13 + 24);
        if (v14)
        {
          uint64_t v15 = *(void *)(v14 + 8);
          if (v15)
          {
            ++*(_DWORD *)v15;
            float v12 = (float)(int)*(float *)(v15 + 364);
            WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v15);
          }
        }
      }
    }
    uint64_t v16 = (WebCore::ShareableBitmap *)*((void *)v5 + 58);
    v29[0] = (IntPoint)WebCore::Widget::frameRect((WebCore::Widget *)v5);
    IntSize v17 = *(IntSize *)(*((void *)v5 + 58) + 8);
    v30.m_location = 0;
    v30.m_size = v17;
    return (atomic_uchar *)WebCore::ShareableBitmap::paint(v16, a2, v12, v29, &v30);
  }
  else
  {
    uint64_t result = (atomic_uchar *)WebCore::ShareableBitmap::createImage((uint64_t *)&v31, *((WebCore::ShareableBitmap **)v5 + 58));
    if (v31)
    {
      v29[0] = (IntPoint)WebCore::Widget::frameRect((WebCore::Widget *)v5);
      v29[1] = v21;
      WebCore::FloatRect::FloatRect((WebCore::FloatRect *)&v30, (const WebCore::IntRect *)v29);
      WebCore::GraphicsContext::drawImage();
      uint64_t result = v31;
      char v31 = 0;
      if (result)
      {
        if (*((_DWORD *)result + 2) == 1) {
          return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)result + 8))(result);
        }
        else {
          --*((_DWORD *)result + 2);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::PluginView::setParent(String *this, WebCore::ScrollView *a2)
{
  uint64_t result = WebCore::Widget::setParent((WebCore::Widget *)this, a2);
  if (a2 && !BYTE1(this[17].m_impl.m_ptr))
  {
    m_ptr = (atomic_uchar **)this[9].m_impl.m_ptr;
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(m_ptr + 9);
    (*((void (**)(atomic_uchar **, String *))*m_ptr + 115))(m_ptr, this);
    if (!LOBYTE(this[17].m_impl.m_ptr))
    {
      uint64_t v8 = this[11].m_impl.m_ptr;
      if (v8)
      {
        if (*((_DWORD *)v8 + 1))
        {
          (*(void (**)(void))(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)this[8].m_impl.m_ptr
                                                                                          + 6)
                                                                                        + 8)
                                                                            + 544)
                                                                + 8)
                                                    + 296)
                                        + 208)
                            + 8))();
          int v9 = (WebCore::OriginAccessPatternsForWebProcess *)WebCore::FrameLoader::outgoingReferrerURL((uint64_t *)v45, *(WebCore::FrameLoader **)(*(void *)(*(void *)(*(void *)(*((void *)this[8].m_impl.m_ptr + 6) + 8) + 544) + 8)+ 280));
          WebCore::OriginAccessPatternsForWebProcess::singleton(v9);
          WebCore::SecurityPolicy::generateReferrerHeader();
          uint64_t v11 = v45[0];
          v45[0] = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2) {
              WTF::StringImpl::destroy(v11, v10);
            }
            else {
              *(_DWORD *)v11 -= 2;
            }
          }
          unsigned int v36 = v46;
          if (v46)
          {
            if (!*((_DWORD *)v46 + 1))
            {
              int v46 = 0;
              if (*(_DWORD *)v36 == 2) {
                WTF::StringImpl::destroy(v36, v10);
              }
              else {
                *(_DWORD *)v36 -= 2;
              }
            }
          }
          else
          {
            int v46 = 0;
          }
          uint64_t v39 = WTF::fastMalloc((WTF *)0xC8);
          uint64_t v40 = (WebCore::ResourceRequestBase *)WebCore::ResourceRequestBase::ResourceRequestBase(v39, this + 11, 0);
          *((void *)v40 + 24) = 0;
          WebCore::ResourceRequestBase::setHTTPReferrer(v40, (const WTF::String *)&v46);
          char v41 = (WebCore::ResourceRequestBase *)this[18].m_impl.m_ptr;
          this[18].m_impl.m_ptr = (StringImpl *)v39;
          if (v41) {
            std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](v41);
          }
          WTF::RunLoop::TimerBase::start();
          char v43 = v46;
          int v46 = 0;
          if (v43)
          {
            if (*(_DWORD *)v43 == 2) {
              WTF::StringImpl::destroy(v43, v42);
            }
            else {
              *(_DWORD *)v43 -= 2;
            }
          }
        }
      }
    }
    BYTE1(this[17].m_impl.m_ptr) = 1;
    WebKit::PluginView::viewVisibilityDidChange((atomic_uchar *)this);
    WebKit::PluginView::viewGeometryDidChange((atomic_uchar *)this);
    int v7 = (int)this[24].m_impl.m_ptr;
    if (v7)
    {
      if (v7 == 3)
      {
        WebKit::PluginView::manualLoadDidFail((unsigned int *)this, v6);
      }
      else
      {
        WebKit::PluginView::manualLoadDidReceiveResponse((WebKit::PluginView *)this, (CFTypeRef *)&this[25].m_impl.m_ptr);
        if (this[57].m_impl.m_ptr)
        {
          WebCore::SharedBufferBuilder::take((uint64_t *)v45, (WebCore::SharedBufferBuilder *)&this[57]);
          float v12 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(void *)float v12 = &unk_1EE9F3CD0;
          *((void *)v12 + 1) = this;
          int v46 = v12;
          WebCore::FragmentedSharedBuffer::forEachSegmentAsSharedBuffer();
          uint64_t v14 = v46;
          int v46 = 0;
          if (v14) {
            (*(void (**)(WTF::StringImpl *))(*(void *)v14 + 8))(v14);
          }
          uint64_t v15 = (unsigned int *)v45[0];
          v45[0] = 0;
          if (v15) {
            WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v15, v13);
          }
        }
        if (LODWORD(this[24].m_impl.m_ptr) == 2) {
          WebKit::PluginView::manualLoadDidFinishLoading((unsigned __int8 *)this);
        }
      }
    }
    if ((*((unsigned int (**)(atomic_uchar **))*m_ptr + 117))(m_ptr))
    {
      uint64_t v16 = *(void *)(*(void *)(*((void *)this[8].m_impl.m_ptr + 6) + 8) + 544);
      if (v16)
      {
        uint64_t v17 = *(void *)(v16 + 8);
        if (v17)
        {
          uint64_t v18 = *(WebCore::LocalFrameView **)(v17 + 288);
          if (v18)
          {
            ++*((_DWORD *)v18 + 2);
            WebCore::LocalFrameView::enterCompositingMode(v18);
            if (*((_DWORD *)v18 + 2) == 1) {
              (*(void (**)(WebCore::LocalFrameView *))(*(void *)v18 + 8))(v18);
            }
            else {
              --*((_DWORD *)v18 + 2);
            }
          }
          else
          {
            WebCore::LocalFrameView::enterCompositingMode(0);
          }
          __int16 v19 = this[8].m_impl.m_ptr;
          *((_DWORD *)v19 + 7) += 2;
          v45[0] = (WTF::StringImpl *)v19;
          WebCore::Element::invalidateStyleAndLayerComposition((WebCore::Element *)v19);
          WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)v45);
        }
      }
    }
    if (LOBYTE(this[3].m_impl.m_ptr)) {
      BOOL v20 = BYTE1(this[3].m_impl.m_ptr) != 0;
    }
    else {
      BOOL v20 = 0;
    }
    (*((void (**)(atomic_uchar **, BOOL))*m_ptr + 126))(m_ptr, v20);
    uint64_t v22 = *(void *)(*(void *)(*((void *)this[8].m_impl.m_ptr + 6) + 8) + 544);
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 8);
      if (v23)
      {
        int v24 = (unsigned int *)(v23 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v23 + 8), 1u);
        __n128 v25 = *(WebCore::LocalFrameView **)(v23 + 288);
        if (v25)
        {
          ++*((_DWORD *)v25 + 2);
          WebCore::LocalFrameView::setNeedsLayoutAfterViewConfigurationChange(v25);
          if (*((_DWORD *)v25 + 2) == 1) {
            (*(void (**)(WebCore::LocalFrameView *))(*(void *)v25 + 8))(v25);
          }
          else {
            --*((_DWORD *)v25 + 2);
          }
        }
        if (*(void *)(*(void *)(v23 + 128) + 8) == v23
          && WebKit::PDFPluginBase::isFullFramePlugin((WebKit::PDFPluginBase *)m_ptr))
        {
          WebKit::WebFrame::fromCoreFrame(v23, &v44);
          __n128 v26 = v44;
          WebKit::WebFrame::protectedPage((uint64_t)v44, &v46);
          uint64_t v27 = v46;
          double v28 = (*((double (**)(atomic_uchar **))*m_ptr + 123))(m_ptr);
          double v29 = (*((double (**)(atomic_uchar **))*m_ptr + 124))(m_ptr);
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*((void *)v27 + 4) + 56))((uint64_t)v27 + 32);
          char v31 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
          *(_WORD *)char v31 = 2003;
          *((void *)v31 + 1) = v30;
          *((void *)v31 + 66) = (char *)v31 + 16;
          *((void *)v31 + 67) = 512;
          *((void *)v31 + 68) = 0;
          *((void *)v31 + 70) = 0;
          *((void *)v31 + 69) = 0;
          IPC::Encoder::encodeHeader(v31);
          v45[0] = v31;
          int v32 = (unsigned char *)IPC::Encoder::grow(v31, 1uLL, 1);
          if (!v33)
          {
            uint64_t result = 831;
            __break(0xC471u);
            return result;
          }
          *int v32 = 1;
          IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v31, v28);
          IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v31, v29);
          (*(void (**)(uint64_t, WTF::StringImpl **, void))(*((void *)v27 + 4) + 32))((uint64_t)v27 + 32, v45, 0);
          uint64_t v35 = v45[0];
          v45[0] = 0;
          if (v35)
          {
            IPC::Encoder::~Encoder(v35, v34);
            WTF::fastFree(v37, v38);
          }
          CFRelease(*((CFTypeRef *)v27 + 1));
          if (v26) {
            CFRelease(*((CFTypeRef *)v26 + 1));
          }
        }
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v24);
      }
    }
    return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(m_ptr[9], v21);
  }
  return result;
}

uint64_t WebKit::PluginView::countFindMatches(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 137)) {
    return 0;
  }
  int v7 = *(atomic_uchar *volatile **)(a1 + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7 + 9);
  uint64_t v8 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t, void, uint64_t))*v7 + 143))(v7, a2, a3, a4);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v7 + 9), v9);
  return v8;
}

uint64_t WebKit::PluginView::findString(uint64_t a1, uint64_t a2, unsigned __int16 a3, uint64_t a4)
{
  if (!*(unsigned char *)(a1 + 137)) {
    return 0;
  }
  int v7 = *(atomic_uchar *volatile **)(a1 + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7 + 9);
  uint64_t v8 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t, void, uint64_t))*v7 + 144))(v7, a2, a3, a4);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v7 + 9), v9);
  return v8;
}

atomic_uchar *WebKit::PluginView::rectsForTextMatchesInRect@<X0>(atomic_uchar *this@<X0>, const WebCore::IntRect *a2@<X1>, void *a3@<X8>)
{
  if (this[137])
  {
    uint64_t v4 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v4 + 9);
    (*((void (**)(atomic_uchar *volatile *, const WebCore::IntRect *))*v4 + 145))(v4, a2);
    char v6 = (atomic_uchar *)*((void *)v4 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v6, v5);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return this;
}

uint64_t WebKit::PluginView::drawsFindOverlay(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 146))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

atomic_uchar *WebKit::PluginView::selectionString@<X0>(atomic_uchar *this@<X0>, void *a2@<X8>)
{
  if (this[137])
  {
    uint64_t v2 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v2 + 9);
    (*((void (**)(atomic_uchar *volatile *))*v2 + 140))(v2);
    uint64_t v4 = (atomic_uchar *)*((void *)v2 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v4, v3);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

WebCore *WebKit::PluginView::handleEvent(WebCore *result, uint64_t a2)
{
  if (!*((unsigned char *)result + 137)) {
    return result;
  }
  uint64_t v2 = WebKit::g_currentEvent;
  if (!WebKit::g_currentEvent) {
    return result;
  }
  uint64_t v4 = result;
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  uint64_t v6 = *(void *)(StatusReg + 736);
  if (!v6 || (int v7 = *(WebCore::ThreadGlobalData **)(v6 + 96)) == 0)
  {
    uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
    int v7 = result;
  }
  uint64_t v8 = *((void *)v7 + 5);
  if (!v8)
  {
    uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v7);
    uint64_t v8 = *((void *)v7 + 5);
  }
  if (*(void *)(a2 + 24) != *(void *)(v8 + 1240) || (int v9 = *(unsigned __int8 *)(v2 + 4), v9 != 2))
  {
    uint64_t v10 = *(void *)(StatusReg + 736);
    if (!v10 || (uint64_t v11 = *(WebCore::ThreadGlobalData **)(v10 + 96)) == 0)
    {
      uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
      uint64_t v11 = result;
    }
    uint64_t v12 = *((void *)v11 + 5);
    if (!v12)
    {
      uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v11);
      uint64_t v12 = *((void *)v11 + 5);
    }
    if (*(void *)(a2 + 24) != *(void *)(v12 + 1216) || (int v9 = *(unsigned __int8 *)(v2 + 4), *(unsigned char *)(v2 + 4)))
    {
      uint64_t v13 = *(void *)(StatusReg + 736);
      if (!v13 || (uint64_t v14 = *(WebCore::ThreadGlobalData **)(v13 + 96)) == 0)
      {
        uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
        uint64_t v14 = result;
      }
      uint64_t v15 = *((void *)v14 + 5);
      if (!v15)
      {
        uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v14);
        uint64_t v15 = *((void *)v14 + 5);
      }
      if (*(void *)(a2 + 24) != *(void *)(v15 + 1264) || (int v9 = *(unsigned __int8 *)(v2 + 4), v9 != 1))
      {
        uint64_t v30 = *(void *)(StatusReg + 736);
        if (!v30 || (char v31 = *(WebCore::ThreadGlobalData **)(v30 + 96)) == 0)
        {
          uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
          char v31 = result;
        }
        uint64_t v32 = *((void *)v31 + 5);
        if (!v32)
        {
          uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v31);
          uint64_t v32 = *((void *)v31 + 5);
        }
        if (*(void *)(a2 + 24) != *(void *)(v32 + 2536))
        {
          uint64_t v33 = *(void *)(StatusReg + 736);
          if (!v33 || (int v34 = *(WebCore::ThreadGlobalData **)(v33 + 96)) == 0)
          {
            uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
            int v34 = result;
          }
          uint64_t v35 = *((void *)v34 + 5);
          if (!v35)
          {
            uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v34);
            uint64_t v35 = *((void *)v34 + 5);
          }
          if (*(void *)(a2 + 24) != *(void *)(v35 + 1272)) {
            goto LABEL_60;
          }
        }
        if (*(unsigned char *)(v2 + 4) == 6)
        {
          unsigned int v36 = (atomic_uchar *volatile *)*((void *)v4 + 9);
          WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v36 + 9);
          char v37 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t))*v36 + 133))(v36, v2);
        }
        else
        {
LABEL_60:
          uint64_t v39 = *(void *)(StatusReg + 736);
          if (!v39 || (uint64_t v40 = *(WebCore::ThreadGlobalData **)(v39 + 96)) == 0)
          {
            uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
            uint64_t v40 = result;
          }
          uint64_t v41 = *((void *)v40 + 5);
          if (!v41)
          {
            uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v40);
            uint64_t v41 = *((void *)v40 + 5);
          }
          if (*(void *)(a2 + 24) == *(void *)(v41 + 1256) && *(unsigned char *)(v2 + 4) == 2)
          {
            unsigned int v36 = (atomic_uchar *volatile *)*((void *)v4 + 9);
            WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v36 + 9);
            char v37 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t))*v36 + 134))(v36, v2);
          }
          else
          {
            uint64_t v42 = *(void *)(StatusReg + 736);
            if (!v42 || (char v43 = *(WebCore::ThreadGlobalData **)(v42 + 96)) == 0)
            {
              uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
              char v43 = result;
            }
            uint64_t v44 = *((void *)v43 + 5);
            if (!v44)
            {
              uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v43);
              uint64_t v44 = *((void *)v43 + 5);
            }
            if (*(void *)(a2 + 24) == *(void *)(v44 + 1248) && *(unsigned char *)(v2 + 4) == 2)
            {
              unsigned int v36 = (atomic_uchar *volatile *)*((void *)v4 + 9);
              WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v36 + 9);
              char v37 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t))*v36 + 135))(v36, v2);
            }
            else
            {
              uint64_t v45 = *(void *)(StatusReg + 736);
              if (!v45 || (int v46 = *(WebCore::ThreadGlobalData **)(v45 + 96)) == 0)
              {
                uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
                int v46 = result;
              }
              uint64_t v47 = *((void *)v46 + 5);
              if (!v47)
              {
                uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v46);
                uint64_t v47 = *((void *)v46 + 5);
              }
              if (*(void *)(a2 + 24) == *(void *)(v47 + 512) && !*(unsigned char *)(v2 + 4))
              {
                unsigned int v36 = (atomic_uchar *volatile *)*((void *)v4 + 9);
                WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v36 + 9);
                char v37 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t))*v36 + 136))(v36, v2);
              }
              else
              {
                uint64_t v48 = *(void *)(StatusReg + 736);
                if (!v48 || (uint64_t v49 = *(WebCore::ThreadGlobalData **)(v48 + 96)) == 0)
                {
                  uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
                  uint64_t v49 = result;
                }
                uint64_t v50 = *((void *)v49 + 5);
                if (!v50)
                {
                  uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v49);
                  uint64_t v50 = *((void *)v49 + 5);
                }
                if (*(void *)(a2 + 24) != *(void *)(v50 + 1056) || *(unsigned char *)(v2 + 4) != 7)
                {
                  uint64_t v51 = *(void *)(StatusReg + 736);
                  if (!v51 || (v52 = *(WebCore::ThreadGlobalData **)(v51 + 96)) == 0)
                  {
                    uint64_t result = (WebCore *)WebCore::threadGlobalDataSlow(result);
                    v52 = result;
                  }
                  uint64_t v53 = *((void *)v52 + 5);
                  if (!v53)
                  {
                    uint64_t result = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames(v52);
                    uint64_t v53 = *((void *)v52 + 5);
                  }
                  if (*(void *)(a2 + 24) != *(void *)(v53 + 1080) || *(unsigned char *)(v2 + 4) != 8) {
                    return result;
                  }
                }
                unsigned int v36 = (atomic_uchar *volatile *)*((void *)v4 + 9);
                WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v36 + 9);
                char v37 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t))*v36 + 137))(v36, v2);
              }
            }
          }
        }
        char v57 = v37;
        uint64_t result = (WebCore *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v36 + 9), v38);
        if ((v57 & 1) == 0) {
          return result;
        }
LABEL_103:
        *(_DWORD *)(a2 + 20) |= 0x80u;
        return result;
      }
    }
  }
  uint64_t v16 = *(void *)(*(void *)(*(void *)(*((void *)v4 + 8) + 48) + 8) + 544);
  if (v16)
  {
    uint64_t v17 = *(atomic_uint **)(v16 + 8);
    char v18 = 1;
    if (v17)
    {
      atomic_fetch_add(v17 + 2, 1u);
      char v18 = 0;
      int v9 = *(unsigned __int8 *)(v2 + 4);
    }
  }
  else
  {
    uint64_t v17 = 0;
    char v18 = 1;
  }
  if (v9 == 1)
  {
    WebCore::LocalFrame::checkedEventHandler((uint64_t *)&v61, (WebCore::LocalFrame *)v17);
    WebCore::EventHandler::setCapturingMouseEventsElement();
    char v60 = 0;
    double v28 = v61;
    long long v61 = 0;
    if (!v28) {
      goto LABEL_101;
    }
    int v29 = *v28;
    if (!*v28)
    {
      __break(0xC471u);
      JUMPOUT(0x19918CB1CLL);
    }
    goto LABEL_100;
  }
  if (!v9)
  {
    uint64_t v19 = *((void *)v4 + 8);
    uint64_t v20 = *(void *)(*(void *)(*(void *)(v19 + 48) + 8) + 544);
    if (v20)
    {
      uint64_t v21 = *(void *)(v20 + 8);
      char v22 = 1;
      if (v21)
      {
        atomic_fetch_add((atomic_uint *volatile)(v21 + 8), 1u);
        char v22 = 0;
        uint64_t v19 = *((void *)v4 + 8);
      }
    }
    else
    {
      uint64_t v21 = 0;
      char v22 = 1;
    }
    *(_DWORD *)(v19 + 28) += 2;
    long long v61 = (int *)v19;
    uint64_t v23 = *(void *)(v21 + 24);
    if (v23 && (int v24 = *(WebCore::Page **)(v23 + 8)) != 0)
    {
      ++*(_DWORD *)v24;
      WebCore::Page::checkedFocusController((uint64_t *)&v60, v24);
      WORD2(v59) = 0;
      LODWORD(v59) = 0;
      WebCore::FocusController::setFocusedElement();
      __n128 v25 = v60;
      char v60 = 0;
      if (v25)
      {
        if (!*(_DWORD *)v25)
        {
          __break(0xC471u);
          JUMPOUT(0x19918CAC8);
        }
        --*(_DWORD *)v25;
      }
      WTF::RefCounted<WebCore::Page>::deref(v24);
    }
    else
    {
      uint64_t v58 = *(void *)(v21 + 296);
      if (v58)
      {
        *(_DWORD *)(v58 + 28) += 2;
        WebCore::Document::setFocusedElement((WebCore::Document *)v58, (WebCore::Element *)v19);
        if (*(_DWORD *)(v58 + 28) == 2)
        {
          if ((*(_WORD *)(v58 + 34) & 0x400) == 0) {
            WebCore::Node::removedLastRef((WebCore::Node *)v58);
          }
        }
        else
        {
          *(_DWORD *)(v58 + 28) -= 2;
        }
      }
      else
      {
        WebCore::Document::setFocusedElement(0, (WebCore::Element *)v19);
      }
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v61);
    if ((v22 & 1) == 0) {
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v21 + 8));
    }
    WebCore::LocalFrame::checkedEventHandler((uint64_t *)&v61, (WebCore::LocalFrame *)v17);
    __n128 v26 = (WebCore::Node *)*((void *)v4 + 8);
    *((_DWORD *)v26 + 7) += 2;
    uint64_t v59 = 0;
    char v60 = v26;
    WebCore::EventHandler::setCapturingMouseEventsElement();
    uint64_t v27 = v60;
    char v60 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 7) == 2)
      {
        if ((*((_WORD *)v27 + 17) & 0x400) == 0) {
          WebCore::Node::removedLastRef(v27);
        }
      }
      else
      {
        *((_DWORD *)v27 + 7) -= 2;
      }
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v59);
    double v28 = v61;
    long long v61 = 0;
    if (v28)
    {
      int v29 = *v28;
      if (!*v28)
      {
        __break(0xC471u);
        JUMPOUT(0x19918C5F4);
      }
LABEL_100:
      int *v28 = v29 - 1;
    }
  }
LABEL_101:
  uint64_t v54 = (atomic_uchar *volatile *)*((void *)v4 + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v54 + 9);
  int v55 = (*((uint64_t (**)(atomic_uchar *volatile *, uint64_t))*v54 + 132))(v54, v2);
  uint64_t result = (WebCore *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v54 + 9), v56);
  if ((v18 & 1) == 0)
  {
    uint64_t result = (WebCore *)WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)v17 + 2);
    if ((v55 & 1) == 0) {
      return result;
    }
    goto LABEL_103;
  }
  if (v55) {
    goto LABEL_103;
  }
  return result;
}

uint64_t WebKit::PluginView::handleEditingCommand(WebKit::PluginView *this, const WTF::String *a2, const WTF::String *a3)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v5 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5 + 9);
  uint64_t v6 = (*((uint64_t (**)(atomic_uchar *volatile *, const WTF::String *, const WTF::String *))*v5 + 138))(v5, a2, a3);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v5 + 9), v7);
  return v6;
}

uint64_t WebKit::PluginView::isEditingCommandEnabled(WebKit::PluginView *this, const WTF::String *a2)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  BOOL v3 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 9);
  uint64_t v4 = (*((uint64_t (**)(atomic_uchar *volatile *, const WTF::String *))*v3 + 139))(v3, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v3 + 9), v5);
  return v4;
}

uint64_t WebKit::PluginView::shouldAllowNavigationFromDrags(WebKit::PluginView *this)
{
  return 1;
}

atomic_uchar *WebKit::PluginView::willDetachRenderer(atomic_uchar *this)
{
  if (this[137])
  {
    uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
    (*((void (**)(atomic_uchar *volatile *))*v1 + 116))(v1);
    BOOL v3 = (atomic_uchar *)*((void *)v1 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
  }
  return this;
}

uint64_t WebKit::PluginView::scrollableArea(WebKit::PluginView *this)
{
  if (*((unsigned char *)this + 137)) {
    return *((void *)this + 9);
  }
  else {
    return 0;
  }
}

uint64_t WebKit::PluginView::usesAsyncScrolling(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 83))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

uint64_t WebKit::PluginView::scrollingNodeID(WebKit::PluginView *this)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  uint64_t v2 = (*((uint64_t (**)(atomic_uchar *volatile *))*v1 + 37))(v1);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v1 + 9), v3);
  return v2;
}

atomic_uchar *WebKit::PluginView::willAttachScrollingNode(atomic_uchar *this)
{
  if (this[137])
  {
    uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
    (*((void (**)(atomic_uchar *volatile *))*v1 + 154))(v1);
    BOOL v3 = (atomic_uchar *)*((void *)v1 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
  }
  return this;
}

atomic_uchar *WebKit::PluginView::didAttachScrollingNode(atomic_uchar *this)
{
  if (this[137])
  {
    uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
    (*((void (**)(atomic_uchar *volatile *))*v1 + 155))(v1);
    BOOL v3 = (atomic_uchar *)*((void *)v1 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
  }
  return this;
}

atomic_uchar *WebKit::PluginView::liveResourceData@<X0>(atomic_uchar *this@<X0>, atomic_uint **a2@<X8>)
{
  if (this[137])
  {
    BOOL v3 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 9);
    (*((void (**)(atomic_uchar *volatile *))*v3 + 130))(v3);
    uint64_t v5 = (atomic_uchar *)*((void *)v3 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5, v4);
  }
  else if (*((_DWORD *)this + 48) == 2)
  {
    uint64_t v6 = (atomic_uint *)*((void *)this + 57);
    if (v6) {
      atomic_fetch_add(v6, 1u);
    }
    *a2 = v6;
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

uint64_t WebKit::PluginView::performDictionaryLookupAtLocation(WebKit::PluginView *this, const WebCore::FloatPoint *a2)
{
  if (!*((unsigned char *)this + 137)) {
    return 0;
  }
  BOOL v3 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 9);
  uint64_t v4 = (*((uint64_t (**)(atomic_uchar *volatile *, const WebCore::FloatPoint *))*v3 + 149))(v3, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v3 + 9), v5);
  return v4;
}

uint64_t WebKit::PluginView::notifyWidget(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  if (a2 != 1)
  {
    if (a2 || !*(unsigned char *)(result + 137)) {
      return result;
    }
    BOOL v3 = *(WebCore::LocalFrameView **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(result + 64) + 48)
                                                                         + 8)
                                                             + 544)
                                                 + 8)
                                     + 288);
    if (!v3) {
      goto LABEL_15;
    }
    ++*((_DWORD *)v3 + 2);
    uint64_t result = WebCore::LocalFrameView::paintBehavior(v3);
    int v4 = *((_DWORD *)v3 + 2) - 1;
    int v5 = result & 0x105;
    if ((result & 0x105) != 0)
    {
      if (*((_DWORD *)v3 + 2) != 1)
      {
        *((_DWORD *)v3 + 2) = v4;
        return result;
      }
    }
    else if (*((_DWORD *)v3 + 2) != 1)
    {
      *((_DWORD *)v3 + 2) = v4;
LABEL_15:
      uint64_t v6 = *(atomic_uchar *volatile **)(v2 + 72);
      WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v6 + 9);
      int v7 = (*((uint64_t (**)(atomic_uchar *volatile *))*v6 + 118))(v6);
      uint64_t result = (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v6 + 9), v8);
      if (v7)
      {
        int v9 = *(atomic_uchar *volatile **)(v2 + 72);
        WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v9 + 9);
        (*((void (**)(WTF **__return_ptr, atomic_uchar *volatile *))*v9 + 119))(&v14, v9);
        uint64_t v11 = v14;
        uint64_t v14 = 0;
        uint64_t v12 = *(void *)(v2 + 464);
        *(void *)(v2 + 464) = v11;
        if (v12)
        {
          WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(v12, v10);
          uint64_t v13 = v14;
          uint64_t v14 = 0;
          if (v13) {
            WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v13, v10);
          }
        }
        return (uint64_t)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v9 + 9), v10);
      }
      return result;
    }
    uint64_t result = (*(uint64_t (**)(WebCore::LocalFrameView *))(*(void *)v3 + 8))(v3);
    if (v5) {
      return result;
    }
    goto LABEL_15;
  }
  uint64_t result = *(void *)(result + 464);
  *(void *)(v2 + 464) = 0;
  if (result)
  {
    return WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

uint64_t WebKit::PluginView::show(WebKit::PluginView *this)
{
  if (*((unsigned char *)this + 24))
  {
    int v2 = *((unsigned __int8 *)this + 25);
    *((unsigned char *)this + 24) = 1;
    if (v2) {
      goto LABEL_6;
    }
  }
  else
  {
    *((unsigned char *)this + 24) = 1;
  }
  WebKit::PluginView::viewVisibilityDidChange((atomic_uchar *)this);
LABEL_6:

  return MEMORY[0x1F4172DF0](this);
}

uint64_t WebKit::PluginView::hide(WebKit::PluginView *this)
{
  if (*((unsigned char *)this + 24))
  {
    int v2 = *((unsigned __int8 *)this + 25);
    *((unsigned char *)this + 24) = 0;
    if (v2) {
      WebKit::PluginView::viewVisibilityDidChange((atomic_uchar *)this);
    }
  }
  else
  {
    *((unsigned char *)this + 24) = 0;
  }

  return MEMORY[0x1F4172DE8](this);
}

atomic_uchar *WebKit::PluginView::setParentVisible(atomic_uchar *this, int a2)
{
  if ((this[25] != 0) != a2)
  {
    this[25] = a2;
    return WebKit::PluginView::viewVisibilityDidChange(this);
  }
  return this;
}

uint64_t WebKit::PluginView::transformsAffectFrameRect(WebKit::PluginView *this)
{
  return 0;
}

uint64_t WebKit::PluginView::invalidateRect(WebKit::PluginView *this, const WebCore::IntRect *a2)
{
  uint64_t result = WebCore::Widget::parent(this);
  if (result)
  {
    if (*((unsigned char *)this + 137))
    {
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 9) + 936))(*((void *)this + 9));
      if ((result & 1) == 0)
      {
        int v5 = (_DWORD *)(*(void *)(*((void *)this + 8) + 72) & 0xFFFFFFFFFFFFLL);
        if (v5)
        {
          if ((*((unsigned char *)v5 + 45) & 2) != 0)
          {
            __break(0xC471u);
            goto LABEL_66;
          }
          if (*((unsigned char *)v5 + 46) != 7) {
            return result;
          }
          ++v5[4];
          int v6 = *(_DWORD *)a2;
          int v7 = *((_DWORD *)a2 + 1);
          uint64_t v8 = *((void *)a2 + 1);
          double v9 = WebCore::BorderData::borderLeftWidth((WebCore::BorderData *)(*(void *)(*((void *)v5 + 11) + 24)
                                                                          + 104))
             * 64.0;
          if (v9 >= 2147483650.0)
          {
            unsigned int v10 = 0x7FFFFFFF;
          }
          else if (v9 <= -2147483650.0)
          {
            unsigned int v10 = 0x80000000;
          }
          else
          {
            unsigned int v10 = (int)v9;
          }
          uint64_t v11 = *(unsigned __int8 **)(*((void *)v5 + 11) + 24);
          int v12 = v11[100];
          if ((v12 & 0xFFFFFFF7) == 3)
          {
            int v13 = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 1144))(v5);
            int v12 = v11[100];
            float v14 = (float)v13 * 0.015625;
          }
          else
          {
            float v14 = 0.0;
          }
          switch(v12)
          {
            case 3:
              float v16 = *((float *)v11 + 24);
              if (!v11[102]) {
                float v16 = (float)*((int *)v11 + 24);
              }
              float v15 = (float)(v14 * v16) / 100.0;
              break;
            case 11:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v11 + 96), v14);
              break;
            case 4:
              float v15 = *((float *)v11 + 24);
              if (!v11[102]) {
                float v15 = (float)SLODWORD(v15);
              }
              break;
            default:
              int v18 = 0;
              goto LABEL_31;
          }
          double v17 = v15 * 64.0;
          if (v17 >= 2147483650.0)
          {
            int v18 = 0x7FFFFFFF;
          }
          else if (v17 <= -2147483650.0)
          {
            int v18 = 0x80000000;
          }
          else
          {
            int v18 = (int)v17;
          }
LABEL_31:
          BOOL v19 = __OFADD__(v10, v18);
          int v20 = v10 + v18;
          unsigned int v21 = 0x7FFFFFFF;
          if (v19) {
            int v20 = (v10 >> 31) + 0x7FFFFFFF;
          }
          if (v20 >= 0) {
            int v22 = v20;
          }
          else {
            int v22 = v20 + 63;
          }
          double v23 = WebCore::BorderData::borderTopWidth((WebCore::BorderData *)(*(void *)(*((void *)v5 + 11) + 24)
                                                                          + 104))
              * 64.0;
          if (v23 < 2147483650.0)
          {
            if (v23 <= -2147483650.0) {
              unsigned int v21 = 0x80000000;
            }
            else {
              unsigned int v21 = (int)v23;
            }
          }
          int v24 = *(unsigned __int8 **)(*((void *)v5 + 11) + 24);
          int v25 = v24[76];
          if ((v25 & 0xFFFFFFF7) == 3)
          {
            int v26 = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 1144))(v5);
            int v25 = v24[76];
            float v27 = (float)v26 * 0.015625;
          }
          else
          {
            float v27 = 0.0;
          }
          int v28 = v22 >> 6;
          switch(v25)
          {
            case 3:
              float v30 = *((float *)v24 + 18);
              if (!v24[78]) {
                float v30 = (float)*((int *)v24 + 18);
              }
              float v29 = (float)(v27 * v30) / 100.0;
              break;
            case 11:
              WebCore::Length::nonNanCalculatedValue((WebCore::Length *)(v24 + 72), v27);
              break;
            case 4:
              float v29 = *((float *)v24 + 18);
              if (!v24[78]) {
                float v29 = (float)SLODWORD(v29);
              }
              break;
            default:
              int v32 = 0;
              goto LABEL_59;
          }
          double v31 = v29 * 64.0;
          if (v31 >= 2147483650.0)
          {
            int v32 = 0x7FFFFFFF;
          }
          else if (v31 <= -2147483650.0)
          {
            int v32 = 0x80000000;
          }
          else
          {
            int v32 = (int)v31;
          }
LABEL_59:
          BOOL v19 = __OFADD__(v21, v32);
          int v33 = v21 + v32;
          if (v19) {
            int v33 = (v21 >> 31) + 0x7FFFFFFF;
          }
          v34.i32[0] = v28 + v6;
          v34.i32[1] = v7 + v33 / 64;
          v34.i64[1] = v8;
          v35.i64[0] = 0xFE000000FE000000;
          v35.i64[1] = 0xFE000000FE000000;
          int8x16_t v36 = (int8x16_t)vcgtq_s32(v34, v35);
          v37.i64[0] = 0xFE000000FE000000;
          v37.i64[1] = 0xFE000000FE000000;
          v38.i64[0] = 0x8000000080000000;
          v38.i64[1] = 0x8000000080000000;
          int8x16_t v40 = vorrq_s8((int8x16_t)(*(_OWORD *)&v36 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v37, v34), v38, (int8x16_t)vshlq_n_s32(v34, 6uLL)), v36));
          uint64_t result = WebCore::RenderObject::repaintRectangle((WebCore::RenderObject *)v5, (const WebCore::LayoutRect *)&v40);
          int v39 = v5[4];
          if (v39)
          {
            v5[4] = v39 - 1;
            return result;
          }
          __break(0xC471u);
LABEL_66:
          JUMPOUT(0x19918D700);
        }
      }
    }
  }
  return result;
}

atomic_uchar *WebKit::PluginView::releaseMemory(WebKit::PluginView *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(atomic_uchar *volatile *))*v1 + 153))(v1);
  BOOL v3 = (atomic_uchar *)*((void *)v1 + 9);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
}

float WebKit::PluginView::pdfDocumentSizeForPrinting(WebKit::PluginView *this)
{
  uint64_t v1 = *((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v1 + 72));
  float v3 = WebKit::PDFPluginBase::pdfDocumentSizeForPrinting((id *)v1);
  if (v1) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*(atomic_uchar **)(v1 + 72), v2);
  }
  return v3;
}

uint64_t WebKit::PluginView::accessibilityHitTest(WebKit::PluginView *this, const WebCore::IntPoint *a2)
{
  float v3 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 9);
  uint64_t v4 = (*((uint64_t (**)(atomic_uchar *volatile *, const WebCore::IntPoint *))*v3 + 151))(v3, a2);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v3 + 9), v5);
  return v4;
}

atomic_uchar *WebKit::PluginView::didChangeSettings(WebKit::PluginView *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(atomic_uchar *volatile *))*v1 + 156))(v1);
  float v3 = (atomic_uchar *)*((void *)v1 + 9);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
}

atomic_uchar *WebKit::PluginView::windowActivityDidChange(WebKit::PluginView *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(atomic_uchar *volatile *))*v1 + 165))(v1);
  float v3 = (atomic_uchar *)*((void *)v1 + 9);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
}

atomic_uchar *WebKit::PluginView::didChangeIsInWindow(WebKit::PluginView *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(atomic_uchar *volatile *))*v1 + 166))(v1);
  float v3 = (atomic_uchar *)*((void *)v1 + 9);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
}

atomic_uchar *WebKit::PluginView::didSameDocumentNavigationForFrame(atomic_uchar *this, WebKit::WebFrame *a2)
{
  if (this[137])
  {
    float v3 = (atomic_uchar *volatile *)*((void *)this + 9);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 9);
    (*((void (**)(atomic_uchar *volatile *, WebKit::WebFrame *))*v3 + 167))(v3, a2);
    int v5 = (atomic_uchar *)*((void *)v3 + 9);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5, v4);
  }
  return this;
}

uint64_t WebKit::PluginView::sendEditingCommandToPDFForTesting(WebKit::PluginView *this, const WTF::String *a2, const WTF::String *a3)
{
  int v5 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v5 + 9);
  uint64_t v6 = (*((uint64_t (**)(atomic_uchar *volatile *, const WTF::String *, const WTF::String *))*v5 + 138))(v5, a2, a3);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(*((atomic_uchar **)v5 + 9), v7);
  return v6;
}

atomic_uchar *WebKit::PluginView::setPDFDisplayModeForTesting(WebKit::PluginView *this, const WTF::String *a2)
{
  float v3 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v3 + 9);
  (*((void (**)(atomic_uchar *volatile *, const WTF::String *))*v3 + 163))(v3, a2);
  int v5 = (atomic_uchar *)*((void *)v3 + 9);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v5, v4);
}

atomic_uchar *WebKit::PluginView::pdfAnnotationRectsForTesting(WebKit::PluginView *this)
{
  uint64_t v1 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v1 + 9);
  (*((void (**)(atomic_uchar *volatile *))*v1 + 161))(v1);
  float v3 = (atomic_uchar *)*((void *)v1 + 9);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v3, v2);
}

atomic_uchar *WebKit::PluginView::setPDFTextAnnotationValueForTesting(WebKit::PluginView *this, uint64_t a2, uint64_t a3, const WTF::String *a4)
{
  int v7 = (atomic_uchar *volatile *)*((void *)this + 9);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(v7 + 9);
  (*((void (**)(atomic_uchar *volatile *, uint64_t, uint64_t, const WTF::String *))*v7 + 162))(v7, a2, a3, a4);
  double v9 = (atomic_uchar *)*((void *)v7 + 9);

  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v9, v8);
}

atomic_uchar *WebKit::PluginView::registerPDFTestCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 72);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v3 + 72));
  uint64_t result = (atomic_uchar *)WebKit::PDFPluginBase::registerPDFTest(v3, a2);
  if (v3)
  {
    uint64_t v6 = *(atomic_uchar **)(v3 + 72);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebKit::PDFPluginBase,(WTF::DestructionThread)0>(v6, v5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPluginInfoProvider::pluginInfo@<X0>(uint64_t a1@<X1>, WTF::StringImpl *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 112);
  return WebKit::pluginInfoVector(a2, *(WebCore::Page **)(v3 + 664), *(void *)(v3 + 672), *(void *)(v3 + 680), *(void *)(v3 + 688), *(void *)(v3 + 696), *(void *)(v3 + 704), *(void *)(v3 + 712), *(void *)(v3 + 720));
}

WTF::StringImpl *WebKit::pluginInfoVector(WTF::StringImpl *this, WebCore::Page *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v9 = (uint64_t *)this;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if ((a9 & 0x10000000000800) != 0)
  {
    WebKit::PDFPluginBase::pluginInfo((uint64_t)&v15);
    WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v9, (uint64_t)&v15, 1uLL);
    uint64_t v11 = v19;
    BOOL v19 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2) {
        WTF::StringImpl::destroy(v11, v10);
      }
      else {
        *(_DWORD *)v11 -= 2;
      }
    }
    WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v18, v10);
    int v13 = v17;
    double v17 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    float v14 = v16;
    float v16 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    this = v15;
    float v15 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v12);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  return this;
}

WTF::StringImpl *WebKit::WebPluginInfoProvider::webVisiblePluginInfo@<X0>(WebCore::Page *a1@<X1>, WTF::StringImpl *a2@<X8>)
{
  uint64_t v5 = *((void *)a1 + 14);
  return WebKit::pluginInfoVector(a2, *(WebCore::Page **)(v5 + 664), *(void *)(v5 + 672), *(void *)(v5 + 680), *(void *)(v5 + 688), *(void *)(v5 + 696), *(void *)(v5 + 704), *(void *)(v5 + 712), *(void *)(v5 + 720));
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::SpeechRecognitionRealtimeMediaSourceManager(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1EE9F2FF0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_1EE9F3038;
  uint64_t v3 = *a2;
  *a2 = 0;
  *(void *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  char v7 = -112;
  WTF::HashMap<IPC::ReceiverName,WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::IntHash<IPC::ReceiverName>,WTF::StrongEnumHashTraits<IPC::ReceiverName>,WTF::HashTraits<WTF::WeakPtr<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::inlineSet<IPC::ReceiverName const&,IPC::MessageReceiver&>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 48), &v7, a1, &v6);
  return a1;
}

void WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(WebKit::WebProcess::singleton(void)::process + 48), this);
  uint64_t v3 = (const char ***)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v3);
  }
  uint64_t v4 = (const char ***)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v4);
  }
  uint64_t v5 = (const char ***)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v5) {
    WTF::RefCounted<WebKit::SandboxExtension>::deref(v5);
  }
  uint64_t v6 = *((void *)this + 4);
  if (v6) {
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(v6, v2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 3);
  *(void *)this = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, v7);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::SpeechRecognitionRealtimeMediaSourceManager::~SpeechRecognitionRealtimeMediaSourceManager((WebKit::SpeechRecognitionRealtimeMediaSourceManager *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::createSource(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  WebCore::SpeechRecognitionCaptureSource::createRealtimeMediaSource();
  if (v33)
  {
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)buf, *(atomic_uchar *volatile **)(a1 + 24));
    uint64_t v4 = (WebCore::RealtimeMediaSourceObserver *)WTF::fastMalloc((WTF *)0x98);
    uint64_t v5 = WebCore::RealtimeMediaSourceObserver::RealtimeMediaSourceObserver(v4);
    *(_DWORD *)(v5 + 24) = 0;
    *(void *)uint64_t v5 = &unk_1EE9F38D8;
    *(void *)(v5 + 16) = &unk_1EE9F3960;
    *(void *)(v5 + ++*(_DWORD *)(this + 32) = a2;
    *(void *)(v5 + 40) = v33;
    uint64_t v6 = *(IPC::Encoder **)buf;
    *(void *)buf = 0;
    *(void *)(v5 + 48) = v6;
    *(void *)(v5 + 56) = 0;
    *(unsigned char *)(v5 + 64) = 0;
    *(unsigned char *)(v5 + 144) = 0;
    WebCore::RealtimeMediaSource::addObserver(v33, v4);
    WebCore::RealtimeMediaSource::addAudioSampleObserver();
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v8 = (uint64_t *)(a1 + 32);
    uint64_t v7 = v9;
    if (v9
      || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v8, 0), (uint64_t v7 = *v8) != 0))
    {
      int v10 = *(_DWORD *)(v7 - 8);
    }
    else
    {
      int v10 = 0;
    }
    unint64_t v11 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    unint64_t v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    unsigned int v14 = v10 & ((v13 >> 31) ^ v13);
    float v15 = (uint64_t *)(v7 + 16 * v14);
    uint64_t v16 = *v15;
    if (*v15)
    {
      double v17 = 0;
      int v18 = 1;
      do
      {
        if (v16 == a2)
        {
          (*(void (**)(WebCore::RealtimeMediaSourceObserver *))(*(void *)v4 + 8))(v4);
          goto LABEL_29;
        }
        if (v16 == -1) {
          double v17 = v15;
        }
        unsigned int v14 = (v14 + v18) & v10;
        float v15 = (uint64_t *)(v7 + 16 * v14);
        uint64_t v16 = *v15;
        ++v18;
      }
      while (*v15);
      if (v17)
      {
        uint64_t *v17 = 0;
        v17[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        float v15 = v17;
      }
    }
    uint64_t v19 = v15[1];
    *float v15 = a2;
    v15[1] = (uint64_t)v4;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t v20 = *v8;
    if (*v8) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v28 = *v8;
    if (*v8) {
      int v29 = *(_DWORD *)(v28 - 12);
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = (*(_DWORD *)(v28 - 16) + v29);
    unint64_t v31 = *(unsigned int *)(v28 - 4);
    if (v31 > 0x400)
    {
      if (v31 > 2 * v30) {
        goto LABEL_29;
      }
    }
    else if (3 * v31 > 4 * v30)
    {
LABEL_29:
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)buf);
      goto LABEL_30;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v8, v15);
    goto LABEL_29;
  }
  int v22 = qword_1EB358078;
  if (os_log_type_enabled((os_log_t)qword_1EB358078, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_1985F2000, v22, OS_LOG_TYPE_ERROR, "Failed to create realtime source", buf, 2u);
  }
  double v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)double v23 = 1484;
  *((void *)v23 + 1) = 0;
  *((void *)v23 + 66) = (char *)v23 + 16;
  *((void *)v23 + 67) = 512;
  *((void *)v23 + 68) = 0;
  *((void *)v23 + 70) = 0;
  *((void *)v23 + 69) = 0;
  IPC::Encoder::encodeHeader(v23);
  *(void *)buf = v23;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v35);
  (*(void (**)(uint64_t, uint8_t *, void))(*(void *)(a1 + 16) + 32))(a1 + 16, buf, 0);
  int v25 = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (v25)
  {
    IPC::Encoder::~Encoder(v25, v24);
    WTF::fastFree(v26, v27);
  }
LABEL_30:
  if (v34)
  {
    if (*(_DWORD *)v34 == 2) {
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v24);
    }
    else {
      *(_DWORD *)v34 -= 2;
    }
  }
  return 0;
}

uint64_t *WebKit::SpeechRecognitionRealtimeMediaSourceManager::deleteSource(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = (uint64_t *)(a1 + 32);
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v7);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v5 + 16 * *(unsigned int *)(v5 - 4));
    if (v6 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v6 = 0;
  }
  if (v6 != result) {
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(v3, result);
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::start(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v3);
  if (result) {
    return WebCore::RealtimeMediaSource::start(*(WebCore::RealtimeMediaSource **)(result + 40));
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::stop(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::RemoteCDMInstanceProxy>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::RemoteCDMInstanceProxy>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::RemoteCDMInstanceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>((uint64_t *)(a1 + 32), &v3);
  if (result) {
    return WebCore::RealtimeMediaSource::stop(*(WebCore::RealtimeMediaSource **)(result + 40));
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return *((void *)this + 3);
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderConnection(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return *((void *)this + 1);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::messageSenderDestinationID(WebKit::SpeechRecognitionRealtimeMediaSourceManager *this)
{
  return 0;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::RemoteWorkerFrameLoaderClient(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE9F3088;
  *(void *)(a1 + 8) = a2;
  uint64_t v7 = *a4;
  if (*a4) {
    *v7 += 2;
  }
  *(void *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  uint64_t v8 = qword_1EB358870;
  if (os_log_type_enabled((os_log_t)qword_1EB358870, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 134218240;
    uint64_t v11 = a2;
    __int16 v12 = 2048;
    uint64_t v13 = a3;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "RemoteWorkerFrameLoaderClient::RemoteWorkerFrameLoaderClient webPageProxyID %llu, pageID %llu", (uint8_t *)&v10, 0x16u);
  }
  return a1;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::createDocumentLoader@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = WTF::fastMalloc((WTF *)0xDF0);
  uint64_t result = MEMORY[0x1997319E0](v6, a1, a2);
  *a3 = result;
  return result;
}

void WebKit::WebSWClientConnection::~WebSWClientConnection(unsigned int **this)
{
  WebCore::SWClientConnection::clearPendingJobs((WebCore::SWClientConnection *)this);
  uint64_t v3 = this[13];
  if (v3)
  {
    uint64_t v4 = *(v3 - 1);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(v3 + 2);
      do
      {
        if (*(v5 - 1) != -1)
        {
          uint64_t v6 = *v5;
          uint64_t *v5 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 4), v2);
  }
  uint64_t v7 = this[8];
  uint64_t v8 = this[9];
  uint64_t v9 = (WTF *)this[10];
  if (v7 > v8)
  {
    float v15 = this[10];
    if (v8)
    {
      uint64_t v17 = 8 * (void)v8;
      do
      {
        uint64_t v18 = *(void *)v15;
        *(void *)float v15 = 0;
        if (v18) {
          (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
        }
        v15 += 2;
        v17 -= 8;
      }
      while (v17);
      float v15 = this[10];
      uint64_t v7 = this[8];
    }
    uint64_t v16 = (unsigned int *)*((unsigned int *)this + 22);
    if (v7 != v16)
    {
      uint64_t v19 = &v15[2 * (void)v7];
      uint64_t v20 = 8 * (void)v16 - 8 * (void)v7;
      do
      {
        uint64_t v21 = *(void *)v19;
        *(void *)uint64_t v19 = 0;
        if (v21) {
          (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
        }
        v19 += 2;
        v20 -= 8;
      }
      while (v20);
    }
LABEL_26:
    uint64_t v9 = (WTF *)this[10];
    if (!v9) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
  if (v7 != v8)
  {
    __int16 v12 = (uint64_t *)((char *)v9 + 8 * (void)v7);
    uint64_t v13 = 8 * (void)v8 - 8 * (void)v7;
    do
    {
      uint64_t v14 = *v12;
      *__int16 v12 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
    goto LABEL_26;
  }
  if (!v9) {
    goto LABEL_13;
  }
LABEL_27:
  this[10] = 0;
  *((_DWORD *)this + 22) = 0;
  WTF::fastFree(v9, v2);
LABEL_13:
  int v10 = (WTF *)this[7];
  this[7] = 0;
  if (v10)
  {
    uint64_t v11 = *(unsigned int **)v10;
    *(void *)int v10 = 0;
    if (v11) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v11);
    }
    WTF::fastFree(v10, v2);
  }
  this[4] = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 5, v2);

  MEMORY[0x1F416F420](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSWClientConnection::~WebSWClientConnection(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebSWClientConnection::~WebSWClientConnection(unsigned int **this)
{
}

{
  WebKit::WebSWClientConnection::~WebSWClientConnection(this - 4);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3);

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSWClientConnection::~WebSWClientConnection(this - 4);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSWClientConnection::messageSenderConnection(WebKit::WebSWClientConnection *this)
{
  {
    int v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

void WebKit::WebSWClientConnection::scheduleJobInServer(WebKit::WebSWClientConnection *this, const WebCore::ServiceWorkerJobData *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  float v27 = this;
  uint64_t v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  uint64_t v28 = v4;
  long long v29 = *(_OWORD *)((char *)a2 + 8);
  long long v30 = *(_OWORD *)((char *)a2 + 24);
  uint64_t v5 = (_DWORD *)*((void *)a2 + 5);
  if (v5) {
    *v5 += 2;
  }
  unint64_t v31 = v5;
  long long v6 = *((_OWORD *)a2 + 4);
  long long v32 = *((_OWORD *)a2 + 3);
  long long v33 = v6;
  v34[0] = 0;
  int v35 = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v34, (uint64_t)a2 + 80);
  uint64_t v7 = (_DWORD *)*((void *)a2 + 14);
  if (v7) {
    *v7 += 2;
  }
  int8x16_t v36 = v7;
  long long v37 = *(_OWORD *)((char *)a2 + 120);
  long long v38 = *(_OWORD *)((char *)a2 + 136);
  long long v8 = *((_OWORD *)a2 + 11);
  long long v39 = *((_OWORD *)a2 + 10);
  long long v40 = v8;
  long long v41 = *((_OWORD *)a2 + 12);
  __int16 v42 = *((_WORD *)a2 + 104);
  uint64_t v9 = (_DWORD *)*((void *)a2 + 27);
  if (v9) {
    *v9 += 2;
  }
  char v43 = v9;
  char v44 = *((unsigned char *)a2 + 224);
  LOBYTE(v45) = 0;
  char v47 = 0;
  if (*((unsigned char *)a2 + 248))
  {
    int v10 = (_DWORD *)*((void *)a2 + 29);
    if (v10) {
      *v10 += 2;
    }
    uint64_t v45 = v10;
    __int16 v46 = *((_WORD *)a2 + 120);
    char v47 = 1;
  }
  long long v48 = *((_OWORD *)a2 + 16);
  uint64_t v11 = WTF::fastMalloc((WTF *)0x130);
  uint64_t v12 = v11;
  *(void *)uint64_t v11 = &unk_1EE9F3CF8;
  *(void *)(v11 + 16) = v27;
  uint64_t v13 = v28;
  if (v28) {
    *v28 += 2;
  }
  *(void *)(v11 + ++*(_DWORD *)(this + 32) = v13;
  long long v14 = v30;
  *(_OWORD *)(v11 + 40) = v29;
  *(_OWORD *)(v11 + 56) = v14;
  float v15 = v31;
  if (v31) {
    *v31 += 2;
  }
  *(unsigned char *)(v11 + 112) = 0;
  *(void *)(v11 + 72) = v15;
  long long v16 = v33;
  *(_OWORD *)(v11 + 80) = v32;
  *(_OWORD *)(v11 + 96) = v16;
  *(_DWORD *)(v11 + 136) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>(v11 + 112, (uint64_t)v34);
  uint64_t v17 = v36;
  if (v36) {
    *v36 += 2;
  }
  *(void *)(v12 + 144) = v17;
  long long v18 = v38;
  *(_OWORD *)(v12 + 152) = v37;
  *(_OWORD *)(v12 + 168) = v18;
  __int16 v19 = v42;
  long long v21 = v40;
  long long v20 = v41;
  *(_OWORD *)(v12 + 192) = v39;
  *(_OWORD *)(v12 + 208) = v21;
  *(_OWORD *)(v12 + 224) = v20;
  *(_WORD *)(v12 + 240) = v19;
  int v22 = v43;
  if (v43) {
    *v43 += 2;
  }
  *(void *)(v12 + 248) = v22;
  *(unsigned char *)(v12 + 256) = v44;
  *(unsigned char *)(v12 + 264) = 0;
  *(unsigned char *)(v12 + 280) = 0;
  if (v47)
  {
    double v23 = v45;
    if (v45) {
      *v45 += 2;
    }
    *(void *)(v12 + 264) = v23;
    *(_WORD *)(v12 + 272) = v46;
    *(unsigned char *)(v12 + 280) = 1;
  }
  *(_OWORD *)(v12 + 288) = v48;
  uint64_t v26 = v12;
  WebKit::WebSWClientConnection::runOrDelayTaskForImport((uint64_t)this, &v26);
  uint64_t v25 = v26;
  uint64_t v26 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)&v28, v24);
}

uint64_t WebKit::WebSWClientConnection::runOrDelayTaskForImport(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(*(void *)(a1 + 56) + 24)) {
    return (*(uint64_t (**)(void))(*(void *)*a2 + 16))();
  }
  else {
    return WTF::Deque<WTF::Function<void ()(void)>,0ul>::append<WTF::Function<void ()(void)>>(a1 + 64, a2);
  }
}

IPC::Encoder *WebKit::WebSWClientConnection::finishFetchingScriptInServer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = a1 + 24;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2775;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  long long v14 = v9;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, a2 + 1);
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode(v9, a3);
  IPC::ArgumentCoder<WebCore::WorkerFetchResult,void>::encode(v9, a4);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v14, 0);
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::addServiceWorkerRegistrationInServer(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a2;
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  uint64_t v14 = a2;
  int v15 = 0;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,unsigned int,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 648), &v14, &v15, (uint64_t)v13);
  ++*((_DWORD *)v13[0] + 2);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  long long v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v6 = 2768;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  v13[0] = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v12);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, v13, 0);
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

WTF::RunLoop *WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(uint64_t a1, uint64_t a2)
{
  {
    long long v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  uint64_t result = (WTF::RunLoop *)WebKit::WebProcess::removeServiceWorkerRegistration(WebKit::WebProcess::singleton(void)::process, a2);
  if (result)
  {
    WTF::RunLoop::main(result);
    ++*(_DWORD *)(a1 + 8);
    uint64_t v5 = (WTF::RunLoop *)WTF::fastMalloc((WTF *)0x18);
    *(void *)uint64_t v5 = &unk_1EE9F3D20;
    *((void *)v5 + 1) = a2;
    *((void *)v5 + 2) = a1;
    uint64_t v7 = v5;
    WTF::RunLoop::dispatch();
    uint64_t result = v7;
    if (v7) {
      return (WTF::RunLoop *)(*(uint64_t (**)(WTF::RunLoop *))(*(void *)v7 + 8))(v7);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v19 = a2;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v7 = *a4;
  *a4 = 0;
  uint64_t v8 = a1[3];
  a1 += 3;
  uint64_t v9 = (*(uint64_t (**)(void *))(v8 + 56))(a1);
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 2790;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  long long v21 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, &IdentifierInternal);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, &v19);
  LOBYTE(v20[0]) = *(_DWORD *)(a3 + 32);
  IPC::Encoder::operator<<<BOOL>(v10, (char *)v20);
  IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&>(v10, a3, LOBYTE(v20[0]));
  uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v11 = &unk_1EE9F3D48;
  v11[1] = v7;
  uint64_t v12 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v20[0] = v11;
  v20[1] = v12;
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*a1 + 40))(a1, &v21, v20, 0);
  uint64_t v14 = v20[0];
  v20[0] = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t result = v21;
  long long v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v16, v17);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::postMessageToServiceWorker(WebKit::WebMessagePortChannelProvider *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = a1;
  uint64_t v20 = a2;
  uint64_t v7 = a3 + 8;
  uint64_t v8 = *(uint64_t **)(a3 + 8);
  uint64_t v9 = *(unsigned int *)(a3 + 20);
  if (v9)
  {
    uint64_t v10 = 32 * v9;
    do
    {
      uint64_t v11 = WebKit::WebMessagePortChannelProvider::singleton(a1);
      a1 = (WebKit::WebMessagePortChannelProvider *)WebKit::WebMessagePortChannelProvider::messagePortSentToRemote((uint64_t)v11, v8);
      v8 += 4;
      v10 -= 32;
    }
    while (v10);
  }
  uint64_t v13 = *((void *)v6 + 3);
  uint64_t v12 = (char *)v6 + 24;
  uint64_t v14 = (*(uint64_t (**)(char *))(v13 + 56))(v12);
  int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v15 = 2783;
  *((void *)v15 + 1) = v14;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 70) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  long long v21 = v15;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v20);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(v15, (uint64_t *)a3);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v15, v7);
  unsigned __int8 v22 = *(_DWORD *)(a4 + 32);
  IPC::Encoder::operator<<<BOOL>(v15, (char *)&v22);
  IPC::ArgumentCoder<std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>> const&>(v15, a4, v22);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v12 + 32))(v12, &v21, 0);
  uint64_t result = v21;
  long long v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::registerServiceWorkerClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = a1 + 24;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2784;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 70) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  long long v16 = v11;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v11, a2);
  IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::encode(v11, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v11, a4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a5);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v16, 0);
  uint64_t result = v16;
  long long v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::unregisterServiceWorkerClient(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2797;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v5, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::didResolveRegistrationPromise(WebKit::WebSWClientConnection *this, const WebCore::ServiceWorkerRegistrationKey *a2)
{
  uint64_t v3 = (char *)this + 24;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 56))((char *)this + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2772;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ServiceWorkerRegistrationKey,void>::encode(v5, (uint64_t)a2);
  (*(void (**)(char *, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

BOOL WebKit::WebSWClientConnection::mayHaveServiceWorkerRegisteredForOrigin(WebKit::WebSWClientConnection *this, const WebCore::SecurityOriginData *a2)
{
  int v2 = (WebKit::WebSWOriginTable *)*((void *)this + 7);
  return !*((unsigned char *)v2 + 24) || WebKit::WebSWOriginTable::contains(v2, a2);
}

BOOL WebKit::WebSWOriginTable::contains(WebKit::WebSWOriginTable *this, const WebCore::SecurityOriginData *a2)
{
  WebCore::SecurityOriginData::toString((uint64_t *)&v10, a2);
  unsigned int v4 = WebCore::computeSharedStringHash((WebCore *)&v10, v3);
  Slot = (_DWORD *)WebKit::SharedStringHashTableReadOnly::findSlot(this, v4);
  if (Slot) {
    BOOL v7 = *Slot != 0;
  }
  else {
    BOOL v7 = 0;
  }
  uint64_t v8 = v10;
  uint64_t v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v7;
}

unsigned int *WebKit::WebSWClientConnection::setSWOriginTableSharedMemory(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  uint64_t result = (unsigned int *)WebCore::SharedMemory::map();
  if (v4)
  {
    uint64_t v3 = v4;
    unsigned int v4 = 0;
    WebKit::SharedStringHashTableReadOnly::setSharedMemory(v1, &v3);
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v3);
    }
    uint64_t result = v4;
    unsigned int v4 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

uint64_t WTF::Deque<WTF::Function<void ()(void)>,0ul>::takeFirst(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2 == a2[1])
  {
    uint64_t result = 80;
    __break(0xC471u);
  }
  else
  {
    uint64_t v4 = a2[2];
    uint64_t v5 = *(void *)(v4 + 8 * v2);
    *(void *)(v4 + 8 * v2) = 0;
    *a1 = v5;
    uint64_t v6 = a2[2];
    uint64_t result = *(void *)(v6 + 8 * v2);
    *(void *)(v6 + 8 * v2) = 0;
    if (result)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      uint64_t v2 = *a2;
    }
    if (v2 == *((unsigned int *)a2 + 6) - 1) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = v2 + 1;
    }
    *a2 = v8;
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWClientConnection::matchRegistration(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(WebKit::WebSWOriginTable **)(a1 + 56);
  if (!*((unsigned char *)v8 + 24) || WebKit::WebSWOriginTable::contains(v8, a2))
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    v21[0] = a1;
    v21[1] = v12;
    v22[0] = 0;
    int v25 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v22, (uint64_t)a2);
    uint64_t v13 = *(_DWORD **)a3;
    if (*(void *)a3) {
      *v13 += 2;
    }
    uint64_t v26 = v13;
    long long v27 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)uint64_t v28 = *(_OWORD *)(a3 + 24);
    WTF::Function<void ()(void)>::Function<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>(&v20, v21);
    WebKit::WebSWClientConnection::runOrDelayTaskForImport(a1, &v20);
    uint64_t v15 = v20;
    uint64_t v20 = 0;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    return (WTF::StringImpl *)WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WebCore::SecurityOriginData &&::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0::~$_0((uint64_t)v21, v14);
  }
  else
  {
    LOBYTE(v21[0]) = 0;
    char v32 = 0;
    uint64_t v9 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, v21);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (v32)
    {
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v31, v11);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v16);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v17);
      uint64_t v19 = v28[1];
      v28[1] = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t result = v24;
      int v24 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v18);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v23 != -1) {
        return (WTF::StringImpl *)((uint64_t (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v23])(&v20, v21);
      }
    }
  }
  return result;
}

uint64_t *WTF::Function<void ()(void)>::Function<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = WTF::fastMalloc((WTF *)0x60);
  uint64_t v5 = *a2;
  *(void *)uint64_t v4 = &unk_1EE9F3D90;
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = a2[1];
  a2[1] = 0;
  *(void *)(v4 + 16) = v6;
  *(unsigned char *)(v4 + 24) = 0;
  *(_DWORD *)(v4 + 48) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v4 + 24, (uint64_t)(a2 + 2));
  BOOL v7 = (_DWORD *)a2[6];
  if (v7) {
    *v7 += 2;
  }
  *(void *)(v4 + 56) = v7;
  long long v8 = *(_OWORD *)(a2 + 9);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(v4 + 80) = v8;
  *a1 = v4;
  return a1;
}

uint64_t WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WebCore::SecurityOriginData &&::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0::~$_0(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v4])(&v7, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

IPC::Encoder *WebKit::WebSWClientConnection::whenRegistrationReady(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = a1 + 24;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2799;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 70) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v17 = v9;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v9, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F3DE0;
  v10[1] = v6;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v7 + 40))(v7, &v17, v16, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

unsigned int *WebKit::WebSWClientConnection::setServiceWorkerClientIsControlled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (WebCore::DocumentLoader::fromScriptExecutionContextIdentifier())
  {
    uint64_t v6 = WebCore::DocumentLoader::setControllingServiceWorkerRegistration();
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v6);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  WebCore::WorkerScriptLoader::serviceWorkerDataManagerFromIdentifier();
  if (!v10)
  {
LABEL_8:
    uint64_t v7 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, void))(*(void *)v7 + 16))(v7, 0);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (!*(unsigned char *)(a3 + 344))
  {
    WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(v10);
    goto LABEL_8;
  }
  WebCore::WorkerScriptLoader::ServiceWorkerDataManager::setData();
  uint64_t v8 = *a4;
  *a4 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, 1);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  return WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(v10);
}

uint64_t WebKit::WebSWClientConnection::getRegistrations(uint64_t a1, WebCore::SecurityOriginData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(WebKit::WebSWOriginTable **)(a1 + 56);
  if (*((unsigned char *)v8 + 24) && !WebKit::WebSWOriginTable::contains(v8, a2))
  {
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v18 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 16))(v18, &v23);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    return WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v23, v19);
  }
  else
  {
    uint64_t v9 = *a4;
    *a4 = 0;
    uint64_t v23 = a1;
    uint64_t v24 = v9;
    v25[0] = 0;
    int v26 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v25, (uint64_t)a2);
    uint64_t v10 = *(WTF::StringImpl **)a3;
    if (*(void *)a3) {
      *(_DWORD *)v10 += 2;
    }
    long long v27 = v10;
    long long v28 = *(_OWORD *)(a3 + 8);
    long long v29 = *(_OWORD *)(a3 + 24);
    uint64_t v11 = WTF::fastMalloc((WTF *)0x60);
    *(void *)uint64_t v11 = &unk_1EE9F3E30;
    *(void *)(v11 + 8) = v23;
    uint64_t v12 = v24;
    uint64_t v24 = 0;
    *(void *)(v11 + 16) = v12;
    *(unsigned char *)(v11 + 24) = 0;
    *(_DWORD *)(v11 + 48) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v11 + 24, (uint64_t)v25);
    uint64_t v13 = v27;
    if (v27) {
      *(_DWORD *)v27 += 2;
    }
    *(void *)(v11 + 56) = v13;
    long long v14 = v29;
    *(_OWORD *)(v11 + 64) = v28;
    *(_OWORD *)(v11 + 80) = v14;
    uint64_t v21 = v11;
    WebKit::WebSWClientConnection::runOrDelayTaskForImport(a1, &v21);
    uint64_t v16 = v21;
    uint64_t v21 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = v27;
    long long v27 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v26 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v26])(&v22, v25);
    }
    int v26 = -1;
    uint64_t result = v24;
    uint64_t v24 = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::whenServiceWorkerIsTerminatedForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = a2;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2800;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v17 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v15);
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9F3EA8;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v16[0] = v8;
  v16[1] = v9;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v17, v16, 0);
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::storeRegistrationsOnDiskForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2794;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 70) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v14 = v5;
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F3ED0;
  v7[1] = v6;
  v13[0] = v7;
  v13[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v3 + 40))(v3, &v14, v13, 0);
  uint64_t v9 = v13[0];
  v13[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v14;
  long long v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::subscribeToPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = a2;
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2795;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v16);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v8, *(const void **)a3, *(unsigned int *)(a3 + 12));
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F3EF8;
  v9[1] = v5;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v9;
  v17[1] = v10;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v18, v17, 0);
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::unsubscribeFromPushService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v15 = a3;
  uint64_t v16 = a2;
  uint64_t v4 = *a4;
  *a4 = 0;
  uint64_t v5 = a1 + 24;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2798;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 70) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v18 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v16);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, &v15);
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9F3F40;
  v8[1] = v4;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v8;
  v17[1] = v9;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v5 + 40))(v5, &v18, v17, 0);
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getPushSubscription(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2779;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v14);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F3F68;
  v7[1] = v3;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v7;
  v15[1] = v8;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v16, v15, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getPushPermissionState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2778;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v14);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F3FB0;
  v7[1] = v3;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v7;
  v15[1] = v8;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v16, v15, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getNotifications(WebCore::DeprecatedGlobalSettings *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(a1))
  {
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v10 = *((void *)a1 + 3);
    uint64_t v9 = (void *)((char *)a1 + 24);
    uint64_t v11 = (*(uint64_t (**)(void *))(v10 + 56))(v9);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 2777;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 68) = 0;
    *((void *)v12 + 70) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    long long v27 = v12;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a3);
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v13 = &unk_1EE9F4008;
    v13[1] = v8;
    int v25 = v13;
    uint64_t v26 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    (*(void (**)(void *, IPC::Encoder **, void **, void))(*v9 + 40))(v9, &v27, &v25, 0);
  }
  else
  {
    {
      uint64_t v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v24);
    }
    uint64_t v15 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);
    uint64_t v16 = *a4;
    *a4 = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v17 = &unk_1EE9F4050;
    v17[1] = v16;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v19 = 2604;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 70) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    long long v27 = v19;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, a3);
    int v25 = v17;
    uint64_t v26 = v18;
    IPC::Connection::sendMessageWithAsyncReply(v15, &v27, (uint64_t *)&v25, 0, 0);
  }
  uint64_t v20 = (uint64_t)v25;
  int v25 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t result = v27;
  long long v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::enableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2774;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v14);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F4078;
  v7[1] = v3;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v7;
  v15[1] = v8;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v16, v15, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::disableNavigationPreload(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2773;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v14);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F40A0;
  v7[1] = v3;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v7;
  v15[1] = v8;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v16, v15, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v16 = a2;
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2791;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a3);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F40C8;
  v9[1] = v5;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v9;
  v17[1] = v10;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v18, v17, 0);
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::getNavigationPreloadState(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2776;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v14);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F40F0;
  v7[1] = v3;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v7;
  v15[1] = v8;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v16, v15, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::startBackgroundFetch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = a1 + 24;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v24 = a2;
  uint64_t v11 = *a6;
  *a6 = 0;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v9 + 56))(a1 + 24);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 2793;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 68) = 0;
  *((void *)v13 + 70) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v26 = v13;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v13, &v24);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a3);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v13, *(unsigned int *)(a4 + 12));
  unsigned int v14 = *(_DWORD *)(a4 + 12);
  if (v14)
  {
    uint64_t v15 = *(void *)a4;
    uint64_t v16 = 336 * v14;
    do
    {
      IPC::ArgumentCoder<WebCore::BackgroundFetchRequest,void>::encode(v13, v15);
      v15 += 336;
      v16 -= 336;
    }
    while (v16);
  }
  IPC::ArgumentCoder<WebCore::BackgroundFetchOptions,void>::encode(v13, a5);
  uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v17 = &unk_1EE9F4148;
  v17[1] = v11;
  uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v25[0] = v17;
  v25[1] = v18;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v10 + 40))(v10, &v26, v25, 0);
  uint64_t v20 = v25[0];
  v25[0] = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v22, v23);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::backgroundFetchInformation(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v16 = a2;
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2770;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v16);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a3);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F41A0;
  v9[1] = v5;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v9;
  v17[1] = v10;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v18, v17, 0);
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::backgroundFetchIdentifiers(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v15 = a2;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2769;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v17 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v15);
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9F41C8;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v16[0] = v8;
  v16[1] = v9;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v17, v16, 0);
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::abortBackgroundFetch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v17 = a2;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2766;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v19 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v17);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a3);
  uint64_t v9 = *a4;
  *a4 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F41F0;
  v10[1] = v9;
  uint64_t v11 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v18[0] = v10;
  v18[1] = v11;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v19, v18, 0);
  uint64_t v13 = v18[0];
  v18[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::matchBackgroundFetch(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v19 = a2;
  uint64_t v8 = a1 + 24;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2781;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 68) = 0;
  *((void *)v10 + 70) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v21 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, &v19);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a3);
  IPC::ArgumentCoder<WebCore::RetrieveRecordsOptions,void>::encode(v10, a4);
  uint64_t v11 = *a5;
  *a5 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EE9F4218;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v20[0] = v12;
  v20[1] = v13;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v8 + 40))(v8, &v21, v20, 0);
  uint64_t v15 = v20[0];
  v20[0] = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t result = v21;
  uint64_t v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v14);
    return (IPC::Encoder *)WTF::fastFree(v17, v18);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::retrieveRecordResponse(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2787;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v14);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F4240;
  v7[1] = v3;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v7;
  v15[1] = v8;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v16, v15, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::retrieveRecordResponseBody(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v34 = a2;
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v33 = IdentifierInternal;
  uint64_t v7 = (uint64_t *)(a1 + 104);
  uint64_t v6 = *(void *)(a1 + 104);
  if (v6
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 104)),
        (uint64_t v6 = *v7) != 0))
  {
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unint64_t v9 = (IdentifierInternal + ~(IdentifierInternal << 32)) ^ ((unint64_t)(IdentifierInternal
                                                                              + ~(IdentifierInternal << 32)) >> 22);
  unint64_t v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
  unint64_t v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
  unsigned int v12 = v8 & ((v11 >> 31) ^ v11);
  uint64_t v13 = (uint64_t *)(v6 + 16 * v12);
  uint64_t v14 = *v13;
  if (!*v13)
  {
LABEL_12:
    *uint64_t v13 = IdentifierInternal;
    uint64_t v17 = *a3;
    *a3 = 0;
    uint64_t v18 = v13[1];
    v13[1] = v17;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    uint64_t v19 = *v7;
    if (*v7) {
      int v20 = *(_DWORD *)(v19 - 12) + 1;
    }
    else {
      int v20 = 1;
    }
    *(_DWORD *)(v19 - 12) = v20;
    uint64_t v21 = *v7;
    if (*v7) {
      int v22 = *(_DWORD *)(v21 - 12);
    }
    else {
      int v22 = 0;
    }
    uint64_t v23 = (*(_DWORD *)(v21 - 16) + v22);
    unint64_t v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23) {
        goto LABEL_23;
      }
    }
    else if (3 * v24 > 4 * v23)
    {
      goto LABEL_23;
    }
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand((uint64_t *)(a1 + 104));
    goto LABEL_23;
  }
  uint64_t v15 = 0;
  int v16 = 1;
  while (v14 != IdentifierInternal)
  {
    if (v14 == -1) {
      uint64_t v15 = v13;
    }
    unsigned int v12 = (v12 + v16) & v8;
    uint64_t v13 = (uint64_t *)(v6 + 16 * v12);
    uint64_t v14 = *v13;
    ++v16;
    if (!*v13)
    {
      if (v15)
      {
        *uint64_t v15 = 0;
        v15[1] = 0;
        --*(_DWORD *)(*v7 - 16);
        uint64_t v13 = v15;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  uint64_t v26 = *(void *)(a1 + 24);
  uint64_t v25 = a1 + 24;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(v26 + 56))(v25);
  long long v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v28 = 2788;
  *((void *)v28 + 1) = v27;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 68) = 0;
  *((void *)v28 + 70) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  int v35 = v28;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v28, &v34);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v28, &v33);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v25 + 32))(v25, &v35, 0);
  uint64_t result = v35;
  int v35 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v29);
    return (IPC::Encoder *)WTF::fastFree(v31, v32);
  }
  return result;
}

void WebKit::WebSWClientConnection::notifyRecordResponseBodyChunk(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (uint64_t *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v5, a2);
  uint64_t v7 = v6;
  if (v5) {
    uint64_t v8 = v5 + 16 * *(unsigned int *)(v5 - 4);
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8 != v6)
  {
    IPC::SharedBufferReference::unsafeBuffer(a3, &v11);
    uint64_t v9 = v11;
    v13[0] = v11;
    int v14 = 0;
    (*(void (**)(void, void *))(**(void **)(v7 + 8) + 16))(*(void *)(v7 + 8), v13);
    if (v14 != -1) {
      ((void (*)(char *, void *))off_1EE9F3998[v14])(&v12, v13);
    }
    if (!v9)
    {
      if (*v4)
      {
        uint64_t v10 = *v4 + 16 * *(unsigned int *)(*v4 - 4);
        if (v10 == v7) {
          return;
        }
      }
      else
      {
        if (!v7) {
          return;
        }
        uint64_t v10 = 0;
      }
      if (v10 != v7) {
        WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::remove(v4, (void *)v7);
      }
    }
  }
}

void WebKit::WebSWClientConnection::notifyRecordResponseBodyEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (uint64_t *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v6 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::UniqueRef<WebKit::NetworkSessionCocoa::BlobDataTaskClient>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::DataTaskIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v4, a2);
  if (v4) {
    uint64_t v7 = (void *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 == v6) {
    return;
  }
  uint64_t v8 = v6[1];
  v6[1] = 0;
  if (!*v5)
  {
    if (!v6) {
      goto LABEL_12;
    }
    uint64_t v9 = 0;
LABEL_10:
    if ((void *)v9 != v6) {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::remove(v5, v6);
    }
    goto LABEL_12;
  }
  uint64_t v9 = *v5 + 16 * *(unsigned int *)(*v5 - 4);
  if ((void *)v9 != v6) {
    goto LABEL_10;
  }
LABEL_12:
  if (v8)
  {
    uint64_t v10 = *(WTF::StringImpl **)a3;
    *(void *)a3 = 0;
    v18[0] = v10;
    WTF::URL::URL((uint64_t)&v18[1], (uint64_t *)(a3 + 8));
    uint64_t v11 = *(void *)(a3 + 48);
    *(void *)(a3 + 48) = 0;
    int v22 = *(_DWORD *)(a3 + 56);
    __int16 v23 = *(_WORD *)(a3 + 60);
    uint64_t v12 = *(void *)(a3 + 64);
    *(void *)(a3 + 64) = 0;
    char v25 = *(unsigned char *)(a3 + 72);
    long long v13 = *(_OWORD *)v18;
    v18[1] = 0;
    v27[0] = v13;
    v27[1] = v19;
    v27[2] = v20;
    LODWORD(v19) = v19 & 0xFFFFFFFE;
    uint64_t v21 = 0;
    uint64_t v28 = v11;
    LODWORD(v11) = *(_DWORD *)(a3 + 56);
    __int16 v30 = *(_WORD *)(a3 + 60);
    int v29 = v11;
    CFTypeRef cf = 0;
    uint64_t v31 = v12;
    char v32 = v25;
    int v33 = 1;
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v8 + 16))(v8, v27);
    if (v33 != -1) {
      ((void (*)(char *, _OWORD *))off_1EE9F3998[v33])(&v26, v27);
    }
    int v33 = -1;
    CFTypeRef v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
    int v16 = v21;
    uint64_t v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v14);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v17 = v18[1];
    v18[1] = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
}

_DWORD *WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::Document *a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[1];
  long long v40 = *a2;
  long long v41 = v5;
  uint64_t v6 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  uint64_t v7 = WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v6, (uint64_t *)&v40);
  if (!v7)
  {
    long long v37 = v40;
    long long v38 = v41;
    uint64_t v28 = WebCore::DocumentLoader::fromScriptExecutionContextIdentifier();
    if (!v28) {
      goto LABEL_27;
    }
    int v29 = (_DWORD *)v28;
    int v30 = *(_DWORD *)(v28 + 24);
    *(_DWORD *)(v28 + 24) = v30 + 1;
    uint64_t v31 = *(void *)(v28 + 16);
    if (v31 && (uint64_t v32 = *(void *)(v31 + 8)) != 0)
    {
      atomic_fetch_add((atomic_uint *volatile)(v32 + 8), 1u);
      uint64_t v33 = *(void *)(v32 + 24);
      if (v33)
      {
        uint64_t v12 = *(void *)(v33 + 8);
        if (v12) {
          ++*(_DWORD *)v12;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v32 + 8));
      int v30 = v29[6] - 1;
      if (v29[6] != 1) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v12 = 0;
      if (v30)
      {
LABEL_26:
        v29[6] = v30;
        goto LABEL_9;
      }
    }
    (*(void (**)(_DWORD *))(*(void *)v29 + 24))(v29);
    goto LABEL_9;
  }
  int v8 = *(_DWORD *)(v7 + 28);
  *(_DWORD *)(v7 + 28) = v8 + 2;
  uint64_t v9 = *(void *)(v7 + 544);
  if (v9 && (v10 = *(void *)(v9 + 8)) != 0 && (uint64_t v11 = *(void *)(v10 + 24)) != 0)
  {
    uint64_t v12 = *(void *)(v11 + 8);
    if (v12) {
      ++*(_DWORD *)v12;
    }
    if (v8) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if (v8)
    {
LABEL_8:
      *(_DWORD *)(v7 + 28) = v8;
      goto LABEL_9;
    }
  }
  if ((*(_WORD *)(v7 + 34) & 0x400) == 0) {
    WebCore::Node::removedLastRef((WebCore::Node *)v7);
  }
LABEL_9:
  if (!v12)
  {
LABEL_27:
    LOBYTE(v37) = 0;
    char v39 = 0;
    uint64_t v34 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v34 + 16))(v34, &v37);
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
    return (_DWORD *)std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v37, v35);
  }
  long long v13 = *(void **)(*(void *)(v12 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v13 + 1368))(v13))
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = *(void *)(v13[2] + 8);
    if (v14) {
      uint64_t v15 = v14 - 16;
    }
    else {
      uint64_t v15 = 0;
    }
  }
  long long v37 = *a2;
  *(void *)&long long v38 = *((void *)a2 + 2);
  uint64_t v16 = *a3;
  *a3 = 0;
  uint64_t v18 = *(void *)(v15 + 32);
  uint64_t v17 = v15 + 32;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
  long long v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v20 = 1971;
  *((void *)v20 + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 68) = 0;
  *((void *)v20 + 70) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  int8x16_t v36 = v20;
  uint64_t v21 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v21 = &unk_1EE9F4298;
  *(_OWORD *)(v21 + 16) = v37;
  *(_OWORD *)(v21 + ++*(_DWORD *)(this + 32) = v38;
  *(void *)(v21 + 48) = v16;
  *(void *)&long long v37 = v21;
  *((void *)&v37 + 1) = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, long long *, void))(*(void *)v17 + 40))(v17, &v36, &v37, 0);
  uint64_t v23 = v37;
  *(void *)&long long v37 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  unint64_t v24 = v36;
  int8x16_t v36 = 0;
  if (v24)
  {
    IPC::Encoder::~Encoder(v24, v22);
    WTF::fastFree(v26, v27);
  }
  return WTF::RefCounted<WebCore::Page>::deref((_DWORD *)v12);
}

IPC::Encoder *WebKit::WebSWClientConnection::addCookieChangeSubscriptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = a2;
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2767;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v16);
  IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, a3);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F4310;
  v9[1] = v5;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v9;
  v17[1] = v10;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v18, v17, 0);
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::removeCookieChangeSubscriptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = a2;
  uint64_t v5 = *a4;
  *a4 = 0;
  uint64_t v6 = a1 + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2785;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v18 = v8;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v16);
  IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v8, a3);
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F4338;
  v9[1] = v5;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v17[0] = v9;
  v17[1] = v10;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v6 + 40))(v6, &v18, v17, 0);
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWClientConnection::cookieChangeSubscriptions(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = a2;
  uint64_t v3 = *a3;
  *a3 = 0;
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2771;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 68) = 0;
  *((void *)v6 + 70) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v16 = v6;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v6, &v14);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F4360;
  v7[1] = v3;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v15[0] = v7;
  v15[1] = v8;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v4 + 40))(v4, &v16, v15, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::WebSWContextManagerConnection(uint64_t a1, uint64_t *a2, uint64_t *a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, WebKit::WebPage *a8, uint64_t *a9)
{
  *(void *)a1 = &unk_1EE9F39B8;
  *(unsigned char *)(a1 + 8) = 0;
  uint64_t v17 = a1 + 16;
  *(void *)(a1 + 16) = &unk_1EE9B71B0;
  *(void *)(a1 + 24) = 0;
  uint64_t v18 = WTF::fastMalloc((WTF *)0x20);
  *(unsigned char *)uint64_t v18 = 0;
  *(_OWORD *)(v18 + 8) = xmmword_1994F5F10;
  *(void *)(v18 + 24) = v17;
  *(void *)(a1 + ++*(_DWORD *)(this + 32) = v18;
  *(void *)a1 = &unk_1EE9F3758;
  *(void *)(a1 + 16) = &unk_1EE9F3848;
  uint64_t v19 = *a2;
  *a2 = 0;
  *(void *)(a1 + 40) = v19;
  uint64_t v20 = *a3;
  *a3 = 0;
  *(void *)(a1 + 48) = v20;
  long long v21 = *a4;
  long long v22 = a4[2];
  *(_OWORD *)(a1 + 80) = a4[1];
  *(_OWORD *)(a1 + 96) = v22;
  *(_OWORD *)(a1 + 64) = v21;
  *(void *)(a1 + 112) = a5;
  *(void *)(a1 + 120) = a6;
  *(void *)(a1 + 128) = a7;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  WebCore::standardUserAgentWithApplicationName();
  *(unsigned char *)(a1 + 176) = 1;
  WebKit::WebUserContentController::getOrCreate(*a9, (uint64_t **)(a1 + 184));
  *(unsigned char *)(a1 + 192) = 0;
  *(unsigned char *)(a1 + 240) = 0;
  WTF::WorkQueue::create();
  *(void *)(a1 + 256) = 0;
  WebKit::WebUserContentController::addContentRuleLists(*(void *)(a1 + 184), (uint64_t)(a9 + 1));
  WebKit::WebPage::updatePreferencesGenerated(a8, v23);
  std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(a1 + 192, (uint64_t *)a8);
  {
    char v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  ++*(_DWORD *)(WebKit::WebProcess::singleton(void)::process + 32);
  return a1;
}

void WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection(WebKit::WebSWContextManagerConnection *this)
{
  uint64_t v2 = (void *)*((void *)this + 19);
  *((void *)this + 19) = 0;
  uint64_t v27 = v2;
  uint64_t v4 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::WebURLSchemeHandler,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin(&v27);
  uint64_t v5 = v3;
  uint64_t v6 = 0;
  uint64_t v7 = v27;
  if (v27) {
    uint64_t v6 = &v27[2 * *((unsigned int *)v27 - 1)];
  }
  if (v6 != v4)
  {
    do
    {
      (*(void (**)(void))(*(void *)v4[1] + 16))(v4[1]);
      while (1)
      {
        v4 += 2;
        if (v4 == v5) {
          break;
        }
        if ((unint64_t)(*v4 + 1) > 1) {
          goto LABEL_9;
        }
      }
      uint64_t v4 = v5;
LABEL_9:
      ;
    }
    while (v4 != v6);
    uint64_t v7 = v27;
  }
  if (v7) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable((uint64_t)v7, v3);
  }
  uint64_t v8 = *((void *)this + 32);
  if (v8)
  {
    uint64_t v9 = *(unsigned int *)(v8 - 4);
    if (v9)
    {
      uint64_t v10 = (uint64_t *)(v8 + 16);
      do
      {
        if (*(v10 - 2) != -1)
        {
          uint64_t v11 = *v10;
          uint64_t *v10 = 0;
          if (v11) {
            WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v11 + 8));
          }
        }
        v10 += 3;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree((WTF *)(v8 - 16), v3);
  }
  uint64_t v12 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 56))(v12);
  }
  if (*((unsigned char *)this + 240))
  {
    long long v13 = (WTF *)*((void *)this + 27);
    if (v13) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v13, (WTF::StringImpl *)*((unsigned int *)this + 56));
    }
    uint64_t v14 = (WTF *)*((void *)this + 24);
    if (v14) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v14, (WTF::StringImpl *)*((unsigned int *)this + 50));
    }
  }
  uint64_t v15 = (_DWORD *)*((void *)this + 23);
  *((void *)this + 2WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  uint64_t v16 = (WTF::StringImpl *)*((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = *((void *)this + 19);
  if (v17) {
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::CompletionHandler<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::CompletionHandler<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::deallocateTable(v17, v3);
  }
  uint64_t v18 = *((void *)this + 18);
  if (v18)
  {
    uint64_t v19 = *(unsigned int *)(v18 - 4);
    if (v19)
    {
      uint64_t v20 = (uint64_t *)(v18 + 8);
      do
      {
        if (*(v20 - 1) != -1)
        {
          uint64_t v21 = *v20;
          uint64_t *v20 = 0;
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
        }
        v20 += 2;
        --v19;
      }
      while (v19);
    }
    WTF::fastFree((WTF *)(v18 - 16), v3);
  }
  uint64_t v22 = *((void *)this + 17);
  if (v22)
  {
    uint64_t v23 = *(unsigned int *)(v22 - 4);
    if (v23)
    {
      unint64_t v24 = (void **)*((void *)this + 17);
      do
      {
        uint64_t v3 = *v24;
        if (*v24 != (void *)-1)
        {
          *unint64_t v24 = 0;
          if (v3) {
            std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v24, (WTF *)v3);
          }
        }
        ++v24;
        --v23;
      }
      while (v23);
    }
    WTF::fastFree((WTF *)(v22 - 16), v3);
  }
  char v25 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, (WTF::StringImpl *)v3);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 5);
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v26);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection(WebKit::WebSWContextManagerConnection *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSWContextManagerConnection::~WebSWContextManagerConnection((WebKit::WebSWContextManagerConnection *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::establishConnection(uint64_t *a1, uint64_t *a2)
{
  IPC::Connection::addWorkQueueMessageReceiver(a1[5], 0xC6u, a1[31], (uint64_t)(a1 + 2), 0);
  uint64_t v4 = (os_unfair_lock_s *)a1[5];
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9F43B8;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 240;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 70) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, a1 + 15);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a1 + 6);
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::UUID>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::UUID>> const&>(v8, (uint64_t)(a1 + 8));
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::stop(WebKit::WebSWContextManagerConnection *this)
{
}

WTF *WebKit::WebSWContextManagerConnection::updatePreferencesStore(uint64_t a1, uint64_t *a2)
{
  if (WTF::isMainRunLoop((WTF *)a1))
  {
    uint64_t result = (WTF *)WebKit::WebPage::updatePreferencesGenerated((WebKit::WebPage *)a2, v4);
    if (*(unsigned char *)(a1 + 240))
    {
      uint64_t v6 = *a2;
      *a2 = 0;
      int v7 = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      char v8 = *((unsigned char *)a2 + 20);
      *((unsigned char *)a2 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      uint64_t v9 = *(WTF **)(a1 + 192);
      *(void *)(a1 + 192) = v6;
      uint64_t v10 = a2[1];
      a2[1] = 0;
      uint64_t v11 = (WTF::StringImpl *)*(unsigned int *)(a1 + 200);
      *(void *)(a1 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v10;
      *(_DWORD *)(a1 + 208) = v7;
      *(unsigned char *)(a1 + 212) = v8;
      if (v9) {
        WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v9, v11);
      }
      uint64_t v12 = a2[3];
      a2[3] = 0;
      int v13 = *((_DWORD *)a2 + 10);
      *((_DWORD *)a2 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      char v14 = *((unsigned char *)a2 + 44);
      *((unsigned char *)a2 + 44) = 0;
      uint64_t result = *(WTF **)(a1 + 216);
      *(void *)(a1 + 216) = v12;
      uint64_t v15 = a2[4];
      a2[4] = 0;
      uint64_t v16 = (WTF::StringImpl *)*(unsigned int *)(a1 + 224);
      *(void *)(a1 + 224) = v15;
      *(_DWORD *)(a1 + 2++*(_DWORD *)(this + 32) = v13;
      *(unsigned char *)(a1 + 236) = v14;
      if (result)
      {
        return (WTF *)WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(result, v16);
      }
    }
    else
    {
      *(void *)(a1 + 192) = 0;
      *(void *)(a1 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(void *)(a1 + 205) = 0;
      uint64_t v18 = *a2;
      *a2 = 0;
      *(void *)(a1 + 192) = v18;
      LODWORD(v18) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(a1 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v18;
      LODWORD(v18) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
      *(_DWORD *)(a1 + 204) = v18;
      LODWORD(v18) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      *(_DWORD *)(a1 + 208) = v18;
      LOBYTE(v18) = *((unsigned char *)a2 + 20);
      *((unsigned char *)a2 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(unsigned char *)(a1 + 212) = v18;
      *(void *)(a1 + 229) = 0;
      *(void *)(a1 + 216) = 0;
      *(void *)(a1 + 224) = 0;
      uint64_t v19 = a2[3];
      a2[3] = 0;
      *(void *)(a1 + 216) = v19;
      LODWORD(v19) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = 0;
      *(_DWORD *)(a1 + 224) = v19;
      LODWORD(v19) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = 0;
      *(_DWORD *)(a1 + 228) = v19;
      LODWORD(v19) = *((_DWORD *)a2 + 10);
      *((_DWORD *)a2 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(_DWORD *)(a1 + 2++*(_DWORD *)(this + 32) = v19;
      LOBYTE(v19) = *((unsigned char *)a2 + 44);
      *((unsigned char *)a2 + 44) = 0;
      *(unsigned char *)(a1 + 236) = v19;
      *(unsigned char *)(a1 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    }
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 32));
    *(void *)&long long v20 = a1;
    WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>::copy((uint64_t)&v20 + 8, a2);
    WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>::copy((uint64_t)v24, a2 + 3);
    uint64_t v17 = WTF::fastMalloc((WTF *)0x40);
    *(void *)uint64_t v17 = &unk_1EE9F43E0;
    *(_OWORD *)(v17 + 8) = v20;
    *(void *)(v17 + 24) = v21;
    *(_DWORD *)(v17 + ++*(_DWORD *)(this + 32) = v22;
    *(unsigned char *)(v17 + 36) = v23;
    *(void *)(v17 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v24[0];
    *(void *)(v17 + 48) = v24[1];
    *(_DWORD *)(v17 + 56) = v25;
    *(unsigned char *)(v17 + 6IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v26;
    uint64_t v27 = (WTF *)v17;
    WTF::callOnMainRunLoop();
    uint64_t result = v27;
    uint64_t v27 = 0;
    if (result) {
      return (WTF *)(*(uint64_t (**)(WTF *))(*(void *)result + 8))(result);
    }
  }
  return result;
}

WebCore::ServiceWorkerThreadProxy *WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(atomic_uchar *volatile *a1, uint64_t a2, char a3)
{
  isMainRunLoop = (WebCore::SWContextManager *)WTF::isMainRunLoop((WTF *)a1);
  if (isMainRunLoop)
  {
    WebCore::SWContextManager::singleton(isMainRunLoop);
    uint64_t result = (WebCore::ServiceWorkerThreadProxy *)WebCore::SWContextManager::serviceWorkerThreadProxy();
    if (result)
    {
      return (WebCore::ServiceWorkerThreadProxy *)WebCore::ServiceWorkerThreadProxy::setLastNavigationWasAppInitiated(result);
    }
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(a1 + 4);
    uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v8 = &unk_1EE9F4408;
    *(void *)(v8 + 8) = a1;
    *(void *)(v8 + 16) = a2;
    *(unsigned char *)(v8 + 24) = a3;
    uint64_t v9 = (WebCore::ServiceWorkerThreadProxy *)v8;
    WTF::callOnMainRunLoop();
    uint64_t result = v9;
    if (v9) {
      return (WebCore::ServiceWorkerThreadProxy *)(*(uint64_t (**)(WebCore::ServiceWorkerThreadProxy *))(*(void *)v9 + 8))(v9);
    }
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::installServiceWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, __int16 a7)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v26 = a1;
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 32));
  *((void *)&v26 + 1) = a1;
  WebCore::ServiceWorkerContextData::isolatedCopy();
  WebCore::ServiceWorkerData::isolatedCopy();
  WTF::String::isolatedCopy();
  LOBYTE(v5WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = a5;
  BYTE1(v5WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = a6;
  HIWORD(v5WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = a7;
  uint64_t v11 = WTF::fastMalloc((WTF *)0x2C0);
  *(void *)uint64_t v11 = &unk_1EE9F4430;
  *(_OWORD *)(v11 + 16) = v26;
  uint64_t v12 = v28;
  *(_OWORD *)(v11 + ++*(_DWORD *)(this + 32) = v27;
  *(void *)(v11 + 48) = v12;
  WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(v11 + 56, (uint64_t)v29);
  *(void *)(v11 + 408) = v29[44];
  long long v13 = v30;
  long long v30 = 0u;
  *(_OWORD *)(v11 + 416) = v13;
  uint64_t v14 = v31;
  uint64_t v31 = 0;
  *(void *)(v11 + 4++*(_DWORD *)(this + 32) = v14;
  *(void *)&long long v13 = v32;
  uint64_t v32 = 0;
  *(void *)(v11 + 44IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v13;
  *(_DWORD *)(v11 + 448) = v33;
  *(unsigned char *)(v11 + 452) = v34;
  *(_WORD *)(v11 + 456) = v35;
  long long v15 = v36;
  long long v36 = 0u;
  *(_OWORD *)(v11 + 464) = v15;
  uint64_t v16 = v37;
  uint64_t v37 = 0;
  *(void *)(v11 + 48IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v16;
  WTF::URL::URL(v11 + 488, v38);
  *(_DWORD *)(v11 + 528) = v39;
  uint64_t v17 = v40;
  uint64_t v40 = 0;
  *(void *)(v11 + 536) = v17;
  uint64_t v18 = v41;
  uint64_t v41 = 0;
  *(void *)(v11 + 544) = v18;
  LODWORD(v17) = v42;
  int v42 = 0;
  *(_DWORD *)(v11 + 552) = v17;
  LOBYTE(v17) = v43;
  char v43 = 0;
  *(unsigned char *)(v11 + 556) = v17;
  long long v19 = v46;
  long long v20 = v44;
  *(_OWORD *)(v11 + 576) = v45;
  *(_OWORD *)(v11 + 592) = v19;
  *(_OWORD *)(v11 + 56IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v20;
  *(unsigned char *)(v11 + 608) = v47;
  uint64_t v21 = v48;
  uint64_t v48 = 0;
  *(void *)(v11 + 616) = v21;
  *(_OWORD *)(v11 + 624) = v49;
  WTF::URL::URL(v11 + 640, (uint64_t *)&v50);
  *(_WORD *)(v11 + 68IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v51;
  int v22 = v52;
  v52 = 0;
  *(void *)(v11 + 688) = v22;
  *(_DWORD *)(v11 + 696) = v53;
  WTF::callOnMainRunLoopAndWait();
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  unint64_t v24 = v52;
  v52 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, v23);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  int v25 = v50;
  uint64_t v50 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2) {
      WTF::StringImpl::destroy(v25, v23);
    }
    else {
      *(_DWORD *)v25 -= 2;
    }
  }
  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)&v27, v23);
}

uint64_t *WebKit::WebSWContextManagerConnection::setUserAgent(uint64_t a1, uint64_t *a2)
{
  if (WTF::isMainThread((WTF *)a1))
  {
    return WTF::String::operator=((uint64_t *)(a1 + 168), a2);
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 32));
    WTF::String::isolatedCopy();
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v5 = &unk_1EE9F4490;
    v5[1] = a1;
    void v5[2] = v6;
    int v7 = v5;
    WTF::callOnMainRunLoop();
    if (v7) {
      (*(void (**)(void *))(*v7 + 8))(v7);
    }
    return 0;
  }
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::serviceWorkerStarted(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v12 = a3;
  uint64_t v4 = *(void *)(a1 + 40);
  v10[0] = a2;
  v10[1] = &v12;
  char v11 = a4;
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 2813;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  long long v13 = v5;
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul,2ul>(v5, (uint64_t)v10);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  long long v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::serviceWorkerFailedToStart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v12 = a3;
  uint64_t v6 = *(void *)(a1 + 40);
  int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v7 = 2812;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  long long v13 = v7;
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&>(v7, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v12);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a4);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  long long v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

unsigned int *WebKit::WebSWContextManagerConnection::cancelFetch(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  if (v10)
  {
    WebCore::ServiceWorkerThreadProxy::cancelFetch();
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v10 + 8));
  }
  int v7 = (void *)*((void *)a1 + 32);
  uint64_t result = (unsigned int *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v7, a2, a4);
  if (v7)
  {
    uint64_t v9 = (unsigned int *)&v7[3 * *((unsigned int *)v7 - 1)];
    if (v9 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    uint64_t v9 = 0;
  }
  if (v9 != result) {
    return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(a1 + 64, result);
  }
  return result;
}

unsigned int *WebKit::WebSWContextManagerConnection::continueDidReceiveFetchResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned int *)(a1 + 256);
  uint64_t v5 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(*(void **)(a1 + 256), a2, a4);
  uint64_t result = WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::take((unsigned int *)&v8, v4, v5);
  int v7 = v8;
  if (v8)
  {
    WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse(v8);
    return WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)v7 + 2);
  }
  return result;
}

atomic_uchar *WebKit::WebSWContextManagerConnection::startFetch(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, atomic_uchar *volatile **a7)
{
  WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  uint64_t v13 = v42;
  if (!v42)
  {
    uint64_t v31 = a1[5];
    LOBYTE(v41) = 0;
    uint64_t result = (atomic_uchar *)IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidNotHandle>(v31, (uint64_t)&v41, a4, 0, 0);
    goto LABEL_34;
  }
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v42 + 8));
  int v14 = (*(unsigned __int8 *)(a5 + 148) >> 2) & 1;
  uint64_t v15 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v15 = &unk_1EE9F44B8;
  *(void *)(v15 + 8) = v13;
  *(unsigned char *)(v15 + 16) = v14;
  uint64_t v41 = (atomic_uchar *volatile *)v15;
  WTF::callOnMainRunLoop();
  uint64_t v16 = v41;
  uint64_t v41 = 0;
  if (v16) {
    (*((void (**)(atomic_uchar *volatile *))*v16 + 1))(v16);
  }
  int v17 = *(unsigned __int8 *)(a5 + 147);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v41, (atomic_uchar *volatile *)a1[5]);
  uint64_t v18 = WTF::fastMalloc((WTF *)0xF8);
  WebKit::WebServiceWorkerFetchTaskClient::WebServiceWorkerFetchTaskClient(v18, (uint64_t *)&v41, a3, a2, a4, v17 == 1);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v41);
  if (v17 == 1)
  {
    long long v19 = a1 + 32;
    atomic_fetch_add((atomic_uint *volatile)(v18 + 8), 1u);
    uint64_t v20 = a1[32];
    if (v20
      || (WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(a1 + 32),
          (uint64_t v20 = *v19) != 0))
    {
      int v21 = *(_DWORD *)(v20 - 8);
    }
    else
    {
      int v21 = 0;
    }
    unsigned int v22 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(a2, a4) & v21;
    char v23 = (uint64_t *)(v20 + 24 * v22);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    if (*(_OWORD *)v23 != 0)
    {
      long long v26 = 0;
      int v27 = 1;
      do
      {
        if (v24 == a2 && v25 == a4)
        {
          WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v18 + 8));
          goto LABEL_30;
        }
        if (v24 == -1) {
          long long v26 = v23;
        }
        unsigned int v22 = (v22 + v27) & v21;
        char v23 = (uint64_t *)(v20 + 24 * v22);
        uint64_t v24 = *v23;
        uint64_t v25 = v23[1];
        ++v27;
      }
      while (*(_OWORD *)v23 != 0);
      if (v26)
      {
        *long long v26 = 0;
        v26[1] = 0;
        v26[2] = 0;
        --*(_DWORD *)(*v19 - 16);
        char v23 = v26;
      }
    }
    *char v23 = a2;
    v23[1] = a4;
    uint64_t v28 = v23[2];
    v23[2] = v18;
    if (v28) {
      WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v28 + 8));
    }
    uint64_t v29 = *v19;
    if (*v19) {
      int v30 = *(_DWORD *)(v29 - 12) + 1;
    }
    else {
      int v30 = 1;
    }
    *(_DWORD *)(v29 - 12) = v30;
    uint64_t v33 = *v19;
    if (*v19) {
      int v34 = *(_DWORD *)(v33 - 12);
    }
    else {
      int v34 = 0;
    }
    uint64_t v35 = (*(_DWORD *)(v33 - 16) + v34);
    unint64_t v36 = *(unsigned int *)(v33 - 4);
    if (v36 > 0x400)
    {
      if (v36 > 2 * v35) {
        goto LABEL_30;
      }
      goto LABEL_28;
    }
    if (3 * v36 <= 4 * v35) {
LABEL_28:
    }
      WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(v19);
  }
LABEL_30:
  uint64_t v37 = *a7;
  *a7 = 0;
  uint64_t v41 = v37;
  WebCore::ResourceRequestBase::setHTTPBody();
  long long v38 = (WTF::RefCountedBase *)v41;
  uint64_t v41 = 0;
  if (v38) {
    WTF::RefCounted<WebCore::FormData>::deref(v38);
  }
  uint64_t v41 = (atomic_uchar *volatile *)v18;
  uint64_t result = (atomic_uchar *)WebCore::ServiceWorkerThreadProxy::startFetch();
  int v39 = v41;
  uint64_t v41 = 0;
  if (v39) {
    uint64_t result = (atomic_uchar *)WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)v39 + 2);
  }
LABEL_34:
  uint64_t v40 = v42;
  uint64_t v42 = 0;
  if (v40) {
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v40 + 8));
  }
  return result;
}

atomic_uchar *WebKit::WebSWContextManagerConnection::postMessageToServiceWorker(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  uint64_t result = (atomic_uchar *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::fireMessageEvent();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return result;
}

atomic_uchar *WebKit::WebSWContextManagerConnection::fireInstallEvent(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  uint64_t result = (atomic_uchar *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::fireInstallEvent((WebCore::ServiceWorkerThreadProxy *)v2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(v2[1]);
  }
  return result;
}

atomic_uchar *WebKit::WebSWContextManagerConnection::fireActivateEvent(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  uint64_t result = (atomic_uchar *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::fireActivateEvent((WebCore::ServiceWorkerThreadProxy *)v2);
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(v2[1]);
  }
  return result;
}

WTF *WebKit::WebSWContextManagerConnection::firePushEvent(WTF *result, WTF *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = result;
  LOBYTE(v35) = 0;
  char v37 = 0;
  if (*(unsigned char *)(a3 + 16))
  {
    uint64_t v10 = *(char **)a3;
    uint64_t v9 = *(WTF **)(a3 + 8);
    int v27 = 0;
    LODWORD(v28) = 0;
    HIDWORD(v28) = v9;
    if (v9)
    {
      if ((unint64_t)v9 >> 32)
      {
        __break(0xC471u);
        return result;
      }
      char v11 = (WTF *)WTF::fastMalloc(v9);
      LODWORD(v28) = v9;
      int v27 = v11;
      do
      {
        char v12 = *v10++;
        *(unsigned char *)char v11 = v12;
        char v11 = (WTF *)((char *)v11 + 1);
        uint64_t v9 = (WTF *)((char *)v9 - 1);
      }
      while (v9);
    }
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,void>((uint64_t)&v35, (uint64_t)&v27);
    int v14 = v27;
    if (v27)
    {
      int v27 = 0;
      LODWORD(v28) = 0;
      WTF::fastFree(v14, v13);
    }
  }
  uint64_t v15 = *((void *)v8 + 31);
  (*(void (**)(uint64_t))(*(void *)v15 + 48))(v15);
  uint64_t v16 = *a5;
  *a5 = 0;
  int v27 = a2;
  LOBYTE(v28) = 0;
  char v30 = 0;
  if (v37)
  {
    uint64_t v28 = v35;
    uint64_t v17 = v36;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v29 = v17;
    char v30 = 1;
  }
  WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::NotificationPayload>>::copy<std::optional<WebCore::NotificationPayload>>((WTF::StringImpl *)v31, a4);
  uint64_t v32 = v15;
  uint64_t v33 = v16;
  uint64_t v18 = WTF::fastMalloc((WTF *)0xC8);
  uint64_t v19 = v18;
  *(void *)uint64_t v18 = &unk_1EE9F44E0;
  *(void *)(v18 + 8) = v27;
  *(unsigned char *)(v18 + 16) = 0;
  *(unsigned char *)(v18 + ++*(_DWORD *)(this + 32) = 0;
  if (v30)
  {
    *(void *)(v18 + 16) = v28;
    uint64_t v20 = v29;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    *(void *)(v18 + 24) = v20;
    *(unsigned char *)(v18 + ++*(_DWORD *)(this + 32) = 1;
  }
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v18 + 40, (uint64_t)v31);
  *(void *)(v19 + 184) = v32;
  uint64_t v21 = v33;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  *(void *)(v19 + 192) = v21;
  uint64_t v34 = v19;
  WTF::callOnMainRunLoop();
  uint64_t v23 = v34;
  uint64_t v34 = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = v33;
  uint64_t v33 = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = v32;
  uint64_t v32 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 56))(v25);
  }
  uint64_t result = (WTF *)std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v31, v22);
  if (v30)
  {
    uint64_t result = v28;
    if (v28)
    {
      uint64_t v28 = 0;
      LODWORD(v29) = 0;
      uint64_t result = (WTF *)WTF::fastFree(result, v26);
    }
  }
  if (v37)
  {
    uint64_t result = v35;
    if (v35)
    {
      uint64_t v35 = 0;
      LODWORD(v36) = 0;
      return (WTF *)WTF::fastFree(result, v26);
    }
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::fireNotificationEvent(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a1 + 248);
  (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
  uint64_t v9 = *a5;
  *a5 = 0;
  WebCore::NotificationData::isolatedCopy();
  char v35 = a4;
  *(void *)&long long v36 = v8;
  *((void *)&v36 + 1) = v9;
  uint64_t v10 = WTF::fastMalloc((WTF *)0x140);
  *(void *)uint64_t v10 = &unk_1EE9F4558;
  *(void *)(v10 + 16) = a2;
  WTF::URL::URL(v10 + 32, v20);
  long long v11 = v21;
  long long v21 = 0u;
  *(_OWORD *)(v10 + 72) = v11;
  long long v12 = v22;
  long long v22 = 0u;
  *(_OWORD *)(v10 + 88) = v12;
  *(void *)(v10 + 104) = v23;
  *(unsigned char *)(v10 + 112) = v24;
  uint64_t v13 = v25;
  uint64_t v23 = 0;
  uint64_t v25 = 0;
  *(void *)(v10 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v13;
  WTF::URL::URL(v10 + 128, v26);
  *(_OWORD *)(v10 + 176) = v27;
  long long v14 = v31;
  *(_OWORD *)(v10 + 224) = v30;
  *(_OWORD *)(v10 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v14;
  long long v15 = v29;
  *(_OWORD *)(v10 + 192) = v28;
  *(_OWORD *)(v10 + 208) = v15;
  *(void *)(v10 + 256) = v32;
  *(void *)&long long v15 = v33;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  *(void *)(v10 + 264) = v15;
  *(_WORD *)(v10 + 272) = v34;
  *(unsigned char *)(v10 + 288) = v35;
  long long v16 = v36;
  long long v36 = 0u;
  *(_OWORD *)(v10 + 296) = v16;
  WTF::callOnMainRunLoop();
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v18 = *((void *)&v36 + 1);
  *((void *)&v36 + 1) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = v36;
  *(void *)&long long v36 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 56))(v19);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v20, v17);
}

WTF::StringImpl *WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 248);
  (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
  uint64_t v8 = *a4;
  *a4 = 0;
  WebCore::BackgroundFetchInformation::isolatedCopy((uint64_t)&v18, a3);
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x58);
  *(void *)uint64_t v9 = &unk_1EE9F45D0;
  *(void *)(v9 + 8) = a2;
  *(void *)(v9 + 16) = v18;
  *(void *)(v9 + 24) = v19;
  long long v10 = v20;
  long long v11 = *(_OWORD *)v21;
  *(_DWORD *)(v9 + 6WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *(_DWORD *)&v21[15];
  *(_OWORD *)(v9 + ++*(_DWORD *)(this + 32) = v10;
  *(_OWORD *)(v9 + 48) = v11;
  *(void *)(v9 + 72) = v22;
  uint64_t v12 = v23;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *(void *)(v9 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v12;
  uint64_t v24 = v9;
  WTF::callOnMainRunLoop();
  uint64_t v14 = v24;
  uint64_t v24 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = v23;
  uint64_t v23 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v22;
  uint64_t v22 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 56))(v16);
  }
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 WebCore::BackgroundFetchInformation::isolatedCopy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  WTF::String::isolatedCopy();
  __n128 result = *(__n128 *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 32) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_WORD *)(a1 + 49) = *(_WORD *)(a2 + 49);
  return result;
}

WTF::StringImpl *WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(a1 + 248);
  (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
  uint64_t v8 = *a4;
  *a4 = 0;
  WebCore::BackgroundFetchInformation::isolatedCopy((uint64_t)&v18, a3);
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  uint64_t v9 = WTF::fastMalloc((WTF *)0x58);
  *(void *)uint64_t v9 = &unk_1EE9F4648;
  *(void *)(v9 + 8) = a2;
  *(void *)(v9 + 16) = v18;
  *(void *)(v9 + 24) = v19;
  long long v10 = v20;
  long long v11 = *(_OWORD *)v21;
  *(_DWORD *)(v9 + 6WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *(_DWORD *)&v21[15];
  *(_OWORD *)(v9 + ++*(_DWORD *)(this + 32) = v10;
  *(_OWORD *)(v9 + 48) = v11;
  *(void *)(v9 + 72) = v22;
  uint64_t v12 = v23;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  *(void *)(v9 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v12;
  uint64_t v24 = v9;
  WTF::callOnMainRunLoop();
  uint64_t v14 = v24;
  uint64_t v24 = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = v23;
  uint64_t v23 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = v22;
  uint64_t v22 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 56))(v16);
  }
  __n128 result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::terminateWorker(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v3 = &unk_1EE9F46C0;
  v3[1] = a2;
  long long v5 = v3;
  WTF::callOnMainRunLoop();
  uint64_t result = (uint64_t)v5;
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 8))(v5);
  }
  return result;
}

atomic_uchar *WebKit::WebSWContextManagerConnection::didSaveScriptsToDisk(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  uint64_t result = (atomic_uchar *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::didSaveScriptsToDisk();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return result;
}

unsigned int *WebKit::WebSWContextManagerConnection::convertFetchToDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (unsigned int *)(a1 + 256);
  long long v5 = WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(*(void **)(a1 + 256), a2, a4);
  uint64_t result = WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::take((unsigned int *)&v8, v4, v5);
  uint64_t v7 = (unsigned int *)v8;
  if (v8)
  {
    *(unsigned char *)(v8 + 23WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 1;
    WebKit::WebServiceWorkerFetchTaskClient::continueDidReceiveResponse((WebKit::WebServiceWorkerFetchTaskClient *)v7);
    return WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref(v7 + 2);
  }
  return result;
}

atomic_uchar *WebKit::WebSWContextManagerConnection::navigationPreloadIsReady(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  uint64_t result = (atomic_uchar *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::navigationPreloadIsReady();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return result;
}

atomic_uchar *WebKit::WebSWContextManagerConnection::navigationPreloadFailed(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  WebCore::SWContextManager::serviceWorkerThreadProxyFromBackgroundThread();
  uint64_t result = (atomic_uchar *)v2;
  if (v2)
  {
    WebCore::ServiceWorkerThreadProxy::navigationPreloadFailed();
    return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::updateRegistrationState(WebCore::SWContextManager *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = WebCore::SWContextManager::singleton(a1);

  return MEMORY[0x1F416EAA0](v7, a2, a3, a4);
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::postMessageToServiceWorkerClient(WebKit::WebMessagePortChannelProvider *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8 = a1;
  uint64_t v20 = a4;
  uint64_t v9 = a3 + 8;
  long long v10 = *(uint64_t **)(a3 + 8);
  uint64_t v11 = *(unsigned int *)(a3 + 20);
  if (v11)
  {
    uint64_t v12 = 32 * v11;
    do
    {
      uint64_t v13 = WebKit::WebMessagePortChannelProvider::singleton(a1);
      a1 = (WebKit::WebMessagePortChannelProvider *)WebKit::WebMessagePortChannelProvider::messagePortSentToRemote((uint64_t)v13, v10);
      v10 += 4;
      v12 -= 32;
    }
    while (v12);
  }
  uint64_t v14 = *((void *)v8 + 5);
  uint64_t v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v15 = 2810;
  *((void *)v15 + 1) = 0;
  *((void *)v15 + 66) = (char *)v15 + 16;
  *((void *)v15 + 67) = 512;
  *((void *)v15 + 68) = 0;
  *((void *)v15 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v15 + 69) = 0;
  IPC::Encoder::encodeHeader(v15);
  long long v21 = v15;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v15, a2);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(v15, (uint64_t *)a3);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v15, v9);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v15, &v20);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, a5);
  IPC::Connection::sendMessageImpl(v14, (uint64_t *)&v21, 0, 0);
  uint64_t result = v21;
  long long v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::didFinishInstall(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v12 = a3;
  uint64_t v4 = *(void *)(a1 + 40);
  v10[0] = a2;
  v10[1] = &v12;
  char v11 = a4;
  long long v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v5 = 2804;
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 68) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v13 = v5;
  IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul,2ul>(v5, (uint64_t)v10);
  IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::didFinishActivation(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2803;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v9 = v3;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, &v8);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::setServiceWorkerHasPendingEvents(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v11 = a2;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v9 = &v11;
  char v10 = a3;
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2816;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v12 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v4, (uint64_t)&v9);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::skipWaiting(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v35 = a2;
  uint64_t v5 = a1[19];
  uint64_t v7 = a1[20];
  uint64_t v6 = a1 + 19;
  uint64_t v8 = v7 + 1;
  a1[20] = v7 + 1;
  if (v5
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(a1 + 19, 0), (uint64_t v5 = *v6) != 0))
  {
    int v9 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unint64_t v10 = (v7 - (v8 << 32)) ^ ((unint64_t)(v7 - (v8 << 32)) >> 22);
  unint64_t v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  unint64_t v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  unsigned int v13 = v9 & ((v12 >> 31) ^ v12);
  uint64_t v14 = (uint64_t *)(v5 + 16 * v13);
  uint64_t v15 = *v14;
  if (!*v14)
  {
LABEL_12:
    uint64_t *v14 = v8;
    WTF::Function<void ()(void)>::Function<WTF::CompletionHandler<void ()(void)>,void>(&v36, a3);
    uint64_t v18 = v36;
    long long v36 = 0;
    uint64_t v19 = v14[1];
    v14[1] = (uint64_t)v18;
    if (v19)
    {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      __int16 v34 = v36;
      long long v36 = 0;
      if (v34) {
        (*(void (**)(IPC::Encoder *))(*(void *)v34 + 8))(v34);
      }
    }
    uint64_t v20 = *v6;
    if (*v6) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 12) = v21;
    uint64_t v22 = *v6;
    if (*v6) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_20;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
      goto LABEL_20;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(v6, v14);
    goto LABEL_20;
  }
  uint64_t v16 = 0;
  int v17 = 1;
  while (v15 != v8)
  {
    if (v15 == -1) {
      uint64_t v16 = v14;
    }
    unsigned int v13 = (v13 + v17) & v9;
    uint64_t v14 = (uint64_t *)(v5 + 16 * v13);
    uint64_t v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        uint64_t *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(*v6 - 16);
        uint64_t v14 = v16;
      }
      goto LABEL_12;
    }
  }
LABEL_20:
  uint64_t v26 = a1[5];
  long long v27 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v27 = 2817;
  *((void *)v27 + 1) = 0;
  *((void *)v27 + 66) = (char *)v27 + 16;
  *((void *)v27 + 67) = 512;
  *((void *)v27 + 68) = 0;
  *((void *)v27 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v27 + 69) = 0;
  IPC::Encoder::encodeHeader(v27);
  long long v36 = v27;
  long long v28 = (void *)IPC::Encoder::grow(v27, 8uLL, 8);
  if (v29 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    void *v28 = v8;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v27, &v35);
    IPC::Connection::sendMessageImpl(v26, (uint64_t *)&v36, 0, 0);
    uint64_t result = (uint64_t)v36;
    long long v36 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v30);
      return WTF::fastFree(v32, v33);
    }
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::skipWaitingCompleted(atomic_uchar *volatile *this, uint64_t a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
  uint64_t v4 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v4 = &unk_1EE9F46E8;
  v4[1] = this;
  v4[2] = a2;
  uint64_t v6 = (uint64_t)v4;
  WTF::callOnMainRunLoop();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::setScriptResource(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v12 = a2;
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 2815;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  unsigned int v13 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v12);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, a3);
  IPC::ArgumentCoder<WebCore::ServiceWorkerImportedScript,void>::encode(v7, a4);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  unsigned int v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::workerTerminated(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2818;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  int v9 = v3;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, &v8);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  int v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::findClientByVisibleIdentifier(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v15 = a2;
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v6 = *a4;
  *a4 = 0;
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F4710;
  v7[1] = v6;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v9 = 2805;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  int v17 = v9;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, &v15);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v16[0] = (uint64_t)v7;
  v16[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v17, v16, 0, 0);
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v17;
  int v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::matchAll(void *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v36 = a2;
  uint64_t v8 = a1 + 18;
  uint64_t v7 = a1[18];
  uint64_t v9 = a1[20];
  uint64_t v10 = v9 + 1;
  a1[20] = v9 + 1;
  if (v7
    || (WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&),WTF::DefaultHash,WTF::HashTraits<unsigned long long>,WTF::HashMap<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(a1 + 18),
        (uint64_t v7 = *v8) != 0))
  {
    int v11 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v11 = 0;
  }
  unint64_t v12 = (v9 - (v10 << 32)) ^ ((unint64_t)(v9 - (v10 << 32)) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
  uint64_t v16 = (void *)(v7 + 16 * v15);
  uint64_t v17 = *v16;
  if (!*v16)
  {
LABEL_12:
    void *v16 = v10;
    uint64_t v20 = *a4;
    *a4 = 0;
    uint64_t v21 = v16[1];
    v16[1] = v20;
    if (v21) {
      (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    }
    uint64_t v22 = *v8;
    if (*v8) {
      int v23 = *(_DWORD *)(v22 - 12) + 1;
    }
    else {
      int v23 = 1;
    }
    *(_DWORD *)(v22 - 12) = v23;
    uint64_t v24 = *v8;
    if (*v8) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 > 2 * v26) {
        goto LABEL_23;
      }
    }
    else if (3 * v27 > 4 * v26)
    {
      goto LABEL_23;
    }
    WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&),WTF::DefaultHash,WTF::HashTraits<unsigned long long>,WTF::HashMap<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(v8);
    goto LABEL_23;
  }
  uint64_t v18 = 0;
  int v19 = 1;
  while (v17 != v10)
  {
    if (v17 == -1) {
      uint64_t v18 = v16;
    }
    unsigned int v15 = (v15 + v19) & v11;
    uint64_t v16 = (void *)(v7 + 16 * v15);
    uint64_t v17 = *v16;
    ++v19;
    if (!*v16)
    {
      if (v18)
      {
        *uint64_t v18 = 0;
        v18[1] = 0;
        --*(_DWORD *)(*v8 - 16);
        uint64_t v16 = v18;
      }
      goto LABEL_12;
    }
  }
LABEL_23:
  uint64_t v28 = a1[5];
  unint64_t v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v29 = 2807;
  *((void *)v29 + 1) = 0;
  *((void *)v29 + 66) = (char *)v29 + 16;
  *((void *)v29 + 67) = 512;
  *((void *)v29 + 68) = 0;
  *((void *)v29 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v29 + 69) = 0;
  IPC::Encoder::encodeHeader(v29);
  uint64_t v37 = v29;
  long long v30 = (void *)IPC::Encoder::grow(v29, 8uLL, 8);
  if (v31 <= 7)
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  else
  {
    *long long v30 = v10;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v29, &v36);
    IPC::Encoder::operator<<<BOOL>(v29, a3);
    char v38 = a3[1];
    IPC::Encoder::operator<<<BOOL>(v29, &v38);
    IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v37, 0, 0);
    uint64_t result = (uint64_t)v37;
    uint64_t v37 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v32);
      return WTF::fastFree(v34, v35);
    }
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::matchAllCompleted(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 32));
  unint64_t v6 = *a3;
  unsigned int v7 = *((_DWORD *)a3 + 3);
  if (v7)
  {
    unint64_t v8 = v6 + 192 * v7;
    do
    {
      WebCore::ServiceWorkerClientData::isolatedCopy();
      long long v9 = v28;
      long long v10 = v29;
      *(_WORD *)(v6 + ++*(_DWORD *)(this + 32) = v30;
      *(_OWORD *)unint64_t v6 = v9;
      *(_OWORD *)(v6 + 16) = v10;
      WTF::URL::operator=(v6 + 40, (uint64_t)&v31);
      WTF::URL::operator=(v6 + 80, (uint64_t)&v32);
      long long v13 = v34;
      long long v12 = v35;
      uint64_t v14 = v36;
      *(_OWORD *)(v6 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v33;
      *(void *)(v6 + 168) = v14;
      *(_OWORD *)(v6 + 152) = v12;
      *(_OWORD *)(v6 + 136) = v13;
      uint64_t v15 = *(unsigned int *)(v6 + 188);
      if (v15) {
        WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v6 + 176), (WTF::StringImpl *)(*(void *)(v6 + 176) + 8 * v15));
      }
      uint64_t v16 = *(WTF **)(v6 + 176);
      if (v16)
      {
        *(void *)(v6 + 176) = 0;
        *(_DWORD *)(v6 + 184) = 0;
        WTF::fastFree(v16, v11);
      }
      uint64_t v17 = v37;
      uint64_t v37 = 0;
      *(void *)(v6 + 176) = v17;
      LODWORD(v17) = v38;
      int v38 = 0;
      *(_DWORD *)(v6 + 184) = v17;
      LODWORD(v17) = v39;
      int v39 = 0;
      *(_DWORD *)(v6 + 188) = v17;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v11);
      int v19 = v32;
      uint64_t v32 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2) {
          WTF::StringImpl::destroy(v19, v18);
        }
        else {
          *(_DWORD *)v19 -= 2;
        }
      }
      uint64_t v20 = v31;
      unint64_t v31 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v18);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
      v6 += 192;
    }
    while (v6 < v8);
    unint64_t v6 = *a3;
    int v21 = *((_DWORD *)a3 + 3);
  }
  else
  {
    int v21 = 0;
  }
  *a3 = 0;
  int v22 = *((_DWORD *)a3 + 2);
  a3[1] = 0;
  uint64_t v23 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v23 = &unk_1EE9F4738;
  *(void *)(v23 + 8) = a1;
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = v6;
  v27[0] = 0;
  v27[1] = 0;
  *(_DWORD *)(v23 + ++*(_DWORD *)(this + 32) = v22;
  *(_DWORD *)(v23 + 36) = v21;
  *(void *)&long long v28 = v23;
  WTF::callOnMainRunLoop();
  uint64_t v25 = v28;
  *(void *)&long long v28 = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  return WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v27, v24);
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::openWindow(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v15 = a2;
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v6 = *a4;
  *a4 = 0;
  unsigned int v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *unsigned int v7 = &unk_1EE9F4760;
  v7[1] = v6;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  long long v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)long long v9 = 2809;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 68) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v17 = v9;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, &v15);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a3);
  v16[0] = (uint64_t)v7;
  v16[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v17, v16, 0, 0);
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::claim(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v13 = a2;
  uint64_t v3 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v4 = *a3;
  *a3 = 0;
  uint64_t v5 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v5 = &unk_1EE9F47B8;
  v5[1] = v4;
  uint64_t v6 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  unsigned int v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v7 = 2801;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 68) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v15 = v7;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, &v13);
  v14[0] = (uint64_t)v5;
  v14[1] = v6;
  IPC::Connection::sendMessageWithAsyncReply(v3, &v15, v14, 0, 0);
  uint64_t v9 = v14[0];
  v14[0] = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::navigate(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v17 = a3;
  unsigned int v7 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v8 = *a5;
  *a5 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F47E0;
  v9[1] = v8;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2808;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  int v19 = v11;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v11, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v17);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a4);
  v18[0] = (uint64_t)v9;
  v18[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v19, v18, 0, 0);
  uint64_t v13 = v18[0];
  v18[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v19;
  int v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::focus(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *(os_unfair_lock_s **)(a1 + 40);
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9F4808;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2806;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 68) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v8, a2);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v4, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void WebKit::WebSWContextManagerConnection::close(WebKit::WebSWContextManagerConnection *this)
{
  v14[1] = *(WebCore::SWContextManager **)MEMORY[0x1E4F143B8];
  if (WTF::isMainRunLoop(this))
  {
    uint64_t v2 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *((unsigned __int8 *)this + 8);
      LODWORD(v14[0]) = 67109120;
      HIDWORD(v14[0]) = v3;
      _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "Service worker process is requested to stop all service workers (already stopped = %d)", (uint8_t *)v14, 8u);
    }
    if (!*((unsigned char *)this + 8))
    {
      *((unsigned char *)this + 8) = 1;
      uint64_t v4 = *((void *)this + 5);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 227;
      *((void *)v5 + 1) = 0;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 68) = 0;
      *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      v14[0] = v5;
      IPC::Connection::sendMessageImpl(v4, (uint64_t *)v14, 0, 0);
      uint64_t v7 = v14[0];
      v14[0] = 0;
      if (v7)
      {
        IPC::Encoder::~Encoder(v7, v6);
        uint64_t v7 = (IPC::Encoder *)WTF::fastFree(v11, v12);
      }
      uint64_t v8 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v7);
      WebCore::SWContextManager::stopAllServiceWorkers(v8);
      {
        uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v13);
      }
      WebKit::AuxiliaryProcess::enableTermination(WebKit::WebProcess::singleton(void)::process);
    }
  }
  else
  {
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)this + 4);
    uint64_t v9 = (WebCore::SWContextManager *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v9 = &unk_1EE9F4830;
    *((void *)v9 + 1) = this;
    v14[0] = v9;
    WTF::callOnMainRunLoop();
    uint64_t v10 = v14[0];
    v14[0] = 0;
    if (v10) {
      (*(void (**)(WebCore::SWContextManager *))(*(void *)v10 + 8))(v10);
    }
  }
}

uint64_t WebKit::WebSWContextManagerConnection::setThrottleState(atomic_uchar *volatile *this, char a2)
{
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
  uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v4 = &unk_1EE9F4858;
  *(void *)(v4 + 8) = this;
  *(unsigned char *)(v4 + 16) = a2;
  uint64_t v6 = v4;
  WTF::callOnMainRunLoop();
  uint64_t result = v6;
  if (v6) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::setInspectable(uint64_t a1, char a2)
{
  uint64_t v3 = WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v3 = &unk_1EE9F4880;
  *(unsigned char *)(v3 + 8) = a2;
  uint64_t v5 = v3;
  WTF::callOnMainRunLoop();
  uint64_t result = v5;
  if (v5) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::isThrottleable(WebKit::WebSWContextManagerConnection *this)
{
  return *((unsigned __int8 *)this + 176);
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::didFailHeartBeatCheck(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 2802;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v9 = v3;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, &v8);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  uint64_t v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::setAsInspected(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v11 = a2;
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v9 = &v11;
  char v10 = a3;
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 2814;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 68) = 0;
  *((void *)v4 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  long long v12 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(v4, (uint64_t)&v9);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v12, 0, 0);
  uint64_t result = v12;
  long long v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

IPC::Encoder *WebKit::WebSWContextManagerConnection::reportConsoleMessage(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v16 = a2;
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2811;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 68) = 0;
  *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v17 = v11;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v16);
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(v11, a3);
  IPC::ArgumentCoder<JSC::MessageSource,void>::encode<IPC::Encoder>(v11, a4);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a5);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v11, a6);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v17, 0, 0);
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

uint64_t WebKit::WebSWContextManagerConnection::removeNavigationFetch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 248);
  WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(a1 + 32));
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9F48A8;
  v7[1] = a1;
  v7[2] = a2;
  v7[3] = a3;
  uint64_t v9 = v7;
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, &v9);
  uint64_t result = (uint64_t)v9;
  uint64_t v9 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t WebCore::NetscapePlugInStreamLoaderClient::wantsAllStreams(WebCore::NetscapePlugInStreamLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::Widget::isLocalFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isRemoteFrameView(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::PluginViewBase::isPluginViewBase(WebCore::PluginViewBase *this)
{
  return 1;
}

uint64_t WebCore::Widget::isScrollbar(WebCore::Widget *this)
{
  return 0;
}

uint64_t WebCore::Widget::isScrollView(WebCore::Widget *this)
{
  return 0;
}

void WebKit::WebPluginInfoProvider::~WebPluginInfoProvider(WebKit::WebPluginInfoProvider *this)
{
  WebCore::PluginInfoProvider::~PluginInfoProvider(this);

  WTF::fastFree(v1, v2);
}

void WebKit::RemoteWorkerFrameLoaderClient::~RemoteWorkerFrameLoaderClient(WebKit::RemoteWorkerFrameLoaderClient *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
}

{
  WTF::StringImpl *v3;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::shouldUseCredentialStorage()
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::hasCustomUserAgent(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::userAgent@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)(this + 16);
  if (v3) {
    *v3 += 2;
  }
  *a2 = v3;
  return this;
}

void WebCore::LocalFrameLoaderClient::overrideContentSecurityPolicy(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::dataDetectionReferenceDate(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldLoadMediaElementURL(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::allowScript(WebCore::LocalFrameLoaderClient *this, uint64_t a2)
{
  return a2;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldForceUniversalAccessFromLocalURL(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldPaintBrokenImage(WebCore::LocalFrameLoaderClient *this, const URL *a2)
{
  return 1;
}

uint64_t WebKit::RemoteWorkerFrameLoaderClient::isRemoteWorkerFrameLoaderClient(WebKit::RemoteWorkerFrameLoaderClient *this)
{
  return 1;
}

void WebCore::LocalFrameLoaderClient::loadedSubresourceDomains(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t WebCore::LocalFrameLoaderClient::allowsContentJavaScriptFromMostRecentNavigation(WebCore::LocalFrameLoaderClient *this)
{
  return 1;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldEnableInAppBrowserPrivacyProtections(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::shouldUsePDFPlugin()
{
  return 0;
}

uint64_t WebCore::LocalFrameLoaderClient::isParentProcessAFullWebBrowser(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebKit::WebSWClientConnection::serverConnectionIdentifier(WebKit::WebSWClientConnection *this)
{
  return *((void *)this + 6);
}

uint64_t WebKit::WebSWClientConnection::messageSenderDestinationID(WebKit::WebSWClientConnection *this)
{
  return 0;
}

uint64_t WebKit::WebSWContextManagerConnection::pageIdentifier(WebKit::WebSWContextManagerConnection *this)
{
  return *((void *)this + 16);
}

atomic_uchar *volatile *WebKit::WebSWContextManagerConnection::ref(atomic_uchar *volatile *this)
{
  return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref(this + 4);
}

atomic_uchar *WebKit::WebSWContextManagerConnection::deref(atomic_uchar **this, void *a2)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(this[4], a2);
}

WTF::StringImpl *WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,BOOL>,WTF::String,WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable(WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,BOOL>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,BOOL>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,BOOL,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<BOOL>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>> const&)::{lambda(void)#1}>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v3 += 2;
  }
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t result = *(WTF::StringImpl **)a1;
  *(void *)a1 = v3;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages33NotificationManagerMessageHandler22GetPermissionStateSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t std::default_delete<WebCore::ResourceRequest const>::operator()[abi:sn180100](WebCore::ResourceRequestBase *this)
{
  uint64_t v2 = (const void *)*((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v2) {
    CFRelease(v2);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase(this);

  return WTF::fastFree(v3, v4);
}

uint64_t *WTF::Vector<WebCore::PluginInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  WTF::StringImpl *result = 0;
  result[1] = 0;
  if (!a3) {
    return v3;
  }
  if (a3 < 0x4924925)
  {
    uint64_t v5 = 56 * a3;
    uint64_t v6 = WTF::fastMalloc((WTF *)(56 * a3));
    *((_DWORD *)v3 + 2) = v5 / 0x38;
    uint64_t *v3 = v6;
    unsigned int v7 = *((_DWORD *)v3 + 3);
    do
    {
      WebCore::PluginInfo::PluginInfo(*v3 + 56 * v7, a2);
      unsigned int v7 = *((_DWORD *)v3 + 3) + 1;
      *((_DWORD *)v3 + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v7;
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
    return v3;
  }
  __break(0xC471u);
  return result;
}

uint64_t WebCore::PluginInfo::PluginInfo(uint64_t a1, uint64_t a2)
{
  char v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(_DWORD **)(a2 + 16);
  if (v6) {
    *v6 += 2;
  }
  *(void *)(a1 + 16) = v6;
  WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 24, a2 + 24);
  *(_WORD *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = *(_WORD *)(a2 + 40);
  unsigned int v7 = *(_DWORD **)(a2 + 48);
  if (v7) {
    *v7 += 2;
  }
  *(void *)(a1 + 48) = v7;
  return a1;
}

uint64_t WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(a2 + 12);
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 12) = v3;
  if (!v3) {
    return v2;
  }
  if (!(v3 >> 27))
  {
    uint64_t v5 = (void *)WTF::fastMalloc((WTF *)(32 * v3));
    *(_DWORD *)(v2 + 8) = v3;
    *(void *)uint64_t v2 = v5;
    uint64_t v6 = *(unsigned int *)(a2 + 12);
    if (v6)
    {
      uint64_t v7 = *(void *)a2;
      uint64_t v8 = 32 * v6;
      do
      {
        uint64_t v5 = WebCore::MimeClassInfo::MimeClassInfo(v5, v7) + 4;
        v7 += 32;
        v8 -= 32;
      }
      while (v8);
    }
    return v2;
  }
  __break(0xC471u);
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    char v4 = (uint64_t *)(a1 + 8);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *char v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 2;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Encoder *WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::sourceStopped(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  uint64_t v1 = *((void *)this + 6);
  uint64_t v2 = (uint64_t *)((char *)this + 32);
  if (*(unsigned char *)(*((void *)this + 5) + 293))
  {
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    char v4 = v3;
    __int16 v5 = 1484;
  }
  else
  {
    uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    char v4 = v3;
    __int16 v5 = 1485;
  }
  *(_WORD *)uint64_t v3 = v5;
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 68) = 0;
  *((void *)v3 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, v2);
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::audioUnitWillStart(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  uint64_t v1 = WebCore::AudioSession::sharedSession(this);
  uint64_t v2 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 72))(v1);
  float v4 = v3 / 50.0;
  uint64_t v5 = WebCore::AudioSession::sharedSession(v2);
  uint64_t v6 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 104))(v5);
  if (v4 < (float)(unint64_t)v6)
  {
    uint64_t v7 = WebCore::AudioSession::sharedSession(v6);
    uint64_t v6 = (WebCore::AudioSession *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)v7 + 112))(v7, (unint64_t)v4);
  }
  uint64_t v8 = *(uint64_t (**)(void))(*(void *)WebCore::AudioSession::sharedSession(v6) + 32);

  return v8();
}

uint64_t WebCore::RealtimeMediaSourceObserver::preventSourceFromEnding(WebCore::RealtimeMediaSourceObserver *this)
{
  return 0;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCount(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCountWithoutThreadCheck(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 24);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 24) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::audioSamplesAvailable(uint64_t a1, uint64_t a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (WebCore::CAAudioStreamDescription *)(a1 + 64);
  if (!*(unsigned char *)(a1 + 144) || (WebCore::CAAudioStreamDescription::operator==() & 1) == 0)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    if (*(_DWORD *)(v11 + 16) != 1)
    {
      long long v35 = (WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *)std::__throw_bad_variant_access[abi:sn180100]();
      return;
    }
    std::optional<WebCore::CAAudioStreamDescription>::operator=[abi:sn180100]<AudioStreamBasicDescription const&,void>(v10, *(const AudioStreamBasicDescription **)(v11 + 8));
    if (!*(unsigned char *)(a1 + 144) || (WebCore::CAAudioStreamDescription::sampleRate(v10), !*(unsigned char *)(a1 + 144)))
    {
      __break(1u);
      goto LABEL_20;
    }
    uint64_t v13 = (const WebCore::CAAudioStreamDescription *)(v12 + v12);
    uint64_t v14 = (const AudioStreamBasicDescription *)WebCore::CAAudioStreamDescription::streamDescription(v10);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38, v14);
    WebKit::ProducerSharedCARingBuffer::allocate((WebKit::ProducerSharedCARingBuffer *)v38, v13, (uint64_t)v39);
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38);
    if (!v41)
    {
      __break(0xC471u);
      JUMPOUT(0x199196C4CLL);
    }
    uint64_t v15 = (WebCore::CARingBuffer *)v39[0];
    v39[0] = 0;
    uint64_t v36 = v15;
    WTF::MachSendRight::MachSendRight();
    *(_OWORD *)&v37[8] = v40;
    uint64_t v16 = *(WebCore::CARingBuffer **)(a1 + 56);
    uint64_t v17 = v36;
    uint64_t v36 = 0;
    *(void *)(a1 + 56) = v17;
    if (v16) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](a1 + 56, v16);
    }
    uint64_t v18 = *(void *)(a1 + 48);
    WebCore::CAAudioStreamDescription::CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38, v14);
    int v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v19 = 1486;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 66) = (char *)v19 + 16;
    *((void *)v19 + 67) = 512;
    *((void *)v19 + 68) = 0;
    *((void *)v19 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v19 + 69) = 0;
    IPC::Encoder::encodeHeader(v19);
    uint64_t v42 = v19;
    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v19, (uint64_t *)(a1 + 32));
    IPC::ArgumentCoder<WebKit::ConsumerSharedCARingBufferHandle,void>::encode(v19, (unint64_t)v37);
    uint64_t v20 = WebCore::CAAudioStreamDescription::streamDescription((WebCore::CAAudioStreamDescription *)v38);
    IPC::ArgumentCoder<AudioStreamBasicDescription,void>::encode(v19, v20);
    IPC::Connection::sendMessageImpl(v18, (uint64_t *)&v42, 0, 0);
    int v22 = v42;
    uint64_t v42 = 0;
    if (v22)
    {
      IPC::Encoder::~Encoder(v22, v21);
      WTF::fastFree(v33, v34);
    }
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebCore::CAAudioStreamDescription *)v38);
    WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)v37);
    uint64_t v23 = v36;
    uint64_t v36 = 0;
    if (v23) {
      std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100]((int)&v36, v23);
    }
    std::__optional_destruct_base<WebKit::ProducerSharedCARingBuffer::Pair,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39);
  }
  uint64_t v24 = *(WebCore::CARingBuffer **)(a1 + 56);
  if (((unsigned int (*)(const AudioBufferList **))(*a3)->mBuffers[0].mData)(a3) != 1)
  {
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x199196C0CLL);
  }
  WebCore::CARingBuffer::store(v24, a3[5]);
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v26 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v26 = 1483;
  *((void *)v26 + 1) = 0;
  *((void *)v26 + 66) = (char *)v26 + 16;
  *((void *)v26 + 67) = 512;
  *((void *)v26 + 68) = 0;
  *((void *)v26 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v26 + 69) = 0;
  IPC::Encoder::encodeHeader(v26);
  v38[0] = v26;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v26, (uint64_t *)(a1 + 32));
  IPC::ArgumentCoder<WTF::MediaTime,void>::encode(v26, a2);
  unint64_t v27 = (void *)IPC::Encoder::grow(v26, 8uLL, 8);
  if (v28 <= 7)
  {
    __break(0xC471u);
    JUMPOUT(0x199196C2CLL);
  }
  *unint64_t v27 = a5;
  IPC::Connection::sendMessageImpl(v25, (uint64_t *)v38, 0, 0);
  __int16 v30 = v38[0];
  v38[0] = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v31, v32);
  }
}

void non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::~Source(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
}

{
  WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::operator delete((WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *)((char *)this - 16));
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCount(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::ptrCountWithoutThreadCheck(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::incrementPtrCount(uint64_t this)
{
  return this;
}

uint64_t non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::decrementPtrCount(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 8);
  if (v1)
  {
    *(_DWORD *)(this + ++*(_DWORD *)(this + 8) = v1 - 1;
  }
  else
  {
    this = 286;
    __break(0xC471u);
  }
  return this;
}

void non-virtual thunk to'WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::audioSamplesAvailable(uint64_t a1, uint64_t a2, const AudioBufferList **a3, uint64_t a4, uint64_t a5)
{
}

void WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::~Source(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *this)
{
  WebCore::RealtimeMediaSource::removeAudioSampleObserver();
  WebCore::RealtimeMediaSource::removeObserver(*((WebCore::RealtimeMediaSource **)this + 5), this);
  if (*((unsigned char *)this + 144)) {
    WebCore::CAAudioStreamDescription::~CAAudioStreamDescription((WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *)((char *)this + 64));
  }
  uint64_t v2 = (WebCore::CARingBuffer *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v2) {
    std::default_delete<WebKit::ConsumerSharedCARingBuffer>::operator()[abi:sn180100](this + 56, v2);
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 6);
  uint64_t v3 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 144))(v3);
  }

  MEMORY[0x1F4171960](this);
}

double WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::operator delete(WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source *a1)
{
  WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source::~Source(a1);
  if (*(_DWORD *)(v1 + 24))
  {
    *(void *)(v1 + 144) = 0;
    double result = 0.0;
    *(_OWORD *)(v1 + 112) = 0u;
    *(_OWORD *)(v1 + 12++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0u;
    *(_OWORD *)(v1 + 96) = 0u;
    *(_OWORD *)(v1 + 4++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(_OWORD *)(v1 + ++*(_DWORD *)(this + 32) = 0u;
    *(_OWORD *)uint64_t v1 = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

_DWORD **WTF::Ref<WebKit::WebSWClientConnection,WTF::RawPtrTraits<WebKit::WebSWClientConnection>,WTF::DefaultRefDerefTraits<WebKit::WebSWClientConnection>>::~Ref(_DWORD **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 176, a2);
    float v4 = *(WTF::StringImpl **)(a1 + 80);
    *(void *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, v3);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v3);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>>::copy(uint64_t result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *a2;
  uint64_t v5 = *((unsigned int *)a2 + 2);
  int v6 = *((_DWORD *)a2 + 3);
  if (!v6) {
    goto LABEL_24;
  }
  uint64_t v7 = *a2;
  if (v5)
  {
    uint64_t v8 = 0;
    while (!*(void *)(v4 + v8))
    {
      v8 += 24;
      if (24 * v5 == v8) {
        goto LABEL_24;
      }
    }
    uint64_t v7 = v4 + v8;
  }
  uint64_t v9 = v4 + 24 * v5;
  if (v7 == v9) {
    goto LABEL_24;
  }
LABEL_9:
  WTF::String::isolatedCopy();
  uint64_t v11 = v17;
  uint64_t v17 = 0;
  double v12 = *(WTF::StringImpl **)v7;
  *(void *)uint64_t v7 = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v10);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v10);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  uint64_t v14 = *(unsigned int *)(v7 + 16);
  if (v14 != -1)
  {
    uint64_t v20 = &v19;
    ((void (*)(WTF::StringImpl **__return_ptr, char **, uint64_t))off_1EE9F3AB0[v14])(&v17, &v20, v7 + 8);
    double result = std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>>::__generic_assign[abi:sn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<WTF::String,BOOL,unsigned int,double>,(std::__variant_detail::_Trait)1>>(v7 + 8, (uint64_t)&v17);
    if (v18 != -1) {
      double result = ((uint64_t (*)(char **, WTF::StringImpl **))off_1EE9F3A90[v18])(&v20, &v17);
    }
    while (1)
    {
      v7 += 24;
      if (v7 == v9) {
        break;
      }
      if (*(void *)v7)
      {
        if (v7 != v9) {
          goto LABEL_9;
        }
        break;
      }
    }
    uint64_t v4 = *a2;
    LODWORD(v5) = *((_DWORD *)a2 + 2);
    int v6 = *((_DWORD *)a2 + 3);
LABEL_24:
    *a2 = 0;
    a2[1] = 0;
    *(void *)uint64_t v3 = v4;
    *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = v5;
    *(_DWORD *)(v3 + 12) = v6;
    int v15 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    *(_DWORD *)(v3 + 16) = v15;
    LOBYTE(v15) = *((unsigned char *)a2 + 20);
    *((unsigned char *)a2 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *(unsigned char *)(v3 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v15;
    return result;
  }
  uint64_t v16 = std::__throw_bad_variant_access[abi:sn180100]();
  return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_(v16);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = WTF::String::isolatedCopy();
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_(unsigned char *a1@<X1>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = *a1;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_(_DWORD *a1@<X1>, _DWORD *a2@<X8>)
{
  *a2 = *a1;
  a2[2] = 2;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIZN3WTF21CrossThreadCopierBaseILb0ELb0ENS_7variantIJNS8_6StringEbjdEEEE4copyEOSC_EUlOT_E_EEJONS0_6__baseILNS0_6_TraitE1EJSB_bjdEEEEEEDcSF_DpT0_@<D0>(double *a1@<X1>, uint64_t a2@<X8>)
{
  double result = *a1;
  *(double *)a2 = *a1;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = 3;
  return result;
}

WTF::StringImpl *WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::NotificationPayload>>::copy<std::optional<WebCore::NotificationPayload>>(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2 = (uint64_t)result;
  if (*(unsigned char *)(a2 + 136))
  {
    WTF::URL::isolatedCopy();
    WTF::String::isolatedCopy();
    uint64_t v16 = *(void *)(a2 + 48);
    char v17 = *(unsigned char *)(a2 + 56);
    char v4 = *(unsigned char *)(a2 + 120);
    if (v4)
    {
      char v25 = *(unsigned char *)(a2 + 64);
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      WTF::String::isolatedCopy();
      __int16 v5 = *(_WORD *)(a2 + 112);
      char v4 = v25;
      *(_OWORD *)char v19 = v26;
      *(_OWORD *)uint64_t v20 = v27;
      int v21 = v28;
      __int16 v22 = v5;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
    }
    char v18 = v4;
    char v23 = v6;
    char v24 = *(unsigned char *)(a2 + 128);
    std::__optional_destruct_base<WebCore::NotificationPayload,false>::__optional_destruct_base[abi:sn180100]<WebCore::NotificationPayload>(v2, (uint64_t)&v14);
    if (v23)
    {
      uint64_t v8 = v21;
      int v21 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      uint64_t v9 = v20[1];
      v20[1] = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v7);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v10 = v20[0];
      v20[0] = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v7);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v11 = v19[1];
      v19[1] = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      double v12 = v19[0];
      v19[0] = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2) {
          WTF::StringImpl::destroy(v12, v7);
        }
        else {
          *(_DWORD *)v12 -= 2;
        }
      }
    }
    uint64_t v13 = v15;
    int v15 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v7);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    double result = v14;
    uint64_t v14 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(unsigned char *)double result = 0;
    *((unsigned char *)result + 136) = 0;
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ServiceWorkerClientData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 192 * v3));
  }
  char v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ServiceWorkerClientData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    unsigned int v3 = (WTF::StringImpl **)result;
    do
    {
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(v3 + 22), a2);
      char v4 = v3[10];
      v3[10] = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      double result = v3[5];
      v3[5] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          double result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      v3 += 24;
    }
    while (v3 != (WTF::StringImpl **)a2);
  }
  return result;
}

uint64_t WebKit::sendMessage(WebCore::DeprecatedGlobalSettings *a1, uint64_t a2)
{
  char v4 = (WebCore::SWContextManager *)WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(a1);
  if (!v4)
  {
    if (a1)
    {
      int v7 = 0;
      goto LABEL_10;
    }
    uint64_t v8 = (WebCore::SWContextManager *)WebCore::SWContextManager::singleton(v4);
    uint64_t v9 = WebCore::SWContextManager::connection(v8);
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 168))(v9);
      int v7 = 0;
      goto LABEL_10;
    }
    goto LABEL_15;
  }
  {
    double v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, *(atomic_uchar *volatile **)(v5 + 24));
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
  {
    char v6 = *(uint64_t (**)(void))(**(void **)a2 + 16);
  }
  else
  {
    do
    {
      __break(1u);
LABEL_15:
      int v7 = 1;
LABEL_10:
      {
        uint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v14);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v15, *(atomic_uchar *volatile **)(WebKit::WebProcess::singleton(void)::process + 40));
    }
    while (v7);
    char v6 = *(uint64_t (**)(void))(**(void **)a2 + 16);
  }
  uint64_t v10 = v6();
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v15);
  return v10;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZN6WebKitL23sendNotificationMessageIN8Messages33NotificationManagerMessageHandler39PageWasNotifiedOfNotificationPermissionEEEbOT_PNS2_7WebPageEEUlRS7_T0_E_bJRN3IPC10ConnectionEyEE4callESG_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 606;
  *((void *)v5 + 1) = a3;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  double v12 = v5;
  int v7 = IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v12, 0, 0);
  uint64_t v8 = v12;
  double v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v6);
    WTF::fastFree(v10, v11);
  }
  return v7 == 0;
}

BOOL WTF::Detail::CallableWrapper<BOOL WebKit::sendNotificationMessageWithAsyncReply<Messages::NotificationManagerMessageHandler::ShowNotification,WTF::CompletionHandler<void ()(void)>>(Messages::NotificationManagerMessageHandler::ShowNotification &&,WebKit::WebPage *,WTF::CompletionHandler<void ()(void)> &&)::{lambda(Messages::NotificationManagerMessageHandler::ShowNotification&,WebKit::WebPage *)#1},BOOL,IPC::Connection &,unsigned long long>::call(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = *v5;
  uint64_t *v5 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9F3B40;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 609;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WebCore::NotificationData,void>::encode(v10, *(void *)v6);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WebCore::NotificationResources>,WTF::DefaultRefDerefTraits<WebCore::NotificationResources>>,void>::encode<IPC::Encoder,WebCore::NotificationResources>(v10, *(void **)(v6 + 8));
  v19[0] = (uint64_t)v8;
  v19[1] = v9;
  int v12 = IPC::Connection::sendMessageWithAsyncReply(a2, &v20, v19, 0, 0);
  uint64_t v13 = v19[0];
  v19[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v20;
  uint64_t v20 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v17, v18);
  }
  if (v12) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v9 == 0;
  }
  return !v15;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::ShowNotification,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3B40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::ShowNotification,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3B40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::ShowNotification,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::expand(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(a1, v5, a2);
}

_OWORD *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(uint64_t *a1, unsigned int a2, long long *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v11 = a2;
    uint64_t v12 = v9 + 16;
    do
    {
      *(void *)(v12 + ++*(_DWORD *)(this + 32) = 0;
      *(_OWORD *)uint64_t v12 = 0uLL;
      *(_OWORD *)(v12 + 16) = 0uLL;
      v12 += 48;
      --v11;
    }
    while (v11);
  }
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      BOOL v15 = (long long *)(v6 + 48 * v13);
      if (*v15 >= (unsigned __int128)2uLL)
      {
        uint64_t v16 = *a1;
        if (*a1) {
          unsigned int v17 = *(_DWORD *)(v16 - 8);
        }
        else {
          unsigned int v17 = 0;
        }
        int v24 = -1640531527;
        __int16 v25 = 0;
        char v26 = 0;
        WTF::addArgs<WTF::UUID>(&v24, (void *)(v6 + 48 * v13));
        int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v24);
        int v19 = 0;
        do
        {
          uint64_t v20 = (_OWORD *)(v16 + 48 * (v18 & v17));
          int v18 = ++v19 + (v18 & v17);
        }
        while (*v20 != 0);
        long long v21 = *v15;
        long long v22 = v15[2];
        v20[1] = v15[1];
        void v20[2] = v22;
        _OWORD *v20 = v21;
        if (v15 == a3) {
          uint64_t v14 = v20;
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    double result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZN6WebKitL23sendNotificationMessageIN8Messages33NotificationManagerMessageHandler18CancelNotificationEEEbOT_PNS2_7WebPageEEUlRS7_T0_E_bJRN3IPC10ConnectionEyEE4callESG_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 602;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v6, *(void *)v5);
  IPC::ArgumentCoder<WTF::UUID,void>::encode(v6, *(uint64_t **)(v5 + 8));
  int v8 = IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v13, 0, 0);
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8 == 0;
}

BOOL WTF::Detail::CallableWrapper<BOOL WebKit::sendNotificationMessageWithAsyncReply<Messages::NotificationManagerMessageHandler::RequestPermission,WTF::CompletionHandler<void ()(BOOL)>>(Messages::NotificationManagerMessageHandler::RequestPermission &&,WebKit::WebPage *,WTF::CompletionHandler<void ()(BOOL)> &&)::{lambda(Messages::NotificationManagerMessageHandler::RequestPermission&,WebKit::WebPage *)#1},BOOL,IPC::Connection &,unsigned long long>::call(uint64_t a1, os_unfair_lock_s *a2, uint64_t a3)
{
  uint64_t v6 = *(uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 16);
  uint64_t v7 = *v5;
  uint64_t *v5 = 0;
  int v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v8 = &unk_1EE9F3BB8;
  v8[1] = v7;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 607;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v20 = v10;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v10, *v6);
  v19[0] = (uint64_t)v8;
  v19[1] = v9;
  int v12 = IPC::Connection::sendMessageWithAsyncReply(a2, &v20, v19, 0, 0);
  uint64_t v13 = v19[0];
  v19[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = v20;
  uint64_t v20 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v17, v18);
  }
  if (v12) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v9 == 0;
  }
  return !v15;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::RequestPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3BB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::RequestPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3BB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::RequestPermission,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

uint64_t *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::remove(uint64_t *result, void *a2)
{
  *a2 = 1;
  a2[1] = 0;
  ++*(_DWORD *)(*result - 16);
  uint64_t v2 = *result;
  if (*result) {
    int v3 = *(_DWORD *)(v2 - 12) - 1;
  }
  else {
    int v3 = -1;
  }
  *(_DWORD *)(v2 - 12) = v3;
  uint64_t v4 = *result;
  if (*result)
  {
    unsigned int v5 = 6 * *(_DWORD *)(v4 - 12);
    unsigned int v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9) {
      return (uint64_t *)WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::rehash(result, v6 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v16 = -1640531527;
  __int16 v17 = 0;
  char v18 = 0;
  WTF::addArgs<WTF::UUID>(&v16, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v16);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  unsigned int v9 = v6 & v5;
  double result = (uint64_t *)(v2 + 48 * (v6 & v5));
  uint64_t v11 = *result;
  uint64_t v12 = result[1];
  if (v12 != v8 || v11 != v7)
  {
    int v14 = 1;
    while (v11 | v12)
    {
      unsigned int v9 = (v9 + v14) & v5;
      double result = (uint64_t *)(v2 + 48 * v9);
      uint64_t v11 = *result;
      uint64_t v12 = result[1];
      BOOL v15 = v12 == v8 && v11 == v7;
      ++v14;
      if (v15) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 48 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

BOOL _ZN3WTF6Detail15CallableWrapperIZN6WebKitL23sendNotificationMessageIN8Messages33NotificationManagerMessageHandler22DidDestroyNotificationEEEbOT_PNS2_7WebPageEEUlRS7_T0_E_bJRN3IPC10ConnectionEyEE4callESG_y(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(uint64_t ***)(a1 + 8);
  int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v6 = 604;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v13 = v6;
  IPC::ArgumentCoder<WTF::UUID,void>::encode(v6, *v5);
  int v8 = IPC::Connection::sendMessageImpl(a2, (uint64_t *)&v13, 0, 0);
  unsigned int v9 = v13;
  uint64_t v13 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v11, v12);
  }
  return v8 == 0;
}

uint64_t WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::UUID,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::UUID>>,WTF::UUID>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  if (*(void *)result)
  {
    int v6 = *(_DWORD *)(v4 - 8);
    int v19 = -1640531527;
    __int16 v20 = 0;
    char v21 = 0;
    WTF::addArgs<WTF::UUID>(&v19, a2);
    double result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v19);
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    unsigned int v9 = result & v6;
    uint64_t v10 = (uint64_t *)(v4 + 48 * (result & v6));
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (v12 == v8 && v11 == v7)
    {
LABEL_13:
      uint64_t v17 = v4 + 48 * v9;
      long long v18 = *(_OWORD *)(v17 + 32);
      *(_OWORD *)a3 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)(a3 + 16) = v18;
      return result;
    }
    int v14 = 1;
    while (v11 | v12)
    {
      unsigned int v9 = (v9 + v14) & v6;
      BOOL v15 = (uint64_t *)(v4 + 48 * v9);
      uint64_t v11 = *v15;
      uint64_t v12 = v15[1];
      BOOL v16 = v12 == v8 && v11 == v7;
      ++v14;
      if (v16) {
        goto LABEL_13;
      }
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationManager::didShowNotification(WTF::UUID const&)::$_0,void,WebCore::Notification *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    MEMORY[0x1F416CF80](a2);
  }
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebNotificationManager::didClickNotification(WTF::UUID const&)::$_0,void,WebCore::Notification *>::call(WTF *result, WebCore::Notification *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (WTF::isMainRunLoop(result))
    {
      v3[8] = 0;
      v3[24] = 0;
      WebCore::UserGestureIndicator::UserGestureIndicator();
      WebCore::Notification::dispatchClickEvent(a2);
      return (WTF *)MEMORY[0x1997355E0](v3);
    }
    else
    {
      return (WTF *)WebCore::Notification::dispatchClickEvent(a2);
    }
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationManager::didCloseNotifications(WTF::Vector<WTF::UUID,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::Notification *>::call(uint64_t a1, uint64_t a2)
{
  if (a2) {
    MEMORY[0x1F416CF90](a2);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::PluginView::Stream::start(void)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F3C80;
  uint64_t v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 56))(v2);
    }
    else {
      --v2[4];
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::PluginView::Stream::start(void)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F3C80;
  int v3 = (_DWORD *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v3 + 56))(v3);
    }
    else {
      --v3[4];
    }
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::Detail::CallableWrapper<WebKit::PluginView::Stream::start(void)::$_0,void,WTF::RefPtr<WebCore::NetscapePlugInStreamLoader,WTF::RawPtrTraits<WebCore::NetscapePlugInStreamLoader>,WTF::DefaultRefDerefTraits<WebCore::NetscapePlugInStreamLoader>> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  *a2 = 0;
  double result = *(_DWORD **)(v2 + 248);
  *(void *)(v2 + 24++*(_DWORD *)(this + 8) = v3;
  if (result)
  {
    if (result[4] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[4];
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebKit::PluginView::*&)(void),WebKit::PluginView*&>,void>::call(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

atomic_uchar *WTF::Detail::CallableWrapper<WebKit::PluginView::redeliverManualStream(void)::$_0,void,WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>> &&>::call(uint64_t a1, const WebCore::SharedBuffer **a2)
{
  return WebKit::PluginView::manualLoadDidReceiveData(*(WebKit::PluginView **)(a1 + 8), *a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = (uint64_t *)(v6 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          char v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *char v26 = *v13;
          uint64_t v28 = v6 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          v26[1] = v29;
          uint64_t v30 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          if (v30) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          if (v13 == a3) {
            uint64_t v12 = v26;
          }
        }
        else
        {
          uint64_t v15 = v6 + 16 * v11;
          uint64_t v16 = *(void *)(v15 + 8);
          *(void *)(v15 + ++*(_DWORD *)(this + 8) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    uint64_t v12 = 0;
    double result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::remove(uint64_t *a1, void *a2)
{
  double result = (uint64_t *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    double result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebKit::SpeechRecognitionRealtimeMediaSourceManager::Source>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RealtimeMediaSourceIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::scheduleJobInServer(WebCore::ServiceWorkerJobData const&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F3CF8;
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)(a1 + 4), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::scheduleJobInServer(WebCore::ServiceWorkerJobData const&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F3CF8;
  WebCore::ServiceWorkerJobData::~ServiceWorkerJobData((WebCore::ServiceWorkerJobData *)(a1 + 32), a2);

  return WTF::fastFree((WTF *)a1, v3);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::scheduleJobInServer(WebCore::ServiceWorkerJobData const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  uint64_t v2 = a1 + 32;
  uint64_t v3 = v1[3];
  v1 += 3;
  uint64_t v4 = (*(uint64_t (**)(void *))(v3 + 56))(v1);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2789;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WebCore::ServiceWorkerJobData,void>::encode(v5, v2);
  (*(void (**)(void *, IPC::Encoder **, void))(*v1 + 32))(v1, &v10, 0);
  double result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::~CallableWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_1EE9F3D20;
  WTF::Ref<WebKit::WebSWClientConnection,WTF::RawPtrTraits<WebKit::WebSWClientConnection>,WTF::DefaultRefDerefTraits<WebKit::WebSWClientConnection>>::~Ref((_DWORD **)(a1 + 16));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::~CallableWrapper(WTF *a1)
{
  *(void *)a1 = &unk_1EE9F3D20;
  WTF::Ref<WebKit::WebSWClientConnection,WTF::RawPtrTraits<WebKit::WebSWClientConnection>,WTF::DefaultRefDerefTraits<WebKit::WebSWClientConnection>>::~Ref((_DWORD **)a1 + 2);

  return WTF::fastFree(a1, v2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::removeServiceWorkerRegistrationInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = v2[3];
  v2 += 3;
  uint64_t v4 = (*(uint64_t (**)(void *))(v3 + 56))(v2);
  int v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v5 = 2786;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v5, v1);
  (*(void (**)(void *, IPC::Encoder **, void))(*v2 + 32))(v2, &v10, 0);
  double result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3D48;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3D48;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    int v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11) {
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v2);
  }
  if (v10)
  {
    if (v10 == 1)
    {
      char v3 = v8[0];
      uint64_t v4 = v9;
      if (v9) {
        *v9 += 2;
      }
      v12[0] = v3;
      uint64_t v13 = v4;
      int v14 = 1;
      goto LABEL_14;
    }
    int v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  int v14 = 0;
LABEL_14:
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 16))(v7, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v14 != -1) {
    uint64_t result = ((uint64_t (*)(char *, char *))off_1EE9F3D70[v14])(&v15, v12);
  }
  if (v11)
  {
    if (v10 != -1) {
      return ((uint64_t (*)(char *, char *))off_1EE9F3D60[v10])(v12, v8);
    }
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::ScheduleUnregisterJobInServer,WebKit::WebSWClientConnection::scheduleUnregisterJobInServer(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,std::variant<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(uint64_t *a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F3D70[v4])(&v5, v3);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJbN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJbS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F3D90;
  char v3 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v4])(&v7, a1 + 24);
  }
  *(_DWORD *)(a1 + 4++*(_DWORD *)(this + 8) = -1;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F3D90;
  char v3 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v4])(&v7, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::matchRegistration(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1 + 7;
  uint64_t v5 = v2[3];
  v2 += 3;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v2);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2782;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v16 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  uint64_t v8 = a1[2];
  a1[2] = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F3DB8;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v2 + 40))(v2, &v16, v15, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchRegistration,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3DB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchRegistration,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3DB8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchRegistration,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerRegistrationData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>>((WTF::StringImpl *)v8, a2);
    if (v8[360])
    {
      uint64_t v4 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 16))(v4, v8);
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      return (WTF::StringImpl *)std::__optional_destruct_base<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v5);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v8, v3);
      return _ZZN3IPC10Connection11cancelReplyIN8Messages21WebSWServerConnection17MatchRegistrationEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore29ServiceWorkerRegistrationDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v2);
    }
  }
  else
  {
    char v7 = (uint64_t *)(a1 + 8);
    return _ZZN3IPC10Connection11cancelReplyIN8Messages21WebSWServerConnection17MatchRegistrationEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore29ServiceWorkerRegistrationDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(v7);
  }
}

WTF::StringImpl *IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>>(WTF::StringImpl *result, uint64_t *a2)
{
  uint64_t v3 = result;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  uint64_t v5 = (WTF::StringImpl *)*a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a2;
        uint64_t v12 = a2[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_21;
  }
  uint64_t v8 = (unsigned __int8 *)v5 + v7;
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_21:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = (WTF::StringImpl *)*a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_22;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_22:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16 && v6) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v16 + 16))(v16, v5);
    }
    v28[0] = 0;
    char v39 = 0;
    goto LABEL_24;
  }
  if (!v9)
  {
    v28[0] = 0;
    char v38 = 0;
    char v39 = 1;
    goto LABEL_14;
  }
  uint64_t result = (WTF::StringImpl *)IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a2, v40);
  if (v50)
  {
    uint64_t result = (WTF::StringImpl *)WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v28, (uint64_t)v40);
    char v38 = 1;
    char v39 = 1;
    if (v50)
    {
      if (v49)
      {
        int v10 = v48;
        uint64_t v48 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            WTF::StringImpl::destroy(v10, v5);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
      }
      if (v47)
      {
        unint64_t v21 = v46;
        long long v46 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2) {
            WTF::StringImpl::destroy(v21, v5);
          }
          else {
            *(_DWORD *)v21 -= 2;
          }
        }
      }
      if (v45)
      {
        unsigned int v22 = v44;
        long long v44 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, v5);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
      }
      int v23 = v43;
      char v43 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v5);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      uint64_t result = v42;
      uint64_t v42 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      if (v41 != -1) {
        uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v41])(&v27, v40);
      }
    }
  }
  else
  {
    v28[0] = 0;
    char v39 = 0;
  }
  if (v39) {
    goto LABEL_14;
  }
LABEL_24:
  uint64_t v5 = (WTF::StringImpl *)*a2;
  uint64_t v17 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = (WTF::StringImpl *)a2[3];
  if (!result
    || !v17
    || (uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *, WTF::StringImpl *))(*(void *)result + 16))(result, v5), !v39))
  {
    char v11 = 0;
    *(unsigned char *)uint64_t v3 = 0;
    goto LABEL_16;
  }
LABEL_14:
  *(unsigned char *)uint64_t v3 = 0;
  *((unsigned char *)v3 + 352) = 0;
  char v11 = 1;
  if (v38)
  {
    uint64_t result = (WTF::StringImpl *)WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v3, (uint64_t)v28);
    *((unsigned char *)v3 + 352) = 1;
  }
LABEL_16:
  *((unsigned char *)v3 + 36IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v11;
  if (v39 && v38)
  {
    if (v37)
    {
      unint64_t v20 = v36;
      uint64_t v36 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2) {
          WTF::StringImpl::destroy(v20, v5);
        }
        else {
          *(_DWORD *)v20 -= 2;
        }
      }
    }
    if (v35)
    {
      unsigned int v24 = v34;
      long long v34 = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v5);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
    }
    if (v33)
    {
      uint64_t v25 = v32;
      uint64_t v32 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 2) {
          WTF::StringImpl::destroy(v25, v5);
        }
        else {
          *(_DWORD *)v25 -= 2;
        }
      }
    }
    char v26 = v31;
    unint64_t v31 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v5);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    uint64_t result = v30;
    uint64_t v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v29 != -1) {
      uint64_t result = (WTF::StringImpl *)((uint64_t (*)(unsigned char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v29])(v40, v28);
    }
  }
  if (!*((unsigned char *)v3 + 360))
  {
    uint64_t v18 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WTF::StringImpl *)a2[3];
    if (result)
    {
      if (v18)
      {
        unint64_t v19 = *(uint64_t (**)(void))(*(void *)result + 16);
        return (WTF::StringImpl *)v19();
      }
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 360) && *(unsigned char *)(a1 + 352))
  {
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 280, a2);
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 208, v4);
    std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100](a1 + 136, v5);
    unint64_t v7 = *(WTF::StringImpl **)(a1 + 80);
    *(void *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v6);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t v8 = *(WTF::StringImpl **)(a1 + 32);
    *(void *)(a1 + ++*(_DWORD *)(this + 32) = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v6);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    uint64_t v9 = *(unsigned int *)(a1 + 24);
    if (v9 != -1) {
      ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v9])(&v10, a1);
    }
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 24) = -1;
  }
  return a1;
}

WTF::StringImpl *_ZZN3IPC10Connection11cancelReplyIN8Messages21WebSWServerConnection17MatchRegistrationEN3WTF17CompletionHandlerIFvONSt3__18optionalIN7WebCore29ServiceWorkerRegistrationDataEEEEEEEEvOT0_ENKUlTpTnmNS7_16integer_sequenceImJXspT_EEEEE_clIJLm0EEEEDaSI_(uint64_t *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  v9[0] = 0;
  char v19 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v9);
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v19)
  {
    if (v18)
    {
      uint64_t v4 = v17;
      uint64_t v17 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, v3);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
    if (v16)
    {
      uint64_t v5 = v15;
      uint64_t v15 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2) {
          WTF::StringImpl::destroy(v5, v3);
        }
        else {
          *(_DWORD *)v5 -= 2;
        }
      }
    }
    if (v14)
    {
      unint64_t v6 = v13;
      uint64_t v13 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v3);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
    unint64_t v7 = v12;
    uint64_t v12 = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2) {
        WTF::StringImpl::destroy(v7, v3);
      }
      else {
        *(_DWORD *)v7 -= 2;
      }
    }
    uint64_t result = v11;
    char v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    if (v10 != -1) {
      return (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v10])(&v8, v9);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0>(WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3DE0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0>(WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3DE0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenRegistrationReady,WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0>(WebKit::WebSWClientConnection::whenRegistrationReady(WebCore::SecurityOriginData const&,WTF::URL const&,WTF::Function<void ()(WebCore::ServiceWorkerRegistrationData &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler)#1},void,WTF::CompletionHandler>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2 && *a2)
  {
    uint64_t v2 = result;
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>>((WTF::StringImpl *)v10, a2);
    if (v10[360])
    {
      v11[0] = 0;
      char v21 = 0;
      if (v10[352])
      {
        WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v11, (uint64_t)v10);
        char v21 = 1;
        (*(void (**)(void, unsigned char *))(**(void **)(v2 + 8) + 16))(*(void *)(v2 + 8), v11);
        if (v21)
        {
          if (v20)
          {
            uint64_t v4 = v19;
            char v19 = 0;
            if (v4)
            {
              if (*(_DWORD *)v4 == 2) {
                WTF::StringImpl::destroy(v4, v3);
              }
              else {
                *(_DWORD *)v4 -= 2;
              }
            }
          }
          if (v18)
          {
            uint64_t v5 = v17;
            uint64_t v17 = 0;
            if (v5)
            {
              if (*(_DWORD *)v5 == 2) {
                WTF::StringImpl::destroy(v5, v3);
              }
              else {
                *(_DWORD *)v5 -= 2;
              }
            }
          }
          if (v16)
          {
            unint64_t v6 = v15;
            uint64_t v15 = 0;
            if (v6)
            {
              if (*(_DWORD *)v6 == 2) {
                WTF::StringImpl::destroy(v6, v3);
              }
              else {
                *(_DWORD *)v6 -= 2;
              }
            }
          }
          unint64_t v7 = v14;
          char v14 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2) {
              WTF::StringImpl::destroy(v7, v3);
            }
            else {
              *(_DWORD *)v7 -= 2;
            }
          }
          char v8 = v13;
          uint64_t v13 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2) {
              WTF::StringImpl::destroy(v8, v3);
            }
            else {
              *(_DWORD *)v8 -= 2;
            }
          }
          if (v12 != -1) {
            ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v12])(&v9, v11);
          }
        }
      }
    }
    return std::__optional_destruct_base<std::tuple<std::optional<WebCore::ServiceWorkerRegistrationData>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v10, v3);
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    uint64_t v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v2 = &unk_1EE9F3E08;
    *((void *)v2 + 1) = v1;
    uint64_t v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

WebCore::WorkerScriptLoader::ServiceWorkerDataManager *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::WorkerScriptLoader::ServiceWorkerDataManager,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t result = *(WebCore::WorkerScriptLoader::ServiceWorkerDataManager **)(a1 + 8);
  if (result)
  {
    WebCore::WorkerScriptLoader::ServiceWorkerDataManager::~ServiceWorkerDataManager(result);
    return (WebCore::WorkerScriptLoader::ServiceWorkerDataManager *)WTF::fastFree(v2, v3);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 352 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::ServiceWorkerRegistrationData>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  if (result != a2)
  {
    uint64_t v11 = v2;
    uint64_t v12 = v3;
    uint64_t v5 = result;
    do
    {
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5 + 280, a2);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5 + 208, v6);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5 + 136, v7);
      char v8 = (WTF::StringImpl *)*((void *)v5 + 10);
      *((void *)v5 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, a2);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      uint64_t result = (WTF::StringImpl *)*((void *)v5 + 4);
      *((void *)v5 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v9 = *((unsigned int *)v5 + 6);
      if (v9 != -1) {
        uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, WTF::StringImpl *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v9])(&v10, v5);
      }
      *((_DWORD *)v5 + 6) = -1;
      uint64_t v5 = (WTF::StringImpl *)((char *)v5 + 352);
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::getRegistrations(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F3E30;
  uint64_t v3 = *(WTF::StringImpl **)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *(unsigned int *)(a1 + 48);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v4])(&v7, a1 + 24);
  }
  *(_DWORD *)(a1 + 4++*(_DWORD *)(this + 8) = -1;
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::getRegistrations(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F3E30;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((unsigned int *)this + 12);
  if (v4 != -1) {
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v4])(&v7, (char *)this + 24);
  }
  *((_DWORD *)this + 12) = -1;
  uint64_t v5 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return WTF::fastFree(this, a2);
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebSWClientConnection::getRegistrations(WebCore::SecurityOriginData &&,WTF::URL const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&)::$_0,void>::call(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (uint64_t)(a1 + 3);
  uint64_t v4 = a1 + 7;
  uint64_t v5 = v2[3];
  v2 += 3;
  uint64_t v6 = (*(uint64_t (**)(void *))(v5 + 56))(v2);
  char v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)char v7 = 2780;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  char v16 = v7;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v7, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v4);
  uint64_t v8 = a1[2];
  a1[2] = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F3E58;
  v9[1] = v8;
  v15[0] = v9;
  v15[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v2 + 40))(v2, &v16, v15, 0);
  uint64_t v11 = v15[0];
  v15[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v16;
  char v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3E58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3E58;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && (uint64_t v4 = (WTF::StringImpl *)*a2) != 0)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      uint64_t v24 = a2[3];
      if (v24)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
          uint64_t v25 = *a2;
          uint64_t v26 = a2[1];
          uint64_t v27 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v27)
          {
            if (v26) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
            }
          }
        }
      }
      goto LABEL_87;
    }
    uint64_t v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    a2[2] = (uint64_t)(v8 + 1);
    char v47 = 0;
    uint64_t v48 = 0;
    if (v9 >= 0xBA2)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a2, v50);
        if (!v60) {
          goto LABEL_86;
        }
        int v28 = HIDWORD(v48);
        if (HIDWORD(v48) == v48)
        {
          uint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationData>((unsigned int *)&v47, (unint64_t)v50);
        }
        else
        {
          uint64_t result = (WTF::StringImpl *)WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v47 + 352 * HIDWORD(v48), (uint64_t)v50);
          HIDWORD(v4++*(_DWORD *)(this + 8) = v28 + 1;
        }
        if (v60)
        {
          if (v59)
          {
            int v29 = v58;
            uint64_t v58 = 0;
            if (v29)
            {
              if (*(_DWORD *)v29 == 2) {
                WTF::StringImpl::destroy(v29, v4);
              }
              else {
                *(_DWORD *)v29 -= 2;
              }
            }
          }
          if (v57)
          {
            uint64_t v30 = v56;
            long long v56 = 0;
            if (v30)
            {
              if (*(_DWORD *)v30 == 2) {
                WTF::StringImpl::destroy(v30, v4);
              }
              else {
                *(_DWORD *)v30 -= 2;
              }
            }
          }
          if (v55)
          {
            unint64_t v31 = v54;
            uint64_t v54 = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2) {
                WTF::StringImpl::destroy(v31, v4);
              }
              else {
                *(_DWORD *)v31 -= 2;
              }
            }
          }
          uint64_t v32 = v53;
          int v53 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, v4);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          uint64_t result = v52;
          v52 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2) {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
            }
            else {
              *(_DWORD *)result -= 2;
            }
          }
          if (v51 != -1) {
            uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v51])(&v49, v50);
          }
        }
        if (!--v9)
        {
          LODWORD(v9) = v48;
          unsigned int v20 = HIDWORD(v48);
          char v19 = v47;
          if (v48 <= HIDWORD(v48)) {
            goto LABEL_47;
          }
          char v39 = v47;
          if (HIDWORD(v48))
          {
            if (HIDWORD(v48) >= 0xBA2E8C)
            {
              __break(0xC471u);
              return result;
            }
            uint64_t v40 = WTF::fastMalloc((WTF *)(352 * HIDWORD(v48)));
            LODWORD(v9) = 352 * v20 / 0x160;
            if ((WTF::StringImpl *)v40 == v19)
            {
              char v39 = v19;
            }
            else
            {
              char v39 = (WTF *)v40;
              WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationData>::move(v19, (WTF::StringImpl *)((char *)v19 + 352 * v20), v40);
            }
          }
          if (v19)
          {
            if (v39 == v19)
            {
              LODWORD(v9) = 0;
              char v39 = 0;
              char v47 = 0;
            }
            WTF::fastFree(v19, v4);
          }
          char v19 = v39;
          goto LABEL_47;
        }
      }
    }
    if (v9)
    {
      LODWORD(v4++*(_DWORD *)(this + 8) = 352 * (int)v9 / 0x160u;
      char v47 = (WTF *)WTF::fastMalloc((WTF *)(352 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::ServiceWorkerRegistrationData>(a2, v50);
        if (!v60) {
          break;
        }
        int v11 = HIDWORD(v48);
        if (HIDWORD(v48) == v48)
        {
          WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationData>((unsigned int *)&v47, (unint64_t)v50);
        }
        else
        {
          WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData((uint64_t)v47 + 352 * HIDWORD(v48), (uint64_t)v50);
          HIDWORD(v4++*(_DWORD *)(this + 8) = v11 + 1;
        }
        if (v60)
        {
          if (v59)
          {
            uint64_t v12 = v58;
            uint64_t v58 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2) {
                WTF::StringImpl::destroy(v12, v4);
              }
              else {
                *(_DWORD *)v12 -= 2;
              }
            }
          }
          if (v57)
          {
            uint64_t v13 = v56;
            long long v56 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                WTF::StringImpl::destroy(v13, v4);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
          }
          if (v55)
          {
            char v14 = v54;
            uint64_t v54 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                WTF::StringImpl::destroy(v14, v4);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
          }
          uint64_t v15 = v53;
          int v53 = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 2) {
              WTF::StringImpl::destroy(v15, v4);
            }
            else {
              *(_DWORD *)v15 -= 2;
            }
          }
          char v16 = v52;
          v52 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2) {
              WTF::StringImpl::destroy(v16, v4);
            }
            else {
              *(_DWORD *)v16 -= 2;
            }
          }
          if (v51 != -1) {
            ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v51])(&v49, v50);
          }
        }
        if (!--v9)
        {
          char v19 = v47;
          LODWORD(v9) = v48;
          unsigned int v20 = HIDWORD(v48);
          goto LABEL_47;
        }
      }
LABEL_86:
      WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v10);
LABEL_87:
      uint64_t v33 = *a2;
      uint64_t v34 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v35 = a2[3];
      if (v35 && v34)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33);
        uint64_t v36 = *a2;
        uint64_t v37 = a2[1];
        uint64_t v38 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v38)
        {
          if (v37) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v38 + 16))(v38, v36);
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
      return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
    unsigned int v20 = 0;
    char v19 = 0;
LABEL_47:
    char v47 = 0;
    uint64_t v48 = 0;
    char v46 = 1;
    WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v4);
    v45[0] = 0;
    v45[1] = 0;
    int v41 = v19;
    int v42 = v9;
    unsigned int v43 = v20;
    WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v21);
    char v44 = 1;
    uint64_t v22 = *v2;
    uint64_t *v2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v22 + 16))(v22, &v41);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 8))(v22);
    if (v44) {
      return (WTF::StringImpl *)WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v23);
    }
  }
  else
  {
    uint64_t v17 = (uint64_t *)(a1 + 8);
    return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v17);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetRegistrations,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

uint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::ServiceWorkerRegistrationData>(unsigned int *a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a1[3] + 1, a2);
  return WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(*(void *)a1 + 352 * a1[3]++, v3);
}

unint64_t WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 352 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<WebCore::ServiceWorkerRegistrationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xBA2E8C)
    {
      __break(0xC471u);
      JUMPOUT(0x19919AB68);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 352 * *((unsigned int *)result + 3));
    int v5 = 352 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(352 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFE0) / 0x160;
    *(void *)uint64_t v2 = v6;
    uint64_t result = WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationData>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WebCore::ServiceWorkerRegistrationData>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v17 = v3;
    uint64_t v18 = v4;
    unint64_t v7 = result;
    uint64_t v8 = 0;
    do
    {
      unint64_t v9 = (char *)v7 + v8;
      WebCore::ServiceWorkerRegistrationData::ServiceWorkerRegistrationData(a3 + v8, (uint64_t)v7 + v8);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + v8 + 280, v10);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + v8 + 208, v11);
      std::__optional_destruct_base<WebCore::ServiceWorkerData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7 + v8 + 136, v12);
      char v14 = *(WTF::StringImpl **)((char *)v7 + v8 + 80);
      *(void *)((char *)v7 + v8 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, v13);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
      uint64_t result = (WTF::StringImpl *)*((void *)v9 + 4);
      *((void *)v9 + 4) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      uint64_t v15 = *(unsigned int *)((char *)v7 + v8 + 24);
      if (v15 != -1) {
        uint64_t result = (WTF::StringImpl *)((uint64_t (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v15])(&v16, (char *)v7 + v8);
      }
      *(_DWORD *)((char *)v7 + v8 + ++*(_DWORD *)(this + 24) = -1;
      v8 += 352;
    }
    while ((WTF::StringImpl *)((char *)v7 + v8) != a2);
  }
  return result;
}

uint64_t IPC::MessageSender::sendWithAsyncReply<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(uint64_t a1, uint64_t **a2, uint64_t *a3, uint64_t a4, unsigned __int8 a5)
{
  unint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v10 = 2796;
  *((void *)v10 + 1) = a4;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v22 = v10;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, *a2);
  uint64_t v11 = *a3;
  *a3 = 0;
  uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v12 = &unk_1EE9F3E80;
  v12[1] = v11;
  uint64_t v13 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v21[0] = v12;
  v21[1] = v13;
  int v15 = (*(uint64_t (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v22, v21, a5);
  uint64_t v16 = v21[0];
  v21[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v22;
  uint64_t v22 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v14);
    WTF::fastFree(v19, v20);
  }
  if (v15) {
    return v13;
  }
  else {
    return 0;
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3E80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3E80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3EA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3EA8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::WhenServiceWorkerIsTerminatedForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3ED0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3ED0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StoreRegistrationsOnDisk,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3EF8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3EF8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>>(a2, (uint64_t)v5);
    if (v7)
    {
      uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)>,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(v2, v5);
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(char *, __n128 *))off_1EE9F3F10[v6])(&v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::SubscribeToPushService,WebKit::WebSWClientConnection::subscribeToPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)> &&)::$_0>(uint64_t *a1)
{
  int v3 = 0;
  memset(v2, 0, sizeof(v2));
  uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)>,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(a1, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, __n128 *))off_1EE9F3F10[v3])(&v4, v2);
  }
  return result;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushSubscriptionData> &&)>,std::experimental::fundamentals_v3::expected<WebCore::PushSubscriptionData,WebCore::ExceptionData>>(uint64_t *a1, __n128 *a2)
{
  unsigned __int32 v3 = a2[5].n128_u32[0];
  if (v3)
  {
    if (v3 != 1)
    {
      uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v8);
    }
    unsigned __int8 v4 = a2->n128_u8[0];
    int v5 = (_DWORD *)a2->n128_u64[1];
    if (v5) {
      *v5 += 2;
    }
    v9[0].n128_u8[0] = v4;
    v9[0].n128_u64[1] = (unint64_t)v5;
    int v10 = 1;
  }
  else
  {
    std::__variant_detail::__alt<0ul,WebCore::PushSubscriptionData>::__alt[abi:sn180100]<WebCore::PushSubscriptionData>(v9, a2);
    int v10 = 0;
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, __n128 *))(*(void *)v6 + 16))(v6, v9);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v10 != -1) {
    return ((uint64_t (*)(char *, __n128 *))off_1EE9F3F20[v10])(&v11, v9);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  unsigned __int32 v3 = *(WTF **)(a2 + 64);
  if (v3)
  {
    *(void *)(a2 + 64) = 0;
    *(_DWORD *)(a2 + 72) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  unsigned __int8 v4 = *(WTF **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 4++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(a2 + 56) = 0;
    WTF::fastFree(v4, (void *)a2);
  }
  int v5 = *(WTF **)(a2 + 32);
  if (v5)
  {
    *(void *)(a2 + ++*(_DWORD *)(this + 32) = 0;
    *(_DWORD *)(a2 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    WTF::fastFree(v5, (void *)a2);
  }
  uint64_t result = *(WTF::StringImpl **)(a2 + 8);
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore20PushSubscriptionDataENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3F40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3F40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::UnsubscribeFromPushService,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::unsubscribeFromPushService(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::ObjectIdentifierGeneric<WebCore::PushSubscriptionIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>>(a2, (uint64_t)v4), v6))
  {
    uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(v2, v4);
    if (v6)
    {
      if (v5 != -1) {
        return (void *)((uint64_t (*)(char *, char *))off_1EE9F3D60[v5])(&v7, v4);
      }
    }
  }
  else
  {
    v4[0] = 0;
    int v5 = 0;
    return WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(v2, v4);
  }
  return result;
}

void *WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>,std::experimental::fundamentals_v3::expected<BOOL,WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  int v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 != 1)
    {
      char v7 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(v7);
    }
    char v3 = *a2;
    unsigned __int8 v4 = (_DWORD *)*((void *)a2 + 1);
    if (v4) {
      *v4 += 2;
    }
    v8[0] = v3;
    unint64_t v9 = v4;
    int v10 = 1;
  }
  else
  {
    v8[0] = *a2;
    int v10 = 0;
  }
  uint64_t v5 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v8);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
  if (v10 != -1) {
    return (void *)((uint64_t (*)(char *, unsigned char *))off_1EE9F3D70[v10])(&v11, v8);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3F68;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3F68;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>>(a2, v6);
    if (v9)
    {
      uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(v2, (uint64_t)v6);
      if (v9)
      {
        if (v8 != -1) {
          return ((uint64_t (*)(char *, uint64_t *))off_1EE9F3F80[v8])(&v5, &v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    unsigned __int8 v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushSubscription,WebKit::WebSWClientConnection::getPushSubscription(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[80] = 0;
  int v5 = 0;
  uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F3F80[v5])(&v2, v4);
  }
  return result;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::PushSubscriptionData>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::PushSubscriptionData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 96);
  if (v3)
  {
    if (v3 == 1)
    {
      char v4 = *(unsigned char *)(a2 + 8);
      int v5 = *(_DWORD **)(a2 + 16);
      if (v5) {
        *v5 += 2;
      }
      v12[0] = v4;
      uint64_t v13 = v5;
      int v15 = 1;
      uint64_t v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, v11);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      if (v15 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9F3F90[v15])(&v10, v12);
      }
    }
    else
    {
      uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(v9);
    }
  }
  else
  {
    v12[0] = 0;
    char v14 = 0;
    if (*(unsigned char *)(a2 + 88))
    {
      std::construct_at[abi:sn180100]<WebCore::PushSubscriptionData,WebCore::PushSubscriptionData,WebCore::PushSubscriptionData*>((uint64_t)v12, a2 + 8);
      char v14 = 1;
    }
    int v15 = 0;
    uint64_t v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v11);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v15 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9F3F90[v15])(&v10, v12);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::PushSubscriptionData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore20PushSubscriptionDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F3FB0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F3FB0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || !*a2)
  {
    int v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>>(a2, (uint64_t)v8);
  if (!v11) {
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v2);
  }
  if (v10)
  {
    if (v10 == 1)
    {
      char v3 = v8[0];
      char v4 = v9;
      if (v9) {
        *v9 += 2;
      }
      v12[0] = v3;
      uint64_t v13 = v4;
      int v14 = 1;
      goto LABEL_14;
    }
    int v5 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(v5);
  }
  v12[0] = v8[0];
  int v14 = 0;
LABEL_14:
  uint64_t v7 = *v2;
  uint64_t *v2 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v7 + 16))(v7, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
  if (v14 != -1) {
    uint64_t result = ((uint64_t (*)(char *, char *))off_1EE9F3FE8[v14])(&v15, v12);
  }
  if (v11)
  {
    if (v10 != -1) {
      return ((uint64_t (*)(char *, char *))off_1EE9F3FC8[v10])(v12, v8);
    }
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetPushPermissionState,WebKit::WebSWClientConnection::getPushPermissionState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::PushPermissionState> &&)> &&)::$_0>(uint64_t *a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F3FE8[v4])(&v5, v3);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (uint64_t)IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>(a1, (uint64_t)v6);
  int v4 = v8;
  *(unsigned char *)a2 = 0;
  if (v4)
  {
    *(_DWORD *)(a2 + 16) = -1;
    uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v6);
    int v5 = v8;
    *(unsigned char *)(a2 + ++*(_DWORD *)(this + 24) = 1;
    if (v5)
    {
      if (v7 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9F3FC8[v7])(&v9, v6);
      }
    }
  }
  else
  {
    *(unsigned char *)(a2 + ++*(_DWORD *)(this + 24) = 0;
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (uint64_t *)a1[3];
    if (result && v5 != 0)
    {
      int v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

uint64_t *IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<unsigned char,WebCore::ExceptionData>,void>::decode<IPC::Decoder>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = result[1];
  uint64_t v4 = *result;
  unint64_t v5 = result[2] - *result;
  if (v3 <= v5)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v11 = result[3];
    if (v11)
    {
      uint64_t v16 = result;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
        uint64_t result = v16;
        uint64_t v10 = *v16;
        unint64_t v9 = v16[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v10 = 0;
      }
    }
    goto LABEL_13;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  result[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v9 = v3;
    uint64_t v10 = 0;
LABEL_13:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v12 = result[3];
    if (v12)
    {
      char v15 = result;
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v12 + 16))(v12, v10, v9);
        uint64_t result = v15;
        uint64_t v4 = *v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
LABEL_14:
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t result = (uint64_t *)result[3];
    if (!result)
    {
LABEL_17:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + ++*(_DWORD *)(this + 24) = 0;
      return result;
    }
LABEL_23:
    if (v3) {
      uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t))(*result + 16))(result, v4);
    }
    goto LABEL_17;
  }
  if (*v6 >= 2u) {
    goto LABEL_14;
  }
  if (*v6)
  {
    if (v3 > (unint64_t)&v6[-v4 + 1])
    {
      result[2] = (uint64_t)(v6 + 2);
      *(unsigned char *)a2 = v6[1];
      *(_DWORD *)(a2 + 16) = 0;
      *(unsigned char *)(a2 + ++*(_DWORD *)(this + 24) = 1;
      return result;
    }
    uint64_t *result = 0;
    result[1] = 0;
    uint64_t v13 = result[3];
    if (!v13) {
      goto LABEL_17;
    }
    int v14 = result;
    (*(void (**)(uint64_t))(*(void *)v13 + 16))(result[3]);
    uint64_t v4 = *v14;
    unint64_t v3 = v14[1];
    uint64_t result = (uint64_t *)v14[3];
    uint64_t *v14 = 0;
    v14[1] = 0;
    if (!result) {
      goto LABEL_17;
    }
    goto LABEL_23;
  }
  uint64_t result = (uint64_t *)IPC::Decoder::decode<WebCore::ExceptionData>(result, (uint64_t)v17);
  char v7 = v19;
  if (v19)
  {
    char v7 = v17[0];
    *(void *)(a2 + ++*(_DWORD *)(this + 8) = v18;
    char v8 = 1;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    char v8 = 0;
  }
  *(unsigned char *)a2 = v7;
  *(unsigned char *)(a2 + ++*(_DWORD *)(this + 24) = v8;
  return result;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<unsigned char,WebCore::ExceptionData>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 16);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_1EE9F3FC8[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 16) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1EE9F3FD8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 16) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJhS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJhN7WebCore13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISA_LNS0_6_TraitE1EEEEEvRSB_OT_EUlRSH_OT0_E_JRNS0_6__baseILSE_1EJhS9_EEEOSP_EEEDcSH_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19PushPermissionStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4008;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4008;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::call(uint64_t a1, void *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>>(a2, (uint64_t)v5);
    if (v7)
    {
      uint64_t result = WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>(v2, (uint64_t)v5);
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))off_1EE9F4020[v6])(&v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNotifications,WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(uint64_t *a1)
{
  v2[0] = 0;
  v2[1] = 0;
  int v3 = 0;
  uint64_t result = WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>(a1, (uint64_t)v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9F4020[v3])(&v4, v2);
  }
  return result;
}

uint64_t WebKit::WebSWClientConnection::getNotifications(WTF::URL const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    if (v3 == 1)
    {
      char v4 = *(unsigned char *)a2;
      uint64_t v5 = *(_DWORD **)(a2 + 8);
      if (v5) {
        *v5 += 2;
      }
      LOBYTE(v14) = v4;
      char v15 = v5;
      int v16 = 1;
      uint64_t v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v14);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      if (v16 != -1) {
        return ((uint64_t (*)(uint64_t *, uint64_t *))off_1EE9F4030[v16])(&v12, &v14);
      }
    }
    else
    {
      uint64_t v11 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v11);
    }
  }
  else
  {
    WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)&v12, a2);
    uint64_t v14 = v12;
    char v8 = v13;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    char v15 = v8;
    int v16 = 0;
    uint64_t v9 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 16))(v9, &v14);
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    if (v16 != -1) {
      ((void (*)(char *, uint64_t *))off_1EE9F4030[v16])(&v17, &v14);
    }
    int v16 = -1;
    return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v12, v10);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore16NotificationDataELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4050;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4050;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v17);
    if ((_BYTE)v19)
    {
      uint64_t v5 = v17;
      uint64_t v17 = 0;
      uint64_t v6 = v18;
      uint64_t v18 = 0;
      WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v17, v4);
      char v15 = 1;
      v14[0] = 0;
      uint64_t v17 = v5;
      v14[1] = 0;
      uint64_t v18 = v6;
      int v19 = 0;
      uint64_t v7 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v17);
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      if (v19 != -1) {
        ((void (*)(char *, uint64_t *))off_1EE9F4030[v19])(&v16, &v17);
      }
      return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v8);
    }
    else
    {
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v13 = *((void *)a2 + 3);
      if (v13 && v12) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
      }
      return IPC::Connection::cancelReply<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v10 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v10);
  }
}

uint64_t IPC::Connection::cancelReply<Messages::WebProcessProxy::GetNotifications,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v5[0] = 0;
  v4[1] = 0;
  v5[1] = 0;
  int v6 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v5);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v6 != -1) {
    ((void (*)(char *, void *))off_1EE9F4030[v6])(&v7, v5);
  }
  int v6 = -1;
  return WTF::Vector<WebCore::NotificationData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4078;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4078;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::EnableNavigationPreload,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    uint64_t result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      uint64_t result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  else
  {
    v5[0] = 0;
    char v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

uint64_t *IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ExceptionData>>(a2, (uint64_t)v8);
  if (v11)
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v10)
    {
      *(unsigned char *)a1 = v8[0];
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = v9;
      *(unsigned char *)(a1 + 16) = 1;
    }
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 24) = 1;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 24) = 0;
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (uint64_t *)a2[3];
    if (result) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      char v7 = *(uint64_t (**)(void))(*result + 16);
      return (uint64_t *)v7();
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  if (a2[16])
  {
    char v2 = *a2;
    uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
    if (v3) {
      *(_DWORD *)v3 += 2;
    }
    LOBYTE(v7) = v2;
    char v8 = v3;
    LOBYTE(v9) = 1;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v4 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 16))(v4, &v7);
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  if ((_BYTE)v9)
  {
    uint64_t result = v8;
    char v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F40A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F40A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::DisableNavigationPreload,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::disableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    uint64_t result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      uint64_t result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  else
  {
    v5[0] = 0;
    char v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::String &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F40C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::String &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F40C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::String &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::SetNavigationPreloadHeaderValue,WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::setNavigationPreloadHeaderValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    uint64_t result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      uint64_t result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  else
  {
    v5[0] = 0;
    char v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F40F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F40F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v17 = *((void *)a2 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v4, v5);
            unint64_t v15 = 0;
            uint64_t v25 = *(void *)a2;
            uint64_t v26 = *((void *)a2 + 1);
            uint64_t v27 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v16 = 0;
            if (v27 && v26)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v26);
              uint64_t v16 = *(void *)a2;
              unint64_t v15 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        BOOL v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<WebCore::NavigationPreloadState>(a2, (uint64_t)v35);
            int v8 = v37;
            if (v37)
            {
              char v9 = v35[0];
              uint64_t v32 = v36;
              int v33 = 0;
              int v8 = 1;
            }
            else
            {
              char v9 = 0;
            }
            int v14 = 0;
            v31[0] = v9;
            char v34 = v8;
            if (!v8)
            {
LABEL_27:
              uint64_t v19 = *(void *)a2;
              uint64_t v20 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v21 = *((void *)a2 + 3);
              if (v21 && v20) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
              }
              v28[0] = 0;
              char v30 = 0;
              goto LABEL_29;
            }
          }
          else
          {
            IPC::Decoder::decode<WebCore::ExceptionData>((uint64_t *)a2, (uint64_t)v35);
            int v12 = v37;
            if (v37)
            {
              char v13 = v35[0];
              uint64_t v32 = v36;
              int v12 = 1;
              int v33 = 1;
            }
            else
            {
              char v13 = 0;
            }
            v31[0] = v13;
            char v34 = v12;
            int v14 = 1;
            if (!v12) {
              goto LABEL_27;
            }
          }
          v28[0] = 0;
          int v29 = -1;
          ((void (*)(unsigned char *, char *, unsigned char *))off_1EE9F4118[v14])(v35, v28, v31);
          int v29 = v14;
          char v30 = 1;
          if (!v34 || v33 == -1 || (((void (*)(unsigned char *, unsigned char *))off_1EE9F4108[v33])(v35, v31), v30))
          {
LABEL_21:
            uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)>,std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData>>(v2, v28);
            if (v30)
            {
              if (v29 != -1) {
                return ((uint64_t (*)(unsigned char *, char *))off_1EE9F4108[v29])(v31, v28);
              }
            }
            return result;
          }
LABEL_29:
          uint64_t v22 = *(void *)a2;
          uint64_t v23 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v24 = *((void *)a2 + 3);
          if (!v24) {
            return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(v2);
          }
          if (!v23) {
            return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(v2);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
          if (!v30) {
            return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(v2);
          }
          goto LABEL_21;
        }
        unint64_t v15 = v5;
        uint64_t v16 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = *((void *)a2 + 3);
      if (v18 && v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
      goto LABEL_27;
    }
  }
  char v10 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(v10);
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::GetNavigationPreloadState,WebKit::WebSWClientConnection::getNavigationPreloadState(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)> &&)::$_0>(uint64_t *a1)
{
  v2[0] = 0;
  v2[1] = 0;
  int v3 = 0;
  uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)>,std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData>>(a1, (char *)v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9F4108[v3])(&v4, v2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::NavigationPreloadState> &&)>,std::experimental::fundamentals_v3::expected<WebCore::NavigationPreloadState,WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  int v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 != 1)
    {
      uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v8);
    }
    char v3 = *a2;
    char v4 = (_DWORD *)*((void *)a2 + 1);
    if (v4) {
      *v4 += 2;
    }
    v9[0] = v3;
    char v10 = v4;
    int v11 = 1;
  }
  else
  {
    v9[0] = *a2;
    unint64_t v5 = (_DWORD *)*((void *)a2 + 1);
    *((void *)a2 + 1) = 0;
    char v10 = v5;
    int v11 = 0;
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v6 + 16))(v6, v9);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v11 != -1) {
    return ((uint64_t (*)(char *, char *))off_1EE9F4128[v11])(&v12, v9);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22NavigationPreloadStateENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::BackgroundFetchOptions &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4148;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BackgroundFetchOptions &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4148;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::BackgroundFetchOptions &<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>>>((uint64_t)v6, a2);
    if (v9)
    {
      uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>>(v2, (uint64_t)v6);
      if (v9)
      {
        if (v8 != -1) {
          return ((uint64_t (*)(char *, uint64_t *))off_1EE9F4160[v8])(&v5, &v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    char v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[56] = 0;
  int v5 = 0;
  uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F4160[v5])(&v2, v4);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a2;
        unint64_t v12 = a2[1];
      }
      else
      {
        unint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_17;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    unint64_t v12 = v6;
    uint64_t v13 = 0;
LABEL_17:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_18;
  }
  if (*v8 >= 2u)
  {
LABEL_18:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v16 = a2[3];
    if (v16 && v6) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v5);
    }
    goto LABEL_19;
  }
  if (*v8)
  {
    if (v6 <= (unint64_t)&v8[-v5 + 1])
    {
      unint64_t v23 = 0;
      uint64_t v24 = 0;
      *a2 = 0;
      a2[1] = 0;
      uint64_t v25 = a2[3];
      if (v25)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 16))(v25);
        unint64_t v23 = 0;
        uint64_t v31 = *a2;
        uint64_t v32 = a2[1];
        uint64_t v33 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v24 = 0;
        if (v33)
        {
          if (v32)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v31);
            uint64_t v24 = *a2;
            unint64_t v23 = a2[1];
          }
        }
      }
    }
    else
    {
      a2[2] = (uint64_t)(v8 + 2);
      unsigned int v9 = v8[1];
      if (v9 < 2)
      {
        if (!v9)
        {
          LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          char v44 = 0;
          int v10 = 1;
          goto LABEL_13;
        }
        IPC::Decoder::decode<WebCore::BackgroundFetchInformation>(a2, (uint64_t)&v34);
        if (v38)
        {
          long long v42 = v36;
          *(_OWORD *)unsigned int v43 = *(_OWORD *)v37;
          *(_DWORD *)&v43[15] = *(_DWORD *)&v37[15];
          uint64_t v40 = v34;
          uint64_t v41 = v35;
          int v10 = 1;
          char v44 = 1;
LABEL_13:
          int v45 = 0;
LABEL_30:
          int v11 = 0;
          unsigned __int8 v46 = v10;
          goto LABEL_31;
        }
LABEL_28:
        uint64_t v27 = *a2;
        uint64_t v28 = a2[1];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v29 = a2[3];
        if (v29 && v28) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
        }
        int v10 = 0;
        char v39 = 0;
        goto LABEL_30;
      }
      unint64_t v23 = v6;
      uint64_t v24 = v5;
    }
    *a2 = 0;
    a2[1] = 0;
    uint64_t v26 = a2[3];
    if (v26 && v23) {
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v26 + 16))(v26, v24, v23);
    }
    goto LABEL_28;
  }
  IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)&v34);
  int v10 = v36;
  if ((_BYTE)v36)
  {
    LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v34;
    uint64_t v41 = v35;
    int v10 = 1;
    int v45 = 1;
  }
  else
  {
    char v39 = 0;
  }
  unsigned __int8 v46 = v10;
  int v11 = 1;
LABEL_31:
  if (v10)
  {
    *(unsigned char *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(a1 + 72) = -1;
    uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t *))off_1EE9F4170[v11])(&v34, a1 + 8, &v40);
    *(_DWORD *)(a1 + 72) = v11;
    int v30 = v46;
    *(unsigned char *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    if (!v30) {
      return result;
    }
    if (v45 == -1) {
      return result;
    }
    uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1EE9F4160[v45])(&v34, &v40);
    if (*(unsigned char *)(a1 + 80)) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v19 = a2[3];
  if (v19 && v18) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
LABEL_21:
  uint64_t v20 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t result = a2[3];
  if (result && v20)
  {
    uint64_t v22 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v22();
  }
  return result;
}

uint64_t IPC::Decoder::decode<WebCore::BackgroundFetchInformation>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::BackgroundFetchInformation,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 56))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::BackgroundFetchInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore26BackgroundFetchInformationEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__optional_destruct_base<WebCore::BackgroundFetchInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore26BackgroundFetchInformationEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = 0;
  *(unsigned char *)(a2 + 56) = 0;
  if (*(unsigned char *)(a3 + 56))
  {
    *(void *)a2 = *(void *)a3;
    uint64_t v3 = *(void *)(a3 + 8);
    *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
    *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
    __n128 result = *(__n128 *)(a3 + 16);
    long long v5 = *(_OWORD *)(a3 + 32);
    *(_DWORD *)(a2 + 47) = *(_DWORD *)(a3 + 47);
    *(__n128 *)(a2 + 16) = result;
    *(_OWORD *)(a2 + ++*(_DWORD *)(this + 32) = v5;
    *(unsigned char *)(a2 + 56) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore26BackgroundFetchInformationEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a2 + 72);
  if (v2)
  {
    if (v2 != 1)
    {
      uint64_t v12 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore26BackgroundFetchInformationEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(v12);
    }
    char v3 = *(unsigned char *)(a2 + 8);
    uint64_t v4 = *(_DWORD **)(a2 + 16);
    if (v4) {
      *v4 += 2;
    }
    LOBYTE(v15) = v3;
    uint64_t v16 = v4;
    unsigned int v20 = 1;
    uint64_t v5 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v5 + 16))(v5, v14);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
    uint64_t v7 = v20;
    if (v20 != -1) {
      return ((uint64_t (*)(char *, uint64_t *))off_1EE9F4180[v7])(&v13, &v15);
    }
  }
  else
  {
    LOBYTE(v15) = 0;
    char v19 = 0;
    if (*(unsigned char *)(a2 + 64))
    {
      uint64_t v8 = *(void *)(a2 + 8);
      unsigned int v9 = *(_DWORD **)(a2 + 16);
      *(void *)(a2 + 16) = 0;
      uint64_t v15 = v8;
      uint64_t v16 = v9;
      long long v10 = *(_OWORD *)(a2 + 40);
      long long v17 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)uint64_t v18 = v10;
      *(_DWORD *)&v18[15] = *(_DWORD *)(a2 + 55);
      char v19 = 1;
    }
    unsigned int v20 = 0;
    uint64_t v11 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v11 + 16))(v11, v14);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v7 = v20;
    if (v20 != -1) {
      return ((uint64_t (*)(char *, uint64_t *))off_1EE9F4180[v7])(&v13, &v15);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore26BackgroundFetchInformationEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__optional_destruct_base<WebCore::BackgroundFetchInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore26BackgroundFetchInformationEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F41A0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F41A0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchInformation,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::backgroundFetchInformation(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>>>((uint64_t)v6, a2);
    if (v9)
    {
      uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)>,std::experimental::fundamentals_v3::expected<std::optional<WebCore::BackgroundFetchInformation>,WebCore::ExceptionData>>(v2, (uint64_t)v6);
      if (v9)
      {
        if (v8 != -1) {
          return ((uint64_t (*)(char *, uint64_t *))off_1EE9F4160[v8])(&v5, &v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::StartBackgroundFetch,WebKit::WebSWClientConnection::startBackgroundFetch(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::String const&,WTF::Vector<WebCore::BackgroundFetchRequest,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WebCore::BackgroundFetchOptions &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::BackgroundFetchInformation>> &&)> &&)::$_0>(v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F41C8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F41C8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::BackgroundFetchIdentifiers,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(a2, a2, (uint64_t)v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
  }
  else
  {
    unint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebProcess::GetActivePagesOriginsForTesting,WTF::CompletionHandler<void ()(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AbortBackgroundFetch,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F41F0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AbortBackgroundFetch,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F41F0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AbortBackgroundFetch,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  char v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4218;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4218;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && (unsigned __int16 v4 = (void *)*a2) != 0)
  {
    unint64_t v5 = a2[1];
    unint64_t v6 = ((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
    if (v5 < v6 || v5 - v6 <= 7)
    {
      *a2 = 0;
      a2[1] = 0;
      uint64_t v34 = a2[3];
      if (v34)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
          uint64_t v35 = *a2;
          uint64_t v36 = a2[1];
          uint64_t v37 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v37)
          {
            if (v36) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v35);
            }
          }
        }
      }
LABEL_41:
      uint64_t v57 = *a2;
      uint64_t v58 = a2[1];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v59 = a2[3];
      if (v59 && v58)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 16))(v59, v57);
        uint64_t v60 = *a2;
        uint64_t v61 = a2[1];
        uint64_t v62 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v62)
        {
          if (v61) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v62 + 16))(v62, v60);
          }
        }
      }
      else
      {
        *a2 = 0;
        a2[1] = 0;
      }
      return IPC::Connection::cancelReply<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
    uint64_t v8 = (unint64_t *)((a2[2] + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v9 = *v8;
    a2[2] = (uint64_t)(v8 + 1);
    int v70 = 0;
    uint64_t v71 = 0;
    if (v9 >= 0xD79)
    {
      int v63 = (uint64_t *)(a1 + 8);
      do
      {
        IPC::Decoder::decode<WebCore::BackgroundFetchRecordInformation>((uint64_t)&v72, a2);
        if (!v106) {
          goto LABEL_40;
        }
        if (HIDWORD(v71) == v71)
        {
          WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRecordInformation>((uint64_t)&v70, (unint64_t)&v72);
        }
        else
        {
          char v39 = (char *)v70 + 304 * HIDWORD(v71);
          *(void *)char v39 = v72;
          WTF::URL::URL((uint64_t)(v39 + 8), v73);
          WTF::URL::URL((uint64_t)(v39 + 48), v74);
          *((void *)v39 + 11) = v75;
          uint64_t v40 = v76;
          uint64_t v76 = 0;
          *((void *)v39 + 1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
          *((void *)v39 + 14) = 0;
          *((void *)v39 + 12) = v40;
          uint64_t v41 = v77;
          uint64_t v77 = 0;
          *((void *)v39 + 1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v41;
          LODWORD(v41) = v78;
          int v78 = 0;
          *((_DWORD *)v39 + 2++*(_DWORD *)(this + 8) = v41;
          LODWORD(v41) = v79;
          int v79 = 0;
          *((_DWORD *)v39 + 29) = v41;
          *((void *)v39 + 15) = 0;
          *((void *)v39 + 16) = 0;
          uint64_t v42 = v80;
          uint64_t v80 = 0;
          *((void *)v39 + 15) = v42;
          LODWORD(v42) = v81;
          int v81 = 0;
          *((_DWORD *)v39 + ++*(_DWORD *)(this + 32) = v42;
          LODWORD(v42) = v82;
          int v82 = 0;
          *((_DWORD *)v39 + 3WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v42;
          *((void *)v39 + 17) = 0;
          *((void *)v39 + 1++*(_DWORD *)(this + 8) = 0;
          uint64_t v43 = v83;
          uint64_t v83 = 0;
          *((void *)v39 + 17) = v43;
          LODWORD(v4WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v84;
          int v84 = 0;
          *((_DWORD *)v39 + 36) = v43;
          LODWORD(v4WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v85;
          int v85 = 0;
          *((_DWORD *)v39 + 37) = v43;
          LODWORD(v4WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v86;
          v39[156] = v87;
          *((_DWORD *)v39 + 3++*(_DWORD *)(this + 8) = v43;
          uint64_t v44 = v88;
          uint64_t v88 = 0;
          *((void *)v39 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v44;
          uint64_t v45 = v89;
          uint64_t v89 = 0;
          *((void *)v39 + 21) = v45;
          uint64_t v46 = v90;
          uint64_t v90 = 0;
          *((void *)v39 + 22) = v46;
          uint64_t v47 = v91;
          v39[192] = v92;
          *((void *)v39 + 2WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v47;
          uint64_t v48 = v93;
          uint64_t v93 = 0;
          *((void *)v39 + 25) = v48;
          LODWORD(v4++*(_DWORD *)(this + 8) = v94[0];
          *(_DWORD *)(v39 + 211) = *(_DWORD *)((char *)v94 + 3);
          *((_DWORD *)v39 + 52) = v48;
          uint64_t v49 = v95;
          uint64_t v95 = 0;
          *((void *)v39 + 27) = v49;
          long long v50 = v97;
          *((_OWORD *)v39 + 14) = v96;
          *((_OWORD *)v39 + 15) = v50;
          v39[256] = v98;
          *((void *)v39 + 3WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
          *((void *)v39 + 34) = 0;
          uint64_t v51 = v99;
          uint64_t v99 = 0;
          *((void *)v39 + 3WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v51;
          LODWORD(v51) = v100;
          int v100 = 0;
          *((_DWORD *)v39 + 6++*(_DWORD *)(this + 8) = v51;
          LODWORD(v51) = v101;
          int v101 = 0;
          *((_DWORD *)v39 + 69) = v51;
          *((void *)v39 + 35) = 0;
          *((void *)v39 + 36) = 0;
          uint64_t v52 = v102;
          uint64_t v102 = 0;
          *((void *)v39 + 35) = v52;
          LODWORD(v52) = v103;
          int v103 = 0;
          *((_DWORD *)v39 + 72) = v52;
          LODWORD(v52) = v104;
          int v104 = 0;
          *((_DWORD *)v39 + 7WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v52;
          uint64_t v53 = v105;
          uint64_t v105 = 0;
          *((void *)v39 + 37) = v53;
          ++HIDWORD(v71);
        }
        uint64_t result = std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, v38);
        --v9;
      }
      while (v9);
      unsigned int v28 = v71;
      LODWORD(v9) = HIDWORD(v71);
      uint64_t v27 = v70;
      if (v71 > HIDWORD(v71))
      {
        uint64_t v54 = v70;
        if (HIDWORD(v71))
        {
          if (HIDWORD(v71) >= 0xD79436)
          {
            __break(0xC471u);
            return result;
          }
          uint64_t v55 = WTF::fastMalloc((WTF *)(304 * HIDWORD(v71)));
          unsigned int v28 = 304 * (int)v9 / 0x130u;
          if ((WTF *)v55 == v27)
          {
            uint64_t v54 = v27;
          }
          else
          {
            uint64_t v54 = (WTF *)v55;
            WTF::VectorMover<false,WebCore::BackgroundFetchRecordInformation>::move((uint64_t)v27, (uint64_t)v27 + 304 * v9, v55);
          }
        }
        if (v27)
        {
          if (v54 == v27)
          {
            unsigned int v28 = 0;
            uint64_t v54 = 0;
            int v70 = 0;
            LODWORD(v71) = 0;
          }
          WTF::fastFree(v27, v4);
        }
        uint64_t v27 = v54;
      }
      int v70 = 0;
      LODWORD(v71) = 0;
      uint64_t v2 = v63;
      goto LABEL_22;
    }
    if (v9)
    {
      int v63 = (uint64_t *)(a1 + 8);
      LODWORD(v71) = 304 * (int)v9 / 0x130u;
      int v70 = (WTF *)WTF::fastMalloc((WTF *)(304 * v9));
      while (1)
      {
        IPC::Decoder::decode<WebCore::BackgroundFetchRecordInformation>((uint64_t)&v72, a2);
        if (!v106) {
          break;
        }
        if (HIDWORD(v71) == v71)
        {
          WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRecordInformation>((uint64_t)&v70, (unint64_t)&v72);
        }
        else
        {
          uint64_t v12 = (char *)v70 + 304 * HIDWORD(v71);
          *(void *)uint64_t v12 = v72;
          WTF::URL::URL((uint64_t)(v12 + 8), v73);
          WTF::URL::URL((uint64_t)(v12 + 48), v74);
          *((void *)v12 + 11) = v75;
          uint64_t v13 = v76;
          uint64_t v76 = 0;
          *((void *)v12 + 1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
          *((void *)v12 + 14) = 0;
          *((void *)v12 + 12) = v13;
          uint64_t v14 = v77;
          uint64_t v77 = 0;
          *((void *)v12 + 1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v14;
          LODWORD(v14) = v78;
          int v78 = 0;
          *((_DWORD *)v12 + 2++*(_DWORD *)(this + 8) = v14;
          LODWORD(v14) = v79;
          int v79 = 0;
          *((_DWORD *)v12 + 29) = v14;
          *((void *)v12 + 15) = 0;
          *((void *)v12 + 16) = 0;
          uint64_t v15 = v80;
          uint64_t v80 = 0;
          *((void *)v12 + 15) = v15;
          LODWORD(v15) = v81;
          int v81 = 0;
          *((_DWORD *)v12 + ++*(_DWORD *)(this + 32) = v15;
          LODWORD(v15) = v82;
          int v82 = 0;
          *((_DWORD *)v12 + 3WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v15;
          *((void *)v12 + 17) = 0;
          *((void *)v12 + 1++*(_DWORD *)(this + 8) = 0;
          uint64_t v16 = v83;
          uint64_t v83 = 0;
          *((void *)v12 + 17) = v16;
          LODWORD(v16) = v84;
          int v84 = 0;
          *((_DWORD *)v12 + 36) = v16;
          LODWORD(v16) = v85;
          int v85 = 0;
          *((_DWORD *)v12 + 37) = v16;
          LODWORD(v16) = v86;
          v12[156] = v87;
          *((_DWORD *)v12 + 3++*(_DWORD *)(this + 8) = v16;
          uint64_t v17 = v88;
          uint64_t v88 = 0;
          *((void *)v12 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v17;
          uint64_t v18 = v89;
          uint64_t v89 = 0;
          *((void *)v12 + 21) = v18;
          uint64_t v19 = v90;
          uint64_t v90 = 0;
          *((void *)v12 + 22) = v19;
          uint64_t v20 = v91;
          v12[192] = v92;
          *((void *)v12 + 2WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v20;
          uint64_t v21 = v93;
          uint64_t v93 = 0;
          *((void *)v12 + 25) = v21;
          LODWORD(v21) = v94[0];
          *(_DWORD *)(v12 + 211) = *(_DWORD *)((char *)v94 + 3);
          *((_DWORD *)v12 + 52) = v21;
          uint64_t v22 = v95;
          uint64_t v95 = 0;
          *((void *)v12 + 27) = v22;
          long long v23 = v97;
          *((_OWORD *)v12 + 14) = v96;
          *((_OWORD *)v12 + 15) = v23;
          v12[256] = v98;
          *((void *)v12 + 3WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
          *((void *)v12 + 34) = 0;
          uint64_t v24 = v99;
          uint64_t v99 = 0;
          *((void *)v12 + 3WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v24;
          LODWORD(v++*(_DWORD *)(this + 24) = v100;
          int v100 = 0;
          *((_DWORD *)v12 + 6++*(_DWORD *)(this + 8) = v24;
          LODWORD(v++*(_DWORD *)(this + 24) = v101;
          int v101 = 0;
          *((_DWORD *)v12 + 69) = v24;
          *((void *)v12 + 35) = 0;
          *((void *)v12 + 36) = 0;
          uint64_t v25 = v102;
          uint64_t v102 = 0;
          *((void *)v12 + 35) = v25;
          LODWORD(v25) = v103;
          int v103 = 0;
          *((_DWORD *)v12 + 72) = v25;
          LODWORD(v25) = v104;
          int v104 = 0;
          *((_DWORD *)v12 + 7WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v25;
          uint64_t v26 = v105;
          uint64_t v105 = 0;
          *((void *)v12 + 37) = v26;
          ++HIDWORD(v71);
        }
        std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, v11);
        if (!--v9)
        {
          uint64_t v27 = v70;
          unsigned int v28 = v71;
          LODWORD(v9) = HIDWORD(v71);
          uint64_t v2 = v63;
          goto LABEL_21;
        }
      }
LABEL_40:
      std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v72, v10);
      WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v56);
      uint64_t v2 = v63;
      goto LABEL_41;
    }
    unsigned int v28 = 0;
    uint64_t v27 = 0;
LABEL_21:
    int v70 = 0;
    LODWORD(v71) = 0;
LABEL_22:
    HIDWORD(v71) = 0;
    char v69 = 1;
    WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v70, v4);
    v68[0] = 0;
    v68[1] = 0;
    uint64_t v64 = v27;
    unsigned int v65 = v28;
    int v66 = v9;
    WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v68, v31);
    char v67 = 1;
    uint64_t v32 = *v2;
    uint64_t *v2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v32 + 16))(v32, &v64);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
    if (v67) {
      return WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v33);
    }
  }
  else
  {
    uint64_t v29 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v29);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::MatchBackgroundFetch,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

WebCore::ResourceRequestBase *IPC::Decoder::decode<WebCore::BackgroundFetchRecordInformation>(uint64_t a1, uint64_t *a2)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::BackgroundFetchRecordInformation,void>::decode(a2, a1);
  if (!*(unsigned char *)(a1 + 304))
  {
    uint64_t v5 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = (WebCore::ResourceRequestBase *)a2[3];
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WebCore::ResourceRequestBase *)v7();
    }
  }
  return result;
}

__n128 WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::BackgroundFetchRecordInformation>(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 304 * *(unsigned int *)(a1 + 12);
  *(void *)uint64_t v4 = *(void *)v3;
  WTF::URL::URL(v4 + 8, (uint64_t *)(v3 + 8));
  WTF::URL::URL(v4 + 48, (uint64_t *)(v3 + 48));
  *(void *)(v4 + 8++*(_DWORD *)(this + 8) = *(void *)(v3 + 88);
  uint64_t v5 = *(void *)(v3 + 96);
  *(void *)(v3 + 96) = 0;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 96) = v5;
  uint64_t v6 = *(void *)(v3 + 104);
  *(void *)(v3 + 104) = 0;
  *(void *)(v4 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 112);
  *(_DWORD *)(v3 + 112) = 0;
  *(_DWORD *)(v4 + 112) = v6;
  LODWORD(v6) = *(_DWORD *)(v3 + 116);
  *(_DWORD *)(v3 + 116) = 0;
  *(_DWORD *)(v4 + 116) = v6;
  *(void *)(v4 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(v4 + 12++*(_DWORD *)(this + 8) = 0;
  uint64_t v7 = *(void *)(v3 + 120);
  *(void *)(v3 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(v4 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 128);
  *(_DWORD *)(v3 + 12++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(v4 + 12++*(_DWORD *)(this + 8) = v7;
  LODWORD(v7) = *(_DWORD *)(v3 + 132);
  *(_DWORD *)(v3 + 1++*(_DWORD *)(this + 32) = 0;
  *(_DWORD *)(v4 + 1++*(_DWORD *)(this + 32) = v7;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 144) = 0;
  uint64_t v8 = *(void *)(v3 + 136);
  *(void *)(v3 + 136) = 0;
  *(void *)(v4 + 136) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(v3 + 144);
  *(_DWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v4 + 144) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(v3 + 148);
  *(_DWORD *)(v3 + 14++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(v4 + 14++*(_DWORD *)(this + 8) = v8;
  LODWORD(v++*(_DWORD *)(this + 8) = *(_DWORD *)(v3 + 152);
  *(unsigned char *)(v4 + 156) = *(unsigned char *)(v3 + 156);
  *(_DWORD *)(v4 + 152) = v8;
  uint64_t v9 = *(void *)(v3 + 160);
  *(void *)(v3 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(v4 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v9;
  uint64_t v10 = *(void *)(v3 + 168);
  *(void *)(v3 + 16++*(_DWORD *)(this + 8) = 0;
  *(void *)(v4 + 16++*(_DWORD *)(this + 8) = v10;
  uint64_t v11 = *(void *)(v3 + 176);
  *(void *)(v3 + 176) = 0;
  *(void *)(v4 + 176) = v11;
  uint64_t v12 = *(void *)(v3 + 184);
  *(unsigned char *)(v4 + 192) = *(unsigned char *)(v3 + 192);
  *(void *)(v4 + 184) = v12;
  uint64_t v13 = *(void *)(v3 + 200);
  *(void *)(v3 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(v4 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v13;
  LODWORD(v1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *(_DWORD *)(v3 + 208);
  *(_DWORD *)(v4 + 211) = *(_DWORD *)(v3 + 211);
  *(_DWORD *)(v4 + 20++*(_DWORD *)(this + 8) = v13;
  uint64_t v14 = *(void *)(v3 + 216);
  *(void *)(v3 + 216) = 0;
  *(void *)(v4 + 216) = v14;
  __n128 result = *(__n128 *)(v3 + 224);
  long long v16 = *(_OWORD *)(v3 + 240);
  *(__n128 *)(v4 + 2++*(_DWORD *)(this + 24) = result;
  *(_OWORD *)(v4 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v16;
  *(unsigned char *)(v4 + 256) = *(unsigned char *)(v3 + 256);
  *(void *)(v4 + 264) = 0;
  *(void *)(v4 + 272) = 0;
  uint64_t v17 = *(void *)(v3 + 264);
  *(void *)(v3 + 264) = 0;
  *(void *)(v4 + 264) = v17;
  LODWORD(v17) = *(_DWORD *)(v3 + 272);
  *(_DWORD *)(v3 + 272) = 0;
  *(_DWORD *)(v4 + 272) = v17;
  LODWORD(v17) = *(_DWORD *)(v3 + 276);
  *(_DWORD *)(v3 + 276) = 0;
  *(_DWORD *)(v4 + 276) = v17;
  *(void *)(v4 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(v4 + 28++*(_DWORD *)(this + 8) = 0;
  uint64_t v18 = *(void *)(v3 + 280);
  *(void *)(v3 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(v4 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v18;
  LODWORD(v1++*(_DWORD *)(this + 8) = *(_DWORD *)(v3 + 288);
  *(_DWORD *)(v3 + 28++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(v4 + 28++*(_DWORD *)(this + 8) = v18;
  LODWORD(v1++*(_DWORD *)(this + 8) = *(_DWORD *)(v3 + 292);
  *(_DWORD *)(v3 + 292) = 0;
  *(_DWORD *)(v4 + 292) = v18;
  uint64_t v19 = *(void *)(v3 + 296);
  *(void *)(v3 + 296) = 0;
  *(void *)(v4 + 296) = v19;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 304 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0xD79436)
    {
      __break(0xC471u);
      JUMPOUT(0x19919F418);
    }
    unint64_t v3 = *(WTF **)a1;
    uint64_t v4 = *(void *)a1 + 304 * *(unsigned int *)(a1 + 12);
    unsigned int v5 = 304 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(304 * a2));
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = v5 / 0x130;
    *(void *)a1 = v6;
    WTF::VectorMover<false,WebCore::BackgroundFetchRecordInformation>::move((uint64_t)v3, v4, v6);
    if (v3)
    {
      if (*(WTF **)a1 == v3)
      {
        *(void *)a1 = 0;
        *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      }
      WTF::fastFree(v3, v7);
    }
  }
}

void WTF::VectorMover<false,WebCore::BackgroundFetchRecordInformation>::move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      *(void *)(a3 + v6) = *(void *)(a1 + v6);
      WTF::URL::URL(a3 + v6 + 8, (uint64_t *)(a1 + v6 + 8));
      WTF::URL::URL(a3 + v6 + 48, (uint64_t *)(a1 + v6 + 48));
      *(void *)(v7 + 8++*(_DWORD *)(this + 8) = *(void *)(a1 + v6 + 88);
      uint64_t v10 = *(void *)(a1 + v6 + 96);
      *(void *)(v8 + 96) = 0;
      *(void *)(v7 + 104) = 0;
      *(void *)(v7 + 112) = 0;
      *(void *)(v7 + 96) = v10;
      uint64_t v11 = *(void *)(a1 + v6 + 104);
      *(void *)(v8 + 104) = 0;
      *(void *)(v7 + 104) = v11;
      LODWORD(v11) = *(_DWORD *)(a1 + v6 + 112);
      *(_DWORD *)(v8 + 112) = 0;
      *(_DWORD *)(v7 + 112) = v11;
      LODWORD(v11) = *(_DWORD *)(a1 + v6 + 116);
      *(_DWORD *)(v8 + 116) = 0;
      *(_DWORD *)(v7 + 116) = v11;
      *(void *)(v7 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(void *)(v7 + 12++*(_DWORD *)(this + 8) = 0;
      uint64_t v12 = *(void *)(a1 + v6 + 120);
      *(void *)(v8 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(void *)(v7 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v12;
      LODWORD(v12) = *(_DWORD *)(a1 + v6 + 128);
      *(_DWORD *)(v8 + 12++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(v7 + 12++*(_DWORD *)(this + 8) = v12;
      LODWORD(v12) = *(_DWORD *)(a1 + v6 + 132);
      *(_DWORD *)(v8 + 1++*(_DWORD *)(this + 32) = 0;
      *(_DWORD *)(v7 + 1++*(_DWORD *)(this + 32) = v12;
      *(void *)(v7 + 136) = 0;
      *(void *)(v7 + 144) = 0;
      uint64_t v13 = *(void *)(a1 + v6 + 136);
      *(void *)(v8 + 136) = 0;
      *(void *)(v7 + 136) = v13;
      LODWORD(v1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *(_DWORD *)(a1 + v6 + 144);
      *(_DWORD *)(v8 + 144) = 0;
      *(_DWORD *)(v7 + 144) = v13;
      LODWORD(v1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *(_DWORD *)(a1 + v6 + 148);
      *(_DWORD *)(v8 + 14++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(v7 + 14++*(_DWORD *)(this + 8) = v13;
      LODWORD(v1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *(_DWORD *)(a1 + v6 + 152);
      *(unsigned char *)(v7 + 156) = *(unsigned char *)(a1 + v6 + 156);
      *(_DWORD *)(v7 + 152) = v13;
      uint64_t v14 = *(void *)(a1 + v6 + 160);
      *(void *)(v8 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(void *)(v7 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v14;
      uint64_t v15 = *(void *)(a1 + v6 + 168);
      *(void *)(v8 + 16++*(_DWORD *)(this + 8) = 0;
      *(void *)(v7 + 16++*(_DWORD *)(this + 8) = v15;
      uint64_t v16 = *(void *)(a1 + v6 + 176);
      *(void *)(v8 + 176) = 0;
      *(void *)(v7 + 176) = v16;
      uint64_t v17 = *(void *)(a1 + v6 + 184);
      *(unsigned char *)(v7 + 192) = *(unsigned char *)(a1 + v6 + 192);
      *(void *)(v7 + 184) = v17;
      uint64_t v18 = *(void *)(a1 + v6 + 200);
      *(void *)(v8 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(void *)(v7 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v18;
      LODWORD(v1++*(_DWORD *)(this + 8) = *(_DWORD *)(a1 + v6 + 208);
      *(_DWORD *)(v7 + 211) = *(_DWORD *)(a1 + v6 + 211);
      *(_DWORD *)(v7 + 20++*(_DWORD *)(this + 8) = v18;
      uint64_t v19 = *(void *)(a1 + v6 + 216);
      *(void *)(v8 + 216) = 0;
      *(void *)(v7 + 216) = v19;
      long long v20 = *(_OWORD *)(a1 + v6 + 240);
      *(_OWORD *)(v7 + 2++*(_DWORD *)(this + 24) = *(_OWORD *)(a1 + v6 + 224);
      *(_OWORD *)(v7 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v20;
      *(unsigned char *)(v7 + 256) = *(unsigned char *)(a1 + v6 + 256);
      *(void *)(v7 + 264) = 0;
      *(void *)(v7 + 272) = 0;
      uint64_t v21 = *(void *)(a1 + v6 + 264);
      *(void *)(v8 + 264) = 0;
      *(void *)(v7 + 264) = v21;
      LODWORD(v21) = *(_DWORD *)(a1 + v6 + 272);
      *(_DWORD *)(v8 + 272) = 0;
      *(_DWORD *)(v7 + 272) = v21;
      LODWORD(v21) = *(_DWORD *)(a1 + v6 + 276);
      *(_DWORD *)(v8 + 276) = 0;
      *(_DWORD *)(v7 + 276) = v21;
      *(void *)(v7 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(void *)(v7 + 28++*(_DWORD *)(this + 8) = 0;
      uint64_t v22 = *(void *)(a1 + v6 + 280);
      *(void *)(v8 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(void *)(v7 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + v6 + 288);
      *(_DWORD *)(v8 + 28++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(v7 + 28++*(_DWORD *)(this + 8) = v22;
      LODWORD(v22) = *(_DWORD *)(a1 + v6 + 292);
      *(_DWORD *)(v8 + 292) = 0;
      *(_DWORD *)(v7 + 292) = v22;
      uint64_t v23 = *(void *)(a1 + v6 + 296);
      *(void *)(v8 + 296) = 0;
      *(void *)(v7 + 296) = v23;
      uint64_t v24 = *(WTF::StringImpl **)(a1 + v6 + 296);
      *(void *)(v8 + 296) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2) {
          WTF::StringImpl::destroy(v24, v9);
        }
        else {
          *(_DWORD *)v24 -= 2;
        }
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v8 + 280));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(v8 + 264));
      uint64_t v26 = *(WTF::StringImpl **)(v8 + 216);
      *(void *)(v8 + 216) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2) {
          WTF::StringImpl::destroy(v26, v25);
        }
        else {
          *(_DWORD *)v26 -= 2;
        }
      }
      uint64_t v27 = *(const void **)(v8 + 200);
      *(void *)(v8 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      if (v27) {
        CFRelease(v27);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + v6 + 8));
      v6 += 304;
    }
    while (v8 + 304 != a2);
  }
}

uint64_t std::__optional_destruct_base<WebCore::BackgroundFetchRecordInformation,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 304))
  {
    unint64_t v3 = *(WTF::StringImpl **)(a1 + 296);
    *(void *)(a1 + 296) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 280));
    WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::ASCIILiteral *)(a1 + 264));
    unsigned int v5 = *(WTF::StringImpl **)(a1 + 216);
    *(void *)(a1 + 216) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, v4);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
    uint64_t v6 = *(const void **)(a1 + 200);
    *(void *)(a1 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    if (v6) {
      CFRelease(v6);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)(a1 + 8));
  }
  return a1;
}

void WTF::VectorDestructor<true,WebCore::BackgroundFetchRecordInformation>::destruct(WTF::StringImpl *a1, WTF::StringImpl *a2)
{
  if (a1 != a2)
  {
    unint64_t v3 = a1;
    do
    {
      uint64_t v4 = (WTF::StringImpl *)*((void *)v3 + 37);
      *((void *)v3 + 37) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
      WTF::Vector<WebCore::HTTPHeaderMap::UncommonHeader,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::~Vector((WTF::StringImpl *)((char *)v3 + 280));
      WTF::Vector<WebCore::HTTPHeaderMap::CommonHeader,0ul,WTF::CrashOnOverflow,6ul,WTF::FastMalloc>::~Vector((WTF::StringImpl *)((char *)v3 + 264));
      uint64_t v6 = (WTF::StringImpl *)*((void *)v3 + 27);
      *((void *)v3 + 27) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          WTF::StringImpl::destroy(v6, v5);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
      uint64_t v7 = (const void *)*((void *)v3 + 25);
      *((void *)v3 + 25) = 0;
      if (v7) {
        CFRelease(v7);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WTF::StringImpl *)((char *)v3 + 8));
      unint64_t v3 = (WTF::StringImpl *)((char *)v3 + 304);
    }
    while (v3 != a2);
  }
}

uint64_t WTF::Vector<WebCore::BackgroundFetchRecordInformation,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::BackgroundFetchRecordInformation>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 304 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4240;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4240;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v15 = 0;
        uint64_t v16 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v17 = *((void *)a2 + 3);
        if (v17)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v17 + 16))(v17, v4, v5);
            unint64_t v15 = 0;
            uint64_t v25 = *(void *)a2;
            uint64_t v26 = *((void *)a2 + 1);
            uint64_t v27 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v16 = 0;
            if (v27 && v26)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25, v26);
              uint64_t v16 = *(void *)a2;
              unint64_t v15 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v15 = 0;
            uint64_t v16 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<WebCore::ResourceResponse>(a2, v28);
            char v9 = v31;
            if (v31)
            {
              std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v35, (uint64_t)v28);
              unsigned int v37 = 0;
              char v9 = 1;
            }
            else
            {
              v35[0] = 0;
            }
            char v38 = v9;
            std::__optional_destruct_base<WebCore::ResourceResponse,false>::~__optional_destruct_base[abi:sn180100]((WebCore::ResourceResponseBase *)v28, v8);
            if (!v38)
            {
LABEL_32:
              uint64_t v19 = *(void *)a2;
              uint64_t v20 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v21 = *((void *)a2 + 3);
              if (!v21 || !v20)
              {
                v32[0] = 0;
LABEL_34:
                char v34 = 0;
                goto LABEL_35;
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
              v32[0] = 0;
              if (!v38) {
                goto LABEL_34;
              }
LABEL_19:
              unsigned int v33 = -1;
              unsigned int v14 = v37;
              if (v37 == -1)
              {
                char v34 = 1;
              }
              else
              {
                ((void (*)(unsigned char *, unsigned char *, unsigned char *))off_1EE9F4268[v37])(v28, v32, v35);
                unsigned int v33 = v14;
                char v34 = 1;
                if (v38)
                {
                  if (v37 != -1)
                  {
                    (*(&off_1EE9F4258 + v37))((int)v28, (WebCore::ResourceResponseBase *)v35);
                    if (!v34)
                    {
LABEL_35:
                      uint64_t v22 = *(void *)a2;
                      uint64_t v23 = *((void *)a2 + 1);
                      *(void *)a2 = 0;
                      *((void *)a2 + 1) = 0;
                      uint64_t v24 = *((void *)a2 + 3);
                      if (!v24) {
                        return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(v2);
                      }
                      if (!v23) {
                        return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(v2);
                      }
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
                      if (!v34) {
                        return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(v2);
                      }
                    }
                  }
                }
              }
              uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)>,std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData>>(v2, (uint64_t)v32);
              if (v34)
              {
                if (v33 != -1) {
                  return (*(&off_1EE9F4258 + v33))((int)v35, (WebCore::ResourceResponseBase *)v32);
                }
              }
              return result;
            }
          }
          else
          {
            IPC::Decoder::decode<WebCore::ExceptionData>((uint64_t *)a2, (uint64_t)v28);
            int v12 = v30;
            if (v30)
            {
              char v13 = v28[0];
              uint64_t v36 = v29;
              int v12 = 1;
              unsigned int v37 = 1;
            }
            else
            {
              char v13 = 0;
            }
            v35[0] = v13;
            char v38 = v12;
            if (!v12) {
              goto LABEL_32;
            }
          }
          v32[0] = 0;
          goto LABEL_19;
        }
        unint64_t v15 = v5;
        uint64_t v16 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v18 = *((void *)a2 + 3);
      if (v18 && v15) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16);
      }
      v35[0] = 0;
      char v38 = 0;
      goto LABEL_32;
    }
  }
  uint64_t v10 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(v10);
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::RetrieveRecordResponse,WebKit::WebSWClientConnection::retrieveRecordResponse(WTF::ObjectIdentifierGeneric<WebCore::BackgroundFetchRecordIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v4);
  uint64_t v6 = 0;
  char v7 = 0;
  char v5 = v5 & 0xF1 | 4;
  unsigned int v8 = 0;
  uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)>,std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData>>(a1, (uint64_t)v4);
  if (v8 != -1) {
    return (*(&off_1EE9F4258 + v8))((int)&v3, (WebCore::ResourceResponseBase *)v4);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ResourceResponseBase *this)
{
  char v3 = (const void *)*((void *)this + 30);
  *((void *)this + 3IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebCore::ResourceResponseBase::~ResourceResponseBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>(a2, a3).n128_u64[0];
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::ResourceResponse> &&)>,std::experimental::fundamentals_v3::expected<WebCore::ResourceResponse,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 256);
  if (v3)
  {
    if (v3 != 1)
    {
      int v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(v8, v9);
    }
    char v4 = *(unsigned char *)a2;
    char v5 = *(_DWORD **)(a2 + 8);
    if (v5) {
      *v5 += 2;
    }
    v11[0] = v4;
    int v12 = v5;
    unsigned int v13 = 1;
  }
  else
  {
    std::__tuple_leaf<0ul,WebCore::ResourceResponse,false>::__tuple_leaf[abi:sn180100]<WebCore::ResourceResponse,void>((uint64_t)v11, a2);
    unsigned int v13 = 0;
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, v11);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v13 != -1) {
    return (*(&off_1EE9F4278 + v13))((int)&v10, (WebCore::ResourceResponseBase *)v11);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, WebCore::ResourceResponseBase *this)
{
  int v3 = (const void *)*((void *)this + 30);
  *((void *)this + 3IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v3) {
    CFRelease(v3);
  }

  WebCore::ResourceResponseBase::~ResourceResponseBase(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore16ResourceResponseENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v3);
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      unsigned int v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v4 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          v26[1] = v29;
          uint64_t v16 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          if (!v16) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          goto LABEL_21;
        }
        uint64_t v15 = v4 + 16 * v11;
        uint64_t v16 = *(void *)(v15 + 8);
        *(void *)(v15 + ++*(_DWORD *)(this + 8) = 0;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v11 == v12) {
        goto LABEL_24;
      }
    }
  }
  if (v4)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::remove(uint64_t *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::Function<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&),WTF::DefaultHash,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::RetrieveRecordResponseBodyCallbackIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<void ()(std::experimental::fundamentals_v3::expected<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,WebCore::ResourceError> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v8 >> 1);
    }
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::FocusFromServiceWorker,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F4298;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::FocusFromServiceWorker,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F4298;
  uint64_t v3 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::FocusFromServiceWorker,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::focusServiceWorkerClient(WebCore::ProcessQualified<WTF::UUID>,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&)::$_0>::call(WebCore::Document *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)((char *)a1 + 16);
  uint64_t v3 = *((void *)a1 + 6);
  *((void *)a1 + 6) = 0;
  uint64_t v4 = (uint64_t *)WebCore::Document::allDocumentsMap(a1);
  int v5 = (WebCore::Document *)WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(v4, v2);
  if (v5)
  {
    uint64_t v6 = v5;
    *((_DWORD *)v5 + 7) += 2;
    WebCore::Document::eventLoop(v5);
    *((_DWORD *)v6 + 7) += 2;
    unsigned int v7 = (void *)WTF::fastMalloc((WTF *)0x18);
    *unsigned int v7 = &unk_1EE9F42E8;
    v7[1] = v6;
    v7[2] = v3;
    v15[0] = v7;
    WebCore::EventLoopTaskGroup::queueTask();
    uint64_t result = v15[0];
    v15[0] = 0;
    if (result) {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
    if (*((_DWORD *)v6 + 7) == 2)
    {
      if ((*((_WORD *)v6 + 17) & 0x400) == 0) {
        return WebCore::Node::removedLastRef(v6);
      }
    }
    else
    {
      *((_DWORD *)v6 + 7) -= 2;
    }
  }
  else
  {
    long long v9 = *((_OWORD *)v2 + 1);
    long long v17 = *(_OWORD *)v2;
    long long v18 = v9;
    uint64_t v10 = WebCore::DocumentLoader::fromScriptExecutionContextIdentifier();
    if (v10)
    {
      uint64_t v11 = (_DWORD *)v10;
      ++*(_DWORD *)(v10 + 24);
      uint64_t v12 = (void *)WTF::fastMalloc((WTF *)0x10);
      *uint64_t v12 = &unk_1EE9F42C0;
      v12[1] = v3;
      v15[0] = v12;
      WebCore::DocumentLoader::whenDocumentIsCreated();
      uint64_t result = v15[0];
      v15[0] = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
      if (v11[6] == 1) {
        return (*(uint64_t (**)(_DWORD *))(*(void *)v11 + 24))(v11);
      }
      else {
        --v11[6];
      }
    }
    else
    {
      LOBYTE(v15[0]) = 0;
      char v16 = 0;
      uint64_t v13 = *((void *)a1 + 6);
      *((void *)a1 + 6) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v13 + 16))(v13, v15);
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      uint64_t result = std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v15, v14);
      if (v3) {
        return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
    }
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWClientConnection24focusServiceWorkerClientEN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS4_23ServiceWorkerClientDataEEEEEEEN3__0clEvEUlPT_E_vJPNS4_8DocumentEEED1Ev(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F42C0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWClientConnection24focusServiceWorkerClientEN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS4_23ServiceWorkerClientDataEEEEEEEN3__0clEvEUlPT_E_vJPNS4_8DocumentEEED0Ev(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F42C0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit21WebSWClientConnection24focusServiceWorkerClientEN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS4_23ServiceWorkerClientDataEEEEEEEN3__0clEvEUlPT_E_vJPNS4_8DocumentEEE4callESM_(uint64_t a1, WebCore::Document *this)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    WebCore::Document::eventLoop(this);
    *((_DWORD *)this + 7) += 2;
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    int v5 = (void *)WTF::fastMalloc((WTF *)0x18);
    void *v5 = &unk_1EE9F42E8;
    v5[1] = this;
    void v5[2] = v4;
    v9[0] = v5;
    WebCore::EventLoopTaskGroup::queueTask();
    uint64_t result = v9[0];
    v9[0] = 0;
    if (result) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  else
  {
    LOBYTE(v9[0]) = 0;
    char v10 = 0;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v7 + 16))(v7, v9);
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v9, v8);
  }
  return result;
}

void *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21WebSWClientConnection24focusServiceWorkerClientEN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS4_23ServiceWorkerClientDataEEEEEEEN3__0clEvENUlPT_E_clINS4_8DocumentEEEDaSJ_EUlvE_vJEED1Ev(void *a1)
{
  *a1 = &unk_1EE9F42E8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21WebSWClientConnection24focusServiceWorkerClientEN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS4_23ServiceWorkerClientDataEEEEEEEN3__0clEvENUlPT_E_clINS4_8DocumentEEEDaSJ_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F42E8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (*(_DWORD *)(v4 + 28) == 2)
    {
      if ((*(_WORD *)(v4 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
    }
    else
    {
      *(_DWORD *)(v4 + 28) -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

unsigned int *_ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21WebSWClientConnection24focusServiceWorkerClientEN7WebCore16ProcessQualifiedINS_4UUIDEEEONS_17CompletionHandlerIFvONSt3__18optionalINS4_23ServiceWorkerClientDataEEEEEEEN3__0clEvENUlPT_E_clINS4_8DocumentEEEDaSJ_EUlvE_vJEE4callEv(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || (uint64_t v3 = *(void *)(v2 + 544)) == 0)
  {
    uint64_t v4 = 0;
    char v5 = 1;
    goto LABEL_10;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  char v5 = 1;
  if (!v4) {
    goto LABEL_10;
  }
  atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
  uint64_t v6 = *(void *)(v4 + 24);
  if (!v6 || (uint64_t v7 = *(_DWORD **)(v6 + 8)) == 0)
  {
    char v5 = 0;
LABEL_10:
    v21[0] = 0;
    v21[192] = 0;
    uint64_t v13 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 16))(v13, v21);
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    uint64_t result = (unsigned int *)std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v14);
    if (v5) {
      return result;
    }
    return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  ++*v7;
  WebCore::FocusController::setFocusedFrame();
  WebCore::ServiceWorkerClientData::from();
  std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::__optional_destruct_base[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)v21, &v17);
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v21);
  (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v21, v9);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v10);
  uint64_t v12 = v19;
  uint64_t v19 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v11);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  char v16 = v18;
  long long v18 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v11);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  WTF::RefCounted<WebCore::Page>::deref(v7);
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
}

void *WTF::Detail::CallableWrapper<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AddCookieChangeSubscriptions,WebKit::WebSWClientConnection::addCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::addCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4310;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AddCookieChangeSubscriptions,WebKit::WebSWClientConnection::addCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::addCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4310;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::AddCookieChangeSubscriptions,WebKit::WebSWClientConnection::addCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::addCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    uint64_t result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      uint64_t result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  else
  {
    v5[0] = 0;
    char v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RemoveCookieChangeSubscriptions,WebKit::WebSWClientConnection::removeCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::removeCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4338;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RemoveCookieChangeSubscriptions,WebKit::WebSWClientConnection::removeCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::removeCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4338;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::RemoveCookieChangeSubscriptions,WebKit::WebSWClientConnection::removeCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWClientConnection::removeCookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2 && (IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v5, a2), v8))
  {
    uint64_t result = WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
    if (v7)
    {
      uint64_t result = v6;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
        }
        else {
          *(_DWORD *)v6 -= 2;
        }
      }
    }
  }
  else
  {
    v5[0] = 0;
    char v7 = 0;
    return WebKit::WebSWClientConnection::enableNavigationPreload(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0::operator()<std::optional<WebCore::ExceptionData>>(v2, v5);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4360;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4360;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v16 = 0;
        uint64_t v17 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v18 = *((void *)a2 + 3);
        if (v18)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v18 + 16))(v18, v4, v5);
            unint64_t v16 = 0;
            uint64_t v26 = *(void *)a2;
            uint64_t v27 = *((void *)a2 + 1);
            uint64_t v28 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v17 = 0;
            if (v28 && v27)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 16))(v28, v26, v27);
              uint64_t v17 = *(void *)a2;
              unint64_t v16 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v16 = 0;
            uint64_t v17 = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, a2, (uint64_t)&v36);
            int v9 = v38;
            if (v38)
            {
              uint64_t v32 = v36;
              uint64_t v10 = v37;
              uint64_t v36 = 0;
              uint64_t v37 = 0;
              uint64_t v33 = v10;
              int v34 = 0;
              WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v36, v8);
              int v9 = 1;
            }
            else
            {
              LOBYTE(v++*(_DWORD *)(this + 32) = 0;
            }
            int v15 = 0;
            char v35 = v9;
            if (!v9)
            {
LABEL_27:
              uint64_t v20 = *(void *)a2;
              uint64_t v21 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v22 = *((void *)a2 + 3);
              if (v22 && v21) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20);
              }
              v29[0] = 0;
              char v31 = 0;
              goto LABEL_29;
            }
          }
          else
          {
            IPC::Decoder::decode<WebCore::ExceptionData>((uint64_t *)a2, (uint64_t)&v36);
            int v13 = v38;
            if (v38)
            {
              char v14 = v36;
              uint64_t v33 = v37;
              int v13 = 1;
              int v34 = 1;
            }
            else
            {
              char v14 = 0;
            }
            LOBYTE(v++*(_DWORD *)(this + 32) = v14;
            char v35 = v13;
            int v15 = 1;
            if (!v13) {
              goto LABEL_27;
            }
          }
          v29[0] = 0;
          int v30 = -1;
          ((void (*)(uint64_t *, char *, uint64_t *))off_1EE9F4388[v15])(&v36, v29, &v32);
          int v30 = v15;
          char v31 = 1;
          if (!v35 || v34 == -1 || (((void (*)(uint64_t *, uint64_t *))off_1EE9F4378[v34])(&v36, &v32), v31))
          {
LABEL_21:
            uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>(v2, v29);
            if (v31)
            {
              if (v30 != -1) {
                return ((uint64_t (*)(uint64_t *, char *))off_1EE9F4378[v30])(&v32, v29);
              }
            }
            return result;
          }
LABEL_29:
          uint64_t v23 = *(void *)a2;
          uint64_t v24 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v25 = *((void *)a2 + 3);
          if (!v25) {
            return IPC::Connection::cancelReply<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
          }
          if (!v24) {
            return IPC::Connection::cancelReply<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v23);
          if (!v31) {
            return IPC::Connection::cancelReply<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
          }
          goto LABEL_21;
        }
        unint64_t v16 = v5;
        uint64_t v17 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v19 = *((void *)a2 + 3);
      if (v19 && v16) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      }
      goto LABEL_27;
    }
  }
  uint64_t v11 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v11);
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerConnection::CookieChangeSubscriptions,WebKit::WebSWClientConnection::cookieChangeSubscriptions(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerRegistrationIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(uint64_t *a1)
{
  v2[0] = 0;
  v2[1] = 0;
  int v3 = 0;
  uint64_t result = WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>(a1, (char *)v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9F4378[v3])(&v4, v2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      char v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v25 = *((void *)a1 + 3);
    if (v25)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v25 + 16))(v25, v6, v5);
        uint64_t v24 = *(void *)a1;
        unint64_t v23 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v23 = 0;
        uint64_t v24 = 0;
      }
    }
    goto LABEL_28;
  }
  int v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    if (v10 >= 0x10000)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::CookieChangeSubscription>(a1, (uint64_t)&v27);
        if (!v29) {
          break;
        }
        if (HIDWORD(v31) == v31)
        {
          WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderField>((uint64_t)&v30, (unint64_t)&v27);
        }
        else
        {
          int v18 = HIDWORD(v31) + 1;
          uint64_t v19 = (void *)(v30 + 16 * HIDWORD(v31));
          uint64_t v20 = v27;
          uint64_t v27 = 0;
          *uint64_t v19 = v20;
          uint64_t v21 = v28;
          uint64_t v28 = 0;
          v19[1] = v21;
          HIDWORD(v31) = v18;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v30, HIDWORD(v31));
          *(void *)a3 = v30;
          uint64_t v26 = v31;
          uint64_t v30 = 0;
          uint64_t v31 = 0;
          *(void *)(a3 + ++*(_DWORD *)(this + 8) = v26;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_17:
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        *(void *)a3 = v16;
        *(void *)(a3 + ++*(_DWORD *)(this + 8) = v17;
LABEL_18:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, a2);
      }
      LODWORD(v31) = v10;
      uint64_t v30 = WTF::fastMalloc((WTF *)(16 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::CookieChangeSubscription>(a1, (uint64_t)&v27);
        if (!v29) {
          break;
        }
        if (HIDWORD(v31) == v31)
        {
          WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::HTTPHeaderField>((uint64_t)&v30, (unint64_t)&v27);
        }
        else
        {
          int v12 = HIDWORD(v31) + 1;
          int v13 = (void *)(v30 + 16 * HIDWORD(v31));
          uint64_t v14 = v27;
          uint64_t v27 = 0;
          *int v13 = v14;
          uint64_t v15 = v28;
          uint64_t v28 = 0;
          v13[1] = v15;
          HIDWORD(v31) = v12;
        }
        std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          uint64_t v16 = v30;
          uint64_t v17 = v31;
          goto LABEL_17;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
    return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, a2);
  }
  unint64_t v23 = v5;
  uint64_t v24 = 0;
LABEL_28:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v23) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v24);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::CookieChangeSubscription>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::CookieChangeSubscription,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (WTF::StringImpl *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CookieChangeSubscriptionELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CookieChangeSubscriptionELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CookieChangeSubscriptionELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
  uint64_t v3 = *a3;
  *a3 = 0;
  *(void *)a2 = v3;
  LODWORD(vWebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = v3;
  LODWORD(vWebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CookieChangeSubscriptionELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISG_LNS0_6_TraitE1EEEEEvRSH_OT_EUlRSN_OT0_E_JRNS0_6__baseILSK_1EJSE_SF_EEEOSV_EEEDcSN_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
}

uint64_t WebKit::callExceptionOrResultCallback<WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>,std::experimental::fundamentals_v3::expected<WTF::Vector<WebCore::CookieChangeSubscription,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ExceptionData>>(uint64_t *a1, char *a2)
{
  int v2 = *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 != 1)
    {
      uint64_t v8 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CookieChangeSubscriptionELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(v8);
    }
    char v3 = *a2;
    char v4 = (_DWORD *)*((void *)a2 + 1);
    if (v4) {
      *v4 += 2;
    }
    LOBYTE(v9) = v3;
    unint64_t v10 = v4;
    int v11 = 1;
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    uint64_t v5 = (_DWORD *)*((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    unint64_t v10 = v5;
    int v11 = 0;
  }
  uint64_t v6 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v9);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
  if (v11 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))off_1EE9F4398[v11])(&v12, &v9);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CookieChangeSubscriptionELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore24CookieChangeSubscriptionELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

unsigned int *WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref(unsigned int *result)
{
  if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = result;
    atomic_store(1u, result);
    int v2 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
    *(void *)int v2 = &unk_1EE9F48D0;
    *((void *)v2 + 1) = v1;
    char v3 = v2;
    WTF::ensureOnMainThread();
    uint64_t result = v3;
    if (v3) {
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 8) - 8) + 8))();
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSWContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F43B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSWContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F43B8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSWContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updatePreferencesStore(WebKit::WebPreferencesStore &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F43E0;
  uint64_t v3 = *(WTF **)(a1 + 40);
  if (v3) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*(unsigned int *)(a1 + 48));
  }
  char v4 = *(WTF **)(a1 + 16);
  if (v4) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*(unsigned int *)(a1 + 24));
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 32), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updatePreferencesStore(WebKit::WebPreferencesStore &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F43E0;
  uint64_t v3 = (WTF *)*((void *)this + 5);
  if (v3) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*((unsigned int *)this + 12));
  }
  char v4 = (WTF *)*((void *)this + 2);
  if (v4) {
    WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*((unsigned int *)this + 6));
  }
  uint64_t v5 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v5 + 32), a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updatePreferencesStore(WebKit::WebPreferencesStore &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebSWContextManagerConnection::updatePreferencesStore(*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::LastNavigationWasAppInitiated)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9F4408;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::LastNavigationWasAppInitiated)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4408;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }

  return WTF::fastFree(this, a2);
}

WebCore::ServiceWorkerThreadProxy *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::LastNavigationWasAppInitiated)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebSWContextManagerConnection::updateAppInitiatedValue(*(atomic_uchar *volatile **)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::installServiceWorker(WebCore::ServiceWorkerContextData &&,WebCore::ServiceWorkerData &&,WTF::String &&,WebCore::WorkerThreadMode,WebCore::ServiceWorkerIsInspectable,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F4430;
  uint64_t v3 = (WTF::StringImpl *)a1[86];
  a1[86] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  char v4 = (WTF::StringImpl *)a1[80];
  a1[80] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(a1 + 4), a2);
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 32), v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::installServiceWorker(WebCore::ServiceWorkerContextData &&,WebCore::ServiceWorkerData &&,WTF::String &&,WebCore::WorkerThreadMode,WebCore::ServiceWorkerIsInspectable,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F4430;
  uint64_t v3 = (WTF::StringImpl *)a1[86];
  a1[86] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  char v4 = (WTF::StringImpl *)a1[80];
  a1[80] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  WebCore::ServiceWorkerContextData::~ServiceWorkerContextData((WebCore::ServiceWorkerContextData *)(a1 + 4), a2);
  uint64_t v6 = a1[3];
  a1[3] = 0;
  if (v6) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v6 + 32), v5);
  }

  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::installServiceWorker(WebCore::ServiceWorkerContextData &&,WebCore::ServiceWorkerData &&,WTF::String &&,WebCore::WorkerThreadMode,WebCore::ServiceWorkerIsInspectable,WTF::OptionSet<WebCore::AdvancedPrivacyProtections>)::$_0,void>::call(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(uint64_t **)(a1 + 16);
  {
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
    {
      WebCore::pageConfigurationWithEmptyClients();
      uint64_t v2 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)(v2 + ++*(_DWORD *)(this + 8) = 1;
      *(void *)uint64_t v2 = &unk_1EE9F5AA8;
      if (v12)
      {
        if (v12[2] == 1) {
          (*(void (**)())(*(void *)v12 + 8))();
        }
        else {
          --v12[2];
        }
      }
      WebKit::WebDatabaseProvider::getOrCreate(v1[14], &v13);
      if (v9)
      {
        if (v9[2] == 1) {
          (*(void (**)())(*(void *)v9 + 8))();
        }
        else {
          --v9[2];
        }
      }
      uint64_t v3 = v1[15];
      uint64_t v4 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)(v4 + ++*(_DWORD *)(this + 8) = 1;
      *(void *)uint64_t v4 = &unk_1EE9F2890;
      *(void *)(v4 + 16) = v3;
      if (v8 && atomic_fetch_add((atomic_uint *volatile)v8 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v8 + 2);
        (*(void (**)())(*(void *)v8 + 24))();
      }
      {
        ++*(_DWORD *)(*(void *)(WebKit::WebProcess::singleton(void)::process + 400) + 8);
        if (v11)
        {
          if (v11[2] == 1) {
            (*(void (**)())(*(void *)v11 + 8))();
          }
          else {
            --v11[2];
          }
        }
        ++*(_DWORD *)(v1[23] + 8);
        if (v10)
        {
          if (v10[2] == 1) {
            (*(void (**)())(*(void *)v10 + 8))();
          }
          else {
            --v10[2];
          }
        }
        uint64_t v5 = (WebKit::WebCookieJar *)WTF::fastMalloc((WTF *)0x60);
        WebKit::WebCookieJar::WebCookieJar(v5);
      }
      unint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v7);
    }
    __break(1u);
    std::__throw_bad_optional_access[abi:sn180100]();
  }
  uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
  WebKit::WebProcess::WebProcess(v6);
}

void WebKit::RemoteWorkerLibWebRTCProvider::~RemoteWorkerLibWebRTCProvider(WebKit::RemoteWorkerLibWebRTCProvider *this)
{
  WebCore::LibWebRTCProvider::~LibWebRTCProvider(this);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::RemoteWorkerLibWebRTCProvider::createRTCDataChannelRemoteHandlerConnection@<X0>(WebKit::RemoteWorkerLibWebRTCProvider *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (WebKit::RTCDataChannelRemoteManager *)WebKit::RTCDataChannelRemoteManager::sharedManager(this);
  uint64_t result = WebKit::RTCDataChannelRemoteManager::remoteHandlerConnection(v3);
  atomic_fetch_add((atomic_uint *volatile)(result + 8), 1u);
  *a2 = result;
  return result;
}

uint64_t WebCore::LibWebRTCProvider::setVP9HardwareSupportForTesting(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 19WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = a2;
  return result;
}

BOOL WebCore::LibWebRTCProvider::isSupportingVP9HardwareDecoder(WebCore::LibWebRTCProvider *this)
{
  return *((unsigned char *)this + 194) && *((unsigned char *)this + 193) != 0;
}

void WebKit::WebStorageProvider::~WebStorageProvider(WebKit::WebStorageProvider *this, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
  }
}

{
  WTF::StringImpl *v3;
  unsigned int *v4;
  uint64_t vars8;

  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebStorageProvider::storageConnection(WebKit::WebStorageProvider *this)
{
  uint64_t result = *((void *)this + 1);
  if (!result)
  {
    uint64_t v3 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 1;
    *(void *)uint64_t v3 = &unk_1EE9F7A40;
    uint64_t v4 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = v3;
    if (v4)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v4 + 2);
        (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
      }
    }
    return *((void *)this + 1);
  }
  return result;
}

WTF::StringImpl *WebKit::WebStorageProvider::ensureMediaKeysStorageDirectoryForOrigin@<X0>(WTF::StringImpl *this@<X0>, const WebCore::SecurityOriginData *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 2);
  if (v4 && *(_DWORD *)(v4 + 4))
  {
    WebCore::StorageUtilities::encodeSecurityOriginForFileName();
    WTF::FileSystemImpl::pathByAppendingComponent();
    WTF::FileSystemImpl::pathByAppendingComponent();
    v13[0] = 0;
    int v14 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v13, (uint64_t)a2);
    v15[0] = 0;
    int v16 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v15, (uint64_t)a2);
    WebCore::StorageUtilities::writeOriginToFile((WebCore::StorageUtilities *)&v10, (const WTF::String *)v13, v6);
    if (v16 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v16])(&v12, v15);
    }
    int v16 = -1;
    if (v14 != -1) {
      ((void (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_11[v14])(&v12, v13);
    }
    uint64_t v8 = v10;
    unint64_t v10 = 0;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2) {
        WTF::StringImpl::destroy(v8, v7);
      }
      else {
        *(_DWORD *)v8 -= 2;
      }
    }
    this = v11;
    int v11 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
  }
  else
  {
    uint64_t v9 = (_DWORD *)*MEMORY[0x1E4F30980];
    if (*MEMORY[0x1E4F30980]) {
      *v9 += 2;
    }
    *a3 = v9;
  }
  return this;
}

void WebKit::WebStorageProvider::setMediaKeysStorageDirectory(WebKit::WebStorageProvider *this, const WTF::String *a2)
{
}

void std::default_delete<WebKit::WebStorageProvider>::operator()[abi:sn180100](int a1, WTF *this)
{
  if (this)
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
    *((void *)this + 2) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, this);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    uint64_t v4 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
    }
    WTF::fastFree(this, this);
  }
}

void *_ZN3WTF6Detail15CallableWrapperIZZN6WebKit29WebSWContextManagerConnection20installServiceWorkerEON7WebCore24ServiceWorkerContextDataEONS4_17ServiceWorkerDataEONS_6StringENS4_16WorkerThreadModeENS4_26ServiceWorkerIsInspectableENS_9OptionSetINS4_26AdvancedPrivacyProtectionsEEEEN3__0clEvEUlRT_E_NS_9UniqueRefINS4_22LocalFrameLoaderClientEEEJRNS4_10LocalFrameEEED1Ev(void *a1)
{
  *a1 = &unk_1EE9F4458;
  uint64_t v4 = (WTF *)a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v3);
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit29WebSWContextManagerConnection20installServiceWorkerEON7WebCore24ServiceWorkerContextDataEONS4_17ServiceWorkerDataEONS_6StringENS4_16WorkerThreadModeENS4_26ServiceWorkerIsInspectableENS_9OptionSetINS4_26AdvancedPrivacyProtectionsEEEEN3__0clEvEUlRT_E_NS_9UniqueRefINS4_22LocalFrameLoaderClientEEEJRNS4_10LocalFrameEEED0Ev(WTF *this)
{
  *(void *)this = &unk_1EE9F4458;
  uint64_t v4 = (WTF *)*((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v3);
  }

  return WTF::fastFree(this, v3);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN6WebKit29WebSWContextManagerConnection20installServiceWorkerEON7WebCore24ServiceWorkerContextDataEONS4_17ServiceWorkerDataEONS_6StringENS4_16WorkerThreadModeENS4_26ServiceWorkerIsInspectableENS_9OptionSetINS4_26AdvancedPrivacyProtectionsEEEEN3__0clEvEUlRT_E_NS_9UniqueRefINS4_22LocalFrameLoaderClientEEEJRNS4_10LocalFrameEEE4callESO_@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + ++*(_DWORD *)(this + 8) = 0;
  *a2 = v2;
  return result;
}

unsigned int *std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>>::__assign_alt[abi:sn180100]<0ul,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>>(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4 = result[2];
  if (v4)
  {
    unint64_t v7 = result;
    if (v4 != -1) {
      uint64_t result = (unsigned int *)((uint64_t (*)(char *, unsigned int *))off_1EE9F4470[v4])(&v9, result);
    }
    uint64_t v8 = *a3;
    *a3 = 0;
    *(void *)unint64_t v7 = v8;
    v7[2] = 0;
  }
  else
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t result = *a2;
    *a2 = v5;
    if (result)
    {
      uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 8);
      return (unsigned int *)v6();
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF17CompletionHandlerIFNS8_9UniqueRefIN7WebCore22LocalFrameLoaderClientEEERNSB_10LocalFrameEEEENS9_IFNSA_INSB_17RemoteFrameClientEEERNSB_11RemoteFrameEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSH_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

atomic_uchar *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(atomic_uchar *this)
{
  uint64_t v1 = this;
  char v2 = 0;
  atomic_compare_exchange_strong_explicit(this, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this);
  }
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = v3 - 1;
  *((void *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    uint64_t v9 = *((void *)v1 + 2);
    uint64_t v6 = *((void *)v1 + 3);
    *((void *)v1 + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
    BOOL v5 = v9 == 0;
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v6 = 0;
  }
  int v7 = 1;
  atomic_compare_exchange_strong_explicit(v1, (unsigned __int8 *)&v7, 0, memory_order_release, memory_order_relaxed);
  if (v7 == 1)
  {
    if (v4) {
      return this;
    }
  }
  else
  {
    this = (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4) {
      return this;
    }
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v8 = &unk_1EE9F48F8;
  *(void *)(v8 + ++*(_DWORD *)(this + 8) = v1;
  *(void *)(v8 + 16) = v6;
  *(unsigned char *)(v8 + ++*(_DWORD *)(this + 24) = v5;
  unint64_t v10 = (atomic_uchar *)v8;
  WTF::ensureOnMainThread();
  this = v10;
  if (v10) {
    return (atomic_uchar *)(*(uint64_t (**)(atomic_uchar *))(*(void *)v10 + 8))(v10);
  }
  return this;
}

uint64_t WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  uint64_t v4 = *(WTF **)(a1 + 8);
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    BOOL v5 = (WTF *)MEMORY[0x199737F00]();
    uint64_t result = WTF::fastFree(v5, v6);
  }
  if (*(unsigned char *)(a1 + 24)) {
    BOOL v7 = v4 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    return WTF::fastFree(v4, a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setUserAgent(WTF::String &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F4490;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 32), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setUserAgent(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F4490;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 32), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setUserAgent(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  return WebKit::WebSWContextManagerConnection::setUserAgent(*(void *)(a1 + 8), (uint64_t *)(a1 + 16));
}

unint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerJobDataIdentifier>,void>::encode<IPC::Encoder,std::optional<WebCore::ServiceWorkerJobDataIdentifier> const&>(a1, *(void *)a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

unsigned int *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(unsigned int *result, void *a2)
{
  char v2 = (uint64_t *)result;
  *a2 = -1;
  uint64_t v3 = a2[2];
  a2[2] = 0;
  if (v3) {
    unint64_t result = WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
  ++*(_DWORD *)(*v2 - 16);
  uint64_t v4 = *v2;
  if (*v2) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *v2;
  if (*v2)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (unsigned int *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(v2, v8 >> 1);
    }
  }
  return result;
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v5;
    while (1)
    {
      int v11 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v12 = *v11;
      if (*v11 != -1)
      {
        uint64_t v8 = v11[1];
        if (v12 | v8)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            unsigned int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            unsigned int v16 = 0;
          }
          int v17 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(v12, v8);
          int v18 = 0;
          do
          {
            unsigned int v19 = v17 & v16;
            uint64_t v20 = (_OWORD *)(v15 + 24 * (v17 & v16));
            int v17 = ++v18 + (v17 & v16);
          }
          while (*v20 != 0);
          uint64_t v21 = v15 + 24 * v19;
          uint64_t v24 = *(void *)(v21 + 16);
          unint64_t v23 = (void *)(v21 + 16);
          uint64_t v22 = v24;
          *unint64_t v23 = 0;
          if (v24) {
            WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v22 + 8));
          }
          _OWORD *v20 = *(_OWORD *)v11;
          uint64_t v25 = v4 + 24 * v9;
          uint64_t v26 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          *unint64_t v23 = v26;
          uint64_t v14 = *(void *)(v25 + 16);
          *(void *)(v25 + 16) = 0;
          if (!v14) {
            goto LABEL_19;
          }
LABEL_18:
          WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v14 + 8));
          goto LABEL_19;
        }
        uint64_t v13 = v4 + 24 * v9;
        uint64_t v14 = *(void *)(v13 + 16);
        *(void *)(v13 + 16) = 0;
        if (v14) {
          goto LABEL_18;
        }
      }
LABEL_19:
      if (++v9 == v10) {
        goto LABEL_22;
      }
    }
  }
  if (v4)
  {
LABEL_22:
    return WTF::fastFree((WTF *)(v4 - 16), (void *)v8);
  }
  return result;
}

void *WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    unsigned int v5 = result;
    int v6 = *((_DWORD *)result - 2);
    unsigned int v7 = WTF::PairHash<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>::hash(a2, a3) & v6;
    uint64_t result = &v5[3 * v7];
    uint64_t v8 = *result;
    uint64_t v9 = result[1];
    if (*result != a2 || v9 != a3)
    {
      int v11 = 1;
      while (v8 | v9)
      {
        unsigned int v7 = (v7 + v11) & v6;
        uint64_t result = &v5[3 * v7];
        uint64_t v8 = *result;
        uint64_t v9 = result[1];
        ++v11;
        if (*result == a2 && v9 == a3) {
          return result;
        }
      }
      return &v5[3 * *((unsigned int *)v5 - 1)];
    }
  }
  return result;
}

unsigned int *WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::take(unsigned int *result, unsigned int *a2, void *a3)
{
  uint64_t v3 = *(void *)a2;
  if (*(void *)a2) {
    uint64_t v4 = (void *)(v3 + 24 * *(unsigned int *)(v3 - 4));
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == a3)
  {
    *(void *)uint64_t result = 0;
    return result;
  }
  uint64_t v5 = a3[2];
  if (v5)
  {
    a3[2] = 0;
    uint64_t v3 = *(void *)a2;
  }
  *(void *)uint64_t result = v5;
  if (v3)
  {
    int v6 = (void *)(v3 + 24 * *(unsigned int *)(v3 - 4));
    if (v6 == a3) {
      return result;
    }
  }
  else
  {
    if (!a3) {
      return result;
    }
    int v6 = 0;
  }
  if (v6 != a3) {
    return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove(a2, a3);
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidNotHandle>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1461;
  *((void *)v9 + 1) = a3;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  unsigned int v16 = v9;
  uint64_t v11 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v16, a4, a5);
  uint64_t v12 = v16;
  unsigned int v16 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v14, v15);
  }
  return v11;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::startFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::FetchOptions &&,IPC::FormDataReference &&,WTF::String &&,BOOL,IPC::FormDataReference &,IPC::FormDataReference &)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F44B8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::startFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::FetchOptions &&,IPC::FormDataReference &&,WTF::String &&,BOOL,IPC::FormDataReference &,IPC::FormDataReference &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F44B8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*(atomic_uchar **)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::startFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::ResourceRequest &&,WebCore::FetchOptions &&,IPC::FormDataReference &&,WTF::String &&,BOOL,IPC::FormDataReference &,IPC::FormDataReference &)::$_0,void>::call(uint64_t a1)
{
  return WebCore::ServiceWorkerThreadProxy::setLastNavigationWasAppInitiated(*(WebCore::ServiceWorkerThreadProxy **)(a1 + 8));
}

uint64_t WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::rehash(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_1,void>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F44E0;
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, a2);
  if (*(unsigned char *)(a1 + 32))
  {
    unsigned int v7 = *(WTF **)(a1 + 16);
    if (v7)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + ++*(_DWORD *)(this + 24) = 0;
      WTF::fastFree(v7, v5);
    }
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  WTF *v7;
  uint64_t vars8;

  *(void *)a1 = &unk_1EE9F44E0;
  uint64_t v3 = *(void *)(a1 + 192);
  *(void *)(a1 + 192) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100](a1 + 40, a2);
  if (*(unsigned char *)(a1 + 32))
  {
    unsigned int v7 = *(WTF **)(a1 + 16);
    if (v7)
    {
      *(void *)(a1 + 16) = 0;
      *(_DWORD *)(a1 + ++*(_DWORD *)(this + 24) = 0;
      WTF::fastFree(v7, v5);
    }
  }

  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  int v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  uint64_t v3 = *((void *)a1 + 23);
  *((void *)a1 + 2WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
  void *v2 = &unk_1EE9F4508;
  v2[1] = v3;
  uint64_t v4 = *((void *)a1 + 24);
  *((void *)a1 + ++*(_DWORD *)(this + 24) = 0;
  void v2[2] = v4;
  int v6 = v2;
  WebCore::SWContextManager::firePushEvent();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F4508;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F4508;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0,void,BOOL,std::optional<WebCore::NotificationPayload> &>::call(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  WTF::CrossThreadCopierBase<false,false,std::optional<WebCore::NotificationPayload>>::copy<std::optional<WebCore::NotificationPayload>>((WTF::StringImpl *)v13, a3);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v14 = v5;
  uint64_t v6 = WTF::fastMalloc((WTF *)0xA8);
  *(void *)uint64_t v6 = &unk_1EE9F4530;
  *(unsigned char *)(v6 + ++*(_DWORD *)(this + 8) = a2;
  std::__optional_copy_assign_base<WebCore::NotificationPayload,false>::__optional_copy_assign_base[abi:sn180100](v6 + 16, (uint64_t)v13);
  uint64_t v7 = v14;
  uint64_t v14 = 0;
  *(void *)(v6 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v7;
  uint64_t v15 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 32))(v4, &v15);
  uint64_t v9 = v15;
  uint64_t v15 = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  return std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v13, v8);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0::operator()(BOOL,std::optional<WebCore::NotificationPayload> &)::{lambda(void)#1},void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F4530;
  uint64_t v3 = a1[20];
  a1[20] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0::operator()(BOOL,std::optional<WebCore::NotificationPayload> &)::{lambda(void)#1},void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  *(void *)a1 = &unk_1EE9F4530;
  uint64_t v3 = *((void *)a1 + 20);
  *((void *)a1 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__optional_destruct_base<WebCore::NotificationPayload,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 16, a2);

  return WTF::fastFree(a1, v4);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::firePushEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::optional<std::span<unsigned char const,18446744073709551615ul>>,std::optional<WebCore::NotificationPayload> &&,WTF::CompletionHandler<void ()(BOOL,std::optional<WebCore::NotificationPayload> &)> &&)::$_0::operator()(BOOL,std::optional<WebCore::NotificationPayload> &)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 160);
  *(void *)(a1 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1, a1 + 16);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F4558;
  uint64_t v3 = a1[38];
  a1[38] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[37];
  a1[37] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F4558;
  uint64_t v3 = a1[38];
  a1[38] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[37];
  a1[37] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);

  return WTF::fastFree((WTF *)a1, v5);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  uint64_t v3 = *((void *)a1 + 37);
  *((void *)a1 + 37) = 0;
  void *v2 = &unk_1EE9F4580;
  v2[1] = v3;
  uint64_t v4 = *((void *)a1 + 38);
  *((void *)a1 + 3++*(_DWORD *)(this + 8) = 0;
  void v2[2] = v4;
  uint64_t v6 = v2;
  WebCore::SWContextManager::fireNotificationEvent();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F4580;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F4580;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9F45A8;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = a2;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 32))(v3, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F45A8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F45A8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireNotificationEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::NotificationData &&,WebCore::NotificationEventType,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F45D0;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[9];
  a1[9] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F45D0;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  uint64_t v3 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0;
  void *v2 = &unk_1EE9F45F8;
  v2[1] = v3;
  uint64_t v4 = *((void *)a1 + 10);
  *((void *)a1 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  void v2[2] = v4;
  uint64_t v6 = v2;
  WebCore::SWContextManager::fireBackgroundFetchEvent();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F45F8;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F45F8;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9F4620;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = a2;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 32))(v3, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F4620;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F4620;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F4648;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[9];
  a1[9] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F4648;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_1,void>::call(WebCore::SWContextManager *a1)
{
  WebCore::SWContextManager::singleton(a1);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x18);
  uint64_t v3 = *((void *)a1 + 9);
  *((void *)a1 + 9) = 0;
  void *v2 = &unk_1EE9F4670;
  v2[1] = v3;
  uint64_t v4 = *((void *)a1 + 10);
  *((void *)a1 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  void v2[2] = v4;
  uint64_t v6 = v2;
  WebCore::SWContextManager::fireBackgroundFetchClickEvent();
  uint64_t result = (uint64_t)v6;
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 8))(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F4670;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[1];
  a1[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 56))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F4670;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = WTF::fastMalloc((WTF *)0x18);
  *(void *)uint64_t v5 = &unk_1EE9F4698;
  *(unsigned char *)(v5 + ++*(_DWORD *)(this + 8) = a2;
  *(void *)(v5 + 16) = v4;
  uint64_t v7 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v3 + 32))(v3, &v7);
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F4698;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F4698;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::fireBackgroundFetchClickEvent(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::BackgroundFetchInformation &&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0::operator()(BOOL)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 16))(v2, v1);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 8);

  return v3(v2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::terminateWorker(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void>::call(WebCore::SWContextManager *a1)
{
  return 0;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,BOOL>,0ul,1ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  char v4 = *(unsigned char *)(a2 + 8);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v4, a2);
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  uint64_t v13 = 0;
  if (v7)
  {
    uint64_t v14 = v7;
    uint64_t v15 = (uint64_t *)v6;
    do
    {
      if (*v15 != -1)
      {
        if (*v15)
        {
          int v17 = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookupForReinsert(a1, v15);
          uint64_t v18 = v17[1];
          v17[1] = 0;
          if (v18) {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
          }
          uint64_t v19 = *v15;
          uint64_t v20 = v15[1];
          v15[1] = 0;
          void *v17 = v19;
          v17[1] = v20;
          uint64_t v21 = v15[1];
          v15[1] = 0;
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          if (v15 == a3) {
            uint64_t v13 = v17;
          }
        }
        else
        {
          uint64_t v16 = v15[1];
          v15[1] = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
        }
      }
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  else
  {
    unint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v13;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::skipWaitingCompleted(unsigned long long)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9F46E8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::skipWaitingCompleted(unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F46E8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::skipWaitingCompleted(unsigned long long)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(*(void *)(a1 + 8) + 152);
  unint64_t result = (void *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::unique_ptr<WebCore::NetworkLoadInformation>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkLoadInformation>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v1, (void *)(a1 + 16));
  uint64_t v3 = result;
  uint64_t v4 = *v1;
  if (*v1) {
    v4 += 16 * *(unsigned int *)(v4 - 4);
  }
  if ((void *)v4 != result)
  {
    uint64_t v5 = result[1];
    result[1] = 0;
    if (*v1)
    {
      uint64_t v6 = *v1 + 16 * *(unsigned int *)(*v1 - 4);
      if ((void *)v6 != result)
      {
LABEL_7:
        if ((void *)v6 != result) {
          unint64_t result = WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(v1, result);
        }
      }
    }
    else if (result)
    {
      uint64_t v6 = 0;
      goto LABEL_7;
    }
    if (v5)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 16))(v5, v3);
      unsigned int v7 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);
      return (void *)v7(v5);
    }
  }
  return result;
}

void *WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::remove(uint64_t *a1, void *a2)
{
  unint64_t result = (void *)a2[1];
  *a2 = -1;
  a2[1] = 0;
  if (result) {
    unint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long,WTF::Function<void ()(void)>>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,WTF::Function<void ()(void)>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::Function<void ()(void)>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned long long>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4710;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4710;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>(a2, v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(v6);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(uint64_t *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[192] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v4, v2);
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder>((uint64_t)a1, a2);
  if (!a2[208])
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      unsigned int v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerClientData>>(a1, v5);
  if (v6)
  {
    uint64_t result = IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder,std::optional<WebCore::ServiceWorkerClientData>>((uint64_t)v5, a2);
    if (v6) {
      return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v5, v4);
    }
  }
  else
  {
    *a2 = 0;
    a2[208] = 0;
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerClientData>>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::decode<IPC::Decoder>((char **)a1, a2);
  if (!a2[208])
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    uint64_t result = *(void *)(a1 + 24);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>,void>::decode<IPC::Decoder,std::optional<WebCore::ServiceWorkerClientData>>@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 208))
  {
    *a2 = 0;
    a2[192] = 0;
    if (*(unsigned char *)(a1 + 192))
    {
      uint64_t result = std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)a2, (long long *)a1);
      a2[192] = 1;
    }
    a2[208] = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::optional<WebCore::ServiceWorkerClientData>,void>::decode<IPC::Decoder>@<X0>(char **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (unint64_t)a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = a1[3];
    if (v12)
    {
      uint64_t v15 = a1;
      if (v3)
      {
        (*(void (**)(char *))(*(void *)v12 + 16))(v12);
        a1 = v15;
        uint64_t v11 = *v15;
        unint64_t v10 = (unint64_t)v15[1];
      }
      else
      {
        unint64_t v10 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_13;
  }
  char v6 = &v4[v5];
  a1[2] = v6 + 1;
  if (!v4)
  {
    unint64_t v10 = v3;
    uint64_t v11 = 0;
LABEL_13:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v14 = a1;
      if (v10)
      {
        (*(void (**)(char *, char *, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        a1 = v14;
        uint64_t v4 = *v14;
        unint64_t v3 = (unint64_t)v14[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v7 = *v6;
  if (v7 < 2)
  {
    if (v7)
    {
      IPC::Decoder::decode<WebCore::ServiceWorkerClientData>((IPC::Decoder *)a1, v16);
      char v8 = v17;
      if (!v17)
      {
        *a2 = 0;
        goto LABEL_10;
      }
      std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::__optional_destruct_base[abi:sn180100]<WebCore::ServiceWorkerClientData>((uint64_t)a2, v16);
    }
    else
    {
      LOBYTE(v16[0]) = 0;
      char v17 = 0;
      *a2 = 0;
      a2[192] = 0;
    }
    char v8 = 1;
LABEL_10:
    a2[208] = v8;
    return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v16, v4);
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = (uint64_t)a1[3];
  if (result)
  {
    if (v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)result + 16))(result, v4);
    }
  }
  *a2 = 0;
  a2[208] = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::ServiceWorkerClientData>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::ServiceWorkerClientData,void>::decode(a1, a2);
  if (!a2[192])
  {
    return (WTF::StringImpl *)IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>(uint64_t result, long long *a2)
{
  if (result)
  {
    uint64_t v3 = result;
    long long v4 = *a2;
    long long v5 = a2[1];
    *(_WORD *)(result + ++*(_DWORD *)(this + 32) = *((_WORD *)a2 + 16);
    *(_OWORD *)uint64_t result = v4;
    *(_OWORD *)(result + 16) = v5;
    WTF::URL::URL(result + 40, (uint64_t *)a2 + 5);
    WTF::URL::URL(v3 + 80, (uint64_t *)a2 + 10);
    long long v6 = *(long long *)((char *)a2 + 120);
    long long v7 = *(long long *)((char *)a2 + 136);
    uint64_t v8 = *((void *)a2 + 21);
    *(_OWORD *)(v3 + 152) = *(long long *)((char *)a2 + 152);
    *(_OWORD *)(v3 + 136) = v7;
    *(_OWORD *)(v3 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v6;
    *(void *)(v3 + 176) = 0;
    *(void *)(v3 + 184) = 0;
    *(void *)(v3 + 16++*(_DWORD *)(this + 8) = v8;
    uint64_t v9 = *((void *)a2 + 22);
    *((void *)a2 + 22) = 0;
    *(void *)(v3 + 176) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 46);
    *((_DWORD *)a2 + 46) = 0;
    *(_DWORD *)(v3 + 184) = v9;
    LODWORD(v9) = *((_DWORD *)a2 + 47);
    *((_DWORD *)a2 + 47) = 0;
    *(_DWORD *)(v3 + 18++*(_DWORD *)(this + 8) = v9;
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&),WTF::DefaultHash,WTF::HashTraits<unsigned long long>,WTF::HashMap<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&),WTF::DefaultHash,WTF::HashTraits<unsigned long long>,WTF::HashMap<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(a1, v3);
}

void WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&),WTF::DefaultHash,WTF::HashTraits<unsigned long long>,WTF::HashMap<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 16 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = (uint64_t *)(v4 + 16 * v11);
      uint64_t v14 = *v13;
      if (*v13 != -1)
      {
        if (v14)
        {
          uint64_t v17 = *a1;
          if (*a1) {
            int v18 = *(_DWORD *)(v17 - 8);
          }
          else {
            int v18 = 0;
          }
          unint64_t v19 = (v14 + ~(v14 << 32)) ^ ((unint64_t)(v14 + ~(v14 << 32)) >> 22);
          unint64_t v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
          unint64_t v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
          unsigned int v22 = v18 & ((v21 >> 31) ^ v21);
          int v23 = 1;
          do
          {
            unsigned int v24 = v22;
            uint64_t v25 = *(void *)(v17 + 16 * v22);
            unsigned int v22 = (v22 + v23++) & v18;
          }
          while (v25);
          uint64_t v26 = (uint64_t *)(v17 + 16 * v24);
          uint64_t v27 = v26[1];
          v26[1] = 0;
          if (v27) {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
          }
          *uint64_t v26 = *v13;
          uint64_t v28 = v4 + 16 * v11;
          uint64_t v29 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          v26[1] = v29;
          uint64_t v16 = *(void *)(v28 + 8);
          *(void *)(v28 + ++*(_DWORD *)(this + 8) = 0;
          if (!v16) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          goto LABEL_21;
        }
        uint64_t v15 = v4 + 16 * v11;
        uint64_t v16 = *(void *)(v15 + 8);
        *(void *)(v15 + ++*(_DWORD *)(this + 8) = 0;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v11 == v12) {
        goto LABEL_24;
      }
    }
  }
  if (v4)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::matchAllCompleted(unsigned long long,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F4738;
  WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 3), a2);
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 32), v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::matchAllCompleted(unsigned long long,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  *(void *)a1 = &unk_1EE9F4738;
  WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a1 + 24, a2);
  uint64_t v4 = *((void *)a1 + 1);
  *((void *)a1 + 1) = 0;
  if (v4) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v4 + 32), v3);
  }

  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::matchAllCompleted(unsigned long long,WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(v2 + 144);
  unsigned int v3 = (uint64_t *)(v2 + 144);
  uint64_t v4 = v5;
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unsigned int v7 = *(_DWORD *)(v4 - 8);
    unint64_t v8 = (v6 + ~(v6 << 32)) ^ ((unint64_t)(v6 + ~(v6 << 32)) >> 22);
    unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    uint64_t v11 = v7 & ((v10 >> 31) ^ v10);
    uint64_t v12 = *(void *)(v4 + 16 * v11);
    if (v12 != v6)
    {
      int v13 = 1;
      while (v12)
      {
        uint64_t v11 = (v11 + v13) & v7;
        uint64_t v12 = *(void *)(v4 + 16 * v11);
        ++v13;
        if (v12 == v6) {
          goto LABEL_8;
        }
      }
      uint64_t v11 = *(unsigned int *)(v4 - 4);
    }
LABEL_8:
    if (v11 != *(_DWORD *)(v4 - 4))
    {
      uint64_t v14 = (void *)(v4 + 16 * v11);
      uint64_t v15 = v14[1];
      v14[1] = 0;
      uint64_t v16 = *v3;
      if (!*v3 || (v16 += 16 * *(unsigned int *)(v16 - 4), (void *)v16 != v14))
      {
        if ((void *)v16 != v14)
        {
          void *v14 = -1;
          v14[1] = 0;
          ++*(_DWORD *)(*v3 - 16);
          uint64_t v17 = *v3;
          int v18 = *v3 ? *(_DWORD *)(v17 - 12) - 1 : -1;
          *(_DWORD *)(v17 - 12) = v18;
          uint64_t v19 = *v3;
          if (*v3)
          {
            unsigned int v20 = 6 * *(_DWORD *)(v19 - 12);
            unsigned int v21 = *(_DWORD *)(v19 - 4);
            if (v20 < v21 && v21 >= 9) {
              WTF::HashTable<unsigned long long,WTF::KeyValuePair<unsigned long long,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::KeyValuePairKeyExtractor<WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>,WTF::DefaultHash<unsigned long long>,WTF::HashMap<unsigned long long,void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&),WTF::DefaultHash,WTF::HashTraits<unsigned long long>,WTF::HashMap<void ()(WTF::Vector<WebCore::ServiceWorkerClientData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits>::rehash(v3, v21 >> 1);
            }
          }
        }
      }
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, a1 + 24);
        int v23 = *(void (**)(uint64_t))(*(void *)v15 + 8);
        v23(v15);
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4760;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4760;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>>((uint64_t)v6, a2);
    if (v9)
    {
      uint64_t result = WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(v2, (uint64_t)v6);
      if (v9)
      {
        if (v8 != -1) {
          return ((uint64_t (*)(char *, uint64_t *))off_1EE9F4778[v8])(&v5, &v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::OpenWindow,WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[192] = 0;
  int v5 = 0;
  uint64_t result = WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F4778[v5])(&v2, v4);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[2];
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  unint64_t v7 = v4 - v5;
  if (v6 <= v7)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v17 = a2[3];
    if (v17)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v17 + 16))(v17);
        uint64_t v16 = *a2;
        uint64_t v15 = a2[1];
      }
      else
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
      }
    }
    goto LABEL_24;
  }
  int v8 = (unsigned __int8 *)(v5 + v7);
  a2[2] = (uint64_t)(v8 + 1);
  if (!v5)
  {
    uint64_t v15 = v6;
    uint64_t v16 = 0;
LABEL_24:
    unint64_t v6 = 0;
    uint64_t v5 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v18 = a2[3];
    if (v18)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v16, v15);
        uint64_t v5 = *a2;
        unint64_t v6 = a2[1];
      }
      else
      {
        unint64_t v6 = 0;
        uint64_t v5 = 0;
      }
    }
    goto LABEL_25;
  }
  unsigned int v9 = *v8;
  if (v9 < 2)
  {
    if (v9)
    {
      uint64_t result = IPC::Decoder::decode<std::optional<WebCore::ServiceWorkerClientData>>((uint64_t)a2, &v30);
      int v12 = v33;
      if (!v33)
      {
        unsigned __int8 v29 = 0;
        goto LABEL_15;
      }
      v25[0] = 0;
      char v27 = 0;
      if (v32)
      {
        uint64_t result = std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v25, &v30);
        int v12 = 1;
        char v27 = 1;
        int v28 = 0;
        unsigned __int8 v29 = 1;
        if (!v33) {
          goto LABEL_15;
        }
      }
      else
      {
        int v28 = 0;
        unsigned __int8 v29 = 1;
      }
      uint64_t result = std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v30, v11);
      int v12 = v29;
      goto LABEL_15;
    }
    uint64_t result = (uint64_t)IPC::Decoder::decode<WebCore::ExceptionData>(a2, (uint64_t)&v30);
    int v12 = v31;
    if (v31)
    {
      v25[0] = v30;
      uint64_t v26 = *((void *)&v30 + 1);
      int v12 = 1;
      int v28 = 1;
    }
    unsigned __int8 v29 = v12;
LABEL_15:
    if (v12) {
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_25:
  *a2 = 0;
  a2[1] = 0;
  uint64_t v19 = a2[3];
  if (v19 && v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v5);
  }
  unsigned __int8 v29 = 0;
LABEL_27:
  uint64_t v20 = *a2;
  uint64_t v21 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v22 = a2[3];
  if (!v22 || !v21 || (uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v20), !v29))
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
LABEL_29:
    uint64_t v23 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t result = a2[3];
    if (result && v23)
    {
      unsigned int v24 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v24();
    }
    return result;
  }
LABEL_16:
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 2++*(_DWORD *)(this + 24) = -1;
  int v13 = v28;
  if (v28 == -1)
  {
    *(unsigned char *)(a1 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    return result;
  }
  uint64_t result = ((uint64_t (*)(long long *))off_1EE9F4788[v28])(&v30);
  *(_DWORD *)(a1 + 2++*(_DWORD *)(this + 24) = v13;
  int v14 = v29;
  *(unsigned char *)(a1 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
  if (v14)
  {
    if (v28 != -1)
    {
      uint64_t result = ((uint64_t (*)(long long *, char *))off_1EE9F4778[v28])(&v30, v25);
      if (!*(unsigned char *)(a1 + 240)) {
        goto LABEL_29;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *a2 = 0;
  a2[192] = 0;
  if (*(unsigned char *)(a3 + 192))
  {
    uint64_t result = std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)a2, (long long *)a3);
    a2[192] = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_13ExceptionDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISD_LNS0_6_TraitE1EEEEEvRSE_OT_EUlRSK_OT0_E_JRNS0_6__baseILSH_1EJSB_SC_EEEOSS_EEEDcSK_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a2 = *(unsigned char *)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = v3;
}

uint64_t WebKit::WebSWContextManagerConnection::openWindow(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 224);
  if (v3)
  {
    if (v3 == 1)
    {
      char v4 = *(unsigned char *)(a2 + 16);
      uint64_t v5 = *(_DWORD **)(a2 + 24);
      if (v5) {
        *v5 += 2;
      }
      v12[0] = v4;
      int v13 = v5;
      int v15 = 1;
      uint64_t v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, v11);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      if (v15 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9F4798[v15])(&v10, v12);
      }
    }
    else
    {
      uint64_t v9 = std::__throw_bad_variant_access[abi:sn180100]();
      return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(v9);
    }
  }
  else
  {
    v12[0] = 0;
    char v14 = 0;
    if (*(unsigned char *)(a2 + 208))
    {
      std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v12, (long long *)(a2 + 16));
      char v14 = 1;
    }
    int v15 = 0;
    uint64_t v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v11);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v15 != -1) {
      return ((uint64_t (*)(char *, unsigned char *))off_1EE9F4798[v15])(&v10, v12);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, void *a2)
{
  return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore23ServiceWorkerClientDataEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F47B8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F47B8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2)
  {
    if (*a2)
    {
      IPC::Decoder::decode<std::tuple<std::optional<WebCore::ExceptionData>>>((uint64_t)v9, a2);
      if (v12)
      {
        int v3 = v11;
        if (v11)
        {
          char v4 = v9[0];
          uint64_t v5 = v10;
          if (v10) {
            *(_DWORD *)v10 += 2;
          }
          LOBYTE(v1WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v4;
          char v14 = v5;
          LOBYTE(v15) = 1;
        }
        else
        {
          uint64_t v13 = 0;
          char v14 = 0;
          uint64_t v15 = 0;
        }
        uint64_t v7 = *v2;
        uint64_t *v2 = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, &v13);
        uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
        if ((_BYTE)v15)
        {
          uint64_t result = v14;
          char v14 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
            {
              uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
              if (!v3) {
                return result;
              }
              goto LABEL_17;
            }
            *(_DWORD *)result -= 2;
          }
        }
        if (!v3) {
          return result;
        }
LABEL_17:
        uint64_t result = v10;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(v10, v8);
          }
          else {
            *(_DWORD *)v10 -= 2;
          }
        }
        return result;
      }
    }
  }

  return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v1 + 16))(v1, &v4);
  uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if ((_BYTE)v6)
  {
    uint64_t result = v5;
    uint64_t v5 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F47E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F47E0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0)#1},void,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>>((uint64_t)v6, a2);
    if (v9)
    {
      uint64_t result = WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(v2, (uint64_t)v6);
      if (v9)
      {
        if (v8 != -1) {
          return (void *)((uint64_t (*)(char *, uint64_t *))off_1EE9F4778[v8])(&v5, &v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(v4);
  }
  return result;
}

void *IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Navigate,WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0>(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  v4[192] = 0;
  int v5 = 0;
  uint64_t result = WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(a1, (uint64_t)v3);
  if (v5 != -1) {
    return (void *)((uint64_t (*)(char *, unsigned char *))off_1EE9F4778[v5])(&v2, v4);
  }
  return result;
}

void *WebKit::WebSWContextManagerConnection::navigate(WebCore::ProcessQualified<WTF::UUID>,WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::URL const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<std::optional<WebCore::ServiceWorkerClientData>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::optional<WebCore::ServiceWorkerClientData>,WebCore::ExceptionData>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 224);
  if (v3)
  {
    if (v3 == 1)
    {
      char v4 = *(unsigned char *)(a2 + 16);
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a2 + ++*(_DWORD *)(this + 24) = 0;
      v12[0] = v4;
      uint64_t v13 = v5;
      int v15 = 1;
      uint64_t v6 = *a1;
      *a1 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 16))(v6, v11);
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
      if (v15 != -1) {
        return (void *)((uint64_t (*)(char *, unsigned char *))off_1EE9F4798[v15])(&v10, v12);
      }
    }
    else
    {
      char v9 = (void *)std::__throw_bad_variant_access[abi:sn180100]();
      return WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(v9);
    }
  }
  else
  {
    v12[0] = 0;
    char v14 = 0;
    if (*(unsigned char *)(a2 + 208))
    {
      std::construct_at[abi:sn180100]<WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData,WebCore::ServiceWorkerClientData*>((uint64_t)v12, (long long *)(a2 + 16));
      char v14 = 1;
    }
    int v15 = 0;
    uint64_t v8 = *a1;
    *a1 = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v8 + 16))(v8, v11);
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 8))(v8);
    if (v15 != -1) {
      return (void *)((uint64_t (*)(char *, unsigned char *))off_1EE9F4798[v15])(&v10, v12);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4808;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4808;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebSWServerToContextConnection::Focus,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::optional<WebCore::ServiceWorkerClientData>>>(a2, v7);
    if (v8)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v8) {
        return std::__optional_destruct_base<WebCore::ServiceWorkerClientData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v5);
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::FindClientByVisibleIdentifier,WTF::CompletionHandler<void ()(std::optional<WebCore::ServiceWorkerClientData> &&)>>(v6);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::close(void)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9F4830;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4830;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::close(void)::$_0,void>::call(uint64_t a1)
{
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setThrottleState(BOOL)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9F4858;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setThrottleState(BOOL)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4858;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setThrottleState(BOOL)::$_0,void>::call(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB358550;
  if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 16);
    v8[0] = 67109120;
    v8[1] = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "Service worker throttleable state is set to %d", (uint8_t *)v8, 8u);
  }
  int v4 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(*(void *)(a1 + 8) + 176) = v4;
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  uint64_t v5 = WebKit::WebProcess::singleton(void)::process + 64;
  if (v4) {
    return PAL::HysteresisActivity::stop(v5);
  }
  else {
    return PAL::HysteresisActivity::start(v5);
  }
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::setInspectable(WebCore::ServiceWorkerIsInspectable)::$_0,void>::call(unsigned __int8 *a1)
{
  uint64_t v2 = WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  uint64_t v3 = a1[8];

  return MEMORY[0x1F416EA70](v2, v3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::removeNavigationFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  *a1 = &unk_1EE9F48A8;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::removeNavigationFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F48A8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>(*(atomic_uchar **)(v3 + 32), a2);
  }

  return WTF::fastFree(this, a2);
}

unsigned int *WTF::Detail::CallableWrapper<WebKit::WebSWContextManagerConnection::removeNavigationFetch(WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>)::$_0,void>::call(void *a1)
{
  uint64_t v1 = a1[1];
  uint64_t v2 = *(void **)(v1 + 256);
  uint64_t result = (unsigned int *)WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v2, a1[2], a1[3]);
  if (v2)
  {
    int v4 = (unsigned int *)&v2[3 * *((unsigned int *)v2 - 1)];
    if (v4 == result) {
      return result;
    }
  }
  else
  {
    if (!result) {
      return result;
    }
    int v4 = 0;
  }
  if (v4 != result)
  {
    return WTF::HashTable<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>,WTF::DefaultHash<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::Ref<WebKit::WebServiceWorkerFetchTaskClient,WTF::RawPtrTraits<WebKit::WebServiceWorkerFetchTaskClient>,WTF::DefaultRefDerefTraits<WebKit::WebServiceWorkerFetchTaskClient>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<std::pair<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FetchIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::remove((unsigned int *)(v1 + 256), result);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::WebServiceWorkerFetchTaskClient(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 1;
  *(_WORD *)(a1 + 12) = 0;
  *(void *)a1 = &unk_1EE9F4A40;
  uint64_t v7 = *a2;
  *a2 = 0;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + ++*(_DWORD *)(this + 24) = a4;
  *(void *)(a1 + ++*(_DWORD *)(this + 32) = a3;
  *(void *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = a5;
  *(unsigned char *)(a1 + 4++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = a6;
  *(unsigned char *)(a1 + 81) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)(a1 + 104));
  *(_WORD *)(a1 + 2++*(_DWORD *)(this + 32) = 0;
  *(unsigned char *)(a1 + 234) = 0;
  *(void *)(a1 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  return a1;
}

void WebKit::WebServiceWorkerFetchTaskClient::~WebServiceWorkerFetchTaskClient(WebKit::WebServiceWorkerFetchTaskClient *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 30);
  *((void *)this + 3IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)this + 28);
  *((void *)this + 2++*(_DWORD *)(this + 8) = 0;
  if (v4) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 24);
  *((void *)this + ++*(_DWORD *)(this + 24) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *((unsigned int *)this + 24);
  if (v6 != -1) {
    ((void (*)(char *, char *))off_1EE9F4DB8[v6])(&v18, (char *)this + 88);
  }
  *((_DWORD *)this + ++*(_DWORD *)(this + 24) = -1;
  std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)this + 48);
  uint64_t v7 = (atomic_uchar *volatile *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v7)
  {
    char v8 = 0;
    atomic_uchar *volatile v9 = *v7;
    atomic_compare_exchange_strong_explicit(*v7, (unsigned __int8 *)&v8, 1u, memory_order_acquire, memory_order_acquire);
    if (v8) {
      MEMORY[0x19972E8D0](v9);
    }
    uint64_t v10 = *((void *)v9 + 1);
    uint64_t v11 = v10 - 1;
    *((void *)v9 + 1) = v10 - 1;
    if (v10 == 1)
    {
      uint64_t v17 = *((void *)v9 + 2);
      uint64_t v13 = *((void *)v9 + 3);
      *((void *)v9 + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
      BOOL v12 = v17 == 0;
    }
    else
    {
      BOOL v12 = 0;
      uint64_t v13 = 0;
    }
    int v14 = 1;
    atomic_compare_exchange_strong_explicit(v9, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
    if (v14 == 1)
    {
      if (v11) {
        return;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v9);
      if (v11) {
        return;
      }
    }
    uint64_t v15 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v15 = &unk_1EE9B37E8;
    *(void *)(v15 + ++*(_DWORD *)(this + 8) = v9;
    *(void *)(v15 + 16) = v13;
    *(unsigned char *)(v15 + ++*(_DWORD *)(this + 24) = v12;
    uint64_t v19 = v15;
    WTF::ensureOnMainRunLoop();
    uint64_t v16 = v19;
    uint64_t v19 = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebServiceWorkerFetchTaskClient::~WebServiceWorkerFetchTaskClient(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didReceiveRedirection(uint64_t this, const WebCore::ResourceResponse *a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(this + 13);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 13), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t v6 = *(void *)(v3 + 16);
  if (v6)
  {
    *(unsigned char *)(v3 + 234) = 1;
    uint64_t v7 = *(void *)(v3 + 40);
    char v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v8 = 1464;
    *((void *)v8 + 1) = v7;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    int v14 = v8;
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v8, a2);
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v14, 0, 0);
    uint64_t v10 = v14;
    int v14 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v12, v13);
    }
    this = WebKit::WebServiceWorkerFetchTaskClient::cleanup((WebKit::WebServiceWorkerFetchTaskClient *)v3);
  }
  int v11 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
  if (v11 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::cleanup(WebKit::WebServiceWorkerFetchTaskClient *this)
{
  uint64_t v2 = (atomic_uchar *volatile *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (!v2) {
    goto LABEL_10;
  }
  char v3 = 0;
  atomic_uchar *volatile v4 = *v2;
  atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](v4);
  }
  uint64_t v5 = *((void *)v4 + 1);
  uint64_t v6 = v5 - 1;
  *((void *)v4 + 1) = v5 - 1;
  if (v5 == 1)
  {
    uint64_t v17 = *((void *)v4 + 2);
    uint64_t v8 = *((void *)v4 + 3);
    *((void *)v4 + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
    BOOL v7 = v17 == 0;
  }
  else
  {
    BOOL v7 = 0;
    uint64_t v8 = 0;
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 == 1)
  {
    if (v6) {
      goto LABEL_10;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v6) {
      goto LABEL_10;
    }
  }
  uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v10 = &unk_1EE9B37E8;
  *(void *)(v10 + ++*(_DWORD *)(this + 8) = v4;
  *(void *)(v10 + 16) = v8;
  *(unsigned char *)(v10 + ++*(_DWORD *)(this + 24) = v7;
  uint64_t v18 = v10;
  WTF::ensureOnMainRunLoop();
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
LABEL_10:
  uint64_t v12 = *((void *)this + 3);
  uint64_t v11 = *((void *)this + 4);
  uint64_t v13 = *((void *)this + 5);
  char v14 = *((unsigned char *)this + 80);
  uint64_t v15 = WTF::fastMalloc((WTF *)0x28);
  *(void *)uint64_t v15 = &unk_1EE9F4EB0;
  *(void *)(v15 + ++*(_DWORD *)(this + 8) = v11;
  *(void *)(v15 + 16) = v12;
  *(void *)(v15 + ++*(_DWORD *)(this + 24) = v13;
  *(unsigned char *)(v15 + ++*(_DWORD *)(this + 32) = v14;
  uint64_t v19 = v15;
  WTF::ensureOnMainRunLoop();
  uint64_t result = v19;
  if (v19) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didReceiveResponse(uint64_t this, const WebCore::ResourceResponse *a2)
{
  uint64_t v3 = this;
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(this + 13);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 13), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    this = MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t v6 = *(void *)(v3 + 16);
  if (v6)
  {
    *(unsigned char *)(v3 + 234) = 1;
    char v7 = *(unsigned char *)(v3 + 80);
    if (v7) {
      *(unsigned char *)(v3 + 81) = 1;
    }
    uint64_t v8 = *(void *)(v3 + 40);
    int v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v9 = 1465;
    *((void *)v9 + 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v16 = v9;
    IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v9, a2);
    uint64_t v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
    if (!v11)
    {
      this = 831;
      __break(0xC471u);
      return this;
    }
    unsigned char *v10 = v7;
    IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v16, 0, 0);
    this = (uint64_t)v16;
    uint64_t v16 = 0;
    if (this)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)this, v12);
      this = WTF::fastFree(v14, v15);
    }
  }
  int v13 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v13, 0, memory_order_release, memory_order_relaxed);
  if (v13 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return this;
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::didReceiveData(atomic_uchar *this, const WebCore::SharedBuffer *a2)
{
  char v4 = 0;
  uint64_t v5 = this + 13;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(this + 13, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t result = WebKit::WebServiceWorkerFetchTaskClient::didReceiveDataInternal((WebKit::WebServiceWorkerFetchTaskClient *)this, a2);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::didReceiveDataInternal(WebKit::WebServiceWorkerFetchTaskClient *this, const WebCore::SharedBuffer *a2)
{
  uint64_t result = (unsigned int *)*((void *)this + 2);
  if (result)
  {
    if (*((unsigned char *)this + 81))
    {
      uint64_t v4 = *((unsigned int *)this + 24);
      if (v4 != -1)
      {
        if (v4 == 1)
        {
LABEL_7:
          WebCore::SharedBufferBuilder::ensureBuffer((WebKit::WebServiceWorkerFetchTaskClient *)((char *)this + 88));
          return (unsigned int *)WebCore::FragmentedSharedBuffer::append();
        }
        ((void (*)(uint64_t *, char *))off_1EE9F4DB8[v4])(&v9, (char *)this + 88);
      }
      *((void *)this + 11) = 0;
      *((_DWORD *)this + ++*(_DWORD *)(this + 24) = 1;
      goto LABEL_7;
    }
    if (*((unsigned char *)this + 233))
    {
      uint64_t v9 = *((void *)a2 + 6);
      uint64_t v10 = (unsigned int *)a2;
      atomic_fetch_add((atomic_uint *volatile)a2, 1u);
      uint64_t v5 = *((void *)a2 + 6);
      uint64_t v11 = 0;
      uint64_t v12 = &v9;
      uint64_t v13 = v5;
      IPC::Connection::send<Messages::ServiceWorkerDownloadTask::DidReceiveData>((uint64_t)result, (uint64_t)&v12, *((void *)this + 5));
    }
    else
    {
      uint64_t v9 = *((void *)a2 + 6);
      uint64_t v10 = (unsigned int *)a2;
      atomic_fetch_add((atomic_uint *volatile)a2, 1u);
      uint64_t v7 = *((void *)a2 + 6);
      uint64_t v11 = 0;
      uint64_t v12 = &v9;
      uint64_t v13 = v7;
      IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidReceiveData>((uint64_t)result, (uint64_t)&v12, *((void *)this + 5));
    }
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    if (v8) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v8);
    }
    uint64_t result = v10;
    uint64_t v10 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v6);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinish(uint64_t a1, WebCore::FormData **a2)
{
  char v4 = 0;
  uint64_t v5 = (atomic_uchar *)(a1 + 13);
  int v6 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(a1 + 13), (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](a1 + 13);
  }
  uint64_t result = WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(a1, a2);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return (IPC::Encoder *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

IPC::Encoder *WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(uint64_t a1, WebCore::FormData **a2)
{
  uint64_t result = (IPC::Encoder *)WebCore::FormData::asSharedBuffer((uint64_t *)v28, *a2);
  uint64_t v5 = v28[0];
  if (v28[0])
  {
    v28[0] = 0;
    WebKit::WebServiceWorkerFetchTaskClient::didReceiveDataInternal((WebKit::WebServiceWorkerFetchTaskClient *)a1, v5);
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)v5, v6);
    WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v29);
    WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal((WTF::StringImpl *)a1, (const WebCore::NetworkLoadMetrics *)&v29);
    uint64_t v8 = v33;
    unsigned __int8 v33 = 0;
    if (v8) {
      WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v8);
    }
    uint64_t v9 = v32;
    char v32 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2) {
        WTF::StringImpl::destroy(v9, v7);
      }
      else {
        *(_DWORD *)v9 -= 2;
      }
    }
    uint64_t result = v28[0];
    v28[0] = 0;
    if (result) {
      return (IPC::Encoder *)WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)result, v7);
    }
    return result;
  }
  if (!*(void *)(a1 + 16)) {
    return result;
  }
  if (*(unsigned char *)(a1 + 81))
  {
    uint64_t result = (IPC::Encoder *)WebCore::FormData::isolatedCopy((uint64_t *)&v29, *a2);
    uint64_t v10 = *(unsigned int *)(a1 + 96);
    if (v10 != -1)
    {
      uint64_t v11 = (IPC::Encoder **)(a1 + 88);
      if (v10 == 2)
      {
        uint64_t v12 = v29;
        unsigned __int8 v29 = 0;
        uint64_t result = *v11;
        *uint64_t v11 = v12;
        if (result)
        {
          WTF::RefCounted<WebCore::FormData>::deref(result);
          uint64_t result = v29;
          unsigned __int8 v29 = 0;
          if (result) {
            return (IPC::Encoder *)WTF::RefCounted<WebCore::FormData>::deref(result);
          }
        }
        return result;
      }
      uint64_t result = (IPC::Encoder *)((uint64_t (*)(WTF::StringImpl **, IPC::Encoder **))off_1EE9F4DB8[v10])(v28, v11);
    }
    *(void *)(a1 + 8++*(_DWORD *)(this + 8) = v29;
    *(_DWORD *)(a1 + 96) = 2;
    return result;
  }
  WebCore::FormData::asBlobURL((uint64_t *)v28, *a2);
  if (v28[0])
  {
    unsigned __int8 v29 = (IPC::Encoder *)a1;
    uint64_t v30 = a1;
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
    WTF::URL::isolatedCopy();
    uint64_t v13 = (void *)WTF::fastMalloc((WTF *)0x40);
    *uint64_t v13 = &unk_1EE9F4E88;
    v13[1] = v29;
    uint64_t v14 = v30;
    uint64_t v30 = 0;
    void v13[2] = v14;
    WTF::URL::URL((uint64_t)(v13 + 3), (uint64_t *)&v31);
    WTF::callOnMainRunLoop();
    char v27 = 0;
    if (v13) {
      (*(void (**)(void *))(*v13 + 8))(v13);
    }
    uint64_t v16 = v31;
    unsigned __int8 v31 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    uint64_t v23 = v30;
    uint64_t v30 = 0;
    if (v23) {
      WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v23 + 8));
    }
    goto LABEL_35;
  }
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t v18 = *a2;
  if (*(unsigned char *)(a1 + 233))
  {
    *a2 = 0;
    char v27 = v18;
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    uint64_t v21 = v20;
    __int16 v22 = 1458;
  }
  else
  {
    *a2 = 0;
    char v27 = v18;
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    uint64_t v21 = v20;
    __int16 v22 = 1463;
  }
  *(_WORD *)uint64_t v20 = v22;
  *((void *)v20 + 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v20 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  unsigned __int8 v29 = v21;
  IPC::ArgumentCoder<IPC::FormDataReference,void>::encode(v21, (_DWORD **)&v27);
  IPC::Connection::sendMessageImpl(v17, (uint64_t *)&v29, 0, 0);
  unsigned int v24 = v29;
  unsigned __int8 v29 = 0;
  if (!v24)
  {
    if (!v18) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  IPC::Encoder::~Encoder(v24, v15);
  WTF::fastFree(v25, v26);
  if (v18) {
LABEL_34:
  }
    WTF::RefCounted<WebCore::FormData>::deref(v18);
LABEL_35:
  uint64_t result = v28[0];
  v28[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (IPC::Encoder *)WTF::StringImpl::destroy(result, v15);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal(WTF::StringImpl *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 2);
  if (v2)
  {
    char v4 = this;
    if (*((unsigned char *)this + 81))
    {
      uint64_t v5 = qword_1EB358550;
      if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
      {
        int v6 = (IPC::Encoder *)*((void *)v4 + 5);
        LODWORD(v22[0]) = 134217984;
        *(IPC::Encoder **)((char *)v22 + 4) = v6;
        _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "ServiceWorkerFrameLoaderClient::didFinish while waiting, fetch identifier %llu", (uint8_t *)v22, 0xCu);
      }
      *((unsigned char *)v4 + 2++*(_DWORD *)(this + 32) = 1;
      WebCore::NetworkLoadMetrics::isolatedCopy((uint64_t *)v22, a2);
      long long v8 = v25;
      *(_OWORD *)((char *)v4 + 136) = v24;
      *(_OWORD *)((char *)v4 + 152) = v8;
      *(_OWORD *)((char *)v4 + 16++*(_DWORD *)(this + 8) = v26;
      long long v9 = v23;
      *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)v22;
      *(_OWORD *)((char *)v4 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v9;
      uint64_t v10 = v28;
      int v28 = 0;
      uint64_t v11 = (WTF::StringImpl *)*((void *)v4 + 24);
      *((void *)v4 + 2WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = v27;
      *((void *)v4 + ++*(_DWORD *)(this + 24) = v10;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      *(_OWORD *)((char *)v4 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v29;
      uint64_t v14 = v31;
      unsigned __int8 v31 = 0;
      uint64_t v15 = (WebCore::AdditionalNetworkLoadMetricsForWebInspector *)*((void *)v4 + 28);
      *((void *)v4 + 27) = v30;
      *((void *)v4 + 2++*(_DWORD *)(this + 8) = v14;
      if (v15)
      {
        WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v15);
        uint64_t v16 = v31;
        unsigned __int8 v31 = 0;
        if (v16) {
          WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v16);
        }
      }
      this = v28;
      int v28 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        }
        else {
          *(_DWORD *)this -= 2;
        }
      }
    }
    else
    {
      uint64_t v12 = *((void *)this + 5);
      if (*((unsigned char *)this + 233))
      {
        uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v13 = 1456;
        *((void *)v13 + 1) = v12;
        *((void *)v13 + 66) = (char *)v13 + 16;
        *((void *)v13 + 67) = 512;
        *((void *)v13 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v13 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v13 + 69) = 0;
        IPC::Encoder::encodeHeader(v13);
        v22[0] = v13;
      }
      else
      {
        uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v17 = 1460;
        *((void *)v17 + 1) = v12;
        *((void *)v17 + 66) = (char *)v17 + 16;
        *((void *)v17 + 67) = 512;
        *((void *)v17 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v17 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v17 + 69) = 0;
        IPC::Encoder::encodeHeader(v17);
        v22[0] = v17;
        IPC::ArgumentCoder<WebCore::NetworkLoadMetrics,void>::encode(v17, (uint64_t)a2);
      }
      IPC::Connection::sendMessageImpl(v2, (uint64_t *)v22, 0, 0);
      uint64_t v19 = v22[0];
      v22[0] = 0;
      if (v19)
      {
        IPC::Encoder::~Encoder(v19, v18);
        WTF::fastFree(v20, v21);
      }
      return (WTF::StringImpl *)WebKit::WebServiceWorkerFetchTaskClient::cleanup(v4);
    }
  }
  return this;
}

WTF::StringImpl *WebKit::WebServiceWorkerFetchTaskClient::didFinish(atomic_uchar *this, const WebCore::NetworkLoadMetrics *a2)
{
  char v4 = 0;
  uint64_t v5 = this + 13;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(this + 13, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t result = WebKit::WebServiceWorkerFetchTaskClient::didFinishInternal((WTF::StringImpl *)this, a2);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didFail(atomic_uchar *this, const WebCore::ResourceError *a2)
{
  char v4 = 0;
  uint64_t v5 = this + 13;
  int v6 = 1;
  atomic_compare_exchange_strong_explicit(this + 13, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t result = WebKit::WebServiceWorkerFetchTaskClient::didFailInternal((uint64_t)this, a2);
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v6, 0, memory_order_release, memory_order_relaxed);
  if (v6 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didFailInternal(uint64_t this, const WebCore::ResourceError *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(this + 16);
  if (!v2) {
    return this;
  }
  uint64_t v4 = this;
  if (*(unsigned char *)(this + 81))
  {
    uint64_t v5 = qword_1EB358550;
    if (os_log_type_enabled((os_log_t)qword_1EB358550, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(v4 + 40);
      LODWORD(buf[0]) = 134217984;
      *(void *)((char *)buf + 4) = v6;
      _os_log_impl(&dword_1985F2000, v5, OS_LOG_TYPE_DEFAULT, "ServiceWorkerFrameLoaderClient::didFail while waiting, fetch identifier %llu", (uint8_t *)buf, 0xCu);
    }
    WebCore::ResourceErrorBase::isolatedCopy((uint64_t *)buf, a2);
    uint64_t v7 = WTF::fastMalloc((WTF *)0x50);
    uint64_t v8 = *(void *)&buf[0];
    *(void *)&buf[0] = 0;
    *(void *)uint64_t v7 = v8;
    double v10 = WTF::URL::URL(v7 + 8, (uint64_t *)buf + 1);
    uint64_t v11 = v28;
    int v28 = 0;
    *(void *)(v7 + 4++*(_DWORD *)(this + 8) = v11;
    LODWORD(v11) = v29;
    *(_WORD *)(v7 + 6IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v30;
    *(_DWORD *)(v7 + 56) = v11;
    CFTypeRef v12 = cf;
    CFTypeRef cf = 0;
    *(void *)(v7 + 64) = v12;
    *(unsigned char *)(v7 + 72) = v32;
    uint64_t v13 = *(unsigned int *)(v4 + 96);
    if (v13 != -1)
    {
      long long v9 = (WTF::StringImpl *)(v4 + 88);
      if (v13 == 3)
      {
        uint64_t v14 = *(WTF **)v9;
        *(void *)long long v9 = v7;
        if (v14) {
          std::default_delete<WebCore::ResourceError>::operator()[abi:sn180100](v14, v9);
        }
        goto LABEL_13;
      }
      ((void (*)(char *, WTF::StringImpl *, double))off_1EE9F4DB8[v13])(&v26, v9, v10);
    }
    *(void *)(v4 + 8++*(_DWORD *)(this + 8) = v7;
    *(_DWORD *)(v4 + 96) = 3;
LABEL_13:
    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    if (v19) {
      CFRelease(v19);
    }
    uint64_t v20 = v28;
    int v28 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, v9);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    uint64_t v21 = (WTF::StringImpl *)*((void *)&buf[0] + 1);
    *((void *)&buf[0] + 1) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v9);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    this = *(void *)&buf[0];
    *(void *)&buf[0] = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)this, v9);
      }
      else {
        *(_DWORD *)this -= 2;
      }
    }
    return this;
  }
  uint64_t v15 = *(void *)(this + 40);
  if (*(unsigned char *)(this + 233))
  {
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    uint64_t v17 = v16;
    __int16 v18 = 1455;
  }
  else
  {
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    uint64_t v17 = v16;
    __int16 v18 = 1459;
  }
  *(_WORD *)uint64_t v16 = v18;
  *((void *)v16 + 1) = v15;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v16 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  *(void *)&buf[0] = v17;
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v17, a2);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)buf, 0, 0);
  long long v23 = *(IPC::Encoder **)&buf[0];
  *(void *)&buf[0] = 0;
  if (v23)
  {
    IPC::Encoder::~Encoder(v23, v22);
    WTF::fastFree(v24, v25);
  }
  return WebKit::WebServiceWorkerFetchTaskClient::cleanup((WebKit::WebServiceWorkerFetchTaskClient *)v4);
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didNotHandle(atomic_uchar *this)
{
  char v2 = 0;
  uint64_t v3 = this + 13;
  int v4 = 1;
  atomic_compare_exchange_strong_explicit(this + 13, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t result = WebKit::WebServiceWorkerFetchTaskClient::didNotHandleInternal((WebKit::WebServiceWorkerFetchTaskClient *)this);
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v4, 0, memory_order_release, memory_order_relaxed);
  if (v4 != 1)
  {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::didNotHandleInternal(WebKit::WebServiceWorkerFetchTaskClient *this)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    char v3 = 0;
    IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidNotHandle>(result, (uint64_t)&v3, *((void *)this + 5), 0, 0);
    return WebKit::WebServiceWorkerFetchTaskClient::cleanup(this);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::doCancel(atomic_uchar *this)
{
  char v2 = 0;
  char v3 = this + 13;
  atomic_compare_exchange_strong_explicit(this + 13, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    MEMORY[0x19972E8D0](this + 13);
  }
  int v4 = (atomic_uchar *volatile *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4)
  {
    char v5 = 0;
    atomic_uchar *volatile v6 = *v4;
    atomic_compare_exchange_strong_explicit(*v4, (unsigned __int8 *)&v5, 1u, memory_order_acquire, memory_order_acquire);
    if (v5) {
      MEMORY[0x19972E8D0](v6);
    }
    uint64_t v7 = *((void *)v6 + 1);
    uint64_t v8 = v7 - 1;
    *((void *)v6 + 1) = v7 - 1;
    if (v7 == 1)
    {
      uint64_t v15 = *((void *)v6 + 2);
      uint64_t v10 = *((void *)v6 + 3);
      *((void *)v6 + WebKit::WebSWClientConnection::~WebSWClientConnection(this - 3) = 0;
      BOOL v9 = v15 == 0;
    }
    else
    {
      BOOL v9 = 0;
      uint64_t v10 = 0;
    }
    int v11 = 1;
    atomic_compare_exchange_strong_explicit(v6, (unsigned __int8 *)&v11, 0, memory_order_release, memory_order_relaxed);
    if (v11 == 1)
    {
      if (v8) {
        goto LABEL_12;
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      if (v8) {
        goto LABEL_12;
      }
    }
    uint64_t v12 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v12 = &unk_1EE9B37E8;
    *(void *)(v12 + ++*(_DWORD *)(this + 8) = v6;
    *(void *)(v12 + 16) = v10;
    *(unsigned char *)(v12 + ++*(_DWORD *)(this + 24) = v9;
    uint64_t v16 = v12;
    WTF::ensureOnMainRunLoop();
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
  }
LABEL_12:
  uint64_t result = *((void *)this + 30);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  int v14 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v14, 0, memory_order_release, memory_order_relaxed);
  if (v14 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::setCancelledCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 240);
  *(void *)(a1 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

atomic_uchar *WebKit::WebServiceWorkerFetchTaskClient::usePreload(atomic_uchar *this)
{
  uint64_t v1 = (WebKit::WebServiceWorkerFetchTaskClient *)this;
  char v2 = 0;
  uint64_t v3 = this + 13;
  atomic_compare_exchange_strong_explicit(this + 13, (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = (atomic_uchar *)MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t v4 = *((void *)v1 + 2);
  if (v4)
  {
    uint64_t v5 = *((void *)v1 + 5);
    atomic_uchar *volatile v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)atomic_uchar *volatile v6 = 1466;
    *((void *)v6 + 1) = v5;
    *((void *)v6 + 66) = (char *)v6 + 16;
    *((void *)v6 + 67) = 512;
    *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v6 + 69) = 0;
    IPC::Encoder::encodeHeader(v6);
    uint64_t v12 = v6;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    if (v8)
    {
      IPC::Encoder::~Encoder(v8, v7);
      WTF::fastFree(v10, v11);
    }
    this = (atomic_uchar *)WebKit::WebServiceWorkerFetchTaskClient::cleanup(v1);
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return (atomic_uchar *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return this;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::contextIsStopping(uint64_t this)
{
  uint64_t v1 = this;
  char v2 = 0;
  uint64_t v3 = (atomic_uchar *)(this + 13);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(this + 13), (unsigned __int8 *)&v2, 1u, memory_order_acquire, memory_order_acquire);
  if (v2) {
    this = MEMORY[0x19972E8D0](this + 13);
  }
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    if (*(unsigned char *)(v1 + 234))
    {
      if (!*(unsigned char *)(v1 + 232))
      {
        uint64_t v5 = *(void *)(v1 + 40);
        atomic_uchar *volatile v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)atomic_uchar *volatile v6 = 1467;
        *((void *)v6 + 1) = v5;
        *((void *)v6 + 66) = (char *)v6 + 16;
        *((void *)v6 + 67) = 512;
        *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v6 + 69) = 0;
        IPC::Encoder::encodeHeader(v6);
        uint64_t v12 = v6;
        IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v12, 0, 0);
        uint64_t v8 = v12;
        uint64_t v12 = 0;
        if (v8)
        {
          IPC::Encoder::~Encoder(v8, v7);
          WTF::fastFree(v10, v11);
        }
        this = WebKit::WebServiceWorkerFetchTaskClient::cleanup((WebKit::WebServiceWorkerFetchTaskClient *)v1);
      }
    }
    else
    {
      this = WebKit::WebServiceWorkerFetchTaskClient::didNotHandleInternal((WebKit::WebServiceWorkerFetchTaskClient *)v1);
    }
  }
  int v9 = 1;
  atomic_compare_exchange_strong_explicit(v3, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
  if (v9 != 1) {
    return WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
  return this;
}

uint64_t WebKit::WebServiceWorkerProvider::serviceWorkerConnection(WebKit::WebServiceWorkerProvider *this)
{
  {
    uint64_t v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  uint64_t v1 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);

  return WebKit::NetworkProcessConnection::serviceWorkerConnection(v1);
}

uint64_t WebKit::WebServiceWorkerProvider::existingServiceWorkerConnection(WebKit::WebServiceWorkerProvider *this)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  uint64_t v1 = *(WebKit::NetworkProcessConnection **)(WebKit::WebProcess::singleton(void)::process + 296);
  if (!v1) {
    return 0;
  }
  ++*((_DWORD *)v1 + 5);
  uint64_t v2 = WebKit::NetworkProcessConnection::serviceWorkerConnection(v1);
  if (*((_DWORD *)v1 + 5) == 1) {
    (*(void (**)(WebKit::NetworkProcessConnection *))(*(void *)v1 + 8))(v1);
  }
  else {
    --*((_DWORD *)v1 + 5);
  }
  return v2;
}

uint64_t WebKit::WebServiceWorkerProvider::terminateWorkerForTesting(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  {
    int v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v5 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
  uint64_t v10 = &v11;
  uint64_t v11 = a2;
  uint64_t v6 = WebKit::NetworkProcessConnection::serviceWorkerConnection(v5) + 24;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
  return IPC::MessageSender::sendWithAsyncReply<Messages::WebSWServerConnection::TerminateWorkerFromClient,WTF::CompletionHandler<void ()(void)>>(v6, &v10, a3, v7, 0);
}

uint64_t WebKit::WebSharedWorkerContextManagerConnection::WebSharedWorkerContextManagerConnection(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, WebKit::WebPage *a7, uint64_t *a8)
{
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)a1 = &unk_1EE9F4AF0;
  *(void *)(a1 + 16) = &unk_1EE9F4B30;
  *(void *)(a1 + ++*(_DWORD *)(this + 24) = 0;
  uint64_t v11 = *a2;
  *a2 = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 32) = v11;
  uint64_t v12 = *a3;
  *a3 = 0;
  *(void *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v12;
  *(void *)(a1 + 4++*(_DWORD *)(this + 8) = a4;
  *(void *)(a1 + 56) = a5;
  *(void *)(a1 + 64) = a6;
  WebCore::standardUserAgentWithApplicationName();
  WebKit::WebUserContentController::getOrCreate(*a8, (uint64_t **)(a1 + 80));
  *(unsigned char *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  WebKit::WebUserContentController::addContentRuleLists(*(void *)(a1 + 80), (uint64_t)(a8 + 1));
  WebKit::WebPage::updatePreferencesGenerated(a7, v13);
  std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>(a1 + 88, (uint64_t *)a7);
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  ++*(_DWORD *)(WebKit::WebProcess::singleton(void)::process + 32);
  return a1;
}

uint64_t WebKit::WebSharedWorkerContextManagerConnection::updatePreferencesStore(WebKit::WebSharedWorkerContextManagerConnection *this, const WebKit::WebPreferencesStore *a2)
{
  WebKit::WebPage::updatePreferencesGenerated(a2, a2);

  return std::optional<WebKit::WebPreferencesStore>::operator=[abi:sn180100]<WebKit::WebPreferencesStore const&,void>((uint64_t)this + 88, (uint64_t *)a2);
}

void WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection(WebKit::WebSharedWorkerContextManagerConnection *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 136))
  {
    uint64_t v3 = (WTF *)*((void *)this + 14);
    if (v3) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v3, (WTF::StringImpl *)*((unsigned int *)this + 30));
    }
    uint64_t v4 = (WTF *)*((void *)this + 11);
    if (v4) {
      WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v4, (WTF::StringImpl *)*((unsigned int *)this + 24));
    }
  }
  uint64_t v5 = (_DWORD *)*((void *)this + 10);
  *((void *)this + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v5)
  {
    if (v5[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v5 + 8))(v5);
    }
    else {
      --v5[2];
    }
  }
  uint64_t v6 = (WTF::StringImpl *)*((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }
  uint64_t v7 = (WTF::StringImpl *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2) {
      WTF::StringImpl::destroy(v7, a2);
    }
    else {
      *(_DWORD *)v7 -= 2;
    }
  }
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)this + 4);
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v8);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection(WebKit::WebSharedWorkerContextManagerConnection *this, WTF::StringImpl *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebSharedWorkerContextManagerConnection::~WebSharedWorkerContextManagerConnection((WebKit::WebSharedWorkerContextManagerConnection *)((char *)this - 16), a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::WebSharedWorkerContextManagerConnection::establishConnection(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t v3 = (uint64_t *)(a1 + 56);
  uint64_t v4 = (uint64_t *)(a1 + 40);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9F4ED8;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 241;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v8, v3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, v4);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v2, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerContextManagerConnection::postErrorToWorkerObject(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5, uint64_t *a6, char a7)
{
  uint64_t v22 = a2;
  int v20 = a5;
  int v21 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2838;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  long long v23 = v11;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v22);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
  uint64_t v12 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v11, &v21);
  uint64_t v13 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v12, &v20);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a6);
  int v14 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (v15)
  {
    unsigned char *v14 = a7;
    IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v23, 0, 0);
    uint64_t result = (uint64_t)v23;
    long long v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v16);
      return WTF::fastFree(v18, v19);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v69 = a3;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerContextManagerConnection::launchSharedWorker: sharedWorkerIdentifier=%llu", buf, 0xCu);
  }
  uint64_t v13 = &qword_1EB35A000;
  {
    uint64_t v60 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v60);
  }
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672)) {
    goto LABEL_70;
  }
  WebCore::pageConfigurationWithEmptyClients();
  uint64_t v14 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)(v14 + ++*(_DWORD *)(this + 8) = 1;
  *(void *)uint64_t v14 = &unk_1EE9F5AA8;
  uint64_t v15 = v77;
  uint64_t v77 = (_DWORD *)v14;
  if (v15)
  {
    if (v15[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v15 + 8))(v15);
    }
    else {
      --v15[2];
    }
  }
  WebKit::WebDatabaseProvider::getOrCreate(*(void *)(a1 + 48), &v66);
  uint64_t v16 = v73;
  long long v73 = v66;
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1) {
      (*(void (**)(WTF *))(*(void *)v16 + 8))(v16);
    }
    else {
      --*((_DWORD *)v16 + 2);
    }
  }
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v18 + ++*(_DWORD *)(this + 8) = 1;
  *(void *)uint64_t v18 = &unk_1EE9F2890;
  *(void *)(v18 + 16) = v17;
  CFTypeRef v19 = v70;
  int v70 = (unsigned int *)v18;
  if (v19 && atomic_fetch_add((atomic_uint *volatile)v19 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v19 + 2);
    (*(void (**)(unsigned int *))(*(void *)v19 + 24))(v19);
  }
  {
    uint64_t v61 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v61);
  }
  int v20 = *(_DWORD **)(WebKit::WebProcess::singleton(void)::process + 400);
  ++v20[2];
  int v21 = v75;
  uint64_t v75 = v20;
  if (v21)
  {
    if (v21[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v21 + 8))(v21);
    }
    else {
      --v21[2];
    }
  }
  uint64_t v22 = *(_DWORD **)(a1 + 80);
  ++v22[2];
  long long v23 = v74;
  long long v74 = v22;
  if (v23)
  {
    if (v23[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v23 + 8))(v23);
    }
    else {
      --v23[2];
    }
  }
  uint64_t v24 = WTF::fastMalloc((WTF *)0xC8);
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + ++*(_DWORD *)(this + 32) = 0u;
  *(_OWORD *)(v24 + 4++*(_DWORD *)(this + 8) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 12++*(_DWORD *)(this + 8) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_OWORD *)(v24 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0u;
  *(_OWORD *)(v24 + 176) = 0u;
  *(void *)(v24 + 192) = 0;
  *(void *)WebCore::LibWebRTCProvider::LibWebRTCProvider((WebCore::LibWebRTCProvider *)v++*(_DWORD *)(this + 24) = &unk_1EE9F4920;
  uint64_t v25 = v71;
  uint64_t v71 = v24;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  {
    uint64_t v62 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v62);
  }
  uint64_t v26 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v27 = *(WTF::StringImpl **)(WebKit::WebProcess::singleton(void)::process + 784);
  if (v27) {
    *(_DWORD *)v27 += 2;
  }
  unsigned int v65 = v27;
  char v67 = *(WTF **)(v26 + 792);
  WTF::makeUniqueRefWithoutFastMallocCheck<WebKit::WebStorageProvider,WTF::String,std::array<unsigned char,8ul>>((_DWORD **)&v65, (uint64_t *)&v67, &v66);
  int v29 = v66;
  int v66 = 0;
  __int16 v30 = v76;
  uint64_t v76 = v29;
  if (v30)
  {
    (*(void (**)(WTF *))(*(void *)v30 + 8))(v30);
    int v28 = v66;
    int v66 = 0;
    if (v28) {
      std::default_delete<WebKit::WebStorageProvider>::operator()[abi:sn180100]((int)&v66, v28);
    }
  }
  unsigned __int8 v31 = v65;
  unsigned int v65 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2) {
      WTF::StringImpl::destroy(v31, v28);
    }
    else {
      *(_DWORD *)v31 -= 2;
    }
  }
  uint64_t v32 = WTF::fastMalloc((WTF *)0x50);
  WebKit::RemoteWorkerFrameLoaderClient::RemoteWorkerFrameLoaderClient(v32, *(void *)(a1 + 56), *(void *)(a1 + 64), (_DWORD **)(a1 + 72));
  uint64_t v33 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v33 = &unk_1EE9F4F00;
  *((void *)v33 + 1) = v32;
  int v66 = v33;
  std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::RemoteFrameClient> ()(WebCore::RemoteFrame &)>>>::__assign_alt[abi:sn180100]<0ul,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>,WTF::CompletionHandler<WTF::UniqueRef<WebCore::LocalFrameLoaderClient> ()(WebCore::LocalFrame &)>>((unsigned int *)v72, v72, (unsigned int **)&v66);
  uint64_t v34 = v66;
  int v66 = 0;
  if (v34) {
    (*(void (**)(WTF *))(*(void *)v34 + 8))(v34);
  }
  WebCore::Page::create();
  if (*(unsigned char *)(a1 + 136))
  {
    WebKit::WebPage::updateSettingsGenerated((WebKit::WebPage *)(a1 + 88), *((const WebKit::WebPreferencesStore **)v66 + 14), v35);
    if (*(unsigned char *)(a1 + 136))
    {
      {
        WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl += 2;
        WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key = (uint64_t)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::$_0::operator() const(void)::impl;
      }
      WebKit::valueForKey<unsigned int>(a1 + 88, a1 + 112, (WTF::StringImpl **)&WebKit::WebPreferencesKey::storageBlockingPolicyKey(void)::key);
      WebCore::Settings::setStorageBlockingPolicy();
      goto LABEL_31;
    }
LABEL_70:
    __break(1u);
LABEL_71:
    MEMORY[0x19972E8D0](a6);
    goto LABEL_48;
  }
LABEL_31:
  {
    int v63 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v63);
  }
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 619))
  {
    uint64_t v53 = std::__throw_bad_optional_access[abi:sn180100]();
LABEL_73:
    atomic_store(add, v54);
    uint64_t v58 = (WTF *)MEMORY[0x199737A10](v53);
    WTF::fastFree(v58, v59);
    goto LABEL_54;
  }
  if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 618))
  {
    if (*(unsigned char *)(a1 + 136)) {
      uint64_t v36 = (WebCore::Settings *)(a1 + 88);
    }
    else {
      uint64_t v36 = 0;
    }
    WebKit::WebPage::adjustSettingsForLockdownMode(*((WebKit::WebPage **)v66 + 14), v36, v35);
  }
  uint64_t v37 = (uint64_t *)(a6 + 136);
  uint64_t v38 = *(void *)(a6 + 136);
  if (v38 && *(_DWORD *)(v38 + 4)) {
    uint64_t v37 = WTF::String::operator=(v37, (WTF::StringImpl **)(a1 + 72));
  }
  if (!*(unsigned char *)(a6 + 112))
  {
    WeakRandomUUIDVersion4 = (WebCore::Process *)WTF::UUID::generateWeakRandomUUIDVersion4((WTF::UUID *)v37);
    uint64_t v41 = v40;
    uint64_t v42 = WebCore::Process::identifier(WeakRandomUUIDVersion4);
    int v43 = *(unsigned __int8 *)(a6 + 112);
    *(void *)(a6 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = WeakRandomUUIDVersion4;
    *(void *)(a6 + 8++*(_DWORD *)(this + 8) = v41;
    *(void *)(a6 + 96) = v42;
    if (!v43) {
      *(unsigned char *)(a6 + 112) = 1;
    }
  }
  WebCore::Page::setupForRemoteWorker();
  uint64_t v44 = v66;
  ++*(_DWORD *)v66;
  char v67 = v44;
  {
    uint64_t v64 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v64);
  }
  uint64_t v45 = *(void *)(WebKit::WebProcess::singleton(void)::process + 368);
  uint64_t v46 = WTF::fastMalloc((WTF *)0xC0);
  unsigned int v65 = (WTF::StringImpl *)MEMORY[0x199737A00](v46, &v67, a3, a2, a5, a4, a6, v45);
  uint64_t v47 = v67;
  char v67 = 0;
  if (v47) {
    WTF::RefCounted<WebCore::Page>::deref(v47);
  }
  char v48 = 0;
  uint64_t v13 = *(uint64_t **)(v46 + 96);
  a6 = v13[1];
  LODWORD(a5) = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a6, (unsigned __int8 *)&v48, 1u, memory_order_acquire, memory_order_acquire);
  if (v48) {
    goto LABEL_71;
  }
LABEL_48:
  ++*(void *)(a6 + 8);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)a6, (unsigned __int8 *)&a5, 0, memory_order_release, memory_order_relaxed);
  if (a5 != 1) {
    WTF::Lock::unlockSlow((WTF::Lock *)a6);
  }
  uint64_t v49 = v66;
  uint64_t v50 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v50 + 16) = *((_DWORD *)v49 + 78);
  *(void *)uint64_t v50 = &unk_1EE9F7A80;
  *(void *)(v50 + ++*(_DWORD *)(this + 8) = v13;
  *(void *)(v50 + ++*(_DWORD *)(this + 24) = 0;
  uint64_t v51 = (WebCore::SharedWorkerContextManager *)v13[15];
  v13[15] = v50;
  if (v51) {
    uint64_t v51 = (WebCore::SharedWorkerContextManager *)(*(uint64_t (**)(WebCore::SharedWorkerContextManager *))(*(void *)v51 + 8))(v51);
  }
  WebCore::SharedWorkerContextManager::singleton(v51);
  WebCore::SharedWorkerContextManager::registerSharedWorkerThread();
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>((atomic_uchar *)v13[1], v52);
  uint64_t v53 = (uint64_t)v65;
  unsigned int v65 = 0;
  if (v53)
  {
    uint64_t v54 = (unsigned int *)(v53 + 8);
    unsigned int add = atomic_fetch_add((atomic_uint *volatile)(v53 + 8), 0xFFFFFFFF);
    if (add == 1) {
      goto LABEL_73;
    }
  }
LABEL_54:
  long long v56 = v66;
  int v66 = 0;
  if (v56) {
    WTF::RefCounted<WebCore::Page>::deref(v56);
  }
  return MEMORY[0x199733DC0](buf);
}

void WebKit::WebSharedWorkerContextManagerConnection::close(WebKit::WebSharedWorkerContextManagerConnection *this)
{
  v12[1] = *(WebCore::SharedWorkerContextManager **)MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *((unsigned __int8 *)this + 8);
    LODWORD(v12[0]) = 67109120;
    HIDWORD(v12[0]) = v3;
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerContextManagerConnection::close: Shared worker process is requested to stop all shared workers (already stopped = %d)", (uint8_t *)v12, 8u);
  }
  if (!*((unsigned char *)this + 8))
  {
    *((unsigned char *)this + ++*(_DWORD *)(this + 8) = 1;
    uint64_t v4 = *((void *)this + 4);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 228;
    *((void *)v5 + 1) = 0;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    v12[0] = v5;
    IPC::Connection::sendMessageImpl(v4, (uint64_t *)v12, 0, 0);
    uint64_t v7 = v12[0];
    v12[0] = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      uint64_t v7 = (IPC::Encoder *)WTF::fastFree(v9, v10);
    }
    uint64_t v8 = (WebCore::SharedWorkerContextManager *)WebCore::SharedWorkerContextManager::singleton(v7);
    WebCore::SharedWorkerContextManager::stopAllSharedWorkers(v8);
    {
      uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v11);
    }
    WebKit::AuxiliaryProcess::enableTermination(WebKit::WebProcess::singleton(void)::process);
  }
}

IPC::Encoder *WebKit::WebSharedWorkerContextManagerConnection::sharedWorkerTerminated(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  uint64_t v4 = qword_1EB3585C8;
  if (os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "WebSharedWorkerContextManagerConnection::sharedWorkerTerminated: sharedWorkerIdentifier=%llu", buf, 0xCu);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2839;
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  *(void *)buf = v6;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v6, &v11);
  IPC::Connection::sendMessageImpl(v5, (uint64_t *)buf, 0, 0);
  uint64_t result = *(IPC::Encoder **)buf;
  *(void *)buf = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

WebKit::WebSharedWorkerObjectConnection *WebKit::WebSharedWorkerObjectConnection::WebSharedWorkerObjectConnection(WebKit::WebSharedWorkerObjectConnection *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)WebCore::SharedWorkerObjectConnection::SharedWorkerObjectConnection(this);
  void *v2 = &unk_1EE9F4B68;
  v2[3] = &unk_1EE9F4BC0;
  v2[4] = &unk_1EE9F4C10;
  __n128 v2[5] = 0;
  int v3 = qword_1EB3585C8;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    int v6 = 134218240;
    uint64_t v7 = this;
    __int16 v8 = 2048;
    uint64_t v9 = WebCore::Process::identifier((WebCore::Process *)v4);
    _os_log_impl(&dword_1985F2000, v3, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::WebSharedWorkerObjectConnection:", (uint8_t *)&v6, 0x16u);
  }
  return this;
}

void WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(unsigned int **this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = qword_1EB3585C8;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    int v5 = 134218240;
    int v6 = (WebKit::WebSharedWorkerObjectConnection *)this;
    __int16 v7 = 2048;
    uint64_t v8 = WebCore::Process::identifier((WebCore::Process *)v3);
    _os_log_impl(&dword_1985F2000, v2, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection:", (uint8_t *)&v5, 0x16u);
  }
  this[4] = (unsigned int *)&unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 5, v4);
  WebCore::SharedWorkerObjectConnection::~SharedWorkerObjectConnection((WebCore::SharedWorkerObjectConnection *)this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(unsigned int **this)
{
}

{
  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 4);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3);

  WTF::fastFree(v1, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 4);

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebSharedWorkerObjectConnection::messageSenderConnection(WebKit::WebSharedWorkerObjectConnection *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

uint64_t non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::messageSenderConnection(WebKit::WebSharedWorkerObjectConnection *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                   + 24);
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::requestSharedWorker(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v12 = qword_1EB3585C8;
  uint64_t v13 = (WebCore::Process *)os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    uint64_t v14 = WebCore::Process::identifier(v13);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v27);
    WTF::String::utf8();
    if (v30) {
      uint64_t v15 = (char *)v30 + 16;
    }
    else {
      uint64_t v15 = 0;
    }
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v32 = 2048;
    uint64_t v33 = v14;
    __int16 v34 = 2082;
    char v35 = v15;
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::requestSharedWorker: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    uint64_t v17 = v30;
    __int16 v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1) {
        WTF::fastFree(v17, v16);
      }
      else {
        --*(_DWORD *)v17;
      }
    }
    uint64_t v13 = v27;
    uint64_t v27 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        uint64_t v13 = (WebCore::Process *)WTF::StringImpl::destroy(v13, (WTF::StringImpl *)v16);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  uint64_t v18 = WebKit::WebMessagePortChannelProvider::singleton(v13);
  WebKit::WebMessagePortChannelProvider::messagePortSentToRemote((uint64_t)v18, a5);
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v19 = a1 + 24;
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(v20 + 56))(v19);
  uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v22 = 2834;
  *((void *)v22 + 1) = v21;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v22 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  __int16 v30 = v22;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode(v22, a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, (uint64_t *)&v28);
  *(void *)buf = v29;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, (uint64_t *)buf);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, a5);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v22, a5 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v22, a5 + 2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v22, a5 + 3);
  IPC::ArgumentCoder<WebCore::WorkerOptions,void>::encode(v22, a6);
  (*(void (**)(uint64_t, WTF **, void))(*(void *)v19 + 32))(v19, &v30, 0);
  uint64_t result = v30;
  __int16 v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::sharedWorkerObjectIsGoingAway(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v8 = qword_1EB3585C8;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    uint64_t v10 = WebCore::Process::identifier((WebCore::Process *)v9);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v23);
    WTF::String::utf8();
    if (v26) {
      uint64_t v11 = (char *)v26 + 16;
    }
    else {
      uint64_t v11 = 0;
    }
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v28 = 2048;
    uint64_t v29 = v10;
    __int16 v30 = 2082;
    unsigned __int8 v31 = v11;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::sharedWorkerObjectIsGoingAway: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    uint64_t v13 = v26;
    uint64_t v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t v14 = v23;
    long long v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v15 = a1 + 24;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2836;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v18 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v26 = v18;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode(v18, a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)&v24);
  *(void *)buf = v25;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)buf);
  (*(void (**)(uint64_t, WTF **, void))(*(void *)v15 + 32))(v15, &v26, 0);
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::suspendForBackForwardCache(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v8 = qword_1EB3585C8;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    uint64_t v10 = WebCore::Process::identifier((WebCore::Process *)v9);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v23);
    WTF::String::utf8();
    if (v26) {
      uint64_t v11 = (char *)v26 + 16;
    }
    else {
      uint64_t v11 = 0;
    }
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v28 = 2048;
    uint64_t v29 = v10;
    __int16 v30 = 2082;
    unsigned __int8 v31 = v11;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::suspendForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    uint64_t v13 = v26;
    uint64_t v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t v14 = v23;
    long long v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v15 = a1 + 24;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2837;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v18 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v26 = v18;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode(v18, a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)&v24);
  *(void *)buf = v25;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)buf);
  (*(void (**)(uint64_t, WTF **, void))(*(void *)v15 + 32))(v15, &v26, 0);
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::WebSharedWorkerObjectConnection::resumeForBackForwardCache(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v8 = qword_1EB3585C8;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_1EB3585C8, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    uint64_t v10 = WebCore::Process::identifier((WebCore::Process *)v9);
    WTF::makeString<unsigned long long,char,unsigned long long>(a4, 45, a3, &v23);
    WTF::String::utf8();
    if (v26) {
      uint64_t v11 = (char *)v26 + 16;
    }
    else {
      uint64_t v11 = 0;
    }
    *(_DWORD *)buf = 134218498;
    *(void *)&uint8_t buf[4] = a1;
    __int16 v28 = 2048;
    uint64_t v29 = v10;
    __int16 v30 = 2082;
    unsigned __int8 v31 = v11;
    _os_log_impl(&dword_1985F2000, v8, OS_LOG_TYPE_DEFAULT, "%p - [webProcessIdentifier=%llu] WebSharedWorkerObjectConnection::resumeForBackForwardCache: sharedWorkerObjectIdentifier=%{public}s", buf, 0x20u);
    uint64_t v13 = v26;
    uint64_t v26 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1) {
        WTF::fastFree(v13, v12);
      }
      else {
        --*(_DWORD *)v13;
      }
    }
    uint64_t v14 = v23;
    long long v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
  }
  uint64_t v16 = *(void *)(a1 + 24);
  uint64_t v15 = a1 + 24;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
  uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v18 = 2835;
  *((void *)v18 + 1) = v17;
  *((void *)v18 + 66) = (char *)v18 + 16;
  *((void *)v18 + 67) = 512;
  *((void *)v18 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v18 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v18 + 69) = 0;
  IPC::Encoder::encodeHeader(v18);
  uint64_t v26 = v18;
  IPC::ArgumentCoder<WebCore::SharedWorkerKey,void>::encode(v18, a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)&v24);
  *(void *)buf = v25;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v18, (uint64_t *)buf);
  (*(void (**)(uint64_t, WTF **, void))(*(void *)v15 + 32))(v15, &v26, 0);
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v19);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

WebKit::WebSharedWorkerObjectConnection *WebKit::WebSharedWorkerProvider::sharedWorkerConnection(WebKit::WebSharedWorkerProvider *this)
{
  {
    BOOL v3 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v3);
  }
  uint64_t v1 = (WebKit::NetworkProcessConnection *)WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);

  return WebKit::NetworkProcessConnection::sharedWorkerConnection(v1);
}

void WebKit::WebUserContentController::~WebUserContentController(WebKit::WebUserContentController *this)
{
  {
    uint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  IPC::MessageReceiverMap::removeMessageReceiver(WebKit::WebProcess::singleton(void)::process + 48, 0xD2u, *((void *)this + 8));
  {
    if (WebKit::userContentControllers(void)::userContentControllers)
    {
      uint64_t v3 = *((void *)this + 8);
      unsigned int v4 = *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 8);
      unint64_t v5 = (v3 + ~(v3 << 32)) ^ ((unint64_t)(v3 + ~(v3 << 32)) >> 22);
      unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
      unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
      uint64_t v8 = v4 & ((v7 >> 31) ^ v7);
      uint64_t v9 = *(void *)(WebKit::userContentControllers(void)::userContentControllers + 16 * v8);
      if (v9 != v3)
      {
        int v10 = 1;
        while (v9)
        {
          uint64_t v8 = (v8 + v10) & v4;
          uint64_t v9 = *(void *)(WebKit::userContentControllers(void)::userContentControllers + 16 * v8);
          ++v10;
          if (v9 == v3) {
            goto LABEL_10;
          }
        }
        uint64_t v8 = *(unsigned int *)(WebKit::userContentControllers(void)::userContentControllers - 4);
      }
LABEL_10:
      if (v8 != *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 4))
      {
        uint64_t v11 = (void *)(WebKit::userContentControllers(void)::userContentControllers + 16 * v8);
        uint64_t v12 = (unsigned int *)v11[1];
        *uint64_t v11 = -1;
        v11[1] = 0;
        if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v2);
        }
        ++*(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 16);
        if (WebKit::userContentControllers(void)::userContentControllers) {
          int v13 = *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 12) - 1;
        }
        else {
          int v13 = -1;
        }
        *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 12) = v13;
        if (WebKit::userContentControllers(void)::userContentControllers)
        {
          unsigned int v14 = *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 4);
          if (6 * *(_DWORD *)(WebKit::userContentControllers(void)::userContentControllers - 12) < v14 && v14 >= 9) {
            WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::WeakPtr<WebKit::StorageAreaMap,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(&WebKit::userContentControllers(void)::userContentControllers, v14 >> 1, 0);
          }
        }
      }
    }
  }
  else
  {
    WebKit::userContentControllers(void)::userContentControllers = 0;
  }
  uint64_t v16 = (WTF::StringImpl **)*((void *)this + 12);
  if (v16) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WebCore::ContentExtensions::ContentExtension,WTF::RawPtrTraits<WebCore::ContentExtensions::ContentExtension>,WTF::DefaultRefDerefTraits<WebCore::ContentExtensions::ContentExtension>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v16, v2);
  }
  uint64_t v17 = *((void *)this + 11);
  if (v17) {
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v17, v2);
  }
  uint64_t v18 = *((void *)this + 10);
  if (v18) {
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v18, v2);
  }
  uint64_t v19 = *((void *)this + 9);
  if (v19) {
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v19, v2);
  }
  *((void *)this + 6) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 7, v2);

  MEMORY[0x1F416F910](this);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebUserContentController::~WebUserContentController(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebUserContentController::~WebUserContentController(WebKit::WebUserContentController *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebUserContentController::~WebUserContentController((WebKit::WebUserContentController *)((char *)this - 48));

  WTF::fastFree(v1, v2);
}

uint64_t WebKit::WebUserContentController::worldForIdentifier(WebKit *a1, uint64_t a2)
{
  uint64_t v5 = a2;
  WebKit::worldMap(a1);
  uint64_t v2 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, &v5);
  WebKit::worldMap((WebKit *)v2);
  uint64_t v3 = WebKit::worldMap(void)::map;
  if (WebKit::worldMap(void)::map) {
    uint64_t v3 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
  }
  if ((uint64_t *)v3 == v2) {
    return 0;
  }
  else {
    return v2[1];
  }
}

uint64_t *WebKit::worldMap(WebKit *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  {
    {
      uint64_t v2 = WebKit::pageContentWorldIdentifier(void)::identifier;
    }
    else
    {
      uint64_t v2 = 1;
      WebKit::pageContentWorldIdentifier(void)::identifier = 1;
    }
    uint64_t v3 = WebKit::InjectedBundleScriptWorld::normalWorld(this);
    CFRetain(*((CFTypeRef *)v3 + 1));
    uint64_t v5 = v2;
    unint64_t v6 = v3;
    int v7 = 1;
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::HashMap(&WebKit::worldMap(void)::map, &v5, 1);
    unsigned int v4 = v6;
    unint64_t v6 = 0;
    if (v4) {
      CFRelease(*((CFTypeRef *)v4 + 1));
    }
  }
  return &WebKit::worldMap(void)::map;
}

uint64_t WebKit::WebUserContentController::addContentWorld(WebKit *a1, uint64_t *a2)
{
  {
    uint64_t v3 = WebKit::pageContentWorldIdentifier(void)::identifier;
  }
  else
  {
    uint64_t v3 = 1;
    WebKit::pageContentWorldIdentifier(void)::identifier = 1;
  }
  if (*a2 == v3) {
    return 0;
  }
  WebKit::worldMap(a1);
  uint64_t v5 = a2;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::ensure<WebKit::WebUserContentController::addContentWorld(std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String> const&)::$_0>((uint64_t)&v6, a2, (uint64_t)&v5);
  if (!v7) {
    return 0;
  }
  else {
    return *(void *)(v6 + 8);
  }
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::ensure<WebKit::WebUserContentController::addContentWorld(std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String> const&)::$_0>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = WebKit::worldMap(void)::map;
  if (WebKit::worldMap(void)::map
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&WebKit::worldMap(void)::map, 0), (uint64_t v6 = WebKit::worldMap(void)::map) != 0))
  {
    char v7 = 0;
    int v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    int v8 = 0;
    char v7 = 1;
  }
  uint64_t v9 = *a2;
  unint64_t v10 = *a2 + ~(*a2 << 32);
  unint64_t v11 = (v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13);
  unint64_t v12 = (9 * (v11 ^ (v11 >> 8))) ^ ((9 * (v11 ^ (v11 >> 8))) >> 15);
  unsigned int v13 = v8 & (((v12 + ~(v12 << 27)) >> 31) ^ (v12 + ~(v12 << 27)));
  unsigned int v14 = (uint64_t *)(v6 + 24 * v13);
  uint64_t v15 = *v14;
  if (*v14)
  {
    uint64_t v16 = 0;
    int v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if (v7) {
          unsigned int v26 = 0;
        }
        else {
          unsigned int v26 = *(_DWORD *)(v6 - 4);
        }
        char v25 = 0;
        uint64_t v24 = v6 + 24 * v26;
        goto LABEL_26;
      }
      if (v15 == -1) {
        uint64_t v16 = v14;
      }
      unsigned int v13 = (v13 + v17) & v8;
      unsigned int v14 = (uint64_t *)(v6 + 24 * v13);
      uint64_t v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      uint64_t *v16 = 0;
      v16[1] = 0;
      uint64_t v16[2] = 0;
      --*(_DWORD *)(v6 - 16);
      uint64_t v9 = *a2;
      unsigned int v14 = v16;
    }
  }
  uint64_t *v14 = v9;
  WebKit::InjectedBundleScriptWorld::create((const WTF::String *)(*(void *)a3 + 8), &v27);
  uint64_t v18 = v14[1];
  v14[1] = (uint64_t)v27;
  if (v18) {
    CFRelease(*(CFTypeRef *)(v18 + 8));
  }
  int v19 = 1;
  *((_DWORD *)v14 + 4) = 1;
  if (WebKit::worldMap(void)::map) {
    int v19 = *(_DWORD *)(WebKit::worldMap(void)::map - 12) + 1;
  }
  *(_DWORD *)(WebKit::worldMap(void)::map - 12) = v19;
  uint64_t v20 = WebKit::worldMap(void)::map;
  if (WebKit::worldMap(void)::map) {
    int v21 = *(_DWORD *)(WebKit::worldMap(void)::map - 12);
  }
  else {
    int v21 = 0;
  }
  uint64_t v22 = (*(_DWORD *)(WebKit::worldMap(void)::map - 16) + v21);
  unint64_t v23 = *(unsigned int *)(WebKit::worldMap(void)::map - 4);
  if (v23 > 0x400)
  {
    if (v23 <= 2 * v22)
    {
LABEL_20:
      unsigned int v14 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(&WebKit::worldMap(void)::map, v14);
      uint64_t v20 = WebKit::worldMap(void)::map;
      if (WebKit::worldMap(void)::map) {
        LODWORD(v2WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = *(_DWORD *)(WebKit::worldMap(void)::map - 4);
      }
      else {
        LODWORD(v2WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
      }
    }
  }
  else if (3 * v23 <= 4 * v22)
  {
    goto LABEL_20;
  }
  uint64_t v24 = v20 + 24 * v23;
  char v25 = 1;
LABEL_26:
  *(void *)a1 = v14;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = v24;
  *(unsigned char *)(a1 + 16) = v25;
}

void WebKit::WebUserContentController::removeContentWorlds(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = *(void **)a2;
    for (uint64_t i = 8 * v2; i; i -= 8)
    {
      WebKit::worldMap((WebKit *)a1);
      uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, v3);
      a1 = WebKit::worldMap((WebKit *)v5);
      uint64_t v6 = WebKit::worldMap(void)::map;
      if (WebKit::worldMap(void)::map) {
        uint64_t v6 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
      }
      if ((uint64_t *)v6 == v5)
      {
        WTFLogAlways();
        return;
      }
      int v7 = *((_DWORD *)v5 + 4) - 1;
      *((_DWORD *)v5 + 4) = v7;
      if (!v7)
      {
        a1 = WebKit::worldMap((WebKit *)a1);
        if (WebKit::worldMap(void)::map)
        {
          uint64_t v8 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
          if ((uint64_t *)v8 != v5) {
            goto LABEL_11;
          }
        }
        else if (v5)
        {
          uint64_t v8 = 0;
LABEL_11:
          if ((uint64_t *)v8 != v5)
          {
            uint64_t v9 = v5[1];
            uint64_t *v5 = -1;
            v5[1] = 0;
            if (v9) {
              CFRelease(*(CFTypeRef *)(v9 + 8));
            }
            ++*(_DWORD *)(WebKit::worldMap(void)::map - 16);
            if (WebKit::worldMap(void)::map) {
              int v10 = *(_DWORD *)(WebKit::worldMap(void)::map - 12) - 1;
            }
            else {
              int v10 = -1;
            }
            *(_DWORD *)(WebKit::worldMap(void)::map - 12) = v10;
            if (WebKit::worldMap(void)::map)
            {
              unsigned int v11 = *(_DWORD *)(WebKit::worldMap(void)::map - 4);
              if (6 * *(_DWORD *)(WebKit::worldMap(void)::map - 12) < v11 && v11 >= 9) {
                a1 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(&WebKit::worldMap(void)::map, v11 >> 1, 0);
              }
            }
          }
        }
      }
      ++v3;
    }
  }
}

void WebKit::WebUserContentController::addUserScriptInternal(uint64_t a1, uint64_t a2, long long *a3, uint64_t *a4, int a5)
{
  if (a5)
  {
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v9 = &unk_1EE9F4F50;
    v9[1] = a1;
    void v9[2] = a4;
    v9[3] = a2;
    *(void *)&long long v46 = v9;
    WebCore::Page::forEachPage();
    uint64_t v10 = v46;
    *(void *)&long long v46 = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
  }
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v14 = *(void *)(a1 + 72);
  unsigned int v13 = (uint64_t *)(a1 + 72);
  uint64_t v12 = v14;
  if (v14
    || (WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v13, 0), (uint64_t v12 = *v13) != 0))
  {
    int v15 = *(_DWORD *)(v12 - 8);
  }
  else
  {
    int v15 = 0;
  }
  unint64_t v16 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
  unint64_t v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
  unsigned int v19 = v15 & ((v18 >> 31) ^ v18);
  uint64_t v20 = (uint64_t *)(v12 + 24 * v19);
  uint64_t v21 = *v20;
  if (*v20)
  {
    uint64_t v22 = 0;
    int v23 = 1;
    do
    {
      if (v21 == a2)
      {
        CFRelease(*(CFTypeRef *)(a2 + 8));
        goto LABEL_28;
      }
      if (v21 == -1) {
        uint64_t v22 = v20;
      }
      unsigned int v19 = (v19 + v23) & v15;
      uint64_t v20 = (uint64_t *)(v12 + 24 * v19);
      uint64_t v21 = *v20;
      ++v23;
    }
    while (*v20);
    if (v22)
    {
      *uint64_t v22 = 0;
      v22[1] = 0;
      _OWORD v22[2] = 0;
      --*(_DWORD *)(*v13 - 16);
      uint64_t v20 = v22;
    }
  }
  uint64_t *v20 = a2;
  long long v46 = 0uLL;
  unsigned int v24 = *((_DWORD *)v20 + 5);
  if (v24)
  {
    uint64_t v25 = 104 * v24;
    unsigned int v26 = (WebCore::UserScript *)(v20[1] + 16);
    do
    {
      WebCore::UserScript::~UserScript(v26, v11);
      unsigned int v26 = (WebCore::UserScript *)(v27 + 104);
      v25 -= 104;
    }
    while (v25);
  }
  __int16 v28 = (WTF *)v20[1];
  if (v28)
  {
    v20[1] = 0;
    *((_DWORD *)v20 + 4) = 0;
    WTF::fastFree(v28, v11);
  }
  v20[1] = v46;
  uint64_t v29 = *((void *)&v46 + 1);
  long long v46 = 0uLL;
  void v20[2] = v29;
  WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(&v46, v11);
  uint64_t v30 = *v13;
  if (*v13) {
    int v31 = *(_DWORD *)(v30 - 12) + 1;
  }
  else {
    int v31 = 1;
  }
  *(_DWORD *)(v30 - 12) = v31;
  uint64_t v32 = *v13;
  if (*v13) {
    int v33 = *(_DWORD *)(v32 - 12);
  }
  else {
    int v33 = 0;
  }
  uint64_t v34 = (*(_DWORD *)(v32 - 16) + v33);
  unint64_t v35 = *(unsigned int *)(v32 - 4);
  if (v35 > 0x400)
  {
    if (v35 > 2 * v34) {
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (3 * v35 <= 4 * v34) {
LABEL_26:
  }
    uint64_t v20 = WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v13, v20);
LABEL_28:
  uint64_t v36 = v20 + 1;
  if (*((unsigned char *)a3 + 8) && (uint64_t v37 = *((unsigned int *)v20 + 5), v37))
  {
    uint64_t v38 = (unsigned char *)(*v36 + 8);
    while (!*v38 || *((void *)v38 - 1) != *(void *)a3)
    {
      v38 += 104;
      if (!--v37) {
        goto LABEL_34;
      }
    }
  }
  else
  {
LABEL_34:
    long long v46 = *a3;
    WebCore::UserScript::UserScript((uint64_t)v47, a4);
    uint64_t v39 = *((unsigned int *)v20 + 5);
    if (v39 == *((_DWORD *)v20 + 4))
    {
      uint64_t v40 = (_OWORD *)WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)(v20 + 1), v39 + 1, (unint64_t)&v46);
      uint64_t v41 = (_OWORD *)(v20[1] + 104 * *((unsigned int *)v20 + 5));
      _OWORD *v41 = *v40;
      uint64_t v42 = (uint64_t *)(v40 + 1);
      uint64_t v43 = (uint64_t)(v41 + 1);
    }
    else
    {
      uint64_t v44 = (_OWORD *)(*v36 + 104 * v39);
      *uint64_t v44 = v46;
      uint64_t v43 = (uint64_t)(v44 + 1);
      uint64_t v42 = (uint64_t *)v47;
    }
    WebCore::UserScript::UserScript(v43, v42);
    ++*((_DWORD *)v20 + 5);
    WebCore::UserScript::~UserScript((WebCore::UserScript *)v47, v45);
  }
}

void WebKit::WebUserContentController::removeUserScript(WebKit *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  WebKit::worldMap(a1);
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, &v8);
  WebKit::worldMap((WebKit *)v5);
  uint64_t v6 = WebKit::worldMap(void)::map;
  if (WebKit::worldMap(void)::map) {
    uint64_t v6 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
  }
  if ((uint64_t *)v6 == v5)
  {
    WTFLogAlways();
  }
  else
  {
    uint64_t v7 = v5[1];
    CFRetain(*(CFTypeRef *)(v7 + 8));
    WebKit::WebUserContentController::removeUserScriptInternal((uint64_t)a1, v7, a3);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebUserContentController::removeUserScriptInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = (uint64_t *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v5, a2);
  uint64_t v8 = v6;
  if (v5) {
    uint64_t v9 = (uint64_t *)(v5 + 24 * *(unsigned int *)(v5 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 == v6) {
    return;
  }
  uint64_t v10 = *((unsigned int *)v6 + 5);
  if (v10)
  {
    for (uint64_t i = v6[1]; !*(unsigned char *)(i + 8) || *(void *)i != a3; i += 104)
    {
      if (!--v10) {
        return;
      }
    }
    WebCore::UserScript::~UserScript((WebCore::UserScript *)(i + 16), v7);
    WTF::VectorMover<false,WebKit::WebUserScriptData>::move(i + 104, v8[1] + 104 * *((unsigned int *)v8 + 5), i);
    int v13 = *((_DWORD *)v8 + 5) - 1;
    *((_DWORD *)v8 + 5) = v13;
    if (v13) {
      return;
    }
    uint64_t v5 = *v4;
  }
  if (v5)
  {
    uint64_t v14 = v5 + 24 * *(unsigned int *)(v5 - 4);
    if ((uint64_t *)v14 == v8) {
      return;
    }
  }
  else
  {
    if (!v8) {
      return;
    }
    uint64_t v14 = 0;
  }
  if ((uint64_t *)v14 != v8)
  {
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v4, v8);
  }
}

void WebKit::WebUserContentController::removeAllUserScripts(WebKit *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (v2)
  {
    uint64_t v3 = *(void **)a2;
    unsigned int v4 = (uint64_t *)((char *)a1 + 72);
    for (uint64_t i = 8 * v2; i; i -= 8)
    {
      WebKit::worldMap(a1);
      uint64_t v6 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, v3);
      WebKit::worldMap((WebKit *)v6);
      uint64_t v7 = WebKit::worldMap(void)::map;
      if (WebKit::worldMap(void)::map) {
        uint64_t v7 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
      }
      if ((uint64_t *)v7 == v6)
      {
        WTFLogAlways();
        return;
      }
      uint64_t v8 = v6[1];
      CFRetain(*(CFTypeRef *)(v8 + 8));
      uint64_t v9 = *v4;
      uint64_t v10 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(*v4, v8);
      if (v9)
      {
        unsigned int v11 = (uint64_t *)(v9 + 24 * *(unsigned int *)(v9 - 4));
        if (v11 != v10) {
          goto LABEL_9;
        }
      }
      else if (v10)
      {
        unsigned int v11 = 0;
LABEL_9:
        if (v11 != v10) {
          WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v4, v10);
        }
      }
      CFRelease(*(CFTypeRef *)(v8 + 8));
      ++v3;
    }
  }
}

uint64_t WebCore::UserStyleSheet::UserStyleSheet(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD **)a2;
  if (*(void *)a2) {
    *v4 += 2;
  }
  *(void *)a1 = v4;
  uint64_t v5 = *(_DWORD **)(a2 + 8);
  if (v5) {
    *v5 += 2;
  }
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + ++*(_DWORD *)(this + 32) = v6;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 48, a2 + 48);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a1 + 64, a2 + 64);
  long long v7 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v7;
  return a1;
}

void WebKit::WebUserContentController::addUserStyleSheetInternal(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v10 = (uint64_t *)(a1 + 80);
  uint64_t v9 = v11;
  if (v11
    || (WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v10, 0), (uint64_t v9 = *v10) != 0))
  {
    int v12 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v12 = 0;
  }
  unint64_t v13 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
  unint64_t v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
  unsigned int v16 = v12 & ((v15 >> 31) ^ v15);
  unint64_t v17 = (uint64_t *)(v9 + 24 * v16);
  uint64_t v18 = *v17;
  if (*v17)
  {
    unsigned int v19 = 0;
    int v20 = 1;
    do
    {
      if (v18 == a2)
      {
        CFRelease(*(CFTypeRef *)(a2 + 8));
        goto LABEL_24;
      }
      if (v18 == -1) {
        unsigned int v19 = v17;
      }
      unsigned int v16 = (v16 + v20) & v12;
      unint64_t v17 = (uint64_t *)(v9 + 24 * v16);
      uint64_t v18 = *v17;
      ++v20;
    }
    while (*v17);
    if (v19)
    {
      *unsigned int v19 = 0;
      v19[1] = 0;
      uint64_t v19[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      unint64_t v17 = v19;
    }
  }
  uint64_t *v17 = a2;
  long long v47 = 0uLL;
  unsigned int v21 = *((_DWORD *)v17 + 5);
  if (v21) {
    WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct((WTF::StringImpl *)v17[1], (WTF::StringImpl *)(v17[1] + 120 * v21));
  }
  uint64_t v22 = (WTF *)v17[1];
  if (v22)
  {
    v17[1] = 0;
    *((_DWORD *)v17 + 4) = 0;
    WTF::fastFree(v22, v8);
  }
  *(void *)&long long v47 = 0;
  v17[1] = 0;
  *((void *)&v47 + 1) = 0;
  void v17[2] = 0;
  WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v47, v8);
  uint64_t v23 = *v10;
  if (*v10) {
    int v24 = *(_DWORD *)(v23 - 12) + 1;
  }
  else {
    int v24 = 1;
  }
  *(_DWORD *)(v23 - 12) = v24;
  uint64_t v25 = *v10;
  if (*v10) {
    int v26 = *(_DWORD *)(v25 - 12);
  }
  else {
    int v26 = 0;
  }
  uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
  unint64_t v28 = *(unsigned int *)(v25 - 4);
  if (v28 > 0x400)
  {
    if (v28 > 2 * v27) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  if (3 * v28 <= 4 * v27) {
LABEL_22:
  }
    unint64_t v17 = WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(v10, v17);
LABEL_24:
  uint64_t v29 = v17 + 1;
  if (*((unsigned char *)a3 + 8) && (uint64_t v30 = *((unsigned int *)v17 + 5), v30))
  {
    int v31 = (unsigned char *)(*v29 + 8);
    while (!*v31 || *((void *)v31 - 1) != *(void *)a3)
    {
      v31 += 120;
      if (!--v30) {
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    if (*(unsigned char *)(a4 + 96))
    {
      {
        long long v46 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v46);
      }
      *(void *)&long long v47 = *(void *)(a4 + 88);
      uint64_t v32 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v47);
      if (v32 && *(void *)(v32 + 48)) {
        WebCore::Page::injectUserStyleSheet();
      }
    }
    long long v47 = *a3;
    int v33 = *(WTF::StringImpl **)a4;
    *(void *)a4 = 0;
    char v48 = v33;
    WTF::URL::URL((uint64_t)&v49, (uint64_t *)(a4 + 8));
    uint64_t v34 = *(void *)(a4 + 48);
    *(void *)(a4 + 4++*(_DWORD *)(this + 8) = 0;
    v50[0] = v34;
    uint64_t v35 = *(void *)(a4 + 56);
    *(void *)(a4 + 56) = 0;
    v50[1] = v35;
    uint64_t v36 = *(void *)(a4 + 64);
    *(void *)(a4 + 64) = 0;
    v51[0] = v36;
    uint64_t v37 = *(void *)(a4 + 72);
    *(void *)(a4 + 72) = 0;
    v51[1] = v37;
    long long v52 = *(_OWORD *)(a4 + 80);
    char v53 = *(unsigned char *)(a4 + 96);
    uint64_t v38 = *((unsigned int *)v17 + 5);
    if (v38 == *((_DWORD *)v17 + 4))
    {
      uint64_t v39 = (long long *)WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)v17 + 2, v38 + 1, (unint64_t)&v47);
      uint64_t v40 = v17[1] + 120 * *((unsigned int *)v17 + 5);
    }
    else
    {
      uint64_t v40 = *v29 + 120 * v38;
      uint64_t v39 = &v47;
    }
    std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>::pair[abi:sn180100](v40, (uint64_t)v39);
    ++*((_DWORD *)v17 + 5);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v51, v41);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v50, v42);
    uint64_t v44 = v49;
    uint64_t v49 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2) {
        WTF::StringImpl::destroy(v44, v43);
      }
      else {
        *(_DWORD *)v44 -= 2;
      }
    }
    uint64_t v45 = v48;
    char v48 = 0;
    if (v45)
    {
      if (*(_DWORD *)v45 == 2) {
        WTF::StringImpl::destroy(v45, v43);
      }
      else {
        *(_DWORD *)v45 -= 2;
      }
    }
  }
}

void WebKit::WebUserContentController::removeUserStyleSheet(WebKit *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  WebKit::worldMap(a1);
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, &v8);
  WebKit::worldMap((WebKit *)v5);
  uint64_t v6 = WebKit::worldMap(void)::map;
  if (WebKit::worldMap(void)::map) {
    uint64_t v6 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
  }
  if ((uint64_t *)v6 == v5)
  {
    WTFLogAlways();
  }
  else
  {
    uint64_t v7 = v5[1];
    CFRetain(*(CFTypeRef *)(v7 + 8));
    WebKit::WebUserContentController::removeUserStyleSheetInternal((uint64_t *)a1, v7, a3);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void *WebKit::WebUserContentController::removeUserStyleSheetInternal(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 10;
  uint64_t v6 = a1[10];
  uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v6, a2);
  uint64_t v9 = result;
  if (v6) {
    uint64_t v10 = (void *)(v6 + 24 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10 == result) {
    return result;
  }
  unint64_t v11 = *((unsigned int *)result + 5);
  if (!v11) {
    return result;
  }
  uint64_t v12 = result[1];
  unint64_t v13 = 0;
  if (*(unsigned char *)(v12 + 8)) {
    BOOL v14 = *(void *)v12 == a3;
  }
  else {
    BOOL v14 = 0;
  }
  if (!v14)
  {
    unint64_t v15 = (unsigned __int8 *)(v12 + 128);
    while (v11 - 1 != v13)
    {
      int v16 = *v15;
      uint64_t v17 = *((void *)v15 - 1);
      v15 += 120;
      ++v13;
      if (v16) {
        BOOL v18 = v17 == a3;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        BOOL v19 = v13 < v11;
        goto LABEL_18;
      }
    }
    return result;
  }
  BOOL v19 = 1;
LABEL_18:
  if (*(unsigned char *)(v12 + 120 * v13 + 112))
  {
    {
      uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v30);
    }
    uint64_t v31 = *(void *)(v12 + 120 * v13 + 104);
    uint64_t v20 = WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 120), &v31);
    if (v20 && *(void *)(v20 + 48)) {
      WebCore::Page::removeInjectedUserStyleSheet();
    }
  }
  uint64_t v21 = v9[1];
  uint64_t v22 = v21 + 120 * v13;
  uint64_t v23 = (WTF::StringImpl **)(v22 + 16);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 + 80, v8);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 + 64, v24);
  int v26 = *(WTF::StringImpl **)(v22 + 24);
  *(void *)(v22 + ++*(_DWORD *)(this + 24) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2) {
      WTF::StringImpl::destroy(v26, v25);
    }
    else {
      *(_DWORD *)v26 -= 2;
    }
  }
  uint64_t v27 = *v23;
  *uint64_t v23 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2) {
      WTF::StringImpl::destroy(v27, v25);
    }
    else {
      *(_DWORD *)v27 -= 2;
    }
  }
  uint64_t result = WTF::VectorMover<false,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>>::move((WTF::StringImpl *)(v21 + 120 * v13 + 120), (WTF::StringImpl *)(v9[1] + 120 * *((unsigned int *)v9 + 5)), v21 + 120 * v13);
  int v28 = *((_DWORD *)v9 + 5) - 1;
  *((_DWORD *)v9 + 5) = v28;
  if (v19)
  {
    if (v28) {
      return (void *)WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages((WebCore::UserContentProvider *)a1);
    }
    if (*v5)
    {
      uint64_t v29 = *v5 + 24 * *(unsigned int *)(*v5 - 4);
      if ((void *)v29 == v9) {
        return (void *)WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages((WebCore::UserContentProvider *)a1);
      }
    }
    else
    {
      if (!v9) {
        return (void *)WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages((WebCore::UserContentProvider *)a1);
      }
      uint64_t v29 = 0;
    }
    if ((void *)v29 != v9) {
      WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v5, v9);
    }
    return (void *)WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages((WebCore::UserContentProvider *)a1);
  }
  return result;
}

void WebKit::WebUserContentController::removeAllUserStyleSheets(WebKit *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (!v2) {
    return;
  }
  char v4 = 0;
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = (uint64_t *)((char *)a1 + 80);
  uint64_t v7 = 8 * v2;
  do
  {
    WebKit::worldMap(a1);
    uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, v5);
    WebKit::worldMap((WebKit *)v8);
    uint64_t v9 = WebKit::worldMap(void)::map;
    if (WebKit::worldMap(void)::map) {
      uint64_t v9 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
    }
    if ((uint64_t *)v9 == v8)
    {
      WTFLogAlways();
      return;
    }
    uint64_t v10 = v8[1];
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v11 = *v6;
    uint64_t v12 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(*v6, v10);
    if (v11)
    {
      unint64_t v13 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
      if (v13 == v12) {
        goto LABEL_12;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_12;
      }
      unint64_t v13 = 0;
    }
    if (v13 != v12) {
      WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v6, v12);
    }
    char v4 = 1;
LABEL_12:
    CFRelease(*(CFTypeRef *)(v10 + 8));
    ++v5;
    v7 -= 8;
  }
  while (v7);
  if (v4)
  {
    WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(a1);
  }
}

void WebKit::WebUserContentController::addUserScriptMessageHandlerInternal(uint64_t a1, uint64_t a2, uint64_t a3, const AtomString *a4)
{
  CFRetain(*(CFTypeRef *)(a2 + 8));
  uint64_t v10 = (uint64_t *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 88);
  if (v9
    || (WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand((uint64_t *)(a1 + 88), 0), (uint64_t v9 = *v10) != 0))
  {
    int v11 = *(_DWORD *)(v9 - 8);
  }
  else
  {
    int v11 = 0;
  }
  unint64_t v12 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v13 = 9 * ((v12 + ~(v12 << 13)) ^ ((v12 + ~(v12 << 13)) >> 8));
  unint64_t v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  unsigned int v15 = v11 & ((v14 >> 31) ^ v14);
  int v16 = (uint64_t *)(v9 + 24 * v15);
  uint64_t v17 = *v16;
  if (*v16)
  {
    BOOL v18 = 0;
    int v19 = 1;
    do
    {
      if (v17 == a2)
      {
        CFRelease(*(CFTypeRef *)(a2 + 8));
        goto LABEL_26;
      }
      if (v17 == -1) {
        BOOL v18 = v16;
      }
      unsigned int v15 = (v15 + v19) & v11;
      int v16 = (uint64_t *)(v9 + 24 * v15);
      uint64_t v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *BOOL v18 = 0;
      v18[1] = 0;
      uint64_t v18[2] = 0;
      --*(_DWORD *)(*v10 - 16);
      int v16 = v18;
    }
  }
  uint64_t *v16 = a2;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v20 = *((unsigned int *)v16 + 5);
  if (v20) {
    WTF::VectorDestructor<true,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::destruct((_DWORD *)v16[1], (_DWORD *)(v16[1] + 16 * v20));
  }
  uint64_t v21 = (WTF *)v16[1];
  if (v21)
  {
    v16[1] = 0;
    *((_DWORD *)v16 + 4) = 0;
    WTF::fastFree(v21, v8);
  }
  uint64_t v41 = 0;
  v16[1] = 0;
  uint64_t v42 = 0;
  uint64_t v16[2] = 0;
  WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v41, v8);
  uint64_t v22 = *v10;
  if (*v10) {
    int v23 = *(_DWORD *)(v22 - 12) + 1;
  }
  else {
    int v23 = 1;
  }
  *(_DWORD *)(v22 - 12) = v23;
  uint64_t v24 = *v10;
  if (*v10) {
    int v25 = *(_DWORD *)(v24 - 12);
  }
  else {
    int v25 = 0;
  }
  uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
  unint64_t v27 = *(unsigned int *)(v24 - 4);
  if (v27 <= 0x400)
  {
    if (3 * v27 > 4 * v26) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v27 <= 2 * v26) {
LABEL_25:
  }
    int v16 = WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand((uint64_t *)(a1 + 88), v16);
LABEL_26:
  uint64_t v28 = *((unsigned int *)v16 + 5);
  if (v28)
  {
    uint64_t v29 = (uint64_t *)v16[1];
    while (1)
    {
      uint64_t v30 = *v29;
      v29 += 2;
      if (v30 == a3) {
        break;
      }
      if (!--v28) {
        goto LABEL_30;
      }
    }
  }
  else
  {
LABEL_30:
    uint64_t v31 = (WebCore::UserMessageHandlerDescriptor *)WTF::fastMalloc((WTF *)0x30);
    *(void *)WebCore::UserMessageHandlerDescriptor::UserMessageHandlerDescriptor(v31, a4, *(WebCore::DOMWrapperWorld **)(a2 + 24)) = &unk_1EE9F4E28;
    if (a1) {
      ++*(_DWORD *)(a1 + 8);
    }
    *((void *)v31 + 4) = a1;
    *((void *)v31 + 5) = a3;
    unint64_t v32 = *((unsigned int *)v16 + 5);
    if (v32 == *((_DWORD *)v16 + 4))
    {
      unint64_t v33 = v32 + (v32 >> 2);
      if (v33 >= 0x10) {
        unint64_t v34 = v33 + 1;
      }
      else {
        unint64_t v34 = 16;
      }
      if (v34 <= v32 + 1) {
        unint64_t v35 = v32 + 1;
      }
      else {
        unint64_t v35 = v34;
      }
      if (v35 >> 28)
      {
        __break(0xC471u);
        return;
      }
      uint64_t v36 = (WTF *)v16[1];
      uint64_t v37 = (void *)((char *)v36 + 16 * v32);
      uint64_t v38 = (void *)WTF::fastMalloc((WTF *)(16 * v35));
      *((_DWORD *)v16 + 4) = v35;
      v16[1] = (uint64_t)v38;
      WTF::VectorMover<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::move(v36, v37, v38);
      if (v36)
      {
        if ((WTF *)v16[1] == v36)
        {
          v16[1] = 0;
          *((_DWORD *)v16 + 4) = 0;
        }
        WTF::fastFree(v36, v39);
      }
      unint64_t v32 = *((unsigned int *)v16 + 5);
    }
    uint64_t v40 = (void *)(v16[1] + 16 * v32);
    *uint64_t v40 = a3;
    v40[1] = v31;
    ++*((_DWORD *)v16 + 5);
  }
}

void WebKit::WebUserContentController::removeUserScriptMessageHandler(WebKit *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a2;
  WebKit::worldMap(a1);
  uint64_t v5 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, &v8);
  WebKit::worldMap((WebKit *)v5);
  uint64_t v6 = WebKit::worldMap(void)::map;
  if (WebKit::worldMap(void)::map) {
    uint64_t v6 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
  }
  if ((uint64_t *)v6 == v5)
  {
    WTFLogAlways();
  }
  else
  {
    uint64_t v7 = v5[1];
    CFRetain(*(CFTypeRef *)(v7 + 8));
    WebKit::WebUserContentController::removeUserScriptMessageHandlerInternal((uint64_t)a1, v7, a3);
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void *WebKit::WebUserContentController::removeUserScriptMessageHandlerInternal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t result = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(v6, a2);
  uint64_t v8 = result;
  if (v6) {
    uint64_t v9 = (void *)(v6 + 24 * *(unsigned int *)(v6 - 4));
  }
  else {
    uint64_t v9 = 0;
  }
  if (v9 == result) {
    return result;
  }
  int v10 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = v10 + 1;
  unint64_t v11 = *((unsigned int *)result + 5);
  if (v11)
  {
    unint64_t v12 = (void *)result[1];
    if (*v12 != a3)
    {
      unint64_t v13 = 0;
      unsigned int v15 = v12 + 2;
      while (v11 - 1 != v13)
      {
        uint64_t v16 = *v15;
        v15 += 2;
        ++v13;
        if (v16 == a3)
        {
          BOOL v14 = v13 < v11;
          goto LABEL_12;
        }
      }
      goto LABEL_19;
    }
    unint64_t v13 = 0;
    BOOL v14 = 1;
LABEL_12:
    uint64_t v17 = &v12[2 * v13];
    BOOL v18 = (_DWORD *)v17[1];
    v17[1] = 0;
    if (v18)
    {
      if (v18[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(void *)v18 + 8))(v18);
        unint64_t v11 = *((unsigned int *)v8 + 5);
      }
      else
      {
        --v18[2];
      }
    }
    uint64_t result = WTF::VectorMover<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::move((_DWORD *)v17 + 4, (void *)(v8[1] + 16 * v11), v17);
    int v19 = *((_DWORD *)v8 + 5) - 1;
    *((_DWORD *)v8 + 5) = v19;
    if (!v14)
    {
LABEL_19:
      if (!a1) {
        return result;
      }
      int v10 = *(_DWORD *)(a1 + 8) - 1;
      goto LABEL_21;
    }
    if (v19)
    {
LABEL_18:
      uint64_t result = (void *)WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients((WebCore::UserContentProvider *)a1);
      goto LABEL_19;
    }
    if (*v5)
    {
      uint64_t v21 = *v5 + 24 * *(unsigned int *)(*v5 - 4);
      if ((void *)v21 == v8) {
        goto LABEL_18;
      }
    }
    else
    {
      if (!v8) {
        goto LABEL_18;
      }
      uint64_t v21 = 0;
    }
    if ((void *)v21 != v8) {
      WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v5, v8);
    }
    goto LABEL_18;
  }
LABEL_21:
  if (v10)
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = v10;
  }
  else
  {
    uint64_t v20 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 8);
    return (void *)v20(a1);
  }
  return result;
}

uint64_t WebKit::WebUserContentController::removeAllUserScriptMessageHandlers(WebKit::WebUserContentController *this, void *a2)
{
  uint64_t result = *((void *)this + 11);
  if (result && *(_DWORD *)(result - 12))
  {
    *((void *)this + 11) = 0;
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(result, a2);
    return WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients(this);
  }
  return result;
}

void WebKit::WebUserContentController::removeAllUserScriptMessageHandlersForWorlds(WebKit *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 12);
  if (!v2) {
    return;
  }
  char v4 = 0;
  uint64_t v5 = *(void **)a2;
  uint64_t v6 = (uint64_t *)((char *)a1 + 88);
  uint64_t v7 = 8 * v2;
  do
  {
    WebKit::worldMap(a1);
    uint64_t v8 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&WebKit::worldMap(void)::map, v5);
    WebKit::worldMap((WebKit *)v8);
    uint64_t v9 = WebKit::worldMap(void)::map;
    if (WebKit::worldMap(void)::map) {
      uint64_t v9 = WebKit::worldMap(void)::map + 24 * *(unsigned int *)(WebKit::worldMap(void)::map - 4);
    }
    if ((uint64_t *)v9 == v8)
    {
      WTFLogAlways();
      return;
    }
    uint64_t v10 = v8[1];
    CFRetain(*(CFTypeRef *)(v10 + 8));
    uint64_t v11 = *v6;
    unint64_t v12 = WTF::HashTable<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>::find<WTF::HashMapTranslator<WTF::HashMap<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>,WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>,WTF::HashTraits<WTF::Vector<WTF::Ref<WebCore::MediaKeySystemRequest,WTF::RawPtrTraits<WebCore::MediaKeySystemRequest>,WTF::DefaultRefDerefTraits<WebCore::MediaKeySystemRequest>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::RefPtr<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>>>,WebCore::Document const*>(*v6, v10);
    if (v11)
    {
      unint64_t v13 = (uint64_t *)(v11 + 24 * *(unsigned int *)(v11 - 4));
      if (v13 == v12) {
        goto LABEL_14;
      }
    }
    else
    {
      if (!v12) {
        goto LABEL_14;
      }
      unint64_t v13 = 0;
    }
    if (v13 != v12) {
      WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(v6, v12);
    }
    char v4 = 1;
LABEL_14:
    CFRelease(*(CFTypeRef *)(v10 + 8));
    ++v5;
    v7 -= 8;
  }
  while (v7);
  if (v4)
  {
    WebCore::UserContentProvider::invalidateAllRegisteredUserMessageHandlerInvalidationClients(a1);
  }
}

uint64_t WebKit::WebUserContentController::removeContentRuleList(WebKit::WebUserContentController *this, const WTF::String *a2)
{
  return WebCore::ContentExtensions::ContentExtensionsBackend::removeContentExtension((WebKit::WebUserContentController *)((char *)this + 96), a2);
}

uint64_t WebKit::WebUserContentController::removeAllUserContent(WebKit::WebUserContentController *this, void *a2)
{
  uint64_t v3 = *((void *)this + 9);
  if (v3)
  {
    *((void *)this + 9) = 0;
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(v3, a2);
  }
  uint64_t result = *((void *)this + 10);
  if (result && *(_DWORD *)(result - 12))
  {
    *((void *)this + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(result, a2);
    return WebCore::UserContentProvider::invalidateInjectedStyleSheetCacheInAllFramesInAllPages(this);
  }
  return result;
}

uint64_t WebKit::WebUserContentController::forEachUserScript(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 72);
  if (!v3)
  {
    uint64_t v4 = 0;
    LODWORD(v5) = 0;
LABEL_3:
    uint64_t v6 = v3 + 24 * v5;
    goto LABEL_4;
  }
  uint64_t v5 = *(unsigned int *)(v3 - 4);
  uint64_t v6 = v3 + 24 * v5;
  if (!*(_DWORD *)(v3 - 12))
  {
    uint64_t v4 = v3 + 24 * v5;
    goto LABEL_3;
  }
  uint64_t v4 = *(void *)(result + 72);
  if (v5)
  {
    uint64_t v8 = 24 * v5;
    uint64_t v4 = *(void *)(result + 72);
    while ((unint64_t)(*(void *)v4 + 1) <= 1)
    {
      v4 += 24;
      v8 -= 24;
      if (!v8)
      {
        uint64_t v4 = v6;
        break;
      }
    }
  }
LABEL_4:
  if (v3) {
    uint64_t v7 = v3 + 24 * *(unsigned int *)(v3 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  while (v4 != v7)
  {
    unsigned int v9 = *(_DWORD *)(v4 + 20);
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)v4 + 24);
      uint64_t v11 = 104 * v9;
      uint64_t v12 = *(void *)(v4 + 8) + 16;
      do
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v10, v12);
        v12 += 104;
        v11 -= 104;
      }
      while (v11);
    }
    uint64_t v13 = v4 + 24;
    uint64_t v4 = v6;
    if (v13 != v6)
    {
      uint64_t v4 = v13;
      while ((unint64_t)(*(void *)v4 + 1) <= 1)
      {
        v4 += 24;
        if (v4 == v6)
        {
          uint64_t v4 = v6;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebUserContentController::forEachUserMessageHandler(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 88);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    uint64_t v5 = v3 + 24 * v4;
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v6 = *(void *)(result + 88);
      if (v4)
      {
        uint64_t v7 = 24 * v4;
        uint64_t v6 = *(void *)(result + 88);
        while ((unint64_t)(*(void *)v6 + 1) <= 1)
        {
          v6 += 24;
          v7 -= 24;
          if (!v7)
          {
            uint64_t v6 = v5;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    uint64_t v6 = v3 + 24 * v4;
  }
  else
  {
    uint64_t v6 = 0;
    LODWORD(v4) = 0;
  }
  uint64_t v5 = v3 + 24 * v4;
  if (v3)
  {
LABEL_8:
    uint64_t v8 = v3 + 24 * *(unsigned int *)(v3 - 4);
    goto LABEL_13;
  }
  uint64_t v8 = 0;
LABEL_13:
  while (v6 != v8)
  {
    uint64_t v9 = *(unsigned int *)(v6 + 20);
    if (v9)
    {
      uint64_t v10 = 16 * v9;
      uint64_t v11 = (uint64_t *)(*(void *)(v6 + 8) + 8);
      do
      {
        uint64_t v12 = *v11;
        v11 += 2;
        uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 16))(*a2, v12);
        v10 -= 16;
      }
      while (v10);
    }
    uint64_t v13 = v6 + 24;
    uint64_t v6 = v5;
    if (v13 != v5)
    {
      uint64_t v6 = v13;
      while ((unint64_t)(*(void *)v6 + 1) <= 1)
      {
        v6 += 24;
        if (v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }
    }
  }
  return result;
}

void WebKit::WebAuthenticatorCoordinator::makeCredential(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::fromCoreFrame(a2, &v25);
  uint64_t v9 = v25;
  if (v25)
  {
    uint64_t v10 = *(void **)(a1 + 16);
    long long v24 = *((_OWORD *)v25 + 5);
    WebKit::WebFrame::info(v25, (uint64_t)v28);
    uint64_t v11 = v10[4];
    v10 += 4;
    uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 56))(v10);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 1559;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v13 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    unint64_t v27 = v13;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v13, (uint64_t *)&v24);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v13, v28);
    IPC::ArgumentCoder<WebCore::PublicKeyCredentialCreationOptions,void>::encode(v13, a3);
    IPC::ArgumentCoder<WebCore::MediationRequirement,void>::encode<IPC::Encoder>(v13, a4);
    uint64_t v14 = *a5;
    *a5 = 0;
    unsigned int v15 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unsigned int v15 = &unk_1EE9F4F78;
    v15[1] = v14;
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v26[0] = v15;
    v26[1] = v16;
    (*(void (**)(void *, IPC::Encoder **, void *, void))(*v10 + 40))(v10, &v27, v26, 0);
    uint64_t v18 = v26[0];
    v26[0] = 0;
    if (v18) {
      (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    }
    int v19 = v27;
    unint64_t v27 = 0;
    if (v19)
    {
      IPC::Encoder::~Encoder(v19, v17);
      WTF::fastFree(v22, v23);
    }
    uint64_t v20 = v33;
    unint64_t v33 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2) {
        WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v20 -= 2;
      }
    }
    if (v32 != -1) {
      ((void (*)(void *, uint64_t *))off_1EE9F4E68[v32])(v26, &v31);
    }
    int v32 = -1;
    CFTypeRef v21 = cf;
    CFTypeRef cf = 0;
    if (v21) {
      CFRelease(v21);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v29);
    CFRelease(*((CFTypeRef *)v9 + 1));
  }
}

void WebKit::WebAuthenticatorCoordinator::getAssertion(uint64_t a1, uint64_t a2, WebCore::BufferSource *a3, char a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::fromCoreFrame(a2, &v27);
  uint64_t v11 = v27;
  if (v27)
  {
    uint64_t v12 = *(void **)(a1 + 16);
    long long v26 = *((_OWORD *)v27 + 5);
    WebKit::WebFrame::info(v27, (uint64_t)v30);
    uint64_t v13 = v12[4];
    v12 += 4;
    uint64_t v14 = (*(uint64_t (**)(void *))(v13 + 56))(v12);
    unsigned int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unsigned int v15 = 1556;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v15 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    uint64_t v29 = v15;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v15, (uint64_t *)&v26);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v15, v30);
    IPC::ArgumentCoder<WebCore::PublicKeyCredentialRequestOptions,void>::encode(v15, a3);
    IPC::ArgumentCoder<WebCore::MediationRequirement,void>::encode<IPC::Encoder>(v15, a4);
    IPC::ArgumentCoder<std::optional<WebCore::SecurityOriginData>,void>::encode<IPC::Encoder,std::optional<WebCore::SecurityOriginData> const&>(v15, a5 + 8);
    uint64_t v16 = *a6;
    *a6 = 0;
    uint64_t v17 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v17 = &unk_1EE9F4FA0;
    v17[1] = v16;
    uint64_t v18 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v28[0] = v17;
    v28[1] = v18;
    (*(void (**)(void *, IPC::Encoder **, void *, void))(*v12 + 40))(v12, &v29, v28, 0);
    uint64_t v20 = v28[0];
    v28[0] = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    CFTypeRef v21 = v29;
    uint64_t v29 = 0;
    if (v21)
    {
      IPC::Encoder::~Encoder(v21, v19);
      WTF::fastFree(v24, v25);
    }
    uint64_t v22 = v35;
    unint64_t v35 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2) {
        WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v19);
      }
      else {
        *(_DWORD *)v22 -= 2;
      }
    }
    if (v34 != -1) {
      ((void (*)(void *, uint64_t *))off_1EE9F4E68[v34])(v28, &v33);
    }
    int v34 = -1;
    CFTypeRef v23 = cf;
    CFTypeRef cf = 0;
    if (v23) {
      CFRelease(v23);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v31);
    CFRelease(*((CFTypeRef *)v11 + 1));
  }
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::isConditionalMediationAvailable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = a2 + 8;
  uint64_t v6 = v4[4];
  v4 += 4;
  uint64_t v7 = (*(uint64_t (**)(void *))(v6 + 56))(v4);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1560;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v8, v5);
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F4FC8;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v4 + 40))(v4, &v17, v16, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::isUserVerifyingPlatformAuthenticatorAvailable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = a2 + 8;
  uint64_t v6 = v4[4];
  v4 += 4;
  uint64_t v7 = (*(uint64_t (**)(void *))(v6 + 56))(v4);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1558;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v8, v5);
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F4FF0;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v4 + 40))(v4, &v17, v16, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::cancel(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  uint64_t v4 = v3[4];
  v3 += 4;
  uint64_t v5 = (*(uint64_t (**)(void *))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1555;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  unsigned int v15 = v6;
  uint64_t v7 = *a2;
  *a2 = 0;
  uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v8 = &unk_1EE9F5018;
  v8[1] = v7;
  v14[0] = v8;
  v14[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v3 + 40))(v3, &v15, v14, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v15;
  unsigned int v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebAuthenticatorCoordinator::getClientCapabilities(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = a2 + 8;
  uint64_t v6 = v4[4];
  v4 += 4;
  uint64_t v7 = (*(uint64_t (**)(void *))(v6 + 56))(v4);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1557;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v8, v5);
  uint64_t v9 = *a3;
  *a3 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F5040;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(void *, IPC::Encoder **, void *, void))(*v4 + 40))(v4, &v17, v16, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

void WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry(WebKit::RemoteWebLockRegistry *this)
{
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((IPC::MessageReceiverMap *)(WebKit::WebProcess::singleton(void)::process + 48), (WebKit::RemoteWebLockRegistry *)((char *)this + 16));
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(v3 + 40);
      do
      {
        if (*(v5 - 3) != -1)
        {
          if (*v5) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(*v5, v2);
          }
          uint64_t v6 = *(v5 - 1);
          if (v6) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v6, v2);
          }
        }
        v5 += 6;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), v2);
  }
  *((void *)this + 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry(WebKit::RemoteWebLockRegistry *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::RemoteWebLockRegistry::~RemoteWebLockRegistry((WebKit::RemoteWebLockRegistry *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::requestLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, char a8, char a9, char a10, uint64_t *a11, uint64_t *a12)
{
  *(void *)&long long v72 = a4;
  *((void *)&v72 + 1) = a5;
  uint64_t v15 = *a12;
  *a12 = 0;
  uint64_t v16 = *a11;
  *a11 = 0;
  uint64_t v17 = (uint64_t *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand((uint64_t *)(a1 + 32), 0), (uint64_t v18 = *v17) != 0))
  {
    int v19 = *(_DWORD *)(v18 - 8);
  }
  else
  {
    int v19 = 0;
  }
  LODWORD(v74) = -1640531527;
  WORD2(v74) = 0;
  BYTE6(v74) = 0;
  WTF::addArgs<WTF::UUID>(&v74, a6);
  unsigned int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v74) & v19;
  uint64_t v22 = (void *)(v18 + 48 * v21);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v25 = v22[2];
  if (*(_OWORD *)v22 == 0 && v25 == 0)
  {
LABEL_25:
    long long v32 = *(_OWORD *)a6;
    _OWORD v22[2] = a6[2];
    *(_OWORD *)uint64_t v22 = v32;
    uint64_t v33 = v22[4];
    v22[4] = 0;
    if (v33) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v33, v20);
    }
    uint64_t v34 = v22[5];
    v22[5] = 0;
    if (v34) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v34, v20);
    }
    uint64_t v35 = *v17;
    if (*v17) {
      int v36 = *(_DWORD *)(v35 - 12) + 1;
    }
    else {
      int v36 = 1;
    }
    *(_DWORD *)(v35 - 12) = v36;
    uint64_t v37 = *v17;
    if (*v17) {
      int v38 = *(_DWORD *)(v37 - 12);
    }
    else {
      int v38 = 0;
    }
    uint64_t v39 = (*(_DWORD *)(v37 - 16) + v38);
    unint64_t v40 = *(unsigned int *)(v37 - 4);
    if (v40 > 0x400)
    {
      if (v40 > 2 * v39) {
        goto LABEL_38;
      }
    }
    else if (3 * v40 > 4 * v39)
    {
      goto LABEL_38;
    }
    uint64_t v22 = (void *)WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(v17, (uint64_t)v22);
    goto LABEL_38;
  }
  unint64_t v27 = 0;
  int v28 = 1;
  while (1)
  {
    BOOL v29 = v23 == a6[1] && v24 == *a6;
    if (v29 && v25 == a6[2]) {
      break;
    }
    if (v25 == -1) {
      unint64_t v27 = v22;
    }
    unsigned int v21 = (v21 + v28) & v19;
    uint64_t v22 = (void *)(v18 + 48 * v21);
    uint64_t v24 = *v22;
    uint64_t v23 = v22[1];
    uint64_t v25 = v22[2];
    ++v28;
    if (*(_OWORD *)v22 == 0 && v25 == 0)
    {
      if (v27)
      {
        *unint64_t v27 = 0;
        v27[1] = 0;
        void v27[2] = 0;
        v27[4] = 0;
        v27[5] = 0;
        --*(_DWORD *)(*v17 - 16);
        uint64_t v22 = v27;
      }
      goto LABEL_25;
    }
  }
LABEL_38:
  uint64_t v43 = v22[4];
  uint64_t v41 = v22 + 4;
  uint64_t v42 = v43;
  if (v43
    || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v41),
        (uint64_t v42 = *v41) != 0))
  {
    unsigned int v44 = *(_DWORD *)(v42 - 8);
  }
  else
  {
    unsigned int v44 = 0;
  }
  LODWORD(v74) = -1640531527;
  WORD2(v74) = 0;
  BYTE6(v74) = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>((unsigned int *)&v74, &v72);
  uint64_t v45 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v74) & v44;
  long long v46 = (unint64_t *)(v42 + 32 * v45);
  unint64_t v48 = *v46;
  unint64_t v47 = v46[1];
  if (*(_OWORD *)v46 != 0)
  {
    uint64_t v49 = 0;
    int v50 = 1;
    do
    {
      if (__PAIR128__(v47, v48) == v72)
      {
        uint64_t v59 = a3;
        goto LABEL_64;
      }
      if (v47 == -1) {
        uint64_t v49 = v46;
      }
      uint64_t v45 = (v45 + v50) & v44;
      long long v46 = (unint64_t *)(v42 + 32 * v45);
      unint64_t v48 = *v46;
      unint64_t v47 = v46[1];
      ++v50;
    }
    while (*(_OWORD *)v46 != 0);
    if (v49)
    {
      *(_OWORD *)uint64_t v49 = 0u;
      *((_OWORD *)v49 + 1) = 0u;
      --*(_DWORD *)(*v41 - 16);
      long long v46 = v49;
    }
  }
  *(_OWORD *)long long v46 = v72;
  unint64_t v51 = v46[2];
  v46[2] = v15;
  uint64_t v59 = a3;
  if (v51) {
    (*(void (**)(unint64_t))(*(void *)v51 + 8))(v51);
  }
  unint64_t v52 = v46[3];
  v46[3] = v16;
  if (v52) {
    (*(void (**)(unint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v53 = *v41;
  if (*v41) {
    int v54 = *(_DWORD *)(v53 - 12) + 1;
  }
  else {
    int v54 = 1;
  }
  *(_DWORD *)(v53 - 12) = v54;
  uint64_t v55 = *v41;
  if (*v41) {
    int v56 = *(_DWORD *)(v55 - 12);
  }
  else {
    int v56 = 0;
  }
  uint64_t v57 = (*(_DWORD *)(v55 - 16) + v56);
  unint64_t v58 = *(unsigned int *)(v55 - 4);
  if (v58 > 0x400)
  {
    if (v58 > 2 * v57) {
      goto LABEL_63;
    }
    goto LABEL_62;
  }
  if (3 * v58 <= 4 * v57) {
LABEL_62:
  }
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v41);
LABEL_63:
  uint64_t v15 = 0;
  uint64_t v16 = 0;
LABEL_64:
  {
    int v70 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v70);
  }
  uint64_t v60 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v61 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v61 = 1858;
  *((void *)v61 + 1) = 0;
  *((void *)v61 + 66) = (char *)v61 + 16;
  *((void *)v61 + 67) = 512;
  *((void *)v61 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v61 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v61 + 69) = 0;
  IPC::Encoder::encodeHeader(v61);
  long long v73 = v61;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v61, v59);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v61, (uint64_t *)&v72);
  uint64_t v74 = *((void *)&v72 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v61, &v74);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v61, a6);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v61, a7);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v61, a8);
  uint64_t v62 = (unsigned char *)IPC::Encoder::grow(v61, 1uLL, 1);
  if (!v63)
  {
    __break(0xC471u);
    JUMPOUT(0x1991AE030);
  }
  *uint64_t v62 = a9;
  uint64_t v64 = (unsigned char *)IPC::Encoder::grow(v61, 1uLL, 1);
  if (!v65)
  {
    __break(0xC471u);
    JUMPOUT(0x1991AE050);
  }
  *uint64_t v64 = a10;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v60 + 24) + 32))(v60 + 24, &v73, 0);
  uint64_t result = v73;
  long long v73 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v66);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v68, v69);
    if (!v16)
    {
LABEL_69:
      if (!v15) {
        return result;
      }
      return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
  }
  else if (!v16)
  {
    goto LABEL_69;
  }
  uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
  if (v15) {
    return (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::releaseLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  v29[0] = a4;
  v29[1] = a5;
  uint64_t v11 = (uint64_t *)(a1 + 32);
  uint64_t v12 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a6);
  uint64_t v13 = v12;
  uint64_t v14 = *(uint64_t **)(a1 + 32);
  if (v14) {
    v14 += 6 * *((unsigned int *)v14 - 1);
  }
  if (v14 == v12) {
    goto LABEL_22;
  }
  uint64_t v15 = v12 + 5;
  uint64_t v16 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v12 + 5, v29);
  uint64_t v17 = v13[5];
  if (v17)
  {
    uint64_t v18 = (uint64_t *)(v17 + 24 * *(unsigned int *)(v17 - 4));
    if (v18 == v16) {
      goto LABEL_11;
    }
  }
  else
  {
    if (!v16) {
      goto LABEL_11;
    }
    uint64_t v18 = 0;
  }
  if (v18 != v16) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v13 + 5, v16);
  }
LABEL_11:
  uint64_t v19 = v13[4];
  if ((!v19 || !*(_DWORD *)(v19 - 12)) && (!*v15 || !*(_DWORD *)(*v15 - 12)))
  {
    if (*v11)
    {
      uint64_t v20 = *v11 + 48 * *(unsigned int *)(*v11 - 4);
      if ((uint64_t *)v20 == v13) {
        goto LABEL_22;
      }
    }
    else
    {
      if (!v13) {
        goto LABEL_22;
      }
      uint64_t v20 = 0;
    }
    if ((uint64_t *)v20 != v13) {
      WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v11, v13);
    }
  }
LABEL_22:
  {
    unint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v27);
  }
  uint64_t v21 = WebKit::WebProcess::singleton(void)::process;
  v28[0] = a3;
  v28[1] = v29;
  void v28[2] = a6;
  v28[3] = a7;
  uint64_t v22 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v22 = 1857;
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 66) = (char *)v22 + 16;
  *((void *)v22 + 67) = 512;
  *((void *)v22 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v22 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v22 + 69) = 0;
  IPC::Encoder::encodeHeader(v22);
  uint64_t v30 = v22;
  IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,0ul,1ul,2ul,3ul>(v22, (uint64_t)v28);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v21 + 24) + 32))(v21 + 24, &v30, 0);
  uint64_t result = v30;
  uint64_t v30 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v23);
    return (IPC::Encoder *)WTF::fastFree(v25, v26);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::abortLockRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v25 = a4;
  *((void *)&v25 + 1) = a5;
  {
    uint64_t v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v11 = WebKit::WebProcess::singleton(void)::process + 24;
  v24[0] = a3;
  v24[1] = &v25;
  void v24[2] = a6;
  v24[3] = a7;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a1 + 24), a1 + 16);
  uint64_t v12 = *(atomic_uint **)(a1 + 24);
  if (v12) {
    atomic_fetch_add(v12, 1u);
  }
  long long v28 = v25;
  *(_OWORD *)&v29[8] = *(_OWORD *)a6;
  *(void *)&v29[24] = *(void *)(a6 + 16);
  uint64_t v13 = *a8;
  *a8 = 0;
  uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v14 = 1855;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v14 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  unint64_t v27 = v14;
  IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,0ul,1ul,2ul,3ul>(v14, (uint64_t)v24);
  uint64_t v15 = WTF::fastMalloc((WTF *)0x60);
  *(void *)uint64_t v15 = &unk_1EE9F5068;
  *(void *)(v15 + 16) = v12;
  long long v16 = *(_OWORD *)v29;
  *(_OWORD *)(v15 + ++*(_DWORD *)(this + 24) = v28;
  *(_OWORD *)(v15 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v16;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)&v29[16];
  *(void *)(v15 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v13;
  uint64_t v17 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  v26[0] = v15;
  v26[1] = v17;
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v11 + 40))(v11, &v27, v26, 0);
  uint64_t v19 = v26[0];
  v26[0] = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t result = v27;
  unint64_t v27 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v18);
    return (IPC::Encoder *)WTF::fastFree(v21, v22);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::snapshot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v6 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1859;
  *((void *)v7 + 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v17 = v7;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v7, a3);
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F5090;
  v9[1] = v8;
  v16[0] = v9;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v6 + 24) + 40))(v6 + 24, &v17, v16, 0);
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::RemoteWebLockRegistry::clientIsGoingAway(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (uint64_t *)(a1 + 32);
  uint64_t v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a4);
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9)
  {
    uint64_t v10 = (uint64_t *)(v9 + 48 * *(unsigned int *)(v9 - 4));
    if (v10 == v8) {
      goto LABEL_8;
    }
  }
  else
  {
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v10 = 0;
  }
  if (v10 != v8) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v7, v8);
  }
LABEL_8:
  {
    uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  uint64_t v11 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 1856;
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v12 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  uint64_t v18 = v12;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v12, a3);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(v12, a4);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v11 + 24) + 32))(v11 + 24, &v18, 0);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

void WebKit::RemoteWebLockRegistry::didCompleteLockRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = a3;
  uint64_t v9 = (uint64_t *)(a1 + 32);
  uint64_t v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a4);
  uint64_t v11 = v10;
  uint64_t v12 = *(uint64_t **)(a1 + 32);
  if (v12) {
    v12 += 6 * *((unsigned int *)v12 - 1);
  }
  if (v12 != v10)
  {
    uint64_t v13 = v10 + 4;
    uint64_t v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v10 + 4, &v39);
    uint64_t v15 = v14;
    long long v16 = (uint64_t *)v11[4];
    if (v16) {
      v16 += 4 * *((unsigned int *)v16 - 1);
    }
    if (v16 != v14)
    {
      uint64_t v18 = v14[2];
      uint64_t v17 = v14[3];
      void v14[2] = 0;
      v14[3] = 0;
      if (*v13)
      {
        uint64_t v19 = *v13 + 32 * *(unsigned int *)(*v13 - 4);
        if ((uint64_t *)v19 == v14) {
          goto LABEL_14;
        }
      }
      else
      {
        if (!v14) {
          goto LABEL_14;
        }
        uint64_t v19 = 0;
      }
      if ((uint64_t *)v19 != v14) {
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v11 + 4, v14);
      }
LABEL_14:
      if (!v17) {
        goto LABEL_48;
      }
      if (!a5)
      {
        if (*v13 && *(_DWORD *)(*v13 - 12)) {
          goto LABEL_47;
        }
        uint64_t v33 = v11[5];
        if (v33)
        {
          if (*(_DWORD *)(v33 - 12)) {
            goto LABEL_47;
          }
        }
        if (*v9)
        {
          uint64_t v34 = *v9 + 48 * *(unsigned int *)(*v9 - 4);
          if ((uint64_t *)v34 == v11) {
            goto LABEL_47;
          }
        }
        else
        {
          if (!v11) {
            goto LABEL_47;
          }
          uint64_t v34 = 0;
        }
        if ((uint64_t *)v34 != v11) {
          WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v9, v11);
        }
        goto LABEL_47;
      }
      uint64_t v22 = v11[5];
      uint64_t v20 = v11 + 5;
      uint64_t v21 = v22;
      if (v22
        || (WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v20),
            (uint64_t v21 = *v20) != 0))
      {
        int v23 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        int v23 = 0;
      }
      unsigned int v40 = -1640531527;
      __int16 v41 = 0;
      char v42 = 0;
      WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v40, &v39);
      unsigned int v24 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v40) & v23;
      long long v25 = (void *)(v21 + 24 * v24);
      uint64_t v27 = *v25;
      uint64_t v26 = v25[1];
      if (*(_OWORD *)v25 != 0)
      {
        long long v28 = 0;
        int v29 = 1;
        while (v27 != a2 || v26 != a3)
        {
          if (v26 == -1) {
            long long v28 = v25;
          }
          unsigned int v24 = (v24 + v29) & v23;
          long long v25 = (void *)(v21 + 24 * v24);
          uint64_t v27 = *v25;
          uint64_t v26 = v25[1];
          ++v29;
          if (*(_OWORD *)v25 == 0)
          {
            if (v28)
            {
              void *v28 = 0;
              v28[1] = 0;
              void v28[2] = 0;
              --*(_DWORD *)(*v20 - 16);
              long long v25 = v28;
            }
            goto LABEL_28;
          }
        }
        goto LABEL_47;
      }
LABEL_28:
      *(_OWORD *)long long v25 = v39;
      uint64_t v30 = v25[2];
      void v25[2] = v18;
      if (v30) {
        (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      }
      uint64_t v31 = *v20;
      if (*v20) {
        int v32 = *(_DWORD *)(v31 - 12) + 1;
      }
      else {
        int v32 = 1;
      }
      *(_DWORD *)(v31 - 12) = v32;
      uint64_t v35 = *v20;
      if (*v20) {
        int v36 = *(_DWORD *)(v35 - 12);
      }
      else {
        int v36 = 0;
      }
      uint64_t v37 = (*(_DWORD *)(v35 - 16) + v36);
      unint64_t v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 > 2 * v37) {
          goto LABEL_46;
        }
      }
      else if (3 * v38 > 4 * v37)
      {
LABEL_46:
        uint64_t v18 = 0;
LABEL_47:
        (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, a5);
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
LABEL_48:
        if (v18) {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 8))(v18, v15);
        }
        return;
      }
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(v20);
      goto LABEL_46;
    }
  }
}

void WebKit::RemoteWebLockRegistry::didStealLock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v18[0] = a2;
  v18[1] = a3;
  uint64_t v5 = (uint64_t *)(a1 + 32);
  uint64_t v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(a1 + 32), a4);
  uint64_t v7 = v6;
  uint64_t v8 = *(uint64_t **)(a1 + 32);
  if (v8) {
    v8 += 6 * *((unsigned int *)v8 - 1);
  }
  if (v8 != v6)
  {
    uint64_t v9 = v6 + 5;
    uint64_t v10 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::RetainPtr<WKAnimationDelegate>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>,WTF::HashTraits<WTF::RetainPtr<WKAnimationDelegate>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v6 + 5, v18);
    uint64_t v11 = v10;
    uint64_t v12 = (uint64_t *)v7[5];
    if (v12) {
      v12 += 3 * *((unsigned int *)v12 - 1);
    }
    if (v12 != v10)
    {
      uint64_t v13 = v10[2];
      void v10[2] = 0;
      if (*v9)
      {
        uint64_t v14 = *v9 + 24 * *(unsigned int *)(*v9 - 4);
        if ((uint64_t *)v14 == v10) {
          goto LABEL_14;
        }
      }
      else
      {
        if (!v10) {
          goto LABEL_14;
        }
        uint64_t v14 = 0;
      }
      if ((uint64_t *)v14 != v10) {
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v7 + 5, v10);
      }
LABEL_14:
      if (!v13) {
        return;
      }
      uint64_t v15 = v7[4];
      if (v15 && *(_DWORD *)(v15 - 12) || *v9 && *(_DWORD *)(*v9 - 12)) {
        goto LABEL_27;
      }
      if (*v5)
      {
        uint64_t v16 = *v5 + 48 * *(unsigned int *)(*v5 - 4);
        if ((uint64_t *)v16 == v7) {
          goto LABEL_27;
        }
      }
      else
      {
        if (!v7)
        {
LABEL_27:
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 16))(v13, v11);
          uint64_t v17 = *(void (**)(uint64_t))(*(void *)v13 + 8);
          v17(v13);
          return;
        }
        uint64_t v16 = 0;
      }
      if ((uint64_t *)v16 != v7) {
        WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v5, v7);
      }
      goto LABEL_27;
    }
  }
}

void WebKit::WebServiceWorkerProvider::~WebServiceWorkerProvider(WebKit::WebServiceWorkerProvider *this)
{
  WebCore::ServiceWorkerProvider::~ServiceWorkerProvider(this);

  JUMPOUT(0x199740C10);
}

uint64_t WebKit::WebSharedWorkerObjectConnection::messageSenderDestinationID(WebKit::WebSharedWorkerObjectConnection *this)
{
  return 0;
}

uint64_t non-virtual thunk to'WebKit::WebSharedWorkerObjectConnection::messageSenderDestinationID(WebKit::WebSharedWorkerObjectConnection *this)
{
  return 0;
}

void WebKit::WebSharedWorkerProvider::~WebSharedWorkerProvider(WebKit::WebSharedWorkerProvider *this)
{
}

uint64_t WebKit::WebUserContentController::userContentExtensionBackend(WebKit::WebUserContentController *this)
{
  return (uint64_t)this + 96;
}

void WebKit::WebAuthenticatorCoordinator::~WebAuthenticatorCoordinator(unsigned int **this, void *a2)
{
}

{
  void *v3;
  uint64_t vars8;

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory(this + 1, a2);

  WTF::fastFree((WTF *)this, v3);
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore19SharedBufferBuilderEN3WTF3RefINS8_8FormDataENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSA_9UniqueRefINS8_13ResourceErrorEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, a2);
  }
  return result;
}

WTF::RefCountedBase *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore19SharedBufferBuilderEN3WTF3RefINS8_8FormDataENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSA_9UniqueRefINS8_13ResourceErrorEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::RefCountedBase **a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    return (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN7WebCore19SharedBufferBuilderEN3WTF3RefINS8_8FormDataENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSA_9UniqueRefINS8_13ResourceErrorEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnS9_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = *(WTF **)a2;
  *(void *)a2 = 0;
  if (result) {
    return (WTF *)std::default_delete<WebCore::ResourceError>::operator()[abi:sn180100](result, a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
    }
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
    }
  }
  return a1;
}

void WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::~BlobLoader(WebKit::WebServiceWorkerFetchTaskClient::BlobLoader *this)
{
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
  }

  JUMPOUT(0x199740C10);
}

unsigned int *WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::didReceiveData(WebKit::WebServiceWorkerFetchTaskClient::BlobLoader *this, const WebCore::SharedBuffer *a2)
{
  char v3 = 0;
  uint64_t v4 = *((void *)this + 1);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 13), (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
  if (v3) {
    MEMORY[0x19972E8D0](v4 + 13);
  }
  uint64_t result = *(unsigned int **)(v4 + 16);
  if (result)
  {
    if (*(unsigned char *)(v4 + 233))
    {
      uint64_t v11 = *((void *)a2 + 6);
      uint64_t v12 = (unsigned int *)a2;
      atomic_fetch_add((atomic_uint *volatile)a2, 1u);
      uint64_t v6 = *((void *)a2 + 6);
      uint64_t v13 = 0;
      uint64_t v14 = &v11;
      uint64_t v15 = v6;
      IPC::Connection::send<Messages::ServiceWorkerDownloadTask::DidReceiveData>((uint64_t)result, (uint64_t)&v14, *(void *)(v4 + 40));
    }
    else
    {
      uint64_t v11 = *((void *)a2 + 6);
      uint64_t v12 = (unsigned int *)a2;
      atomic_fetch_add((atomic_uint *volatile)a2, 1u);
      uint64_t v8 = *((void *)a2 + 6);
      uint64_t v13 = 0;
      uint64_t v14 = &v11;
      uint64_t v15 = v8;
      IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidReceiveData>((uint64_t)result, (uint64_t)&v14, *(void *)(v4 + 40));
    }
    uint64_t v9 = v13;
    uint64_t v13 = 0;
    if (v9) {
      WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v9);
    }
    uint64_t result = v12;
    uint64_t v12 = 0;
    if (result) {
      uint64_t result = WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v7);
    }
  }
  int v10 = 1;
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)(v4 + 13), (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 != 1) {
    return (unsigned int *)WTF::Lock::unlockSlow((WTF::Lock *)(v4 + 13));
  }
  return result;
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::didSucceed(WebKit::WebServiceWorkerFetchTaskClient::BlobLoader *this, const WebCore::NetworkLoadMetrics *a2)
{
  uint64_t v2 = *((void *)this + 1);
  WebCore::NetworkLoadMetrics::NetworkLoadMetrics((WebCore::NetworkLoadMetrics *)&v8);
  WebKit::WebServiceWorkerFetchTaskClient::didFinish((atomic_uchar *)v2, (const WebCore::NetworkLoadMetrics *)&v8);
  uint64_t v4 = v12;
  uint64_t v12 = 0;
  if (v4) {
    WTF::RefCounted<WebCore::AdditionalNetworkLoadMetricsForWebInspector>::deref(v4);
  }
  uint64_t v5 = v11;
  uint64_t v11 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v3);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  LOBYTE(v++*(_DWORD *)(this + 8) = 0;
  char v10 = 0;
  if (*(unsigned char *)(v2 + 72))
  {
    uint64_t v8 = &unk_1EE9F4DE8;
    long long v6 = *(_OWORD *)(v2 + 56);
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 64) = 0;
    long long v9 = v6;
    char v10 = 1;
  }
  std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100]((unsigned int *)(v2 + 48));
  return std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v8);
}

uint64_t WebKit::WebServiceWorkerFetchTaskClient::BlobLoader::didFail(atomic_uchar **this, const WebCore::ResourceError *a2)
{
  return WebKit::WebServiceWorkerFetchTaskClient::didFail(this[1], a2);
}

unsigned int *std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100](unsigned int *result)
{
  if (*((unsigned char *)result + 24))
  {
    uint64_t v1 = result;
    uint64_t result = (unsigned int *)*((void *)result + 2);
    *((void *)v1 + 2) = 0;
    if (result) {
      uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 64))(result);
    }
    uint64_t v2 = *((void *)v1 + 1);
    *((void *)v1 + 1) = 0;
    if (v2) {
      uint64_t result = WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
    }
    *((unsigned char *)v1 + ++*(_DWORD *)(this + 24) = 0;
  }
  return result;
}

uint64_t std::default_delete<WebCore::ResourceError>::operator()[abi:sn180100](WTF *this, WTF::StringImpl *a2)
{
  char v3 = (const void *)*((void *)this + 8);
  *((void *)this + ++*(_DWORD *)(this + 8) = 0;
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (WTF::StringImpl *)*((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  uint64_t v5 = (WTF::StringImpl *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, a2);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  long long v6 = *(WTF::StringImpl **)this;
  *(void *)this = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2) {
      WTF::StringImpl::destroy(v6, a2);
    }
    else {
      *(_DWORD *)v6 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *(void *)(v4 - 8);
        *(void *)(v4 - ++*(_DWORD *)(this + 8) = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::destruct(*(_DWORD **)a1, (_DWORD *)(*(void *)a1 + 16 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

_DWORD *WTF::VectorDestructor<true,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::destruct(_DWORD *result, _DWORD *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = (_DWORD *)*((void *)v3 + 1);
      *((void *)v3 + 1) = 0;
      if (result)
      {
        if (result[2] == 1) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        }
        else {
          --result[2];
        }
      }
      v3 += 4;
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = a1 + 8;
    do
    {
      if (*(void *)(v4 - 8) != -1)
      {
        WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *(void *)(v4 - 8);
        *(void *)(v4 - ++*(_DWORD *)(this + 8) = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 24;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct(*(WTF::StringImpl **)a1, (WTF::StringImpl *)(*(void *)a1 + 120 * v3));
  }
  uint64_t v4 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (_DWORD *)(a1 + 8);
    do
    {
      if (*((void *)v4 - 1) != -1)
      {
        WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
        uint64_t v5 = *((void *)v4 - 1);
        *((void *)v4 - 1) = 0;
        if (v5) {
          CFRelease(*(CFTypeRef *)(v5 + 8));
        }
      }
      v4 += 6;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_DWORD *WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(_DWORD *a1, void *a2)
{
  unsigned int v3 = a1[3];
  if (v3)
  {
    uint64_t v4 = 104 * v3;
    uint64_t v5 = (WebCore::UserScript *)(*(void *)a1 + 16);
    do
    {
      WebCore::UserScript::~UserScript(v5, a2);
      uint64_t v5 = (WebCore::UserScript *)(v6 + 104);
      v4 -= 104;
    }
    while (v4);
  }
  uint64_t v7 = *(WTF **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    a1[2] = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

uint64_t *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::HashMap(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  *a1 = 0;
  WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reserveInitialCapacity(a1, a3);
  if (a3)
  {
    uint64_t v6 = &a2[3 * a3];
    do
    {
      WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::add<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&>((uint64_t)v8, a1, a2, a2 + 1);
      a2 += 3;
    }
    while (a2 != v6);
  }
  return a1;
}

void WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::add<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  long long v25 = a4;
  uint64_t v7 = *a2;
  if (*a2
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, 0), (uint64_t v7 = *a2) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a3) & v8;
  char v10 = (uint64_t *)(v7 + 24 * v9);
  uint64_t v11 = *v10;
  uint64_t v12 = *a3;
  if (*v10)
  {
    uint64_t v21 = 0;
    int v22 = 1;
    do
    {
      if (v11 == v12)
      {
        uint64_t v23 = *a2;
        if (*a2) {
          unsigned int v24 = *(_DWORD *)(v23 - 4);
        }
        else {
          unsigned int v24 = 0;
        }
        char v20 = 0;
        uint64_t v19 = v23 + 24 * v24;
        goto LABEL_11;
      }
      if (v11 == -1) {
        uint64_t v21 = v10;
      }
      unsigned int v9 = (v9 + v22) & v8;
      char v10 = (uint64_t *)(v7 + 24 * v9);
      uint64_t v11 = *v10;
      ++v22;
    }
    while (*v10);
    if (v21)
    {
      *uint64_t v21 = 0;
      v21[1] = 0;
      void v21[2] = 0;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v12 = *a3;
      char v10 = v21;
    }
  }
  WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&>(WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&)::{lambda(void)#1}>((uint64_t)v10, v12, &v25);
  uint64_t v13 = *a2;
  if (*a2) {
    int v14 = *(_DWORD *)(v13 - 12) + 1;
  }
  else {
    int v14 = 1;
  }
  *(_DWORD *)(v13 - 12) = v14;
  uint64_t v15 = *a2;
  if (*a2) {
    int v16 = *(_DWORD *)(v15 - 12);
  }
  else {
    int v16 = 0;
  }
  uint64_t v17 = (*(_DWORD *)(v15 - 16) + v16);
  unint64_t v18 = *(unsigned int *)(v15 - 4);
  if (v18 > 0x400)
  {
    if (v18 > 2 * v17) {
      goto LABEL_10;
    }
LABEL_24:
    char v10 = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(a2, v10);
    uint64_t v15 = *a2;
    if (*a2) {
      LODWORD(v1++*(_DWORD *)(this + 8) = *(_DWORD *)(v15 - 4);
    }
    else {
      LODWORD(v1++*(_DWORD *)(this + 8) = 0;
    }
    goto LABEL_10;
  }
  if (3 * v18 <= 4 * v17) {
    goto LABEL_24;
  }
LABEL_10:
  uint64_t v19 = v15 + 24 * v18;
  char v20 = 1;
LABEL_11:
  *(void *)a1 = v10;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = v19;
  *(unsigned char *)(a1 + 16) = v20;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::reserveInitialCapacity(void *a1, unsigned int a2)
{
  unsigned int v3 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::computeBestTableSize(a2);
  uint64_t result = WTF::fastZeroedMalloc((WTF *)(24 * v3 + 16));
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = v3;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = v3 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = 0;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v5, a2);
}

void WTF::HashMapTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::translate<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableAddResult<WTF::HashTableIterator<WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>> WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::inlineAdd<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&>(WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int> const&)::{lambda(void)#1}>(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  *(void *)a1 = a2;
  int v4 = *a3;
  uint64_t v5 = **a3;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  int v6 = *((_DWORD *)v4 + 2);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = v5;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
  *(_DWORD *)(a1 + 16) = v6;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    char v10 = 0;
    uint64_t v11 = v5;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v16 = *a1;
          if (*a1) {
            int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            int v17 = 0;
          }
          unint64_t v18 = (v13 + ~(v13 << 32)) ^ ((unint64_t)(v13 + ~(v13 << 32)) >> 22);
          unint64_t v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
          unint64_t v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
          unsigned int v21 = v17 & ((v20 >> 31) ^ v20);
          int v22 = 1;
          do
          {
            unsigned int v23 = v21;
            unsigned int v24 = (uint64_t *)(v16 + 24 * v21);
            unsigned int v21 = (v21 + v22++) & v17;
          }
          while (*v24);
          unsigned int v25 = v23;
          uint64_t v26 = v16 + 24 * v23;
          uint64_t v29 = *(void *)(v26 + 8);
          long long v28 = (void *)(v26 + 8);
          uint64_t v27 = v29;
          void *v28 = 0;
          if (v29) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          *unsigned int v24 = *v12;
          uint64_t v30 = v4 + 24 * v9;
          uint64_t v31 = *(void *)(v30 + 8);
          *(void *)(v30 + ++*(_DWORD *)(this + 8) = 0;
          void *v28 = v31;
          *(_DWORD *)(v16 + 24 * v25 + 16) = *(_DWORD *)(v30 + 16);
          uint64_t v32 = *(void *)(v30 + 8);
          *(void *)(v30 + ++*(_DWORD *)(this + 8) = 0;
          if (v32) {
            CFRelease(*(CFTypeRef *)(v32 + 8));
          }
          if (v12 == a3) {
            char v10 = v24;
          }
        }
        else
        {
          uint64_t v14 = v4 + 24 * v9;
          uint64_t v15 = *(void *)(v14 + 8);
          *(void *)(v14 + ++*(_DWORD *)(this + 8) = 0;
          if (v15) {
            CFRelease(*(CFTypeRef *)(v15 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    char v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

void WebKit::WebUserMessageHandlerDescriptorProxy::~WebUserMessageHandlerDescriptorProxy(WebKit::WebUserMessageHandlerDescriptorProxy *this)
{
  WebKit::WebUserMessageHandlerDescriptorProxy::~WebUserMessageHandlerDescriptorProxy(this);

  WTF::fastFree(v1, v2);
}

{
  _DWORD *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE9F4E28;
  uint64_t v2 = (_DWORD *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2)
  {
    if (v2[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v2 + 8))(v2);
    }
    else {
      --v2[2];
    }
  }

  MEMORY[0x1F4171B90](this);
}

void WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    if (v6)
    {
      WebKit::WebFrame::fromCoreFrame(v6, &v34);
      uint64_t v9 = (CFTypeRef *)v34;
      if (v34)
      {
        uint64_t v10 = *(void *)(v34 + 24);
        if (v10)
        {
          uint64_t v11 = *(void *)(v10 + 8);
          if (v11)
          {
            uint64_t v12 = *(void *)(v11 + 24);
            if (v12)
            {
              uint64_t v13 = *(void *)(v12 + 8);
              if (v13)
              {
                uint64_t v14 = *(void **)(*(void *)(v13 + 48) + 16);
                if (((*(uint64_t (**)(void *))(*v14 + 1368))(v14) & 1) == 0)
                {
                  uint64_t v15 = *(void *)(v14[2] + 8);
                  if (v15)
                  {
                    CFRetain(*(CFTypeRef *)(v15 - 8));
                    uint64_t v16 = *a4;
                    *a4 = 0;
                    {
                      uint64_t v32 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                      WebKit::WebProcess::WebProcess(v32);
                    }
                    int v17 = *(os_unfair_lock_s **)(WebKit::WebProcess::singleton(void)::process + 40);
                    uint64_t v33 = *(void *)(v15 + 2104);
                    WebKit::WebFrame::info((WebKit::WebFrame *)v9, (uint64_t)v37);
                    unint64_t v18 = (uint64_t *)(a1 + 40);
                    unint64_t v19 = *(const void **)(a3 + 8);
                    size_t v20 = *(unsigned int *)(a3 + 20);
                    uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 64);
                    int v22 = (void *)WTF::fastMalloc((WTF *)0x10);
                    *int v22 = &unk_1EE9F4E50;
                    v22[1] = v16;
                    uint64_t v23 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
                    unsigned int v24 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                    *(_WORD *)unsigned int v24 = 2852;
                    *((void *)v24 + 1) = v21;
                    *((void *)v24 + 66) = (char *)v24 + 16;
                    *((void *)v24 + 67) = 512;
                    *((void *)v24 + 6++*(_DWORD *)(this + 8) = 0;
                    *((void *)v24 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
                    *((void *)v24 + 69) = 0;
                    IPC::Encoder::encodeHeader(v24);
                    int v36 = v24;
                    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, &v33);
                    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v24, v37);
                    IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v24, v18);
                    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v24, v19, v20);
                    v35[0] = (uint64_t)v22;
                    v35[1] = v23;
                    IPC::Connection::sendMessageWithAsyncReply(v17, &v36, v35, 0, 0);
                    uint64_t v26 = v35[0];
                    v35[0] = 0;
                    if (v26) {
                      (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
                    }
                    uint64_t v27 = v36;
                    int v36 = 0;
                    if (v27)
                    {
                      IPC::Encoder::~Encoder(v27, v25);
                      WTF::fastFree(v30, v31);
                    }
                    long long v28 = v42;
                    char v42 = 0;
                    if (v28)
                    {
                      if (*(_DWORD *)v28 == 2) {
                        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v25);
                      }
                      else {
                        *(_DWORD *)v28 -= 2;
                      }
                    }
                    if (v41 != -1) {
                      ((void (*)(uint64_t *, uint64_t *))off_1EE9F4E68[v41])(v35, &v40);
                    }
                    int v41 = -1;
                    CFTypeRef v29 = cf;
                    CFTypeRef cf = 0;
                    if (v29) {
                      CFRelease(v29);
                    }
                    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v38);
                    CFRelease(*(CFTypeRef *)(v15 - 8));
                  }
                }
              }
            }
          }
        }
        CFRelease(v9[1]);
      }
    }
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4E50;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4E50;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1} &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (unsigned int *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>>(a2, v6);
    if (v8)
    {
      uint64_t result = (WTF::StringImpl *)WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}::operator()(v2, v6[0], (WTF *)v6[1], &v7);
      if (v8)
      {
        uint64_t result = v7;
        uint64_t v7 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2) {
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
          }
          else {
            *(_DWORD *)result -= 2;
          }
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(v2);
    }
  }
  else
  {
    unsigned int v5 = (unsigned int *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(v5);
  }
  return result;
}

WTF::StringImpl *IPC::Connection::cancelReply<Messages::WebUserContentControllerProxy::DidPostMessage,WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}>(unsigned int *a1)
{
  uint64_t v3 = 0;
  WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}::operator()(a1, 0, 0, &v3);
  uint64_t result = v3;
  uint64_t v3 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Decoder *IPC::Decoder::decode<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[24])
  {
    uint64_t v5 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = (IPC::Decoder *)*((void *)a1 + 3);
    if (result && v5 != 0)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (IPC::Decoder *)v7();
    }
  }
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (IPC::Decoder *)IPC::Decoder::decode<std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5);
  if (v5[16]) {
    return IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>(a1, (uint64_t)v5, (uint64_t)a2);
  }
  *a2 = 0;
  a2[24] = 0;
  return result;
}

IPC::Decoder *IPC::ArgumentCoder<std::tuple<std::span<unsigned char const,18446744073709551615ul>,WTF::String>,void>::decode<IPC::Decoder,std::span<unsigned char const,18446744073709551615ul>>@<X0>(IPC::Decoder *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::String>(a1, (uint64_t)&v7);
  char v6 = v8;
  if (!v8)
  {
    *(unsigned char *)a3 = 0;
    goto LABEL_5;
  }
  if (*(unsigned char *)(a2 + 16))
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = v7;
    char v6 = 1;
LABEL_5:
    *(unsigned char *)(a3 + ++*(_DWORD *)(this + 24) = v6;
    return result;
  }
  __break(1u);
  return result;
}

unsigned int *WebKit::WebUserMessageHandlerDescriptorProxy::didPostMessage(WebCore::UserMessageHandler &,WebCore::SerializedScriptValue *,WTF::Function<void ()(WebCore::SerializedScriptValue *,WTF::String const&)> &&)::{lambda(std::span<unsigned char const,18446744073709551615ul>,WTF::String const&)#1}::operator()(unsigned int *result, char *a2, WTF *this, void *a4)
{
  uint64_t v4 = result;
  if (*a4)
  {
    uint64_t v5 = *(uint64_t (**)(void))(**(void **)result + 16);
    return (unsigned int *)v5();
  }
  else
  {
    char v6 = this;
    uint64_t v14 = 0;
    int v15 = 0;
    int v16 = (int)this;
    if (this)
    {
      if ((unint64_t)this >> 32)
      {
        __break(0xC471u);
        return result;
      }
      char v8 = (WTF::StringImpl *)WTF::fastMalloc(this);
      int v15 = (int)v6;
      uint64_t v14 = v8;
      do
      {
        char v9 = *a2++;
        *(unsigned char *)char v8 = v9;
        char v8 = (WTF::StringImpl *)((char *)v8 + 1);
        char v6 = (WTF *)((char *)v6 - 1);
      }
      while (v6);
    }
    WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v17);
    uint64_t v11 = v14;
    if (v14)
    {
      uint64_t v14 = 0;
      int v15 = 0;
      WTF::fastFree(v11, v10);
    }
    uint64_t v14 = 0;
    (*(void (**)(void, unsigned int *, WTF::StringImpl **))(**(void **)v4 + 16))(*(void *)v4, v17, &v14);
    uint64_t v13 = v14;
    uint64_t v14 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t result = v17;
    int v17 = 0;
    if (result) {
      return WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(result);
    }
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 16);
    do
    {
      if (*(v4 - 1) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int *)(a1 - 4);
  if (v3)
  {
    uint64_t v4 = (uint64_t *)(a1 + 24);
    do
    {
      if (*(v4 - 2) != -1)
      {
        uint64_t v5 = *v4;
        *uint64_t v4 = 0;
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        uint64_t v6 = *(v4 - 1);
        *(v4 - 1) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

IPC::Encoder *IPC::Connection::send<Messages::ServiceWorkerDownloadTask::DidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1457;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<IPC::SharedBufferReference const&,unsigned long long>,0ul,1ul>(v6, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::ServiceWorkerFetchTask::DidReceiveData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1462;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<std::tuple<IPC::SharedBufferReference const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<IPC::SharedBufferReference const&,unsigned long long>,0ul,1ul>(v6, a2);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>> &&)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F4E88;
  uint64_t v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = a1[2];
  a1[2] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F4E88;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  uint64_t v4 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::ServiceWorkerFetch::Client,(WTF::DestructionThread)1>::deref((unsigned int *)(v4 + 8));
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::didReceiveFormDataAndFinishInternal(WTF::Ref<WebCore::FormData,WTF::RawPtrTraits<WebCore::FormData>,WTF::DefaultRefDerefTraits<WebCore::FormData>> &&)::$_0,void>::call(WebCore::SWContextManager *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  WebCore::SWContextManager::singleton(a1);
  uint64_t v2 = WebCore::SWContextManager::serviceWorkerThreadProxy();
  if (v2)
  {
    uint64_t v3 = (atomic_uchar **)(v2 + 8);
    WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<IPC::WorkQueueMessageReceiver,(WTF::DestructionThread)0>::ref((atomic_uchar *volatile *)(v2 + 8));
    std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100]((unsigned int *)(v1 + 48));
    *(void *)(v1 + 4++*(_DWORD *)(this + 8) = &unk_1EE9F4DE8;
    *(void *)(v1 + 56) = v1;
    atomic_fetch_add((atomic_uint *volatile)(v1 + 8), 1u);
    *(void *)(v1 + 64) = 0;
    *(unsigned char *)(v1 + 72) = 1;
    BlobLoader = (WTF::StringImpl *)WebCore::ServiceWorkerThreadProxy::createBlobLoader();
    if (!v15)
    {
      std::__optional_destruct_base<WebKit::WebServiceWorkerFetchTaskClient::BlobLoader,false>::reset[abi:sn180100]((unsigned int *)(v1 + 48));
      WebCore::createInternalError();
      WebKit::WebServiceWorkerFetchTaskClient::didFail((atomic_uchar *)v1, (const WebCore::ResourceError *)&v16);
      CFTypeRef v8 = cf;
      CFTypeRef cf = 0;
      if (v8) {
        CFRelease(v8);
      }
      char v9 = v18;
      unint64_t v18 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v7);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t v10 = v17;
      int v17 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2) {
          WTF::StringImpl::destroy(v10, v7);
        }
        else {
          *(_DWORD *)v10 -= 2;
        }
      }
      uint64_t v11 = v16;
      int v16 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2) {
          WTF::StringImpl::destroy(v11, v7);
        }
        else {
          *(_DWORD *)v11 -= 2;
        }
      }
      return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*v3);
    }
    if (*(unsigned char *)(v1 + 72))
    {
      uint64_t v6 = *(void *)(v1 + 64);
      *(void *)(v1 + 64) = v15;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 64))(v6);
      }
      return (WTF::StringImpl *)WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::ServiceWorkerThreadProxy,(WTF::DestructionThread)1>(*v3);
    }
    __break(1u);
LABEL_28:
    WTF::StringImpl::destroy(BlobLoader, v5);
    goto LABEL_29;
  }
  WebCore::createInternalError();
  WebKit::WebServiceWorkerFetchTaskClient::didFail((atomic_uchar *)v1, (const WebCore::ResourceError *)&v16);
  CFTypeRef v13 = cf;
  CFTypeRef cf = 0;
  if (v13) {
    CFRelease(v13);
  }
  BlobLoader = v18;
  unint64_t v18 = 0;
  if (!BlobLoader) {
    goto LABEL_29;
  }
  if (*(_DWORD *)BlobLoader == 2) {
    goto LABEL_28;
  }
  *(_DWORD *)BlobLoader -= 2;
LABEL_29:
  uint64_t v14 = v17;
  int v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      WTF::StringImpl::destroy(v14, v5);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  uint64_t result = v16;
  int v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebServiceWorkerFetchTaskClient::cleanup(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = WebCore::SWContextManager::singleton((WebCore::SWContextManager *)a1);
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);

  return MEMORY[0x1F416EA58](v2, v3, v4, v5, v6);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSharedWorkerContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4ED8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSharedWorkerContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4ED8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::EstablishSharedWorkerContextConnection,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::WorkerOptions &&,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F4F00;
  uint64_t v4 = (WTF *)a1[1];
  uint64_t v2 = a1 + 1;
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::WorkerOptions &&,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::~CallableWrapper(WTF *this)
{
  *(void *)this = &unk_1EE9F4F00;
  uint64_t v4 = (WTF *)*((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  void *v2 = 0;
  if (v4) {
    std::default_delete<WebKit::WebPageInspectorTargetFrontendChannel>::operator()[abi:sn180100]((int)v2, v3);
  }

  return WTF::fastFree(this, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebSharedWorkerContextManagerConnection::launchSharedWorker(WebCore::ClientOrigin &&,WTF::ObjectIdentifierGeneric<WebCore::SharedWorkerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WebCore::WorkerOptions &&,WebCore::WorkerFetchResult &&,WebCore::WorkerInitializationData &&)::$_0,WTF::UniqueRef<WebCore::LocalFrameLoaderClient>,WebCore::LocalFrame &>::call@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 8);
  *(void *)(result + ++*(_DWORD *)(this + 8) = 0;
  *a2 = v2;
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  if (!*a1) {
    return 0;
  }
  uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(a1, a2);
  uint64_t v4 = *a1;
  if (!result)
  {
    if (v4) {
      return (uint64_t *)(v4 + 24 * *(unsigned int *)(v4 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<std::pair<WTF::Ref<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,unsigned int>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v4 = *(_DWORD *)(v2 - 8);
  unsigned int v5 = WTF::ObjectIdentifierGenericBaseHash<unsigned long long>::hash(a2) & v4;
  uint64_t result = (uint64_t *)(v2 + 24 * v5);
  uint64_t v7 = *result;
  if (*result != *a2)
  {
    int v8 = 1;
    while (v7)
    {
      unsigned int v5 = (v5 + v8) & v4;
      uint64_t result = (uint64_t *)(v2 + 24 * v5);
      uint64_t v7 = *result;
      ++v8;
      if (*result == *a2) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebUserContentController::addContentWorlds(WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ContentWorldIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)::$_0,void,WebCore::Page &>::call(uint64_t a1, WebCore::Page *this)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = WebCore::Page::userContentProvider(this);
  if (result == v4)
  {
    uint64_t v6 = *((void *)this + 20);
    if (v6)
    {
      do
      {
        if (!*(unsigned char *)(v6 + 144)) {
          (*(void (**)(void, void))(**(void **)(*(void *)(v6 + 280) + 16) + 1000))(*(void *)(*(void *)(v6 + 280) + 16), *(void *)(**(void **)(a1 + 16) + 24));
        }
        uint64_t result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v6 + 48), 0);
        uint64_t v6 = result;
      }
      while (result);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v5, a2);
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v5;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = (void *)(v15 + 24 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          unsigned int v24 = v22;
          unsigned int v25 = (void *)(v15 + 24 * v22 + 8);
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v8);
          uint64_t v27 = *v23;
          *uint64_t v23 = 0;
          if (v27) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          uint64_t v28 = *v12;
          *uint64_t v12 = 0;
          *uint64_t v23 = v28;
          uint64_t v29 = v4 + 24 * v9;
          *unsigned int v25 = 0;
          v25[1] = 0;
          uint64_t v30 = *(void *)(v29 + 8);
          v29 += 8;
          *(void *)uint64_t v29 = 0;
          *unsigned int v25 = v30;
          LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + ++*(_DWORD *)(this + 8) = 0;
          uint64_t v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v28;
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v26);
          uint64_t v32 = *v12;
          *uint64_t v12 = 0;
          if (v32) {
            CFRelease(*(CFTypeRef *)(v32 + 8));
          }
          if (v12 == a3) {
            uint64_t v10 = v23;
          }
        }
        else
        {
          WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          uint64_t v14 = *v12;
          *uint64_t v12 = 0;
          if (v14) {
            CFRelease(*(CFTypeRef *)(v14 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

_DWORD *WTF::VectorMover<false,std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>>::move(_DWORD *result, void *a2, void *a3)
{
  if (result != (_DWORD *)a2)
  {
    unsigned int v5 = result;
    do
    {
      *a3 = *v5;
      uint64_t v6 = v5[1];
      v5[1] = 0;
      a3[1] = v6;
      uint64_t result = (_DWORD *)v5[1];
      v5[1] = 0;
      if (result)
      {
        if (result[2] == 1) {
          uint64_t result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)result + 8))(result);
        }
        else {
          --result[2];
        }
      }
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = -1;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t result = (void *)WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<WTF::ObjectIdentifierGeneric<WebKit::ScriptMessageHandlerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::RefPtr<WebKit::WebUserMessageHandlerDescriptorProxy,WTF::RawPtrTraits<WebKit::WebUserMessageHandlerDescriptorProxy>,WTF::DefaultRefDerefTraits<WebKit::WebUserMessageHandlerDescriptorProxy>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebUserContentController::addUserScriptInternal(WebKit::InjectedBundleScriptWorld &,std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::UserScript &&,WebKit::InjectUserScriptImmediately)::$_1,void,WebCore::Page &>::call(uint64_t a1, const WebCore::Frame **this)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t result = WebCore::Page::userContentProvider((WebCore::Page *)this);
  if (result == v4)
  {
    uint64_t v6 = this[20];
    if (v6 && *((unsigned char *)v6 + 144) == 0)
    {
      if (*(unsigned char *)(*(void *)(a1 + 16) + 81))
      {
        return WebCore::LocalFrame::injectUserScriptImmediately();
      }
      else
      {
        uint64_t v8 = (uint64_t)v6;
        do
        {
          if (!*(unsigned char *)(v8 + 144)) {
            WebCore::LocalFrame::injectUserScriptImmediately();
          }
          uint64_t result = WebCore::FrameTree::traverseNext((WebCore::FrameTree *)(v8 + 48), v6);
          uint64_t v8 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v4, a2);
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = v5;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = (void *)(v15 + 24 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          unsigned int v24 = v22;
          uint64_t v25 = v15 + 24 * v22 + 8;
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)v25, v8);
          uint64_t v27 = *v23;
          *uint64_t v23 = 0;
          if (v27) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          uint64_t v28 = *v12;
          *uint64_t v12 = 0;
          *uint64_t v23 = v28;
          uint64_t v29 = v4 + 24 * v9;
          *(void *)uint64_t v25 = 0;
          *(void *)(v25 + ++*(_DWORD *)(this + 8) = 0;
          uint64_t v30 = *(void *)(v29 + 8);
          v29 += 8;
          *(void *)uint64_t v29 = 0;
          *(void *)uint64_t v25 = v30;
          LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + ++*(_DWORD *)(this + 8) = 0;
          uint64_t v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v28;
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)v29, v26);
          uint64_t v32 = *v12;
          *uint64_t v12 = 0;
          if (v32) {
            CFRelease(*(CFTypeRef *)(v32 + 8));
          }
          if (v12 == a3) {
            unsigned int v10 = v23;
          }
        }
        else
        {
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((_DWORD *)(v4 + 24 * v9 + 8), v8);
          uint64_t v14 = *v12;
          *uint64_t v12 = 0;
          if (v14) {
            CFRelease(*(CFTypeRef *)(v14 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

unint64_t WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 104 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    unint64_t v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

void WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  if (*(unsigned int *)(a1 + 8) < a2)
  {
    if (a2 >= 0x2762763)
    {
      __break(0xC471u);
    }
    else
    {
      unint64_t v3 = *(WTF **)a1;
      uint64_t v4 = *(void *)a1 + 104 * *(unsigned int *)(a1 + 12);
      int v5 = 104 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(104 * a2));
      *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = (v5 & 0xFFFFFFF8) / 0x68;
      *(void *)a1 = v6;
      WTF::VectorMover<false,WebKit::WebUserScriptData>::move((uint64_t)v3, v4, v6);
      if (v3)
      {
        if (*(WTF **)a1 == v3)
        {
          *(void *)a1 = 0;
          *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
        }
        WTF::fastFree(v3, v7);
      }
    }
  }
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)a2;
  *(void *)a2 = -1;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t result = WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a2 + 2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserScriptIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserScript>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v5 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v4 = v5 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v5));
  }
  else {
    unsigned int v4 = 8;
  }
  return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v4, a2);
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastZeroedMalloc((WTF *)(24 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = v5;
    do
    {
      uint64_t v12 = (uint64_t *)(v4 + 24 * v9);
      uint64_t v13 = *v12;
      if (*v12 != -1)
      {
        if (v13)
        {
          uint64_t v15 = *a1;
          if (*a1) {
            int v16 = *(_DWORD *)(v15 - 8);
          }
          else {
            int v16 = 0;
          }
          unint64_t v17 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
          unint64_t v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
          unint64_t v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
          unsigned int v20 = v16 & ((v19 >> 31) ^ v19);
          int v21 = 1;
          do
          {
            unsigned int v22 = v20;
            uint64_t v23 = (void *)(v15 + 24 * v20);
            unsigned int v20 = (v20 + v21++) & v16;
          }
          while (*v23);
          unsigned int v24 = v22;
          uint64_t v25 = (void *)(v15 + 24 * v22 + 8);
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v25, v8);
          uint64_t v27 = *v23;
          *uint64_t v23 = 0;
          if (v27) {
            CFRelease(*(CFTypeRef *)(v27 + 8));
          }
          uint64_t v28 = *v12;
          *uint64_t v12 = 0;
          *uint64_t v23 = v28;
          uint64_t v29 = v4 + 24 * v9;
          *uint64_t v25 = 0;
          v25[1] = 0;
          uint64_t v30 = *(void *)(v29 + 8);
          v29 += 8;
          *(void *)uint64_t v29 = 0;
          *uint64_t v25 = v30;
          LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v29 + 8);
          *(_DWORD *)(v29 + ++*(_DWORD *)(this + 8) = 0;
          uint64_t v31 = v15 + 24 * v24;
          *(_DWORD *)(v31 + 16) = v28;
          LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v29 + 12);
          *(_DWORD *)(v29 + 12) = 0;
          *(_DWORD *)(v31 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v28;
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v29, v26);
          uint64_t v32 = *v12;
          *uint64_t v12 = 0;
          if (v32) {
            CFRelease(*(CFTypeRef *)(v32 + 8));
          }
          if (v12 == a3) {
            unsigned int v10 = v23;
          }
        }
        else
        {
          WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4 + 24 * v9 + 8, v8);
          uint64_t v14 = *v12;
          *uint64_t v12 = 0;
          if (v14) {
            CFRelease(*(CFTypeRef *)(v14 + 8));
          }
        }
      }
      ++v9;
    }
    while (v9 != v11);
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v10;
}

uint64_t std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>::pair[abi:sn180100](uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 16) = v4;
  WTF::URL::URL(a1 + 24, (uint64_t *)(a2 + 24));
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 64) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a1 + 72) = v5;
  LODWORD(v5) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = 0;
  *(_DWORD *)(a1 + 76) = v5;
  *(void *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(a1 + 8++*(_DWORD *)(this + 8) = 0;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a2 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(void *)(a1 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a2 + 8++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a1 + 8++*(_DWORD *)(this + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a2 + 92) = 0;
  *(_DWORD *)(a1 + 92) = v6;
  long long v7 = *(_OWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = v7;
  return a1;
}

unint64_t WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 > a3 || v5 + 120 * (unint64_t)a1[3] <= a3)
  {
    unint64_t v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10) {
      unint64_t v10 = v9 + 1;
    }
    else {
      unint64_t v10 = 16;
    }
    if (v10 > a2) {
      a2 = v10;
    }
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
  }
  else
  {
    uint64_t v6 = a3 - v5;
    unint64_t v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10) {
      unint64_t v8 = v7 + 1;
    }
    else {
      unint64_t v8 = 16;
    }
    if (v8 > a2) {
      a2 = v8;
    }
    WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((WTF::StringImpl *)a1, a2);
    return *(void *)a1 + v6;
  }
  return v3;
}

WTF::StringImpl *WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(WTF::StringImpl *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0x2222223)
    {
      __break(0xC471u);
      JUMPOUT(0x1991B1978);
    }
    uint64_t v2 = result;
    unint64_t v3 = *(WTF::StringImpl **)result;
    uint64_t v4 = (WTF::StringImpl *)(*(void *)result + 120 * *((unsigned int *)result + 3));
    int v5 = 120 * a2;
    uint64_t v6 = WTF::fastMalloc((WTF *)(120 * a2));
    *((_DWORD *)v2 + 2) = (v5 & 0xFFFFFFF8) / 0x78;
    *(void *)uint64_t v2 = v6;
    uint64_t result = WTF::VectorMover<false,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>>::move(v3, v4, v6);
    if (v3)
    {
      if (*(WTF::StringImpl **)v2 == v3)
      {
        *(void *)uint64_t v2 = 0;
        *((_DWORD *)v2 + 2) = 0;
      }
      return (WTF::StringImpl *)WTF::fastFree(v3, v7);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>>::move(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = (uint64_t)result;
    do
    {
      std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>::pair[abi:sn180100](a3, v5);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 80, v6);
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5 + 64, v7);
      unint64_t v9 = *(WTF::StringImpl **)(v5 + 24);
      *(void *)(v5 + ++*(_DWORD *)(this + 24) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2) {
          WTF::StringImpl::destroy(v9, v8);
        }
        else {
          *(_DWORD *)v9 -= 2;
        }
      }
      uint64_t result = *(WTF::StringImpl **)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
      a3 += 120;
      v5 += 120;
    }
    while ((WTF::StringImpl *)v5 != a2);
  }
  return result;
}

void *WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::remove(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = -1;
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
  uint64_t result = (void *)WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 1), a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return WTF::HashTable<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashMap<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>,WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>,WTF::HashTraits<WTF::Vector<std::pair<std::optional<WTF::ObjectIdentifierGeneric<WebKit::UserStyleSheetIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::UserStyleSheet>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::RefPtr<WebKit::InjectedBundleScriptWorld,WTF::RawPtrTraits<WebKit::InjectedBundleScriptWorld>,WTF::DefaultRefDerefTraits<WebKit::InjectedBundleScriptWorld>>>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return result;
}

unint64_t IPC::ArgumentCoder<WebCore::MediationRequirement,void>::encode<IPC::Encoder>(IPC::Encoder *a1, char a2)
{
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v4)
  {
    *(unsigned char *)unint64_t result = a2;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4F78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4F78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>>((uint64_t)v8, a2);
    if (v9[16])
    {
      uint64_t v4 = v8[160];
      uint64_t v5 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *, uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v8, v4, v9);
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v8, v6);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v8, v3);
      IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(v2);
    }
  }
  else
  {
    int v7 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(v7);
  }
}

void IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(uint64_t *a1)
{
  memset(v6, 0, sizeof(v6));
  v4[0] = 0;
  uint64_t v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, _OWORD *, void, unsigned char *))(*(void *)v1 + 16))(v1, v6, 0, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  uint64_t v3 = v5;
  uint64_t v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, v2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v6, v2);
}

void IPC::Decoder::decode<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>>(uint64_t a1, IPC::Decoder *a2)
{
  IPC::ArgumentCoder<WebCore::AuthenticatorResponseData,void>::decode(a2, v18);
  if (!v25)
  {
    uint64_t v5 = *(void **)a2;
    uint64_t v13 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v8 = (WTF::StringImpl *)*((void *)a2 + 3);
    if (v8) {
      BOOL v14 = v13 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (!v14) {
      goto LABEL_27;
    }
LABEL_20:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 184) = 0;
LABEL_21:
    uint64_t v15 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16 && v15)
    {
      unint64_t v17 = *(void (**)(void))(*(void *)v16 + 16);
      v17();
    }
    return;
  }
  while (1)
  {
    unsigned __int16 v4 = IPC::Decoder::decode<WebCore::GamepadHapticEffectType>((uint64_t *)a2);
    if (v4 <= 0xFFu)
    {
      int v6 = 0;
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 184) = 0;
      goto LABEL_11;
    }
    char v7 = v4;
    uint64_t v8 = IPC::Decoder::decode<WebCore::ExceptionData>((uint64_t *)a2, (uint64_t)v26);
    int v6 = v28;
    if (!v28)
    {
      *(unsigned char *)a1 = 0;
      goto LABEL_10;
    }
    if (v25) {
      break;
    }
    __break(1u);
LABEL_27:
    (*(void (**)(WTF::StringImpl *, void *))(*(void *)v8 + 16))(v8, v5);
    if (!v25) {
      goto LABEL_20;
    }
  }
  *(unsigned char *)a1 = v18[0];
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = v9;
  *(unsigned char *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (v20[80])
  {
    std::construct_at[abi:sn180100]<WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs,WebCore::AuthenticationExtensionsClientOutputs*>(a1 + 16, (uint64_t)v20);
    *(unsigned char *)(a1 + 96) = 1;
  }
  long long v10 = v21;
  long long v21 = 0u;
  *(_OWORD *)(a1 + 104) = v10;
  long long v11 = v22;
  long long v22 = 0u;
  *(_OWORD *)(a1 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v11;
  long long v12 = v23;
  long long v23 = 0u;
  *(_OWORD *)(a1 + 136) = v12;
  *(void *)&long long v12 = v24;
  uint64_t v24 = 0;
  *(void *)(a1 + 152) = v12;
  *(unsigned char *)(a1 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v7;
  *(unsigned char *)(a1 + 16++*(_DWORD *)(this + 8) = v26[0];
  int v6 = 1;
  *(void *)(a1 + 176) = v27;
LABEL_10:
  *(unsigned char *)(a1 + 184) = v6;
LABEL_11:
  if (v25)
  {
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData((WebCore::AuthenticatorResponseData *)v18, v5);
    int v6 = *(unsigned __int8 *)(a1 + 184);
  }
  if (!v6) {
    goto LABEL_21;
  }
}

WebCore::AuthenticatorResponseData *std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100](WebCore::AuthenticatorResponseData *this, WTF::StringImpl *a2)
{
  if (*((unsigned char *)this + 184))
  {
    uint64_t v3 = (WTF::StringImpl *)*((void *)this + 22);
    *((void *)this + 22) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WebCore::AuthenticatorResponseData::~AuthenticatorResponseData(this, a2);
  }
  return this;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetAssertion,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4FA0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetAssertion,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4FA0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetAssertion,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)> &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>)#1},void,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>>((uint64_t)v8, a2);
    if (v9[16])
    {
      uint64_t v4 = v8[160];
      uint64_t v5 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *, uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v8, v4, v9);
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v8, v6);
    }
    else
    {
      std::__optional_destruct_base<std::tuple<WebCore::AuthenticatorResponseData,WebCore::AuthenticatorAttachment,WebCore::ExceptionData>,false>::~__optional_destruct_base[abi:sn180100]((WebCore::AuthenticatorResponseData *)v8, v3);
      IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(v2);
    }
  }
  else
  {
    char v7 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::MakeCredential,WTF::CompletionHandler<void ()(WebCore::AuthenticatorResponseData &&,WebCore::AuthenticatorAttachment,WebCore::ExceptionData &&)>>(v7);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4FC8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4FC8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::isConditionalMediationAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::IsUserVerifyingPlatformAuthenticatorAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F4FF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::IsUserVerifyingPlatformAuthenticatorAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F4FF0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::IsUserVerifyingPlatformAuthenticatorAvailable,WTF::CompletionHandler<void ()(BOOL)>>(WTF::CompletionHandler<void ()(BOOL)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v5 + 16))(v5, v4 != 0);
      goto LABEL_7;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v8 = a2[3];
    if (v8 && v7) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v6);
    }
  }
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v5 + 16))(v5, 0);
LABEL_7:
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 8);

  return v9(v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5018;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5018;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::Cancel,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5040;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5040;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (!a2 || (unsigned __int16 v4 = *(void **)a2) == 0)
  {
    unsigned int v20 = (uint64_t *)(a1 + 8);
    return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v20);
  }
  unint64_t v5 = *((void *)a2 + 1);
  unint64_t v6 = ((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
  if (v5 < v6 || v5 - v6 <= 7)
  {
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v37 = *((void *)a2 + 3);
    if (v37)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 16))(v37);
        uint64_t v38 = *(void **)a2;
        uint64_t v39 = *((void *)a2 + 1);
        uint64_t v40 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v40)
        {
          if (v39) {
            (*(void (**)(uint64_t, void *))(*(void *)v40 + 16))(v40, v38);
          }
        }
      }
    }
    goto LABEL_40;
  }
  uint64_t v8 = (unint64_t *)((*((void *)a2 + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  *((void *)a2 + 2) = v8 + 1;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  if (v9 < 0x10000)
  {
    if (!v9)
    {
      unint64_t v18 = 0;
      uint64_t v19 = 0;
LABEL_27:
      uint64_t v44 = v19;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      char v48 = 1;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
      v47[0] = 0;
      v47[1] = 0;
      v45[0] = v18;
      v45[1] = v44;
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v22);
      char v46 = 1;
      uint64_t v23 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v23 + 16))(v23, v45);
      unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 8))(v23);
      if (v46) {
        return (WTF::StringImpl *)WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v24);
      }
      return result;
    }
    LODWORD(v5WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v9;
    uint64_t v52 = WTF::fastMalloc((WTF *)(16 * v9));
    while (1)
    {
      IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,BOOL>>((uint64_t)&v49, a2);
      if (!v51) {
        goto LABEL_39;
      }
      if (HIDWORD(v53) != v53) {
        break;
      }
      unint64_t v10 = WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)&v49);
      int v11 = HIDWORD(v53) + 1;
      uint64_t v12 = v52 + 16 * HIDWORD(v53);
      uint64_t v13 = *(void *)v10;
      *(void *)unint64_t v10 = 0;
      *(void *)uint64_t v12 = v13;
      *(unsigned char *)(v12 + ++*(_DWORD *)(this + 8) = *(unsigned char *)(v10 + 8);
      HIDWORD(v5WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v11;
      if (v51) {
        goto LABEL_16;
      }
LABEL_20:
      if (!--v9) {
        goto LABEL_21;
      }
    }
    int v14 = HIDWORD(v53) + 1;
    uint64_t v15 = v52 + 16 * HIDWORD(v53);
    uint64_t v16 = v49;
    uint64_t v49 = 0;
    *(void *)uint64_t v15 = v16;
    *(unsigned char *)(v15 + ++*(_DWORD *)(this + 8) = v50;
    HIDWORD(v5WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v14;
LABEL_16:
    unint64_t v17 = v49;
    uint64_t v49 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    goto LABEL_20;
  }
  do
  {
    IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,BOOL>>((uint64_t)&v49, a2);
    if (!v51)
    {
LABEL_39:
      WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
LABEL_40:
      uint64_t v31 = *(void **)a2;
      uint64_t v32 = *((void *)a2 + 1);
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v33 = *((void *)a2 + 3);
      if (v33 && v32)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v33 + 16))(v33, v31);
        uint64_t v34 = *(void **)a2;
        uint64_t v35 = *((void *)a2 + 1);
        uint64_t v36 = *((void *)a2 + 3);
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        if (v36)
        {
          if (v35) {
            (*(void (**)(uint64_t, void *))(*(void *)v36 + 16))(v36, v34);
          }
        }
      }
      else
      {
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
      }
      return (WTF::StringImpl *)IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(v2);
    }
    if (HIDWORD(v53) == v53)
    {
      unint64_t result = (WTF::StringImpl *)WTF::Vector<WebCore::ContentType,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v52, HIDWORD(v53) + 1, (unint64_t)&v49);
      int v25 = HIDWORD(v53) + 1;
      uint64_t v26 = v52 + 16 * HIDWORD(v53);
      uint64_t v27 = *(void *)result;
      *(void *)unint64_t result = 0;
      *(void *)uint64_t v26 = v27;
      *(unsigned char *)(v26 + ++*(_DWORD *)(this + 8) = *((unsigned char *)result + 8);
      HIDWORD(v5WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v25;
      if (!v51) {
        goto LABEL_37;
      }
    }
    else
    {
      int v28 = HIDWORD(v53) + 1;
      uint64_t v29 = v52 + 16 * HIDWORD(v53);
      uint64_t v30 = v49;
      uint64_t v49 = 0;
      *(void *)uint64_t v29 = v30;
      *(unsigned char *)(v29 + ++*(_DWORD *)(this + 8) = v50;
      HIDWORD(v5WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v28;
    }
    unint64_t result = v49;
    uint64_t v49 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        unint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v4);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
LABEL_37:
    --v9;
  }
  while (v9);
  uint64_t v41 = HIDWORD(v53);
  unint64_t v18 = (WTF *)v52;
  if (v53 <= HIDWORD(v53))
  {
LABEL_22:
    uint64_t v19 = v53;
    goto LABEL_27;
  }
  char v42 = (WTF *)v52;
  if (!HIDWORD(v53))
  {
LABEL_58:
    if (v18)
    {
      if (v42 == v18)
      {
        uint64_t v52 = 0;
        LODWORD(v5WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
      }
      WTF::fastFree(v18, v4);
LABEL_21:
      unint64_t v18 = (WTF *)v52;
    }
    else
    {
      unint64_t v18 = v42;
    }
    goto LABEL_22;
  }
  if (!(HIDWORD(v53) >> 28))
  {
    uint64_t v43 = WTF::fastMalloc((WTF *)(16 * HIDWORD(v53)));
    LODWORD(v5WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v41;
    uint64_t v52 = v43;
    char v42 = v18;
    if ((WTF *)v43 != v18)
    {
      WTF::VectorMover<false,WebCore::ContentType>::move(v18, (WTF *)((char *)v18 + 16 * v41), v43);
      char v42 = (WTF *)v52;
    }
    goto LABEL_58;
  }
  __break(0xC471u);
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::WebAuthenticatorCoordinatorProxy::GetClientCapabilities,WTF::CompletionHandler<void ()(WTF::Vector<WTF::KeyValuePair<WTF::String,BOOL>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>>(uint64_t *a1)
{
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  return WTF::Vector<WebCore::SpeechRecognitionAlternativeData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v4, v2);
}

IPC::Decoder *IPC::Decoder::decode<WTF::KeyValuePair<WTF::String,BOOL>>(uint64_t a1, IPC::Decoder *a2)
{
  unint64_t result = IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v19);
  if (v20)
  {
    unint64_t v5 = *((void *)a2 + 1);
    unint64_t v6 = *(WTF::StringImpl **)a2;
    unint64_t v7 = *((void *)a2 + 2) - *(void *)a2;
    if (v5 <= v7)
    {
      unint64_t v10 = 0;
      int v11 = 0;
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v12 = *((void *)a2 + 3);
      if (v12)
      {
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
          int v11 = *(WTF::StringImpl **)a2;
          unint64_t v10 = *((void *)a2 + 1);
        }
        else
        {
          unint64_t v10 = 0;
          int v11 = 0;
        }
      }
    }
    else
    {
      uint64_t v8 = (unsigned __int8 *)v6 + v7;
      *((void *)a2 + 2) = v8 + 1;
      if (v6)
      {
        unsigned int v9 = *v8;
        if (v9 < 2)
        {
          *(void *)a1 = v19;
          *(unsigned char *)(a1 + ++*(_DWORD *)(this + 8) = v9 != 0;
          *(unsigned char *)(a1 + 16) = 1;
          return result;
        }
        goto LABEL_10;
      }
      unint64_t v10 = v5;
      int v11 = 0;
    }
    unint64_t v5 = 0;
    unint64_t v6 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v13 = *((void *)a2 + 3);
    if (v13)
    {
      if (v10)
      {
        (*(void (**)(uint64_t, WTF::StringImpl *, unint64_t))(*(void *)v13 + 16))(v13, v11, v10);
        unint64_t v6 = *(WTF::StringImpl **)a2;
        unint64_t v5 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v5 = 0;
        unint64_t v6 = 0;
      }
    }
LABEL_10:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v14 = *((void *)a2 + 3);
    if (v14 && v5) {
      (*(void (**)(uint64_t, WTF::StringImpl *))(*(void *)v14 + 16))(v14, v6);
    }
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 16) = 0;
    if (v20)
    {
      uint64_t v15 = v19;
      uint64_t v19 = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2) {
          WTF::StringImpl::destroy(v15, v6);
        }
        else {
          *(_DWORD *)v15 -= 2;
        }
      }
    }
    goto LABEL_16;
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 16) = 0;
LABEL_16:
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  unint64_t result = (IPC::Decoder *)*((void *)a2 + 3);
  if (result) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (!v17)
  {
    unint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return (IPC::Decoder *)v18();
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    unint64_t v10 = (void *)(v7 + 48);
    do
    {
      *(v10 - 4) = 0;
      *(v10 - WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
      *(v10 - 2) = 0;
      void *v10 = 0;
      v10[1] = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = v4 + 48 * v11;
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14 != -1)
      {
        if (v14) {
          BOOL v15 = 0;
        }
        else {
          BOOL v15 = *(_OWORD *)v13 == 0;
        }
        if (v15)
        {
          uint64_t v18 = v4 + 48 * v11;
          uint64_t v19 = *(void *)(v18 + 40);
          if (v19) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v19, v8);
          }
          uint64_t v20 = *(void *)(v18 + 32);
          if (v20) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v20, v8);
          }
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v41 = -1640531527;
          __int16 v42 = 0;
          char v43 = 0;
          WTF::addArgs<WTF::UUID>(&v41, (void *)(v4 + 48 * v11));
          int v21 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v41);
          int v22 = 0;
          do
          {
            unsigned int v23 = v21 & v17;
            uint64_t v24 = v16 + 48 * (v21 & v17);
            int v21 = ++v22 + (v21 & v17);
          }
          while (*(_OWORD *)v24 != 0 || *(void *)(v24 + 16) != 0);
          uint64_t v26 = v16 + 48 * v23;
          uint64_t v29 = *(void *)(v26 + 40);
          int v28 = (uint64_t *)(v26 + 40);
          uint64_t v27 = v29;
          if (v29) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v27, v8);
          }
          uint64_t v30 = v28 - 1;
          uint64_t v31 = *(v28 - 1);
          if (v31) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v31, v8);
          }
          long long v32 = *(_OWORD *)(v13 + 16);
          *(_OWORD *)uint64_t v24 = *(_OWORD *)v13;
          *(_OWORD *)(v24 + 16) = v32;
          uint64_t v33 = v4 + 48 * v11;
          *uint64_t v30 = 0;
          uint64_t v35 = *(void *)(v33 + 32);
          uint64_t v34 = (uint64_t *)(v33 + 32);
          *uint64_t v34 = 0;
          *uint64_t v30 = v35;
          uint64_t *v28 = 0;
          uint64_t v36 = v34[1];
          v34[1] = 0;
          uint64_t *v28 = v36;
          uint64_t v37 = v34[1];
          if (v37) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v37, v8);
          }
          if (*v34) {
            WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(*v34, v8);
          }
          if (v13 == a3) {
            uint64_t v12 = v24;
          }
        }
      }
      ++v11;
    }
    while (v11 != v5);
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t result = 0;
    if (!v4) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v4 - 16), v8);
  return v12;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v3);
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 32 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    while (1)
    {
      uint64_t v12 = v4 + 32 * v11;
      if (*(void *)(v12 + 8) != -1)
      {
        if (*(_OWORD *)v12 == 0)
        {
          uint64_t v15 = v4 + 32 * v11;
          uint64_t v16 = *(void *)(v15 + 24);
          *(void *)(v15 + ++*(_DWORD *)(this + 24) = 0;
          if (v16) {
            (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
          }
          uint64_t v17 = *(void *)(v15 + 16);
          *(void *)(v15 + 16) = 0;
          if (!v17) {
            goto LABEL_27;
          }
        }
        else
        {
          uint64_t v13 = *a1;
          if (*a1) {
            unsigned int v14 = *(_DWORD *)(v13 - 8);
          }
          else {
            unsigned int v14 = 0;
          }
          unsigned int v29 = -1640531527;
          __int16 v30 = 0;
          char v31 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v29, (void *)(v4 + 32 * v11));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          int v19 = 0;
          do
          {
            uint64_t v20 = v18 & v14;
            uint64_t v21 = v13 + 32 * v20;
            int v18 = ++v19 + v20;
          }
          while (*(_OWORD *)v21 != 0);
          uint64_t v22 = *(void *)(v21 + 24);
          *(void *)(v21 + ++*(_DWORD *)(this + 24) = 0;
          if (v22) {
            (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
          }
          uint64_t v23 = *(void *)(v21 + 16);
          *(void *)(v21 + 16) = 0;
          if (v23) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v12;
          uint64_t v24 = v4 + 32 * v11;
          uint64_t v26 = *(void *)(v24 + 16);
          int v25 = (uint64_t *)(v24 + 16);
          *int v25 = 0;
          *(void *)(v21 + 16) = v26;
          uint64_t v27 = v25[1];
          v25[1] = 0;
          *(void *)(v21 + ++*(_DWORD *)(this + 24) = v27;
          uint64_t v28 = v25[1];
          v25[1] = 0;
          if (v28) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
          uint64_t v17 = *v25;
          *int v25 = 0;
          if (!v17) {
            goto LABEL_27;
          }
        }
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      }
LABEL_27:
      if (++v11 == v5) {
        goto LABEL_30;
      }
    }
  }
  if (v4)
  {
LABEL_30:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v20 = -1640531527;
  __int16 v21 = 0;
  char v22 = 0;
  WTF::addArgs<WTF::UUID>(&v20, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v20);
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  unsigned int v10 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 48 * (v6 & v5));
  uint64_t v12 = *result;
  uint64_t v13 = result[1];
  BOOL v14 = v13 == v8 && v12 == v7;
  uint64_t v15 = result[2];
  if (!v14 || v15 != v9)
  {
    int v17 = 1;
    while (v12 | v13 || v15)
    {
      unsigned int v10 = (v10 + v17) & v5;
      uint64_t result = (uint64_t *)(v2 + 48 * v10);
      uint64_t v12 = *result;
      uint64_t v13 = result[1];
      BOOL v18 = v13 == v8 && v12 == v7;
      uint64_t v15 = result[2];
      ++v17;
      if (v18 && v15 == v9) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 48 * *(unsigned int *)(*a1 - 4));
    }
    return 0;
  }
  return result;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  uint64_t v3 = a2[2];
  a2[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 12) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v8 >> 1);
    }
  }
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    unsigned int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    unsigned int v5 = 0;
    int v6 = 0;
  }
  uint64_t v7 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v9 = v7;
  uint64_t v10 = v7 + 16;
  if (a2) {
    bzero((void *)(v7 + 16), 24 * a2);
  }
  *a1 = v10;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v5;
    while (1)
    {
      uint64_t v13 = v4 + 24 * v11;
      if (*(void *)(v13 + 8) != -1)
      {
        if (*(_OWORD *)v13 != 0)
        {
          uint64_t v14 = *a1;
          if (*a1) {
            unsigned int v15 = *(_DWORD *)(v14 - 8);
          }
          else {
            unsigned int v15 = 0;
          }
          unsigned int v28 = -1640531527;
          __int16 v29 = 0;
          char v30 = 0;
          WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v28, (void *)(v4 + 24 * v11));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v28);
          int v19 = 0;
          do
          {
            unsigned int v20 = v18 & v15;
            __int16 v21 = (_OWORD *)(v14 + 24 * (v18 & v15));
            int v18 = ++v19 + (v18 & v15);
          }
          while (*v21 != 0);
          uint64_t v22 = v14 + 24 * v20;
          uint64_t v25 = *(void *)(v22 + 16);
          uint64_t v24 = (void *)(v22 + 16);
          uint64_t v23 = v25;
          *uint64_t v24 = 0;
          if (v25) {
            (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
          }
          *__int16 v21 = *(_OWORD *)v13;
          uint64_t v26 = v4 + 24 * v11;
          uint64_t v27 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          *uint64_t v24 = v27;
          uint64_t v17 = *(void *)(v26 + 16);
          *(void *)(v26 + 16) = 0;
          if (!v17) {
            goto LABEL_21;
          }
LABEL_20:
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
          goto LABEL_21;
        }
        uint64_t v16 = v4 + 24 * v11;
        uint64_t v17 = *(void *)(v16 + 16);
        *(void *)(v16 + 16) = 0;
        if (v17) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if (++v11 == v12) {
        goto LABEL_24;
      }
    }
  }
  if (v4)
  {
LABEL_24:
    WTF::fastFree((WTF *)(v4 - 16), v8);
  }
}

uint64_t WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = 1;
  a2[1] = 0;
  a2[2] = -1;
  uint64_t v4 = a2[5];
  if (v4) {
    WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(v4, a2);
  }
  uint64_t result = a2[4];
  if (result) {
    uint64_t result = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::deallocateTable(result, a2);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      return WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::rehash(a1, v10 >> 1, 0);
    }
  }
  return result;
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebCore::ProcessQualified<WTF::UUID> const&,WTF::String const&>,0ul,1ul,2ul,3ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(a1, *(void *)a2);
  uint64_t v4 = *(uint64_t **)(a2 + 8);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, v4);
  uint64_t v7 = v4[1];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(a1, &v7);
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::UUID>,void>::encode(a1, *(uint64_t **)(a2 + 16));
  unsigned int v5 = *(uint64_t **)(a2 + 24);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v5);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::AbortLockRequest,WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F5068;
  uint64_t v3 = a1[10];
  a1[10] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::AbortLockRequest,WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F5068;
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, a2);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::AbortLockRequest,WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0>(WebKit::RemoteWebLockRegistry::abortLockRequest(PAL::SessionID,WebCore::ClientOrigin const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebCore::ProcessQualified<WTF::UUID>,WTF::String const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(void *a1, uint64_t *a2)
{
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      char v5 = v4;
      uint64_t v6 = a1[2];
      if (!v6) {
        goto LABEL_36;
      }
      if (!(_BYTE)v4) {
        goto LABEL_36;
      }
      uint64_t v7 = *(void *)(v6 + 8);
      if (!v7) {
        goto LABEL_36;
      }
      uint64_t v8 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>,WebCore::ProcessQualified<WTF::UUID>>((uint64_t *)(v7 + 16), a1 + 6);
      unsigned int v9 = v8;
      uint64_t v10 = *(void *)(a1[2] + 8);
      if (v10) {
        uint64_t v11 = v10 - 16;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t **)(v11 + 32);
      if (v12) {
        v12 += 6 * *((unsigned int *)v12 - 1);
      }
      if (v12 == v8) {
        goto LABEL_36;
      }
      uint64_t v13 = v8 + 4;
      uint64_t v14 = WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(v8 + 4, a1 + 3);
      uint64_t v15 = v9[4];
      if (v15)
      {
        uint64_t v16 = (uint64_t *)(v15 + 32 * *(unsigned int *)(v15 - 4));
        if (v16 == v14) {
          goto LABEL_21;
        }
      }
      else
      {
        if (!v14) {
          goto LABEL_22;
        }
        uint64_t v16 = 0;
      }
      if (v16 != v14)
      {
        WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(v9 + 4, v14);
        uint64_t v15 = *v13;
      }
      if (v15)
      {
LABEL_21:
        if (*(_DWORD *)(v15 - 12)) {
          goto LABEL_36;
        }
      }
LABEL_22:
      uint64_t v17 = v9[5];
      if (v17 && *(_DWORD *)(v17 - 12)) {
        goto LABEL_36;
      }
      uint64_t v18 = a1[2];
      if (v18)
      {
        uint64_t v19 = *(void *)(v18 + 8);
        if (v19) {
          uint64_t v20 = v19 - 16;
        }
        else {
          uint64_t v20 = 0;
        }
      }
      else
      {
        uint64_t v20 = 0;
      }
      uint64_t v23 = *(void *)(v20 + 32);
      __int16 v21 = (uint64_t *)(v20 + 32);
      uint64_t v22 = v23;
      if (v23)
      {
        uint64_t v24 = (uint64_t *)(v22 + 48 * *(unsigned int *)(v22 - 4));
        if (v24 == v9) {
          goto LABEL_36;
        }
LABEL_34:
        if (v24 != v9) {
          WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WebKit::RemoteWebLockRegistry::LocksSnapshot,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebKit::RemoteWebLockRegistry::LocksSnapshot>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::remove(v21, v9);
        }
        goto LABEL_36;
      }
      if (v9)
      {
        uint64_t v24 = 0;
        goto LABEL_34;
      }
LABEL_36:
      BOOL v25 = v5 != 0;
      uint64_t v26 = a1[10];
      a1[10] = 0;
      (*(void (**)(uint64_t, BOOL))(*(void *)v26 + 16))(v26, v25);
      goto LABEL_39;
    }
    uint64_t v27 = *a2;
    uint64_t v28 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v29 = a2[3];
    if (v29 && v28) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 16))(v29, v27);
    }
  }
  uint64_t v26 = a1[10];
  a1[10] = 0;
  (*(void (**)(uint64_t, void))(*(void *)v26 + 16))(v26, 0);
LABEL_39:
  char v30 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 8);

  return v30(v26);
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  a2[1] = -1;
  uint64_t v4 = a2[3];
  a2[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = a2[2];
  a2[2] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v6 = *a1;
  if (*a1) {
    int v7 = *(_DWORD *)(v6 - 12) - 1;
  }
  else {
    int v7 = -1;
  }
  *(_DWORD *)(v6 - 12) = v7;
  uint64_t v8 = *a1;
  if (*a1)
  {
    unsigned int v9 = 6 * *(_DWORD *)(v8 - 12);
    unsigned int v10 = *(_DWORD *)(v8 - 4);
    if (v9 < v10 && v10 >= 9)
    {
      WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v10 >> 1);
    }
  }
}

uint64_t *WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockRequest,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockRequest>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v15 = -1640531527;
  __int16 v16 = 0;
  char v17 = 0;
  WTF::addArgs<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::PlatformLayerIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(&v15, a2);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  uint64_t v7 = a2[1];
  uint64_t v8 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 32 * v8);
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      uint64_t v8 = (v8 + v13) & v5;
      uint64_t result = (uint64_t *)(v2 + 32 * v8);
      uint64_t v10 = *result;
      uint64_t v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 32 * *(unsigned int *)(*a1 - 4));
    }
    return 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5090;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5090;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::ArgumentCoder<WebCore::WebLockManagerSnapshot,void>::decode(a2, (uint64_t)&v20);
    if (v24)
    {
      uint64_t v5 = v20;
      uint64_t v20 = 0;
      v18[0] = v5;
      uint64_t v6 = v21;
      uint64_t v21 = 0;
      v18[1] = v6;
      uint64_t v7 = v22;
      uint64_t v22 = 0;
      void v18[2] = v7;
      uint64_t v8 = v23;
      uint64_t v23 = 0;
      v18[3] = v8;
      char v19 = 1;
      WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v4);
      WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v9);
      uint64_t v10 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v10 + 16))(v10, v18);
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      return std::__optional_destruct_base<std::tuple<WebCore::WebLockManagerSnapshot>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v11);
    }
    uint64_t v14 = *(void **)a2;
    uint64_t v15 = *((void *)a2 + 1);
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v16 = *((void *)a2 + 3);
    if (v16)
    {
      if (v15)
      {
        (*(void (**)(uint64_t, void *))(*(void *)v16 + 16))(v16, v14);
        char v17 = *(void **)a2;
        uint64_t v15 = *((void *)a2 + 1);
        uint64_t v16 = *((void *)a2 + 3);
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v15 = 0;
    }
    char v17 = 0;
LABEL_12:
    LOBYTE(v18[0]) = 0;
    char v19 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    if (v16)
    {
      if (v15) {
        (*(void (**)(uint64_t, void *))(*(void *)v16 + 16))(v16, v17);
      }
    }
    std::__optional_destruct_base<std::tuple<WebCore::WebLockManagerSnapshot>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, v17);
    return IPC::Connection::cancelReply<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(v2);
  }
  int v13 = (uint64_t *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(v13);
}

uint64_t IPC::Connection::cancelReply<Messages::WebLockRegistryProxy::Snapshot,WTF::CompletionHandler<void ()(WebCore::WebLockManagerSnapshot &&)>>(uint64_t *a1)
{
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, long long *))(*(void *)v1 + 16))(v1, &v5);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v6, v2);
  return WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v5, v3);
}

uint64_t std::__optional_destruct_base<std::tuple<WebCore::WebLockManagerSnapshot>,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 16, a2);
    WTF::Vector<WebCore::ContentExtensions::RedirectAction::URLTransformAction::QueryTransform::QueryKeyValue,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1, v3);
  }
  return a1;
}

void WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  WTF::HashTable<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashMap<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WebKit::LockInfo,WTF::DefaultHash<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::HashTraits<WebKit::LockInfo>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::WebLockIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::rehash(a1, v3);
}

unsigned int *WebKit::toBackForwardListItemState@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = a2 + 24;
  *(void *)a2 = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  WebKit::FrameState::FrameState((WebKit::FrameState *)(a2 + 24));
  *(unsigned char *)(a2 + 272) = 0;
  *(void *)(a2 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(unsigned char *)(a2 + 28++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a2 + 296) = 0;
  *(void *)(a2 + 304) = 0;
  *(_OWORD *)a2 = *((_OWORD *)this + 21);
  long long v6 = (WTF::StringImpl **)WebCore::HistoryItem::title(this);
  WTF::String::left(v6, 0x3E8u, v14);
  uint64_t v8 = v14[0];
  v14[0] = 0;
  unsigned int v9 = *(WTF::StringImpl **)(a2 + 16);
  *(void *)(a2 + 16) = v8;
  if (v9)
  {
    int v10 = *(_DWORD *)v9 - 2;
    if (*(_DWORD *)v9 != 2)
    {
LABEL_3:
      *(_DWORD *)unsigned int v9 = v10;
      goto LABEL_4;
    }
    WTF::StringImpl::destroy(v9, v7);
    unsigned int v9 = v14[0];
    v14[0] = 0;
    if (v9)
    {
      int v10 = *(_DWORD *)v9 - 2;
      if (*(_DWORD *)v9 != 2) {
        goto LABEL_3;
      }
      WTF::StringImpl::destroy(v9, v13);
    }
  }
LABEL_4:
  WebKit::toFrameState(this, (uint64_t)v14);
  WebKit::FrameState::operator=(v5, (uint64_t)v14);
  WebKit::FrameState::~FrameState(v14);
  *(unsigned char *)(a2 + 272) = WebCore::HistoryItem::shouldOpenExternalURLsPolicy(this);
  uint64_t v11 = (atomic_uint *)*((void *)this + 21);
  if (v11) {
    atomic_fetch_add(v11, 1u);
  }
  uint64_t result = *(unsigned int **)(a2 + 280);
  *(void *)(a2 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v11;
  if (result) {
    uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(result);
  }
  *(unsigned char *)(a2 + 28++*(_DWORD *)(this + 8) = *((unsigned char *)this + 147);
  *(unsigned char *)(a2 + 296) = *((void *)this + 25) != 0;
  return result;
}

uint64_t WebKit::toFrameState@<X0>(WebKit *this@<X0>, uint64_t a2@<X8>)
{
  WebKit::FrameState::FrameState((WebKit::FrameState *)a2);
  uint64_t v5 = (WTF::StringImpl **)WebCore::HistoryItem::urlString(this);
  WTF::String::operator=((uint64_t *)a2, v5);
  long long v6 = (WTF::StringImpl **)WebCore::HistoryItem::originalURLString(this);
  WTF::String::operator=((uint64_t *)(a2 + 8), v6);
  uint64_t v7 = (WTF::StringImpl **)WebCore::HistoryItem::referrer(this);
  WTF::String::operator=((uint64_t *)(a2 + 16), v7);
  uint64_t v8 = (WTF::StringImpl **)WebCore::HistoryItem::target(this);
  WTF::String::operator=((uint64_t *)(a2 + 24), v8);
  *(_OWORD *)(a2 + ++*(_DWORD *)(this + 32) = *((_OWORD *)this + 3);
  *(unsigned char *)(a2 + 4++*(_DWORD *)(this + 8) = *((unsigned char *)this + 64);
  uint64_t v9 = WebCore::HistoryItem::documentState(this);
  WTF::Vector<WTF::AtomString,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(a2 + 232), v9);
  int v10 = (atomic_uint *)*((void *)this + 21);
  if (v10)
  {
    atomic_fetch_add(v10, 1u);
    std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>(a2 + 56, (uint64_t)(v10 + 2));
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref((unsigned int *)v10);
  }
  *(int8x16_t *)(a2 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = vextq_s8(*(int8x16_t *)((char *)this + 152), *(int8x16_t *)((char *)this + 152), 8uLL);
  *(void *)(a2 + 96) = *(void *)WebCore::HistoryItem::scrollPosition(this);
  *(unsigned char *)(a2 + 104) = WebCore::HistoryItem::shouldRestoreScrollPosition(this);
  WebCore::HistoryItem::pageScaleFactor(this);
  *(_DWORD *)(a2 + 10++*(_DWORD *)(this + 8) = v11;
  uint64_t v12 = WebCore::HistoryItem::formData(this);
  if (v12)
  {
    WebKit::toHTTPBody((WebKit *)v38, *(const WebCore::FormData **)(v12 + 8), *(_DWORD *)(v12 + 20));
    WebCore::HistoryItem::formContentType((uint64_t *)&v37, this);
    char v30 = v37;
    uint64_t v29 = v38[0];
    uint64_t v37 = 0;
    v38[0] = v30;
    if (v29)
    {
      int v31 = *(_DWORD *)v29 - 2;
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v28);
        uint64_t v29 = v37;
        uint64_t v37 = 0;
        if (!v29) {
          goto LABEL_20;
        }
        int v31 = *(_DWORD *)v29 - 2;
        if (*(_DWORD *)v29 == 2)
        {
          WTF::StringImpl::destroy(v29, v36);
          goto LABEL_20;
        }
      }
      *(_DWORD *)uint64_t v29 = v31;
    }
LABEL_20:
    std::optional<WebKit::HTTPBody>::operator=[abi:sn180100]<WebKit::HTTPBody,void>(a2 + 112, (uint64_t)v38);
    WebKit::HTTPBody::~HTTPBody(v38, v32);
  }
  long long v13 = *(_OWORD *)((char *)this + 228);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)((char *)this + 212);
  *(_OWORD *)(a2 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v13;
  *(void *)(a2 + 176) = *(void *)((char *)this + 244);
  *(void *)(a2 + 184) = *(void *)((char *)this + 252);
  *(unsigned char *)(a2 + 192) = *((unsigned char *)this + 280);
  *(_OWORD *)(a2 + 196) = *(_OWORD *)((char *)this + 260);
  uint64_t v14 = WebCore::HistoryItem::children(this);
  uint64_t v16 = *(unsigned int *)(v14 + 12);
  if (v16)
  {
    if (v16 < 0x1084211)
    {
      uint64_t v23 = v14;
      unsigned int v24 = 248 * v16;
      uint64_t v25 = WTF::fastMalloc((WTF *)(248 * v16));
      uint64_t v18 = v25;
      unsigned int v17 = v24 / 0xF8;
      unint64_t v26 = *(unsigned int *)(v23 + 12);
      if (!v26) {
        goto LABEL_6;
      }
      unint64_t v19 = 0;
      uint64_t v27 = v25;
      while (v19 < v26)
      {
        WebKit::toFrameState((uint64_t *)v38, *(WebKit **)(*(void *)v23 + 8 * v19), v15);
        WebKit::FrameState::FrameState(v27, (uint64_t *)v38);
        ++v19;
        WebKit::FrameState::~FrameState(v38);
        unint64_t v26 = *(unsigned int *)(v23 + 12);
        v27 += 248;
        if (v19 >= v26) {
          goto LABEL_7;
        }
      }
    }
    __break(0xC471u);
    JUMPOUT(0x1991B4758);
  }
  unsigned int v17 = 0;
  uint64_t v18 = 0;
LABEL_6:
  LODWORD(v19) = 0;
LABEL_7:
  uint64_t v20 = *(unsigned int *)(a2 + 228);
  if (v20)
  {
    uint64_t v33 = *(WTF::StringImpl ***)(a2 + 216);
    uint64_t v34 = 248 * v20;
    do
    {
      WebKit::FrameState::~FrameState(v33);
      uint64_t v33 = (WTF::StringImpl **)(v35 + 248);
      v34 -= 248;
    }
    while (v34);
  }
  uint64_t v21 = *(WTF **)(a2 + 216);
  if (v21)
  {
    *(void *)(a2 + 216) = 0;
    *(_DWORD *)(a2 + 2++*(_DWORD *)(this + 24) = 0;
    WTF::fastFree(v21, v15);
  }
  v38[0] = 0;
  v38[1] = 0;
  *(void *)(a2 + 216) = v18;
  *(_DWORD *)(a2 + 2++*(_DWORD *)(this + 24) = v17;
  *(_DWORD *)(a2 + 22++*(_DWORD *)(this + 8) = v19;
  return WTF::Vector<WebKit::FrameState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v15);
}

WTF::RefCountedBase *WebKit::toHistoryItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = a2 + 24;
  WTF::fastMalloc((WTF *)0x1D0);
  *a3 = MEMORY[0x19972FD50]();
  WebCore::HistoryItem::setShouldOpenExternalURLsPolicy();
  uint64_t v7 = *(atomic_uint **)(a2 + 280);
  if (v7) {
    atomic_fetch_add(v7, 1u);
  }
  uint64_t v9 = (unsigned int *)v7;
  WebCore::HistoryItem::setStateObject();
  if (v9) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v9);
  }
  return WebKit::applyFrameState(a1, *a3, v6);
}

WTF::RefCountedBase *WebKit::applyFrameState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebCore::HistoryItem::setOriginalURLString((WebCore::HistoryItem *)a2, (const WTF::String *)(a3 + 8));
  WebCore::HistoryItem::setReferrer((WebCore::HistoryItem *)a2, (const WTF::String *)(a3 + 16));
  WebCore::HistoryItem::setTarget((WebCore::HistoryItem *)a2, (const AtomString *)(a3 + 24));
  long long v6 = *(_OWORD *)(a3 + 32);
  *(unsigned char *)(a2 + 64) = *(unsigned char *)(a3 + 48);
  *(_OWORD *)(a2 + 4++*(_DWORD *)(this + 8) = v6;
  WebCore::HistoryItem::setDocumentState();
  if (*(unsigned char *)(a3 + 72))
  {
    uint64_t v7 = (WTF *)*(unsigned int *)(a3 + 68);
    uint64_t v37 = 0;
    int v38 = 0;
    int v39 = (int)v7;
    if (v7)
    {
      int v38 = (int)v7;
      uint64_t v37 = (WTF::StringImpl *)WTF::fastMalloc(v7);
      memcpy(v37, *(const void **)(a3 + 56), *(unsigned int *)(a3 + 68));
    }
    WebCore::SerializedScriptValue::createFromWireBytes((uint64_t *)&v35);
    uint64_t v8 = v35;
    uint64_t v35 = 0;
    uint64_t v36 = v8;
    WebCore::HistoryItem::setStateObject();
    int v10 = (unsigned int *)v36;
    uint64_t v36 = 0;
    if (v10) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v10);
    }
    int v11 = (unsigned int *)v35;
    uint64_t v35 = 0;
    if (v11) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v11);
    }
    uint64_t v12 = v37;
    if (v37)
    {
      uint64_t v37 = 0;
      int v38 = 0;
      WTF::fastFree(v12, v9);
    }
  }
  *(int8x16_t *)(a2 + 152) = vextq_s8(*(int8x16_t *)(a3 + 80), *(int8x16_t *)(a3 + 80), 8uLL);
  WebCore::HistoryItem::setScrollPosition((WebCore::HistoryItem *)a2, (const IntPoint *)(a3 + 96));
  WebCore::HistoryItem::setShouldRestoreScrollPosition((WebCore::HistoryItem *)a2);
  uint64_t result = (WTF::RefCountedBase *)WebCore::HistoryItem::setPageScaleFactor((WebCore::HistoryItem *)a2, *(float *)(a3 + 108));
  if (*(unsigned char *)(a3 + 136))
  {
    uint64_t v14 = (WebCore::FormData *)WebCore::HistoryItem::setFormContentType((WebCore::HistoryItem *)a2, (const WTF::String *)(a3 + 112));
    WebCore::FormData::create((uint64_t *)&v36, v14);
    uint64_t v15 = *(unsigned int *)(a3 + 132);
    if (v15)
    {
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)(a3 + 120);
      uint64_t v18 = 56 * v15;
      do
      {
        int v19 = *(_DWORD *)(v17 + v16 + 48);
        if (v19 == -1) {
          uint64_t v20 = -1;
        }
        else {
          uint64_t v20 = *(unsigned int *)(v17 + v16 + 48);
        }
        if (v20 == 2)
        {
          if (v19 != 2) {
            goto LABEL_46;
          }
          uint64_t v21 = v36;
          WTF::URL::URL((uint64_t)&v37, (WTF::StringImpl **)(v17 + v16));
          WebCore::FormData::appendBlob(v21, (const WTF::URL *)&v37);
          uint64_t v23 = v37;
          uint64_t v37 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2) {
              WTF::StringImpl::destroy(v23, v22);
            }
            else {
              *(_DWORD *)v23 -= 2;
            }
          }
        }
        else if (v20 == 1)
        {
          if (v19 != 1) {
            goto LABEL_46;
          }
          WebCore::FormData::appendFileRange();
        }
        else
        {
          if (v19)
          {
LABEL_46:
            uint64_t v33 = std::__throw_bad_variant_access[abi:sn180100]();
            return (WTF::RefCountedBase *)WebKit::createShareableBitmap(v33);
          }
          WebCore::FormData::appendData();
        }
        v16 += 56;
      }
      while (v18 != v16);
    }
    unsigned int v24 = v36;
    uint64_t v36 = 0;
    uint64_t v37 = v24;
    WebCore::HistoryItem::setFormData();
    uint64_t v25 = v37;
    uint64_t v37 = 0;
    if (v25) {
      WTF::RefCounted<WebCore::FormData>::deref(v25);
    }
    uint64_t result = v36;
    uint64_t v36 = 0;
    if (result) {
      uint64_t result = (WTF::RefCountedBase *)WTF::RefCounted<WebCore::FormData>::deref(result);
    }
  }
  *(_OWORD *)(a2 + 212) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 22++*(_DWORD *)(this + 8) = *(_OWORD *)(a3 + 160);
  *(void *)(a2 + 244) = *(void *)(a3 + 176);
  *(void *)(a2 + 252) = *(void *)(a3 + 184);
  *(unsigned char *)(a2 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = *(unsigned char *)(a3 + 192);
  *(_OWORD *)(a2 + 26IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = *(_OWORD *)(a3 + 196);
  uint64_t v26 = *(unsigned int *)(a3 + 228);
  if (v26)
  {
    uint64_t v27 = *(void *)(a3 + 216);
    uint64_t v28 = 248 * v26;
    do
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v29 = WTF::fastMalloc((WTF *)0x1D0);
      LOBYTE(v37) = 0;
      char v40 = 0;
      uint64_t v36 = (WebCore::HistoryItem *)MEMORY[0x19972FD50](v29, a1, v27, &v35, &v34, &v37);
      int v31 = v34;
      uint64_t v34 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 2) {
          WTF::StringImpl::destroy(v31, v30);
        }
        else {
          *(_DWORD *)v31 -= 2;
        }
      }
      long long v32 = v35;
      uint64_t v35 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2) {
          WTF::StringImpl::destroy(v32, v30);
        }
        else {
          *(_DWORD *)v32 -= 2;
        }
      }
      WebKit::applyFrameState(a1, v36, v27);
      WebCore::HistoryItem::addChildItem();
      uint64_t result = v36;
      uint64_t v36 = 0;
      if (result) {
        uint64_t result = (WTF::RefCountedBase *)WTF::RefCounted<WebCore::HistoryItem>::deref(result);
      }
      v27 += 248;
      v28 -= 248;
    }
    while (v28);
  }
  return result;
}

unsigned int *WebKit::createShareableBitmap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::ShareableBitmap **a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 24) + 8) + 48) + 8) + 544);
  if (v6) {
    uint64_t v7 = *(void *)(v6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (unsigned int *)(v7 + 8);
  atomic_fetch_add((atomic_uint *volatile)(v7 + 8), 1u);
  uint64_t v9 = (WebCore *)(*(uint64_t (**)(void))(**(void **)(*(void *)(v7 + 128) + 8) + 56))(*(void *)(*(void *)(v7 + 128) + 8));
  WebCore::screenColorSpace((uint64_t *)&v108, v9, v10);
  if ((*(unsigned char *)(a1 + 52) & 7) == 3 && (*(unsigned char *)(a1 + 53) & 2) != 0
    || (*(float *)(*(void *)(*(void *)(a1 + 88) + 32) + 4) == 0.0 ? (BOOL v11 = *(unsigned char *)(a2 + 13) == 0) : (BOOL v11 = 1),
        v11))
  {
    if (*(unsigned char *)(a1 + 46) != 48)
    {
      uint64_t v43 = WebCore::CachedResourceHandleBase::get((WebCore::CachedResourceHandleBase *)(*(void *)(a1 + 224) + 24));
      if (v43)
      {
        if ((*(_WORD *)(v43 + 557) >> 5) - 3 > 1)
        {
          uint64_t v44 = WebCore::CachedImage::imageForRenderer();
          if (v44)
          {
            uint64_t v45 = v44;
            if ((*(float (**)(uint64_t, void))(*(void *)v44 + 168))(v44, 0) > 1.0)
            {
              (*(void (**)(uint64_t, void))(*(void *)v45 + 168))(v45, 0);
              if (v46 > 1.0
                && (*(unsigned char *)(a2 + 12) || !(*(unsigned int (**)(uint64_t))(*(void *)v45 + 112))(v45)))
              {
                WebCore::CachedImage::imageSizeForRenderer();
                char v106 = (const void *)__PAIR64__(LODWORD(v49), LODWORD(v48));
                if (*(unsigned char *)(a2 + 8))
                {
                  float v50 = v48;
                  char v51 = *(const void **)a2;
                  uint64_t v99 = 0;
                  CFTypeRef cf = v51;
                  WebCore::largestRectWithAspectRatioInsideRect((WebCore *)&v99, v48 / v49, v47);
                  unint64_t v54 = LODWORD(v52) | ((unint64_t)v53 << 32);
                  if (v52 >= v50) {
                    unint64_t v54 = (unint64_t)v106;
                  }
                  char v106 = (const void *)v54;
                }
                WebCore::IntSize::IntSize((WebCore::IntSize *)&v104, (const WebCore::FloatSize *)&v106);
                uint64_t v55 = v108;
                v108 = 0;
                CFTypeRef v91 = v55;
                char v92 = 1;
                MEMORY[0x199738D60](&v99, &v104, &v91, 0);
                WebCore::ShareableBitmap::create();
                if (v101)
                {
                  CFTypeRef v56 = cf;
                  CFTypeRef cf = 0;
                  if (v56) {
                    CFRelease(v56);
                  }
                }
                if (v92)
                {
                  CFTypeRef v57 = v91;
                  CFTypeRef v91 = 0;
                  if (v57) {
                    CFRelease(v57);
                  }
                }
                if (v105)
                {
                  WebCore::ShareableBitmap::createGraphicsContext((uint64_t *)&v104, v105);
                  if (v104)
                  {
                    uint64_t v99 = 0;
                    CFTypeRef cf = v106;
                    WebCore::RenderElement::imageOrientation((WebCore::RenderElement *)a1);
                    WebCore::GraphicsContext::drawImage();
                    uint64_t v59 = v104;
                    uint64_t v60 = v105;
                    int v104 = 0;
                    uint64_t v105 = 0;
                    *a3 = v60;
                    if (!v59) {
                      goto LABEL_79;
                    }
                    (*(void (**)(WebCore::NativeImage *))(*(void *)v59 + 8))(v59);
                  }
                  else
                  {
                    *a3 = 0;
                  }
                  int v86 = v105;
                  uint64_t v105 = 0;
                  if (v86) {
                    WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v86, v58);
                  }
                  goto LABEL_79;
                }
              }
            }
          }
        }
      }
LABEL_76:
      *a3 = 0;
      goto LABEL_79;
    }
    uint64_t v12 = (WebCore::ShareableBitmap *)WebCore::RenderVideo::videoElement((WebCore::RenderVideo *)a1);
    *((_DWORD *)v12 + 7) += 2;
    uint64_t v105 = v12;
    WebCore::HTMLVideoElement::nativeImageForCurrentTime((uint64_t *)&v104, v12);
    if (!v104)
    {
      *a3 = 0;
      goto LABEL_78;
    }
    long long v13 = (WebCore::ShareableBitmap *)WebCore::NativeImage::size(v104);
    uint64_t v102 = v13;
    if ((int)v13 < 2 || SHIDWORD(v13) <= 1) {
      goto LABEL_14;
    }
    uint64_t v63 = v108;
    v108 = 0;
    CFTypeRef v94 = v63;
    char v95 = 1;
    MEMORY[0x199738D60](&v99, &v102, &v94, 0);
    WebCore::ShareableBitmap::create();
    if (v101)
    {
      CFTypeRef v64 = cf;
      CFTypeRef cf = 0;
      if (v64) {
        CFRelease(v64);
      }
    }
    if (v95)
    {
      CFTypeRef v65 = v94;
      CFTypeRef v94 = 0;
      if (v65) {
        CFRelease(v65);
      }
    }
    if (!v98)
    {
LABEL_14:
      *a3 = 0;
      goto LABEL_15;
    }
    WebCore::ShareableBitmap::createGraphicsContext(&v93, v98);
    if (v93)
    {
      uint64_t v99 = 0;
      *(float *)&CFTypeRef cf = (float)(int)v102;
      *((float *)&cf + 1) = (float)SHIDWORD(v102);
      char v106 = 0;
      *(float *)&uint64_t v107 = (float)(int)v102;
      *((float *)&v107 + 1) = (float)SHIDWORD(v102);
      WebCore::GraphicsContext::drawNativeImage();
      int v66 = v98;
      char v98 = 0;
      *a3 = v66;
      uint64_t v67 = v93;
      uint64_t v93 = 0;
      if (!v67) {
        goto LABEL_15;
      }
      (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
    }
    else
    {
      *a3 = 0;
    }
    int v85 = v98;
    char v98 = 0;
    if (v85) {
      WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v85, v14);
    }
LABEL_15:
    uint64_t v15 = v104;
    int v104 = 0;
    if (v15)
    {
      char v16 = 0;
      uint64_t v17 = *((void *)v15 + 1);
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v16, 1u, memory_order_acquire, memory_order_acquire);
      if (v16) {
        MEMORY[0x19972E8D0](v17);
      }
      uint64_t v18 = *(void *)(v17 + 8);
      int v19 = 1;
      uint64_t v20 = v18 - 1;
      *(void *)(v17 + ++*(_DWORD *)(this + 8) = v18 - 1;
      if (v18 == 1)
      {
        uint64_t v87 = *(void *)(v17 + 16);
        uint64_t v21 = *(void *)(v17 + 24);
        *(void *)(v17 + ++*(_DWORD *)(this + 24) = 0;
        BOOL v22 = v87 != 0;
      }
      else
      {
        uint64_t v21 = 0;
        BOOL v22 = 1;
      }
      atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v17, (unsigned __int8 *)&v19, 0, memory_order_release, memory_order_relaxed);
      if (v19 == 1)
      {
        if (!v20)
        {
LABEL_22:
          if (v21) {
            (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
          }
          if (!v22) {
            WTF::fastFree((WTF *)v17, v14);
          }
        }
      }
      else
      {
        WTF::Lock::unlockSlow((WTF::Lock *)v17);
        if (!v20) {
          goto LABEL_22;
        }
      }
    }
LABEL_78:
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref((uint64_t *)&v105);
    goto LABEL_79;
  }
  uint64_t v23 = (WebCore::DestinationColorSpace *)WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)a1, 1, 0);
  char v106 = v23;
  uint64_t v107 = v24;
  if ((int)v24 < 1 || v24 <= 0) {
    goto LABEL_76;
  }
  LOWORD(v99) = 33;
  BYTE2(v99) = 1;
  uint64_t v25 = *(const void **)WebCore::DestinationColorSpace::SRGB(v23);
  CFTypeRef cf = v25;
  if (v25) {
    CFRetain(v25);
  }
  WebCore::snapshotFrameRect();
  CFTypeRef v26 = cf;
  CFTypeRef cf = 0;
  if (v26) {
    CFRelease(v26);
  }
  uint64_t v27 = v105;
  if (!v105) {
    goto LABEL_76;
  }
  uint64_t v105 = 0;
  int v103 = v27;
  WebCore::ImageBuffer::sinkIntoNativeImage();
  uint64_t v29 = v103;
  int v103 = 0;
  if (!v29) {
    goto LABEL_44;
  }
  char v30 = 0;
  uint64_t v31 = *((void *)v29 + 1);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v30, 1u, memory_order_acquire, memory_order_acquire);
  if (v30) {
    MEMORY[0x19972E8D0](v31);
  }
  uint64_t v32 = *(void *)(v31 + 8);
  int v33 = 1;
  uint64_t v34 = v32 - 1;
  *(void *)(v31 + ++*(_DWORD *)(this + 8) = v32 - 1;
  if (v32 == 1)
  {
    uint64_t v88 = *(void *)(v31 + 16);
    uint64_t v35 = *(void *)(v31 + 24);
    *(void *)(v31 + ++*(_DWORD *)(this + 24) = 0;
    BOOL v36 = v88 != 0;
  }
  else
  {
    uint64_t v35 = 0;
    BOOL v36 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v31, (unsigned __int8 *)&v33, 0, memory_order_release, memory_order_relaxed);
  if (v33 == 1)
  {
    if (v34) {
      goto LABEL_44;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v31);
    if (v34) {
      goto LABEL_44;
    }
  }
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  if (!v36) {
    WTF::fastFree((WTF *)v31, v28);
  }
LABEL_44:
  if (v104)
  {
    char v98 = (WebCore::ShareableBitmap *)WebCore::NativeImage::size(v104);
    uint64_t v37 = v108;
    v108 = 0;
    CFTypeRef v96 = v37;
    char v97 = 1;
    MEMORY[0x199738D60](&v99, &v98, &v96, 0);
    WebCore::ShareableBitmap::create();
    if (v101)
    {
      CFTypeRef v38 = cf;
      CFTypeRef cf = 0;
      if (v38) {
        CFRelease(v38);
      }
    }
    if (v97)
    {
      CFTypeRef v39 = v96;
      CFTypeRef v96 = 0;
      if (v39) {
        CFRelease(v39);
      }
    }
    if (v102)
    {
      WebCore::ShareableBitmap::createGraphicsContext((uint64_t *)&v98, v102);
      if (v98)
      {
        uint64_t v40 = WebCore::NativeImage::size(v104);
        uint64_t v99 = 0;
        *(float *)&CFTypeRef cf = (float)(int)v40;
        *((float *)&cf + 1) = (float)SHIDWORD(v40);
        WebCore::GraphicsContext::drawNativeImage();
        int v41 = v102;
        uint64_t v102 = 0;
        *a3 = v41;
        __int16 v42 = v98;
        char v98 = 0;
        if (v42) {
          (*(void (**)(WebCore::ShareableBitmap *))(*(void *)v42 + 8))(v42);
        }
      }
      else
      {
        *a3 = 0;
      }
      uint64_t v68 = v102;
      uint64_t v102 = 0;
      if (v68) {
        WTF::ThreadSafeRefCounted<WebCore::ShareableBitmap,(WTF::DestructionThread)0>::deref((uint64_t)v68, v28);
      }
    }
    else
    {
      *a3 = 0;
    }
    uint64_t v69 = v104;
    int v104 = 0;
    if (!v69) {
      goto LABEL_109;
    }
    char v70 = 0;
    uint64_t v71 = *((void *)v69 + 1);
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v71, (unsigned __int8 *)&v70, 1u, memory_order_acquire, memory_order_acquire);
    if (v70) {
      MEMORY[0x19972E8D0](v71);
    }
    uint64_t v72 = *(void *)(v71 + 8);
    int v73 = 1;
    uint64_t v74 = v72 - 1;
    *(void *)(v71 + ++*(_DWORD *)(this + 8) = v72 - 1;
    if (v72 == 1)
    {
      uint64_t v90 = *(void *)(v71 + 16);
      uint64_t v75 = *(void *)(v71 + 24);
      *(void *)(v71 + ++*(_DWORD *)(this + 24) = 0;
      BOOL v76 = v90 != 0;
    }
    else
    {
      uint64_t v75 = 0;
      BOOL v76 = 1;
    }
    atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v71, (unsigned __int8 *)&v73, 0, memory_order_release, memory_order_relaxed);
    if (v73 == 1)
    {
      if (!v74)
      {
LABEL_105:
        if (v75) {
          (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
        }
        if (!v76) {
          WTF::fastFree((WTF *)v71, v28);
        }
      }
    }
    else
    {
      WTF::Lock::unlockSlow((WTF::Lock *)v71);
      if (!v74) {
        goto LABEL_105;
      }
    }
  }
  else
  {
    *a3 = 0;
  }
LABEL_109:
  uint64_t v77 = v105;
  uint64_t v105 = 0;
  if (!v77) {
    goto LABEL_79;
  }
  char v78 = 0;
  uint64_t v79 = *((void *)v77 + 1);
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v79, (unsigned __int8 *)&v78, 1u, memory_order_acquire, memory_order_acquire);
  if (v78) {
    MEMORY[0x19972E8D0](v79);
  }
  uint64_t v80 = *(void *)(v79 + 8);
  int v81 = 1;
  uint64_t v82 = v80 - 1;
  *(void *)(v79 + ++*(_DWORD *)(this + 8) = v80 - 1;
  if (v80 == 1)
  {
    uint64_t v89 = *(void *)(v79 + 16);
    uint64_t v83 = *(void *)(v79 + 24);
    *(void *)(v79 + ++*(_DWORD *)(this + 24) = 0;
    BOOL v84 = v89 != 0;
  }
  else
  {
    uint64_t v83 = 0;
    BOOL v84 = 1;
  }
  atomic_compare_exchange_strong_explicit((atomic_uchar *volatile)v79, (unsigned __int8 *)&v81, 0, memory_order_release, memory_order_relaxed);
  if (v81 == 1)
  {
    if (v82) {
      goto LABEL_79;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v79);
    if (v82) {
      goto LABEL_79;
    }
  }
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  if (!v84) {
    WTF::fastFree((WTF *)v79, v28);
  }
LABEL_79:
  uint64_t v61 = v108;
  v108 = 0;
  if (v61) {
    CFRelease(v61);
  }
  return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
}

WebCore::Node *WebKit::WebAttachmentElementClient::requestAttachmentIcon(const WTF::String ***this, const WTF::String *a2, const WebCore::FloatSize *a3)
{
  return WebKit::WebPage::requestAttachmentIcon(this[1], a2, a3);
}

uint64_t WebKit::WebBadgeClient::setAppBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v8 = *(void **)(*(void *)(a2 + 48) + 16);
    (*(void (**)(void *))(*v8 + 1368))(v8);
    uint64_t v9 = *(void *)(v8[2] + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
    a2 = *(void *)(v10 + 2120);
    uint64_t v11 = 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  {
    uint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v12 = WebKit::WebProcess::singleton(void)::process;

  return WebKit::WebProcess::setAppBadge(v12, a2, v11, a3, a4, a5);
}

uint64_t WebKit::WebBadgeClient::setClientBadge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v8 = WebKit::WebProcess::singleton(void)::process;
  uint64_t v9 = *(void **)(*(void *)(a2 + 48) + 16);
  (*(void (**)(void *))(*v9 + 1368))(v9);
  uint64_t v10 = *(void *)(v9[2] + 8);
  if (v10) {
    uint64_t v11 = v10 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(void *)(v11 + 2120);
  v17[1] = a5;
  uint64_t v18 = v12;
  uint64_t v13 = *(void *)(v8 + 40);
  v16[0] = &v18;
  v16[1] = a3;
  void v16[2] = v17;
  v17[0] = a4;
  return IPC::Connection::send<Messages::WebProcessProxy::SetClientBadge>(v13, (uint64_t)v16, 0, 0, 0);
}

uint64_t *WebKit::WebBroadcastChannelRegistry::registerChannel(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v56 = a4;
  uint64_t v6 = (uint64_t *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 16);
  if (v7
    || (WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::expand((uint64_t *)(a1 + 16), 0), (uint64_t v7 = *v6) != 0))
  {
    int v8 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    int v8 = 0;
  }
  unsigned int v9 = WTF::computeHash<WebCore::PartitionedSecurityOrigin>(*a2, a2[1]);
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v9 & v8;
    uint64_t v15 = (uint64_t *)(v7 + 24 * (v9 & v8));
    if (*v15 == -1)
    {
      uint64_t v12 = (uint64_t *)(v7 + 24 * v14);
      goto LABEL_10;
    }
    if (!*v15) {
      break;
    }
    if (WTF::PartitionedSecurityOriginHash::equal((WebCore::SecurityOrigin **)(v7 + 24 * v14), (const WebCore::SecurityOrigin **)a2))goto LABEL_28; {
LABEL_10:
    }
    unsigned int v9 = i + v14;
  }
  if (v12)
  {
    *uint64_t v12 = 0;
    v12[1] = 0;
    _OWORD v12[2] = 0;
    --*(_DWORD *)(*v6 - 16);
    uint64_t v15 = v12;
  }
  uint64_t v16 = *a2;
  atomic_fetch_add((atomic_uint *volatile)*a2, 1u);
  uint64_t v17 = *v15;
  *uint64_t v15 = v16;
  if (v17) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v17, v10);
  }
  uint64_t v18 = (atomic_uint *)a2[1];
  atomic_fetch_add(v18, 1u);
  uint64_t v19 = v15[1];
  v15[1] = (uint64_t)v18;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, v10);
  }
  uint64_t v20 = v15[2];
  void v15[2] = 0;
  if (v20) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v20, v10);
  }
  uint64_t v21 = *v6;
  if (*v6) {
    int v22 = *(_DWORD *)(v21 - 12) + 1;
  }
  else {
    int v22 = 1;
  }
  *(_DWORD *)(v21 - 12) = v22;
  uint64_t v23 = *v6;
  if (*v6) {
    int v24 = *(_DWORD *)(v23 - 12);
  }
  else {
    int v24 = 0;
  }
  uint64_t v25 = (*(_DWORD *)(v23 - 16) + v24);
  unint64_t v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25) {
LABEL_27:
    }
      uint64_t v15 = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::expand(v6, v15);
  }
  else if (3 * v26 <= 4 * v25)
  {
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v29 = v15[2];
  uint64_t v27 = v15 + 2;
  uint64_t v28 = v29;
  if (v29
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v27, 0), (uint64_t v28 = *v27) != 0))
  {
    int v30 = *(_DWORD *)(v28 - 8);
  }
  else
  {
    int v30 = 0;
  }
  unsigned int v31 = *((_DWORD *)*a3 + 4);
  if (v31 >= 0x100) {
    unsigned int v32 = v31 >> 8;
  }
  else {
    unsigned int v32 = WTF::StringImpl::hashSlowCase(*a3);
  }
  int v33 = 0;
  int v34 = 1;
  while (2)
  {
    unsigned int v35 = v32 & v30;
    uint64_t v36 = v28 + 24 * (v32 & v30);
    uint64_t v37 = *(WTF **)v36;
    if (*(void *)v36 == -1)
    {
      int v33 = (void *)(v28 + 24 * v35);
LABEL_40:
      unsigned int v32 = v34 + v35;
      ++v34;
      continue;
    }
    break;
  }
  if (v37)
  {
    if (WTF::equal(v37, *a3, v11)) {
      goto LABEL_54;
    }
    goto LABEL_40;
  }
  if (v33)
  {
    *int v33 = 0;
    v33[1] = 0;
    v33[2] = 0;
    --*(_DWORD *)(*v27 - 16);
    uint64_t v36 = (uint64_t)v33;
  }
  WTF::String::operator=((uint64_t *)v36, a3);
  CFTypeRef v39 = *(WTF **)(v36 + 8);
  if (v39)
  {
    *(void *)(v36 + ++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(v36 + 16) = 0;
    WTF::fastFree(v39, v38);
  }
  *(void *)(v36 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(v36 + 16) = 0;
  uint64_t v40 = *v27;
  if (*v27) {
    int v41 = *(_DWORD *)(v40 - 12) + 1;
  }
  else {
    int v41 = 1;
  }
  *(_DWORD *)(v40 - 12) = v41;
  uint64_t v42 = *v27;
  if (*v27) {
    int v43 = *(_DWORD *)(v42 - 12);
  }
  else {
    int v43 = 0;
  }
  uint64_t v44 = (*(_DWORD *)(v42 - 16) + v43);
  unint64_t v45 = *(unsigned int *)(v42 - 4);
  if (v45 > 0x400)
  {
    if (v45 <= 2 * v44) {
LABEL_53:
    }
      uint64_t v36 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(v27, (WTF::StringImpl **)v36);
  }
  else if (3 * v45 <= 4 * v44)
  {
    goto LABEL_53;
  }
LABEL_54:
  uint64_t result = (uint64_t *)(v36 + 8);
  uint64_t v47 = *(unsigned int *)(v36 + 20);
  if (v47 == *(_DWORD *)(v36 + 16))
  {
    uint64_t result = (uint64_t *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v47 + 1, (unint64_t)&v56);
    uint64_t v47 = *(unsigned int *)(v36 + 20);
    uint64_t v48 = *(void *)(v36 + 8);
    uint64_t v49 = *result;
  }
  else
  {
    uint64_t v48 = *result;
    uint64_t v49 = a4;
  }
  *(void *)(v48 + 8 * v47) = v49;
  int v50 = *(_DWORD *)(v36 + 20);
  *(_DWORD *)(v36 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v50 + 1;
  if (!v50)
  {
    WebKit::toClientOrigin(a2, (uint64_t)v57);
    if (v58)
    {
      {
        unsigned int v53 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v53);
      }
      uint64_t v51 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      if (!v58) {
        __break(1u);
      }
      uint64_t v52 = *(void *)(v51 + 24);
      v55[0] = v57;
      v55[1] = a3;
      IPC::Connection::send<Messages::NetworkBroadcastChannelRegistry::RegisterChannel>(v52, (uint64_t)v55, 0, 0, 0);
    }
    return (uint64_t *)std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v57);
  }
  return result;
}

void *WebKit::toClientOrigin@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *result;
  if (*(_DWORD *)(*result + 32) == 1 || (uint64_t v4 = result, *(_DWORD *)(result[1] + 32) == 1))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 64) = 0;
  }
  else
  {
    v8[0] = 0;
    int v9 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v8, v3 + 8);
    uint64_t v5 = v4[1] + 8;
    v10[0] = 0;
    int v11 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v10, v5);
    *(unsigned char *)a2 = 0;
    *(_DWORD *)(a2 + ++*(_DWORD *)(this + 24) = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(a2, (uint64_t)v8);
    *(unsigned char *)(a2 + ++*(_DWORD *)(this + 32) = 0;
    uint64_t v6 = a2 + 32;
    *(_DWORD *)(v6 + ++*(_DWORD *)(this + 24) = -1;
    uint64_t result = (void *)std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>(v6, (uint64_t)v10);
    *(unsigned char *)(v6 + ++*(_DWORD *)(this + 32) = 1;
    if (v11 != -1) {
      uint64_t result = (void *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v11])(&v7, v10);
    }
    int v11 = -1;
    if (v9 != -1) {
      return (void *)((uint64_t (*)(char *, unsigned char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v9])(&v7, v8);
    }
  }
  return result;
}

uint64_t IPC::Connection::send<Messages::NetworkBroadcastChannelRegistry::RegisterChannel>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 221;
  *((void *)v10 + 1) = a3;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v17 = v10;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v10, *(void *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, *(uint64_t **)(a2 + 8));
  uint64_t v12 = IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v17, a4, a5);
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v15, v16);
  }
  return v12;
}

uint64_t *WebKit::WebBroadcastChannelRegistry::unregisterChannel(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  int v8 = (uint64_t *)(a1 + 16);
  uint64_t result = (uint64_t *)WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 16), a2);
  int v11 = result;
  uint64_t v12 = *(uint64_t **)(a1 + 16);
  if (v12) {
    v12 += 3 * *((unsigned int *)v12 - 1);
  }
  if (v12 == result) {
    return result;
  }
  uint64_t v13 = result + 2;
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(result + 2, a3, v10);
  unsigned int v14 = result;
  uint64_t v15 = (uint64_t *)v11[2];
  if (v15) {
    v15 += 3 * *((unsigned int *)v15 - 1);
  }
  if (v15 == result) {
    return result;
  }
  unint64_t v16 = *((unsigned int *)result + 5);
  if (!v16) {
    return result;
  }
  uint64_t v17 = (void *)result[1];
  if (*v17 != a4)
  {
    unint64_t v18 = 0;
    while (v16 - 1 != v18)
    {
      uint64_t v20 = v17[++v18];
      if (v20 == a4)
      {
        BOOL v19 = v18 < v16;
        goto LABEL_14;
      }
    }
    return result;
  }
  unint64_t v18 = 0;
  BOOL v19 = 1;
LABEL_14:
  uint64_t result = &v17[v18];
  uint64_t v21 = result + 1;
  if (result + 1 != &v17[v16])
  {
    uint64_t result = (uint64_t *)memmove(result, v21, 8 * (v16 - v18) - 8);
    LODWORD(v16) = *((_DWORD *)v14 + 5);
  }
  int v22 = v16 - 1;
  *((_DWORD *)v14 + 5) = v22;
  if (v22) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v19;
  }
  if (!v23) {
    return result;
  }
  if (*v13)
  {
    uint64_t v24 = *v13 + 24 * *(unsigned int *)(*v13 - 4);
    if ((uint64_t *)v24 == v14) {
      goto LABEL_35;
    }
  }
  else
  {
    if (!v14) {
      goto LABEL_35;
    }
    uint64_t v24 = 0;
  }
  if ((uint64_t *)v24 != v14)
  {
    WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)v14, (WTF::StringImpl *)v21);
    unint64_t v26 = (WTF *)v14[1];
    if (v26)
    {
      v14[1] = 0;
      *((_DWORD *)v14 + 4) = 0;
      WTF::fastFree(v26, v25);
    }
    ++*(_DWORD *)(*v13 - 16);
    uint64_t v27 = *v13;
    if (*v13) {
      int v28 = *(_DWORD *)(v27 - 12) - 1;
    }
    else {
      int v28 = -1;
    }
    *(_DWORD *)(v27 - 12) = v28;
    uint64_t v29 = *v13;
    if (*v13)
    {
      unsigned int v30 = 6 * *(_DWORD *)(v29 - 12);
      unsigned int v31 = *(_DWORD *)(v29 - 4);
      if (v30 < v31 && v31 >= 9) {
        WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(v11 + 2, v31 >> 1, 0);
      }
    }
  }
LABEL_35:
  WebKit::toClientOrigin(a2, (uint64_t)v50);
  if (v51)
  {
    {
      uint64_t v48 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v48);
    }
    uint64_t v32 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    if (!v51) {
      __break(1u);
    }
    uint64_t v33 = *(void *)(v32 + 24);
    int v34 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v34 = 222;
    *((void *)v34 + 1) = 0;
    *((void *)v34 + 66) = (char *)v34 + 16;
    *((void *)v34 + 67) = 512;
    *((void *)v34 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v34 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v34 + 69) = 0;
    IPC::Encoder::encodeHeader(v34);
    uint64_t v49 = v34;
    IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v34, (uint64_t)v50);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)a3);
    IPC::Connection::sendMessageImpl(v33, (uint64_t *)&v49, 0, 0);
    uint64_t v36 = v49;
    uint64_t v49 = 0;
    if (v36)
    {
      IPC::Encoder::~Encoder(v36, v35);
      WTF::fastFree(v46, v47);
    }
  }
  uint64_t result = (uint64_t *)std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v50);
  if (!*v13 || !*(_DWORD *)(*v13 - 12))
  {
    if (*v8)
    {
      uint64_t v38 = *v8 + 24 * *(unsigned int *)(*v8 - 4);
      if ((uint64_t *)v38 == v11) {
        return result;
      }
    }
    else
    {
      if (!v11) {
        return result;
      }
      uint64_t v38 = 0;
    }
    if ((uint64_t *)v38 != v11)
    {
      uint64_t v39 = v11[1];
      v11[1] = 0;
      if (v39) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v39, v37);
      }
      uint64_t v40 = *v11;
      *int v11 = 0;
      if (v40) {
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v40, v37);
      }
      *int v11 = -1;
      v11[1] = -1;
      uint64_t result = (uint64_t *)v11[2];
      if (result) {
        uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable((uint64_t)result, v37);
      }
      ++*(_DWORD *)(*v8 - 16);
      uint64_t v41 = *v8;
      if (*v8) {
        int v42 = *(_DWORD *)(v41 - 12) - 1;
      }
      else {
        int v42 = -1;
      }
      *(_DWORD *)(v41 - 12) = v42;
      uint64_t v43 = *v8;
      if (*v8)
      {
        unsigned int v44 = 6 * *(_DWORD *)(v43 - 12);
        unsigned int v45 = *(_DWORD *)(v43 - 4);
        if (v44 < v45 && v45 >= 9) {
          return WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(v8, v45 >> 1, 0);
        }
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebBroadcastChannelRegistry::postMessage(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, atomic_uint *volatile *a5, uint64_t *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v12 = 1;
  uint64_t v13 = *a6;
  *a6 = 0;
  *(void *)(v12 + ++*(_DWORD *)(this + 8) = v13;
  unsigned int v14 = *a5;
  atomic_fetch_add(*a5, 1u);
  v36[0] = v14;
  atomic_fetch_add((atomic_uint *volatile)v12, 1u);
  v33[0] = (atomic_uint *)v12;
  WebKit::WebBroadcastChannelRegistry::postMessageLocally(a1, a2, a3, a4, 1, v36, v33);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v12);
  if (v36[0]) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref((unsigned int *)v36[0]);
  }
  WebKit::toClientOrigin(a2, (uint64_t)v36);
  if (v37)
  {
    {
      uint64_t v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v29);
    }
    uint64_t v15 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    if (!v37) {
      __break(1u);
    }
    unint64_t v16 = *(os_unfair_lock_s **)(v15 + 24);
    atomic_uint *volatile v17 = *a5;
    *a5 = 0;
    unsigned int v31 = 0;
    uint64_t v32 = 0;
    unsigned int v30 = (unsigned int *)v17;
    v33[0] = (atomic_uint *)v36;
    v33[1] = (atomic_uint *)a3;
    v33[2] = (atomic_uint *)&v30;
    atomic_fetch_add((atomic_uint *volatile)v12, 1u);
    unint64_t v18 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unint64_t v18 = &unk_1EE9F5980;
    v18[1] = v12;
    uint64_t v19 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v20 = 220;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 66) = (char *)v20 + 16;
    *((void *)v20 + 67) = 512;
    *((void *)v20 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v20 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v20 + 69) = 0;
    IPC::Encoder::encodeHeader(v20);
    unsigned int v35 = v20;
    IPC::ArgumentCoder<std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ClientOrigin const&,WTF::String const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul>(v20, (uint64_t)v33);
    v34[0] = (uint64_t)v18;
    v34[1] = v19;
    IPC::Connection::sendMessageWithAsyncReply(v16, &v35, v34, 0, 0);
    uint64_t v22 = v34[0];
    v34[0] = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    BOOL v23 = v35;
    unsigned int v35 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v21);
      WTF::fastFree(v27, v28);
    }
    uint64_t v24 = v31;
    if (v31)
    {
      unsigned int v31 = 0;
      LODWORD(v++*(_DWORD *)(this + 32) = 0;
      WTF::fastFree(v24, v21);
    }
    uint64_t v25 = v30;
    unsigned int v30 = 0;
    if (v25) {
      WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v25);
    }
  }
  std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36);
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v12);
}

uint64_t WebKit::WebBroadcastChannelRegistry::postMessageLocally(uint64_t a1, uint64_t *a2, WTF::StringImpl **a3, uint64_t a4, char a5, atomic_uint *volatile *a6, atomic_uint *volatile *a7)
{
  uint64_t result = WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>((uint64_t *)(a1 + 16), a2);
  uint64_t v15 = result;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16) {
    v16 += 24 * *(unsigned int *)(v16 - 4);
  }
  if (v16 != result)
  {
    uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<IPC::Connection::UniqueIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(result + 16), a3, v14);
    uint64_t v17 = result;
    uint64_t v18 = *(void *)(v15 + 16);
    if (v18) {
      v18 += 24 * *(unsigned int *)(v18 - 4);
    }
    if (v18 != result)
    {
      uint64_t v19 = *(unsigned int *)(result + 20);
      if (v19)
      {
        if (v19 >> 29)
        {
          __break(0xC471u);
        }
        else
        {
          uint64_t v20 = 8 * v19;
          uint64_t v21 = WTF::fastMalloc((WTF *)(8 * v19));
          BOOL v23 = (WTF *)v21;
          uint64_t v24 = *(unsigned int *)(v17 + 20);
          if (v24)
          {
            uint64_t v25 = *(uint64_t **)(v17 + 8);
            uint64_t v26 = 8 * v24;
            uint64_t v27 = (void *)v21;
            do
            {
              uint64_t v28 = *v25++;
              *v27++ = v28;
              v26 -= 8;
            }
            while (v26);
          }
          uint64_t v29 = 0;
          do
          {
            if (!a5 || *(void *)((char *)v23 + v29) != a4)
            {
              atomic_uint *volatile v30 = *a6;
              atomic_fetch_add(*a6, 1u);
              int v34 = (unsigned int *)v30;
              atomic_uint *volatile v31 = *a7;
              atomic_fetch_add(*a7, 1u);
              uint64_t v32 = (void *)WTF::fastMalloc((WTF *)0x10);
              *uint64_t v32 = &unk_1EE9F59A8;
              v32[1] = v31;
              uint64_t v33 = v32;
              WebCore::BroadcastChannel::dispatchMessageTo();
              if (v33) {
                (*(void (**)(void *))(*v33 + 8))(v33);
              }
              if (v34) {
                WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v34);
              }
            }
            v29 += 8;
          }
          while (v20 != v29);
          return WTF::fastFree(v23, v22);
        }
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebBroadcastChannelRegistry::postMessageToRemote(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, atomic_uint *volatile *a4, uint64_t *a5)
{
  uint64_t v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)uint64_t v10 = 1;
  uint64_t v11 = *a5;
  *a5 = 0;
  *(void *)(v10 + ++*(_DWORD *)(this + 8) = v11;
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v18, (WebCore::SecurityOriginData *)a2);
  WebCore::SecurityOriginData::securityOrigin((uint64_t *)&v20, (WebCore::SecurityOriginData *)(a2 + 32));
  uint64_t v19 = (WTF *)v18;
  uint64_t v12 = *a4;
  atomic_fetch_add(*a4, 1u);
  uint64_t v17 = (atomic_uint *)v10;
  uint64_t v18 = v12;
  atomic_fetch_add((atomic_uint *volatile)v10, 1u);
  WebKit::WebBroadcastChannelRegistry::postMessageLocally(a1, (uint64_t *)&v19, a3, 0, 0, &v18, &v17);
  WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v10);
  if (v18) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref((unsigned int *)v18);
  }
  unsigned int v14 = v20;
  uint64_t v20 = 0;
  if (v14) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v14, v13);
  }
  uint64_t v15 = v19;
  uint64_t v19 = 0;
  if (v15) {
    WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref((uint64_t)v15, v13);
  }
  return WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref((unsigned int *)v10);
}

uint64_t WebKit::WebBroadcastChannelRegistry::networkProcessCrashed(WebKit::WebBroadcastChannelRegistry *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t result = (uint64_t)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)this + 2);
  uint64_t v3 = result;
  uint64_t v5 = v4;
  uint64_t v6 = *((void *)this + 2);
  if (v6) {
    uint64_t v7 = v6 + 24 * *(unsigned int *)(v6 - 4);
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7 != result)
  {
    do
    {
      WebKit::toClientOrigin((void *)v3, (uint64_t)v18);
      if (v19)
      {
        int v8 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(v3 + 16));
        int v9 = v8;
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v3 + 16);
        uint64_t v13 = v12 ? v12 + 24 * *(unsigned int *)(v12 - 4) : 0;
        if ((void *)v13 != v8)
        {
          do
          {
            {
              uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
              WebKit::WebProcess::WebProcess(v16);
            }
            uint64_t v14 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
            if (!v19) {
              __break(1u);
            }
            uint64_t v15 = *(void *)(v14 + 24);
            v17[0] = v18;
            v17[1] = v9;
            IPC::Connection::send<Messages::NetworkBroadcastChannelRegistry::RegisterChannel>(v15, (uint64_t)v17, 0, 0, 0);
            while (1)
            {
              v9 += 3;
              if (v9 == v11) {
                break;
              }
              if ((unint64_t)(*v9 + 1) > 1) {
                goto LABEL_17;
              }
            }
            int v9 = v11;
LABEL_17:
            ;
          }
          while (v9 != (void *)v13);
        }
      }
      uint64_t result = std::__optional_destruct_base<WebCore::ClientOrigin,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18);
      while (1)
      {
        v3 += 24;
        if (v3 == v5) {
          break;
        }
        if ((unint64_t)(*(void *)v3 + 1) > 1) {
          goto LABEL_25;
        }
      }
      uint64_t v3 = v5;
LABEL_25:
      ;
    }
    while (v3 != v7);
  }
  return result;
}

void WebKit::WebChromeClient::~WebChromeClient(WebKit::WebChromeClient *this, void *a2)
{
  int v2 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v3 = this;
    WTF::fastFree((WTF *)v2, a2);
    this = v3;
  }

  MEMORY[0x1F416CD00](this);
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebChromeClient::~WebChromeClient(this, a2);

  WTF::fastFree(v2, v3);
}

void WebKit::WebChromeClient::setWindowRect(WebKit::WebChromeClient *this, const WebCore::FloatRect *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  WebKit::WebPage::sendSetWindowFrame((WebKit::WebPage *)v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

double WebKit::WebChromeClient::windowRect(WebKit::WebChromeClient *this)
{
  return 0.0;
}

double WebKit::WebChromeClient::pageRect(WebKit::WebChromeClient *this)
{
  return 0.0;
}

void WebKit::WebChromeClient::focus(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  char v11 = 1;
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2069;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v12, 0);
  int v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::unfocus(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  char v11 = 0;
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2069;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v12 = v6;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v6, &v11);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v12, 0);
  int v8 = v12;
  uint64_t v12 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::elementDidFocus(uint64_t a1, WebKit *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  WebKit::WebPage::elementDidFocus((WebKit::WebPage *)v6, a2, a3);
  if (v5)
  {
    uint64_t v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
}

void WebKit::WebChromeClient::elementDidRefocus(uint64_t a1, WebKit *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  WebKit::WebPage::elementDidRefocus((WebKit::WebPage *)v6, a2, a3);
  if (v5)
  {
    uint64_t v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
}

void WebKit::WebChromeClient::elementDidBlur(WebKit::WebChromeClient *this, WebCore::Element *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::elementDidBlur(v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::focusedElementDidChangeInputMode(uint64_t a1, WebKit *a2, char a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebPage::focusedElementDidChangeInputMode(v6, a2, a3);
  if (v5)
  {
    uint64_t v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
}

void WebKit::WebChromeClient::focusedSelectElementDidChangeOptions(WebKit::WebChromeClient *this, const WebCore::HTMLSelectElement *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  if (*(const WebCore::HTMLSelectElement **)(v4 + 928) == a2) {
    WebCore::DeferrableOneShotTimer::restart(v4 + 1576);
  }
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::makeFirstResponder(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2004;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v11, 0);
  int v8 = v11;
  char v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
  }
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
}

void WebKit::WebChromeClient::assistiveTechnologyMakeFirstResponder(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1868;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v11 = v6;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v11, 0);
  int v8 = v11;
  char v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v1 - 8));
}

uint64_t WebKit::WebChromeClient::canTakeFocus()
{
  return 1;
}

void WebKit::WebChromeClient::takeFocus(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2111;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  int v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (!v10)
  {
    __break(0xC471u);
    return;
  }
  unsigned char *v9 = a2;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v15, 0);
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (!v12)
  {
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  IPC::Encoder::~Encoder(v12, v11);
  WTF::fastFree(v13, v14);
  if (v3) {
LABEL_7:
  }
    CFRelease(*(CFTypeRef *)(v3 - 8));
}

unsigned int *WebKit::WebChromeClient::focusedElementChanged(unsigned int *this, WebCore::Element *a2)
{
  if (a2
    && (*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    uint64_t v3 = (uint64_t)this;
    *((_DWORD *)a2 + 7) += 2;
    this = (unsigned int *)WebCore::HTMLInputElement::isText(a2);
    if (this)
    {
      uint64_t v4 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5) {
          atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
        }
      }
      else
      {
        uint64_t v5 = 0;
      }
      WebKit::WebFrame::fromCoreFrame(v5, &v9);
      uint64_t v6 = *(void *)(*(void *)(v3 + 16) + 8);
      if (v6) {
        uint64_t v7 = v6 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
      CFRetain(*(CFTypeRef *)(v7 + 8));
      uint64_t v8 = v9;
      (*(void (**)(void, uint64_t, WebCore::Element *, uint64_t))(**(void **)(v7 + 352) + 16))(*(void *)(v7 + 352), v7, a2, v9);
      if (v6) {
        CFRelease(*(CFTypeRef *)(v6 - 8));
      }
      if (v8) {
        CFRelease(*(CFTypeRef *)(v8 + 8));
      }
      this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    }
    if (*((_DWORD *)a2 + 7) == 2)
    {
      if ((*((_WORD *)a2 + 17) & 0x400) == 0)
      {
        return (unsigned int *)WebCore::Node::removedLastRef(a2);
      }
    }
    else
    {
      *((_DWORD *)a2 + 7) -= 2;
    }
  }
  return this;
}

void WebKit::WebChromeClient::focusedFrameChanged(WebKit::WebChromeClient *this, WebCore::Frame *a2)
{
  if (a2) {
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v17);
  }
  else {
    uint64_t v17 = 0;
  }
  {
    uint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v4 = v17;
  if (v17)
  {
    long long v15 = *(_OWORD *)(v17 + 80);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    LOBYTE(v15) = 0;
  }
  char v16 = v5;
  uint64_t v6 = *(void *)(*((void *)this + 2) + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1974;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v18 = v9;
  IPC::ArgumentCoder<std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,void>::encode<IPC::Encoder,std::optional<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>> const&>(v9, (uint64_t)&v15);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v18, 0, 0);
  char v11 = v18;
  uint64_t v18 = 0;
  if (v11)
  {
    IPC::Encoder::~Encoder(v11, v10);
    WTF::fastFree(v12, v13);
  }
  if (v4) {
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

uint64_t WebKit::WebChromeClient::createWindow(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WebCore::WindowFeatures *a3, const WebCore::NavigationAction *a4)
{
  uint64_t v4 = MEMORY[0x1F4188790](this, a2, a3);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = v4;
  v421[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(v9 + 296);
  if (v12)
  {
    *(_DWORD *)(v12 + 28) += 2;
    uint64_t v13 = *(WebCore::FullscreenManager **)(v12 + 2032);
    if (!v13) {
      uint64_t v13 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager((WebCore::Document *)v12);
    }
    WebCore::FullscreenManager::cancelFullscreen(v13);
    if (*(_DWORD *)(v12 + 28) == 2)
    {
      if ((*(_WORD *)(v12 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
    }
    else
    {
      *(_DWORD *)(v12 + 28) -= 2;
    }
  }
  uint64_t v14 = &qword_1EB35A000;
  {
    v165 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v165);
  }
  uint64_t v15 = WebKit::WebProcess::singleton(void)::process;
  WebKit::WebFrame::fromCoreFrame(v10, &v268);
  v380[0] = *(unsigned char *)(v6 + 868);
  v380[1] = WebKit::modifiersForNavigationAction((unsigned char *)v6);
  char v16 = (IPC::Encoder *)WebKit::mouseButton((unsigned char *)v6);
  v380[2] = (_BYTE)v16;
  char v19 = *(unsigned char *)(v6 + 476);
  if (v19)
  {
    char v19 = 0;
    if (*(unsigned char *)(v6 + 474))
    {
      if (*(unsigned char *)(v6 + 448)) {
        char v19 = *(unsigned char *)(v6 + 473);
      }
    }
  }
  v380[3] = v19;
  if (!*(unsigned char *)(v6 + 224)) {
    goto LABEL_241;
  }
  uint64_t v20 = *(void *)(v6 + 160);
  uint64_t v21 = *(void *)(v6 + 168);
  uint64_t v22 = *(_DWORD **)(v6 + 480);
  if (v22) {
    ++*v22;
  }
  v267 = v22;
  v166 = (uint64_t *)v15;
  WebKit::WebProcess::userGestureTokenIdentifier(v15, v20, v21, (uint64_t *)&v267, &v381);
  uint64_t v23 = *(void *)(v6 + 480);
  if (v23)
  {
    *(_DWORD *)v23 += 2;
    long long v24 = *(_OWORD *)(v23 + 112);
    long long v382 = *(_OWORD *)(v23 + 96);
    long long v383 = v24;
  }
  else
  {
    LOBYTE(v382) = 0;
    LOBYTE(v38WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  }
  uint64_t v25 = v11;
  uint64_t v26 = *(void *)(*(void *)(v11 + 16) + 8);
  uint64_t v27 = v26 - 16;
  if (!v26) {
    uint64_t v27 = 0;
  }
  CFRetain(*(CFTypeRef *)(v27 + 8));
  uint64_t v28 = (const String *)(v6 + 240);
  char canHandleRequest = WebKit::WebPage::canHandleRequest((WebKit::WebPage *)(v6 + 240), v29);
  char v385 = *(unsigned char *)(v6 + 871);
  atomic_uint *volatile v30 = *(_DWORD **)(v6 + 488);
  if (v30) {
    *v30 += 2;
  }
  if (*(unsigned char *)(v6 + 476)) {
    uint64_t v31 = *(void *)(v6 + 464);
  }
  else {
    uint64_t v31 = 0;
  }
  v386 = v30;
  uint64_t v387 = v31;
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v388);
  uint64_t v390 = 0;
  char v391 = 0;
  char v389 = v389 & 0xF1 | 4;
  char v392 = *(unsigned char *)(v6 + 876);
  __int16 v393 = 0;
  char v394 = 0;
  BOOL v395 = *(unsigned char *)(v6 + 880) == 1;
  char v396 = *(unsigned char *)(*(void *)(v10 + 280) + 394);
  char v402 = 0;
  char v403 = 0;
  char v404 = 0;
  __int16 v405 = 0;
  uint64_t v406 = 0;
  __int16 v407 = 0;
  char v408 = 0;
  char v409 = 0;
  v410[0] = 0;
  char v411 = 0;
  char v401 = 0;
  long long v400 = 0u;
  long long v399 = 0u;
  long long v398 = 0u;
  long long v397 = 0u;
  if (*(unsigned char *)(v6 + 856))
  {
    WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v410, (const WebCore::PrivateClickMeasurement *)(v6 + 544));
    char v411 = 1;
  }
  __int16 v412 = 0;
  char v413 = 0;
  char v414 = 0;
  char v415 = 0;
  char v416 = 0;
  uint64_t v32 = v268;
  WebKit::WebFrame::info(v268, (uint64_t)v417);
  uint64_t v33 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*((void *)v32 + 3) + 8) + 24) + 8) + 48)
                   + 16);
  (*(void (**)(void *))(*v33 + 1368))(v33);
  uint64_t v34 = *(void *)(v33[2] + 8);
  if (v34) {
    uint64_t v35 = v34 - 16;
  }
  else {
    uint64_t v35 = 0;
  }
  v417[37] = *(void *)(v35 + 2120);
  char v418 = 1;
  WebKit::WebFrame::info(v32, (uint64_t)v419);
  v419[296] = 0;
  v419[304] = 0;
  WebCore::ResourceRequest::ResourceRequest(&v420, v28);
  WebCore::ResourceRequest::ResourceRequest(v421, v28);
  if (v26) {
    CFRelease(*(CFTypeRef *)(v26 - 8));
  }
  uint64_t v11 = v25;
  if (v23)
  {
    WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v23);
    WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v23);
  }
  v267 = 0;
  if (v22) {
    WTF::RefCounted<WebCore::UserGestureToken>::deref(v22);
  }
  uint64_t v14 = v166;
  uint64_t v36 = v166[5];
  uint64_t v37 = *(void *)(*(void *)(v25 + 16) + 8);
  if (v37) {
    uint64_t v38 = v37 - 16;
  }
  else {
    uint64_t v38 = 0;
  }
  uint64_t v39 = *(void *)(v38 + 40);
  uint64_t v370 = 0;
  IPC::Connection::createSyncMessageEncoder(3750, v39, &v370, &v369);
  uint64_t v40 = v369;
  IPC::ArgumentCoder<WebCore::WindowFeatures,void>::encode(v369, v8);
  IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v40, (uint64_t)v380);
  IPC::Connection::sendSyncMessage(v36, v370, (uint64_t *)&v369, 4, (uint64_t)&v367, INFINITY);
  if (v368)
  {
    if (v368 != 1) {
      goto LABEL_247;
    }
    v167[0] = (_BYTE)v367;
    int v41 = 1;
    int v266 = 1;
    goto LABEL_215;
  }
  LOBYTE(v269) = 0;
  unsigned __int8 v366 = 0;
  int v42 = (unint64_t *)v367;
  char v16 = IPC::Decoder::decode<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>>(v367, &v371);
  if (!v372) {
    goto LABEL_66;
  }
  unint64_t v18 = v42[1];
  uint64_t v17 = (unsigned char *)*v42;
  unint64_t v43 = v42[2] - *v42;
  if (v18 <= v43)
  {
    unint64_t v47 = 0;
    unint64_t v48 = 0;
    *int v42 = 0;
    v42[1] = 0;
    unint64_t v49 = v42[3];
    if (v49)
    {
      if (v18)
      {
        (*(void (**)(unint64_t))(*(void *)v49 + 16))(v49);
        unint64_t v48 = *v42;
        unint64_t v47 = v42[1];
      }
      else
      {
        unint64_t v47 = 0;
        unint64_t v48 = 0;
      }
      uint64_t v11 = v25;
      uint64_t v14 = v166;
    }
    goto LABEL_62;
  }
  unsigned int v44 = &v17[v43];
  v42[2] = (unint64_t)(v44 + 1);
  if (!v17)
  {
    unint64_t v47 = v18;
    unint64_t v48 = 0;
LABEL_62:
    unint64_t v18 = 0;
    uint64_t v17 = 0;
    *int v42 = 0;
    v42[1] = 0;
    unint64_t v50 = v42[3];
    if (v50)
    {
      if (v47)
      {
        (*(void (**)(unint64_t, unint64_t, unint64_t))(*(void *)v50 + 16))(v50, v48, v47);
        uint64_t v17 = (unsigned char *)*v42;
        unint64_t v18 = v42[1];
      }
      else
      {
        unint64_t v18 = 0;
        uint64_t v17 = 0;
      }
      uint64_t v11 = v25;
      uint64_t v14 = v166;
    }
    goto LABEL_63;
  }
  unsigned int v45 = *v44;
  if (v45 >= 2)
  {
LABEL_63:
    *int v42 = 0;
    v42[1] = 0;
    unint64_t v51 = v42[3];
    if (v51 && v18) {
      (*(void (**)(unint64_t, unsigned char *))(*(void *)v51 + 16))(v51, v17);
    }
LABEL_64:
    v373[0] = 0;
    char v377 = 0;
    goto LABEL_65;
  }
  if (!v45)
  {
    v373[0] = 0;
    char v376 = 0;
    char v377 = 1;
    goto LABEL_47;
  }
  IPC::Decoder::decode<WebKit::WebPageCreationParameters>(v42, v167);
  if (!(_BYTE)v262) {
    goto LABEL_64;
  }
  char v16 = (IPC::Encoder *)WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v373, (uint64_t *)v167);
  char v376 = 1;
  char v377 = 1;
  if (!(_BYTE)v262 || (WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v167), v377))
  {
LABEL_47:
    if (!v372) {
      goto LABEL_241;
    }
    *(_OWORD *)v167 = v371;
    v167[16] = 0;
    char v264 = 0;
    if (v376)
    {
      WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v167[16], (uint64_t *)v373);
      char v264 = 1;
      unsigned __int8 v265 = 1;
      if (v377)
      {
        if (v376)
        {
          WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)v373);
          if (!v265) {
            goto LABEL_67;
          }
        }
      }
    }
    else
    {
      unsigned __int8 v265 = 1;
    }
    int i = 1;
    goto LABEL_69;
  }
LABEL_65:
  unint64_t v52 = *v42;
  unint64_t v53 = v42[1];
  *int v42 = 0;
  v42[1] = 0;
  unint64_t v54 = v42[3];
  if (v54)
  {
    if (v53)
    {
      char v16 = (IPC::Encoder *)(*(uint64_t (**)(unint64_t, unint64_t))(*(void *)v54 + 16))(v54, v52);
      if (v377) {
        goto LABEL_47;
      }
    }
  }
LABEL_66:
  v167[0] = 0;
  unsigned __int8 v265 = 0;
LABEL_67:
  uint64_t v17 = (unsigned char *)*v42;
  unint64_t v18 = v42[1];
  *int v42 = 0;
  v42[1] = 0;
  char v16 = (IPC::Encoder *)v42[3];
  if (v16) {
    goto LABEL_242;
  }
LABEL_68:
  for (int i = 0; ; int i = v265)
  {
LABEL_69:
    if (v366 == i)
    {
      if (v366)
      {
        *(void *)&long long v269 = *(void *)v167;
        BYTE8(v269) = v167[8];
        uint64_t v17 = &v167[16];
        if (v365 == v264)
        {
          if (v365)
          {
            v270 = *(const char ***)&v167[16];
            __int16 v271 = v168;
            int v55 = v171;
            int v171 = 0;
            char v56 = v172;
            char v172 = 0;
            CFTypeRef v57 = v272;
            v272 = v169;
            char v58 = (WTF::StringImpl *)v273;
            uint64_t v59 = v170;
            v169 = 0;
            uint64_t v170 = 0;
            uint64_t v273 = v59;
            int v274 = v55;
            char v275 = v56;
            if (v57) {
              WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v57, v58);
            }
            int v60 = v175;
            int v175 = 0;
            char v61 = v176;
            char v176 = 0;
            uint64_t v62 = v276;
            v276 = v173;
            uint64_t v63 = (WTF::StringImpl *)v277;
            CFTypeRef v64 = v174;
            v173 = 0;
            v174 = 0;
            v277 = v64;
            int v278 = v60;
            char v279 = v61;
            if (v62) {
              WTF::RobinHoodHashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,BOOL,unsigned int,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,BOOL,unsigned int,double>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::deallocateTable(v62, v63);
            }
            long long v280 = v177;
            CFTypeRef v65 = v179;
            v179 = 0;
            int v66 = v282;
            uint64_t v281 = v178;
            v282 = v65;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2) {
                WTF::StringImpl::destroy(v66, v63);
              }
              else {
                *(_DWORD *)v66 -= 2;
              }
            }
            uint64_t v283 = v180;
            char v284 = v181;
            WebCore::Color::operator=();
            long long v287 = v184;
            long long v288 = v185;
            long long v289 = v186;
            long long v290 = v187;
            long long v285 = v182;
            long long v286 = v183;
            uint64_t v68 = v188;
            v188 = 0;
            uint64_t v69 = v291;
            v291 = v68;
            if (v69)
            {
              if (*(_DWORD *)v69 == 2) {
                WTF::StringImpl::destroy(v69, v67);
              }
              else {
                *(_DWORD *)v69 -= 2;
              }
            }
            char v292 = v189;
            if (HIDWORD(v294)) {
              WTF::VectorDestructor<true,WebKit::BackForwardListItemState>::destruct(v293, (WTF *)((char *)v293 + 312 * HIDWORD(v294)));
            }
            char v70 = v293;
            if (v293)
            {
              v293 = 0;
              LODWORD(v294) = 0;
              WTF::fastFree(v70, v67);
            }
            v293 = v190;
            uint64_t v71 = v191;
            v190 = 0;
            uint64_t v191 = 0;
            uint64_t v294 = v71;
            long long v299 = v196;
            *(_OWORD *)v300 = *(_OWORD *)v197;
            *(_DWORD *)&v300[15] = *(_DWORD *)&v197[15];
            long long v295 = v192;
            long long v296 = v193;
            long long v297 = v194;
            long long v298 = v195;
            if (HIDWORD(v302)) {
              WTF::VectorDestructor<true,WTF::String>::destruct(v301, (WTF *)((char *)v301 + 8 * HIDWORD(v302)));
            }
            uint64_t v72 = v301;
            if (v301)
            {
              v301 = 0;
              LODWORD(v302) = 0;
              WTF::fastFree(v72, v67);
            }
            v301 = v198;
            uint64_t v73 = v199;
            v198 = 0;
            uint64_t v199 = 0;
            uint64_t v302 = v73;
            long long v309 = v206;
            long long v310 = v207;
            char v311 = v208;
            long long v305 = v202;
            long long v306 = v203;
            long long v308 = v205;
            long long v307 = v204;
            long long v304 = v201;
            long long v303 = v200;
            WebCore::Color::operator=();
            char v312 = v209;
            if (HIDWORD(v314)) {
              WTF::VectorDestructor<true,WTF::String>::destruct(v313, (WTF *)((char *)v313 + 8 * HIDWORD(v314)));
            }
            uint64_t v75 = v313;
            if (v313)
            {
              v313 = 0;
              LODWORD(v314) = 0;
              WTF::fastFree(v75, v74);
            }
            BOOL v76 = v210;
            v210 = 0;
            v313 = v76;
            uint64_t v77 = v211;
            uint64_t v211 = 0;
            uint64_t v314 = v77;
            if (HIDWORD(v316))
            {
              char v78 = (const char ***)v315;
              uint64_t v79 = 8 * HIDWORD(v316);
              do
              {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v78);
                char v78 = (const char ***)(v80 + 8);
                v79 -= 8;
              }
              while (v79);
            }
            int v81 = v315;
            if (v315)
            {
              v315 = 0;
              LODWORD(v316) = 0;
              WTF::fastFree(v81, v74);
            }
            uint64_t v82 = v212;
            v212 = 0;
            v315 = v82;
            uint64_t v83 = v213;
            uint64_t v213 = 0;
            uint64_t v316 = v83;
            if (HIDWORD(v318))
            {
              BOOL v84 = (const char ***)v317;
              uint64_t v85 = 8 * HIDWORD(v318);
              do
              {
                WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(v84);
                BOOL v84 = (const char ***)(v86 + 8);
                v85 -= 8;
              }
              while (v85);
            }
            uint64_t v87 = v317;
            if (v317)
            {
              v317 = 0;
              LODWORD(v31++*(_DWORD *)(this + 8) = 0;
              WTF::fastFree(v87, v74);
            }
            uint64_t v88 = v214;
            v214 = 0;
            v317 = v88;
            uint64_t v89 = v215;
            uint64_t v215 = 0;
            uint64_t v318 = v89;
            int v319 = v216;
            uint64_t v90 = v217;
            v217 = 0;
            CFTypeRef v91 = v320;
            v320 = v90;
            if (v91)
            {
              if (*(_DWORD *)v91 == 2) {
                WTF::StringImpl::destroy(v91, (WTF::StringImpl *)v74);
              }
              else {
                *(_DWORD *)v91 -= 2;
              }
            }
            uint64_t v321 = v218;
            char v322 = v219;
            char v92 = v220;
            v220 = 0;
            uint64_t v93 = v323;
            v323 = v92;
            if (v93) {
              WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v93, (WTF::StringImpl *)v74);
            }
            if (HIDWORD(v325)) {
              WTF::VectorDestructor<true,WTF::String>::destruct(v324, (WTF *)((char *)v324 + 8 * HIDWORD(v325)));
            }
            CFTypeRef v94 = v324;
            if (v324)
            {
              v324 = 0;
              LODWORD(v325) = 0;
              WTF::fastFree(v94, v74);
            }
            char v95 = v221;
            v221 = 0;
            v324 = v95;
            uint64_t v96 = v222;
            uint64_t v222 = 0;
            uint64_t v325 = v96;
            std::__optional_storage_base<WebCore::ApplicationManifest,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::ApplicationManifest,false>>((WebCore::ApplicationManifest *)v326, v223);
            v326[140] = v224;
            char v327 = v225;
            uint64_t v328 = v226;
            if (HIDWORD(v330)) {
              WTF::VectorDestructor<true,std::tuple<Inspector::BackendDispatcher::CommonErrorCode,WTF::String>>::destruct(v329, (WTF *)((char *)v329 + 16 * HIDWORD(v330)));
            }
            char v98 = v329;
            if (v329)
            {
              v329 = 0;
              LODWORD(v33IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              WTF::fastFree(v98, v97);
            }
            uint64_t v99 = v227;
            v227 = 0;
            v329 = v99;
            uint64_t v100 = v228;
            uint64_t v228 = 0;
            uint64_t v330 = v100;
            if (HIDWORD(v332))
            {
              uint64_t v101 = 104 * HIDWORD(v332);
              uint64_t v102 = (WTF *)((char *)v331 + 16);
              do
              {
                WebCore::UserScript::~UserScript(v102, v97);
                uint64_t v102 = (WebCore::UserScript *)(v103 + 104);
                v101 -= 104;
              }
              while (v101);
            }
            int v104 = v331;
            if (v331)
            {
              v331 = 0;
              LODWORD(v3++*(_DWORD *)(this + 32) = 0;
              WTF::fastFree(v104, v97);
            }
            uint64_t v105 = v229;
            v229 = 0;
            v331 = v105;
            uint64_t v106 = v230;
            uint64_t v230 = 0;
            uint64_t v332 = v106;
            if (HIDWORD(v334)) {
              WTF::VectorDestructor<true,WebKit::WebUserStyleSheetData>::destruct(v333, (WTF *)((char *)v333 + 120 * HIDWORD(v334)));
            }
            uint64_t v107 = v333;
            if (v333)
            {
              v333 = 0;
              LODWORD(v334) = 0;
              WTF::fastFree(v107, v97);
            }
            v108 = v231;
            v231 = 0;
            v333 = v108;
            uint64_t v109 = v232;
            uint64_t v232 = 0;
            uint64_t v334 = v109;
            if (HIDWORD(v336)) {
              WTF::VectorDestructor<true,WebCore::DOMCacheEngine::CacheInfo>::destruct(v335, (WTF *)((char *)v335 + 24 * HIDWORD(v336)));
            }
            v110 = v335;
            if (v335)
            {
              v335 = 0;
              LODWORD(v336) = 0;
              WTF::fastFree(v110, v97);
            }
            v111 = v233;
            v233 = 0;
            v335 = v111;
            uint64_t v112 = v234;
            uint64_t v234 = 0;
            uint64_t v336 = v112;
            if (HIDWORD(v338))
            {
              v113 = v337;
              uint64_t v114 = 120 * HIDWORD(v338);
              do
              {
                v115 = (WTF::StringImpl *)*((void *)v113 + 10);
                *((void *)v113 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
                if (v115)
                {
                  if (*(_DWORD *)v115 == 2) {
                    WTF::StringImpl::destroy(v115, (WTF::StringImpl *)v97);
                  }
                  else {
                    *(_DWORD *)v115 -= 2;
                  }
                }
                v116 = (unsigned int *)*((void *)v113 + 1);
                *((void *)v113 + 1) = 0;
                if (v116) {
                  WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v116);
                }
                v117 = *(WTF::StringImpl **)v113;
                *(void *)v113 = 0;
                if (v117)
                {
                  if (*(_DWORD *)v117 == 2) {
                    WTF::StringImpl::destroy(v117, (WTF::StringImpl *)v97);
                  }
                  else {
                    *(_DWORD *)v117 -= 2;
                  }
                }
                v113 = (WTF *)((char *)v113 + 120);
                v114 -= 120;
              }
              while (v114);
            }
            v118 = v337;
            if (v337)
            {
              v337 = 0;
              LODWORD(v33++*(_DWORD *)(this + 8) = 0;
              WTF::fastFree(v118, v97);
            }
            v119 = v235;
            v235 = 0;
            v337 = v119;
            uint64_t v120 = v236;
            uint64_t v236 = 0;
            uint64_t v338 = v120;
            if (v343 == v241)
            {
              if (v343)
              {
                uint64_t v339 = v237;
                char v340 = v238;
                if (HIDWORD(v342))
                {
                  v121 = v341;
                  uint64_t v122 = 152 * HIDWORD(v342);
                  do
                  {
                    WebKit::WebExtensionContextParameters::~WebExtensionContextParameters(v121, v97);
                    v121 = (WTF *)(v123 + 152);
                    v122 -= 152;
                  }
                  while (v122);
                }
                v124 = v341;
                if (v341)
                {
                  v341 = 0;
                  LODWORD(v342) = 0;
                  WTF::fastFree(v124, v97);
                }
                v125 = v239;
                v239 = 0;
                v341 = v125;
                uint64_t v126 = v240;
                uint64_t v240 = 0;
                uint64_t v342 = v126;
              }
            }
            else if (v343)
            {
              WTF::Vector<WebKit::WebExtensionContextParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v341, v97);
              char v343 = 0;
            }
            else
            {
              uint64_t v339 = v237;
              char v340 = v238;
              v127 = v239;
              v239 = 0;
              v341 = v127;
              uint64_t v128 = v240;
              uint64_t v240 = 0;
              uint64_t v342 = v128;
              char v343 = 1;
            }
            std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>((uint64_t)v344, v242);
            v344[2] = v243;
            char v345 = v244;
            v130 = v245;
            v245 = 0;
            v131 = v346;
            v346 = v130;
            if (v131)
            {
              if (*(_DWORD *)v131 == 2) {
                WTF::StringImpl::destroy(v131, v129);
              }
              else {
                *(_DWORD *)v131 -= 2;
              }
            }
            if (HIDWORD(v348)) {
              WTF::VectorDestructor<true,WTF::String>::destruct(v347, (WTF *)((char *)v347 + 8 * HIDWORD(v348)));
            }
            v132 = v347;
            if (v347)
            {
              v347 = 0;
              LODWORD(v34++*(_DWORD *)(this + 8) = 0;
              WTF::fastFree(v132, v129);
            }
            v133 = v246;
            v246 = 0;
            v347 = v133;
            uint64_t v134 = v247;
            uint64_t v247 = 0;
            uint64_t v348 = v134;
            v135 = v248;
            v248 = 0;
            v136 = v349;
            v349 = v135;
            if (v136) {
LABEL_248:
            }
              WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v136, v129);
            __int16 v350 = v249;
            std::__optional_storage_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::HashSet<WTF::String,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::MemoryCompactLookupOnlyRobinHoodHashTableTraits>,false>>((uint64_t)&v351, v250);
            if (v353 == v252)
            {
              if (v353) {
                int v352 = v251;
              }
            }
            else if (v353)
            {
              char v353 = 0;
            }
            else
            {
              int v352 = v251;
              char v353 = 1;
            }
            char v354 = v253;
            v138 = v254;
            v254 = 0;
            v139 = v355;
            v355 = v138;
            if (v139)
            {
              if (*(_DWORD *)v139 == 2) {
                WTF::StringImpl::destroy(v139, v137);
              }
              else {
                *(_DWORD *)v139 -= 2;
              }
            }
            *(_OWORD *)v356 = *(_OWORD *)v255;
            *(void *)&v356[13] = *(void *)&v255[13];
            std::__optional_storage_base<WebKit::RemotePageParameters,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebKit::RemotePageParameters,false>>((uint64_t)v357, (uint64_t)v256);
            *(_OWORD *)&v357[216] = *(_OWORD *)&v256[216];
            long long v358 = v257;
            uint64_t v359 = v258;
            if (HIDWORD(v361)) {
              WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(v360, (WTF *)((char *)v360 + 24 * HIDWORD(v361)));
            }
            v140 = v360;
            if (v360)
            {
              v360 = 0;
              LODWORD(v361) = 0;
              WTF::fastFree(v140, v17);
            }
            v141 = v259;
            v259 = 0;
            v360 = v141;
            uint64_t v142 = v260;
            uint64_t v260 = 0;
            uint64_t v361 = v142;
            if (HIDWORD(v363)) {
              WTF::VectorDestructor<true,WebCore::LinkDecorationFilteringData>::destruct(v362, (WTF *)((char *)v362 + 24 * HIDWORD(v363)));
            }
            v143 = v362;
            if (v362)
            {
              v362 = 0;
              LODWORD(v36WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
              WTF::fastFree(v143, v17);
            }
            v144 = v261;
            v261 = 0;
            v362 = v144;
            uint64_t v145 = v262;
            uint64_t v262 = 0;
            uint64_t v363 = v145;
            v146 = v263;
            v263 = 0;
            v147 = (const char **)v364;
            v364 = v146;
            if (v147)
            {
              WebKit::SandboxExtensionImpl::~SandboxExtensionImpl(v147);
              WTF::fastFree(v163, v164);
            }
          }
        }
        else if (v365)
        {
          WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v270);
          char v365 = 0;
        }
        else
        {
          WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v270, (uint64_t *)&v167[16]);
          char v365 = 1;
        }
      }
    }
    else if (v366)
    {
      if (v365) {
        WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v270);
      }
      unsigned __int8 v366 = 0;
    }
    else
    {
      long long v269 = *(_OWORD *)v167;
      LOBYTE(v27IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      char v365 = 0;
      if (v264)
      {
        WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v270, (uint64_t *)&v167[16]);
        char v365 = 1;
      }
      unsigned __int8 v366 = 1;
    }
    if (v265 && v264) {
      WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&v167[16]);
    }
    if (!v366)
    {
      v167[0] = 13;
      int v266 = 1;
      goto LABEL_214;
    }
    if (v368)
    {
LABEL_247:
      v136 = (WTF::StringImpl **)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_248;
    }
    v148 = v367;
    v367 = 0;
    *(void *)v373 = v148;
    *(_OWORD *)&v373[8] = v269;
    LOBYTE(v374[0]) = 0;
    char v379 = 0;
    if (v365)
    {
      WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)v374, (uint64_t *)&v270);
      char v379 = 1;
      uint64_t v149 = *(void *)v373;
      *(void *)v373 = 0;
      *(void *)v167 = v149;
      *(_OWORD *)&v167[8] = *(_OWORD *)&v373[8];
      LOBYTE(v16++*(_DWORD *)(this + 8) = 0;
      unsigned __int8 v265 = 0;
      WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v168, (uint64_t *)v374);
      unsigned __int8 v265 = 1;
      int v266 = 0;
      if (v379) {
        WebKit::WebPageCreationParameters::~WebPageCreationParameters(v374);
      }
    }
    else
    {
      *(void *)v373 = 0;
      *(void *)v167 = v148;
      *(_OWORD *)&v167[8] = v269;
      LOBYTE(v16++*(_DWORD *)(this + 8) = 0;
      unsigned __int8 v265 = 0;
      int v266 = 0;
    }
    v150 = *(IPC::Decoder **)v373;
    *(void *)v373 = 0;
    if (v150)
    {
      IPC::Decoder::~Decoder(v150);
      WTF::fastFree(v161, v162);
    }
    if (v366 && v365) {
      WebKit::WebPageCreationParameters::~WebPageCreationParameters(&v270);
    }
LABEL_214:
    int v41 = v368;
    if (v368 != -1) {
LABEL_215:
    }
      ((void (*)(unsigned char *, IPC::Decoder **))off_1EE9F59C0[v41])(v373, &v367);
    char v16 = v369;
    v369 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v17);
      char v16 = (IPC::Encoder *)WTF::fastFree(v159, v160);
    }
    int v151 = v266;
    if (v266)
    {
      uint64_t v152 = 0;
      goto LABEL_234;
    }
    *(_OWORD *)v373 = *(_OWORD *)&v167[8];
    v373[16] = 0;
    char v378 = 0;
    int v153 = v265;
    if (v265)
    {
      char v16 = (IPC::Encoder *)WebKit::WebPageCreationParameters::WebPageCreationParameters((uint64_t)&v373[16], &v168);
      int v154 = 1;
      char v378 = 1;
    }
    else
    {
      int v154 = 0;
    }
    if (!v373[8]) {
      break;
    }
    uint64_t v155 = *(void *)(*(void *)(v11 + 16) + 8);
    if (v155) {
      uint64_t v156 = v155 - 16;
    }
    else {
      uint64_t v156 = 0;
    }
    if (v153)
    {
      v157 = *(const char ***)(v156 + 40);
      if (!v375) {
        char v375 = 1;
      }
      v374[131] = v157;
      WebKit::WebProcess::createWebPage((uint64_t)v14, *(uint64_t *)v373, (uint64_t)&v373[16]);
      if (v373[8])
      {
        *(void *)&long long v269 = *(void *)v373;
        uint64_t v152 = *(void *)(WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<PAL::SessionID,std::unique_ptr<WebCore::NetworkStorageSession>,WTF::DefaultHash<PAL::SessionID>,WTF::HashTraits<PAL::SessionID>,WTF::HashTraits<std::unique_ptr<WebCore::NetworkStorageSession>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<PAL::SessionID>>,PAL::SessionID>(v14 + 15, &v269)+ 48);
        if (v378) {
          goto LABEL_232;
        }
        goto LABEL_233;
      }
    }
LABEL_241:
    __break(1u);
LABEL_242:
    if (!v18) {
      goto LABEL_68;
    }
    (*(void (**)(IPC::Encoder *, unsigned char *))(*(void *)v16 + 16))(v16, v17);
  }
  uint64_t v152 = 0;
  if (!v154) {
    goto LABEL_233;
  }
LABEL_232:
  WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)&v373[16]);
LABEL_233:
  int v151 = v266;
LABEL_234:
  if (v151 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_1EE9F58D0[v151])(v373, v167);
  }
  WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v380);
  if (v268) {
    CFRelease(*((CFTypeRef *)v268 + 1));
  }
  return v152;
}

BOOL WebKit::WebChromeClient::testProcessIncomingSyncMessagesWhenWaitingForSyncReply(WebKit::WebChromeClient *this)
{
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 1u);
  {
LABEL_23:
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v16 = *(void *)(v4 + 2120);
  uint64_t v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3617, 0, &v24, &v23);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v23, &v16);
  IPC::Connection::sendSyncMessage(v2, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
  if (!v22)
  {
    __int16 v20 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
    if (!HIBYTE(v20))
    {
      LOBYTE(v17) = 13;
      int v5 = 1;
      int v19 = 1;
      int v6 = v22;
      if (v22 == -1) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    int v6 = v22;
    if (!v22)
    {
      int v5 = 0;
      uint64_t v8 = v21;
      uint64_t v21 = 0;
      uint64_t v17 = v8;
      unsigned __int8 v18 = v20;
      int v19 = 0;
      goto LABEL_12;
    }
    goto LABEL_22;
  }
  if (v22 != 1)
  {
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_23;
  }
  LOBYTE(v17) = (_BYTE)v21;
  int v5 = 1;
  int v19 = 1;
  int v6 = 1;
LABEL_12:
  ((void (*)(__int16 *, uint64_t **))off_1EE9F59C0[v6])(&v20, &v21);
LABEL_13:
  uint64_t v9 = v23;
  uint64_t v23 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v7);
    WTF::fastFree(v13, v14);
  }
  int v10 = v18;
  ((void (*)(uint64_t **, uint64_t **))off_1EE9F58E0[v5])(&v21, &v17);
  if (v5) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v10 == 0;
  }
  BOOL result = !v11;
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 0xFFFFFFFF);
  return result;
}

void WebKit::WebChromeClient::show(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  WebKit::WebPage::show((WebKit::WebPage *)v2);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

BOOL WebKit::WebChromeClient::canRunModal(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = *(unsigned __int8 *)(v2 + 793);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3 != 0;
}

void WebKit::WebChromeClient::runModal(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::WebPage::runModal(v2);
  if (v1)
  {
    int v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

IPC::Encoder **WebKit::WebChromeClient::reportProcessCPUTime(WebKit::WebProcess *a1, unsigned int a2, double a3)
{
  double v7 = a3;
  uint64_t v4 = WebKit::WebProcess::singleton(a1);
  v6[0] = &v7;
  v6[1] = (double *)a2;
  return IPC::MessageSender::send<Messages::WebProcessPool::ReportWebContentCPUTime>(v4 + 24, v6);
}

void WebKit::WebChromeClient::setToolbarsVisible(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  char v13 = a2;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2083;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
  int v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

BOOL WebKit::WebChromeClient::toolbarsVisible(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 376) + 88))(*(void *)(v2 + 376), v2);
  if (!v3)
  {
    {
      uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v7 = *(void *)(v2 + 40);
      uint64_t v24 = 0;
      IPC::Connection::createSyncMessageEncoder(3761, v7, &v24, &v23);
      IPC::Connection::sendSyncMessage(v6, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
      if (v22)
      {
        if (v22 == 1)
        {
          int v8 = 0;
          LOBYTE(v17) = (_BYTE)v21;
          int v9 = 1;
          int v19 = 1;
          int v10 = 1;
LABEL_16:
          ((void (*)(__int16 *, uint64_t **))off_1EE9F59C0[v10])(&v20, &v21);
LABEL_17:
          char v13 = v23;
          uint64_t v23 = 0;
          if (v13)
          {
            IPC::Encoder::~Encoder(v13, v11);
            WTF::fastFree(v14, v15);
          }
          BOOL v4 = (v9 | v8) != 0;
          ((void (*)(uint64_t **, uint64_t **))off_1EE9F58F0[v9])(&v21, &v17);
          if (v1) {
            goto LABEL_6;
          }
          return v4;
        }
      }
      else
      {
        __int16 v20 = 0;
        IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
        if (!HIBYTE(v20))
        {
          int v8 = 0;
          LOBYTE(v17) = 13;
          int v9 = 1;
          int v19 = 1;
          int v10 = v22;
          if (v22 == -1) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        int v10 = v22;
        if (!v22)
        {
          int v9 = 0;
          uint64_t v12 = v21;
          uint64_t v21 = 0;
          int v8 = v20;
          uint64_t v17 = v12;
          char v18 = v20;
          int v19 = 0;
          goto LABEL_16;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  BOOL v4 = v3 == 1;
  if (v1) {
LABEL_6:
  }
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

void WebKit::WebChromeClient::setStatusbarVisible(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  char v13 = a2;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2081;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
  int v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

BOOL WebKit::WebChromeClient::statusbarVisible(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 376) + 72))(*(void *)(v2 + 376), v2);
  if (!v3)
  {
    {
      uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v7 = *(void *)(v2 + 40);
      uint64_t v24 = 0;
      IPC::Connection::createSyncMessageEncoder(3760, v7, &v24, &v23);
      IPC::Connection::sendSyncMessage(v6, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
      if (v22)
      {
        if (v22 == 1)
        {
          int v8 = 0;
          LOBYTE(v17) = (_BYTE)v21;
          int v9 = 1;
          int v19 = 1;
          int v10 = 1;
LABEL_16:
          ((void (*)(__int16 *, uint64_t **))off_1EE9F59C0[v10])(&v20, &v21);
LABEL_17:
          char v13 = v23;
          uint64_t v23 = 0;
          if (v13)
          {
            IPC::Encoder::~Encoder(v13, v11);
            WTF::fastFree(v14, v15);
          }
          BOOL v4 = (v9 | v8) != 0;
          ((void (*)(uint64_t **, uint64_t **))off_1EE9F5900[v9])(&v21, &v17);
          if (v1) {
            goto LABEL_6;
          }
          return v4;
        }
      }
      else
      {
        __int16 v20 = 0;
        IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
        if (!HIBYTE(v20))
        {
          int v8 = 0;
          LOBYTE(v17) = 13;
          int v9 = 1;
          int v19 = 1;
          int v10 = v22;
          if (v22 == -1) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        int v10 = v22;
        if (!v22)
        {
          int v9 = 0;
          uint64_t v12 = v21;
          uint64_t v21 = 0;
          int v8 = v20;
          uint64_t v17 = v12;
          char v18 = v20;
          int v19 = 0;
          goto LABEL_16;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  BOOL v4 = v3 == 1;
  if (v1) {
LABEL_6:
  }
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

uint64_t WebKit::WebChromeClient::scrollbarsVisible(WebKit::WebChromeClient *this)
{
  return 1;
}

void WebKit::WebChromeClient::setMenubarVisible(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  char v13 = a2;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2074;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
  int v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

BOOL WebKit::WebChromeClient::menubarVisible(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 376) + 80))(*(void *)(v2 + 376), v2);
  if (!v3)
  {
    {
      uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v7 = *(void *)(v2 + 40);
      uint64_t v24 = 0;
      IPC::Connection::createSyncMessageEncoder(3759, v7, &v24, &v23);
      IPC::Connection::sendSyncMessage(v6, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
      if (v22)
      {
        if (v22 == 1)
        {
          int v8 = 0;
          LOBYTE(v17) = (_BYTE)v21;
          int v9 = 1;
          int v19 = 1;
          int v10 = 1;
LABEL_16:
          ((void (*)(__int16 *, uint64_t **))off_1EE9F59C0[v10])(&v20, &v21);
LABEL_17:
          char v13 = v23;
          uint64_t v23 = 0;
          if (v13)
          {
            IPC::Encoder::~Encoder(v13, v11);
            WTF::fastFree(v14, v15);
          }
          BOOL v4 = (v9 | v8) != 0;
          ((void (*)(uint64_t **, uint64_t **))off_1EE9F5910[v9])(&v21, &v17);
          if (v1) {
            goto LABEL_6;
          }
          return v4;
        }
      }
      else
      {
        __int16 v20 = 0;
        IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
        if (!HIBYTE(v20))
        {
          int v8 = 0;
          LOBYTE(v17) = 13;
          int v9 = 1;
          int v19 = 1;
          int v10 = v22;
          if (v22 == -1) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
        int v10 = v22;
        if (!v22)
        {
          int v9 = 0;
          uint64_t v12 = v21;
          uint64_t v21 = 0;
          int v8 = v20;
          uint64_t v17 = v12;
          char v18 = v20;
          int v19 = 0;
          goto LABEL_16;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
    }
    uint64_t v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  BOOL v4 = v3 == 1;
  if (v1) {
LABEL_6:
  }
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

void WebKit::WebChromeClient::setResizable(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  char v13 = a2;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2073;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
  int v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::addMessageToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v13) {
    uint64_t v14 = v13 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  CFRetain(*(CFTypeRef *)(v14 + 8));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v14 + 376)
                                                                                                + 16))(*(void *)(v14 + 376), v14, a2, a3, a4, a5, a6, a7);
  if (v13)
  {
    uint64_t v15 = *(const void **)(v13 - 8);
    CFRelease(v15);
  }
}

void WebKit::WebChromeClient::addMessageWithArgumentsToConsole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v16 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v16) {
    uint64_t v17 = v16 - 16;
  }
  else {
    uint64_t v17 = 0;
  }
  CFRetain(*(CFTypeRef *)(v17 + 8));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int, uint64_t))(**(void **)(v17 + 376) + 24))(*(void *)(v17 + 376), v17, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v16)
  {
    char v18 = *(const void **)(v16 - 8);
    CFRelease(v18);
  }
}

BOOL WebKit::WebChromeClient::canRunBeforeUnloadConfirmPanel(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = *(unsigned __int8 *)(v2 + 792);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3 != 0;
}

BOOL WebKit::WebChromeClient::runBeforeUnloadConfirmPanel(WebKit::WebChromeClient *this, const WTF::String *a2, WebCore::LocalFrame *a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::fromCoreFrame((uint64_t)a3, &v32);
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v30 = v6;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v31, &v30, 1);
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  long long v25 = *((_OWORD *)v32 + 5);
  WebKit::WebFrame::info(v32, (uint64_t)v38);
  v26[0] = &v25;
  v26[1] = v38;
  void v26[2] = a2;
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v6);
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
  if (!v10)
  {
    LOBYTE(v27) = 3;
    int v13 = 1;
    int v29 = 1;
    goto LABEL_18;
  }
  uint64_t v12 = v10;
  uint64_t v37 = 0;
  IPC::Connection::createSyncMessageEncoder(3772, v9, &v37, &v36);
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(v36, (uint64_t)v26);
  IPC::Connection::sendSyncMessage(v12, v37, (uint64_t *)&v36, 0, (uint64_t)&v34, INFINITY);
  if (!v35)
  {
    __int16 v33 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v34, &v33);
    if (!HIBYTE(v33))
    {
      LOBYTE(v27) = 13;
      int v13 = 1;
      int v29 = 1;
      int v14 = v35;
      if (v35 == -1) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
    int v14 = v35;
    if (!v35)
    {
      int v13 = 0;
      uint64_t v15 = v34;
      uint64_t v34 = 0;
      uint64_t v27 = v15;
      unsigned __int8 v28 = v33;
      int v29 = 0;
      goto LABEL_15;
    }
LABEL_36:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (v35 != 1) {
    goto LABEL_36;
  }
  LOBYTE(v27) = (_BYTE)v34;
  int v13 = 1;
  int v29 = 1;
  int v14 = 1;
LABEL_15:
  ((void (*)(__int16 *, uint64_t **))off_1EE9F59C0[v14])(&v33, &v34);
LABEL_16:
  uint64_t v16 = v36;
  uint64_t v36 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v11);
    WTF::fastFree(v23, v24);
  }
LABEL_18:
  uint64_t v17 = v43;
  unint64_t v43 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v11);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  if (v42 != -1) {
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v42])(&v34, &v41);
  }
  int v42 = -1;
  CFTypeRef v18 = cf;
  CFTypeRef cf = 0;
  if (v18) {
    CFRelease(v18);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v39);
  int v19 = v28;
  ((void (*)(unsigned char *, uint64_t **))off_1EE9F5920[v13])(v38, &v27);
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v31, v20);
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  if (v32) {
    CFRelease(*((CFTypeRef *)v32 + 1));
  }
  if (v13) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = v19 == 0;
  }
  return !v21;
}

void WebKit::WebChromeClient::closeWindow(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = *(WebCore::Page **)(v2 + 48);
  uint64_t v10 = 0;
  WebCore::Page::setGroupName(v3, (const WTF::String *)&v10);
  uint64_t v5 = v10;
  uint64_t v10 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v4);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  uint64_t v6 = *(void *)(v2 + 88);
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = *(void *)(v6 + 24);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8)
    {
      if (!*(unsigned char *)(v8 + 144))
      {
        uint64_t v9 = (unsigned int *)(v8 + 8);
        atomic_fetch_add((atomic_uint *volatile)(v8 + 8), 1u);
        WebCore::FrameLoader::stopForUserCancel(*(WebCore::FrameLoader **)(v8 + 280));
        WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v9);
      }
    }
  }
  WebKit::WebPage::sendClose((WebKit::WebPage *)v2);
  CFRelease(*(CFTypeRef *)(v6 + 8));
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
}

uint64_t WebKit::WebChromeClient::rootFrameRemoved(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t result = *(void *)(v3 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(*(void *)result + 256))(result, *(void *)(a2 + 32), *(void *)(a2 + 40));
  }
  return result;
}

void WebKit::WebChromeClient::runJavaScriptAlert(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!WebKit::shouldSuppressJavaScriptDialogs(a2, a2))
  {
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v31);
    uint64_t v6 = *(void *)(*((void *)this + 2) + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
    CFRetain(*(CFTypeRef *)(v7 + 8));
    (*(void (**)(void, uint64_t, const WTF::String *, WebKit::WebFrame *))(**(void **)(v7 + 376) + 32))(*(void *)(v7 + 376), v7, a3, v31);
    WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)v7);
    atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 1u);
    CFRetain(*(CFTypeRef *)(v7 + 8));
    uint64_t v29 = v7;
    WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v30, &v29, 1);
    uint64_t v29 = 0;
    if (v6) {
      CFRelease(*(CFTypeRef *)(v6 - 8));
    }
    long long v25 = *((_OWORD *)v31 + 5);
    WebKit::WebFrame::info(v31, (uint64_t)v37);
    v26[0] = &v25;
    v26[1] = v37;
    void v26[2] = a3;
    WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v7);
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v8 = v7 + 32;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v35 = 0;
      IPC::Connection::createSyncMessageEncoder(3773, v10, &v35, &v34);
      IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(v34, (uint64_t)v26);
      IPC::Connection::sendSyncMessage(v12, v35, (uint64_t *)&v34, 4, (uint64_t)&v32, INFINITY);
      uint64_t v13 = v33;
      if (v33)
      {
        if (v33 != 1)
        {
          uint64_t v23 = (WebKit *)std::__throw_bad_variant_access[abi:sn180100]();
          WebKit::shouldSuppressJavaScriptDialogs(v23, v24);
          return;
        }
        LOBYTE(v27) = v32;
      }
      else
      {
        uint64_t v14 = v32;
        uint64_t v32 = 0;
        uint64_t v27 = v14;
      }
      int v28 = v33;
      ((void (*)(char *, uint64_t *))off_1EE9F59C0[v33])(&v36, &v32);
      uint64_t v16 = v34;
      uint64_t v34 = 0;
      if (v16)
      {
        IPC::Encoder::~Encoder(v16, v15);
        WTF::fastFree(v21, v22);
      }
    }
    else
    {
      LOBYTE(v27) = 3;
      uint64_t v13 = 1;
      int v28 = 1;
    }
    ((void (*)(uint64_t *, uint64_t *))off_1EE9F5930[v13])(&v32, &v27);
    int v28 = -1;
    CFTypeRef v18 = v42;
    int v42 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (v41 != -1) {
      ((void (*)(uint64_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v41])(&v32, &v40);
    }
    int v41 = -1;
    CFTypeRef v19 = cf;
    CFTypeRef cf = 0;
    if (v19) {
      CFRelease(v19);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v38);
    WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v30, v20);
    atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 0xFFFFFFFF);
    if (v6) {
      CFRelease(*(CFTypeRef *)(v6 - 8));
    }
    if (v31) {
      CFRelease(*((CFTypeRef *)v31 + 1));
    }
  }
}

BOOL WebKit::shouldSuppressJavaScriptDialogs(WebKit *this, WebCore::LocalFrame *a2)
{
  uint64_t v2 = *((void *)this + 20);
  return v2
      && *(void *)(v2 + 8)
      && WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument((WebCore::FrameLoaderStateMachine *)(*((void *)this + 35) + 64))
      && *(void *)(*((void *)this + 35) + 96);
}

uint64_t WebKit::WebChromeClient::runJavaScriptConfirm(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (WebKit::shouldSuppressJavaScriptDialogs(a2, a2)) {
    return 0;
  }
  WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v33);
  uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  (*(void (**)(void, uint64_t, const WTF::String *, WebKit::WebFrame *))(**(void **)(v8 + 376) + 40))(*(void *)(v8 + 376), v8, a3, v33);
  WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)v8);
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 1u);
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v31 = v8;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v32, &v31, 1);
  uint64_t v31 = 0;
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  long long v26 = *((_OWORD *)v33 + 5);
  WebKit::WebFrame::info(v33, (uint64_t)v39);
  v27[0] = &v26;
  v27[1] = v39;
  void v27[2] = a3;
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v8);
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v9 = v8 + 32;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  if (v12)
  {
    uint64_t v14 = v12;
    uint64_t v38 = 0;
    IPC::Connection::createSyncMessageEncoder(3774, v11, &v38, &v37);
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(v37, (uint64_t)v27);
    IPC::Connection::sendSyncMessage(v14, v38, (uint64_t *)&v37, 4, (uint64_t)&v35, INFINITY);
    if (v36)
    {
      if (v36 == 1)
      {
        LOBYTE(v2++*(_DWORD *)(this + 8) = (_BYTE)v35;
        int v15 = 1;
        int v30 = 1;
        int v16 = 1;
LABEL_17:
        ((void (*)(__int16 *, uint64_t **))off_1EE9F59C0[v16])(&v34, &v35);
LABEL_18:
        CFTypeRef v18 = v37;
        uint64_t v37 = 0;
        if (v18)
        {
          IPC::Encoder::~Encoder(v18, v13);
          WTF::fastFree(v24, v25);
        }
        goto LABEL_20;
      }
    }
    else
    {
      __int16 v34 = 0;
      IPC::Decoder::operator>><std::tuple<BOOL>>(v35, &v34);
      if (!HIBYTE(v34))
      {
        LOBYTE(v2++*(_DWORD *)(this + 8) = 13;
        int v15 = 1;
        int v30 = 1;
        int v16 = v36;
        if (v36 == -1) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      int v16 = v36;
      if (!v36)
      {
        int v15 = 0;
        uint64_t v17 = v35;
        uint64_t v35 = 0;
        int v28 = v17;
        char v29 = v34;
        int v30 = 0;
        goto LABEL_17;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v2++*(_DWORD *)(this + 8) = 3;
  int v15 = 1;
  int v30 = 1;
LABEL_20:
  CFTypeRef v19 = v44;
  uint64_t v44 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v13);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
  if (v43 != -1) {
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v43])(&v35, &v42);
  }
  int v43 = -1;
  CFTypeRef v20 = cf;
  CFTypeRef cf = 0;
  if (v20) {
    CFRelease(v20);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v40);
  if (v15) {
    BOOL v21 = 1;
  }
  else {
    BOOL v21 = v29 == 0;
  }
  uint64_t v6 = !v21;
  ((void (*)(unsigned char *, uint64_t **))off_1EE9F5940[v15])(v39, &v28);
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v32, v22);
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 0xFFFFFFFF);
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  if (v33) {
    CFRelease(*((CFTypeRef *)v33 + 1));
  }
  return v6;
}

BOOL WebKit::WebChromeClient::runJavaScriptPrompt(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, const WTF::String *a3, const WTF::String *a4, WTF::StringImpl **a5)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (WebKit::shouldSuppressJavaScriptDialogs(a2, a2)) {
    return 0;
  }
  WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v40);
  uint64_t v11 = *(void *)(*((void *)this + 2) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  CFRetain(*(CFTypeRef *)(v12 + 8));
  (*(void (**)(void, uint64_t, const WTF::String *, const WTF::String *, WebKit::WebFrame *))(**(void **)(v12 + 376) + 48))(*(void *)(v12 + 376), v12, a3, a4, v40);
  WebKit::WebPage::preemptivelySendAutocorrectionContext((WebKit::WebPage *)v12);
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 1u);
  CFRetain(*(CFTypeRef *)(v12 + 8));
  uint64_t v38 = v12;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v39, &v38, 1);
  uint64_t v38 = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 - 8));
  }
  *(_OWORD *)__int16 v34 = *((_OWORD *)v40 + 5);
  WebKit::WebFrame::info(v40, (uint64_t)v47);
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v12);
  uint64_t v14 = *(void *)(v12 + 32);
  uint64_t v13 = v12 + 32;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
  if (v16)
  {
    uint64_t v18 = v16;
    uint64_t v46 = 0;
    IPC::Connection::createSyncMessageEncoder(3775, v15, &v46, &v45);
    CFTypeRef v19 = v45;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v45, v34);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v19, v47);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, (uint64_t *)a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v19, (uint64_t *)a4);
    IPC::Connection::sendSyncMessage(v18, v46, (uint64_t *)&v45, 4, (uint64_t)&v43, INFINITY);
    if (v44)
    {
      if (v44 == 1)
      {
        LOBYTE(v35) = (_BYTE)v43;
        int v20 = 1;
        int v37 = 1;
        int v21 = 1;
LABEL_17:
        ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9F59C0[v21])(&v41, &v43);
LABEL_18:
        uint64_t v23 = v45;
        uint64_t v45 = 0;
        if (v23)
        {
          IPC::Encoder::~Encoder(v23, v17);
          WTF::fastFree(v32, v33);
        }
        goto LABEL_20;
      }
    }
    else
    {
      LOBYTE(v41) = 0;
      char v42 = 0;
      IPC::Decoder::operator>><std::tuple<WTF::String>>(v43, &v41);
      if (!v42)
      {
        LOBYTE(v35) = 13;
        int v20 = 1;
        int v37 = 1;
        int v21 = v44;
        if (v44 == -1) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
      int v21 = v44;
      if (!v44)
      {
        int v20 = 0;
        int v22 = v43;
        int v43 = 0;
        uint64_t v35 = v22;
        uint64_t v36 = v41;
        int v37 = 0;
        goto LABEL_17;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v35) = 3;
  int v20 = 1;
  int v37 = 1;
LABEL_20:
  uint64_t v24 = v52;
  unint64_t v52 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v17);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (v51 != -1) {
    ((void (*)(IPC::Decoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v51])(&v43, &v50);
  }
  int v51 = -1;
  CFTypeRef v25 = cf;
  CFTypeRef cf = 0;
  if (v25) {
    CFRelease(v25);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v48);
  if (v20)
  {
    BOOL v10 = 0;
    uint64_t v27 = 1;
  }
  else
  {
    int v28 = (WTF::StringImpl *)v36;
    uint64_t v36 = 0;
    char v29 = *a5;
    *a5 = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2) {
        WTF::StringImpl::destroy(v29, v26);
      }
      else {
        *(_DWORD *)v29 -= 2;
      }
    }
    uint64_t v27 = 0;
    BOOL v10 = *a5 != 0;
  }
  ((void (*)(char *, IPC::Decoder **))off_1EE9F5950[v27])(v47, &v35);
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v39, v30);
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 0xFFFFFFFF);
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 - 8));
  }
  if (v40) {
    CFRelease(*((CFTypeRef *)v40 + 1));
  }
  return v10;
}

uint64_t WebKit::WebChromeClient::keyboardUIMode(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  uint64_t v3 = WebKit::WebPage::keyboardUIMode((WebKit::WebPage *)v2);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

uint64_t WebKit::WebChromeClient::hoverSupportedByPrimaryPointingDevice(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  uint64_t v2 = v1 - 16;
  if (!v1) {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return 0;
}

uint64_t WebKit::WebChromeClient::hoverSupportedByAnyAvailablePointingDevice(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  uint64_t v3 = WebKit::WebPage::hoverSupportedByAnyAvailablePointingDevice((WebKit::WebPage *)v2);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

uint64_t WebKit::WebChromeClient::pointerCharacteristicsOfPrimaryPointingDevice(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  uint64_t v2 = v1 - 16;
  if (!v1) {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return 257;
}

uint64_t WebKit::WebChromeClient::pointerCharacteristicsOfAllAvailablePointingDevices(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  uint64_t v3 = WebKit::WebPage::pointerCharacteristicsOfAllAvailablePointingDevices((WebKit::WebPage *)v2);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

void WebKit::WebChromeClient::invalidateContentsForSlowScroll(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = *(void *)(*(void *)(v4 + 48) + 160);
  if (v6) {
    BOOL v7 = *(unsigned char *)(v6 + 144) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    uint64_t v8 = (unsigned int *)(v6 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v6 + 8), 1u);
    uint64_t v9 = *(void *)(v6 + 296);
    if (v9)
    {
      int v10 = *(_DWORD *)(v9 + 28);
      *(_DWORD *)(v9 + 2++*(_DWORD *)(this + 8) = v10 + 2;
      if (*(unsigned char *)(v9 + 3436))
      {
        if (v10)
        {
          *(_DWORD *)(v9 + 2++*(_DWORD *)(this + 8) = v10;
        }
        else if ((*(_WORD *)(v9 + 34) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v9);
        }
        goto LABEL_16;
      }
      if (v10)
      {
        *(_DWORD *)(v9 + 2++*(_DWORD *)(this + 8) = v10;
      }
      else if ((*(_WORD *)(v9 + 34) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
      }
    }
    WebKit::WebPage::pageDidScroll((WebKit::WebPage *)v4, v5);
    (*(void (**)(void, const WebCore::IntRect *))(**(void **)(v4 + 72) + 48))(*(void *)(v4 + 72), a2);
LABEL_16:
    WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v8);
  }
  if (v3)
  {
    uint64_t v11 = *(const void **)(v3 - 8);
    CFRelease(v11);
  }
}

void WebKit::WebChromeClient::scroll(WebKit::WebChromeClient *this, const WebCore::IntSize *a2, const WebCore::IntRect *a3, const IntRect *a4)
{
  uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::pageDidScroll((WebKit::WebPage *)v8, v9);
  uint64_t v10 = *(void *)(v8 + 72);
  long long v11 = *(_OWORD *)a3;
  WebCore::IntRect::intersect((WebCore::IntRect *)&v11, a4);
  (*(void (**)(uint64_t, long long *, const WebCore::IntSize *))(*(void *)v10 + 56))(v10, &v11, a2);
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
}

char *WebKit::WebChromeClient::screenToRootView(WebKit::WebChromeClient *this, const WebCore::IntPoint *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = WebKit::WebPage::screenToRootView((WebKit::WebPage *)v4, a2);
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return v5;
}

char *WebKit::WebChromeClient::rootViewToScreen(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = WebKit::WebPage::rootViewToScreen((WebKit::WebPage *)v4, a2);
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return v5;
}

char *WebKit::WebChromeClient::accessibilityScreenToRootView(WebKit::WebChromeClient *this, const WebCore::IntPoint *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = WebKit::WebPage::accessibilityScreenToRootView((WebKit::WebPage *)v4, a2);
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return v5;
}

char *WebKit::WebChromeClient::rootViewToAccessibilityScreen(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = WebKit::WebPage::rootViewToAccessibilityScreen((WebKit::WebPage *)v4, a2);
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return v5;
}

void WebKit::WebChromeClient::didFinishLoadingImageForElement(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::didFinishLoadingImageForElement(v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

uint64_t WebKit::WebChromeClient::platformPageClient(WebKit::WebChromeClient *this)
{
  return 0;
}

void WebKit::WebChromeClient::intrinsicContentsSizeChanged(WebKit::WebChromeClient *this, const IntSize *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  if (*(_DWORD *)(v4 + 888) || *(void *)(v4 + 896))
  {
    uint64_t v5 = (uint64_t)*a2;
    if (!*(unsigned char *)(v4 + 2136)) {
      *(unsigned char *)(v4 + 2136) = 1;
    }
    *(void *)(v4 + 212++*(_DWORD *)(this + 8) = v5;
  }
  if (v3)
  {
    uint64_t v6 = *(const void **)(v3 - 8);
    CFRelease(v6);
  }
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollbarsForMainFrame>(uint64_t a1, char *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollbarsForMainFrame>(a1, a2, v4);
}

void WebKit::WebChromeClient::scrollMainFrameToRevealRect(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebCore::FloatRect::FloatRect((WebCore::FloatRect *)v15, a2);
  v13.m_x = *(_DWORD *)a2 + *((_DWORD *)a2 + 2) / 2;
  v13.m_y = *((_DWORD *)a2 + 1) + *((_DWORD *)a2 + 3) / 2;
  WebCore::FloatPoint::FloatPoint((WebCore::FloatPoint *)v14, &v13);
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2048;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WebCore::DisplayList::DrawLine,void>::encode(v8, v15);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v8, v14[0]);
  IPC::ArgumentCoder<float,void>::encode<IPC::Encoder>(v8, v14[1]);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v16, 0);
  uint64_t v10 = v16;
  uint64_t v16 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

uint64_t WebKit::WebChromeClient::shouldUnavailablePluginMessageBeButton(uint64_t a1, unsigned int a2)
{
  return (a2 < 6) & (9u >> a2);
}

void WebKit::WebChromeClient::mouseDidMoveOverElement(uint64_t a1, WebKit::WebHitTestResultData **a2, unsigned int a3, const WTF::String *a4)
{
  *(void *)&v26[149] = *MEMORY[0x1E4F143B8];
  v23[8] = 0;
  uint64_t v6 = a3 & 0x12 | (a3 >> 3) & 1 | (4 * (a3 & 1)) & 0xF7 | (8 * ((a3 >> 2) & 1));
  *(void *)uint64_t v23 = a3 & 0x12 | ((a3 & 8) != 0) | (4 * (a3 & 1)) & 0xF7 | (8 * ((a3 & 4) != 0));
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  (*(void (**)(void, uint64_t, WebKit::WebHitTestResultData **, uint64_t, unsigned char *))(**(void **)(v8 + 376)
                                                                                             + 56))(*(void *)(v8 + 376), v8, a2, v6, &v23[1]);
  WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v25, a2, a4);
  *(void *)long long v26 = WebCore::IntRect::toRectWithExtentsClippedToNumericLimits((WebCore::IntRect *)v26);
  *(void *)&void v26[2] = v9;
  uint64_t v10 = v8 + 32;
  {
    int v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v24 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(*(CFTypeRef *)&v23[1], (uint64_t)&v24, &v21);
  uint64_t v11 = v21;
  if (v21) {
    CFRetain(*(CFTypeRef *)(v21 + 8));
  }
  uint64_t v22 = v11;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v8 + 32);
  IntPoint v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)IntPoint v13 = 2018;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v13 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  uint64_t v24 = v13;
  IPC::ArgumentCoder<WebKit::WebHitTestResultData,void>::encode(v13, (uint64_t)v25);
  IPC::ArgumentCoder<WTF::OptionSet<WebKit::WebEventModifier>,void>::encode<IPC::Encoder>(v13, v23);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v13, &v22);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v10 + 32))(v8 + 32, &v24, 0);
  uint64_t v15 = v24;
  uint64_t v24 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v14);
    WTF::fastFree(v18, v19);
  }
  if (v22) {
    CFRelease(*(CFTypeRef *)(v22 + 8));
  }
  uint64_t v16 = v21;
  uint64_t v21 = 0;
  if (v16) {
    CFRelease(*(CFTypeRef *)(v16 + 8));
  }
  WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v25);
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  uint64_t v17 = *(void *)&v23[1];
  *(void *)&v23[1] = 0;
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
}

void WebKit::WebChromeClient::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebFrame::fromCoreFrame(a2, &v35);
  uint64_t v34 = 0;
  uint64_t v7 = (WebKit::PluginView *)WebKit::WebPage::pluginViewForFrame(a2, v6);
  if (v7)
  {
    LODWORD(v34) = WebKit::PluginView::pdfDocumentSizeForPrinting(v7);
    HIDWORD(v34) = v8;
  }
  WTF::String::left((WTF::StringImpl **)a3, 0x3E8u, &v32);
  char v33 = *(unsigned char *)(a3 + 8);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  CFRetain(*(CFTypeRef *)(v10 + 8));
  uint64_t v30 = v10;
  WebKit::AXRelayProcessSuspendedNotification::AXRelayProcessSuspendedNotification((WTF::StringImpl *)v31, &v30, 1);
  uint64_t v30 = 0;
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 - 8));
  }
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 1u);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)(v35 + 80);
  WebKit::WebPage::cancelCurrentInteractionInformationRequest((WebKit::WebPage *)v10);
  uint64_t v12 = *(void *)(v10 + 32);
  uint64_t v11 = v10 + 32;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v39 = 0;
    IPC::Connection::createSyncMessageEncoder(3767, v13, &v39, &v38);
    uint64_t v16 = v38;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v38, v27);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, (uint64_t *)&v32);
    IPC::ArgumentCoder<WebCore::FloatPoint,void>::encode(v16, (float *)&v34);
    IPC::Connection::sendSyncMessage(v15, v39, (uint64_t *)&v38, 0, (uint64_t)&v36, INFINITY);
    uint64_t v17 = v37;
    if (v37)
    {
      if (v37 != 1)
      {
        uint64_t v26 = std::__throw_bad_variant_access[abi:sn180100]();
        WebKit::WebChromeClient::createColorChooser(v26);
        return;
      }
      LOBYTE(v2++*(_DWORD *)(this + 8) = v36;
    }
    else
    {
      uint64_t v18 = v36;
      uint64_t v36 = 0;
      uint64_t v28 = v18;
    }
    int v29 = v37;
    ((void (*)(char *, uint64_t *))off_1EE9F59C0[v37])(&v40, &v36);
    int v20 = v38;
    uint64_t v38 = 0;
    if (v20)
    {
      IPC::Encoder::~Encoder(v20, v19);
      WTF::fastFree(v24, v25);
    }
  }
  else
  {
    LOBYTE(v2++*(_DWORD *)(this + 8) = 3;
    uint64_t v17 = 1;
    int v29 = 1;
  }
  ((void (*)(uint64_t *, uint64_t *))off_1EE9F5960[v17])(&v36, &v28);
  int v29 = -1;
  atomic_fetch_add((atomic_uint *volatile)&IPC::UnboundedSynchronousIPCScope::unboundedSynchronousIPCCount, 0xFFFFFFFF);
  WebKit::AXRelayProcessSuspendedNotification::~AXRelayProcessSuspendedNotification((WebKit::AXRelayProcessSuspendedNotification *)v31, v21);
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 - 8));
  }
  uint64_t v23 = v32;
  uint64_t v32 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  if (v35) {
    CFRelease(*(CFTypeRef *)(v35 + 8));
  }
}

void WebKit::WebChromeClient::createColorChooser(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, WebKit::WebColorChooser **a4@<X8>)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v8 = v7 - 16;
  if (!v7) {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v9 = (WebKit::WebColorChooser *)WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v9 = &unk_1EE9F5880;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = a2;
  ++a2[2];
  if (v7
    && (WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v7 + 8), v7), (uint64_t v17 = *(void *)(v7 + 8)) != 0))
  {
    atomic_fetch_add((atomic_uint *volatile)v17, 1u);
    *((void *)v9 + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v17;
    uint64_t v18 = *(void *)(v17 + 8);
    if (v18) {
      uint64_t v10 = (WebKit::WebPage *)(v18 - 16);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    *((void *)v9 + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  }
  WebKit::WebPage::setActiveColorChooser(v10, v9);
  {
    CFTypeRef v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v11 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v21[0] = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 32))(a2);
  v21[1] = v12;
  (*(void (**)(void *__return_ptr, _DWORD *))(*(void *)a2 + 40))(v20, a2);
  v22[0] = a3;
  v22[1] = v21;
  _OWORD v22[2] = v20;
  uint64_t v13 = *(void *)(*((void *)v9 + 3) + 8);
  if (v13) {
    uint64_t v14 = v13 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  IPC::Connection::send<Messages::WebPageProxy::ShowColorPicker>(v11, (uint64_t)v22, *(void *)(v14 + 40));
  WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v20, v15);
  *a4 = v9;
  if (v7)
  {
    uint64_t v16 = *(const void **)(v7 - 8);
    CFRelease(v16);
  }
}

void WebKit::WebChromeClient::createDataListSuggestionPicker(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9F5B40;
  v7[1] = 0;
  v7[2] = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 24), v6 + 16);
  uint64_t v8 = *(atomic_uint **)(v6 + 24);
  atomic_fetch_add(v8, 1u);
  v7[3] = v8;
  *a3 = v7;
  uint64_t v9 = *(const void **)(v6 + 8);

  CFRelease(v9);
}

uint64_t WebKit::WebChromeClient::canShowDataListSuggestionLabels(WebKit::WebChromeClient *this)
{
  return 0;
}

void WebKit::WebChromeClient::createDateTimeChooser(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x20);
  *uint64_t v7 = &unk_1EE9F5B78;
  v7[1] = 0;
  v7[2] = a2;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(v6 + 24), v6 + 16);
  uint64_t v8 = *(atomic_uint **)(v6 + 24);
  atomic_fetch_add(v8, 1u);
  v7[3] = v8;
  *a3 = v7;
  uint64_t v9 = *(const void **)(v6 + 8);

  CFRelease(v9);
}

void WebKit::WebChromeClient::runOpenPanel(WebKit::WebChromeClient *this, WebCore::LocalFrame *a2, WebCore::FileChooser *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  if (!*(void *)(v6 + 608))
  {
    ++*(_DWORD *)a3;
    *(void *)&long long v19 = a3;
    WebKit::WebOpenPanelResultListener::create(v6, (uint64_t *)&v19, &v22);
    uint64_t v8 = *(WebKit::WebOpenPanelResultListener **)(v6 + 608);
    *(void *)(v6 + 60++*(_DWORD *)(this + 8) = v22;
    if (v8) {
      WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(v8, v7);
    }
    if ((void)v19) {
      WTF::RefCounted<WebCore::FileChooser>::deref((WebCore::FileChooser *)v19);
    }
    WebKit::WebFrame::fromCoreFrame((uint64_t)a2, &v20);
    long long v19 = *((_OWORD *)v20 + 5);
    WebKit::WebFrame::info(v20, (uint64_t)&v22);
    uint64_t v10 = *(void *)(v6 + 32);
    uint64_t v9 = v6 + 32;
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 2055;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v12 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v21 = v12;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v12, (uint64_t *)&v19);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v12, (char *)&v22);
    IPC::ArgumentCoder<WebCore::FileChooserSettings,void>::encode(v12, (char *)a3 + 16);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v21, 0);
    uint64_t v14 = v21;
    uint64_t v21 = 0;
    if (v14)
    {
      IPC::Encoder::~Encoder(v14, v13);
      WTF::fastFree(v17, v18);
    }
    uint64_t v15 = v27;
    uint64_t v27 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    if (v26 != -1) {
      ((void (*)(IPC::Encoder **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v26])(&v21, &v25);
    }
    int v26 = -1;
    CFTypeRef v16 = cf;
    CFTypeRef cf = 0;
    if (v16) {
      CFRelease(v16);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v23);
    if (v20) {
      CFRelease(*((CFTypeRef *)v20 + 1));
    }
  }
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
}

void WebKit::WebChromeClient::showShareSheet(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v11 = a2;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowShareSheet,WTF::CompletionHandler<void ()(BOOL)>>(v7, &v11, a3, v9, 0);
  if (v5)
  {
    uint64_t v10 = *(const void **)(v5 - 8);
    CFRelease(v10);
  }
}

void WebKit::WebChromeClient::showContactPicker(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v11 = a2;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowContactPicker,WTF::CompletionHandler<void ()(std::optional<WTF::Vector<WebCore::ContactInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)>>(v7, &v11, a3, v9, 0);
  if (v5)
  {
    uint64_t v10 = *(const void **)(v5 - 8);
    CFRelease(v10);
  }
}

WebCore::Icon *WebKit::WebChromeClient::loadIconForFiles(uint64_t a1, uint64_t a2)
{
  WebKit::WebChromeClient::createIconForFiles(a1, a2);
  WebCore::FileIconLoader::iconLoaded();
  uint64_t result = v3;
  if (v3) {
    return WTF::RefCounted<WebCore::Icon>::deref(v3);
  }
  return result;
}

void WebKit::WebChromeClient::setCursor(WebKit::WebChromeClient *this, const WebCore::Cursor *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2066;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v13 = v8;
  IPC::ArgumentCoder<WebCore::Cursor,void>::encode(v8, (uint64_t)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v13, 0);
  uint64_t v10 = v13;
  uint64_t v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::setCursorHiddenUntilMouseMoves(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  char v13 = a2;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2067;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::didAssociateFormControls(uint64_t a1, uint64_t a2, uint64_t a3)
{
  WebKit::WebFrame::fromCoreFrame(a3, &v9);
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = v9;
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v6 + 352) + 80))(*(void *)(v6 + 352), v6, a2, v9);
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  if (v7)
  {
    uint64_t v8 = *(const void **)(v7 + 8);
    CFRelease(v8);
  }
}

uint64_t WebKit::WebChromeClient::shouldNotifyOnFormChanges(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 352) + 88))(*(void *)(v2 + 352), v2);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

uint64_t WebKit::WebChromeClient::selectItemWritingDirectionIsNatural(WebKit::WebChromeClient *this)
{
  return 0;
}

uint64_t WebKit::WebChromeClient::selectItemAlignmentFollowsMenuWritingDirection(WebKit::WebChromeClient *this)
{
  return 1;
}

void WebKit::WebChromeClient::createPopupMenu(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
  *a3 = WebKit::WebPopupMenu::WebPopupMenu(v7, v6, a2);
  if (v5)
  {
    uint64_t v8 = *(const void **)(v5 - 8);
    CFRelease(v8);
  }
}

void WebKit::WebChromeClient::createSearchPopupMenu(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebSearchPopupMenu::create(v6, a2, &v8);
  *a3 = v8;
  if (v5)
  {
    uint64_t v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
}

uint64_t WebKit::WebChromeClient::displayRefreshMonitorFactory(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3) {
    return v3 + 16;
  }
  else {
    return 0;
  }
}

void WebKit::WebChromeClient::createImageBuffer(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, CFTypeRef *a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  char v12 = a3;
  {
    long long v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  if ((a3 - 2) < 5)
  {
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 762)) {
      goto LABEL_4;
    }
    goto LABEL_17;
  }
  if (a3 == 1)
  {
    if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 761)) {
      goto LABEL_18;
    }
  }
  else
  {
    if (a3 != 8)
    {
LABEL_17:
      if ((a3 - 8) > 0xFDu)
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        WebCore::ImageBuffer::create<WebKit::ImageBufferShareableBitmapBackend,WebCore::ImageBuffer>(a2, a4, 1, a3, (uint64_t)&v20, a7, a8);
        WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v21 + 4));
        return;
      }
LABEL_18:
      *a7 = 0;
      return;
    }
    if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 763)) {
      goto LABEL_18;
    }
  }
LABEL_4:
  uint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v15) {
    CFTypeRef v16 = (CFTypeRef *)(v15 - 16);
  }
  else {
    CFTypeRef v16 = 0;
  }
  CFRetain(v16[1]);
  uint64_t v17 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v16);
  WebKit::RemoteRenderingBackendProxy::createImageBuffer(v17, a2, v12, a4, a5, a6, (WebCore::ImageBuffer **)a7, a8);
  if (v15)
  {
    uint64_t v18 = *(const void **)(v15 - 8);
    CFRelease(v18);
  }
}

uint64_t WebKit::WebChromeClient::sinkIntoImageBuffer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*a2)
  {
    uint64_t v7 = 0;
LABEL_11:
    *a2 = 0;
    uint64_t v13 = v7;
    WebCore::SerializedImageBuffer::sinkIntoImageBuffer();
    uint64_t result = v13;
    uint64_t v13 = 0;
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)*a2 + 24))(*a2);
  uint64_t v7 = *a2;
  if ((v6 & 1) == 0) {
    goto LABEL_11;
  }
  *a2 = 0;
  uint64_t v12 = v7;
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v8) {
    uint64_t v9 = (CFTypeRef *)(v8 - 16);
  }
  else {
    uint64_t v9 = 0;
  }
  CFRetain(v9[1]);
  uint64_t v10 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v9);
  WebKit::RemoteSerializedImageBufferProxy::sinkIntoImageBuffer(&v12, v10, a3);
  if (v8) {
    CFRelease(*(CFTypeRef *)(v8 - 8));
  }
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void WebKit::WebChromeClient::createWorkerClient(WebKit::WebChromeClient *this@<X0>, WebCore::WorkerOrWorkletThread *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v8 + 16) = *(_DWORD *)(v7 + 312);
  *(void *)uint64_t v8 = &unk_1EE9F7A80;
  *(void *)(v8 + ++*(_DWORD *)(this + 8) = a2;
  *(void *)(v8 + ++*(_DWORD *)(this + 24) = 0;
  *a3 = v8;
  if (v5)
  {
    uint64_t v9 = *(const void **)(v5 - 8);
    CFRelease(v9);
  }
}

void WebKit::WebChromeClient::createGraphicsContextGL(uint64_t a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  {
    uint64_t v11 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v11);
  }
  if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 764))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
    if (v5) {
      uint64_t v6 = (CFTypeRef *)(v5 - 16);
    }
    else {
      uint64_t v6 = 0;
    }
    CFRetain(v6[1]);
    uint64_t v7 = (WTF::RunLoop *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v6);
    uint64_t v8 = WTF::RunLoop::main(v7);
    WebKit::RemoteGraphicsContextGLProxy::create(a2, (uint64_t *)v7, v8, &v12);
    if (v12) {
      uint64_t v9 = (char *)v12 + 24;
    }
    else {
      uint64_t v9 = 0;
    }
    *a3 = v9;
    CFTypeRef v10 = v6[1];
    CFRelease(v10);
  }
  else
  {
    MEMORY[0x1F4172158](a2);
  }
}

void WebKit::WebChromeClient::createGPUForWebGPU(WebKit::WebChromeClient *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (WebKit::RemoteGPUProxy *)WTF::fastMalloc((WTF *)0x10);
  *(void *)uint64_t v4 = &unk_1EE9EBCC8;
  *((void *)v4 + 1) = 1;
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  WebKit::RemoteGPUProxy::create(v4, (WebKit::WebGPU::ConvertToBackingContext *)v6, &v8);
  *a2 = v8;
  CFRelease(v6[1]);
  if (*((_DWORD *)v4 + 2) == 1)
  {
    uint64_t v7 = *(void (**)(WebKit::RemoteGPUProxy *))(*(void *)v4 + 8);
    v7(v4);
  }
  else
  {
    --*((_DWORD *)v4 + 2);
  }
}

void WebKit::WebChromeClient::createBarcodeDetector(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  uint64_t v7 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v6);
  WebKit::RemoteRenderingBackendProxy::connection(v7, (atomic_uint **)&v17);
  if (v17)
  {
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    uint64_t v8 = *((void *)v7 + 8);
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WebKit::ShapeDetection::RemoteBarcodeDetectorProxy::create((uint64_t *)&v15, v8, IdentifierInternal, a2, &v16);
    *a3 = v16;
    WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref((unsigned int **)&v15, v10);
    uint64_t v12 = (unsigned int *)v17;
    uint64_t v17 = 0;
    if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v12, v11);
      WTF::fastFree(v13, v14);
    }
  }
  else
  {
    *a3 = 0;
  }
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
}

void WebKit::WebChromeClient::getBarcodeDetectorSupportedFormats(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v4);
  WebKit::RemoteRenderingBackendProxy::connection(v5, (atomic_uint **)&v17);
  uint64_t v6 = v17;
  if (v17)
  {
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    uint64_t v7 = *((void *)v5 + 8);
    char v18 = 0;
    IPC::StreamClientConnection::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetRemoteBarcodeDetectorSupportedFormats,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::ShapeDetection::BarcodeFormat,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((uint64_t)v6, (uint64_t)&v18, a2, v7);
    WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref((unsigned int **)&v15, v8);
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v10 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF **))(*(void *)v10 + 16))(v10, &v15);
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    uint64_t v11 = v15;
    if (v15)
    {
      uint64_t v15 = 0;
      LODWORD(v16) = 0;
      WTF::fastFree(v11, v9);
    }
  }
  uint64_t v12 = (unsigned int *)v17;
  uint64_t v17 = 0;
  if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v12);
    IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v12, v9);
    WTF::fastFree(v13, v14);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::createFaceDetector(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  uint64_t v7 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v6);
  WebKit::RemoteRenderingBackendProxy::connection(v7, (atomic_uint **)&v17);
  if (v17)
  {
    uint64_t v15 = v17;
    uint64_t v17 = 0;
    uint64_t v8 = *((void *)v7 + 8);
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WebKit::ShapeDetection::RemoteFaceDetectorProxy::create((uint64_t *)&v15, v8, IdentifierInternal, a2, &v16);
    *a3 = v16;
    WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref((unsigned int **)&v15, v10);
    uint64_t v12 = (unsigned int *)v17;
    uint64_t v17 = 0;
    if (v12 && atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v12);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v12, v11);
      WTF::fastFree(v13, v14);
    }
  }
  else
  {
    *a3 = 0;
  }
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
}

void WebKit::WebChromeClient::createTextDetector(WebKit::WebChromeClient *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = (WebKit::RemoteRenderingBackendProxy *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v4);
  WebKit::RemoteRenderingBackendProxy::connection(v5, (atomic_uint **)&v15);
  if (v15)
  {
    uint64_t v13 = v15;
    uint64_t v15 = 0;
    uint64_t v6 = *((void *)v5 + 8);
    uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    WebKit::ShapeDetection::RemoteTextDetectorProxy::create((uint64_t *)&v13, v6, IdentifierInternal, &v14);
    *a2 = v14;
    WTF::Ref<IPC::StreamClientConnection,WTF::RawPtrTraits<IPC::StreamClientConnection>,WTF::DefaultRefDerefTraits<IPC::StreamClientConnection>>::~Ref((unsigned int **)&v13, v8);
    uint64_t v10 = (unsigned int *)v15;
    uint64_t v15 = 0;
    if (v10 && atomic_fetch_add((atomic_uint *volatile)v10, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v10);
      IPC::StreamClientConnection::~StreamClientConnection((IPC::StreamClientConnection *)v10, v9);
      WTF::fastFree(v11, v12);
    }
  }
  else
  {
    *a2 = 0;
  }
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
}

void WebKit::WebChromeClient::attachViewOverlayGraphicsLayer(WebKit::WebChromeClient *this, WebCore::GraphicsLayer *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v5 = *(void *)(v4 + 72);
  if (v5)
  {
    uint64_t v6 = *(void **)(v4 + 88);
    uint64_t v7 = v6[3];
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 8);
      if (v8)
      {
        if (!*(unsigned char *)(v8 + 144)) {
          (*(void (**)(uint64_t, void, void, WebCore::GraphicsLayer *))(*(void *)v5 + 344))(v5, v6[10], v6[11], a2);
        }
      }
    }
  }
  if (v3)
  {
    uint64_t v9 = *(const void **)(v3 - 8);
    CFRelease(v9);
  }
}

BOOL WebKit::WebChromeClient::shouldTriggerRenderingUpdate(WebKit::WebChromeClient *this, unsigned int a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  BOOL v7 = 1;
  if (a2 <= 0x3B)
  {
    uint64_t v5 = *(void *)(v4 + 2400);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 232) - *(void *)(v5 + 240);
      if ((v6 & ~(v6 >> 63)) > 2) {
        BOOL v7 = 0;
      }
    }
  }
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return v7;
}

void WebKit::WebChromeClient::triggerRenderingUpdate(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 72);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 264))(v3);
  }
  if (v1)
  {
    uint64_t v4 = *(const void **)(v1 - 8);
    CFRelease(v4);
  }
}

uint64_t WebKit::WebChromeClient::remoteImagesCountForTesting(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 2400);
  if (!v3)
  {
    uint64_t v4 = 0;
    if (!v1) {
      return v4;
    }
    goto LABEL_6;
  }
  uint64_t v4 = WebKit::RemoteResourceCacheProxy::imagesCount((WebKit::RemoteResourceCacheProxy *)(v3 + 72));
  if (v1) {
LABEL_6:
  }
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

IPC::Encoder *WebKit::WebChromeClient::registerBlobPathForTesting(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v5 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  uint64_t v6 = *a3;
  *a3 = 0;
  BOOL v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *BOOL v7 = &unk_1EE9F59E0;
  v7[1] = v6;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 262;
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v17 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  v16[0] = (uint64_t)v7;
  v16[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v17, v16, 0, 0);
  uint64_t v11 = v16[0];
  v16[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v17;
  uint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

void WebKit::WebChromeClient::contentRuleListNotification(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1884;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v15 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2);
  IPC::ArgumentCoder<WebCore::RectEdges<BOOL>,void>::encode(v10, (char *)a3);
  IPC::VectorArgumentCoder<false,std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WTF::String,WebCore::ContentRuleListResults::Result>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v10, (uint64_t *)(a3 + 40));
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v15, 0);
  uint64_t v12 = v15;
  uint64_t v15 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v11);
    WTF::fastFree(v13, v14);
    if (!v5) {
      return;
    }
  }
  else if (!v5)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v5 - 8));
}

uint64_t WebKit::WebChromeClient::layerTreeStateIsFrozen(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v3 = *(void *)(v2 + 72);
  if (!v3)
  {
    uint64_t v4 = 0;
    if (!v1) {
      return v4;
    }
    goto LABEL_6;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 96))(v3);
  if (v1) {
LABEL_6:
  }
    CFRelease(*(CFTypeRef *)(v1 - 8));
  return v4;
}

void WebKit::WebChromeClient::prepareForVideoFullscreen(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v2);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

BOOL WebKit::WebChromeClient::canEnterVideoFullscreen(WebKit::WebChromeClient *this, int a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  int v5 = *((unsigned __int8 *)WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v4) + 96);
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return a2 != 1 || v5 == 0;
}

uint64_t WebKit::WebChromeClient::supportsVideoFullscreen(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v2);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return 1;
}

uint64_t WebKit::WebChromeClient::supportsVideoFullscreenStandby(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v2);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return 1;
}

void WebKit::WebChromeClient::setMockVideoPresentationModeEnabled(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  char v13 = a2;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2075;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v8, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::enterVideoFullscreenForVideoElement(WebKit::WebChromeClient *this, WebCore::HTMLVideoElement *a2, int a3, char a4)
{
  uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
  if (v7) {
    uint64_t v8 = (CFTypeRef *)(v7 - 16);
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(v8[1]);
  uint64_t v9 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v8);
  WebKit::VideoPresentationManager::enterVideoFullscreenForVideoElement(v9, a2, a3, a4);
  if (v7)
  {
    uint64_t v10 = *(const void **)(v7 - 8);
    CFRelease(v10);
  }
}

void WebKit::WebChromeClient::exitVideoFullscreenForVideoElement(uint64_t a1, WebKit *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v6);
  WebKit::VideoPresentationManager::exitVideoFullscreenForVideoElement((uint64_t)v7, a2, a3);
  if (v5)
  {
    uint64_t v8 = *(const void **)(v5 - 8);
    CFRelease(v8);
  }
}

void WebKit::WebChromeClient::setUpPlaybackControlsManager(WebKit::WebChromeClient *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = WebKit::WebPage::playbackSessionManager((WebKit::WebPage *)v4);
  WebKit::PlaybackSessionManager::setUpPlaybackControlsManager(v5, a2);
  if (v3)
  {
    uint64_t v6 = *(const void **)(v3 - 8);
    CFRelease(v6);
  }
}

void WebKit::WebChromeClient::clearPlaybackControlsManager(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  uint64_t v3 = WebKit::WebPage::playbackSessionManager((WebKit::WebPage *)v2);
  WebKit::PlaybackSessionManager::clearPlaybackControlsManager(v3);
  if (v1)
  {
    uint64_t v4 = *(const void **)(v1 - 8);
    CFRelease(v4);
  }
}

void WebKit::WebChromeClient::mediaEngineChanged(WebKit::WebChromeClient *this, WebCore::HTMLMediaElement *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = (CFTypeRef *)(v2 - 16);
  }
  else {
    uint64_t v3 = 0;
  }
  CFRetain(v3[1]);
  uint64_t v4 = (uint64_t *)WebKit::WebPage::playbackSessionManager((WebKit::WebPage *)v3);
  WebKit::PlaybackSessionManager::mediaEngineChanged(v4);
  if (v2)
  {
    uint64_t v5 = *(const void **)(v2 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::exitVideoFullscreenToModeWithoutAnimation(WebKit::WebChromeClient *this, WebCore::HTMLVideoElement *a2, int a3)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v6);
  WebKit::VideoPresentationManager::exitVideoFullscreenToModeWithoutAnimation(v7, a2, a3);
  if (v5)
  {
    uint64_t v8 = *(const void **)(v5 - 8);
    CFRelease(v8);
  }
}

uint64_t WebKit::WebChromeClient::supportsFullScreenForElement(WebKit::WebChromeClient *this, const WebCore::Element *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  uint64_t v7 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v6);
  uint64_t v8 = WebKit::WebFullScreenManager::supportsFullScreenForElement(v7, a2, a3);
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  return v8;
}

void WebKit::WebChromeClient::enterFullScreenForElement(WebKit::WebChromeClient *this, WebCore::Element *a2, int a3)
{
  uint64_t v6 = *(void *)(*((void *)this + 2) + 8);
  if (v6) {
    uint64_t v7 = (CFTypeRef *)(v6 - 16);
  }
  else {
    uint64_t v7 = 0;
  }
  CFRetain(v7[1]);
  uint64_t v8 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v7);
  WebKit::WebFullScreenManager::enterFullScreenForElement(v8, a2, a3);
  if (v6) {
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB6A48] + 24))
  {
    int v9 = *((_DWORD *)a2 + 7);
    *((_DWORD *)a2 + 7) = v9 + 2;
    if (a3 == 4)
    {
      uint64_t v10 = *(void *)(*((void *)this + 2) + 8);
      if (v10) {
        uint64_t v11 = (CFTypeRef *)(v10 - 16);
      }
      else {
        uint64_t v11 = 0;
      }
      CFRetain(v11[1]);
      uint64_t v12 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v11);
      WebKit::VideoPresentationManager::setVideoFullscreenMode(v12, a2, 4);
      if (v10) {
        CFRelease(*(CFTypeRef *)(v10 - 8));
      }
      int v9 = *((_DWORD *)a2 + 7) - 2;
    }
    if (v9)
    {
      *((_DWORD *)a2 + 7) = v9;
    }
    else if ((*((_WORD *)a2 + 17) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef(a2);
    }
  }
}

void WebKit::WebChromeClient::exitFullScreenForElement(WebKit::WebChromeClient *this, WebCore::Element *a2)
{
  if (!a2)
  {
    uint64_t v10 = *(void *)(*((void *)this + 2) + 8);
    if (v10) {
      uint64_t v16 = (CFTypeRef *)(v10 - 16);
    }
    else {
      uint64_t v16 = 0;
    }
    CFRetain(v16[1]);
    uint64_t v14 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v16);
    uint64_t v15 = 0;
LABEL_27:
    WebKit::WebFullScreenManager::exitFullScreenForElement(v14, v15);
    if (!v10) {
      return;
    }
    goto LABEL_28;
  }
  uint64_t v3 = a2;
  if ((*((_WORD *)a2 + 16) & 0x10) == 0
    || (uint64_t v4 = MEMORY[0x1E4FB6A48], *(void *)(*((void *)a2 + 13) + 24) != *(void *)(*MEMORY[0x1E4FB6A48] + 24)))
  {
    uint64_t v10 = *(void *)(*((void *)this + 2) + 8);
    if (v10) {
      char v13 = (CFTypeRef *)(v10 - 16);
    }
    else {
      char v13 = 0;
    }
    CFRetain(v13[1]);
    uint64_t v14 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v13);
    uint64_t v15 = v3;
    goto LABEL_27;
  }
  int v5 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = v5 + 2;
  int v6 = *((_DWORD *)a2 + 272);
  if (v5)
  {
    *((_DWORD *)a2 + 7) = v5;
  }
  else if ((*((_WORD *)a2 + 17) & 0x400) == 0)
  {
    WebCore::Node::removedLastRef(a2);
  }
  uint64_t v7 = *(void *)(*((void *)this + 2) + 8);
  if (v7) {
    uint64_t v8 = (CFTypeRef *)(v7 - 16);
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(v8[1]);
  int v9 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v8);
  WebKit::WebFullScreenManager::exitFullScreenForElement(v9, v3);
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  if (v6 == 4)
  {
    if (*(void *)(*((void *)v3 + 13) + 24) != *(void *)(*(void *)v4 + 24)) {
      uint64_t v3 = 0;
    }
    uint64_t v10 = *(void *)(*((void *)this + 2) + 8);
    uint64_t v11 = v10 ? (CFTypeRef *)(v10 - 16) : 0;
    CFRetain(v11[1]);
    uint64_t v12 = WebKit::WebPage::videoPresentationManager((WebKit::WebPage *)v11);
    WebKit::VideoPresentationManager::clearVideoFullscreenMode(v12, v3, 4);
    if (v10)
    {
LABEL_28:
      uint64_t v17 = *(const void **)(v10 - 8);
      CFRelease(v17);
    }
  }
}

float WebKit::WebChromeClient::screenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  float v3 = *(float *)(v2 + 1304);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

float WebKit::WebChromeClient::availableScreenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  float v3 = *(float *)(v2 + 1312);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

float WebKit::WebChromeClient::overrideScreenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  float v3 = *(float *)(v2 + 1320);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

float WebKit::WebChromeClient::overrideAvailableScreenSize(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  float v3 = *(float *)(v2 + 1328);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3;
}

float WebKit::WebChromeClient::screenSizeForFingerprintingProtections(uint64_t a1, float a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = (PAL *)CFRetain(*(CFTypeRef *)(v4 + 8));
  if (PAL::currentUserInterfaceIdiomIsSmallScreen(v5))
  {
    uint64_t v6 = 0;
    while (1)
    {
      float v7 = *(float *)&WebKit::WebPage::screenSizeForFingerprintingProtections(WebCore::LocalFrame const&,WebCore::FloatSize)const::fixedSizes[v6];
      if (a2 <= v7) {
        break;
      }
      v6 += 2;
      if (v6 == 8)
      {
        float v7 = 414.0;
        break;
      }
    }
  }
  else
  {
    float v7 = *(float *)(v4 + 1072);
  }
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  return v7;
}

void WebKit::WebChromeClient::notifyScrollerThumbIsVisibleInRect(WebKit::WebChromeClient *this, const WebCore::IntRect *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2019;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  char v13 = v8;
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v8, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v13, 0);
  uint64_t v10 = v13;
  char v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::recommendedScrollbarStyleDidChange(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  int v13 = a2;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2030;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<WebCore::LayoutUnit,void>::encode(v8, &v13);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v14, 0);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::underlayColor(WebKit::WebChromeClient *this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebCore::Color::Color(a2, (const Color *)(v4 + 152));
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::themeColorChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  *(unsigned char *)(v2 + 945) = 1;
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::sampledPageTopColorChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  *(unsigned char *)(v2 + 947) = 1;
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

uint64_t WebKit::WebChromeClient::appHighlightsVisiblility(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(v2 + 2424);
}

void WebKit::WebChromeClient::plugInStartLabelTitle(WebKit::WebChromeClient *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(void, const WTF::String *))(**(void **)(v4 + 376) + 104))(*(void *)(v4 + 376), a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::plugInStartLabelSubtitle(WebKit::WebChromeClient *this, const WTF::String *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(void, const WTF::String *))(**(void **)(v4 + 376) + 112))(*(void *)(v4 + 376), a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::plugInExtraStyleSheet(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  (*(void (**)(void))(**(void **)(v2 + 376) + 120))(*(void *)(v2 + 376));
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::plugInExtraScript(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  (*(void (**)(void))(**(void **)(v2 + 376) + 128))(*(void *)(v2 + 376));
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::enableSuddenTermination(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2602;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v11, 0);
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::disableSuddenTermination(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2601;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v11, 0);
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::isPlayingMediaDidChange(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::isPlayingMediaDidChange(v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::handleAutoplayEvent(uint64_t a1, char a2, char a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 1980;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  long long v19 = v10;
  uint64_t v11 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1);
  if (!v12 || (*uint64_t v11 = a2, v13 = (unsigned char *)IPC::Encoder::grow(v10, 1uLL, 1), !v14))
  {
    __break(0xC471u);
    JUMPOUT(0x1991BE314);
  }
  *int v13 = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v19, 0);
  uint64_t v16 = v19;
  long long v19 = 0;
  if (!v16)
  {
    if (!v5) {
      return;
    }
    goto LABEL_8;
  }
  IPC::Encoder::~Encoder(v16, v15);
  WTF::fastFree(v17, v18);
  if (v5) {
LABEL_8:
  }
    CFRelease(*(CFTypeRef *)(v5 - 8));
}

void WebKit::WebChromeClient::setTextIndicator(WebKit::WebChromeClient *this, const WebCore::TextIndicatorData *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  WebKit::WebPage::setTextIndicator((WebKit::WebPage *)v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::handleClickForDataDetectionResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v11[0] = a2;
  v11[1] = a3;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  IPC::MessageSender::send<Messages::WebPageProxy::HandleClickForDataDetectionResult>(v7, (uint64_t)v11, v9, 0);
  if (v5)
  {
    uint64_t v10 = *(const void **)(v5 - 8);
    CFRelease(v10);
  }
}

BOOL WebKit::WebChromeClient::shouldDispatchFakeMouseMoveEvents(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = *(unsigned __int8 *)(v2 + 2025);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3 != 0;
}

void WebKit::WebChromeClient::handleAutoFillButtonClick(WebKit::WebChromeClient *this, WebCore::HTMLInputElement *a2)
{
  long long v19 = 0;
  WebKit::InjectedBundleNodeHandle::getOrCreate(a2, (WebKit::InjectedBundleNodeHandle **)&v18);
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(void, uint64_t, CFTypeRef *, void **))(**(void **)(v4 + 376) + 136))(*(void *)(v4 + 376), v4, v18, &v19);
  uint64_t v5 = v4 + 32;
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v20 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(v19, (uint64_t)&v20, &v16);
  uint64_t v6 = v16;
  if (v16) {
    CFRetain(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v17 = v6;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1978;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v20 = v8;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v8, &v17);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v20, 0);
  uint64_t v10 = v20;
  uint64_t v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v13, v14);
  }
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  if (v18) {
    CFRelease(v18[1]);
  }
  uint64_t v12 = (CFTypeRef *)v19;
  long long v19 = 0;
  if (v12) {
    CFRelease(v12[1]);
  }
}

void WebKit::WebChromeClient::inputElementDidResignStrongPasswordAppearance(WebKit::WebChromeClient *this, WebCore::HTMLInputElement *a2)
{
  long long v19 = 0;
  WebKit::InjectedBundleNodeHandle::getOrCreate(a2, (WebKit::InjectedBundleNodeHandle **)&v18);
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  (*(void (**)(void, uint64_t, CFTypeRef *, void **))(**(void **)(v4 + 376) + 144))(*(void *)(v4 + 376), v4, v18, &v19);
  uint64_t v5 = v4 + 32;
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v20 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(v19, (uint64_t)&v20, &v16);
  uint64_t v6 = v16;
  if (v16) {
    CFRetain(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v17 = v6;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 1945;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v20 = v8;
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v8, &v17);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v20, 0);
  uint64_t v10 = v20;
  uint64_t v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v13, v14);
  }
  if (v17) {
    CFRelease(*(CFTypeRef *)(v17 + 8));
  }
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
  if (v18) {
    CFRelease(v18[1]);
  }
  uint64_t v12 = (CFTypeRef *)v19;
  long long v19 = 0;
  if (v12) {
    CFRelease(v12[1]);
  }
}

void WebKit::WebChromeClient::performSwitchHapticFeedback(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 2024;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v11, 0);
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::imageOrMediaDocumentSizeChanged(WebKit::WebChromeClient *this, const WebCore::IntSize *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  WebKit::WebPage::imageOrMediaDocumentSizeChanged((WebKit::WebPage *)v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::didInvalidateDocumentMarkerRects(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::FindController::didInvalidateFindRects(*(_DWORD **)(v2 + 448));
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::hasStorageAccess(uint64_t a1, WebCore::RegistrableDomain *a2, WebCore::RegistrableDomain *a3, uint64_t a4, uint64_t *a5)
{
  WebKit::WebFrame::fromCoreFrame(a4, &v13);
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  uint64_t v11 = v13;
  WebKit::WebPage::hasStorageAccess((uint64_t *)v10, a2, a3, v13, a5);
  if (v9) {
    CFRelease(*(CFTypeRef *)(v9 - 8));
  }
  uint64_t v12 = *(const void **)(v11 + 8);

  CFRelease(v12);
}

void WebKit::WebChromeClient::requestStorageAccess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6)
{
  WebKit::WebFrame::fromCoreFrame(a4, &v15);
  uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v11) {
    uint64_t v12 = v11 - 16;
  }
  else {
    uint64_t v12 = 0;
  }
  CFRetain(*(CFTypeRef *)(v12 + 8));
  uint64_t v13 = v15;
  WebKit::WebPage::requestStorageAccess(v12, a2, a3, v15, a5, a6);
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 - 8));
  }
  uint64_t v14 = *(const void **)(v13 + 8);

  CFRelease(v14);
}

void WebKit::WebChromeClient::setLoginStatus(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::setLoginStatus(v8, a2, a3, a4);
  if (v7)
  {
    uint64_t v9 = *(const void **)(v7 - 8);
    CFRelease(v9);
  }
}

void WebKit::WebChromeClient::isLoggedIn(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  WebKit::WebPage::isLoggedIn(v6, a2, a3);
  if (v5)
  {
    uint64_t v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
}

uint64_t WebKit::WebChromeClient::hasPageLevelStorageAccess(WebKit::WebChromeClient *this, WTF::ASCIICaseInsensitiveHash **a2, WTF::ASCIICaseInsensitiveHash **a3)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  uint64_t hasPageLevelStorageAccess = WebKit::WebPage::hasPageLevelStorageAccess((WebKit::WebPage *)v6, a2, a3);
  if (v5) {
    CFRelease(*(CFTypeRef *)(v5 - 8));
  }
  return hasPageLevelStorageAccess;
}

void WebKit::WebChromeClient::shouldAllowDeviceOrientationAndMotionAccess(uint64_t a1, uint64_t a2, char a3, uint64_t *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrame::fromCoreFrame(a2, &v15);
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v9 = v15;
  uint64_t v10 = *((void *)v15 + 10);
  uint64_t v11 = *((void *)v15 + 11);
  WebKit::WebFrame::info(v15, (uint64_t)v17);
  WebKit::WebPage::shouldAllowDeviceOrientationAndMotionAccess(v8, v10, v11, (uint64_t)v17, a3, a4);
  uint64_t v13 = v22;
  uint64_t v22 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2) {
      WTF::StringImpl::destroy(v13, v12);
    }
    else {
      *(_DWORD *)v13 -= 2;
    }
  }
  if (v21 != -1) {
    ((void (*)(char *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyLNSA_33SupportsObjectIdentifierNullStateE1EEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix_12[v21])(&v16, &v20);
  }
  int v21 = -1;
  CFTypeRef v14 = cf;
  CFTypeRef cf = 0;
  if (v14) {
    CFRelease(v14);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v18);
  if (v7) {
    CFRelease(*(CFTypeRef *)(v7 - 8));
  }
  CFRelease(*((CFTypeRef *)v9 + 1));
}

void WebKit::WebChromeClient::configureLoggingChannel(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::configureLoggingChannel(v8, a2, a3, a4);
  if (v7)
  {
    uint64_t v9 = *(const void **)(v7 - 8);
    CFRelease(v9);
  }
}

BOOL WebKit::WebChromeClient::userIsInteracting(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = *(unsigned __int8 *)(v2 + 920);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3 != 0;
}

void WebKit::WebChromeClient::setUserIsInteracting(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  *(unsigned char *)(v4 + 92IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = a2;
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::setMockWebAuthenticationConfiguration(uint64_t a1, char *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2076;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v13 = v8;
  IPC::ArgumentCoder<WebCore::MockWebAuthenticationConfiguration,void>::encode(v8, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v5, &v13, 0);
  uint64_t v10 = v13;
  uint64_t v13 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v11, v12);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

void WebKit::WebChromeClient::animationDidFinishForElement(WebKit::WebChromeClient *this, const WebCore::Element *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::animationDidFinishForElement((WebCore::Page **)v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::requestTextRecognition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = (CFTypeRef *)(v7 - 16);
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(v8[1]);
  WebKit::WebPage::requestTextRecognition((WebCore::ShareableBitmap *)v8, a2, a3, a4);
  if (v7)
  {
    uint64_t v9 = *(const void **)(v7 - 8);
    CFRelease(v9);
  }
}

void WebKit::WebChromeClient::applyLinkDecorationFilteringWithResult(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  WebKit::WebPage::applyLinkDecorationFilteringWithResult((void *)v8, a2, a3, a4);
  if (v7)
  {
    uint64_t v9 = *(const void **)(v7 - 8);
    CFRelease(v9);
  }
}

void WebKit::WebChromeClient::allowedQueryParametersForAdvancedPrivacyProtections(WebKit::WebChromeClient *this@<X0>, const WTF::URL *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(*((void *)this + 2) + 8);
  if (v5) {
    uint64_t v6 = (CFTypeRef *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(v6[1]);
  WebKit::WebPage::allowedQueryParametersForAdvancedPrivacyProtections((WebKit::WebPage *)v6, a2, a3);
  if (v5)
  {
    uint64_t v7 = *(const void **)(v5 - 8);
    CFRelease(v7);
  }
}

void WebKit::WebChromeClient::didAddOrRemoveViewportConstrainedObjects(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::WebPage::scheduleLayoutViewportHeightExpansionUpdate(v2);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::textAutosizingUsesIdempotentModeChanged(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::WebPage::textAutosizingUsesIdempotentModeChanged((void *)v2);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::showMediaControlsContextMenu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v13[0] = a2;
  v13[1] = a3;
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v9 = v8 + 32;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
  IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::ShowMediaControlsContextMenu,WTF::CompletionHandler<void ()(unsigned long long)> &>(v9, (uint64_t)v13, a4, v11, 0);
  if (v7)
  {
    uint64_t v12 = *(const void **)(v7 - 8);
    CFRelease(v12);
  }
}

void WebKit::WebChromeClient::startApplePayAMSUISession(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v9 = v8 + 32;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
  uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v12 = 2106;
  *((void *)v12 + 1) = v11;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v12 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  int v21 = v12;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a3);
  uint64_t v13 = *a4;
  *a4 = 0;
  CFTypeRef v14 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v14 = &unk_1EE9F5A08;
  v14[1] = v13;
  v20[0] = v14;
  v20[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v9 + 40))(v9, &v21, v20, 0);
  uint64_t v16 = v20[0];
  v20[0] = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = v21;
  int v21 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v15);
    WTF::fastFree(v18, v19);
    if (!v7) {
      return;
    }
  }
  else if (!v7)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v7 - 8));
}

void WebKit::WebChromeClient::abortApplePayAMSUISession(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v4 = *(void *)(v2 + 32);
  uint64_t v3 = v2 + 32;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(v4 + 56))(v3);
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1865;
  *((void *)v6 + 1) = v5;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v3 + 32))(v3, &v11, 0);
  uint64_t v8 = v11;
  uint64_t v11 = 0;
  if (v8)
  {
    IPC::Encoder::~Encoder(v8, v7);
    WTF::fastFree(v9, v10);
    if (!v1) {
      return;
    }
  }
  else if (!v1)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v1 - 8));
}

void WebKit::WebChromeClient::beginSystemPreview(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  uint64_t v12 = *(void *)(v10 + 32);
  uint64_t v11 = v10 + 32;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
  CFTypeRef v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v14 = 1872;
  *((void *)v14 + 1) = v13;
  *((void *)v14 + 66) = (char *)v14 + 16;
  *((void *)v14 + 67) = 512;
  *((void *)v14 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v14 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v14 + 69) = 0;
  IPC::Encoder::encodeHeader(v14);
  uint64_t v23 = v14;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a2);
  IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v14, a3);
  IPC::ArgumentCoder<WebCore::SystemPreviewInfo,void>::encode(v14, a4);
  uint64_t v15 = *a5;
  *a5 = 0;
  uint64_t v16 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v16 = &unk_1EE9F5A30;
  v16[1] = v15;
  v22[0] = v16;
  v22[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v11 + 40))(v11, &v23, v22, 0);
  uint64_t v18 = v22[0];
  v22[0] = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  long long v19 = v23;
  uint64_t v23 = 0;
  if (v19)
  {
    IPC::Encoder::~Encoder(v19, v17);
    WTF::fastFree(v20, v21);
    if (!v9) {
      return;
    }
  }
  else if (!v9)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v9 - 8));
}

void WebKit::WebChromeClient::requestCookieConsent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v5 = v4 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2043;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v17 = v8;
  uint64_t v9 = *a2;
  *a2 = 0;
  uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v10 = &unk_1EE9F5A58;
  v10[1] = v9;
  v16[0] = v10;
  v16[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v5 + 40))(v5, &v17, v16, 0);
  uint64_t v12 = v16[0];
  v16[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = v17;
  uint64_t v17 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v14, v15);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  CFRelease(*(CFTypeRef *)(v3 - 8));
}

BOOL WebKit::WebChromeClient::isUsingUISideCompositing(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  int v3 = *(unsigned __int8 *)(*(void *)(v2 + 72) + 24);
  if (v1) {
    CFRelease(*(CFTypeRef *)(v1 - 8));
  }
  return v3 == 0;
}

void WebKit::WebChromeClient::didAdjustVisibilityWithSelectors(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  WebKit::WebPage::didAdjustVisibilityWithSelectors(v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::gamepadsRecentlyAccessed(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = (CFTypeRef *)(v1 - 16);
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(v2[1]);
  WebKit::WebPage::gamepadsRecentlyAccessed((WebKit::WebPage *)v2);
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::proofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v7) {
    uint64_t v8 = v7 - 16;
  }
  else {
    uint64_t v8 = 0;
  }
  CFRetain(*(CFTypeRef *)(v8 + 8));
  v14[0] = a3;
  v14[1] = a4;
  v13[0] = a2;
  v13[1] = v14;
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v9 = v8 + 32;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
  IPC::MessageSender::send<Messages::WebPageProxy::ProofreadingSessionShowDetailsForSuggestionWithIDRelativeToRect>(v9, v13, v11, 0);
  if (v7)
  {
    uint64_t v12 = *(const void **)(v7 - 8);
    CFRelease(v12);
  }
}

void WebKit::WebChromeClient::proofreadingSessionUpdateStateForSuggestionWithID(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v5) {
    uint64_t v6 = v5 - 16;
  }
  else {
    uint64_t v6 = 0;
  }
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v11[0] = a2;
  uint64_t v12 = a3;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  IPC::MessageSender::send<Messages::WebPageProxy::ProofreadingSessionUpdateStateForSuggestionWithID>(v7, (uint64_t)v11, v9, 0);
  if (v5)
  {
    uint64_t v10 = *(const void **)(v5 - 8);
    CFRelease(v10);
  }
}

void WebKit::WebChromeClient::removeTextAnimationForAnimationID(WebKit::WebChromeClient *this, const WTF::UUID *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = (uint64_t *)a2;
  IPC::MessageSender::send<Messages::WebPageProxy::RemoveTextAnimationForAnimationID>(v4 + 32, &v6);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::removeInitialTextAnimationForActiveWritingToolsSession(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::TextAnimationController::removeInitialTextAnimationForActiveWritingToolsSession(*(uint64_t **)(v2 + 2480));
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::addInitialTextAnimationForActiveWritingToolsSession(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::TextAnimationController::addInitialTextAnimationForActiveWritingToolsSession(*(WebKit::TextAnimationController **)(v2 + 2480));
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::addSourceTextAnimationForActiveWritingToolsSession(uint64_t a1, long long *a2, long long *a3, int a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v12 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v12) {
    uint64_t v13 = v12 - 16;
  }
  else {
    uint64_t v13 = 0;
  }
  CFRetain(*(CFTypeRef *)(v13 + 8));
  WebKit::TextAnimationController::addSourceTextAnimationForActiveWritingToolsSession(*(void *)(v13 + 2480), a2, a3, a4, a5, v14, a7);
  if (v12)
  {
    uint64_t v15 = *(const void **)(v12 - 8);
    CFRelease(v15);
  }
}

void WebKit::WebChromeClient::addDestinationTextAnimationForActiveWritingToolsSession(uint64_t a1, const WTF::UUID *a2, const WTF::UUID *a3, uint64_t *a4, _DWORD **a5)
{
  uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  CFRetain(*(CFTypeRef *)(v10 + 8));
  WebKit::TextAnimationController::addDestinationTextAnimationForActiveWritingToolsSession(*(void *)(v10 + 2480), a2, a3, a4, a5);
  if (v9)
  {
    uint64_t v11 = *(const void **)(v9 - 8);
    CFRelease(v11);
  }
}

void WebKit::WebChromeClient::saveSnapshotOfTextPlaceholderForAnimation(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::TextAnimationController::saveSnapshotOfTextPlaceholderForAnimation(*(void *)(v2 + 2480));
  if (v1)
  {
    uint64_t v3 = *(const void **)(v1 - 8);
    CFRelease(v3);
  }
}

void WebKit::WebChromeClient::clearAnimationsForActiveWritingToolsSession(WebKit::WebChromeClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  CFRetain(*(CFTypeRef *)(v2 + 8));
  WebKit::TextAnimationController::clearAnimationsForActiveWritingToolsSession(*(WebKit::TextAnimationController **)(v2 + 2480), v3);
  if (v1)
  {
    uint64_t v4 = *(const void **)(v1 - 8);
    CFRelease(v4);
  }
}

void WebKit::WebChromeClient::setIsInRedo(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = v3 - 16;
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(*(CFTypeRef *)(v4 + 8));
  *(unsigned char *)(v4 + 185) = a2;
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::hasActiveNowPlayingSessionChanged(WebKit::WebChromeClient *this, char a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  WebKit::WebPage::hasActiveNowPlayingSessionChanged((WebKit::WebPage *)v4, a2);
  if (v3)
  {
    uint64_t v5 = *(const void **)(v3 - 8);
    CFRelease(v5);
  }
}

void WebKit::WebChromeClient::getImageBufferResourceLimitsForTesting(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
  if (v3) {
    uint64_t v4 = (CFTypeRef *)(v3 - 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFRetain(v4[1]);
  uint64_t v5 = (uint64_t *)WebKit::WebPage::ensureRemoteRenderingBackendProxy((WebKit::WebPage *)v4);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  uint64_t v7 = *a2;
  *a2 = 0;
  void *v6 = &unk_1EE9F5A80;
  v6[1] = v7;
  uint64_t v9 = v6;
  char v10 = 0;
  WebKit::RemoteRenderingBackendProxy::sendWithAsyncReply<Messages::RemoteRenderingBackend::GetImageBufferResourceLimitsForTesting,WTF::CompletionHandler<void ()(WebCore::ImageBufferResourceLimits)>,WebKit::RenderingBackendIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>((WebKit::RemoteRenderingBackendProxy *)v5, (uint64_t)&v10, (uint64_t *)&v9, v5[8]);
  uint64_t v8 = (uint64_t)v9;
  uint64_t v9 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 - 8));
  }
}

void WebKit::WebColorChooser::~WebColorChooser(WebKit::WebColorChooser *this, void *a2)
{
  *(void *)this = &unk_1EE9F5880;
  uint64_t v3 = *((void *)this + 3);
  if (!v3)
  {
    *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4)
  {
    *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
LABEL_9:
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
    goto LABEL_11;
  }
  uint64_t v5 = *(unsigned int **)(v4 + 568);
  *(void *)(v4 + 56++*(_DWORD *)(this + 8) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5);
    WTF::fastFree((WTF *)v5, a2);
  }
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v3) {
    goto LABEL_9;
  }
LABEL_11:
  uint64_t v6 = *((void *)this + 2);
  if (v6)
  {
    int v7 = *(_DWORD *)(v6 + 8);
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x1991C0434);
    }
    *(_DWORD *)(v6 + ++*(_DWORD *)(this + 8) = v7 - 1;
  }
  uint64_t v8 = *((void *)this + 1);
  if (v8)
  {
    *(void *)(v8 + ++*(_DWORD *)(this + 8) = 0;
    uint64_t v9 = (unsigned int *)*((void *)this + 1);
    *((void *)this + 1) = 0;
    if (v9)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v9, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((void *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebColorChooser::~WebColorChooser(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebColorChooser::reattachColorChooser(WebKit::WebColorChooser *this, const WebCore::Color *a2)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v6 = (WebKit::WebPage *)(v5 - 16);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  WebKit::WebPage::setActiveColorChooser(v6, this);
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v15[0] = (*(uint64_t (**)(void))(**((void **)this + 2) + 32))(*((void *)this + 2));
  v15[1] = v8;
  (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 40))(v14);
  v16[0] = a2;
  v16[1] = v15;
  void v16[2] = v14;
  uint64_t v9 = *(void *)(*((void *)this + 3) + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  IPC::Connection::send<Messages::WebPageProxy::ShowColorPicker>(v7, (uint64_t)v16, *(void *)(v10 + 40));
  return WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v11);
}

IPC::Encoder *WebKit::WebColorChooser::setSelectedColor(IPC::Encoder *this, const WebCore::Color *a2)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v5 = *(IPC::Encoder **)(v3 + 568);
      if (v5) {
        uint64_t v5 = (IPC::Encoder *)*((void *)v5 + 1);
      }
      if (v5 == this)
      {
        {
          uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v12);
        }
        uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        uint64_t v7 = *(void *)(v3 + 24);
        uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v8 = 2065;
        *((void *)v8 + 1) = v7;
        *((void *)v8 + 66) = (char *)v8 + 16;
        *((void *)v8 + 67) = 512;
        *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v8 + 69) = 0;
        IPC::Encoder::encodeHeader(v8);
        uint64_t v13 = v8;
        IPC::ArgumentCoder<WebCore::Color,void>::encode(v8, a2);
        IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v13, 0, 0);
        this = v13;
        uint64_t v13 = 0;
        if (this)
        {
          IPC::Encoder::~Encoder(this, v9);
          return (IPC::Encoder *)WTF::fastFree(v10, v11);
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebColorChooser::endChooser(IPC::Encoder *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      {
        uint64_t v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v9);
      }
      uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
      uint64_t v4 = *(void *)(v2 + 24);
      uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v5 = 1965;
      *((void *)v5 + 1) = v4;
      *((void *)v5 + 66) = (char *)v5 + 16;
      *((void *)v5 + 67) = 512;
      *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
      *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *((void *)v5 + 69) = 0;
      IPC::Encoder::encodeHeader(v5);
      uint64_t v10 = v5;
      IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
      this = v10;
      uint64_t v10 = 0;
      if (this)
      {
        IPC::Encoder::~Encoder(this, v6);
        return (IPC::Encoder *)WTF::fastFree(v7, v8);
      }
    }
  }
  return this;
}

void WebKit::WebBroadcastChannelRegistry::~WebBroadcastChannelRegistry(WebKit::WebBroadcastChannelRegistry *this, void *a2)
{
  uint64_t v2 = (uint64_t *)*((void *)this + 2);
  if (v2) {
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v2, a2);
  }
}

{
  uint64_t *v3;
  uint64_t vars8;

  uint64_t v3 = (uint64_t *)*((void *)this + 2);
  if (v3) {
    WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(v3, a2);
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebChromeClient::supportsSettingCursor(WebKit::WebChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::allowsAcceleratedCompositing(WebCore::ChromeClient *this)
{
  return 1;
}

uint64_t WebCore::ChromeClient::requiresFullscreenForVideoPlayback(WebCore::ChromeClient *this)
{
  return 0;
}

uint64_t WebCore::ChromeClient::firstResponder(WebCore::ChromeClient *this)
{
  return 0;
}

float WebCore::ChromeClient::minimumWindowSize(WebCore::ChromeClient *this)
{
  return 100.0;
}

uint64_t WebKit::WebChromeClient::needsImageOverlayControllerForSelectionPainting(WebKit::WebChromeClient *this)
{
  return 0;
}

uint64_t std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)a1, a2);
  }
  else
  {
    uint64_t v4 = (WTF *)*(unsigned int *)(a2 + 12);
    *(void *)a1 = 0;
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(a1 + 12) = v4;
    if (v4)
    {
      uint64_t v5 = (void *)WTF::fastMalloc(v4);
      *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = v4;
      *(void *)a1 = v5;
      memcpy(v5, *(const void **)a2, *(unsigned int *)(a2 + 12));
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

void WebKit::toHTTPBody(WebKit *this, const WebCore::FormData *a2, unsigned int a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (a3)
  {
    uint64_t v5 = *MEMORY[0x1E4FB64A8];
    uint64_t v6 = (char *)this + 8;
    for (uint64_t i = 48 * a3; i; i -= 48)
    {
      v16[0] = 0;
      v16[1] = 0;
      int v17 = 0;
      int v8 = *((_DWORD *)a2 + 10);
      if (v8 == -1) {
        uint64_t v9 = -1;
      }
      else {
        uint64_t v9 = *((unsigned int *)a2 + 10);
      }
      if (v9 == 2)
      {
        if (v8 != 2) {
          goto LABEL_26;
        }
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<2ul,WTF::String,WTF::String const&>((uint64_t)v16, v16, (WTF::StringImpl **)a2);
      }
      else if (v9 == 1)
      {
        if (v8 != 1) {
          goto LABEL_26;
        }
        v18[0] = 0;
        LOBYTE(v19) = 0;
        char v20 = 0;
        LOBYTE(v21) = 0;
        char v22 = 0;
        WTF::String::operator=((uint64_t *)v18, (WTF::StringImpl **)a2);
        uint64_t v10 = *((void *)a2 + 2);
        v18[1] = *((WTF::StringImpl **)a2 + 1);
        if (v10 != v5)
        {
          uint64_t v19 = v10;
          char v20 = 1;
        }
        uint64_t v21 = *((void *)a2 + 3);
        char v22 = *((unsigned char *)a2 + 32);
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<1ul,WebKit::HTTPBody::Element::FileData,WebKit::HTTPBody::Element::FileData>((uint64_t)v16, (uint64_t)v16, (uint64_t)v18);
        uint64_t v12 = v18[0];
        v18[0] = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2) {
            WTF::StringImpl::destroy(v12, v11);
          }
          else {
            *(_DWORD *)v12 -= 2;
          }
        }
      }
      else
      {
        if (v8)
        {
LABEL_26:
          uint64_t v15 = (WebKit::HTTPBody *)std::__throw_bad_variant_access[abi:sn180100]();
          WebKit::HTTPBody::~HTTPBody(v15);
          return;
        }
        std::__variant_detail::__assignment<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__assign_alt[abi:sn180100]<0ul,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t)v16, (unsigned int *)v16, (uint64_t)a2);
      }
      unsigned int v13 = *((_DWORD *)this + 5);
      if (v13 == *((_DWORD *)this + 4))
      {
        WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebKit::HTTPBody::Element>((uint64_t)v6, (unint64_t)v16);
      }
      else
      {
        uint64_t v14 = *((void *)this + 1) + 56 * v13;
        *(unsigned char *)uint64_t v14 = 0;
        *(_DWORD *)(v14 + 4++*(_DWORD *)(this + 8) = -1;
        std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::HTTPBody::Element::FileData,WTF::String>,(std::__variant_detail::_Trait)1>>(v14, (uint64_t)v16);
        ++*((_DWORD *)this + 5);
      }
      if (v17 != -1) {
        ((void (*)(WTF::StringImpl **, uint64_t *))off_1EE9F58A8[v17])(v18, v16);
      }
      a2 = (const WebCore::FormData *)((char *)a2 + 48);
    }
  }
}

void WebKit::HTTPBody::~HTTPBody(WTF::StringImpl **this, void *a2)
{
  WTF::Vector<WebKit::HTTPBody::Element,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(this + 1), a2);
  uint64_t v4 = *this;
  *this = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, v3);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy13CreateNewPageEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1504)) {
    WebKit::WebPageCreationParameters::~WebPageCreationParameters((const char ***)(a2 + 24));
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages29NetworkConnectionToWebProcess54TestProcessIncomingSyncMessagesWhenWaitingForSyncReplyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21GetToolbarsAreVisibleEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21GetStatusBarIsVisibleEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19GetMenuBarIsVisibleEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy27RunBeforeUnloadConfirmPanelEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy18RunJavaScriptAlertEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy20RunJavaScriptConfirmEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19RunJavaScriptPromptEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3 = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy10PrintFrameEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::deallocateTable(uint64_t *a1, void *a2)
{
  uint64_t v3 = *((unsigned int *)a1 - 1);
  if (v3)
  {
    uint64_t v4 = a1;
    do
    {
      if (*v4 != -1)
      {
        uint64_t v5 = v4[2];
        if (v5) {
          WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
        }
        uint64_t v6 = v4[1];
        v4[1] = 0;
        if (v6) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, (WTF::StringImpl *)a2);
        }
        uint64_t v7 = *v4;
        *uint64_t v4 = 0;
        if (v7) {
          WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v7, (WTF::StringImpl *)a2);
        }
      }
      v4 += 3;
      --v3;
    }
    while (v3);
  }

  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

_DWORD *WTF::RefCounted<WebCore::HistoryItem>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x19972FD60]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(a1, v5, a2);
}

uint64_t *WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  if (*a1)
  {
    unsigned int v6 = *(_DWORD *)(v5 - 4);
    int v7 = *(_DWORD *)(v5 - 12);
  }
  else
  {
    unsigned int v6 = 0;
    int v7 = 0;
  }
  uint64_t v8 = WTF::fastMalloc((WTF *)(24 * a2 + 16));
  uint64_t v10 = v8;
  uint64_t v11 = v8 + 16;
  if (a2) {
    bzero((void *)(v8 + 16), 24 * a2);
  }
  *a1 = v11;
  *(_DWORD *)(v10 + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v7;
  if (v6)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = v6;
    do
    {
      uint64_t v15 = (uint64_t *)(v5 + 24 * v12);
      uint64_t v16 = *v15;
      if (*v15 != -1)
      {
        if (v16)
        {
          uint64_t v20 = *a1;
          if (*a1) {
            unsigned int v21 = *(_DWORD *)(v20 - 8);
          }
          else {
            unsigned int v21 = 0;
          }
          int v22 = WTF::computeHash<WebCore::PartitionedSecurityOrigin>(v16, v15[1]);
          int v23 = 0;
          do
          {
            unsigned int v24 = v22 & v21;
            uint64_t v25 = (uint64_t *)(v20 + 24 * (v22 & v21));
            int v22 = ++v23 + (v22 & v21);
          }
          while (*v25);
          uint64_t v26 = v20 + 24 * v24;
          uint64_t v29 = *(void *)(v26 + 16);
          uint64_t v28 = (void *)(v26 + 16);
          uint64_t v27 = v29;
          if (v29) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v27, v9);
          }
          uint64_t v30 = v25[1];
          v25[1] = 0;
          if (v30) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v30, (WTF::StringImpl *)v9);
          }
          uint64_t v31 = *v25;
          *uint64_t v25 = 0;
          if (v31) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v31, (WTF::StringImpl *)v9);
          }
          uint64_t v32 = *v15;
          *uint64_t v15 = 0;
          *uint64_t v25 = v32;
          uint64_t v33 = v15[1];
          v15[1] = 0;
          v25[1] = v33;
          uint64_t v34 = v5 + 24 * v12;
          void *v28 = 0;
          uint64_t v35 = *(void *)(v34 + 16);
          *(void *)(v34 + 16) = 0;
          void *v28 = v35;
          uint64_t v36 = *(void *)(v34 + 16);
          if (v36) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v36, v9);
          }
          uint64_t v37 = v15[1];
          v15[1] = 0;
          if (v37) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v37, (WTF::StringImpl *)v9);
          }
          uint64_t v38 = *v15;
          *uint64_t v15 = 0;
          if (v38) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v38, (WTF::StringImpl *)v9);
          }
          if (v15 == a3) {
            unsigned int v13 = v25;
          }
        }
        else
        {
          uint64_t v17 = *(void *)(v5 + 24 * v12 + 16);
          if (v17) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v17, v9);
          }
          uint64_t v18 = v15[1];
          v15[1] = 0;
          if (v18) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v18, (WTF::StringImpl *)v9);
          }
          uint64_t v19 = *v15;
          *uint64_t v15 = 0;
          if (v19) {
            WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v19, (WTF::StringImpl *)v9);
          }
        }
      }
      ++v12;
    }
    while (v12 != v14);
  }
  else
  {
    unsigned int v13 = 0;
    uint64_t result = 0;
    if (!v5) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v5 - 16), v9);
  return v13;
}

uint64_t WTF::computeHash<WebCore::PartitionedSecurityOrigin>(uint64_t a1, uint64_t a2)
{
  int v4 = -1640531527;
  __int16 v5 = 0;
  char v6 = 0;
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v4, a1 + 8);
  WTF::add<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>(&v4, a2 + 8);
  return WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v4);
}

uint64_t WTF::PartitionedSecurityOriginHash::equal(WebCore::SecurityOrigin **a1, const WebCore::SecurityOrigin **a2)
{
  uint64_t result = WebCore::SecurityOrigin::isSameOriginAs(*a1, *a2);
  if (result)
  {
    __int16 v5 = a1[1];
    char v6 = a2[1];
    return WebCore::SecurityOrigin::isSameOriginAs(v5, v6);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>::find<WTF::IdentityHashTranslator<WTF::HashTable<WebCore::PartitionedSecurityOrigin,WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashMap<WebCore::PartitionedSecurityOrigin,WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::PartitionedSecurityOrigin>>,WTF::DefaultHash<WebCore::PartitionedSecurityOrigin>>,WebCore::PartitionedSecurityOrigin>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  int v5 = *(_DWORD *)(v2 - 8);
  unsigned int v6 = WTF::computeHash<WebCore::PartitionedSecurityOrigin>(*a2, a2[1]);
  for (i = 0; ; unsigned int v6 = ++i + v8)
  {
    unsigned int v8 = v6 & v5;
    uint64_t v9 = (void *)(v2 + 24 * (v6 & v5));
    if (*v9 == -1) {
      continue;
    }
    if (!*v9) {
      break;
    }
    if (WTF::PartitionedSecurityOriginHash::equal((WebCore::SecurityOrigin **)(v2 + 24 * v8), (const WebCore::SecurityOrigin **)a2))return (uint64_t)v9; {
  }
    }
  if (!*a1) {
    return 0;
  }
  return *a1 + 24 * *(unsigned int *)(*a1 - 4);
}

void *WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkBroadcastChannelRegistry::PostMessage,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F5980;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkBroadcastChannelRegistry::PostMessage,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0)#1},void,WebKit::WebBroadcastChannelRegistry::postMessage(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F5980;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebBroadcastChannelRegistry::postMessageLocally(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::DestructionThread>,WTF::DefaultRefDerefTraits<WTF::DestructionThread>> &&)::$_0,void>::~CallableWrapper(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F59A8;
  a1[1] = 0;
  if (v2) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebBroadcastChannelRegistry::postMessageLocally(WebCore::PartitionedSecurityOrigin const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::BroadcastChannelIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::Ref<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>> &&,WTF::Ref<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,WTF::RawPtrTraits<WTF::DestructionThread>,WTF::DefaultRefDerefTraits<WTF::DestructionThread>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F59A8;
  *((void *)this + 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WTF::CallbackAggregatorOnThread<(WTF::DestructionThread)0>,(WTF::DestructionThread)0>::deref(v3);
  }

  return WTF::fastFree(this, a2);
}

_DWORD *WTF::RefCounted<WebCore::UserGestureToken>::deref(_DWORD *result)
{
  if (*result == 1)
  {
    uint64_t v1 = (WTF *)MEMORY[0x199733750]();
    return (_DWORD *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*result;
  }
  return result;
}

uint64_t std::__optional_storage_base<WebCore::Color,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::Color,false>>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  if (*(unsigned __int8 *)(result + 8) == a2[8])
  {
    if (*(unsigned char *)(result + 8))
    {
      return WebCore::Color::operator=();
    }
  }
  else if (*(unsigned char *)(result + 8))
  {
    uint64_t v3 = *(void *)result;
    if ((*(void *)result & 0x8000000000000) != 0)
    {
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL;
      if (atomic_fetch_add((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, (unsigned int *)result);
        uint64_t result = WTF::fastFree((WTF *)result, a2);
      }
    }
    *(unsigned char *)(v2 + ++*(_DWORD *)(this + 8) = 0;
  }
  else
  {
    uint64_t result = WebCore::Color::Color();
    *(unsigned char *)(v2 + ++*(_DWORD *)(this + 8) = 1;
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebProcessPool::ReportWebContentCPUTime>(uint64_t a1, double **a2)
{
  int v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v4 = 2585;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v4 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  int v7 = v4;
  IPC::ArgumentCoder<std::tuple<WTF::Seconds const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::Seconds const&,unsigned long long>,0ul,1ul>(v4, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v7, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v7, v5);
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Seconds const&,unsigned long long>,void>::encode<IPC::Encoder,std::tuple<WTF::Seconds const&,unsigned long long>,0ul,1ul>(IPC::Encoder *a1, double **a2)
{
  uint64_t v3 = (uint64_t *)(a2 + 1);
  IPC::ArgumentCoder<WTF::Seconds,void>::encode(a1, *a2);

  return IPC::Encoder::operator<<<unsigned long long>(a1, v3);
}

_DWORD *IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::FrameInfoData const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(a1, *(char **)(a2 + 8));
  int v4 = *(uint64_t **)(a2 + 16);

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidChangeScrollbarsForMainFrame>(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v6 = 1903;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v10 = v6;
  int v7 = (IPC::Encoder *)IPC::Encoder::operator<<<BOOL>(v6, a2);
  IPC::Encoder::operator<<<BOOL>(v7, a2 + 1);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v10, v8);
}

WebCore::FileChooser *WTF::RefCounted<WebCore::FileChooser>::deref(WebCore::FileChooser *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::FileChooser::~FileChooser(result);
    return (WebCore::FileChooser *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebKit::WebOpenPanelResultListener *WTF::RefCounted<WebKit::WebOpenPanelResultListener>::deref(WebKit::WebOpenPanelResultListener *result, void *a2)
{
  if (*(_DWORD *)result == 1)
  {
    WebKit::WebOpenPanelResultListener::~WebOpenPanelResultListener(result, a2);
    return (WebKit::WebOpenPanelResultListener *)WTF::fastFree(v2, v3);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

WebCore::Icon *WTF::RefCounted<WebCore::Icon>::deref(WebCore::Icon *result)
{
  if (*(_DWORD *)result == 1)
  {
    WebCore::Icon::~Icon(result);
    return (WebCore::Icon *)WTF::fastFree(v1, v2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RegisterBlobPathForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F59E0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RegisterBlobPathForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F59E0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::RegisterBlobPathForTesting,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::StartApplePayAMSUISession,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>>(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5A08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::StartApplePayAMSUISession,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>>(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5A08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::StartApplePayAMSUISession,WTF::CompletionHandler<void ()(std::optional<BOOL> &&)>>(WTF::CompletionHandler<void ()(std::optional<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    int v6 = IPC::Decoder::decode<std::tuple<std::optional<BOOL>>>(a2);
    if ((v6 & 0xFF0000) != 0)
    {
      uint64_t v3 = *(void *)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      (*(void (**)(uint64_t, int *))(*(void *)v3 + 16))(v3, &v6);
    }
    else
    {
      __int16 v7 = 0;
      uint64_t v3 = *(void *)(a1 + 8);
      *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
      (*(void (**)(uint64_t, __int16 *))(*(void *)v3 + 16))(v3, &v7);
    }
  }
  else
  {
    __int16 v5 = 0;
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    (*(void (**)(uint64_t, __int16 *))(*(void *)v3 + 16))(v3, &v5);
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::BeginSystemPreview,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5A30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::BeginSystemPreview,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5A30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::BeginSystemPreview,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestCookieConsent,WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>>(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5A58;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestCookieConsent,WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>>(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5A58;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::RequestCookieConsent,WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)>>(WTF::CompletionHandler<void ()(WebCore::CookieConsentDecisionResult)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = *a2;
    if (*a2)
    {
      unint64_t v6 = a2[1];
      if (v6 <= a2[2] - v5)
      {
        a3 = 0;
        uint64_t v9 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v11 = a2[3];
        if (v11)
        {
          if (v6)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v11 + 16))(v11, v5, v6);
            a3 = 0;
            uint64_t v17 = *a2;
            uint64_t v18 = a2[1];
            uint64_t v19 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v9 = 0;
            if (v19 && v18)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17, v18);
              uint64_t v9 = *a2;
              a3 = a2[1];
            }
          }
          else
          {
            a3 = 0;
            uint64_t v9 = 0;
          }
        }
      }
      else
      {
        __int16 v7 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v7 + 1);
        uint64_t v8 = *v7;
        a3 = v6;
        uint64_t v9 = v5;
        if (v8 < 3)
        {
          uint64_t v10 = *(void *)(a1 + 8);
          *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 16))(v10, v8, v6);
          goto LABEL_9;
        }
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v12 = a2[3];
      if (v12)
      {
        if (a3)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v9);
          uint64_t v15 = *a2;
          a3 = a2[1];
          uint64_t v16 = a2[3];
          *a2 = 0;
          a2[1] = 0;
          if (v16)
          {
            if (a3) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v15);
            }
          }
        }
      }
    }
  }
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void, unint64_t))(*(void *)v10 + 16))(v10, 0, a3);
LABEL_9:
  unsigned int v13 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 8);

  return v13(v10);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::ImageBufferResourceLimits>)>,void,WebCore::ImageBufferResourceLimits>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5A80;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::ImageBufferResourceLimits>)>,void,WebCore::ImageBufferResourceLimits>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5A80;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(std::optional<WebCore::ImageBufferResourceLimits>)>,void,WebCore::ImageBufferResourceLimits>::call(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[3];
  v6[2] = a2[2];
  v6[3] = v2;
  long long v3 = a2[1];
  v6[0] = *a2;
  v6[1] = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  char v7 = 1;
  (*(void (**)(uint64_t, _OWORD *))(*(void *)v4 + 16))(v4, v6);
  return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
}

IPC::Encoder *IPC::Connection::send<Messages::WebPageProxy::ShowColorPicker>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v6 = 2086;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v11 = v6;
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v6, *(WebCore::Color **)a2);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v6, *(void **)(a2 + 8));
  IPC::VectorArgumentCoder<false,WebCore::Color,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::Color,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *(void *)(a2 + 16));
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

uint64_t WebKit::WebCryptoClient::wrapCryptoKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(a1 + 16))
  {
      goto LABEL_50;
    uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    uint64_t v8 = *(void *)(a1 + 8);
    uint64_t v47 = 0;
    IPC::Connection::createSyncMessageEncoder(3781, v8, &v47, &v46);
    IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v46, *(const void **)a2, *(unsigned int *)(a2 + 12));
    IPC::Connection::sendSyncMessage(v7, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
    if (v45)
    {
      if (v45 == 1)
      {
        int v9 = 0;
        LOBYTE(v35) = (_BYTE)v44;
        unsigned int v10 = 1;
        int v39 = 1;
        int v11 = 1;
        goto LABEL_24;
      }
    }
    else
    {
      LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      char v43 = 0;
      IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v44, (uint64_t)&v40);
      if (!v43)
      {
        int v9 = 0;
        LOBYTE(v35) = 13;
        unsigned int v10 = 1;
        int v39 = 1;
        int v11 = v45;
        if (v45 == -1)
        {
LABEL_25:
          uint64_t v19 = v46;
          uint64_t v46 = 0;
          if (v19)
          {
            IPC::Encoder::~Encoder(v19, v15);
            WTF::fastFree(v20, v21);
            if (v10) {
              goto LABEL_27;
            }
          }
          else if (v10)
          {
LABEL_27:
            LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
            char v42 = 0;
LABEL_31:
            std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](a3, (uint64_t)&v40);
            if (v42)
            {
              uint64_t v25 = v40;
              if (v40)
              {
                char v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v25, v23);
              }
            }
            unsigned int v24 = off_1EE9F5CB8;
            return ((uint64_t (*)(WTF **, uint64_t **))v24[v10])(&v40, &v35);
          }
          LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          char v42 = 0;
          if (v9)
          {
            int v22 = v36;
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            char v40 = v22;
            unint64_t v41 = __PAIR64__(v3, v4);
            char v42 = 1;
          }
          goto LABEL_31;
        }
LABEL_24:
        ((void (*)(WTF **, uint64_t **))off_1EE9F5E10[v11])(&v40, &v44);
        goto LABEL_25;
      }
      if (!v45)
      {
        uint64_t v16 = v44;
        int v44 = 0;
        if (v42)
        {
          unsigned int v4 = v41;
          unsigned int v3 = HIDWORD(v41);
          uint64_t v36 = v40;
          unint64_t v37 = v41;
          int v9 = 1;
        }
        else
        {
          int v9 = 0;
          LOBYTE(v36) = 0;
        }
        unsigned int v10 = 0;
        int v11 = 0;
        uint64_t v35 = v16;
        char v38 = v9;
        int v39 = 0;
        goto LABEL_24;
      }
    }
LABEL_49:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_50:
    uint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v33);
  }
  {
    uint64_t v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v34);
  }
  uint64_t v12 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v47 = 0;
  IPC::Connection::createSyncMessageEncoder(3826, 0, &v47, &v46);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v46, *(const void **)a2, *(unsigned int *)(a2 + 12));
  IPC::Connection::sendSyncMessage(v12, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
  if (v45)
  {
    if (v45 != 1) {
      goto LABEL_49;
    }
    int v13 = 0;
    LOBYTE(v35) = (_BYTE)v44;
    unsigned int v10 = 1;
    int v39 = 1;
    int v14 = 1;
    goto LABEL_37;
  }
  LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  char v43 = 0;
  IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v44, (uint64_t)&v40);
  if (v43)
  {
    if (v45) {
      goto LABEL_49;
    }
    uint64_t v18 = v44;
    int v44 = 0;
    if (v42)
    {
      unsigned int v4 = v41;
      unsigned int v3 = HIDWORD(v41);
      uint64_t v36 = v40;
      unint64_t v37 = v41;
      int v13 = 1;
    }
    else
    {
      int v13 = 0;
      LOBYTE(v36) = 0;
    }
    unsigned int v10 = 0;
    int v14 = 0;
    uint64_t v35 = v18;
    char v38 = v13;
    int v39 = 0;
    goto LABEL_37;
  }
  int v13 = 0;
  LOBYTE(v35) = 13;
  unsigned int v10 = 1;
  int v39 = 1;
  int v14 = v45;
  if (v45 != -1) {
LABEL_37:
  }
    ((void (*)(WTF **, uint64_t **))off_1EE9F5E10[v14])(&v40, &v44);
  uint64_t v26 = v46;
  uint64_t v46 = 0;
  if (v26)
  {
    IPC::Encoder::~Encoder(v26, v17);
    WTF::fastFree(v27, v28);
    if (v10) {
      goto LABEL_40;
    }
LABEL_42:
    LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    char v42 = 0;
    if (v13)
    {
      uint64_t v29 = v36;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      char v40 = v29;
      unint64_t v41 = __PAIR64__(v3, v4);
      char v42 = 1;
    }
    goto LABEL_44;
  }
  if (!v10) {
    goto LABEL_42;
  }
LABEL_40:
  LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  char v42 = 0;
LABEL_44:
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100](a3, (uint64_t)&v40);
  if (v42)
  {
    uint64_t v32 = v40;
    if (v40)
    {
      char v40 = 0;
      LODWORD(v41) = 0;
      WTF::fastFree(v32, v30);
    }
  }
  unsigned int v24 = off_1EE9F5CC8;
  return ((uint64_t (*)(WTF **, uint64_t **))v24[v10])(&v40, &v35);
}

WTF *WebKit::WebCryptoClient::unwrapCryptoKey@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t result = (WTF *)WebCore::readSerializedCryptoKey();
  if (!v51)
  {
    *a2 = 0;
    a2[16] = 0;
    goto LABEL_50;
  }
  if (!*(unsigned char *)(a1 + 16))
  {
    {
      uint64_t v34 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v34);
    }
    uint64_t v13 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    uint64_t v47 = 0;
    IPC::Connection::createSyncMessageEncoder(3824, 0, &v47, &v46);
    IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::encode(v46, (uint64_t)v48);
    IPC::Connection::sendSyncMessage(v13, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
    if (v45)
    {
      if (v45 != 1) {
        goto LABEL_56;
      }
      int v14 = 0;
      LOBYTE(v35) = (_BYTE)v44;
      unsigned int v11 = 1;
      int v39 = 1;
      int v15 = 1;
    }
    else
    {
      LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      char v43 = 0;
      IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v44, (uint64_t)&v40);
      if (v43)
      {
        if (v45) {
          goto LABEL_56;
        }
        uint64_t v19 = v44;
        int v44 = 0;
        if (v42)
        {
          unsigned int v3 = v41;
          unsigned int v2 = HIDWORD(v41);
          uint64_t v36 = v40;
          unint64_t v37 = v41;
          int v14 = 1;
        }
        else
        {
          int v14 = 0;
          LOBYTE(v36) = 0;
        }
        unsigned int v11 = 0;
        int v15 = 0;
        uint64_t v35 = v19;
        char v38 = v14;
        int v39 = 0;
      }
      else
      {
        int v14 = 0;
        LOBYTE(v35) = 13;
        unsigned int v11 = 1;
        int v39 = 1;
        int v15 = v45;
        if (v45 == -1)
        {
LABEL_41:
          uint64_t v27 = v46;
          uint64_t v46 = 0;
          if (v27)
          {
            IPC::Encoder::~Encoder(v27, v18);
            WTF::fastFree(v28, v29);
            if (v11) {
              goto LABEL_43;
            }
          }
          else if (v11)
          {
LABEL_43:
            LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
            char v42 = 0;
LABEL_47:
            std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100]((uint64_t)a2, (uint64_t)&v40);
            if (v42)
            {
              uint64_t v32 = v40;
              if (v40)
              {
                char v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v32, v31);
              }
            }
            uint64_t v25 = off_1EE9F5CE8;
            goto LABEL_49;
          }
          LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          char v42 = 0;
          if (v14)
          {
            uint64_t v30 = v36;
            uint64_t v36 = 0;
            unint64_t v37 = 0;
            char v40 = v30;
            unint64_t v41 = __PAIR64__(v2, v3);
            char v42 = 1;
          }
          goto LABEL_47;
        }
      }
    }
    ((void (*)(WTF **, uint64_t **))off_1EE9F5E10[v15])(&v40, &v44);
    goto LABEL_41;
  }
  {
    uint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v33);
  }
  uint64_t result = (WTF *)WebKit::WebProcess::singleton(void)::process;
  if (!*(unsigned char *)(a1 + 16))
  {
    __break(1u);
    return result;
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v47 = 0;
  IPC::Connection::createSyncMessageEncoder(3780, v9, &v47, &v46);
  IPC::ArgumentCoder<WebCore::WrappedCryptoKey,void>::encode(v46, (uint64_t)v48);
  IPC::Connection::sendSyncMessage(v8, v47, (uint64_t *)&v46, 0, (uint64_t)&v44, INFINITY);
  if (v45)
  {
    if (v45 == 1)
    {
      int v10 = 0;
      LOBYTE(v35) = (_BYTE)v44;
      unsigned int v11 = 1;
      int v39 = 1;
      int v12 = 1;
LABEL_27:
      ((void (*)(WTF **, uint64_t **))off_1EE9F5E10[v12])(&v40, &v44);
      goto LABEL_28;
    }
LABEL_56:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  char v43 = 0;
  IPC::Decoder::operator>><std::tuple<std::optional<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(v44, (uint64_t)&v40);
  if (v43)
  {
    if (!v45)
    {
      uint64_t v17 = v44;
      int v44 = 0;
      if (v42)
      {
        unsigned int v3 = v41;
        unsigned int v2 = HIDWORD(v41);
        uint64_t v36 = v40;
        unint64_t v37 = v41;
        int v10 = 1;
      }
      else
      {
        int v10 = 0;
        LOBYTE(v36) = 0;
      }
      unsigned int v11 = 0;
      int v12 = 0;
      uint64_t v35 = v17;
      char v38 = v10;
      int v39 = 0;
      goto LABEL_27;
    }
    goto LABEL_56;
  }
  int v10 = 0;
  LOBYTE(v35) = 13;
  unsigned int v11 = 1;
  int v39 = 1;
  int v12 = v45;
  if (v45 != -1) {
    goto LABEL_27;
  }
LABEL_28:
  uint64_t v20 = v46;
  uint64_t v46 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v16);
    WTF::fastFree(v21, v22);
    if (v11) {
      goto LABEL_30;
    }
LABEL_32:
    LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    char v42 = 0;
    if (v10)
    {
      int v23 = v36;
      uint64_t v36 = 0;
      unint64_t v37 = 0;
      char v40 = v23;
      unint64_t v41 = __PAIR64__(v2, v3);
      char v42 = 1;
    }
    goto LABEL_34;
  }
  if (!v11) {
    goto LABEL_32;
  }
LABEL_30:
  LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  char v42 = 0;
LABEL_34:
  std::__optional_move_base<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__optional_move_base[abi:sn180100]((uint64_t)a2, (uint64_t)&v40);
  if (v42)
  {
    uint64_t v26 = v40;
    if (v40)
    {
      char v40 = 0;
      LODWORD(v41) = 0;
      WTF::fastFree(v26, v24);
    }
  }
  uint64_t v25 = off_1EE9F5CD8;
LABEL_49:
  uint64_t result = (WTF *)((uint64_t (*)(WTF **, uint64_t **))v25[v11])(&v40, &v35);
LABEL_50:
  if (v51)
  {
    uint64_t result = v49;
    if (v49)
    {
      unint64_t v49 = 0;
      int v50 = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDataListSuggestionPicker::handleKeydownWithIdentifier(WebKit::WebDataListSuggestionPicker *this, const WTF::String *a2)
{
  {
    int v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v4 = *(void *)(*((void *)this + 3) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1982;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v13 = v7;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, (uint64_t *)a2);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v13, 0, 0);
  uint64_t result = v13;
  uint64_t v13 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebDataListSuggestionPicker::close(WebKit::WebDataListSuggestionPicker *this)
{
  {
    int v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v2 = *(void *)(*((void *)this + 3) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1966;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v11 = v5;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  unsigned int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

uint64_t WebKit::WebDataListSuggestionPicker::displayWithActivationType(uint64_t a1, char a2)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 24))(&v27);
  if (HIDWORD(v28))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 8);
    if (v4) {
      uint64_t v5 = v4 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
    CFRetain(*(CFTypeRef *)(v5 + 8));
    *(void *)&long long v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16));
    *((void *)&v26 + 1) = v6;
    uint64_t v7 = WebKit::WebPage::localMainFrameView((WebKit::WebPage *)v5);
    if (v7)
    {
      uint64_t v8 = (WebCore::ScrollView *)v7;
      ++*(_DWORD *)(v7 + 8);
      v25[0] = (IPC::Encoder *)WebCore::ScrollView::unobscuredContentRect();
      v25[1] = v9;
      uint64_t v22 = WebCore::ScrollView::contentsToRootView(v8, (const WebCore::IntRect *)v25);
      v23[0] = v10;
      if ((WebCore::IntRect::intersects((WebCore::IntRect *)&v22, (const WebCore::IntRect *)&v26) & 1) == 0)
      {
        WebKit::WebDataListSuggestionPicker::close((WebKit::WebDataListSuggestionPicker *)a1);
        if (*((_DWORD *)v8 + 2) == 1)
        {
          (*(void (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
          if (!v4) {
            return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v11);
          }
        }
        else
        {
          --*((_DWORD *)v8 + 2);
          if (!v4) {
            return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v11);
          }
        }
        goto LABEL_18;
      }
      if (*((_DWORD *)v8 + 2) == 1) {
        (*(void (**)(WebCore::ScrollView *))(*(void *)v8 + 8))(v8);
      }
      else {
        --*((_DWORD *)v8 + 2);
      }
    }
    WebKit::WebPage::setActiveDataListSuggestionPicker((WebKit::WebPage *)v5, (WebKit::WebDataListSuggestionPicker *)a1);
    LOBYTE(v22) = a2;
    v23[0] = v27;
    uint64_t v12 = v28;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    v23[1] = v12;
    long long v24 = v26;
    {
      unsigned int v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v21);
    }
    uint64_t v13 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    uint64_t v14 = *(void *)(v5 + 40);
    int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v15 = 2089;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v15 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    v25[0] = v15;
    IPC::ArgumentCoder<WebCore::DataListSuggestionInformation,void>::encode(v15, (char *)&v22);
    IPC::Connection::sendMessageImpl(v13, (uint64_t *)v25, 0, 0);
    uint64_t v17 = v25[0];
    v25[0] = 0;
    if (v17)
    {
      IPC::Encoder::~Encoder(v17, v16);
      WTF::fastFree(v19, v20);
    }
    WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v23, v16);
    if (v4) {
LABEL_18:
    }
      CFRelease(*(CFTypeRef *)(v4 - 8));
  }
  else
  {
    WebKit::WebDataListSuggestionPicker::close((WebKit::WebDataListSuggestionPicker *)a1);
  }
  return WTF::Vector<WebCore::HTTPHeaderField,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v11);
}

IPC::Encoder *WebKit::WebDateTimeChooser::endChooser(WebKit::WebDateTimeChooser *this)
{
  {
    uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  uint64_t v1 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v2 = *(void *)(*((void *)this + 3) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1967;
  *((void *)v5 + 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  unsigned int v11 = v5;
  IPC::Connection::sendMessageImpl(v1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  unsigned int v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebDateTimeChooser::showChooser(WebKit::WebDateTimeChooser *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*((void *)a1 + 3) + 8);
  if (v4) {
    uint64_t v5 = v4 - 16;
  }
  else {
    uint64_t v5 = 0;
  }
  CFRetain(*(CFTypeRef *)(v5 + 8));
  WebKit::WebPage::setActiveDateTimeChooser((WebKit::WebPage *)v5, a1);
  {
    uint64_t v13 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v13);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  uint64_t v7 = *(void *)(v5 + 40);
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 2090;
  *((void *)v8 + 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v14 = v8;
  IPC::ArgumentCoder<WebCore::DateTimeChooserParameters,void>::encode(v8, a2);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)&v14, 0, 0);
  uint64_t v10 = v14;
  uint64_t v14 = 0;
  if (!v10)
  {
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  IPC::Encoder::~Encoder(v10, v9);
  WTF::fastFree(v11, v12);
  if (v4) {
LABEL_7:
  }
    CFRelease(*(CFTypeRef *)(v4 - 8));
}

void WebKit::WebDiagnosticLoggingClient::~WebDiagnosticLoggingClient(WebKit::WebDiagnosticLoggingClient *this, void *a2)
{
  if (*((_DWORD *)this + 2))
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
  }
  else
  {
    WTF::fastFree(this, a2);
  }
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessage(WTF *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4 || (uint64_t result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v8 <= 0.05))
  {
    uint64_t v9 = (void *)*((void *)a1 + 2);
    v16[0] = a2;
    v16[1] = a3;
    char v17 = 0;
    uint64_t v10 = v9[4];
    v9 += 4;
    uint64_t v11 = (*(uint64_t (**)(void *))(v10 + 56))(v9);
    uint64_t v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v12 = 1996;
    *((void *)v12 + 1) = v11;
    *((void *)v12 + 66) = (char *)v12 + 16;
    *((void *)v12 + 67) = 512;
    *((void *)v12 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v12 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v12 + 69) = 0;
    IPC::Encoder::encodeHeader(v12);
    uint64_t v18 = v12;
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebCore::ShouldSample>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebCore::ShouldSample>,0ul,1ul,2ul>(v12, (uint64_t)v16);
    (*(void (**)(void *, IPC::Encoder **, void))(*v9 + 32))(v9, &v18, 0);
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v13);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  return result;
}

uint64_t WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithResult(WTF *a1, uint64_t *a2, uint64_t *a3, int a4, int a5)
{
  if (!a5 || (uint64_t result = WTF::cryptographicallyRandomUnitInterval(a1), v10 <= 0.05))
  {
    uint64_t v11 = *((void *)a1 + 2);
    uint64_t v13 = *(void *)(v11 + 32);
    uint64_t v12 = v11 + 32;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
    int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v15 = 1999;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v15 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    unsigned int v21 = v15;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, a3);
    uint64_t v16 = (_DWORD *)IPC::Encoder::grow(v15, 4uLL, 4);
    if (v17 <= 3)
    {
      uint64_t result = 831;
      __break(0xC471u);
    }
    else
    {
      _DWORD *v16 = a4;
      IPC::ArgumentCoder<WebCore::ShouldSample,void>::encode<IPC::Encoder>(v15, 0);
      (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v12 + 32))(v12, &v21, 0);
      uint64_t result = (uint64_t)v21;
      unsigned int v21 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v18);
        return WTF::fastFree(v19, v20);
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithValue(WTF *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, double a6)
{
  int v20 = a4;
  if (!a5 || (uint64_t result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v11 <= 0.05))
  {
    uint64_t v12 = (void *)*((void *)a1 + 2);
    uint64_t v13 = v12[4];
    v12 += 4;
    uint64_t v14 = (*(uint64_t (**)(void *))(v13 + 56))(v12);
    int v15 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v15 = 2001;
    *((void *)v15 + 1) = v14;
    *((void *)v15 + 66) = (char *)v15 + 16;
    *((void *)v15 + 67) = 512;
    *((void *)v15 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v15 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v15 + 69) = 0;
    IPC::Encoder::encodeHeader(v15);
    unsigned int v21 = v15;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v15, a3);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v15, a6);
    uint64_t v16 = (IPC::Encoder *)IPC::Encoder::operator<<<int>(v15, &v20);
    IPC::ArgumentCoder<WebCore::ShouldSample,void>::encode<IPC::Encoder>(v16, 0);
    (*(void (**)(void *, IPC::Encoder **, void))(*v12 + 32))(v12, &v21, 0);
    uint64_t result = v21;
    unsigned int v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v17);
      return (IPC::Encoder *)WTF::fastFree(v18, v19);
    }
  }
  return result;
}

IPC::Encoder **WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithEnhancedPrivacy(WTF *a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4 || (uint64_t result = (IPC::Encoder **)WTF::cryptographicallyRandomUnitInterval(a1), v8 <= 0.05))
  {
    uint64_t v9 = *((void *)a1 + 2) + 32;
    v10[0] = a2;
    v10[1] = a3;
    char v11 = 0;
    return IPC::MessageSender::send<Messages::WebPageProxy::LogDiagnosticMessageWithEnhancedPrivacyFromWebProcess>(v9, (uint64_t)v10);
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::LogDiagnosticMessageWithEnhancedPrivacyFromWebProcess>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::LogDiagnosticMessageWithEnhancedPrivacyFromWebProcess>(a1, a2, v4);
}

IPC::Encoder *WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithValueDictionary(WTF *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, int a5)
{
  if (!a5 || (uint64_t result = (IPC::Encoder *)WTF::cryptographicallyRandomUnitInterval(a1), v10 <= 0.05))
  {
    char v11 = (void *)*((void *)a1 + 2);
    uint64_t v12 = v11[4];
    v11 += 4;
    uint64_t v13 = (*(uint64_t (**)(void *))(v12 + 56))(v11);
    uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v14 = 2000;
    *((void *)v14 + 1) = v13;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v14 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    uint64_t v18 = v14;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v14, a3);
    ((void (*)(IPC::Encoder *, uint64_t))IPC::ArgumentCoder<WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>,void>::encode<IPC::Encoder,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits> const&>)(v14, a4);
    IPC::ArgumentCoder<WebCore::ShouldSample,void>::encode<IPC::Encoder>(v14, 0);
    (*(void (**)(void *, IPC::Encoder **, void))(*v11 + 32))(v11, &v18, 0);
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v15);
      return (IPC::Encoder *)WTF::fastFree(v16, v17);
    }
  }
  return result;
}

uint64_t WebKit::WebDiagnosticLoggingClient::logDiagnosticMessageWithDomain(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1997;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v16 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  double v10 = (unsigned char *)IPC::Encoder::grow(v9, 1uLL, 1);
  if (v11)
  {
    unsigned char *v10 = a3;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v16, 0);
    uint64_t result = (uint64_t)v16;
    uint64_t v16 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder((IPC::Encoder *)result, v12);
      return WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

const char ***WebKit::WebDragClient::willPerformDragDestinationAction(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (a2 == 4)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void *)(v4 + 712);
    *(void *)(v4 + 712) = 0;
    uint64_t result = *(const char ****)(v4 + 688);
    *(void *)(v4 + 68++*(_DWORD *)(this + 8) = v5;
    if (result) {
      return WTF::RefCounted<WebKit::SandboxExtension>::deref(result);
    }
  }
  else if (v2 && (uint64_t v7 = *(void *)(v2 + 8)) != 0)
  {
    return (const char ***)WebKit::WebPage::mayPerformUploadDragDestinationAction((WebKit::WebPage *)(v7 - 16));
  }
  else
  {
    return (const char ***)WebKit::WebPage::mayPerformUploadDragDestinationAction(0);
  }
  return result;
}

uint64_t WebKit::WebDragClient::dragSourceActionMaskForPoint(WebKit::WebDragClient *this, const IntPoint *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  return *(unsigned __int8 *)(v3 + 796);
}

uint64_t WebKit::WebEditorClient::shouldDeleteRange(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 48))();
}

uint64_t WebKit::WebEditorClient::smartInsertDeleteEnabled(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return (*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 48) + 112) + 703) >> 2) & 1;
}

uint64_t WebKit::WebEditorClient::isSelectTrailingWhitespaceEnabled(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 4) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  return *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 48) + 112) + 698) >> 7;
}

uint64_t WebKit::WebEditorClient::isContinuousSpellCheckingEnabled(WebKit::WebEditorClient *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return *(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 280) & 1;
}

uint64_t WebKit::WebEditorClient::isGrammarCheckingEnabled(WebKit::WebEditorClient *this)
{
  {
    uint64_t v2 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v2);
  }
  return (*(unsigned __int8 *)(WebKit::WebProcess::singleton(void)::process + 280) >> 1) & 1;
}

uint64_t WebKit::WebEditorClient::spellCheckerDocumentTag(WebKit::WebEditorClient *this)
{
  return 0;
}

uint64_t WebKit::WebEditorClient::shouldBeginEditing(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 16))();
}

uint64_t WebKit::WebEditorClient::shouldEndEditing(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 24))();
}

uint64_t WebKit::WebEditorClient::shouldInsertNode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 32))();
}

uint64_t WebKit::WebEditorClient::shouldInsertText(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 40))();
}

uint64_t WebKit::WebEditorClient::shouldChangeSelectedRange(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 56))();
}

uint64_t WebKit::WebEditorClient::shouldApplyStyle(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 64))();
}

unsigned int *WebKit::WebEditorClient::registerAttachmentIdentifier(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned int **a5)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9) {
      uint64_t v10 = v9 - 16;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *a5;
  uint64_t v12 = *((void *)*a5 + 6);
  *a5 = 0;
  uint64_t v23 = v12;
  long long v24 = v11;
  uint64_t v25 = 0;
  uint64_t v14 = *(void *)(v10 + 32);
  uint64_t v13 = v10 + 32;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
  uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v16 = 2032;
  *((void *)v16 + 1) = v15;
  *((void *)v16 + 66) = (char *)v16 + 16;
  *((void *)v16 + 67) = 512;
  *((void *)v16 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v16 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v16 + 69) = 0;
  IPC::Encoder::encodeHeader(v16);
  long long v26 = v16;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v16, a4);
  IPC::ArgumentCoder<IPC::SharedBufferReference,void>::encode(v16, (IPC::SharedBufferReference *)&v23);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v13 + 32))(v13, &v26, 0);
  uint64_t v18 = v26;
  long long v26 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v21, v22);
  }
  uint64_t v19 = v25;
  uint64_t v25 = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::SharedMemory,(WTF::DestructionThread)0>::deref(v19);
  }
  uint64_t result = v24;
  long long v24 = 0;
  if (result) {
    return WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(result, v17);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::registerAttachments(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = v4 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2034;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  unint64_t v17 = v9;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v9, *(unsigned int *)(a2 + 12));
  uint64_t v10 = *(unsigned int *)(a2 + 12);
  if (v10)
  {
    uint64_t v11 = *(uint64_t **)a2;
    uint64_t v12 = 24 * v10;
    do
    {
      IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::encode(v9, v11);
      v11 += 3;
      v12 -= 24;
    }
    while (v12);
  }
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v17, 0);
  uint64_t result = v17;
  unint64_t v17 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::registerAttachmentIdentifier(WebKit::WebEditorClient *this, const WTF::String *a2, const WTF::String *a3, const WTF::String *a4)
{
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  v15[0] = (uint64_t *)a2;
  v15[1] = (uint64_t *)a3;
  void v15[2] = (uint64_t *)a4;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = v6 + 32;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 2033;
  *((void *)v10 + 1) = v9;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v16 = v10;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul>(v10, v15);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v16, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::registerAttachmentIdentifier(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = v4 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2031;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v14 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v14, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::cloneAttachmentData(WebKit::WebEditorClient *this, const WTF::String *a2, const WTF::String *a3)
{
  uint64_t v5 = *((void *)this + 4);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v8 = v7 + 32;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 1878;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v16 = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v16, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::didInsertAttachmentWithIdentifier(uint64_t a1, uint64_t *a2, uint64_t *a3, char a4)
{
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v9 = v8 - 16;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v11 = *(void *)(v9 + 32);
  uint64_t v10 = v9 + 32;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
  uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v13 = 1932;
  *((void *)v13 + 1) = v12;
  *((void *)v13 + 66) = (char *)v13 + 16;
  *((void *)v13 + 67) = 512;
  *((void *)v13 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v13 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v13 + 69) = 0;
  IPC::Encoder::encodeHeader(v13);
  int v20 = v13;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a3);
  uint64_t v14 = (unsigned char *)IPC::Encoder::grow(v13, 1uLL, 1);
  if (!v15)
  {
    __break(0xC471u);
    JUMPOUT(0x1991C419CLL);
  }
  unsigned char *v14 = a4;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v10 + 32))(v10, &v20, 0);
  uint64_t result = v20;
  int v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::didRemoveAttachmentWithIdentifier(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = v4 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1944;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v14 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v14, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::serializedAttachmentDataForIdentifiers@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    goto LABEL_37;
  }
  uint64_t v6 = *(void *)(v5 + 8);
  if (v6) {
    uint64_t v7 = v6 - 16;
  }
  else {
    uint64_t v7 = 0;
  }
  while (1)
  {
    uint64_t v9 = *(void *)(v7 + 32);
    uint64_t v8 = v7 + 32;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
    uint64_t v12 = (IPC::Decoder *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
    if (!v12)
    {
      LODWORD(v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      LODWORD(a2) = 0;
      LOBYTE(v34) = 3;
      int v14 = 1;
      int v38 = 1;
LABEL_22:
      unsigned int v21 = (IPC::Decoder **)&v39;
      goto LABEL_24;
    }
    uint64_t v45 = 0;
    IPC::Connection::createSyncMessageEncoder(3777, v10, &v45, &v44);
    IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v44, a2);
    IPC::Connection::sendSyncMessage((uint64_t)v12, v45, (uint64_t *)&v44, 0, (uint64_t)&v42, INFINITY);
    if (!v43) {
      break;
    }
    if (v43 == 1)
    {
      LOBYTE(v34) = (_BYTE)v42;
      int v14 = 1;
      int v38 = 1;
      int v15 = 1;
      goto LABEL_17;
    }
LABEL_36:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_37:
    uint64_t v7 = 0;
  }
  IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v42, v13, (uint64_t)&v34);
  if (!(_BYTE)v36)
  {
    LOBYTE(v34) = 13;
    int v14 = 1;
    int v38 = 1;
    goto LABEL_16;
  }
  uint64_t v12 = v34;
  LODWORD(v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v35;
  a2 = HIDWORD(v35);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v41 = 1;
  WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, v11);
  if (v43) {
    goto LABEL_36;
  }
  unint64_t v17 = v42;
  char v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v46 = 0;
  v47[0] = 0;
  uint64_t v34 = v17;
  uint64_t v35 = v12;
  v47[1] = 0;
  int v36 = v10;
  int v37 = a2;
  int v38 = 0;
  WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v47, v16);
  uint64_t v19 = v46;
  uint64_t v46 = 0;
  if (v19)
  {
    IPC::Decoder::~Decoder(v19);
    WTF::fastFree(v32, v33);
  }
  WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v18);
  int v14 = 0;
LABEL_16:
  int v15 = v43;
  if (v43 != -1) {
LABEL_17:
  }
    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F5E10[v15])(&v46, &v42);
  int v20 = v44;
  int v44 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v11);
    WTF::fastFree(v30, v31);
  }
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v14)
  {
    uint64_t v12 = 0;
    LODWORD(v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    LODWORD(a2) = 0;
    int v14 = 1;
    goto LABEL_22;
  }
  unsigned int v21 = &v35;
LABEL_24:
  *unsigned int v21 = 0;
  v21[1] = 0;
  uint64_t v46 = v12;
  v47[0] = __PAIR64__(a2, v10);
  uint64_t result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v39, v11);
  *(void *)a3 = 0;
  *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a3 + 12) = a2;
  if (!a2)
  {
    uint64_t result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v23);
    return ((uint64_t (*)(uint64_t, IPC::Decoder **))off_1EE9F5CF8[v14])(result, &v34);
  }
  if (a2 >= 0xAAAAAAB)
  {
    __break(0xC471u);
    return result;
  }
  long long v24 = (void *)WTF::fastMalloc((WTF *)(24 * a2));
  *(_DWORD *)(a3 + ++*(_DWORD *)(this + 8) = 24 * (int)a2 / 0x18u;
  *(void *)a3 = v24;
  long long v26 = (IPC::Decoder *)((char *)v12 + 24 * a2);
  do
  {
    uint64_t v27 = *(_DWORD **)v12;
    if (*(void *)v12) {
      *v27 += 2;
    }
    *long long v24 = v27;
    uint64_t v28 = (_DWORD *)*((void *)v12 + 1);
    if (v28) {
      *v28 += 2;
    }
    v24[1] = v28;
    uint64_t v29 = (atomic_uint *)*((void *)v12 + 2);
    atomic_fetch_add(v29, 1u);
    void v24[2] = v29;
    uint64_t v12 = (IPC::Decoder *)((char *)v12 + 24);
    v24 += 3;
  }
  while (v12 != v26);
  int v14 = v38;
  uint64_t result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v46, v25);
  if (v14 != -1) {
    return ((uint64_t (*)(uint64_t, IPC::Decoder **))off_1EE9F5CF8[v14])(result, &v34);
  }
  return result;
}

unsigned int *WebKit::WebEditorClient::didApplyStyle(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)(v2 - 16));
  }
  else {
    return WebKit::WebPage::sendEditorStateUpdate(0);
  }
}

uint64_t WebKit::WebEditorClient::shouldMoveRangeAfterDelete()
{
  return 1;
}

WTF::StringImpl *WebKit::WebEditorClient::didBeginEditing(WebKit::WebEditorClient *this)
{
  if ((_MergedGlobals_110 & 1) == 0)
  {
    WebKit::WebEditorClient::didBeginEditing(void)::$_0::operator() const(void)::impl += 2;
    qword_1EB359E78 = (uint64_t)&WebKit::WebEditorClient::didBeginEditing(void)::$_0::operator() const(void)::impl;
    _MergedGlobals_110 = 1;
  }
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  uint64_t v5 = *(void *)v4;
  if (qword_1EB359E78) {
    WebKit::WebEditorClient::didBeginEditing(void)::$_0::operator() const(void)::impl += 2;
  }
  uint64_t v8 = (WTF::StringImpl *)qword_1EB359E78;
  (*(void (**)(uint64_t))(*(void *)v5 + 72))(v5);
  uint64_t result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return result;
}

unsigned int *WebKit::WebEditorClient::respondToChangedContents(WebKit::WebEditorClient *this)
{
  if ((byte_1EB359E71 & 1) == 0)
  {
    WebKit::WebEditorClient::respondToChangedContents(void)::$_0::operator() const(void)::impl += 2;
    qword_1EB359E80 = (uint64_t)&WebKit::WebEditorClient::respondToChangedContents(void)::$_0::operator() const(void)::impl;
    byte_1EB359E71 = 1;
  }
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      uint64_t v4 = v3 - 16;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = v4 + 344;
  }
  else
  {
    uint64_t v5 = 344;
  }
  uint64_t v6 = *(void *)v5;
  if (qword_1EB359E80) {
    WebKit::WebEditorClient::respondToChangedContents(void)::$_0::operator() const(void)::impl += 2;
  }
  uint64_t v12 = (WTF::StringImpl *)qword_1EB359E80;
  (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2) {
      WTF::StringImpl::destroy(v12, v7);
    }
    else {
      *(_DWORD *)v12 -= 2;
    }
  }
  uint64_t v8 = *((void *)this + 4);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9) {
      uint64_t v10 = (WebKit::WebPage *)(v9 - 16);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  return WebKit::WebPage::sendEditorStateUpdate(v10);
}

WTF::StringImpl *WebKit::WebEditorClient::respondToChangedSelection(WebKit::WebEditorClient *this, atomic_uint *a2)
{
  if ((byte_1EB359E72 & 1) == 0)
  {
    WebKit::WebEditorClient::respondToChangedSelection(WebCore::LocalFrame *)::$_0::operator() const(void)::impl += 2;
    qword_1EB359E88 = (uint64_t)&WebKit::WebEditorClient::respondToChangedSelection(WebCore::LocalFrame *)::$_0::operator() const(void)::impl;
    byte_1EB359E72 = 1;
  }
  uint64_t v4 = *((void *)this + 4);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5) {
      uint64_t v6 = v5 - 16;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = v6 + 344;
  }
  else
  {
    uint64_t v7 = 344;
  }
  uint64_t v8 = *(void *)v7;
  if (qword_1EB359E88) {
    WebKit::WebEditorClient::respondToChangedSelection(WebCore::LocalFrame *)::$_0::operator() const(void)::impl += 2;
  }
  int v14 = (WTF::StringImpl *)qword_1EB359E88;
  (*(void (**)(uint64_t))(*(void *)v8 + 96))(v8);
  uint64_t result = v14;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2) {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(v14, v9);
    }
    else {
      *(_DWORD *)v14 -= 2;
    }
  }
  if (a2)
  {
    uint64_t v11 = *((void *)this + 4);
    if (v11)
    {
      uint64_t v12 = *(void *)(v11 + 8);
      if (v12) {
        uint64_t v13 = (WebKit::WebPage *)(v12 - 16);
      }
      else {
        uint64_t v13 = 0;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    return (WTF::StringImpl *)WebKit::WebPage::didChangeSelection(v13, a2);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::didEndUserTriggeredSelectionChanges(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::didEndUserTriggeredSelectionChanges((WebCore::Page **)(v2 - 16));
  }
  else {
    return WebKit::WebPage::didEndUserTriggeredSelectionChanges(0);
  }
}

unsigned int *WebKit::WebEditorClient::didUpdateComposition(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::sendEditorStateUpdate((WebKit::WebPage *)(v2 - 16));
  }
  else {
    return WebKit::WebPage::sendEditorStateUpdate(0);
  }
}

IPC::Encoder *WebKit::WebEditorClient::discardedComposition(WebKit::WebEditorClient *this, const WebCore::Document *a2)
{
  uint64_t v2 = *((void *)this + 4);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3) {
      uint64_t v4 = (WebKit::WebPage *)(v3 - 16);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  return WebKit::WebPage::discardedComposition(v4, a2);
}

unsigned int *WebKit::WebEditorClient::canceledComposition(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1 && (uint64_t v2 = *(void *)(v1 + 8)) != 0) {
    return WebKit::WebPage::canceledComposition((WebKit::WebPage *)(v2 - 16));
  }
  else {
    return WebKit::WebPage::canceledComposition(0);
  }
}

WTF::StringImpl *WebKit::WebEditorClient::didEndEditing(WebKit::WebEditorClient *this)
{
  if ((byte_1EB359E73 & 1) == 0)
  {
    WebKit::WebEditorClient::didEndEditing(void)::$_0::operator() const(void)::impl += 2;
    qword_1EB359E90 = (uint64_t)&WebKit::WebEditorClient::didEndEditing(void)::$_0::operator() const(void)::impl;
    byte_1EB359E73 = 1;
  }
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  uint64_t v5 = *(void *)v4;
  if (qword_1EB359E90) {
    WebKit::WebEditorClient::didEndEditing(void)::$_0::operator() const(void)::impl += 2;
  }
  uint64_t v8 = (WTF::StringImpl *)qword_1EB359E90;
  (*(void (**)(uint64_t))(*(void *)v5 + 80))(v5);
  uint64_t result = v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebEditorClient::didWriteSelectionToPasteboard(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 120))();
}

uint64_t WebKit::WebEditorClient::willWriteSelectionToPasteboard(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 104))();
}

uint64_t WebKit::WebEditorClient::getClientPasteboardData(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v5 = a3[3];
  if (v5)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v5; ++i)
    {
      uint64_t v8 = (void *)(*(void *)a3 + v6);
      uint64_t v9 = HIDWORD(v43);
      if (HIDWORD(v43) == v43)
      {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)&v42, (unint64_t)v8);
        unint64_t v5 = a3[3];
      }
      else
      {
        uint64_t v10 = v42;
        uint64_t v11 = (_DWORD *)*v8;
        if (*v8) {
          *v11 += 2;
        }
        *(void *)(v10 + 8 * v9) = v11;
        HIDWORD(v4WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v9 + 1;
      }
      if (i >= v5)
      {
        __break(0xC471u);
        goto LABEL_50;
      }
      uint64_t v12 = (atomic_uint **)(*(void *)a3 + v6 + 8);
      uint64_t v13 = HIDWORD(v41);
      if (HIDWORD(v41) == v41)
      {
        int v14 = (atomic_uint **)WTF::Vector<WTF::Ref<WebCore::TimingFunction,WTF::RawPtrTraits<WebCore::TimingFunction>,WTF::DefaultRefDerefTraits<WebCore::TimingFunction>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v40, HIDWORD(v41) + 1, (unint64_t)v12);
        uint64_t v13 = HIDWORD(v41);
        int v15 = v40;
        uint64_t v16 = *v14;
        if (!*v14) {
          goto LABEL_14;
        }
      }
      else
      {
        int v15 = v40;
        uint64_t v16 = *v12;
        if (!*v12)
        {
LABEL_14:
          int v17 = v13;
          goto LABEL_11;
        }
      }
      atomic_fetch_add(v16, 1u);
      int v17 = HIDWORD(v41);
LABEL_11:
      *((void *)v15 + v1WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v16;
      HIDWORD(v41) = v17 + 1;
      unint64_t v5 = a3[3];
      v6 += 16;
    }
  }
  uint64_t v18 = *(void *)(a1 + 32);
  if (v18)
  {
    uint64_t v19 = *(void *)(v18 + 8);
    if (v19) {
      uint64_t v20 = v19 - 16;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v21 = v20 + 344;
  }
  else
  {
    uint64_t v21 = 344;
  }
  (*(void (**)(void))(**(void **)v21 + 112))();
  WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(a3, 0);
  if (HIDWORD(v43))
  {
    unint64_t v23 = 0;
    while (v23 < HIDWORD(v41))
    {
      long long v24 = v40;
      uint64_t v25 = *(WTF::StringImpl **)(v42 + 8 * v23);
      if (v25) {
        *(_DWORD *)v25 += 2;
      }
      int v38 = v25;
      long long v26 = (atomic_uint *)*((void *)v24 + v23);
      if (v26) {
        atomic_fetch_add(v26, 1u);
      }
      uint64_t v39 = (unsigned int *)v26;
      uint64_t v27 = a3[3];
      if (v27 == a3[2])
      {
        WTF::Vector<std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::pair<WTF::String,WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>((uint64_t)a3, (unint64_t)&v38);
      }
      else
      {
        unsigned int v28 = v27 + 1;
        uint64_t v29 = (WTF::StringImpl **)(*(void *)a3 + 16 * v27);
        uint64_t v30 = v38;
        int v38 = 0;
        *uint64_t v29 = v30;
        uint64_t v31 = v39;
        uint64_t v39 = 0;
        v29[1] = (WTF::StringImpl *)v31;
        a3[3] = v28;
      }
      uint64_t v32 = v39;
      uint64_t v39 = 0;
      if (v32) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v32, v22);
      }
      uint64_t v33 = v38;
      int v38 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v22);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (++v23 >= HIDWORD(v43)) {
        goto LABEL_38;
      }
    }
    __break(0xC471u);
LABEL_50:
    JUMPOUT(0x1991C4E24);
  }
LABEL_38:
  uint64_t v34 = v40;
  if (HIDWORD(v41))
  {
    uint64_t v35 = 8 * HIDWORD(v41);
    do
    {
      int v36 = *(unsigned int **)v34;
      *(void *)uint64_t v34 = 0;
      if (v36) {
        WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v36, v22);
      }
      uint64_t v34 = (WTF *)((char *)v34 + 8);
      v35 -= 8;
    }
    while (v35);
    uint64_t v34 = v40;
  }
  if (v34)
  {
    uint64_t v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v34, v22);
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v42, v22);
}

uint64_t WebKit::WebEditorClient::performTwoStepDrop(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v4 = v3 + 344;
  }
  else
  {
    uint64_t v4 = 344;
  }
  return (*(uint64_t (**)(void))(**(void **)v4 + 128))();
}

WTF *WebKit::WebEditorClient::registerUndoStep(WTF *result, _DWORD *a2)
{
  uint64_t v2 = *(void *)(*((void *)result + 4) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!*(unsigned char *)(v3 + 185))
  {
    unint64_t v5 = result;
    ++a2[2];
    uint64_t v6 = (WTF *)WTF::fastMalloc((WTF *)0x18);
    uint64_t v7 = (IPC::Encoder *)WebKit::generateUndoStep(void)::uniqueEntryID++;
    *(_DWORD *)uint64_t v6 = 1;
    *((void *)v6 + 1) = a2;
    *((void *)v6 + 2) = v7;
    unint64_t v23 = v6;
    uint64_t v8 = *((void *)v5 + 4);
    if (v8)
    {
      uint64_t v9 = *(void *)(v8 + 8);
      if (v9) {
        uint64_t v8 = v9 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
    }
    uint64_t v25 = v7;
    WTF::HashMap<unsigned long long,WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>,WTF::DefaultHash<unsigned long long>,WTF::HashTraits<unsigned long long>,WTF::HashTraits<WTF::RefPtr<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>,WTF::HashTableTraits>::inlineSet<unsigned long long const&,WTF::Ref<WebKit::WebUndoStep,WTF::RawPtrTraits<WebKit::WebUndoStep>,WTF::DefaultRefDerefTraits<WebKit::WebUndoStep>>>((uint64_t *)(v8 + 336), (uint64_t *)&v25, (uint64_t *)&v23, (uint64_t)v24);
    uint64_t v10 = *((void *)v5 + 4);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11) {
        uint64_t v12 = v11 - 16;
      }
      else {
        uint64_t v12 = 0;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(void *)a2 + 40))(&v22, a2);
    v24[0] = (uint64_t)v7;
    v24[1] = (uint64_t)&v22;
    uint64_t v14 = *(void *)(v12 + 32);
    uint64_t v13 = v12 + 32;
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
    uint64_t v16 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v16 = 2035;
    *((void *)v16 + 1) = v15;
    *((void *)v16 + 66) = (char *)v16 + 16;
    *((void *)v16 + 67) = 512;
    *((void *)v16 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v16 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v16 + 69) = 0;
    IPC::Encoder::encodeHeader(v16);
    uint64_t v25 = v16;
    IPC::ArgumentCoder<std::tuple<unsigned long long,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<unsigned long long,WTF::String const&>,0ul,1ul>(v16, v24);
    (*(void (**)(uint64_t, IPC::Encoder **, uint64_t))(*(void *)v13 + 32))(v13, &v25, 1);
    uint64_t v18 = v25;
    uint64_t v25 = 0;
    if (v18)
    {
      IPC::Encoder::~Encoder(v18, v17);
      WTF::fastFree(v20, v21);
    }
    uint64_t v19 = v22;
    uint64_t v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2) {
        WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
      }
      else {
        *(_DWORD *)v19 -= 2;
      }
    }
    uint64_t result = v23;
    unint64_t v23 = 0;
    if (result) {
      return WTF::RefCounted<WebKit::WebUndoStep>::deref(result, v17);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::clearUndoRedoOperations(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = v3 + 32;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1876;
  *((void *)v7 + 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v12 = v7;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v4, &v12, 0);
  uint64_t result = v12;
  uint64_t v12 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::canCopyCut(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t WebKit::WebEditorClient::canPaste(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

BOOL WebKit::WebEditorClient::canUndo(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  char v14 = 0;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = v3 + 32;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  if (!v7)
  {
    int v9 = 0;
    v12[0] = 3;
    int v8 = 1;
    int v13 = 1;
    goto LABEL_9;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::CanUndoRedo>((uint64_t)v12, v7, &v14, v6);
  int v8 = v13;
  int v9 = v12[8];
  if (v13 != -1) {
LABEL_9:
  }
    ((void (*)(char *, unsigned char *))off_1EE9F5D08[v8])(&v14, v12);
  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  return !v10;
}

BOOL WebKit::WebEditorClient::canRedo(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = 1;
  char v14 = 1;
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t v5 = v3 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  if (!v8)
  {
    int v9 = 0;
    v12[0] = 3;
    int v13 = 1;
    goto LABEL_9;
  }
  IPC::Connection::sendSync<Messages::WebPageProxy::CanUndoRedo>((uint64_t)v12, v8, &v14, v7);
  int v4 = v13;
  int v9 = v12[8];
  if (v13 != -1) {
LABEL_9:
  }
    ((void (*)(char *, unsigned char *))off_1EE9F5D08[v4])(&v14, v12);
  if (v4) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v9 == 0;
  }
  return !v10;
}

IPC::Encoder *WebKit::WebEditorClient::undo(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  char v10 = 0;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v4 = v3 + 32;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  if (!v7)
  {
    v11[0] = 3;
    int v9 = 1;
    int v12 = 1;
    return (IPC::Encoder *)((uint64_t (*)(char *, unsigned char *))off_1EE9F5D18[v9])(&v13, v11);
  }
  uint64_t result = IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>((uint64_t)v11, v7, &v10, v6);
  int v9 = v12;
  if (v12 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(char *, unsigned char *))off_1EE9F5D18[v9])(&v13, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::redo(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2) {
      uint64_t v3 = v2 - 16;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  int v4 = 1;
  char v10 = 1;
  uint64_t v6 = *(void *)(v3 + 32);
  uint64_t v5 = v3 + 32;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  if (!v8)
  {
    v11[0] = 3;
    int v12 = 1;
    return (IPC::Encoder *)((uint64_t (*)(char *, unsigned char *))off_1EE9F5D18[v4])(&v13, v11);
  }
  uint64_t result = IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>((uint64_t)v11, v8, &v10, v7);
  int v4 = v12;
  if (v12 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(char *, unsigned char *))off_1EE9F5D18[v4])(&v13, v11);
  }
  return result;
}

uint64_t WebKit::WebEditorClient::requestDOMPasteAccess(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v7 = (CFTypeRef *)(v6 - 16);
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  return WebKit::WebPage::requestDOMPasteAccess(v7, a2, a3, a4, a5);
}

unsigned int *WebKit::WebEditorClient::textFieldDidBeginEditing(unsigned int *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    uint64_t v3 = (uint64_t)this;
    *((_DWORD *)a2 + 7) += 2;
    uint64_t v4 = *(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        atomic_fetch_add((atomic_uint *volatile)(v5 + 8), 1u);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    WebKit::WebFrame::fromCoreFrame(v5, &v11);
    uint64_t v6 = *(void *)(v3 + 32);
    if (v6)
    {
      uint64_t v7 = *(void *)(v6 + 8);
      if (v7) {
        uint64_t v8 = v7 - 16;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v8 + 352;
    }
    else
    {
      uint64_t v9 = 352;
    }
    uint64_t v10 = v11;
    (*(void (**)(void))(**(void **)v9 + 24))();
    if (v10) {
      CFRelease(*(CFTypeRef *)(v10 + 8));
    }
    this = WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v5 + 8));
    if (*((_DWORD *)a2 + 7) == 2)
    {
      if ((*((_WORD *)a2 + 17) & 0x400) == 0)
      {
        return (unsigned int *)WebCore::Node::removedLastRef(a2);
      }
    }
    else
    {
      *((_DWORD *)a2 + 7) -= 2;
    }
  }
  return this;
}

void WebKit::WebEditorClient::textFieldDidEndEditing(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    *((_DWORD *)a2 + 7) += 2;
    WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544) + 8), &v9);
    uint64_t v4 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6 + 352;
    }
    else
    {
      uint64_t v7 = 352;
    }
    uint64_t v8 = v9;
    (*(void (**)(void))(**(void **)v7 + 32))();
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
    if (*((_DWORD *)a2 + 7) == 2)
    {
      if ((*((_WORD *)a2 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a2);
      }
    }
    else
    {
      *((_DWORD *)a2 + 7) -= 2;
    }
  }
}

void WebKit::WebEditorClient::textDidChangeInTextField(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    *((_DWORD *)a2 + 7) += 2;
    uint64_t v4 = (WebCore::UserTypingGestureIndicator *)WebCore::UserTypingGestureIndicator::processingUserTypingGesture(this);
    if (v4) {
      WebCore::UserTypingGestureIndicator::focusedElementAtGestureStart(v4);
    }
    WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544) + 8), &v10);
    uint64_t v5 = *((void *)this + 4);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6) {
        uint64_t v7 = v6 - 16;
      }
      else {
        uint64_t v7 = 0;
      }
      uint64_t v8 = v7 + 352;
    }
    else
    {
      uint64_t v8 = 352;
    }
    uint64_t v9 = v10;
    (*(void (**)(void))(**(void **)v8 + 40))();
    if (v9) {
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    if (*((_DWORD *)a2 + 7) == 2)
    {
      if ((*((_WORD *)a2 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a2);
      }
    }
    else
    {
      *((_DWORD *)a2 + 7) -= 2;
    }
  }
}

void WebKit::WebEditorClient::textDidChangeInTextArea(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB6690] + 24))
  {
    *((_DWORD *)a2 + 7) += 2;
    WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544) + 8), &v9);
    uint64_t v4 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6 + 352;
    }
    else
    {
      uint64_t v7 = 352;
    }
    uint64_t v8 = v9;
    (*(void (**)(void))(**(void **)v7 + 48))();
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
    if (*((_DWORD *)a2 + 7) == 2)
    {
      if ((*((_WORD *)a2 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a2);
      }
    }
    else
    {
      *((_DWORD *)a2 + 7) -= 2;
    }
  }
}

uint64_t WebKit::WebEditorClient::doTextFieldCommandFromEvent(WebKit::WebEditorClient *this, WebCore::Element *a2, WebCore::KeyboardEvent *a3)
{
  if ((*((_WORD *)a2 + 16) & 0x10) == 0
    || *(void *)(*((void *)a2 + 13) + 24) != *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    return 0;
  }
  *((_DWORD *)a2 + 7) += 2;
  uint64_t v5 = (WTF::StringImpl *)*((void *)a3 + 14);
  if (v5) {
    *(_DWORD *)v5 += 2;
  }
  BOOL v7 = (MEMORY[0x19972E990](v5, "Up", 2) & 1) != 0
    || (MEMORY[0x19972E990](v5, "Down", 4) & 1) != 0
    || (MEMORY[0x19972E990](v5, "U+001B", 6) & 1) != 0
    || MEMORY[0x19972E990](v5, "U+0009", 6)
    || MEMORY[0x19972E990](v5, "Enter", 5);
  if (v5)
  {
    if (*(_DWORD *)v5 == 2) {
      WTF::StringImpl::destroy(v5, v6);
    }
    else {
      *(_DWORD *)v5 -= 2;
    }
  }
  if (v7)
  {
    WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544) + 8), &v15);
    uint64_t v10 = *((void *)this + 4);
    if (v10)
    {
      uint64_t v11 = *(void *)(v10 + 8);
      if (v11) {
        uint64_t v12 = v11 - 16;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = v12 + 352;
    }
    else
    {
      uint64_t v13 = 352;
    }
    uint64_t v14 = v15;
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)v13 + 56))();
    if (v14) {
      CFRelease(*(CFTypeRef *)(v14 + 8));
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (*((_DWORD *)a2 + 7) == 2)
  {
    if ((*((_WORD *)a2 + 17) & 0x400) == 0) {
      WebCore::Node::removedLastRef(a2);
    }
  }
  else
  {
    *((_DWORD *)a2 + 7) -= 2;
  }
  return v8;
}

void WebKit::WebEditorClient::textWillBeDeletedInTextField(WebKit::WebEditorClient *this, WebCore::Element *a2)
{
  if ((*((_WORD *)a2 + 16) & 0x10) != 0
    && *(void *)(*((void *)a2 + 13) + 24) == *(void *)(*MEMORY[0x1E4FB69A8] + 24))
  {
    *((_DWORD *)a2 + 7) += 2;
    WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(*((void *)a2 + 6) + 8) + 544) + 8), &v9);
    uint64_t v4 = *((void *)this + 4);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5) {
        uint64_t v6 = v5 - 16;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = v6 + 352;
    }
    else
    {
      uint64_t v7 = 352;
    }
    uint64_t v8 = v9;
    (*(void (**)(void))(**(void **)v7 + 56))();
    if (v8) {
      CFRelease(*(CFTypeRef *)(v8 + 8));
    }
    if (*((_DWORD *)a2 + 7) == 2)
    {
      if ((*((_WORD *)a2 + 17) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef(a2);
      }
    }
    else
    {
      *((_DWORD *)a2 + 7) -= 2;
    }
  }
}

BOOL WebKit::WebEditorClient::shouldEraseMarkersAfterChangeSelection(uint64_t a1, int a2)
{
  return (a2 - 3) < 0xFFFFFFFE;
}

BOOL non-virtual thunk to'WebKit::WebEditorClient::shouldEraseMarkersAfterChangeSelection(uint64_t a1, int a2)
{
  return (a2 - 3) < 0xFFFFFFFE;
}

IPC::Encoder *WebKit::WebEditorClient::ignoreWordInSpellDocument(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = v4 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1991;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v14 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v14, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebEditorClient::ignoreWordInSpellDocument(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  return WebKit::WebEditorClient::ignoreWordInSpellDocument((WebKit::WebEditorClient *)((char *)this - 24), a2);
}

IPC::Encoder *WebKit::WebEditorClient::learnWord(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = v4 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 1995;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v14 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v14, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebEditorClient::learnWord(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  return WebKit::WebEditorClient::learnWord((WebKit::WebEditorClient *)((char *)this - 24), a2);
}

uint64_t WebKit::WebEditorClient::checkSpellingOfString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  v31[0] = a2;
  v31[1] = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7) {
    goto LABEL_27;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (v8) {
    uint64_t v9 = v8 - 16;
  }
  else {
    uint64_t v9 = 0;
  }
  while (1)
  {
    WTF::StringView::toStringWithoutCopying((uint64_t)v31, &v27);
    uint64_t v11 = *(void *)(v9 + 32);
    uint64_t v10 = v9 + 32;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
    if (!v13)
    {
      LOBYTE(v2++*(_DWORD *)(this + 8) = 3;
      int v16 = 1;
      int v30 = 1;
      goto LABEL_17;
    }
    uint64_t v15 = v13;
    uint64_t v35 = 0;
    IPC::Connection::createSyncMessageEncoder(3748, v12, &v35, &v34);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v34, (uint64_t *)&v27);
    IPC::Connection::sendSyncMessage(v15, v35, (uint64_t *)&v34, 0, (uint64_t)&v32, INFINITY);
    int v16 = v33;
    if (v33)
    {
      if (v33 == 1)
      {
        LOBYTE(v2++*(_DWORD *)(this + 8) = (_BYTE)v32;
        goto LABEL_13;
      }
      goto LABEL_26;
    }
    unint64_t v17 = IPC::Decoder::decode<std::tuple<int,int>>(v32);
    if (!(_BYTE)v14) {
      break;
    }
    if (!v33)
    {
      uint64_t v18 = v32;
      uint64_t v32 = 0;
      unsigned int v28 = v18;
      unint64_t v29 = v17;
LABEL_13:
      int v30 = v16;
      int v19 = v16;
LABEL_14:
      ((void (*)(char *, uint64_t **))off_1EE9F5E10[v19])(&v36, &v32);
      goto LABEL_15;
    }
LABEL_26:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_27:
    uint64_t v9 = 0;
  }
  LOBYTE(v2++*(_DWORD *)(this + 8) = 13;
  int v16 = 1;
  int v30 = 1;
  int v19 = v33;
  if (v33 != -1) {
    goto LABEL_14;
  }
LABEL_15:
  uint64_t v20 = v34;
  uint64_t v34 = 0;
  if (v20)
  {
    IPC::Encoder::~Encoder(v20, v14);
    WTF::fastFree(v25, v26);
  }
LABEL_17:
  uint64_t v21 = v27;
  uint64_t v27 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2) {
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v14);
    }
    else {
      *(_DWORD *)v21 -= 2;
    }
  }
  int v23 = v29;
  int v22 = HIDWORD(v29);
  if (v16)
  {
    int v23 = -1;
    int v22 = 0;
  }
  *a4 = v23;
  *a5 = v22;
  return ((uint64_t (*)(uint64_t **, uint64_t **))off_1EE9F5D28[v16])(&v32, &v28);
}

uint64_t non-virtual thunk to'WebKit::WebEditorClient::checkSpellingOfString(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, _DWORD *a5)
{
  return WebKit::WebEditorClient::checkSpellingOfString(a1 - 24, a2, a3, a4, a5);
}

uint64_t WebKit::WebEditorClient::checkGrammarOfString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  v65[0] = a2;
  v65[1] = a3;
  uint64_t v12 = *(void *)(a1 + 32);
  if (!v12) {
    goto LABEL_60;
  }
  uint64_t v13 = *(void *)(v12 + 8);
  if (v13) {
    uint64_t v14 = v13 - 16;
  }
  else {
    uint64_t v14 = 0;
  }
  while (1)
  {
    WTF::StringView::toStringWithoutCopying((uint64_t)v65, &v59);
    uint64_t v16 = *(void *)(v14 + 32);
    uint64_t v15 = v14 + 32;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(v16 + 56))(v15);
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
    if (!v18)
    {
      LOBYTE(v6IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 3;
      int v21 = 1;
      int v64 = 1;
      goto LABEL_39;
    }
    uint64_t v20 = v18;
    uint64_t v73 = 0;
    IPC::Connection::createSyncMessageEncoder(3747, v17, &v73, &v72);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v72, (uint64_t *)&v59);
    IPC::Connection::sendSyncMessage(v20, v73, (uint64_t *)&v72, 0, (uint64_t)&v70, INFINITY);
    if (v71)
    {
      if (v71 == 1)
      {
        LOBYTE(v6IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = (_BYTE)v70;
        int v21 = 1;
        int v64 = 1;
        int v22 = 1;
        goto LABEL_36;
      }
      goto LABEL_59;
    }
    int v23 = v70;
    IPC::Decoder::decode<WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v70, (uint64_t)&v74);
    if (!(_BYTE)v76)
    {
      int v31 = 0;
      LOBYTE(v6IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      LOBYTE(v6WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
LABEL_28:
      int v19 = *(char **)v23;
      uint64_t v32 = *((void *)v23 + 1);
      *(void *)int v23 = 0;
      *((void *)v23 + 1) = 0;
      uint64_t v33 = *((void *)v23 + 3);
      if (v33 && v32) {
        (*(void (**)(uint64_t, char *))(*(void *)v33 + 16))(v33, v19);
      }
      goto LABEL_29;
    }
    unint64_t v24 = *((void *)v23 + 1);
    int v19 = *(char **)v23;
    unint64_t v25 = ((*((void *)v23 + 2) + 3) & 0xFFFFFFFFFFFFFFFCLL) - *(void *)v23;
    if (v24 < v25 || v24 - v25 <= 3)
    {
      unint64_t v52 = 0;
      uint64_t v53 = 0;
      *(void *)int v23 = 0;
      *((void *)v23 + 1) = 0;
      uint64_t v54 = *((void *)v23 + 3);
      if (v54)
      {
        if (v24)
        {
          (*(void (**)(uint64_t))(*(void *)v54 + 16))(v54);
          uint64_t v53 = *(char **)v23;
          unint64_t v52 = *((void *)v23 + 1);
        }
        else
        {
          unint64_t v52 = 0;
          uint64_t v53 = 0;
        }
      }
      goto LABEL_54;
    }
    uint64_t v27 = &v19[v25];
    *((void *)v23 + 2) = v27 + 4;
    if (!v19)
    {
      unint64_t v52 = v24;
      uint64_t v53 = 0;
LABEL_54:
      *(void *)int v23 = 0;
      *((void *)v23 + 1) = 0;
      uint64_t v55 = *((void *)v23 + 3);
      if (v55 && v52) {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v55 + 16))(v55, v53, v52);
      }
      goto LABEL_58;
    }
    unint64_t v28 = ((unint64_t)(v27 + 7) & 0xFFFFFFFFFFFFFFFCLL) - (void)v19;
    if (v24 >= v28 && v24 - v28 > 3)
    {
      int v30 = 0;
      unsigned int v6 = *(_DWORD *)v27;
      LODWORD(v17) = *(_DWORD *)((unint64_t)(v27 + 7) & 0xFFFFFFFFFFFFFFFCLL);
      *((void *)v23 + 2) = ((unint64_t)(v27 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4;
      int v60 = v74;
      unsigned int v8 = v75;
      unsigned int v7 = HIDWORD(v75);
      uint64_t v74 = 0;
      uint64_t v75 = 0;
      unint64_t v61 = __PAIR64__(v7, v8);
      int v31 = 1;
      unint64_t v62 = __PAIR64__(v17, v6);
      goto LABEL_23;
    }
    *(void *)int v23 = 0;
    *((void *)v23 + 1) = 0;
    uint64_t v56 = *((void *)v23 + 3);
    if (v56)
    {
      if (v24)
      {
        (*(void (**)(uint64_t))(*(void *)v56 + 16))(v56);
        int v19 = *(char **)v23;
        uint64_t v57 = *((void *)v23 + 1);
        uint64_t v58 = *((void *)v23 + 3);
        *(void *)int v23 = 0;
        *((void *)v23 + 1) = 0;
        if (v58)
        {
          if (v57) {
            (*(void (**)(uint64_t, char *))(*(void *)v58 + 16))(v58, v19);
          }
        }
      }
    }
LABEL_58:
    int v31 = 0;
    LOBYTE(v6IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    int v30 = 1;
LABEL_23:
    LOBYTE(v6WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = v31;
    if ((_BYTE)v76) {
      WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v19);
    }
    if (v30) {
      goto LABEL_28;
    }
LABEL_29:
    if (!v31)
    {
      LOBYTE(v6IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 13;
      int v21 = 1;
      int v64 = 1;
      goto LABEL_35;
    }
    uint64_t v34 = v60;
    int v60 = 0;
    unint64_t v61 = 0;
    unsigned int v67 = v6;
    int v68 = v17;
    char v69 = 1;
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v60, v19);
    if (!v71) {
      break;
    }
LABEL_59:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_60:
    uint64_t v14 = 0;
  }
  char v36 = v70;
  char v70 = 0;
  v66[0] = 0;
  v66[1] = 0;
  unsigned int v77 = v6;
  int v78 = v17;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  int v60 = v36;
  unint64_t v61 = (unint64_t)v34;
  unint64_t v76 = 0;
  unint64_t v62 = __PAIR64__(v7, v8);
  unint64_t v63 = __PAIR64__(v17, v6);
  int v64 = 0;
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v75, v35);
  int v38 = v74;
  uint64_t v74 = 0;
  if (v38)
  {
    IPC::Decoder::~Decoder(v38);
    WTF::fastFree(v50, v51);
  }
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v66, v37);
  int v21 = 0;
LABEL_35:
  int v22 = v71;
  if (v71 == -1) {
    goto LABEL_37;
  }
LABEL_36:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F5E10[v22])(&v74, &v70);
LABEL_37:
  uint64_t v39 = v72;
  uint64_t v72 = 0;
  if (v39)
  {
    IPC::Encoder::~Encoder(v39, v19);
    WTF::fastFree(v48, v49);
  }
LABEL_39:
  uint64_t v40 = v59;
  uint64_t v59 = 0;
  if (!v40)
  {
LABEL_42:
    if (!v21) {
      goto LABEL_45;
    }
    goto LABEL_43;
  }
  if (*(_DWORD *)v40 != 2)
  {
    *(_DWORD *)v40 -= 2;
    goto LABEL_42;
  }
  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
  if (v21)
  {
LABEL_43:
    int v41 = 0;
    int v42 = -1;
    goto LABEL_50;
  }
LABEL_45:
  unint64_t v43 = v61;
  unint64_t v44 = v62;
  unint64_t v61 = 0;
  unint64_t v62 = 0;
  int v42 = v63;
  int v41 = HIDWORD(v63);
  unint64_t v76 = v63;
  unsigned int v45 = *(_DWORD *)(a4 + 12);
  if (v45) {
    WTF::VectorDestructor<true,WebCore::GrammarDetail>::destruct(*(void *)a4, (WTF::StringImpl *)(*(void *)a4 + 40 * v45));
  }
  uint64_t v46 = *(WTF **)a4;
  if (*(void *)a4)
  {
    *(void *)a4 = 0;
    *(_DWORD *)(a4 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v46, v19);
  }
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  *(void *)a4 = v43;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = v44;
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v74, v19);
LABEL_50:
  *a5 = v42;
  *a6 = v41;
  return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F5D38[v21])(&v74, &v60);
}

uint64_t non-virtual thunk to'WebKit::WebEditorClient::checkGrammarOfString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6)
{
  return WebKit::WebEditorClient::checkGrammarOfString(a1 - 24, a2, a3, a4, a5, a6);
}

uint64_t WebKit::WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, WebKit *a5@<X4>, uint64_t a6@<X8>)
{
  LOBYTE(v7) = a4;
  v70[0] = a2;
  v70[1] = a3;
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v9) {
    goto LABEL_55;
  }
  uint64_t v10 = *(void *)(v9 + 8);
  if (v10) {
    uint64_t v11 = v10 - 16;
  }
  else {
    uint64_t v11 = 0;
  }
  while (1)
  {
    WTF::StringView::toStringWithoutCopying((uint64_t)v70, &v65);
    a5 = (WebKit *)WebKit::insertionPointFromCurrentSelection(a5, v12);
    uint64_t v14 = *(void *)(v11 + 32);
    uint64_t v13 = v11 + 32;
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 56))(v13);
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 48))(v13);
    if (!v16)
    {
      LOBYTE(v66) = 3;
      int v25 = 1;
      int v69 = 1;
      goto LABEL_26;
    }
    uint64_t v18 = v16;
    uint64_t v77 = 0;
    IPC::Connection::createSyncMessageEncoder(3749, v15, &v77, &v76);
    int v19 = v76;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v76, (uint64_t *)&v65);
    uint64_t v20 = (unsigned char *)IPC::Encoder::grow(v19, 1uLL, 1);
    if (!v21) {
      goto LABEL_57;
    }
    unsigned char *v20 = (_BYTE)v7;
    int v22 = (_DWORD *)IPC::Encoder::grow(v19, 4uLL, 4);
    if (v23 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1991C6BD4);
    }
    *int v22 = a5;
    IPC::Connection::sendSyncMessage(v18, v77, (uint64_t *)&v76, 0, (uint64_t)&v74, INFINITY);
    if (v75)
    {
      if (v75 == 1)
      {
        LOBYTE(v66) = (_BYTE)v74;
        int v25 = 1;
        int v69 = 1;
        int v26 = 1;
        goto LABEL_23;
      }
      goto LABEL_54;
    }
    unsigned int v7 = v74;
    IPC::Decoder::decode<WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v74, v24, (uint64_t)&v66);
    if (!(_BYTE)v68)
    {
      uint64_t v17 = (void *)*v7;
      uint64_t v36 = v7[1];
      *unsigned int v7 = 0;
      v7[1] = 0;
      uint64_t v37 = v7[3];
      if (v37 && v36) {
        (*(void (**)(uint64_t, void *))(*(void *)v37 + 16))(v37, v17);
      }
LABEL_21:
      LOBYTE(v66) = 13;
      int v25 = 1;
      int v69 = 1;
      goto LABEL_22;
    }
    unint64_t v28 = (IPC::Decoder *)v66;
    int v66 = 0;
    int v78 = v28;
    unint64_t v29 = v67;
    unsigned int v67 = 0;
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v27);
    LOBYTE(v8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    int v30 = v78;
    int v78 = 0;
    int v71 = v30;
    unint64_t v79 = 0;
    uint64_t v72 = v29;
    char v73 = 1;
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v31);
    if (!v73) {
      goto LABEL_21;
    }
    if (!v75) {
      break;
    }
LABEL_54:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_55:
    uint64_t v11 = 0;
  }
  uint64_t v32 = v74;
  uint64_t v74 = 0;
  uint64_t v33 = v71;
  int v71 = 0;
  int v78 = 0;
  unint64_t v79 = 0;
  int v66 = v32;
  unsigned int v67 = v33;
  uint64_t v80 = 0;
  uint64_t v34 = v72;
  uint64_t v72 = 0;
  int v68 = v34;
  int v69 = 0;
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v79, v17);
  uint64_t v35 = v78;
  int v78 = 0;
  if (v35)
  {
    IPC::Decoder::~Decoder(v35);
    WTF::fastFree(v63, v64);
  }
  if (v73) {
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v17);
  }
  int v25 = 0;
LABEL_22:
  int v26 = v75;
  if (v75 == -1) {
    goto LABEL_24;
  }
LABEL_23:
  ((void (*)(IPC::Decoder **, uint64_t **))off_1EE9F5E10[v26])(&v78, &v74);
LABEL_24:
  int v38 = v76;
  unint64_t v76 = 0;
  if (v38)
  {
    IPC::Encoder::~Encoder(v38, v17);
    WTF::fastFree(v61, v62);
  }
LABEL_26:
  uint64_t v39 = v65;
  CFTypeRef v65 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2) {
      WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v17);
    }
    else {
      *(_DWORD *)v39 -= 2;
    }
  }
  int v71 = 0;
  uint64_t v72 = 0;
  if (v25)
  {
    uint64_t v40 = 0;
    unsigned int v41 = 0;
    unsigned int v42 = 0;
  }
  else
  {
    uint64_t v40 = (unsigned int *)v67;
    unsigned int v41 = v68;
    unsigned int v42 = HIDWORD(v68);
    unsigned int v67 = 0;
    int v68 = 0;
  }
  int v78 = (IPC::Decoder *)v40;
  unint64_t v79 = __PAIR64__(v42, v41);
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v71, v17);
  *(void *)a6 = 0;
  *(void *)(a6 + ++*(_DWORD *)(this + 8) = 0;
  *(_DWORD *)(a6 + 12) = v42;
  if (!v42)
  {
    WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v43);
    return ((uint64_t (*)(IPC::Decoder **, uint64_t **))off_1EE9F5D48[v25])(&v78, &v66);
  }
  if (v42 >= 0x5555556)
  {
LABEL_57:
    __break(0xC471u);
    JUMPOUT(0x1991C6BB4);
  }
  uint64_t v45 = WTF::fastMalloc((WTF *)(48 * v42));
  *(_DWORD *)(a6 + ++*(_DWORD *)(this + 8) = 48 * v42 / 0x30;
  *(void *)a6 = v45;
  uint64_t v46 = (long long *)&v40[12 * v42];
  do
  {
    long long v47 = *(_OWORD *)v40;
    *(void *)(v45 + 16) = *((void *)v40 + 2);
    *(_OWORD *)uint64_t v45 = v47;
    uint64_t v48 = v40[9];
    *(void *)(v45 + ++*(_DWORD *)(this + 24) = 0;
    *(void *)(v45 + ++*(_DWORD *)(this + 32) = 0;
    *(_DWORD *)(v45 + 36) = v48;
    if (v48)
    {
      if (v48 >= 0x6666667)
      {
        __break(0xC471u);
        JUMPOUT(0x1991C6C14);
      }
      int v49 = 40 * v48;
      uint64_t v50 = WTF::fastMalloc((WTF *)(40 * v48));
      *(_DWORD *)(v45 + ++*(_DWORD *)(this + 32) = (v49 & 0xFFFFFFF8) / 0x28;
      *(void *)(v45 + ++*(_DWORD *)(this + 24) = v50;
      unsigned int v51 = v40[9];
      if (v51)
      {
        uint64_t v52 = *((void *)v40 + 3);
        uint64_t v53 = v52 + 40 * v51;
        uint64_t v54 = v50 + 16;
        uint64_t v55 = v52 + 16;
        do
        {
          *(_OWORD *)(v54 - 16) = *(_OWORD *)(v55 - 16);
          uint64_t v56 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v54, v55);
          uint64_t v57 = *(_DWORD **)(v55 + 16);
          if (v57) {
            *v57 += 2;
          }
          uint64_t v58 = v55 - 16;
          *(void *)(v56 + 16) = v57;
          uint64_t v54 = v56 + 40;
          v55 += 40;
        }
        while (v58 + 40 != v53);
      }
    }
    uint64_t v59 = (_DWORD *)*((void *)v40 + 5);
    if (v59) {
      *v59 += 2;
    }
    *(void *)(v45 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v59;
    v45 += 48;
    v40 += 12;
  }
  while (v40 != (unsigned int *)v46);
  int v25 = v69;
  uint64_t result = WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v78, v44);
  if (v25 != -1) {
    return ((uint64_t (*)(IPC::Decoder **, uint64_t **))off_1EE9F5D48[v25])(&v78, &v66);
  }
  return result;
}

uint64_t WebKit::insertionPointFromCurrentSelection(WebKit *this, const WebCore::VisibleSelection *a2)
{
  WebCore::VisiblePosition::VisiblePosition();
  WebCore::startOfParagraph();
  WebCore::makeSimpleRange<WebCore::VisiblePosition &,WebCore::VisiblePosition>((uint64_t)v6);
  if (v5)
  {
    if (*((_DWORD *)v5 + 7) == 2)
    {
      if ((*((_WORD *)v5 + 17) & 0x400) == 0) {
        WebCore::Node::removedLastRef(v5);
      }
    }
    else
    {
      *((_DWORD *)v5 + 7) -= 2;
    }
  }
  if (v6[32]) {
    uint64_t v2 = WebCore::characterCount();
  }
  else {
    uint64_t v2 = 0;
  }
  std::__optional_destruct_base<WebCore::SimpleRange,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v7 = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 28) == 2)
    {
      if ((*(_WORD *)(v3 + 34) & 0x400) == 0) {
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
      }
    }
    else
    {
      *(_DWORD *)(v3 + 28) -= 2;
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'WebKit::WebEditorClient::checkTextOfParagraph@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, WebKit *a5@<X4>, uint64_t a6@<X8>)
{
  return WebKit::WebEditorClient::checkTextOfParagraph(a1 - 24, a2, a3, a4, a5, a6);
}

IPC::Encoder *WebKit::WebEditorClient::updateSpellingUIWithGrammarString(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = *(void *)(v5 + 8);
    if (v6) {
      uint64_t v7 = v6 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v8 = v7 + 32;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2117;
  *((void *)v11 + 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  uint64_t v16 = v11;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a2);
  IPC::ArgumentCoder<WebCore::GrammarDetail,void>::encode(v11, a3);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v16, 0);
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebEditorClient::updateSpellingUIWithMisspelledWord(WebKit::WebEditorClient *this, const WTF::String *a2)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4) {
      uint64_t v5 = v4 - 16;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v6 = v5 + 32;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 2118;
  *((void *)v9 + 1) = v8;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v14 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v6, &v14, 0);
  uint64_t result = v14;
  uint64_t v14 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

BOOL WebKit::WebEditorClient::spellingUIIsShowing(WebKit::WebEditorClient *this)
{
  uint64_t v1 = *((void *)this + 4);
  if (!v1) {
    goto LABEL_24;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  while (1)
  {
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v4 = v3 + 32;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(v5 + 56))(v4);
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
    if (!v7)
    {
      LOBYTE(v17) = 3;
      int v8 = 1;
      int v19 = 1;
      goto LABEL_17;
    }
    uint64_t v24 = 0;
    IPC::Connection::createSyncMessageEncoder(3779, v6, &v24, &v23);
    IPC::Connection::sendSyncMessage(v7, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
    if (v22)
    {
      if (v22 == 1)
      {
        LODWORD(v7) = 0;
        LOBYTE(v17) = (_BYTE)v21;
        int v8 = 1;
        int v19 = 1;
        int v9 = 1;
        goto LABEL_14;
      }
      goto LABEL_23;
    }
    __int16 v20 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v21, &v20);
    if (!HIBYTE(v20)) {
      break;
    }
    int v9 = v22;
    if (!v22)
    {
      int v8 = 0;
      uint64_t v11 = v21;
      uint64_t v21 = 0;
      LODWORD(v7) = v20;
      uint64_t v17 = v11;
      char v18 = v20;
      int v19 = 0;
      goto LABEL_14;
    }
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
    uint64_t v3 = 0;
  }
  LODWORD(v7) = 0;
  LOBYTE(v17) = 13;
  int v8 = 1;
  int v19 = 1;
  int v9 = v22;
  if (v22 == -1) {
    goto LABEL_15;
  }
LABEL_14:
  ((void (*)(__int16 *, uint64_t **))off_1EE9F5E10[v9])(&v20, &v21);
LABEL_15:
  uint64_t v12 = v23;
  unint64_t v23 = 0;
  if (v12)
  {
    IPC::Encoder::~Encoder(v12, v10);
    WTF::fastFree(v15, v16);
  }
LABEL_17:
  ((void (*)(uint64_t **, uint64_t **))off_1EE9F5D58[v8])(&v21, &v17);
  if (v8) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v7 == 0;
  }
  return !v13;
}

uint64_t WebKit::WebEditorClient::getGuessesForWord(uint64_t a1, const WebCore::VisibleSelection *a2, uint64_t *a3, WebKit *this, WTF::StringImpl **a5)
{
  uint64_t v7 = (uint64_t *)a2;
  uint64_t v8 = *(void *)(a1 + 32);
  if (!v8) {
    goto LABEL_29;
  }
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9) {
    uint64_t v10 = v9 - 16;
  }
  else {
    uint64_t v10 = 0;
  }
  while (1)
  {
    uint64_t v11 = (WTF::StringImpl **)WebKit::insertionPointFromCurrentSelection(this, a2);
    uint64_t v13 = *(void *)(v10 + 32);
    uint64_t v12 = v10 + 32;
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(v13 + 56))(v12);
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 48))(v12);
    if (!v15)
    {
      LOBYTE(v3WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 3;
      uint64_t v22 = 1;
      int v36 = 1;
      return ((uint64_t (*)(WTF::StringImpl ***, IPC::Decoder **))off_1EE9F5D68[v22])(&v44, &v33);
    }
    uint64_t v16 = v15;
    uint64_t v43 = 0;
    IPC::Connection::createSyncMessageEncoder(3757, v14, &v43, &v42);
    uint64_t v17 = v42;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v42, v7);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v17, a3);
    char v18 = (_DWORD *)IPC::Encoder::grow(v17, 4uLL, 4);
    if (v19 <= 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1991C73C8);
    }
    *char v18 = v11;
    IPC::Connection::sendSyncMessage(v16, v43, (uint64_t *)&v42, 0, (uint64_t)&v40, INFINITY);
    if (v41)
    {
      if (v41 == 1)
      {
        LOBYTE(v3WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = (_BYTE)v40;
        int v20 = 1;
        int v36 = 1;
        int v21 = 1;
        goto LABEL_19;
      }
      goto LABEL_28;
    }
    LOBYTE(v37) = 0;
    char v39 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v40, &v37);
    if (!v39)
    {
      LOBYTE(v3WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 13;
      int v20 = 1;
      int v36 = 1;
      goto LABEL_18;
    }
    if (!v41) {
      break;
    }
LABEL_28:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    uint64_t v10 = 0;
  }
  uint64_t v24 = v40;
  uint64_t v40 = 0;
  uint64_t v11 = v37;
  uint64_t v37 = 0;
  LODWORD(v7) = v38;
  LODWORD(aWebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = HIDWORD(v38);
  uint64_t v38 = 0;
  unint64_t v44 = 0;
  v45[0] = 0;
  uint64_t v33 = v24;
  uint64_t v34 = v11;
  v45[1] = 0;
  unint64_t v35 = __PAIR64__(a3, v7);
  int v36 = 0;
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v45, v23);
  int v25 = (IPC::Decoder *)v44;
  unint64_t v44 = 0;
  if (v25)
  {
    IPC::Decoder::~Decoder(v25);
    WTF::fastFree(v31, v32);
  }
  if (v39) {
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v23);
  }
  int v20 = 0;
LABEL_18:
  int v21 = v41;
  if (v41 == -1) {
    goto LABEL_20;
  }
LABEL_19:
  ((void (*)(WTF::StringImpl ***, IPC::Decoder **))off_1EE9F5E10[v21])(&v44, &v40);
LABEL_20:
  int v26 = v42;
  unsigned int v42 = 0;
  if (v26)
  {
    IPC::Encoder::~Encoder(v26, v23);
    WTF::fastFree(v27, v28);
    if (!v20) {
      goto LABEL_24;
    }
LABEL_22:
    uint64_t v22 = 1;
  }
  else
  {
    if (v20) {
      goto LABEL_22;
    }
LABEL_24:
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    unint64_t v44 = v11;
    v45[0] = __PAIR64__(a3, v7);
    uint64_t v37 = a5;
    std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>(&v37, &v44);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v29);
    uint64_t v22 = 0;
  }
  return ((uint64_t (*)(WTF::StringImpl ***, IPC::Decoder **))off_1EE9F5D68[v22])(&v44, &v33);
}

uint64_t non-virtual thunk to'WebKit::WebEditorClient::getGuessesForWord(uint64_t a1, const WebCore::VisibleSelection *a2, uint64_t *a3, WebKit *a4, WTF::StringImpl **a5)
{
  return WebKit::WebEditorClient::getGuessesForWord(a1 - 24, a2, a3, a4, a5);
}

IPC::Encoder *WebKit::WebEditorClient::requestCheckingOfString(uint64_t a1, _DWORD *a2, WebKit *a3)
{
  uint64_t IdentifierInternal = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
  uint64_t v27 = IdentifierInternal;
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    uint64_t v8 = *(void *)(v7 + 8);
    if (v8) {
      uint64_t v7 = v8 - 16;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  ++a2[2];
  int v26 = a2;
  uint64_t v29 = IdentifierInternal;
  WTF::HashMap<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>,WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebKit::TextCheckerRequestType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,WTF::HashTraits<WTF::RefPtr<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>,WTF::HashTableTraits>::add<WTF::Ref<WebCore::TextCheckingRequest,WTF::RawPtrTraits<WebCore::TextCheckingRequest>,WTF::DefaultRefDerefTraits<WebCore::TextCheckingRequest>>>((uint64_t *)(v7 + 120), &v29, (uint64_t *)&v26, (uint64_t)v28);
  uint64_t v9 = v26;
  int v26 = 0;
  if (v9)
  {
    if (v9[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v9 + 8))(v9);
    }
    else {
      --v9[2];
    }
  }
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10)
  {
    uint64_t v11 = *(void *)(v10 + 8);
    if (v11) {
      uint64_t v12 = v11 - 16;
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 16))(a2);
  int v15 = WebKit::insertionPointFromCurrentSelection(a3, v14);
  uint64_t v17 = *(void *)(v12 + 32);
  uint64_t v16 = v12 + 32;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 56))(v16);
  unint64_t v19 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unint64_t v19 = 2042;
  *((void *)v19 + 1) = v18;
  *((void *)v19 + 66) = (char *)v19 + 16;
  *((void *)v19 + 67) = 512;
  *((void *)v19 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v19 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v19 + 69) = 0;
  IPC::Encoder::encodeHeader(v19);
  v28[0] = v19;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v19, &v27);
  IPC::ArgumentCoder<WebCore::TextCheckingRequestData,void>::encode(v19, v13);
  int v20 = (_DWORD *)IPC::Encoder::grow(v19, 4uLL, 4);
  if (v21 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1991C75FCLL);
  }
  _DWORD *v20 = v15;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v16 + 32))(v16, v28, 0);
  uint64_t result = v28[0];
  v28[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v22);
    return (IPC::Encoder *)WTF::fastFree(v24, v25);
  }
  return result;
}

IPC::Encoder *non-virtual thunk to'WebKit::WebEditorClient::requestCheckingOfString(uint64_t a1, _DWORD *a2, WebKit *a3)
{
  return WebKit::WebEditorClient::requestCheckingOfString(a1 - 24, a2, a3);
}

uint64_t WebKit::WebEditorClient::willChangeSelectionForAccessibility(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 32) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  *(unsigned char *)(v2 + 2027) = 1;
  return this;
}

uint64_t WebKit::WebEditorClient::didChangeSelectionForAccessibility(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 32) + 8);
  if (v1) {
    uint64_t v2 = v1 - 16;
  }
  else {
    uint64_t v2 = 0;
  }
  *(unsigned char *)(v2 + 2027) = 0;
  return this;
}

uint64_t WebKit::WebEditorClient::supportsGlobalSelection(WebKit::WebEditorClient *this)
{
  return 0;
}

uint64_t WebKit::WebFileSystemStorageConnection::connectionClosed(uint64_t this)
{
  uint64_t v1 = this;
  uint64_t v2 = *(atomic_uchar *volatile **)(this + 24);
  *(void *)(this + ++*(_DWORD *)(this + 24) = 0;
  if (v2)
  {
    char v3 = 0;
    atomic_uchar *volatile v4 = *v2;
    atomic_compare_exchange_strong_explicit(*v2, (unsigned __int8 *)&v3, 1u, memory_order_acquire, memory_order_acquire);
    if (v3) {
      this = MEMORY[0x19972E8D0](v4);
    }
    uint64_t v5 = *((void *)v4 + 1);
    uint64_t v6 = v5 - 1;
    *((void *)v4 + 1) = v5 - 1;
    if (v5 == 1)
    {
      uint64_t v18 = *((void *)v4 + 2);
      uint64_t v8 = *((void *)v4 + 3);
      *((void *)v4 + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
      BOOL v7 = v18 == 0;
    }
    else
    {
      BOOL v7 = 0;
      uint64_t v8 = 0;
    }
    int v9 = 1;
    atomic_compare_exchange_strong_explicit(v4, (unsigned __int8 *)&v9, 0, memory_order_release, memory_order_relaxed);
    if (v9 == 1)
    {
      if (v6) {
        goto LABEL_10;
      }
    }
    else
    {
      this = WTF::Lock::unlockSlow((WTF::Lock *)v4);
      if (v6) {
        goto LABEL_10;
      }
    }
    uint64_t v10 = WTF::fastMalloc((WTF *)0x20);
    *(void *)uint64_t v10 = &unk_1EE9B37E8;
    *(void *)(v10 + ++*(_DWORD *)(this + 8) = v4;
    *(void *)(v10 + 16) = v8;
    *(unsigned char *)(v10 + ++*(_DWORD *)(this + 24) = v7;
    uint64_t v19 = v10;
    WTF::ensureOnMainRunLoop();
    this = v19;
    if (v19) {
      this = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
  }
LABEL_10:
  uint64_t v11 = *(void *)(v1 + 16);
  if (v11)
  {
    uint64_t v12 = *(unsigned int *)(v11 - 4);
    uint64_t v13 = (uint64_t *)(v11 + 48 * v12);
    if (*(_DWORD *)(v11 - 12))
    {
      uint64_t v14 = *(uint64_t **)(v1 + 16);
      if (v12)
      {
        uint64_t v15 = 48 * v12;
        uint64_t v14 = *(uint64_t **)(v1 + 16);
        while ((unint64_t)(*v14 + 1) <= 1)
        {
          v14 += 6;
          v15 -= 48;
          if (!v15)
          {
            uint64_t v14 = v13;
            goto LABEL_17;
          }
        }
      }
      goto LABEL_17;
    }
    uint64_t v14 = (uint64_t *)(v11 + 48 * v12);
  }
  else
  {
    uint64_t v14 = 0;
    LODWORD(v12) = 0;
  }
  uint64_t v13 = (uint64_t *)(v11 + 48 * v12);
  if (v11)
  {
LABEL_17:
    uint64_t v16 = (uint64_t *)(v11 + 48 * *(unsigned int *)(v11 - 4));
    goto LABEL_22;
  }
  uint64_t v16 = 0;
LABEL_22:
  while (v14 != v16)
  {
    uint64_t v17 = v14 + 6;
    this = WebKit::WebFileSystemStorageConnection::invalidateAccessHandle(v1, *v14);
    uint64_t v14 = v13;
    if (v17 != v13)
    {
      uint64_t v14 = v17;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        v14 += 6;
        if (v14 == v13)
        {
          uint64_t v14 = v13;
          break;
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebFileSystemStorageConnection::invalidateAccessHandle(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2)
  {
    int v4 = *(_DWORD *)(v2 - 8);
    unint64_t v5 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    unint64_t v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    unsigned int v8 = v4 & ((v7 >> 31) ^ v7);
    uint64_t v9 = *(void *)(v2 + 48 * v8);
    if (v9 == a2)
    {
LABEL_6:
      if (*(_OWORD *)(v2 + 48 * v8 + 16) != 0)
      {
        uint64_t v11 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v11 = &unk_1EE9F6018;
        v11[1] = a2;
        uint64_t v12 = v11;
        WebCore::ScriptExecutionContext::postTaskTo();
        uint64_t result = (uint64_t)v12;
        if (v12) {
          return (*(uint64_t (**)(void *))(*v12 + 8))(v12);
        }
      }
    }
    else
    {
      int v10 = 1;
      while (v9)
      {
        unsigned int v8 = (v8 + v10) & v4;
        uint64_t v9 = *(void *)(v2 + 48 * v8);
        ++v10;
        if (v9 == a2) {
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::closeHandle(IPC::Encoder *result, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *((void *)result + 3);
  if (v2)
  {
    char v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)char v3 = 547;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 66) = (char *)v3 + 16;
    *((void *)v3 + 67) = 512;
    *((void *)v3 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v3 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v3 + 69) = 0;
    IPC::Encoder::encodeHeader(v3);
    unsigned int v8 = v3;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v3, &v7);
    IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v8, 0, 0);
    uint64_t result = v8;
    unsigned int v8 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v4);
      return (IPC::Encoder *)WTF::fastFree(v5, v6);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::isSameEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  unint64_t v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (!v5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16[0]) = 24;
    int v17 = 1;
LABEL_5:
    uint64_t v6 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, v16);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if (v17 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1EE9F5D78[v17])(&v20, v16);
    }
    return result;
  }
  if (a2 == a3)
  {
    LOBYTE(v16[0]) = 1;
    int v17 = 0;
    goto LABEL_5;
  }
  uint64_t v8 = *a4;
  *a4 = 0;
  uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v9 = &unk_1EE9F5E30;
  v9[1] = v8;
  uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 575;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  int v20 = v11;
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v19);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v18);
  v16[0] = (uint64_t)v9;
  v16[1] = v10;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v20, v16, 0, 0);
  uint64_t v13 = v16[0];
  v16[0] = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t result = v20;
  int v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v12);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getFileHandle(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, char a4, uint64_t *a5)
{
  uint64_t v24 = a2;
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    v22[0] = &v24;
    v22[1] = a3;
    LOBYTE(v2WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = a4;
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
    uint64_t v8 = *a3;
    uint64_t v9 = *a5;
    if (*a3) {
      *(_DWORD *)v8 += 4;
    }
    *a5 = 0;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x28);
    uint64_t v12 = (uint64_t)v10;
    void *v10 = &unk_1EE9F5E58;
    v10[1] = a1;
    void v10[2] = a1;
    if (v8)
    {
      int v13 = *(_DWORD *)v8;
      *(_DWORD *)v8 += 2;
      v10[3] = v8;
      v10[4] = v9;
      if (v13) {
        *(_DWORD *)uint64_t v8 = v13;
      }
      else {
        WTF::StringImpl::destroy(v8, v11);
      }
    }
    else
    {
      v10[3] = 0;
      v10[4] = v9;
    }
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    int v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v17 = 571;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v17 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    int v26 = v17;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,0ul,1ul,2ul>(v17, (uint64_t)v22);
    v25[0] = v12;
    v25[1] = v16;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v26, v25, 0, 0);
    uint64_t v19 = v25[0];
    v25[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t result = v26;
    int v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v18);
      uint64_t result = (IPC::Encoder *)WTF::fastFree(v20, v21);
      if (!v8) {
        return result;
      }
    }
    else if (!v8)
    {
      return result;
    }
    if (*(_DWORD *)v8 == 2) {
      return (IPC::Encoder *)WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v22[0]) = 24;
    int v23 = 1;
    uint64_t v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v14 + 16))(v14, v22);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v23 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(uint64_t *, void *))off_1EE9F5D88[v23])(v25, v22);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getDirectoryHandle(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, char a4, uint64_t *a5)
{
  uint64_t v24 = a2;
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    v22[0] = &v24;
    v22[1] = a3;
    LOBYTE(v2WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = a4;
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
    uint64_t v8 = *a3;
    uint64_t v9 = *a5;
    if (*a3) {
      *(_DWORD *)v8 += 4;
    }
    *a5 = 0;
    uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x28);
    uint64_t v12 = (uint64_t)v10;
    void *v10 = &unk_1EE9F5E80;
    v10[1] = a1;
    void v10[2] = a1;
    if (v8)
    {
      int v13 = *(_DWORD *)v8;
      *(_DWORD *)v8 += 2;
      v10[3] = v8;
      v10[4] = v9;
      if (v13) {
        *(_DWORD *)uint64_t v8 = v13;
      }
      else {
        WTF::StringImpl::destroy(v8, v11);
      }
    }
    else
    {
      v10[3] = 0;
      v10[4] = v9;
    }
    uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    int v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v17 = 569;
    *((void *)v17 + 1) = 0;
    *((void *)v17 + 66) = (char *)v17 + 16;
    *((void *)v17 + 67) = 512;
    *((void *)v17 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v17 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v17 + 69) = 0;
    IPC::Encoder::encodeHeader(v17);
    int v26 = v17;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,0ul,1ul,2ul>(v17, (uint64_t)v22);
    v25[0] = v12;
    v25[1] = v16;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v26, v25, 0, 0);
    uint64_t v19 = v25[0];
    v25[0] = 0;
    if (v19) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    uint64_t result = v26;
    int v26 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v18);
      uint64_t result = (IPC::Encoder *)WTF::fastFree(v20, v21);
      if (!v8) {
        return result;
      }
    }
    else if (!v8)
    {
      return result;
    }
    if (*(_DWORD *)v8 == 2) {
      return (IPC::Encoder *)WTF::StringImpl::destroy(v8, (WTF::StringImpl *)v18);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v22[0]) = 24;
    int v23 = 1;
    uint64_t v14 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void *))(*(void *)v14 + 16))(v14, v22);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v23 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(uint64_t *, void *))off_1EE9F5D88[v23])(v25, v22);
    }
  }
  return result;
}

WTF::StringImpl *WebKit::WebFileSystemStorageConnection::removeEntry(uint64_t a1, uint64_t a2, WTF::StringImpl *a3, char a4, uint64_t *a5)
{
  uint64_t v21 = a2;
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    uint64_t v18 = &v21;
    uint64_t v19 = a3;
    char v20 = a4;
    uint64_t v7 = *a5;
    *a5 = 0;
    uint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v8 = &unk_1EE9F5EA8;
    v8[1] = v7;
    uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v10 = 585;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    int v23 = v10;
    IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,0ul,1ul,2ul>(v10, (uint64_t)&v18);
    v22[0] = (uint64_t)v8;
    v22[1] = v9;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v23, v22, 0, 0);
    uint64_t v12 = v22[0];
    v22[0] = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
    uint64_t result = v23;
    int v23 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v11);
      return (WTF::StringImpl *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v1++*(_DWORD *)(this + 8) = 24;
    char v20 = 1;
    uint64_t v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v16 + 16))(v16, &v18);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
    if (v20)
    {
      uint64_t result = v19;
      uint64_t v19 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::resolve(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = a3;
  uint64_t v19 = a2;
  unint64_t v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    uint64_t v6 = *a4;
    *a4 = 0;
    uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
    *uint64_t v7 = &unk_1EE9F5ED0;
    v7[1] = v6;
    uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 591;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    char v20 = v9;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, &v19);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, &v18);
    v16[0] = (uint64_t)v7;
    v16[1] = v8;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v20, v16, 0, 0);
    uint64_t v11 = v16[0];
    v16[0] = 0;
    if (v11) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
    uint64_t result = v20;
    char v20 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v10);
      return (IPC::Encoder *)WTF::fastFree(v13, v14);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v16[0]) = 24;
    int v17 = 1;
    uint64_t v15 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v15 + 16))(v15, v16);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v15 + 8))(v15);
    if (v17 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1EE9F5DC0[v17])(&v20, v16);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getFile(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v17 = a2;
  int v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v6 = &unk_1EE9F5F08;
    v6[1] = v5;
    uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 570;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v18 = v8;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v17);
    v15[0] = (uint64_t)v6;
    v15[1] = v7;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v15, 0, 0);
    uint64_t v10 = v15[0];
    v15[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v15[0]) = 24;
    int v16 = 1;
    uint64_t v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, v15);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v16 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1EE9F5DD0[v16])(&v18, v15);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v17 = a2;
  int v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v6 = &unk_1EE9F5F40;
    v6[1] = v5;
    uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 553;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v18 = v8;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v17);
    v15[0] = (uint64_t)v6;
    v15[1] = v7;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v15, 0, 0);
    uint64_t v10 = v15[0];
    v15[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v15[0]) = 24;
    unsigned int v16 = 1;
    uint64_t v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, v15);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v16 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))*(&off_1EE9F5DE0 + v16))(&v18, v15);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::closeSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = a3;
  uint64_t v17 = a2;
  int v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *a4;
    *a4 = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v6 = &unk_1EE9F5F78;
    v6[1] = v5;
    uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 548;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v19 = v8;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v17);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v16);
    v18[0] = (uint64_t)v6;
    v18[1] = v7;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v19, v18, 0, 0);
    uint64_t v10 = v18[0];
    v18[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = v19;
    uint64_t v19 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v14, v15);
    }
  }
  else
  {
    uint64_t v12 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
    int v13 = *(uint64_t (**)(uint64_t))(*(void *)v12 + 8);
    return (IPC::Encoder *)v13(v12);
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getHandleNames(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v17 = a2;
  int v4 = *(os_unfair_lock_s **)(a1 + 24);
  if (v4)
  {
    uint64_t v5 = *a3;
    *a3 = 0;
    uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v6 = &unk_1EE9F5FA0;
    v6[1] = v5;
    uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 573;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    uint64_t v18 = v8;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v8, &v17);
    v15[0] = (uint64_t)v6;
    v15[1] = v7;
    IPC::Connection::sendMessageWithAsyncReply(v4, &v18, v15, 0, 0);
    uint64_t v10 = v15[0];
    v15[0] = 0;
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
    }
    uint64_t result = v18;
    uint64_t v18 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v9);
      return (IPC::Encoder *)WTF::fastFree(v12, v13);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v15[0]) = 24;
    int v16 = 1;
    uint64_t v14 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v14 + 16))(v14, v15);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 8))(v14);
    if (v16 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1EE9F5DC0[v16])(&v18, v15);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::getHandle(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v20 = a2;
  uint64_t v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    atomic_fetch_add((atomic_uint *volatile)(a1 + 8), 1u);
    uint64_t v8 = *a4;
    *a4 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x20);
    void *v9 = &unk_1EE9F5FC8;
    v9[1] = a1;
    void v9[2] = a1;
    v9[3] = v8;
    uint64_t v10 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 572;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v21 = v11;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v20);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a3);
    v18[0] = (uint64_t)v9;
    v18[1] = v10;
    IPC::Connection::sendMessageWithAsyncReply(v5, &v21, v18, 0, 0);
    uint64_t v13 = v18[0];
    v18[0] = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v18[0]) = 24;
    int v19 = 1;
    uint64_t v17 = *a4;
    *a4 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v17 + 16))(v17, v18);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (v19 != -1) {
      return (IPC::Encoder *)((uint64_t (*)(IPC::Encoder **, uint64_t *))off_1EE9F5D88[v19])(&v21, v18);
    }
  }
  return result;
}

IPC::Encoder *WebKit::WebFileSystemStorageConnection::move(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t v6 = *(os_unfair_lock_s **)(a1 + 24);
  if (v6)
  {
    uint64_t v8 = *a5;
    *a5 = 0;
    uint64_t v9 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v9 = &unk_1EE9F5FF0;
    v9[1] = v8;
    uint64_t v10 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 578;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v24 = v11;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v23);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v11, &v22);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, a4);
    int v19 = v9;
    uint64_t v20 = v10;
    IPC::Connection::sendMessageWithAsyncReply(v6, &v24, (uint64_t *)&v19, 0, 0);
    uint64_t v13 = (uint64_t)v19;
    int v19 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
    uint64_t result = v24;
    uint64_t v24 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v12);
      return (IPC::Encoder *)WTF::fastFree(v15, v16);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v19) = 24;
    char v21 = 1;
    uint64_t v17 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v17 + 16))(v17, &v19);
    uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 8))(v17);
    if (v21)
    {
      uint64_t result = v20;
      uint64_t v20 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (IPC::Encoder *)WTF::StringImpl::destroy(result, v18);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebFileSystemStorageConnection::registerSyncAccessHandle(uint64_t result, uint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t *)(result + 16);
  uint64_t v5 = *(void *)(result + 16);
  if (v5
    || (uint64_t result = WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand((uint64_t *)(result + 16)),
        (uint64_t v5 = *v6) != 0))
  {
    int v7 = *(_DWORD *)(v5 - 8);
  }
  else
  {
    int v7 = 0;
  }
  unint64_t v8 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  unint64_t v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  unint64_t v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  unsigned int v11 = v7 & ((v10 >> 31) ^ v10);
  uint64_t v12 = (void *)(v5 + 48 * v11);
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = 0;
    int v15 = 1;
    while (v13 != a2)
    {
      if (v13 == -1) {
        uint64_t v14 = v12;
      }
      unsigned int v11 = (v11 + v15) & v7;
      uint64_t v12 = (void *)(v5 + 48 * v11);
      uint64_t v13 = *v12;
      ++v15;
      if (!*v12)
      {
        if (v14)
        {
          void *v14 = 0;
          v14[3] = 0;
          v14[4] = 0;
          void v14[2] = 0;
          --*(_DWORD *)(*v6 - 16);
          uint64_t v12 = v14;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    *uint64_t v12 = a2;
    long long v16 = *a3;
    v12[4] = *((void *)a3 + 2);
    *((_OWORD *)v12 + 1) = v16;
    uint64_t v17 = *v6;
    if (*v6) {
      int v18 = *(_DWORD *)(v17 - 12) + 1;
    }
    else {
      int v18 = 1;
    }
    *(_DWORD *)(v17 - 12) = v18;
    uint64_t v19 = *v6;
    if (*v6) {
      int v20 = *(_DWORD *)(v19 - 12);
    }
    else {
      int v20 = 0;
    }
    uint64_t v21 = (*(_DWORD *)(v19 - 16) + v20);
    unint64_t v22 = *(unsigned int *)(v19 - 4);
    if (v22 > 0x400)
    {
      if (v22 > 2 * v21) {
        return result;
      }
    }
    else if (3 * v22 > 4 * v21)
    {
      return result;
    }
    return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(v6);
  }
  return result;
}

uint64_t *WebKit::WebFileSystemStorageConnection::unregisterSyncAccessHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = (uint64_t *)(a1 + 16);
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = *(_DWORD *)(v3 - 8);
    unint64_t v6 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
    unint64_t v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
    unint64_t v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
    unsigned int v9 = v5 & ((v8 >> 31) ^ v8);
    unint64_t v10 = (uint64_t *)(v3 + 48 * v9);
    uint64_t v11 = *v10;
    if (*v10 != a2)
    {
      int v12 = 1;
      while (v11)
      {
        unsigned int v9 = (v9 + v12) & v5;
        unint64_t v10 = (uint64_t *)(v3 + 48 * v9);
        uint64_t v11 = *v10;
        ++v12;
        if (*v10 == a2) {
          goto LABEL_8;
        }
      }
      unint64_t v10 = (uint64_t *)(v3 + 48 * *(unsigned int *)(v3 - 4));
    }
LABEL_8:
    if ((uint64_t *)(v3 + 48 * *(unsigned int *)(v3 - 4)) != v10)
    {
      uint64_t *v10 = -1;
      ++*(_DWORD *)(*result - 16);
      uint64_t v13 = *result;
      int v14 = *result ? *(_DWORD *)(v13 - 12) - 1 : -1;
      *(_DWORD *)(v13 - 12) = v14;
      uint64_t v15 = *result;
      if (*result)
      {
        unsigned int v16 = 6 * *(_DWORD *)(v15 - 12);
        unsigned int v17 = *(_DWORD *)(v15 - 4);
        if (v16 < v17 && v17 >= 9) {
          return (uint64_t *)WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(result, v17 >> 1);
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebFileSystemStorageConnection::requestNewCapacityForSyncAccessHandle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v19 = a3;
  uint64_t v20 = a2;
  int v5 = *(os_unfair_lock_s **)(a1 + 24);
  if (v5)
  {
    uint64_t v7 = *a5;
    *a5 = 0;
    unint64_t v8 = (void *)WTF::fastMalloc((WTF *)0x10);
    *unint64_t v8 = &unk_1EE9F6040;
    v8[1] = v7;
    uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    unint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)unint64_t v10 = 589;
    *((void *)v10 + 1) = 0;
    *((void *)v10 + 66) = (char *)v10 + 16;
    *((void *)v10 + 67) = 512;
    *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v10 + 69) = 0;
    IPC::Encoder::encodeHeader(v10);
    uint64_t v23 = v10;
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, &v20);
    IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v10, &v19);
    uint64_t v11 = (void *)IPC::Encoder::grow(v10, 8uLL, 8);
    if (v12 <= 7)
    {
      uint64_t result = 831;
      __break(0xC471u);
    }
    else
    {
      *uint64_t v11 = a4;
      uint64_t v21 = v8;
      uint64_t v22 = v9;
      IPC::Connection::sendMessageWithAsyncReply(v5, &v23, (uint64_t *)&v21, 0, 0);
      uint64_t v14 = (uint64_t)v21;
      uint64_t v21 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
      uint64_t result = (uint64_t)v23;
      uint64_t v23 = 0;
      if (result)
      {
        IPC::Encoder::~Encoder((IPC::Encoder *)result, v13);
        return WTF::fastFree(v16, v17);
      }
    }
  }
  else
  {
    LOBYTE(v21) = 0;
    LOBYTE(v22) = 0;
    uint64_t v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v18 + 16))(v18, &v21);
    return (*(uint64_t (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  return result;
}

void WebKit::WebFrameLoaderClient::~WebFrameLoaderClient(WebKit::WebFrameLoaderClient *this)
{
  *(void *)this = &unk_1EE9F5CA0;
  WTF::ScopeExit<WTF::Function<void ()(void)>>::~ScopeExit((unsigned char *)this + 16);
  uint64_t v2 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
}

void WebKit::WebFrameLoaderClient::navigationActionData(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::ResourceRequestBase *a3@<X2>, uint64_t a4@<X3>, _DWORD **a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, unsigned char *a9@<X8>, char a10, char a11, int a12, __int16 a13)
{
  uint64_t v201 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(*(void *)(a1 + 8) + 24);
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 8);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 24);
      if (v17)
      {
        uint64_t v18 = *(void *)(v17 + 8);
        if (v18)
        {
          uint64_t v24 = *(void **)(*(void *)(v18 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v24 + 1368))(v24) & 1) == 0)
          {
            uint64_t v25 = *(void *)(v24[2] + 8);
            if (v25)
            {
              CFRetain(*(CFTypeRef *)(v25 - 8));
              if (WebCore::ResourceRequestBase::isEmpty(a3))
              {
                uint64_t v81 = a1;
                uint64_t v82 = off_1EB358988;
                if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_70;
                }
                uint64_t v83 = *(WebKit::WebFrame **)(v81 + 8);
                uint64_t v84 = *((void *)v83 + 10);
                uint64_t v85 = WebKit::WebFrame::page(v83);
                if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(v81 + 8))) {
                  uint64_t v86 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(v81 + 8)) + 40);
                }
                else {
                  uint64_t v86 = 0;
                }
                *(_DWORD *)buf = 134219008;
                *(void *)&uint8_t buf[4] = v81;
                __int16 v110 = 2048;
                v111 = v83;
                __int16 v112 = 2048;
                uint64_t v113 = v84;
                *(_WORD *)uint64_t v114 = 2048;
                *(void *)&v114[2] = v85;
                *(_WORD *)&v114[10] = 2048;
                *(void *)&v114[12] = v86;
                CFTypeRef v94 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDeci"
                      "dePolicyForNavigationAction: ignoring because request is empty";
              }
              else
              {
                if (!*(unsigned char *)(a2 + 224)) {
                  goto LABEL_70;
                }
                if (*(unsigned char *)(a2 + 152))
                {
                  uint64_t v103 = a3;
                  {
                    char v95 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                    WebKit::WebProcess::WebProcess(v95);
                  }
                  int v26 = (long long *)(a2 + 136);
                  uint64_t v27 = WebKit::WebProcess::webFrame(WebKit::WebProcess::singleton(void)::process, *(void *)(a2 + 136), *(void *)(a2 + 144));
                  uint64_t v104 = a1;
                  uint64_t v105 = (CFTypeRef *)v27;
                  char v99 = a7;
                  uint64_t v100 = v25;
                  uint64_t v98 = a6;
                  if (v27)
                  {
                    unint64_t v28 = (unsigned int *)v27;
                    CFRetain(*(CFTypeRef *)(v27 + 8));
                    if (!*(unsigned char *)(a2 + 152)) {
                      goto LABEL_91;
                    }
                    uint64_t v29 = a4;
                    long long v107 = *v26;
                    WebKit::WebFrame::parentFrame(v28, buf);
                    int v30 = a9;
                    if (*(void *)buf)
                    {
                      uint64_t v31 = *(void *)(*(void *)buf + 80);
                      uint64_t v25 = *(void *)(*(void *)buf + 88);
                      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFF00;
                      CFRelease(*(CFTypeRef *)(*(void *)buf + 8));
                      char v33 = 1;
                    }
                    else
                    {
                      unint64_t v32 = 0;
                      LOBYTE(v31) = 0;
                      char v33 = 0;
                    }
                  }
                  else
                  {
                    if (!*(unsigned char *)(a2 + 152)) {
                      goto LABEL_91;
                    }
                    uint64_t v29 = a4;
                    int v30 = a9;
                    unint64_t v32 = 0;
                    LOBYTE(v31) = 0;
                    char v33 = 0;
                    long long v107 = *v26;
                  }
                  __int16 v175 = *(unsigned char *)(a2 + 872) == 0;
                  WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)&v176, (const String *)a2, 0);
                  CFTypeRef cf = 0;
                  uint64_t v34 = *(void *)(a2 + 40) + 8;
                  v196[0] = 0;
                  int v197 = -1;
                  std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v196, v34);
                  long long v199 = v107;
                  v198 = 0;
                  *(void *)long long v200 = v31 | v32;
                  *(void *)&v200[8] = v25;
                  v200[16] = v33;
                  *(_DWORD *)&v200[24] = getpid();
                  BOOL isFocused = (BOOL)v105;
                  if (v105) {
                    BOOL isFocused = WebKit::WebFrame::isFocused((WebKit::WebFrame *)v105);
                  }
                  v200[28] = isFocused;
                  v200[29] = 0;
                  if (!*(unsigned char *)(a2 + 168)) {
                    goto LABEL_18;
                  }
                  uint64_t v88 = WebKit::WebProcess::singleton((WebKit::WebProcess *)isFocused);
                  if (!*(unsigned char *)(a2 + 168)) {
                    goto LABEL_91;
                  }
                  uint64_t v89 = WebKit::WebProcess::webPage(v88, *(void *)(a2 + 160));
                  if (v89)
                  {
                    uint64_t v37 = *(void *)(v89 + 2120);
                    unint64_t v36 = v37 & 0xFFFFFFFFFFFFFF00;
                    char v38 = 1;
                  }
                  else
                  {
LABEL_18:
                    unint64_t v36 = 0;
                    LOBYTE(v37) = 0;
                    char v38 = 0;
                  }
                  v174[0] = 0;
                  v174[48] = 0;
                  uint64_t v39 = *(void *)(*(void *)(a1 + 8) + 24);
                  if (v39)
                  {
                    uint64_t v40 = *(atomic_uint **)(v39 + 8);
                    if (v40)
                    {
                      int v41 = (unsigned int *)(v40 + 2);
                      atomic_fetch_add(v40 + 2, 1u);
                      WebCore::Frame::ownerPermissionsPolicy((uint64_t *)buf, (WebCore::Frame *)v40);
                      std::__optional_storage_base<WebCore::OwnerPermissionsPolicyData,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WebCore::OwnerPermissionsPolicyData,false>>((uint64_t)v174, (uint64_t)buf);
                      std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)buf, v42);
                      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v41);
                    }
                  }
                  buf[0] = *(unsigned char *)(a2 + 868);
                  buf[1] = WebKit::modifiersForNavigationAction((unsigned char *)a2);
                  buf[2] = WebKit::mouseButton((unsigned char *)a2);
                  char v43 = *(unsigned char *)(a2 + 476);
                  if (v43)
                  {
                    char v43 = 0;
                    if (*(unsigned char *)(a2 + 474))
                    {
                      if (*(unsigned char *)(a2 + 448)) {
                        char v43 = *(unsigned char *)(a2 + 473);
                      }
                    }
                  }
                  _OWORD buf[3] = v43;
                  {
LABEL_92:
                    uint64_t v96 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                    WebKit::WebProcess::WebProcess(v96);
                  }
                  uint64_t v44 = WebKit::WebProcess::singleton(void)::process;
                  if (*(unsigned char *)(a2 + 224))
                  {
                    uint64_t v45 = *(void *)(a2 + 160);
                    uint64_t v46 = *(void *)(a2 + 168);
                    long long v47 = *(_DWORD **)(a2 + 480);
                    if (v47) {
                      ++*v47;
                    }
                    uint64_t v106 = v47;
                    WebKit::WebProcess::userGestureTokenIdentifier(v44, v45, v46, (uint64_t *)&v106, (__n128 *)&buf[8]);
                    uint64_t v49 = *(void *)(a2 + 480);
                    if (v49)
                    {
                      *(_DWORD *)v49 += 2;
                      long long v50 = *(_OWORD *)(v49 + 112);
                      *(_OWORD *)uint64_t v114 = *(_OWORD *)(v49 + 96);
                      *(_OWORD *)&v114[16] = v50;
                    }
                    else
                    {
                      v114[0] = 0;
                      v114[16] = 0;
                    }
                    char canHandleRequest = WebKit::WebPage::canHandleRequest(v103, v48);
                    char v116 = *(unsigned char *)(a2 + 871);
                    unsigned int v51 = *(_DWORD **)(a2 + 488);
                    if (v51) {
                      *v51 += 2;
                    }
                    v117 = v51;
                    uint64_t v52 = (uint64_t)v30;
                    if (*(unsigned char *)(a2 + 476)) {
                      uint64_t v53 = *(void *)(a2 + 464);
                    }
                    else {
                      uint64_t v53 = 0;
                    }
                    unint64_t v97 = v36;
                    uint64_t v118 = v53;
                    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v119, (const WebCore::ResourceResponseBase *)v29);
                    uint64_t v54 = *(const void **)(v29 + 240);
                    v119[30] = v54;
                    if (v54) {
                      CFRetain(v54);
                    }
                    char v120 = *(unsigned char *)(v29 + 248);
                    char v121 = *(unsigned char *)(a2 + 876);
                    char v122 = *(unsigned char *)(a2 + 873);
                    __int16 v123 = *(_WORD *)(a2 + 874);
                    char v124 = a10;
                    char v125 = a11;
                    uint64_t v55 = *(void *)(a2 + 40) + 8;
                    v126[0] = 0;
                    int v127 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v126, v55);
                    uint64_t v56 = *(void *)(a2 + 48) + 8;
                    v128[0] = 0;
                    int v129 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v128, v56);
                    long long v130 = *(_OWORD *)(a2 + 496);
                    char v131 = *(unsigned char *)(a2 + 512);
                    long long v132 = *(_OWORD *)(a2 + 520);
                    char v133 = *(unsigned char *)(a2 + 536);
                    __int16 v134 = *(_WORD *)(a2 + 878);
                    uint64_t v57 = *a5;
                    if (*a5) {
                      *v57 += 2;
                    }
                    v135 = v57;
                    __int16 v136 = a13;
                    std::__optional_copy_assign_base<WebCore::OwnerPermissionsPolicyData,false>::__optional_copy_assign_base[abi:sn180100]((uint64_t)&v137, (uint64_t)v174);
                    v138[0] = 0;
                    char v139 = 0;
                    if (*(unsigned char *)(a2 + 856))
                    {
                      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v138, (const WebCore::PrivateClickMeasurement *)(a2 + 544));
                      char v139 = 1;
                    }
                    if (v105)
                    {
                      *(_WORD *)v140 = WebKit::WebFrame::advancedPrivacyProtections((WebKit::WebFrame **)v105);
                      *(_DWORD *)&v140[2] = WebKit::WebFrame::originatorAdvancedPrivacyProtections((WebKit::WebFrame **)v105);
                    }
                    else
                    {
                      *(_DWORD *)v140 = 0;
                      v140[4] = 1;
                    }
                    int v58 = *(unsigned __int8 *)(a8 + 136);
                    if (*(unsigned char *)(a8 + 136))
                    {
                      WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v108, (WebKit::WebHitTestResultData **)a8, 0);
                      WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v141, v108);
                      char v59 = 1;
                    }
                    else
                    {
                      char v59 = 0;
                      v141[0] = 0;
                    }
                    uint64_t v25 = v100;
                    v141[664] = v59;
                    __int16 v142 = v175;
                    uint64_t v60 = v176;
                    uint64_t v61 = v179;
                    uint64_t v176 = 0;
                    uint64_t v143 = v60;
                    long long v144 = v177;
                    long long v145 = v178;
                    LODWORD(v177) = v177 & 0xFFFFFFFE;
                    uint64_t v179 = 0;
                    uint64_t v146 = v61;
                    long long v147 = v180;
                    long long v148 = v181;
                    LODWORD(v18IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v180 & 0xFFFFFFFE;
                    uint64_t v62 = v184;
                    uint64_t v149 = v182;
                    long long v63 = v183;
                    long long v183 = 0u;
                    long long v150 = v63;
                    uint64_t v184 = 0;
                    uint64_t v151 = v62;
                    uint64_t v64 = v185;
                    uint64_t v185 = 0;
                    uint64_t v152 = v64;
                    uint64_t v65 = v186;
                    uint64_t v186 = 0;
                    uint64_t v153 = v65;
                    uint64_t v66 = v187;
                    uint64_t v187 = 0;
                    uint64_t v154 = v66;
                    uint64_t v67 = v188;
                    uint64_t v188 = 0;
                    uint64_t v155 = v67;
                    char v157 = v190;
                    int v156 = v189;
                    long long v68 = v191;
                    long long v191 = 0u;
                    long long v158 = v68;
                    uint64_t v159 = v192;
                    char v161 = v194;
                    uint64_t v160 = v193;
                    CFTypeRef v69 = cf;
                    uint64_t v192 = 0;
                    CFTypeRef cf = 0;
                    CFTypeRef v162 = v69;
                    v163[0] = 0;
                    int v164 = -1;
                    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1>>((uint64_t)v163, (uint64_t)v196);
                    *(_OWORD *)((char *)v167 + 14) = *(_OWORD *)&v200[14];
                    long long v166 = v199;
                    char v70 = v198;
                    v198 = 0;
                    v165 = v70;
                    v167[0] = *(_OWORD *)v200;
                    unint64_t v168 = v37 | v97;
                    char v169 = v38;
                    WebKit::WebFrame::info(*(WebKit::WebFrame **)(v104 + 8), (uint64_t)v170);
                    v170[37] = v98;
                    char v171 = v99;
                    WebCore::ResourceRequest::ResourceRequest(&v172, (const String *)(a2 + 240));
                    WebCore::ResourceRequest::ResourceRequest(&v173, (const String *)v103);
                    WebKit::NavigationActionData::NavigationActionData(v52, (uint64_t)buf);
                    *(unsigned char *)(v52 + 2576) = 1;
                    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)buf);
                    if (v58) {
                      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v108);
                    }
                    if (v49)
                    {
                      WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v49);
                      WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v49);
                    }
                    if (v106) {
                      WTF::RefCounted<WebCore::UserGestureToken>::deref(v106);
                    }
                    std::__optional_destruct_base<WebCore::OwnerPermissionsPolicyData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v174, v71);
                    char v73 = v198;
                    v198 = 0;
                    if (v73)
                    {
                      if (*(_DWORD *)v73 == 2) {
                        WTF::StringImpl::destroy(v73, v72);
                      }
                      else {
                        *(_DWORD *)v73 -= 2;
                      }
                    }
                    if (v197 != -1) {
                      ((void (*)(unsigned char *, unsigned char *))off_1EE9F5DF0[v197])(buf, v196);
                    }
                    int v197 = -1;
                    CFTypeRef v74 = cf;
                    CFTypeRef cf = 0;
                    if (v74) {
                      CFRelease(v74);
                    }
                    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v176);
                    if (v105) {
                      CFRelease(v105[1]);
                    }
                    goto LABEL_58;
                  }
LABEL_91:
                  __break(1u);
                  goto LABEL_92;
                }
                uint64_t v87 = a1;
                uint64_t v82 = off_1EB358988;
                if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
                {
LABEL_70:
                  *a9 = 0;
                  a9[2576] = 0;
LABEL_58:
                  CFRelease(*(CFTypeRef *)(v25 - 8));
                  return;
                }
                uint64_t v90 = *(WebKit::WebFrame **)(v87 + 8);
                uint64_t v91 = *((void *)v90 + 10);
                uint64_t v92 = WebKit::WebFrame::page(v90);
                if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(v87 + 8))) {
                  uint64_t v93 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(v87 + 8)) + 40);
                }
                else {
                  uint64_t v93 = 0;
                }
                *(_DWORD *)buf = 134219008;
                *(void *)&uint8_t buf[4] = v87;
                __int16 v110 = 2048;
                v111 = v90;
                __int16 v112 = 2048;
                uint64_t v113 = v91;
                *(_WORD *)uint64_t v114 = 2048;
                *(void *)&v114[2] = v92;
                *(_WORD *)&v114[10] = 2048;
                *(void *)&v114[12] = v93;
                CFTypeRef v94 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDeci"
                      "dePolicyForNavigationAction: ignoring because frame does not exist";
              }
              _os_log_error_impl(&dword_1985F2000, v82, OS_LOG_TYPE_ERROR, v94, buf, 0x34u);
              goto LABEL_70;
            }
          }
        }
      }
    }
  }
  uint64_t v75 = a1;
  unint64_t v76 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
  {
    uint64_t v77 = *(WebKit::WebFrame **)(v75 + 8);
    uint64_t v78 = *((void *)v77 + 10);
    uint64_t v79 = WebKit::WebFrame::page(v77);
    if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(v75 + 8))) {
      uint64_t v80 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(v75 + 8)) + 40);
    }
    else {
      uint64_t v80 = 0;
    }
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = v75;
    __int16 v110 = 2048;
    v111 = v77;
    __int16 v112 = 2048;
    uint64_t v113 = v78;
    *(_WORD *)uint64_t v114 = 2048;
    *(void *)&v114[2] = v79;
    *(_WORD *)&v114[10] = 2048;
    *(void *)&v114[12] = v80;
    _os_log_error_impl(&dword_1985F2000, v76, OS_LOG_TYPE_ERROR, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: ignoring because there's no web page", buf, 0x34u);
  }
  *a9 = 0;
  a9[2576] = 0;
}

void WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t a5, _DWORD **a6, uint64_t a7, char a8, uint64_t a9, char a10, char a11, int a12, __int16 a13, int a14, unsigned int a15, uint64_t *a16)
{
  uint64_t v19 = a2;
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  WebKit::WebFrameLoaderClient::navigationActionData(a1, a2, a3, a4, a6, a7, a8, a9, v113, a10, a11, v68, a13);
  if (v114)
  {
    uint64_t v21 = a15;
    uint64_t v22 = *(void *)(*(void *)(a1 + 8) + 24);
    if (v22
      && (uint64_t v23 = *(void *)(v22 + 8)) != 0
      && (uint64_t v24 = *(void *)(v23 + 24)) != 0
      && (uint64_t v25 = *(void *)(v24 + 8)) != 0
      && (uint64_t v16 = *(WebKit::WebFrame **)(*(void *)(v25 + 48) + 16),
          ((*(uint64_t (**)(WebKit::WebFrame *))(*(void *)v16 + 1368))(v16) & 1) == 0)
      && (uint64_t v26 = *(void *)(*((void *)v16 + 2) + 8)) != 0)
    {
      uint64_t v27 = v26 - 16;
      CFRetain(*(CFTypeRef *)(v26 - 8));
      char v28 = 0;
    }
    else
    {
      uint64_t v27 = 0;
      char v28 = 1;
    }
    uint64_t v29 = WebKit::WebFrame::setUpPolicyListener(*(void *)(a1 + 8), a16, 1);
    if (a15)
    {
      if (v114)
      {
        uint64_t v30 = *(void *)(a1 + 8);
        CFRetain(*(CFTypeRef *)(v30 + 8));
        uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)(v27 + 32) + 56))(v27 + 32);
        unint64_t v32 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)unint64_t v32 = 1887;
        *((void *)v32 + 1) = v31;
        *((void *)v32 + 66) = (char *)v32 + 16;
        *((void *)v32 + 67) = 512;
        *((void *)v32 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v32 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v32 + 69) = 0;
        IPC::Encoder::encodeHeader(v32);
        *(void *)unint64_t v97 = v32;
        IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v32, (uint64_t)v113);
        char v33 = (void *)WTF::fastMalloc((WTF *)0x20);
        *char v33 = &unk_1EE9F6090;
        v33[1] = a1;
        v33[2] = v30;
        v33[3] = v29;
        CFTypeRef v69 = v33;
        uint64_t v70 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        (*(void (**)(uint64_t, unsigned char *, void **, void))(*(void *)(v27 + 32) + 40))(v27 + 32, v97, &v69, 0);
        unint64_t v35 = v69;
        CFTypeRef v69 = 0;
        if (v35) {
          (*(void (**)(void *))(*v35 + 8))(v35);
        }
        unint64_t v36 = *(IPC::Encoder **)v97;
        *(void *)unint64_t v97 = 0;
        if (v36)
        {
          IPC::Encoder::~Encoder(v36, v34);
          WTF::fastFree(v46, v47);
        }
LABEL_15:
        CFRelease(*(CFTypeRef *)(v27 + 8));
        goto LABEL_16;
      }
    }
    else
    {
      Class isa = v19[60].isa;
      if (isa && !*((_DWORD *)isa + 17) && *((unsigned char *)isa + 16) == 1
        || (WTF::linkedOnOrAfterSDKWithBehavior() & 1) == 0)
      {
        if (v114)
        {
          uint64_t v17 = buf;
          *(void *)unint64_t v97 = v113;
          IPC::MessageSender::sendSync<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>((uint64_t)&v69, v27 + 32, (uint64_t *)v97);
          if (v81)
          {
            unsigned int v51 = off_1EB358988;
            if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_ERROR))
            {
              char v59 = *(WebKit::WebFrame **)(a1 + 8);
              uint64_t v60 = *((void *)v59 + 10);
              uint64_t v61 = WebKit::WebFrame::page(v59);
              if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8))) {
                uint64_t v62 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8)) + 40);
              }
              else {
                uint64_t v62 = 0;
              }
              if (v81 > 1)
              {
                uint64_t v65 = std::__throw_bad_variant_access[abi:sn180100]();
                IPC::MessageSender::sendSync<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>(v65, v66, v67);
                return;
              }
              uint64_t v64 = IPC::errorAsString();
              *(_DWORD *)unint64_t v97 = 134219266;
              *(void *)&v97[4] = a1;
              __int16 v98 = 2048;
              char v99 = v59;
              __int16 v100 = 2048;
              uint64_t v101 = v60;
              __int16 v102 = 2048;
              uint64_t v103 = v61;
              __int16 v104 = 2048;
              uint64_t v105 = v62;
              __int16 v106 = 2082;
              long long v107 = v64;
              _os_log_error_impl(&dword_1985F2000, v51, OS_LOG_TYPE_ERROR, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: ignoring because of failing to send sync IPC with error %{public}s", v97, 0x3Eu);
            }
            uint64_t v52 = *(CFTypeRef **)(a1 + 8);
            *(_WORD *)unint64_t v97 = 0;
            v97[2] = 2;
            v97[8] = 0;
            BYTE2(v99) = 0;
            LOBYTE(v101) = 0;
            LOBYTE(v102) = 0;
            BYTE6(v10WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
            char v108 = 0;
            char v109 = 0;
            char v110 = 0;
            char v111 = 0;
            char v112 = 0;
            WebKit::WebFrame::didReceivePolicyDecision(v52, v29, (__int16 *)v97);
            WebKit::PolicyDecision::~PolicyDecision((WebKit::PolicyDecision *)v97, v53);
LABEL_39:
            if (v81 != -1) {
              ((void (*)(unsigned char *, void **))off_1EE9F5E00[v81])(v97, &v69);
            }
            if (v28) {
              goto LABEL_16;
            }
            goto LABEL_15;
          }
          IPC::ConnectionSendSyncResult<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>::takeReply((uint64_t)v97, (uint64_t)&v69);
          uint64_t v19 = off_1EB358988;
          if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
          {
LABEL_47:
            uint64_t v56 = *(CFTypeRef **)(a1 + 8);
            *(_WORD *)buf = *(_WORD *)v97;
            buf[2] = v97[2];
            char v83 = 0;
            char v85 = 0;
            uint64_t v87 = v101;
            LOBYTE(v8++*(_DWORD *)(this + 8) = v102;
            char v89 = 0;
            char v92 = 0;
            char v93 = 0;
            char v94 = 0;
            char v95 = 0;
            char v96 = 0;
            WebKit::WebFrame::didReceivePolicyDecision(v56, v29, (__int16 *)buf);
            WebKit::PolicyDecision::~PolicyDecision((WebKit::PolicyDecision *)buf, v57);
            WebKit::PolicyDecision::~PolicyDecision((WebKit::PolicyDecision *)v97, v58);
            goto LABEL_39;
          }
          uint64_t v16 = *(WebKit::WebFrame **)(a1 + 8);
          uint64_t v18 = *((void *)v16 + 10);
          uint64_t v21 = WebKit::WebFrame::page(v16);
          if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8)))
          {
            uint64_t v54 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 8)) + 40);
LABEL_46:
            int v55 = v97[2];
            *(_DWORD *)buf = 134219264;
            *(void *)(v17 + 4) = a1;
            __int16 v84 = 2048;
            *(void *)(v17 + 14) = v16;
            __int16 v86 = 2048;
            uint64_t v87 = v18;
            __int16 v88 = 2048;
            *(void *)(v17 + 34) = v21;
            __int16 v90 = 2048;
            *(void *)(v17 + 44) = v54;
            __int16 v91 = 1024;
            *(_DWORD *)(v17 + 54) = v55;
            _os_log_impl(&dword_1985F2000, v19, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: Got policyAction %u from sync IPC", buf, 0x3Au);
            goto LABEL_47;
          }
LABEL_49:
          uint64_t v54 = 0;
          goto LABEL_46;
        }
      }
      else if (v114)
      {
        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)(v27 + 32) + 56))(v27 + 32);
        uint64_t v39 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v39 = 1887;
        *((void *)v39 + 1) = v38;
        *((void *)v39 + 66) = (char *)v39 + 16;
        *((void *)v39 + 67) = 512;
        *((void *)v39 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v39 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v39 + 69) = 0;
        IPC::Encoder::encodeHeader(v39);
        *(void *)unint64_t v97 = v39;
        IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v39, (uint64_t)v113);
        uint64_t v40 = (void *)WTF::fastMalloc((WTF *)0x10);
        *uint64_t v40 = &unk_1EE9F6068;
        CFTypeRef v69 = v40;
        uint64_t v70 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
        (*(void (**)(uint64_t, unsigned char *, void **, void))(*(void *)(v27 + 32) + 40))(v27 + 32, v97, &v69, 0);
        unsigned int v42 = v69;
        CFTypeRef v69 = 0;
        if (v42) {
          (*(void (**)(void *))(*v42 + 8))(v42);
        }
        char v43 = *(IPC::Encoder **)v97;
        *(void *)unint64_t v97 = 0;
        if (v43)
        {
          IPC::Encoder::~Encoder(v43, v41);
          WTF::fastFree(v48, v49);
        }
        uint64_t v44 = *(CFTypeRef **)(a1 + 8);
        LOWORD(v69) = 0;
        BYTE2(v69) = 0;
        LOBYTE(v7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        char v71 = 0;
        char v72 = 0;
        char v73 = 0;
        v74[0] = 0;
        char v75 = 0;
        LOBYTE(v76) = 0;
        char v77 = 0;
        char v78 = 0;
        char v80 = 0;
        WebKit::WebFrame::didReceivePolicyDecision(v44, v29, (__int16 *)&v69);
        if (v80)
        {
          long long v63 = v79;
          uint64_t v79 = 0;
          if (v63)
          {
            if (*(_DWORD *)v63 == 2) {
              WTF::StringImpl::destroy(v63, v45);
            }
            else {
              *(_DWORD *)v63 -= 2;
            }
          }
        }
        if (v77) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v76);
        }
        if (v75) {
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v74, v45);
        }
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v50 = *a16;
  *a16 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, 2);
  (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
LABEL_16:
  if (v114) {
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v113);
  }
}

IPC::Encoder *IPC::MessageSender::sendSync<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t result = (IPC::Encoder *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  if (!result)
  {
    *(unsigned char *)a1 = 3;
    *(_DWORD *)(a1 + 216) = 1;
    return result;
  }
  uint64_t v8 = (uint64_t)result;
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3751, v6, &v26, &v25);
  IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v25, *a3);
  IPC::Connection::sendSyncMessage(v8, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
  if (!v24)
  {
    LOBYTE(v21) = 0;
    char v22 = 0;
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>(v23, v27);
    if (v32)
    {
      std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]<WebKit::PolicyDecision,void>((uint64_t)&v21, (long long *)v27);
      char v22 = 1;
    }
    std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v27, v10);
    if (!v22)
    {
      *(unsigned char *)a1 = 13;
      *(_DWORD *)(a1 + 216) = 1;
      goto LABEL_18;
    }
    if (!v24)
    {
      unint64_t v12 = v23;
      uint64_t v23 = 0;
      v27[0] = v12;
      std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]<WebKit::PolicyDecision,void>((uint64_t)&v27[1], &v21);
      uint64_t v13 = v27[0];
      v27[0] = 0;
      *(void *)a1 = v13;
      std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]<WebKit::PolicyDecision,void>(a1 + 8, (long long *)&v27[1]);
      *(_DWORD *)(a1 + 216) = 0;
      if (!v32) {
        goto LABEL_11;
      }
      uint64_t v20 = v31;
      uint64_t v31 = 0;
      if (!v20) {
        goto LABEL_11;
      }
      if (*(_DWORD *)v20 != 2)
      {
        *(_DWORD *)v20 -= 2;
LABEL_11:
        if ((_BYTE)v30) {
          WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v29);
        }
        if (v28[120]) {
          WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v28, v11);
        }
        uint64_t v14 = v27[0];
        v27[0] = 0;
        if (v14)
        {
          IPC::Decoder::~Decoder(v14);
          WTF::fastFree(v15, v16);
        }
LABEL_18:
        std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v11);
        int v9 = v24;
        if (v24 == -1) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
LABEL_27:
      WTF::StringImpl::destroy(v20, v11);
      goto LABEL_11;
    }
LABEL_26:
    uint64_t v20 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_27;
  }
  if (v24 != 1) {
    goto LABEL_26;
  }
  *(unsigned char *)a1 = (_BYTE)v23;
  int v9 = 1;
  *(_DWORD *)(a1 + 216) = 1;
LABEL_19:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F5E10[v9])(v27, &v23);
LABEL_20:
  uint64_t result = v25;
  uint64_t v25 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v17);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

uint64_t IPC::ConnectionSendSyncResult<Messages::WebPageProxy::DecidePolicyForNavigationActionSync>::takeReply(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 216))
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1991CAA9CLL);
  }
  uint64_t v2 = (long long *)(a2 + 8);

  return std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]<WebKit::PolicyDecision,void>(a1, v2);
}

void WebKit::WebDataListSuggestionPicker::~WebDataListSuggestionPicker(WebKit::WebDataListSuggestionPicker *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

void WebKit::WebDateTimeChooser::~WebDateTimeChooser(WebKit::WebDateTimeChooser *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

{
  unsigned int *v3;
  void *v4;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);

  WTF::fastFree(this, v4);
}

uint64_t WebCore::DragClient::useLegacyDragClient(WebCore::DragClient *this)
{
  return 1;
}

void WebKit::WebDragClient::~WebDragClient(WebKit::WebDragClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F60B8;
  *((void *)this + 1) = 0;
  if (v3)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  uint64_t vars8;

  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F60B8;
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::fastFree(this, a2);
}

void WebKit::WebEditorClient::~WebEditorClient(WebKit::WebEditorClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 1, a2);
}

uint64_t WebKit::WebEditorClient::supportsClientSideAttachmentData(WebKit::WebEditorClient *this)
{
  return 1;
}

uint64_t WebKit::WebEditorClient::textChecker(WebKit::WebEditorClient *this)
{
  return (uint64_t)this + 24;
}

void non-virtual thunk to'WebKit::WebEditorClient::~WebEditorClient(WebKit::WebEditorClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this - 2, a2);
}

{
  WebKit::WebEditorClient::operator delete((uint64_t)this - 24, a2);
}

void WebKit::WebFileSystemStorageConnection::~WebFileSystemStorageConnection(WebKit::WebFileSystemStorageConnection *this, void *a2)
{
  WebKit::WebFileSystemStorageConnection::~WebFileSystemStorageConnection(this, a2);

  WTF::fastFree(v2, v3);
}

{
  atomic_uchar *volatile *v3;
  char v4;
  atomic_uchar *volatile v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v3 = (atomic_uchar *volatile *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (!v3) {
    goto LABEL_10;
  }
  uint64_t v4 = 0;
  int v5 = *v3;
  atomic_compare_exchange_strong_explicit(*v3, (unsigned __int8 *)&v4, 1u, memory_order_acquire, memory_order_acquire);
  if (v4) {
    MEMORY[0x19972E8D0](v5);
  }
  uint64_t v6 = *((void *)v5 + 1);
  uint64_t v7 = v6 - 1;
  *((void *)v5 + 1) = v6 - 1;
  if (v6 == 1)
  {
    uint64_t v13 = *((void *)v5 + 2);
    int v9 = *((void *)v5 + 3);
    *((void *)v5 + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
    uint64_t v8 = v13 == 0;
  }
  else
  {
    uint64_t v8 = 0;
    int v9 = 0;
  }
  unint64_t v10 = 1;
  atomic_compare_exchange_strong_explicit(v5, (unsigned __int8 *)&v10, 0, memory_order_release, memory_order_relaxed);
  if (v10 == 1)
  {
    if (v7) {
      goto LABEL_10;
    }
  }
  else
  {
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v7) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v11 = &unk_1EE9B37E8;
  *(void *)(v11 + ++*(_DWORD *)(this + 8) = v5;
  *(void *)(v11 + 16) = v9;
  *(unsigned char *)(v11 + ++*(_DWORD *)(this + 24) = v8;
  uint64_t v14 = v11;
  WTF::ensureOnMainRunLoop();
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
LABEL_10:
  unint64_t v12 = *((void *)this + 2);
  if (v12) {
    WTF::fastFree((WTF *)(v12 - 16), a2);
  }
}

uint64_t WebCore::FileSystemStorageConnection::isWorker(WebCore::FileSystemStorageConnection *this)
{
  return 0;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy13WrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = *(WTF **)(a2 + 8);
    if (v4)
    {
      *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v4, (void *)a2);
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy13WrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = *(WTF **)(a2 + 8);
    if (v4)
    {
      *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v4, (void *)a2);
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy15UnwrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = *(WTF **)(a2 + 8);
    if (v4)
    {
      *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v4, (void *)a2);
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages15WebProcessProxy15UnwrapCryptoKeyEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = *(WTF **)(a2 + 8);
    if (v4)
    {
      *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      WTF::fastFree(v4, (void *)a2);
    }
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy38SerializedAttachmentDataForIdentifiersEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy11CanUndoRedoEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy15ExecuteUndoRedoEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy21CheckSpellingOfStringEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy20CheckGrammarOfStringEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy20CheckTextOfParagraphEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy19SpellingUIIsShowingEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, IPC::Decoder **a2)
{
  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100](a2);
}

WTF *std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>(WTF::StringImpl ***a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *((unsigned int *)*a1 + 3);
  if (v4) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*v3, (WTF::StringImpl *)((char *)*v3 + 8 * v4));
  }

  return WTF::VectorBuffer<WTF::String,0ul,WTF::FastMalloc>::adopt((uint64_t)v3, a2);
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy17GetGuessesForWordEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2 + 8, a2);

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    uint64_t v3 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v3 = &unk_1EE9F5DA8;
    v3[1] = v2;
    uint64_t v4 = v3;
    WTF::ensureOnMainRunLoop();
    if (v4) {
      (*(void (**)(void *))(*v4 + 8))(v4);
    }
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore26FileSystemHandleCloseScopeENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::FileSystemHandleCloseScope,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (v1)
  {
    uint64_t v2 = *(char **)(v1 + 8);
    if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFFDLL) {
      (*(void (**)(void))(**(void **)(v1 + 24) + 24))(*(void *)(v1 + 24));
    }
    uint64_t v3 = *(unsigned int **)(v1 + 24);
    *(void *)(v1 + ++*(_DWORD *)(this + 24) = 0;
    if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
    }
    return WTF::fastFree((WTF *)v1, v2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, void *a2)
{
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS8_6StringELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSD_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_()
{
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27FileSystemStorageConnection20SyncAccessHandleInfoENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result = (WTF::StringImpl *)*((void *)a2 + 1);
  *((void *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

IPC::Decoder **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3IPC24ConnectionSendSyncResultIN8Messages12WebPageProxy35DecidePolicyForNavigationActionSyncEE9ReplyDataENS8_5ErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 208))
  {
    uint64_t v4 = *(WTF::StringImpl **)(a2 + 200);
    *(void *)(a2 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
  }
  if (*(unsigned char *)(a2 + 184)) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a2 + 176));
  }
  if (*(unsigned char *)(a2 + 168)) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a2 + 48), (WTF::StringImpl *)a2);
  }

  return std::unique_ptr<IPC::Decoder>::~unique_ptr[abi:sn180100]((IPC::Decoder **)a2);
}

double WebKit::WebEditorClient::operator delete(uint64_t a1, void *a2)
{
  uint64_t v3 = *(unsigned int **)(a1 + 32);
  *(void *)(a1 + ++*(_DWORD *)(this + 32) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)(a1 + 8), a2);
  if (*(_DWORD *)(a1 + 16))
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    WTF::fastFree((WTF *)a1, v4);
  }
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebCore::ShouldSample>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebCore::ShouldSample>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);

  return IPC::ArgumentCoder<WebCore::ShouldSample,void>::encode<IPC::Encoder>(a1, v4);
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::LogDiagnosticMessageWithEnhancedPrivacyFromWebProcess>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1998;
  *((void *)v6 + 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v9 = v6;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WebCore::ShouldSample>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WebCore::ShouldSample>,0ul,1ul,2ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

_DWORD *IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, a2[1]);
  char v4 = a2[2];

  return IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, v4);
}

uint64_t IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::Decoder::decode<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a1, a2, (uint64_t)&v8);
  char v6 = v10;
  if (v10)
  {
    *(void *)a3 = v8;
    uint64_t v7 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    *(void *)(a3 + ++*(_DWORD *)(this + 8) = v7;
    uint64_t result = WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v8, v5);
    char v6 = 1;
  }
  else
  {
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v6;
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t result = *((void *)a1 + 3);
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = ((*((void *)a1 + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v21 = *((void *)a1 + 3);
    if (v21)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v21 + 16))(v21, v6, v5);
        uint64_t v20 = *(void *)a1;
        unint64_t v19 = *((void *)a1 + 1);
      }
      else
      {
        unint64_t v19 = 0;
        uint64_t v20 = 0;
      }
    }
    goto LABEL_20;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  *((void *)a1 + 2) = v9 + 1;
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    if (v10 >= 0xAAAA)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::SerializedAttachmentData>(a1, (uint64_t)&v29);
        if (!v32) {
          break;
        }
        if (HIDWORD(v34) == v34)
        {
          WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>((uint64_t)&v33, (unint64_t)&v29);
        }
        else
        {
          int v23 = HIDWORD(v34) + 1;
          int v24 = (void *)(v33 + 24 * HIDWORD(v34));
          uint64_t v25 = v29;
          uint64_t v29 = 0;
          *int v24 = v25;
          uint64_t v26 = v30;
          uint64_t v30 = 0;
          v24[1] = v26;
          uint64_t v27 = v31;
          uint64_t v31 = 0;
          void v24[2] = v27;
          HIDWORD(v34) = v23;
        }
        std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v33, HIDWORD(v34));
          *(void *)a3 = v33;
          char v28 = v34;
          uint64_t v33 = 0;
          uint64_t v34 = 0;
          *(void *)(a3 + ++*(_DWORD *)(this + 8) = v28;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
LABEL_17:
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        *(void *)a3 = v17;
        *(void *)(a3 + ++*(_DWORD *)(this + 8) = v18;
LABEL_18:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
      }
      LODWORD(v34) = 24 * (int)v10 / 0x18u;
      uint64_t v33 = WTF::fastMalloc((WTF *)(24 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::SerializedAttachmentData>(a1, (uint64_t)&v29);
        if (!v32) {
          break;
        }
        if (HIDWORD(v34) == v34)
        {
          WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::SerializedAttachmentData>((uint64_t)&v33, (unint64_t)&v29);
        }
        else
        {
          int v12 = HIDWORD(v34) + 1;
          uint64_t v13 = (void *)(v33 + 24 * HIDWORD(v34));
          uint64_t v14 = v29;
          uint64_t v29 = 0;
          *uint64_t v13 = v14;
          uint64_t v15 = v30;
          uint64_t v30 = 0;
          v13[1] = v15;
          uint64_t v16 = v31;
          uint64_t v31 = 0;
          void v13[2] = v16;
          HIDWORD(v34) = v12;
        }
        std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
        if (!--v10)
        {
          uint64_t v17 = v33;
          uint64_t v18 = v34;
          goto LABEL_17;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v11);
    return WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, a2);
  }
  unint64_t v19 = v5;
  uint64_t v20 = 0;
LABEL_20:
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  uint64_t result = *((void *)a1 + 3);
  if (result)
  {
    if (v19) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v20);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void IPC::Decoder::decode<WebCore::SerializedAttachmentData>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebCore::SerializedAttachmentData,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = *((void *)a1 + 1);
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    uint64_t v5 = *((void *)a1 + 3);
    if (v5 && v4 != 0)
    {
      unint64_t v7 = *(void (**)(void))(*(void *)v5 + 16);
      v7();
    }
  }
}

uint64_t std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(unsigned int **)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v3) {
      WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v3, a2);
    }
    uint64_t v4 = *(WTF::StringImpl **)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2) {
        WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v4 -= 2;
      }
    }
    uint64_t v5 = *(WTF::StringImpl **)a1;
    *(void *)a1 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2) {
        WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
      }
      else {
        *(_DWORD *)v5 -= 2;
      }
    }
  }
  return a1;
}

uint64_t WTF::Vector<WebCore::SerializedAttachmentData,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  if (*(unsigned int *)(result + 8) > this)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > this)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::SerializedAttachmentData>::destruct((WTF::StringImpl *)(*(void *)result + 24 * this), (WTF::StringImpl *)(*(void *)result + 24 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v5 = *(WTF::StringImpl **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(24 * this);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v3 = result;
      if ((WTF::StringImpl *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::SerializedAttachmentData>::move(v5, (WTF::StringImpl *)((char *)v5 + 24 * v4), (WTF::StringImpl **)result);
      }
    }
    if (v5)
    {
      if (*(WTF::StringImpl **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 0;
      }
      return WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

WTF *WTF::RefCounted<WebKit::WebUndoStep>::deref(WTF *this, void *a2)
{
  uint64_t v2 = this;
  if (*(_DWORD *)this == 1)
  {
    uint64_t v3 = (_DWORD *)*((void *)this + 1);
    *((void *)v2 + 1) = 0;
    if (v3)
    {
      if (v3[2] == 1) {
        (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
      }
      else {
        --v3[2];
      }
    }
    return (WTF *)WTF::fastFree(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::CanUndoRedo>(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3746, a4, &v19, &v18);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v18, *a3);
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  if (!v17)
  {
    __int16 v15 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v16, &v15);
    if (!HIBYTE(v15))
    {
      *(unsigned char *)a1 = 13;
      *(_DWORD *)(a1 + 16) = 1;
      int v7 = v17;
      if (v17 == -1) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
    int v7 = v17;
    if (!v17)
    {
      uint64_t v9 = v16;
      uint64_t v16 = 0;
      char v10 = v15;
      *(void *)a1 = v9;
      *(unsigned char *)(a1 + ++*(_DWORD *)(this + 8) = v10;
      *(_DWORD *)(a1 + 16) = 0;
      goto LABEL_8;
    }
LABEL_12:
    uint64_t v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return (IPC::Encoder *)IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>(v14);
  }
  if (v17 != 1) {
    goto LABEL_12;
  }
  *(unsigned char *)a1 = (_BYTE)v16;
  int v7 = 1;
  *(_DWORD *)(a1 + 16) = 1;
LABEL_8:
  ((void (*)(__int16 *, uint64_t **))off_1EE9F5E10[v7])(&v15, &v16);
LABEL_9:
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *IPC::Connection::sendSync<Messages::WebPageProxy::ExecuteUndoRedo>(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v19 = 0;
  IPC::Connection::createSyncMessageEncoder(3755, a4, &v19, &v18);
  IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v18, *a3);
  IPC::Connection::sendSyncMessage(a2, v19, (uint64_t *)&v18, 0, (uint64_t)&v16, INFINITY);
  uint64_t v7 = v17;
  if (v17)
  {
    if (v17 != 1)
    {
      uint64_t v13 = (uint64_t *)std::__throw_bad_variant_access[abi:sn180100]();
      return (IPC::Encoder *)IPC::Decoder::decode<WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v13, v14, v15);
    }
    *(unsigned char *)a1 = v16;
  }
  else
  {
    uint64_t v8 = v16;
    uint64_t v16 = 0;
    *(void *)a1 = v8;
  }
  *(_DWORD *)(a1 + 16) = v7;
  ((void (*)(char *, uint64_t *))off_1EE9F5E10[v7])(&v20, &v16);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v11, v12);
  }
  return result;
}

uint64_t IPC::Decoder::decode<WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = IPC::VectorArgumentCoder<false,WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>(a1, a2, a3);
  if (!*(unsigned char *)(a3 + 16))
  {
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v6 != 0)
    {
      uint64_t v8 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v8();
    }
  }
  return result;
}

uint64_t IPC::VectorArgumentCoder<false,WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = a1[1];
  uint64_t v6 = *a1;
  unint64_t v7 = ((a1[2] + 7) & 0xFFFFFFFFFFFFFFF8) - *a1;
  if (v5 < v7 || v5 - v7 <= 7)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v20 = a1[3];
    if (v20)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v20 + 16))(v20, v6, v5);
        uint64_t v19 = *a1;
        uint64_t v18 = a1[1];
      }
      else
      {
        uint64_t v18 = 0;
        uint64_t v19 = 0;
      }
    }
    goto LABEL_20;
  }
  uint64_t v9 = (unint64_t *)(v6 + v7);
  a1[2] = (uint64_t)(v9 + 1);
  if (v6)
  {
    unint64_t v10 = *v9;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    if (v10 >= 0x5555)
    {
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextCheckingResult>(a1, (uint64_t)&v27);
        if (!v33) {
          break;
        }
        if (HIDWORD(v35) == v35)
        {
          WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>((uint64_t)&v34, (unint64_t)&v27);
        }
        else
        {
          uint64_t v22 = v34 + 48 * HIDWORD(v35);
          uint64_t v23 = v28;
          *(_OWORD *)uint64_t v22 = v27;
          *(void *)(v22 + ++*(_DWORD *)(this + 24) = 0;
          *(void *)(v22 + ++*(_DWORD *)(this + 32) = 0;
          *(void *)(v22 + 16) = v23;
          uint64_t v24 = v29;
          uint64_t v29 = 0;
          *(void *)(v22 + ++*(_DWORD *)(this + 24) = v24;
          LODWORD(v++*(_DWORD *)(this + 24) = v30;
          int v30 = 0;
          *(_DWORD *)(v22 + ++*(_DWORD *)(this + 32) = v24;
          LODWORD(v++*(_DWORD *)(this + 24) = v31;
          int v31 = 0;
          *(_DWORD *)(v22 + 36) = v24;
          uint64_t v25 = v32;
          uint64_t v32 = 0;
          *(void *)(v22 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v25;
          ++HIDWORD(v35);
        }
        std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)&v34, HIDWORD(v35));
          *(void *)a3 = v34;
          uint64_t v26 = v35;
          uint64_t v34 = 0;
          uint64_t v35 = 0;
          *(void *)(a3 + ++*(_DWORD *)(this + 8) = v26;
          goto LABEL_18;
        }
      }
    }
    else
    {
      if (!v10)
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
LABEL_17:
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        *(void *)a3 = v16;
        *(void *)(a3 + ++*(_DWORD *)(this + 8) = v17;
LABEL_18:
        *(unsigned char *)(a3 + 16) = 1;
        return WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
      }
      LODWORD(v35) = 48 * (int)v10 / 0x30u;
      uint64_t v34 = WTF::fastMalloc((WTF *)(48 * v10));
      while (1)
      {
        IPC::Decoder::decode<WebCore::TextCheckingResult>(a1, (uint64_t)&v27);
        if (!v33) {
          break;
        }
        if (HIDWORD(v35) == v35)
        {
          WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::TextCheckingResult>((uint64_t)&v34, (unint64_t)&v27);
        }
        else
        {
          uint64_t v12 = v34 + 48 * HIDWORD(v35);
          uint64_t v13 = v28;
          *(_OWORD *)uint64_t v12 = v27;
          *(void *)(v12 + ++*(_DWORD *)(this + 24) = 0;
          *(void *)(v12 + ++*(_DWORD *)(this + 32) = 0;
          *(void *)(v12 + 16) = v13;
          uint64_t v14 = v29;
          uint64_t v29 = 0;
          *(void *)(v12 + ++*(_DWORD *)(this + 24) = v14;
          LODWORD(v14) = v30;
          int v30 = 0;
          *(_DWORD *)(v12 + ++*(_DWORD *)(this + 32) = v14;
          LODWORD(v14) = v31;
          int v31 = 0;
          *(_DWORD *)(v12 + 36) = v14;
          uint64_t v15 = v32;
          uint64_t v32 = 0;
          *(void *)(v12 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v15;
          ++HIDWORD(v35);
        }
        std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
        if (!--v10)
        {
          uint64_t v16 = v34;
          uint64_t v17 = v35;
          goto LABEL_17;
        }
      }
    }
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 16) = 0;
    std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v11);
    return WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v34, a2);
  }
  uint64_t v18 = v5;
  uint64_t v19 = 0;
LABEL_20:
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (v18) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v19);
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

WTF::StringImpl *IPC::Decoder::decode<WebCore::TextCheckingResult>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<WebCore::TextCheckingResult,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 48))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = (WTF::StringImpl *)a1[3];
    if (result && v5 != 0)
    {
      unint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return (WTF::StringImpl *)v7();
    }
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::TextCheckingResult,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    uint64_t v3 = *(WTF::StringImpl **)(a1 + 40);
    *(void *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, a2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
    WTF::Vector<WebCore::GrammarDetail,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(a1 + 24, a2);
  }
  return a1;
}

unsigned int *WTF::Vector<WebCore::TextCheckingResult,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(unsigned int *result, unint64_t this)
{
  if (result[2] > this)
  {
    uint64_t v3 = (uint64_t)result;
    unint64_t v4 = result[3];
    if (v4 > this)
    {
      uint64_t result = (unsigned int *)WTF::VectorDestructor<true,WebCore::TextCheckingResult>::destruct(*(void *)result + 48 * this, (WTF::StringImpl *)(*(void *)result + 48 * v4));
      *(_DWORD *)(v3 + 12) = this;
      LODWORD(v4) = this;
    }
    uint64_t v5 = *(WTF **)v3;
    if (this)
    {
      if (this >= 0x5555556)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = (WTF *)(48 * this);
      uint64_t result = (unsigned int *)WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = (v6 & 0xFFFFFFF0) / 0x30;
      *(void *)uint64_t v3 = result;
      if (result != (unsigned int *)v5) {
        uint64_t result = (unsigned int *)WTF::VectorMover<false,WebCore::TextCheckingResult>::move((uint64_t)v5, (WTF *)((char *)v5 + 48 * v4), (uint64_t)result);
      }
    }
    if (v5)
    {
      if (*(WTF **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 0;
      }
      return (unsigned int *)WTF::fastFree(v5, (void *)this);
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5E30;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5E30;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    unsigned __int16 v4 = IPC::ArgumentCoder<std::tuple<BOOL>,void>::decode<IPC::Decoder>(a2);
    if (v4 > 0xFFu)
    {
      v10[0] = v4;
      int v11 = 0;
      uint64_t v5 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 16))(v5, v10);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 8))(v5);
      if (v11 != -1) {
        return ((uint64_t (*)(char *, unsigned char *))off_1EE9F5D78[v11])(&v12, v10);
      }
      return result;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = a2[3];
    if (v9 && v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v7);
    }
  }

  return IPC::Connection::cancelReply<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(v2);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::IsSameEntry,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<BOOL> &&)>>(uint64_t *a1)
{
  v3[0] = 0;
  int v4 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v1 + 16))(v1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v4 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F5D78[v4])(&v5, v3);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFileHandle,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F5E58;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFileHandle,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F5E58;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  char v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFileHandle,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>>(a2, (uint64_t)&v5), v6))
  {
    long long v7 = v5;
    uint64_t v3 = &v7;
  }
  else
  {
    LOBYTE(v5) = 7;
    DWORD2(v5) = 1;
    uint64_t v3 = &v5;
  }
  return ((uint64_t (*)(uint64_t, long long *))WebKit::WebFileSystemStorageConnection::getFileHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>)(v2, v3);
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>(a1, (uint64_t)&v8);
  if (v9)
  {
    *(_OWORD *)a2 = v8;
    *(unsigned char *)(a2 + 16) = 1;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 16) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v5);
    }
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>,void>::decode<IPC::Decoder>(a1, a2);
  if (!*(unsigned char *)(a2 + 16))
  {
    uint64_t v5 = a1[1];
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v5 != 0)
    {
      BOOL v7 = *(uint64_t (**)(void))(*(void *)result + 16);
      return v7();
    }
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>,void>::decode<IPC::Decoder>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1[1];
  uint64_t v4 = *a1;
  unint64_t v5 = a1[2] - *a1;
  if (v3 <= v5)
  {
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v13 = a1[3];
    if (v13)
    {
      uint64_t v16 = a1;
      if (v3)
      {
        (*(void (**)(uint64_t))(*(void *)v13 + 16))(v13);
        a1 = v16;
        uint64_t v12 = *v16;
        unint64_t v11 = v16[1];
      }
      else
      {
        unint64_t v11 = 0;
        uint64_t v12 = 0;
      }
    }
    goto LABEL_12;
  }
  uint64_t v6 = (unsigned __int8 *)(v4 + v5);
  a1[2] = (uint64_t)(v6 + 1);
  if (!v4)
  {
    unint64_t v11 = v3;
    uint64_t v12 = 0;
LABEL_12:
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      uint64_t v15 = a1;
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v14 + 16))(v14, v12, v11);
        a1 = v15;
        uint64_t v4 = *v15;
        unint64_t v3 = v15[1];
      }
      else
      {
        unint64_t v3 = 0;
        uint64_t v4 = 0;
      }
    }
    goto LABEL_13;
  }
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    uint64_t result = a1[3];
    if (result && v3) {
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v4);
    }
    goto LABEL_8;
  }
  if (!v7)
  {
    uint64_t result = IPC::Decoder::decode<WebKit::GestureType>(a1);
    if ((unsigned __int16)result > 0xFFu)
    {
      *(unsigned char *)a2 = result;
      char v10 = 1;
      *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = 1;
      goto LABEL_10;
    }
    goto LABEL_8;
  }
  uint64_t result = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a1);
  if (!v9)
  {
LABEL_8:
    char v10 = 0;
    *(unsigned char *)a2 = 0;
    goto LABEL_10;
  }
  *(void *)a2 = result;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = 0;
  char v10 = 1;
LABEL_10:
  *(unsigned char *)(a2 + 16) = v10;
  return result;
}

unint64_t IPC::ArgumentCoder<std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,void>::encode<IPC::Encoder,std::tuple<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1> const&,WTF::String const&,BOOL>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t a2)
{
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(a1, *(uint64_t **)a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a1, *(uint64_t **)(a2 + 8));
  char v4 = *(unsigned char *)(a2 + 16);
  unint64_t result = IPC::Encoder::grow(a1, 1uLL, 1);
  if (v6)
  {
    *(unsigned char *)unint64_t result = v4;
  }
  else
  {
    unint64_t result = 831;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F5E80;
  uint64_t v3 = a1[4];
  a1[4] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unint64_t v5 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F5E80;
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (WTF::StringImpl *)*((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2) {
      WTF::StringImpl::destroy(v4, a2);
    }
    else {
      *(_DWORD *)v4 -= 2;
    }
  }
  unint64_t v5 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v5 && atomic_fetch_add((atomic_uint *volatile)v5 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v5 + 2);
    (*(void (**)(unsigned int *))(*(void *)v5 + 8))(v5);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetDirectoryHandle,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2
    && *a2
    && (IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>>(a2, (uint64_t)&v5), v6))
  {
    long long v7 = v5;
    uint64_t v3 = &v7;
  }
  else
  {
    LOBYTE(v5) = 7;
    DWORD2(v5) = 1;
    uint64_t v3 = &v5;
  }
  return ((uint64_t (*)(uint64_t, long long *))WebKit::WebFileSystemStorageConnection::getDirectoryHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebKit::FileSystemStorageError>>)(v2, v3);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveEntry,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5EA8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveEntry,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5EA8;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RemoveEntry,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::removeEntry(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,BOOL,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (unsigned int v3 = IPC::Decoder::decode<std::tuple<std::optional<WebKit::FileSystemStorageError>>>(a2), v3 >= 0x10000))
  {
    if ((v3 & 0xFF00) != 0)
    {
      switch((char)v3)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          goto LABEL_17;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v5 = 6;
          break;
        case 2:
          unint64_t v11 = 0;
          char v5 = 5;
          break;
        case 3:
          unint64_t v11 = 0;
          char v5 = 10;
          break;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v5 = 33;
          break;
        case 5:
          unint64_t v11 = 0;
LABEL_17:
          char v5 = 8;
          break;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v5 = 13;
          break;
        default:
          unint64_t v11 = 0;
          char v5 = 24;
          break;
      }
      LOBYTE(v++*(_DWORD *)(this + 8) = v5;
      char v9 = v11;
      LOBYTE(v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    }
    else
    {
      uint64_t v8 = 0;
      char v9 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v6 = *v2;
    uint64_t *v2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v8);
    unint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if ((_BYTE)v10)
    {
      unint64_t result = v9;
      char v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::optional<WebKit::FileSystemStorageError>>>(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = *a1;
  unint64_t v4 = a1[2] - *a1;
  if (v2 <= v4)
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v14 = a1[3];
    if (v14)
    {
      if (v2)
      {
        (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
        uint64_t v13 = *a1;
        uint64_t v12 = a1[1];
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v13 = 0;
      }
    }
    goto LABEL_13;
  }
  char v5 = (unsigned __int8 *)(v3 + v4);
  a1[2] = (uint64_t)(v5 + 1);
  if (!v3)
  {
    uint64_t v12 = v2;
    uint64_t v13 = 0;
LABEL_13:
    unint64_t v2 = 0;
    uint64_t v3 = 0;
    *a1 = 0;
    a1[1] = 0;
    uint64_t v15 = a1[3];
    if (v15)
    {
      if (v12)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 16))(v15, v13, v12);
        uint64_t v3 = *a1;
        unint64_t v2 = a1[1];
      }
      else
      {
        unint64_t v2 = 0;
        uint64_t v3 = 0;
      }
    }
    goto LABEL_14;
  }
  unsigned int v6 = *v5;
  if (v6 < 2)
  {
    if (v6)
    {
      unsigned __int16 v7 = IPC::Decoder::decode<WebKit::GestureType>(a1);
      int v8 = v7;
      unsigned int v9 = (v7 > 0xFFu) << 16;
      if ((v7 & 0xFF00) == 0) {
        int v8 = 0;
      }
      int v10 = 256;
    }
    else
    {
      int v8 = 0;
      int v10 = 0;
      unsigned int v9 = 0x10000;
    }
    goto LABEL_9;
  }
LABEL_14:
  *a1 = 0;
  a1[1] = 0;
  uint64_t v16 = a1[3];
  if (v16 && v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v3);
  }
  unsigned int v9 = 0;
  int v8 = 0;
  int v10 = 0;
LABEL_9:
  if (HIWORD(v9)) {
    return v8 | v9 | v10 | 0x10000;
  }
  uint64_t v17 = *a1;
  uint64_t v18 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  uint64_t result = a1[3];
  if (result)
  {
    if (!v18) {
      return 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 16))(result, v17);
    uint64_t result = 0;
    uint64_t v19 = *a1;
    uint64_t v20 = a1[1];
    uint64_t v21 = a1[3];
    *a1 = 0;
    a1[1] = 0;
    if (v21 && v20)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 16))(v21, v19);
      return 0;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5ED0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5ED0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>>((uint64_t)v5, a2);
    if (v7)
    {
      v8[0] = 0;
      int v9 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, (uint64_t)v5);
      uint64_t result = ((uint64_t (*)(uint64_t, unsigned char *))WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>)(v2, v8);
      if (v9 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9F5EE8[v9])(&v10, v8);
      }
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9F5EE8[v6])(v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = a1 + 8;
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::Resolve,WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(uint64_t a1)
{
  v2[0] = 7;
  int v3 = 1;
  uint64_t result = ((uint64_t (*)(uint64_t, unsigned char *))WebKit::WebFileSystemStorageConnection::resolve(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>)(a1, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F5EE8[v3])(&v4, v2);
  }
  return result;
}

uint64_t IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>>(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  char v5 = *(char **)a2;
  unint64_t v6 = *((void *)a2 + 1);
  unint64_t v7 = v4 - (void)v5;
  if (v6 <= v7)
  {
    unint64_t v20 = 0;
    uint64_t v21 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v22 = *((void *)a2 + 3);
    if (v22)
    {
      if (v6)
      {
        (*(void (**)(uint64_t))(*(void *)v22 + 16))(v22);
        uint64_t v21 = *(char **)a2;
        unint64_t v20 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v20 = 0;
        uint64_t v21 = 0;
      }
    }
    goto LABEL_23;
  }
  int v8 = &v5[v7];
  *((void *)a2 + 2) = v8 + 1;
  if (!v5)
  {
    unint64_t v20 = v6;
    uint64_t v21 = 0;
LABEL_23:
    unint64_t v6 = 0;
    char v5 = 0;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v23 = *((void *)a2 + 3);
    if (v23)
    {
      if (v20)
      {
        (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v23 + 16))(v23, v21, v20);
        char v5 = *(char **)a2;
        unint64_t v6 = *((void *)a2 + 1);
      }
      else
      {
        unint64_t v6 = 0;
        char v5 = 0;
      }
    }
    goto LABEL_24;
  }
  unsigned int v9 = *v8;
  if (v9 >= 2)
  {
LABEL_24:
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    uint64_t v24 = *((void *)a2 + 3);
    if (v24 && v6) {
      (*(void (**)(uint64_t, char *))(*(void *)v24 + 16))(v24, v5);
    }
    goto LABEL_8;
  }
  if (v9)
  {
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a2, v5, (uint64_t)&v28);
    if (v30)
    {
      v25[0] = v28;
      uint64_t v11 = v29;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      v25[1] = v11;
      int v26 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v10);
LABEL_16:
      unsigned __int8 v27 = 1;
      *(unsigned char *)a1 = 0;
      *(_DWORD *)(a1 + 16) = -1;
      uint64_t result = std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>(a1, (uint64_t)v25);
      int v19 = v27;
      *(unsigned char *)(a1 + ++*(_DWORD *)(this + 24) = 1;
      if (!v19) {
        return result;
      }
      if (v26 == -1) {
        return result;
      }
      uint64_t result = ((uint64_t (*)(uint64_t *, void *))off_1EE9F5EE8[v26])(&v28, v25);
      if (*(unsigned char *)(a1 + 24)) {
        return result;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unsigned __int16 v12 = IPC::Decoder::decode<WebKit::GestureType>((uint64_t *)a2);
    if (v12 >= 0x100u)
    {
      LOBYTE(v25[0]) = v12;
      int v26 = 1;
      goto LABEL_16;
    }
  }
LABEL_8:
  uint64_t v13 = *(char **)a2;
  uint64_t v14 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v15 = *((void *)a2 + 3);
  if (v15 && v14) {
    (*(void (**)(uint64_t, char *))(*(void *)v15 + 16))(v15, v13);
  }
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 24) = 0;
LABEL_10:
  uint64_t v16 = *((void *)a2 + 1);
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t result = *((void *)a2 + 3);
  if (result && v16)
  {
    uint64_t v18 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v18();
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5F08;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5F08;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2)
  {
    uint64_t v4 = *(void *)a2;
    if (*(void *)a2)
    {
      unint64_t v5 = *((void *)a2 + 1);
      if (v5 <= *((void *)a2 + 2) - v4)
      {
        unint64_t v17 = 0;
        uint64_t v18 = 0;
        *(void *)a2 = 0;
        *((void *)a2 + 1) = 0;
        uint64_t v19 = *((void *)a2 + 3);
        if (v19)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v4, v5);
            unint64_t v17 = 0;
            uint64_t v21 = *(void *)a2;
            uint64_t v22 = *((void *)a2 + 1);
            uint64_t v23 = *((void *)a2 + 3);
            *(void *)a2 = 0;
            *((void *)a2 + 1) = 0;
            uint64_t v18 = 0;
            if (v23 && v22)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21, v22);
              uint64_t v18 = *(void *)a2;
              unint64_t v17 = *((void *)a2 + 1);
            }
          }
          else
          {
            unint64_t v17 = 0;
            uint64_t v18 = 0;
          }
        }
      }
      else
      {
        unint64_t v6 = (unsigned __int8 *)*((void *)a2 + 2);
        *((void *)a2 + 2) = v6 + 1;
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::Decoder::decode<WTF::String>(a2, (uint64_t)&v30);
            if (v31)
            {
              uint64_t v27 = v30;
              int v28 = 0;
LABEL_17:
              char v29 = 1;
              v24[0] = 0;
              int v25 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v24, (uint64_t)&v27);
              char v26 = 1;
              if (!v29
                || v28 == -1
                || (((void (*)(uint64_t *, uint64_t *))off_1EE9F5F20[v28])(&v30, &v27), v26))
              {
LABEL_20:
                LOBYTE(v27) = 0;
                int v28 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::String,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)&v27, (uint64_t)v24);
                uint64_t result = ((uint64_t (*)(uint64_t, uint64_t *))WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>>)(v2, &v27);
                if (v28 != -1) {
                  uint64_t result = ((uint64_t (*)(uint64_t *, uint64_t *))off_1EE9F5F20[v28])(&v30, &v27);
                }
                if (v26)
                {
                  if (v25 != -1) {
                    return ((uint64_t (*)(uint64_t *, unsigned char *))off_1EE9F5F20[v25])(&v27, v24);
                  }
                }
                return result;
              }
LABEL_14:
              uint64_t v14 = *(void *)a2;
              uint64_t v15 = *((void *)a2 + 1);
              *(void *)a2 = 0;
              *((void *)a2 + 1) = 0;
              uint64_t v16 = *((void *)a2 + 3);
              if (!v16) {
                return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(v2);
              }
              if (!v15) {
                return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(v2);
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
              if (!v26) {
                return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(v2);
              }
              goto LABEL_20;
            }
          }
          else
          {
            unsigned __int16 v10 = IPC::Decoder::decode<WebKit::GestureType>((uint64_t *)a2);
            if (v10 >= 0x100u)
            {
              LOBYTE(v27) = v10;
              int v28 = 1;
              goto LABEL_17;
            }
          }
LABEL_12:
          uint64_t v11 = *(void *)a2;
          uint64_t v12 = *((void *)a2 + 1);
          *(void *)a2 = 0;
          *((void *)a2 + 1) = 0;
          uint64_t v13 = *((void *)a2 + 3);
          if (v13 && v12) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
          }
          v24[0] = 0;
          char v26 = 0;
          goto LABEL_14;
        }
        unint64_t v17 = v5;
        uint64_t v18 = v4;
      }
      *(void *)a2 = 0;
      *((void *)a2 + 1) = 0;
      uint64_t v20 = *((void *)a2 + 3);
      if (v20 && v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
      }
      goto LABEL_12;
    }
  }
  uint64_t v8 = a1 + 8;

  return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(v8);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetFile,WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0>(uint64_t a1)
{
  uint64_t v2 = 0;
  int v3 = 0;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t *))WebKit::WebFileSystemStorageConnection::getFile(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::String> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::String,WebKit::FileSystemStorageError>>)(a1, &v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, uint64_t *))off_1EE9F5F20[v3])(&v4, &v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5F40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5F40;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2)
  {
    uint64_t v4 = *a2;
    if (*a2)
    {
      unint64_t v5 = a2[1];
      if (v5 <= a2[2] - v4)
      {
        uint64_t v17 = 0;
        uint64_t v18 = 0;
        *a2 = 0;
        a2[1] = 0;
        uint64_t v19 = a2[3];
        if (v19)
        {
          if (v5)
          {
            (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v19 + 16))(v19, v4, v5);
            uint64_t v17 = 0;
            uint64_t v24 = *a2;
            uint64_t v25 = a2[1];
            uint64_t v26 = a2[3];
            *a2 = 0;
            a2[1] = 0;
            uint64_t v18 = 0;
            if (v26 && v25)
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24, v25);
              uint64_t v18 = *a2;
              uint64_t v17 = a2[1];
            }
          }
          else
          {
            uint64_t v17 = 0;
            uint64_t v18 = 0;
          }
        }
      }
      else
      {
        unint64_t v6 = (unsigned __int8 *)a2[2];
        a2[2] = (uint64_t)(v6 + 1);
        unsigned int v7 = *v6;
        if (v7 < 2)
        {
          if (v7)
          {
            IPC::ArgumentCoder<WebKit::FileSystemSyncAccessHandleInfo,void>::decode(a2, (uint64_t)&v33);
            if (!v35)
            {
              uint64_t v21 = *a2;
              uint64_t v22 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              uint64_t v23 = a2[3];
              if (!v23) {
                goto LABEL_13;
              }
              if (!v22) {
                goto LABEL_13;
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
              if (!v35) {
                goto LABEL_13;
              }
            }
            v30[0] = v33;
            WebCore::FileHandle::FileHandle();
            v30[4] = v34[3];
            unsigned int v31 = 0;
            char v32 = 1;
            if (v35) {
              MEMORY[0x19972F510](v34);
            }
          }
          else
          {
            unsigned __int16 v10 = IPC::Decoder::decode<WebKit::GestureType>(a2);
            if (v10 <= 0xFFu)
            {
LABEL_13:
              LOBYTE(v30[0]) = 0;
              char v32 = 0;
              uint64_t v11 = *a2;
              uint64_t v12 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              uint64_t v13 = a2[3];
              if (!v13 || !v12)
              {
                v27[0] = 0;
LABEL_15:
                char v29 = 0;
                goto LABEL_16;
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v11);
              v27[0] = 0;
              if (!v32) {
                goto LABEL_15;
              }
LABEL_20:
              unsigned int v28 = -1;
              std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v27, (uint64_t)v30);
              char v29 = 1;
              if (!v32
                || v31 == -1
                || (((void (*)(uint64_t *, void *))*(&off_1EE9F5F58 + v31))(&v33, v30), v29))
              {
LABEL_23:
                LOBYTE(v30[0]) = 0;
                unsigned int v31 = -1;
                std::__variant_detail::__ctor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v30, (uint64_t)v27);
                uint64_t result = ((uint64_t (*)(uint64_t, void *))WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>)(v2, v30);
                if (v31 != -1) {
                  uint64_t result = ((uint64_t (*)(uint64_t *, void *))*(&off_1EE9F5F58 + v31))(&v33, v30);
                }
                if (v29)
                {
                  if (v28 != -1) {
                    return ((uint64_t (*)(void *, unsigned char *))*(&off_1EE9F5F58 + v28))(v30, v27);
                  }
                }
                return result;
              }
LABEL_16:
              uint64_t v14 = *a2;
              uint64_t v15 = a2[1];
              *a2 = 0;
              a2[1] = 0;
              uint64_t v16 = a2[3];
              if (!v16) {
                return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(v2);
              }
              if (!v15) {
                return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(v2);
              }
              (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v14);
              if (!v29) {
                return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(v2);
              }
              goto LABEL_23;
            }
            LOBYTE(v30[0]) = v10;
            unsigned int v31 = 1;
            char v32 = 1;
          }
          v27[0] = 0;
          goto LABEL_20;
        }
        uint64_t v17 = v5;
        uint64_t v18 = v4;
      }
      *a2 = 0;
      a2[1] = 0;
      uint64_t v20 = a2[3];
      if (v20 && v17) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v18);
      }
      goto LABEL_13;
    }
  }
  uint64_t v8 = a1 + 8;

  return IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(v8);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::CreateSyncAccessHandle,WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0>(uint64_t a1)
{
  long long v2 = 0u;
  long long v3 = 0u;
  DWORD1(vWebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = -1;
  uint64_t v4 = 0;
  unsigned int v5 = 0;
  uint64_t result = ((uint64_t (*)(uint64_t, long long *))WebKit::WebFileSystemStorageConnection::createSyncAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WebCore::FileSystemStorageConnection::SyncAccessHandleInfo> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WebKit::FileSystemSyncAccessHandleInfo,WebKit::FileSystemStorageError>>)(a1, &v2);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, long long *))*(&off_1EE9F5F58 + v5))(&v6, &v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CloseSyncAccessHandle,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5F78;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CloseSyncAccessHandle,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5F78;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::CloseSyncAccessHandle,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5FA0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5FA0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = a1 + 8;
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>>((uint64_t)v5, a2);
    if (v7)
    {
      v8[0] = 0;
      int v9 = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>::__generic_construct[abi:sn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>,(std::__variant_detail::_Trait)1>>((uint64_t)v8, (uint64_t)v5);
      uint64_t result = ((uint64_t (*)(uint64_t, unsigned char *))WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>)(v2, v8);
      if (v9 != -1) {
        uint64_t result = ((uint64_t (*)(char *, unsigned char *))off_1EE9F5EE8[v9])(&v10, v8);
      }
      if (v7)
      {
        if (v6 != -1) {
          return ((uint64_t (*)(unsigned char *, unsigned char *))off_1EE9F5EE8[v6])(v8, v5);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v2);
    }
  }
  else
  {
    uint64_t v4 = a1 + 8;
    return IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(v4);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkStorageManager::GetHandleNames,WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0>(uint64_t a1)
{
  v2[0] = 7;
  int v3 = 1;
  uint64_t result = ((uint64_t (*)(uint64_t, unsigned char *))WebKit::WebFileSystemStorageConnection::getHandleNames(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebKit::FileSystemStorageError>>)(a1, v2);
  if (v3 != -1) {
    return ((uint64_t (*)(char *, unsigned char *))off_1EE9F5EE8[v3])(&v4, v2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandle,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F5FC8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3 + 2);
    (*(void (**)(unsigned int *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandle,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F5FC8;
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  char v4 = (unsigned int *)*((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v4 && atomic_fetch_add((atomic_uint *volatile)v4 + 2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v4 + 2);
    (*(void (**)(unsigned int *))(*(void *)v4 + 8))(v4);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::GetHandle,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 8;
  if (!a2 || (uint64_t v4 = *a2) == 0)
  {
LABEL_17:
    unint64_t v40 = 0;
    BOOL v41 = 0;
    int v42 = 0;
    return ((uint64_t (*)(uint64_t, unint64_t *))WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,WebKit::FileSystemStorageError>>)(v2, &v40);
  }
  unint64_t v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v30 = a2[3];
    if (v30)
    {
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v30 + 16))(v30, v4, v5);
        uint64_t v28 = 0;
        uint64_t v37 = *a2;
        uint64_t v38 = a2[1];
        uint64_t v39 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v29 = 0;
        if (v39 && v38)
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v39 + 16))(v39, v37, v38);
          uint64_t v29 = *a2;
          uint64_t v28 = a2[1];
        }
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = 0;
      }
    }
    goto LABEL_26;
  }
  int v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    uint64_t v28 = v5;
    uint64_t v29 = v4;
LABEL_26:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v31 = a2[3];
    if (v31 && v28) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
    }
    goto LABEL_16;
  }
  if (!v7)
  {
    LOWORD(v++*(_DWORD *)(this + 8) = IPC::Decoder::decode<WebKit::GestureType>(a2);
    if ((unsigned __int16)v8 >= 0x100u)
    {
      unint64_t v17 = 0;
      int v15 = 1;
      goto LABEL_13;
    }
    goto LABEL_16;
  }
  uint64_t v8 = IPC::Decoder::decode<WTF::ObjectIdentifierGeneric<WebKit::AuthenticationChallengeIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>(a2);
  unint64_t v9 = a2[1];
  if (!v10)
  {
    uint64_t v18 = a2[1];
LABEL_15:
    uint64_t v19 = *a2;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v20 = a2[3];
    if (v20 && v18) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v20 + 16))(v20, v19, v18);
    }
LABEL_16:
    uint64_t v21 = *a2;
    uint64_t v22 = a2[1];
    *a2 = 0;
    a2[1] = 0;
    uint64_t v23 = a2[3];
    if (v23)
    {
      if (v22)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, v21);
        uint64_t v25 = *a2;
        uint64_t v26 = a2[1];
        uint64_t v27 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        if (v27)
        {
          if (v26) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
          }
        }
      }
    }
    goto LABEL_17;
  }
  uint64_t v11 = *a2;
  unint64_t v12 = a2[2] - *a2;
  if (v9 <= v12)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v34 = a2[3];
    if (v34)
    {
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v34 + 16))(v34);
        uint64_t v33 = *a2;
        uint64_t v32 = a2[1];
      }
      else
      {
        uint64_t v32 = 0;
        uint64_t v33 = 0;
      }
    }
    goto LABEL_30;
  }
  uint64_t v13 = (unsigned __int8 *)(v11 + v12);
  a2[2] = (uint64_t)(v13 + 1);
  if (!v11)
  {
    uint64_t v32 = v9;
    uint64_t v33 = 0;
LABEL_30:
    unint64_t v9 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v35 = a2[3];
    if (v35)
    {
      if (v32)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v35 + 16))(v35, v33, v32);
        uint64_t v11 = *a2;
        unint64_t v9 = a2[1];
      }
      else
      {
        unint64_t v9 = 0;
        uint64_t v11 = 0;
      }
    }
    goto LABEL_31;
  }
  unsigned int v14 = *v13;
  if (v14 >= 2)
  {
LABEL_31:
    uint64_t v18 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v36 = a2[3];
    if (v36)
    {
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v11);
        uint64_t v18 = a2[1];
      }
      else
      {
        uint64_t v18 = 0;
      }
    }
    goto LABEL_15;
  }
  int v15 = 0;
  BOOL v16 = v14 != 0;
  unint64_t v17 = v8 & 0xFFFFFFFFFFFFFF00;
LABEL_13:
  unint64_t v40 = v17 | v8;
  BOOL v41 = v16;
  int v42 = v15;
  return ((uint64_t (*)(uint64_t, unint64_t *))WebKit::WebFileSystemStorageConnection::getHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::FileSystemHandleCloseScope,WTF::RawPtrTraits<WebCore::FileSystemHandleCloseScope>,WTF::DefaultRefDerefTraits<WebCore::FileSystemHandleCloseScope>>> &&)> &&)::$_0::operator()<std::experimental::fundamentals_v3::expected<std::pair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,BOOL>,WebKit::FileSystemStorageError>>)(v2, &v40);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Move,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F5FF0;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Move,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F5FF0;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::Move,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0)#1},void,WebKit::WebFileSystemStorageConnection::move(WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2
    && *a2
    && (unsigned int v3 = IPC::Decoder::decode<std::tuple<std::optional<WebKit::FileSystemStorageError>>>(a2), v3 >= 0x10000))
  {
    if ((v3 & 0xFF00) != 0)
    {
      switch((char)v3)
      {
        case 0:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          goto LABEL_17;
        case 1:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v5 = 6;
          break;
        case 2:
          uint64_t v11 = 0;
          char v5 = 5;
          break;
        case 3:
          uint64_t v11 = 0;
          char v5 = 10;
          break;
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v5 = 33;
          break;
        case 5:
          uint64_t v11 = 0;
LABEL_17:
          char v5 = 8;
          break;
        case 6:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          char v5 = 13;
          break;
        default:
          uint64_t v11 = 0;
          char v5 = 24;
          break;
      }
      LOBYTE(v++*(_DWORD *)(this + 8) = v5;
      unint64_t v9 = v11;
      LOBYTE(v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v6 = *v2;
    uint64_t *v2 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &v8);
    uint64_t result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6);
    if ((_BYTE)v10)
    {
      uint64_t result = v9;
      unint64_t v9 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2) {
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        }
        else {
          *(_DWORD *)result -= 2;
        }
      }
    }
  }
  else
  {
    return IPC::Connection::cancelReply<Messages::WebSWServerToContextConnection::Claim,WebKit::WebSWContextManagerConnection::claim(WTF::ObjectIdentifierGeneric<WebCore::ServiceWorkerIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::CompletionHandler<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0>(v2);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::expand(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1 && (int v2 = *(_DWORD *)(v1 - 4)) != 0) {
    unsigned int v3 = v2 << (6 * *(_DWORD *)(v1 - 12) >= (2 * v2));
  }
  else {
    unsigned int v3 = 8;
  }
  return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(a1, v3);
}

uint64_t WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WebCore::ProcessQualified<WTF::UUID>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = *a1;
  if (*a1)
  {
    int v5 = *(_DWORD *)(v4 - 4);
    int v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    int v5 = 0;
    int v6 = 0;
  }
  uint64_t result = WTF::fastMalloc((WTF *)(48 * a2 + 16));
  if (a2)
  {
    uint64_t v9 = a2;
    uint64_t v10 = (void *)(result + 32);
    do
    {
      *(v10 - 2) = 0;
      v10[1] = 0;
      void v10[2] = 0;
      void *v10 = 0;
      v10 += 6;
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      unint64_t v12 = (long long *)(v4 + 48 * i);
      if ((unint64_t)(*(void *)v12 + 1) >= 2)
      {
        uint64_t v13 = *a1;
        if (*a1) {
          int v14 = *(_DWORD *)(v13 - 8);
        }
        else {
          int v14 = 0;
        }
        uint64_t v15 = (*(void *)v12 + ~(*(void *)v12 << 32)) ^ ((*(void *)v12 + ~(*(void *)v12 << 32)) >> 22);
        unint64_t v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((unint64_t)(v15 + ~(v15 << 13)) >> 8));
        unint64_t v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
        unsigned int v18 = v14 & ((v17 >> 31) ^ v17);
        int v19 = 1;
        do
        {
          uint64_t v20 = v13 + 48 * v18;
          uint64_t v8 = *(void **)v20;
          unsigned int v18 = (v18 + v19++) & v14;
        }
        while (*(void *)v20);
        long long v21 = *v12;
        long long v22 = v12[2];
        *(_OWORD *)(v20 + 16) = v12[1];
        *(_OWORD *)(v20 + ++*(_DWORD *)(this + 32) = v22;
        *(_OWORD *)uint64_t v20 = v21;
      }
    }
  }
  else if (!v4)
  {
    return result;
  }

  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebFileSystemStorageConnection::invalidateAccessHandle(WTF::ObjectIdentifierGeneric<WebCore::FileSystemSyncAccessHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1, WebCore::WorkerGlobalScope *a2)
{
  if ((*(uint64_t (**)(WebCore::WorkerGlobalScope *))(*(void *)a2 + 64))(a2))
  {
    uint64_t result = WebCore::WorkerGlobalScope::fileSystemStorageConnection(a2);
    if (result)
    {
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 128);
      return v4();
    }
  }
  else
  {
    uint64_t result = 96;
    __break(0xC471u);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6040;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6040;
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkStorageManager::RequestNewCapacityForSyncAccessHandle,WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)>>(WTF::CompletionHandler<void ()(std::optional<unsigned long long> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (!a2
    || !*(void *)a2
    || (IPC::Decoder::decode<std::tuple<std::optional<unsigned long long>>>(a2, (uint64_t)v5), !v6))
  {
    v5[0] = 0;
    v5[1] = 0;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 16))(v3, v5);
  return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
}

uint64_t IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = IPC::ArgumentCoder<std::tuple<WebKit::PolicyDecision>,void>::decode<IPC::Decoder>(a1, a2);
  if (!a2[208])
  {
    return IPC::Decoder::markInvalid(a1);
  }
  return result;
}

uint64_t IPC::ArgumentCoder<std::tuple<WebKit::PolicyDecision>,void>::decode<IPC::Decoder>@<X0>(IPC::Decoder *a1@<X0>, unsigned char *a2@<X8>)
{
  IPC::Decoder::decode<WebKit::PolicyDecision>(a1, (uint64_t)v6);
  char v4 = v7;
  if (v7)
  {
    std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]<WebKit::PolicyDecision,void>((uint64_t)a2, v6);
    char v4 = 1;
  }
  else
  {
    *a2 = 0;
  }
  a2[208] = v4;
  return std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
}

void IPC::Decoder::decode<WebKit::PolicyDecision>(IPC::Decoder *a1@<X0>, uint64_t a2@<X8>)
{
  IPC::ArgumentCoder<WebKit::PolicyDecision,void>::decode(a1, a2);
  if (!*(unsigned char *)(a2 + 208))
  {
    IPC::Decoder::markInvalid(a1);
  }
}

uint64_t std::__tuple_leaf<0ul,WebKit::PolicyDecision,false>::__tuple_leaf[abi:sn180100]<WebKit::PolicyDecision,void>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(unsigned char *)(a1 + ++*(_DWORD *)(this + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  uint64_t v6 = a1 + 40;
  *(unsigned char *)(a1 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (*((unsigned char *)a2 + 160))
  {
    std::construct_at[abi:sn180100]<WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData,WebKit::WebsitePoliciesData*>(v6, (uint64_t *)a2 + 5);
    *(unsigned char *)(a1 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
  }
  *(unsigned char *)(a1 + 16++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a1 + 176) = 0;
  if (*((unsigned char *)a2 + 176))
  {
    uint64_t v8 = *((void *)a2 + 21);
    *((void *)a2 + 21) = 0;
    *(void *)(a1 + 16++*(_DWORD *)(this + 8) = v8;
    *(unsigned char *)(a1 + 176) = 1;
  }
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (*((unsigned char *)a2 + 200))
  {
    *(_WORD *)(a1 + 184) = *((_WORD *)a2 + 92);
    uint64_t v9 = *((void *)a2 + 24);
    *((void *)a2 + ++*(_DWORD *)(this + 24) = 0;
    *(void *)(a1 + 192) = v9;
    *(unsigned char *)(a1 + 20IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
  }
  return a1;
}

uint64_t std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(unsigned char *)(a1 + 200))
    {
      long long v4 = *(WTF::StringImpl **)(a1 + 192);
      *(void *)(a1 + 192) = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2) {
          WTF::StringImpl::destroy(v4, a2);
        }
        else {
          *(_DWORD *)v4 -= 2;
        }
      }
    }
    if (*(unsigned char *)(a1 + 176)) {
      WebKit::SandboxExtensionHandle::~SandboxExtensionHandle((const char ***)(a1 + 168));
    }
    if (*(unsigned char *)(a1 + 160)) {
      WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)(a1 + 40), a2);
    }
  }
  return a1;
}

void WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2)
  {
    if (*(void *)a2)
    {
      IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>(a2, v3);
      std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v3, v2);
    }
  }
}

void *WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>::~CallableWrapper(void *a1)
{
  *a1 = &unk_1EE9F6090;
  uint64_t v2 = a1[2];
  a1[2] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>::~CallableWrapper(WTF *this, void *a2)
{
  *(void *)this = &unk_1EE9F6090;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::PolicyDecisionMode<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1)#1},void,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>::call(uint64_t a1, IPC::Decoder *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>(a2, v6);
    if (v6[208])
    {
      WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(v2, (uint64_t)v6);
      std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v4);
    }
    else
    {
      std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v6, v3);
      IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(v2);
    }
  }
  else
  {
    long long v5 = (uint64_t *)(a1 + 8);
    IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(v5);
  }
}

void IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForNavigationActionAsync,WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1>(uint64_t *a1)
{
  __int16 v3 = 0;
  char v4 = 2;
  char v5 = 0;
  char v6 = 0;
  char v7 = 0;
  char v8 = 0;
  v9[0] = 0;
  char v10 = 0;
  LOBYTE(v11) = 0;
  char v12 = 0;
  char v13 = 0;
  char v15 = 0;
  WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(a1, (uint64_t)&v3);
  if (v15)
  {
    uint64_t v2 = v14;
    int v14 = 0;
    if (v2)
    {
      if (*(_DWORD *)v2 == 2) {
        WTF::StringImpl::destroy(v2, v1);
      }
      else {
        *(_DWORD *)v2 -= 2;
      }
    }
  }
  if (v12) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v11);
  }
  if (v10) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v9, v1);
  }
}

void WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::ResourceResponse const&,WebCore::FormState *,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,std::optional<WebCore::HitTestResult> &&,BOOL,WebCore::IsPerformingHTTPFallback,WTF::OptionSet<WebCore::SandboxFlag>,WebCore::PolicyDecisionMode,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_1::operator()(uint64_t *a1, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  char v4 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *a1;
    uint64_t v5 = a1[1];
    uint64_t v7 = *(void *)(v5 + 80);
    uint64_t v8 = *(void *)(v5 + 24);
    if (v8
      && (uint64_t v9 = *(void *)(v8 + 8)) != 0
      && (uint64_t v10 = *(void *)(v9 + 24)) != 0
      && (uint64_t v11 = *(void *)(v10 + 8)) != 0
      && (char v12 = *(void **)(*(void *)(v11 + 48) + 16),
          ((*(uint64_t (**)(void *))(*v12 + 1368))(v12) & 1) == 0))
    {
      uint64_t v13 = *(void *)(v12[2] + 8);
      if (v13) {
        uint64_t v14 = v13 - 16;
      }
      else {
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    char v15 = *(void **)(a1[1] + 24);
    if (v15)
    {
      char v15 = (void *)v15[1];
      if (v15)
      {
        char v15 = (void *)v15[3];
        if (v15)
        {
          char v15 = (void *)v15[1];
          if (v15)
          {
            unint64_t v16 = *(void **)(v15[6] + 16);
            if ((*(uint64_t (**)(void *))(*v16 + 1368))(v16))
            {
              char v15 = 0;
            }
            else
            {
              char v15 = *(void **)(v16[2] + 8);
              if (v15)
              {
                unint64_t v17 = *(void **)(*(void *)(*(void *)(*(void *)(*(void *)(*(void *)(a1[1] + 24) + 8) + 24)
                                                         + 8)
                                             + 48)
                                 + 16);
                (*(void (**)(void *))(*v17 + 1368))(v17);
                uint64_t v18 = *(void *)(v17[2] + 8);
                if (v18) {
                  uint64_t v19 = v18 - 16;
                }
                else {
                  uint64_t v19 = 0;
                }
                char v15 = *(void **)(v19 + 40);
              }
            }
          }
        }
      }
    }
    int v20 = *(unsigned __int8 *)(a2 + 2);
    int v21 = 134219264;
    uint64_t v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = v5;
    __int16 v25 = 2048;
    uint64_t v26 = v7;
    __int16 v27 = 2048;
    uint64_t v28 = v14;
    __int16 v29 = 2048;
    uint64_t v30 = v15;
    __int16 v31 = 1024;
    int v32 = v20;
    _os_log_impl(&dword_1985F2000, v4, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction: Got policyAction %u from async IPC", (uint8_t *)&v21, 0x3Au);
  }
  WebKit::WebFrame::didReceivePolicyDecision((CFTypeRef *)a1[1], a1[2], (__int16 *)a2);
}

void WebKit::WebGeolocationClient::~WebGeolocationClient(WebKit::WebGeolocationClient *this, void *a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2)
  {
    if (atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

{
  unsigned int *v2;
  WebKit::WebGeolocationClient *v3;
  uint64_t vars8;

  uint64_t v2 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v2 && atomic_fetch_add((atomic_uint *volatile)v2, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v2);
    __int16 v3 = this;
    WTF::fastFree((WTF *)v2, a2);
    this = v3;
  }

  WTF::fastFree(this, a2);
}

uint64_t WebKit::WebGeolocationClient::geolocationDestroyed(WebKit::WebGeolocationClient *this)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  v9[0] = "WebGeolocationManager";
  v9[1] = 22;
  uint64_t v2 = (WebKit::WebGeolocationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v9);
  uint64_t v3 = *(void *)(*((void *)this + 1) + 8);
  if (v3) {
    char v4 = (WebKit::WebPage *)(v3 - 16);
  }
  else {
    char v4 = 0;
  }
  WebKit::WebGeolocationManager::unregisterWebPage(v2, v4);
  uint64_t v6 = (unsigned int *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6 && atomic_fetch_add((atomic_uint *volatile)v6, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  return WTF::fastFree(this, v5);
}

WTF::StringImpl *WebKit::WebGeolocationClient::startUpdating(WebKit::WebGeolocationClient *this, const WTF::String *a2, int a3)
{
  {
    uint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  v11[0] = "WebGeolocationManager";
  v11[1] = 22;
  uint64_t v6 = (WTF::StringImpl *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v11);
  uint64_t v7 = *(void *)(*((void *)this + 1) + 8);
  if (v7) {
    uint64_t v8 = (WebKit::WebPage *)(v7 - 16);
  }
  else {
    uint64_t v8 = 0;
  }
  return WebKit::WebGeolocationManager::registerWebPage(v6, v8, a2, a3);
}

WTF::StringImpl *WebKit::WebGeolocationClient::stopUpdating(WebKit::WebGeolocationClient *this)
{
  {
    uint64_t v6 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v6);
  }
  v7[0] = "WebGeolocationManager";
  v7[1] = 22;
  uint64_t v2 = (WebKit::WebGeolocationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v7);
  uint64_t v3 = *(void *)(*((void *)this + 1) + 8);
  if (v3) {
    char v4 = (WebKit::WebPage *)(v3 - 16);
  }
  else {
    char v4 = 0;
  }
  return WebKit::WebGeolocationManager::unregisterWebPage(v2, v4);
}

WTF::StringImpl *WebKit::WebGeolocationClient::setEnableHighAccuracy(WebKit::WebGeolocationClient *this, int a2)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  v9[0] = "WebGeolocationManager";
  v9[1] = 22;
  char v4 = (WebKit::WebGeolocationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v9);
  uint64_t v5 = *(void *)(*((void *)this + 1) + 8);
  if (v5) {
    uint64_t v6 = (WebKit::WebPage *)(v5 - 16);
  }
  else {
    uint64_t v6 = 0;
  }
  return WebKit::WebGeolocationManager::setEnableHighAccuracyForPage(v4, v6, a2);
}

void WebKit::WebGeolocationClient::lastPosition(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[112] = 0;
}

void WebKit::WebGeolocationClient::requestPermission(WebKit::WebGeolocationClient *this, WebCore::Geolocation *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  WebKit::GeolocationPermissionRequestManager::startRequestForGeolocation(*(WebKit::GeolocationPermissionRequestManager **)(v3 + 648), a2);
}

IPC::Encoder *WebKit::WebGeolocationClient::revokeAuthorizationToken(WebKit::WebGeolocationClient *this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  return WebKit::GeolocationPermissionRequestManager::revokeAuthorizationToken(*(WebKit::GeolocationPermissionRequestManager **)(v3 + 648), a2);
}

uint64_t *WebKit::WebGeolocationClient::cancelPermissionRequest(WebKit::WebGeolocationClient *this, WebCore::Geolocation *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 1) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  return WebKit::GeolocationPermissionRequestManager::cancelRequestForGeolocation(*(WebKit::GeolocationPermissionRequestManager **)(v3 + 648), a2);
}

void WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient(WebKit::WebLocalFrameLoaderClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  char v4 = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4)
  {
    if (v4[2] == 1) {
      (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
    }
    else {
      --v4[2];
    }
  }
  WebKit::WebFrameLoaderClient::~WebFrameLoaderClient((WebKit::WebLocalFrameLoaderClient *)((char *)this + 8));
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient(this, a2);

  WTF::fastFree(v2, v3);
}

void non-virtual thunk to'WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient(WebKit::WebLocalFrameLoaderClient *this, void *a2)
{
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebLocalFrameLoaderClient::~WebLocalFrameLoaderClient((WebKit::WebLocalFrameLoaderClient *)((char *)this - 8), a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebLocalFrameLoaderClient::webPageProxyID(WebKit::WebFrame **this)
{
  uint64_t result = WebKit::WebFrame::page(this[2]);
  if (result) {
    return *(void *)(WebKit::WebFrame::page(this[2]) + 2120);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::didLoadFromRegistrableDomain(uint64_t a1, WTF **a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v7 + 1368))(v7) & 1) == 0)
          {
            uint64_t v8 = *(void *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              WebKit::WebPage::didLoadFromRegistrableDomain(v8 - 16, a2);
              uint64_t v9 = *(const void **)(v8 - 8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::loadedSubresourceDomains(WebKit::WebLocalFrameLoaderClient *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(*((void *)this + 2) + 24);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (uint64_t v5 = *(void *)(v4 + 24)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (uint64_t v7 = *(void **)(*(void *)(v6 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v7 + 1368))(v7) & 1) == 0)
    && (uint64_t v8 = *(void *)(v7[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v8 - 8));
    *a2 = 0;
    a2[1] = 0;
    WTF::Mapper<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::{lambda(WebCore::RegistrableDomain&&)#1},WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,void>::map(a2, (uint64_t *)(v8 + 2208), (const WTF::StringImpl *)&v9);
    CFRelease(*(CFTypeRef *)(v8 - 8));
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

BOOL WebKit::WebLocalFrameLoaderClient::hasWebView(WebKit::WebFrame **this)
{
  return WebKit::WebFrame::page(this[2]) != 0;
}

void WebKit::WebLocalFrameLoaderClient::detachedFromParent2(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (WebKit::WebProcess *)CFRetain(*(CFTypeRef *)(v2 + 8));
    if (*((unsigned char *)this + 80))
    {
      uint64_t v6 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(v4);
      uint64_t v7 = WebKit::WebProcess::ensureNetworkProcessConnection(v6);
      if (!*((unsigned char *)this + 80))
      {
        __break(1u);
        return;
      }
      uint64_t v8 = *(void *)(v7 + 24);
      v9[0] = (uint64_t *)(this + 7);
      v9[1] = (uint64_t *)(this + 9);
      IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveStorageAccessForFrame>(v8, v9);
      if (*((unsigned char *)this + 80)) {
        *((unsigned char *)this + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      }
    }
    v9[0] = 0;
    (*(void (**)(void, uint64_t, WebKit::WebFrame *, uint64_t **))(**(void **)(v3 + 360) + 112))(*(void *)(v3 + 360), v3, this[2], v9);
    uint64_t v5 = v9[0];
    v9[0] = 0;
    if (v5) {
      CFRelease((CFTypeRef)v5[1]);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveStorageAccessForFrame>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 272;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v4 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  char v9 = v4;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v4, *a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, a2[1]);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v9, 0, 0);
  uint64_t result = v9;
  char v9 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::documentLoaderDetached(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v16 = a2;
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          uint64_t v8 = *(void **)(*(void *)(v6 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              if ((a3 & 1) == 0)
              {
                uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 16) + 56))(v9 + 16);
                uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                *(_WORD *)uint64_t v11 = 1910;
                *((void *)v11 + 1) = v10;
                *((void *)v11 + 66) = (char *)v11 + 16;
                *((void *)v11 + 67) = 512;
                *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
                *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
                *((void *)v11 + 69) = 0;
                IPC::Encoder::encodeHeader(v11);
                unint64_t v17 = v11;
                IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v11, &v16);
                (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v9 + 16) + 32))(v9 + 16, &v17, 0);
                uint64_t v13 = v17;
                unint64_t v17 = 0;
                if (v13)
                {
                  IPC::Encoder::~Encoder(v13, v12);
                  WTF::fastFree(v14, v15);
                }
              }
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::assignIdentifierToInitialRequest(uint64_t a1, uint64_t a2, WebCore::DocumentLoader *a3, WebCore::ResourceRequestBase *a4)
{
  uint64_t v8 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  if (!a3)
  {
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = WebCore::DocumentLoader::frameLoader(a3);
  uint64_t v11 = (WebCore::FrameLoader *)v10;
  if (!v10)
  {
    LODWORD(aWebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 0;
LABEL_16:
    BOOL v13 = 0;
    char v12 = 1;
    goto LABEL_5;
  }
  char v12 = 0;
  ++*(_DWORD *)v10;
  BOOL v13 = *(void *)(v10 + 96) == (void)a3;
  LODWORD(aWebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = 1;
LABEL_5:
  (*(void (**)(void, uint64_t, void, uint64_t, WebCore::ResourceRequestBase *, BOOL))(**(void **)(v9 + 368) + 16))(*(void *)(v9 + 368), v9, *(void *)(a1 + 16), a2, a4, v13);
  if (a3) {
    uint64_t v14 = WebCore::FrameLoader::frame(v11);
  }
  else {
    uint64_t v14 = 0;
  }
  WebKit::WebPage::addResourceRequest(v9, a2, a4, v14);
  if ((v12 & 1) == 0)
  {
    if (!*(_DWORD *)v11)
    {
      __break(0xC471u);
      JUMPOUT(0x1991D1698);
    }
    --*(_DWORD *)v11;
  }
  char v15 = *(const void **)(v9 + 8);

  CFRelease(v15);
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillSendRequest(uint64_t a1, uint64_t a2, uint64_t a3, WebCore::ResourceRequestBase *a4, uint64_t a5)
{
  uint64_t v9 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v9)
  {
    uint64_t v10 = v9;
    CFRetain(*(CFTypeRef *)(v9 + 8));
    char v11 = *((unsigned char *)a4 + 147);
    (*(void (**)(void, uint64_t, void, uint64_t, WebCore::ResourceRequestBase *, uint64_t))(**(void **)(v10 + 368) + 24))(*(void *)(v10 + 368), v10, *(void *)(a1 + 16), a3, a4, a5);
    if ((WebCore::ResourceRequestBase::isNull(a4) & 1) == 0)
    {
      *((unsigned char *)a4 + 147) = v11;
      WebCore::ResourceRequestBase::setIsAppInitiated(a4);
    }
    char v12 = *(const void **)(v10 + 8);
    CFRelease(v12);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldUseCredentialStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v5) {
    return 1;
  }
  uint64_t v6 = v5;
  CFRetain(*(CFTypeRef *)(v5 + 8));
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(v6 + 368) + 72))(*(void *)(v6 + 368), v6, *(void *)(a1 + 16), a3);
  CFRelease(*(CFTypeRef *)(v6 + 8));
  return v7;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canAuthenticateAgainstProtectionSpace()
{
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v7)
  {
    uint64_t v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    (*(void (**)(void, uint64_t, void, uint64_t, uint64_t))(**(void **)(v8 + 368) + 32))(*(void *)(v8 + 368), v8, *(void *)(a1 + 16), a3, a4);
    uint64_t v9 = *(const void **)(v8 + 8);
    CFRelease(v9);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveContentLength(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v7)
  {
    uint64_t v8 = v7;
    CFRetain(*(CFTypeRef *)(v7 + 8));
    (*(void (**)(void, uint64_t, void, uint64_t, void))(**(void **)(v8 + 368) + 40))(*(void *)(v8 + 368), v8, *(void *)(a1 + 16), a3, a4);
    uint64_t v9 = *(const void **)(v8 + 8);
    CFRelease(v9);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishDataDetection(WebKit::WebFrame **this, NSArray *a2)
{
  uint64_t v3 = WebKit::WebFrame::page(this[2]);
  if (v3)
  {
    uint64_t v4 = (WebKit::WebPage *)v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    WebKit::WebPage::setDataDetectionResults(v4, a2);
    uint64_t v5 = (const void *)*((void *)v4 + 1);
    CFRelease(v5);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishLoading(uint64_t a1, WebCore::DocumentLoader *a2, uint64_t a3)
{
  uint64_t v6 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(v7 + 368) + 48))(*(void *)(v7 + 368), v7, *(void *)(a1 + 16), a3);
    if (a2 && WebCore::DocumentLoader::frameLoader(a2))
    {
      uint64_t v8 = (WebCore::FrameLoader *)WebCore::DocumentLoader::frameLoader(a2);
      uint64_t v9 = WebCore::FrameLoader::frame(v8);
    }
    else
    {
      uint64_t v9 = 0;
    }
    WebKit::WebPage::removeResourceRequest((void *)v7, a3, v9);
    uint64_t v10 = *(const void **)(v7 + 8);
    CFRelease(v10);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFailLoading(uint64_t a1, WebCore::DocumentLoader *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    (*(void (**)(void, uint64_t, void, uint64_t, uint64_t))(**(void **)(v9 + 368) + 56))(*(void *)(v9 + 368), v9, *(void *)(a1 + 16), a3, a4);
    if (a2 && WebCore::DocumentLoader::frameLoader(a2))
    {
      uint64_t v10 = (WebCore::FrameLoader *)WebCore::DocumentLoader::frameLoader(a2);
      uint64_t v11 = WebCore::FrameLoader::frame(v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    WebKit::WebPage::removeResourceRequest((void *)v9, a3, v11);
    char v12 = *(const void **)(v9 + 8);
    CFRelease(v12);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::dispatchDidLoadResourceFromMemoryCache()
{
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidDispatchOnloadEvents(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    (*(void (**)(void, uint64_t, WebKit::WebFrame *))(**(void **)(v3 + 360) + 192))(*(void *)(v3 + 360), v3, this[2]);
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveServerRedirectForProvisionalLoad(WebKit::WebFrame **this)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = *(void *)(*(void *)(*((void *)this[11] + 1) + 280) + 96);
    if (!v4)
    {
      char v15 = qword_1EB358050;
      if (os_log_type_enabled((os_log_t)qword_1EB358050, OS_LOG_TYPE_FAULT))
      {
        uint64_t v16 = this[2];
        uint64_t v17 = *((void *)v16 + 10);
        uint64_t v18 = WebKit::WebFrame::page(v16);
        if (WebKit::WebFrame::page(this[2])) {
          uint64_t v19 = *(void *)(WebKit::WebFrame::page(this[2]) + 40);
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(void *)(*((void *)this[11] + 1) + 280);
        int v21 = *(unsigned __int8 *)(v20 + 80);
        LODWORD(v2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = *(_DWORD *)(v20 + 64);
        *(_DWORD *)buf = 134219520;
        *(void *)&uint8_t buf[4] = this;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&buf[14] = v16;
        __int16 v29 = 2048;
        uint64_t v30 = v17;
        __int16 v31 = 2048;
        uint64_t v32 = v18;
        __int16 v33 = 2048;
        uint64_t v34 = v19;
        __int16 v35 = 1024;
        int v36 = v21;
        __int16 v37 = 1024;
        int v38 = v20;
        _os_log_fault_impl(&dword_1985F2000, v15, OS_LOG_TYPE_FAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidReceiveServerRedirectForProvisionalLoad: Called with no provisional DocumentLoader (frameState=%hhu, stateForDebugging=%i)", buf, 0x40u);
      }
      goto LABEL_16;
    }
    ++*(_DWORD *)(v4 + 24);
    uint64_t v26 = 0;
    (*(void (**)(void, uint64_t, WebKit::WebFrame *, void **))(**(void **)(v3 + 360) + 40))(*(void *)(v3 + 360), v3, this[2], &v26);
    uint64_t v5 = v3 + 32;
    *(_OWORD *)buf = *((_OWORD *)this[2] + 5);
    v25[0] = *(void *)(v4 + 2528);
    v25[1] = v25[0] != 0;
    {
      uint64_t v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v22);
    }
    __int16 v27 = (IPC::Encoder *)&unk_1EE9E6F68;
    WebKit::UserData::transform(v26, (uint64_t)&v27, &v23);
    uint64_t v6 = v23;
    if (v23) {
      CFRetain(*(CFTypeRef *)(v23 + 8));
    }
    uint64_t v24 = v6;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v3 + 32);
    uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v8 = 1942;
    *((void *)v8 + 1) = v7;
    *((void *)v8 + 66) = (char *)v8 + 16;
    *((void *)v8 + 67) = 512;
    *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v8 + 69) = 0;
    IPC::Encoder::encodeHeader(v8);
    __int16 v27 = v8;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, (uint64_t *)buf);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v8, (uint64_t)v25);
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v8, (WebCore::ResourceRequest *)(v4 + 872));
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(v8, &v24);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v3 + 32, &v27, 0);
    uint64_t v10 = v27;
    __int16 v27 = 0;
    if (v10)
    {
      IPC::Encoder::~Encoder(v10, v9);
      WTF::fastFree(v13, v14);
      if (!v6) {
        goto LABEL_9;
      }
    }
    else if (!v6)
    {
LABEL_9:
      uint64_t v11 = v23;
      uint64_t v23 = 0;
      if (v11) {
        CFRelease(*(CFTypeRef *)(v11 + 8));
      }
      char v12 = (CFTypeRef *)v26;
      uint64_t v26 = 0;
      if (v12) {
        CFRelease(v12[1]);
      }
      if (*(_DWORD *)(v4 + 24) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
      }
      else {
        --*(_DWORD *)(v4 + 24);
      }
LABEL_16:
      CFRelease(*(CFTypeRef *)(v3 + 8));
      return;
    }
    CFRelease(*(CFTypeRef *)(v6 + 8));
    goto LABEL_9;
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidChangeProvisionalURL(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = *(void *)(*(void *)(*((void *)this[11] + 1) + 280) + 96);
    ++*(_DWORD *)(v4 + 24);
    *(_OWORD *)BOOL v13 = *((_OWORD *)this[2] + 5);
    v12[0] = *(void *)(v4 + 2528);
    v12[1] = v12[0] != 0;
    uint64_t v5 = (uint64_t *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 872));
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32) + 56))(v3 + 32);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 1901;
    *((void *)v7 + 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v14 = v7;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v7, v13);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v7, (uint64_t)v12);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, v5);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 32) + 32))(v3 + 32, &v14, 0);
    uint64_t v9 = v14;
    uint64_t v14 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    if (*(_DWORD *)(v4 + 24) == 1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      --*(_DWORD *)(v4 + 24);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidCancelClientRedirect(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    (*(void (**)(void, uint64_t, WebKit::WebFrame *))(**(void **)(v3 + 360) + 176))(*(void *)(v3 + 360), v3, this[2]);
    *(_OWORD *)uint64_t v10 = *((_OWORD *)this[2] + 5);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32) + 56))(v3 + 32);
    uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v5 = 1894;
    *((void *)v5 + 1) = v4;
    *((void *)v5 + 66) = (char *)v5 + 16;
    *((void *)v5 + 67) = 512;
    *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v5 + 69) = 0;
    IPC::Encoder::encodeHeader(v5);
    uint64_t v11 = v5;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v5, v10);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 32) + 32))(v3 + 32, &v11, 0);
    uint64_t v7 = v11;
    uint64_t v11 = 0;
    if (v7)
    {
      IPC::Encoder::~Encoder(v7, v6);
      WTF::fastFree(v8, v9);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillPerformClientRedirect(uint64_t a1, uint64_t *a2, char a3, double a4, double a5)
{
  uint64_t v10 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v10)
  {
    uint64_t v11 = v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    (*(void (**)(void, uint64_t, void, uint64_t *, double, double))(**(void **)(v11 + 360) + 184))(*(void *)(v11 + 360), v11, *(void *)(a1 + 16), a2, a4, a5);
    *(_OWORD *)uint64_t v18 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(v11 + 32) + 56))(v11 + 32);
    BOOL v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)BOOL v13 = 2123;
    *((void *)v13 + 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v13 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v19 = v13;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v13, v18);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v13, a2);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v13, a4);
    IPC::ArgumentCoder<WebKit::UseDownloadPlaceholder,void>::encode<IPC::Encoder>(v13, a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v11 + 32) + 32))(v11 + 32, &v19, 0);
    char v15 = v19;
    uint64_t v19 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v16, v17);
    }
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidChangeLocationWithinPage(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = (WebKit::WebPage *)v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    WebKit::WebPage::didSameDocumentNavigationForFrame(v3, this[2]);
    uint64_t v4 = (const void *)*((void *)v3 + 1);
    CFRelease(v4);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillChangeDocument(WebKit::WebLocalFrameLoaderClient *this, const WTF::URL *a2, const WTF::URL *a3)
{
  uint64_t v6 = (WebKit::WebFrame *)*((void *)this + 2);
  uint64_t v7 = *((void *)v6 + 3);
  if (!v7 || (uint64_t v8 = *(void *)(v7 + 8)) == 0 || *(void *)(*(void *)(v8 + 128) + 8) != v8)
  {
    uint64_t v9 = WebKit::WebFrame::page(v6);
    if (v9)
    {
      uint64_t v10 = v9;
      CFRetain(*(CFTypeRef *)(v9 + 8));
      if (*((unsigned char *)this + 80))
      {
        BOOL v13 = (WebKit::WebProcess *)WebCore::areRegistrableDomainsEqual(a2, a3, v11);
        if ((v13 & 1) == 0)
        {
          uint64_t v14 = (WebKit::WebProcess *)WebKit::WebProcess::singleton(v13);
          uint64_t v15 = WebKit::WebProcess::ensureNetworkProcessConnection(v14);
          if (!*((unsigned char *)this + 80))
          {
            __break(1u);
            return;
          }
          uint64_t v16 = *(void *)(v15 + 24);
          v17[0] = (uint64_t *)((char *)this + 56);
          v17[1] = (uint64_t *)((char *)this + 72);
          IPC::Connection::send<Messages::NetworkConnectionToWebProcess::RemoveStorageAccessForFrame>(v16, v17);
          if (*((unsigned char *)this + 80)) {
            *((unsigned char *)this + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          }
        }
      }
      uint64_t v12 = *(const void **)(v10 + 8);
      CFRelease(v12);
    }
  }
}

uint64_t WebCore::areRegistrableDomainsEqual(WebCore *this, const WTF::URL *a2, const WTF::URL *a3)
{
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v10, this);
  uint64_t v4 = WTF::URL::host(a2);
  uint64_t v7 = WebCore::RegistrableDomain::matches(&v10, v4, v5);
  uint64_t v8 = v10;
  uint64_t v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v6);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  return v7;
}

void WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI(uint64_t a1, char a2)
{
  *(void *)&v75[216] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v4)
  {
    uint64_t v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    __int16 v35 = 0;
    uint64_t v6 = (WebCore::UserGestureIndicator *)(*(uint64_t (**)(void, uint64_t, void, uint64_t, void **))(**(void **)(v5 + 360) + 96))(*(void *)(v5 + 360), v5, *(void *)(a1 + 16), 1, &v35);
    int v38 = 16646149;
    {
      __int16 v29 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v29);
    }
    uint64_t v7 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v8 = *(void *)(v5 + 40);
    WebCore::UserGestureIndicator::currentUserGesture((uint64_t *)&v34, v6);
    WebKit::WebProcess::userGestureTokenIdentifier(v7, v8, 1, (uint64_t *)&v34, &v39);
    uint64_t v10 = (WebCore::UserGestureIndicator *)WebCore::UserGestureIndicator::currentUserGesture((uint64_t *)&v36, v9);
    uint64_t v11 = v36;
    if (v36)
    {
      WebCore::UserGestureIndicator::currentUserGesture(&v33, v10);
      long long v28 = *(_OWORD *)(v33 + 112);
      long long v40 = *(_OWORD *)(v33 + 96);
      long long v41 = v28;
    }
    else
    {
      LOBYTE(v4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      LOBYTE(v41) = 0;
    }
    __int16 v42 = 1;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v45);
    uint64_t v47 = 0;
    char v48 = 0;
    char v46 = v46 & 0xF1 | 4;
    int v49 = 256;
    uint64_t v12 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v13 = *(void *)(v12 + 160);
    if (v13) {
      LOBYTE(v1WebKit::WebSharedWorkerObjectConnection::~WebSharedWorkerObjectConnection(this - 3) = *(void *)(v13 + 8) != 0;
    }
    char v50 = v13;
    char v51 = *(unsigned char *)(*(void *)(v12 + 280) + 394);
    char v57 = 0;
    char v58 = 0;
    char v59 = 0;
    __int16 v60 = 0;
    uint64_t v61 = 0;
    __int16 v62 = 0;
    char v63 = 0;
    char v64 = 0;
    char v65 = 0;
    char v66 = 0;
    __int16 v67 = 0;
    char v68 = 0;
    char v69 = 0;
    char v70 = 0;
    char v71 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    char v56 = 0;
    long long v52 = 0u;
    long long v53 = 0u;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v72);
    v72[296] = 0;
    v72[304] = 0;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v73);
    v73[296] = 0;
    v73[304] = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v74);
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v75);
    if (v11)
    {
      uint64_t v14 = (_DWORD *)v33;
      uint64_t v33 = 0;
      if (v14) {
        WTF::RefCounted<WebCore::UserGestureToken>::deref(v14);
      }
    }
    uint64_t v15 = v36;
    int v36 = 0;
    if (v15) {
      WTF::RefCounted<WebCore::UserGestureToken>::deref(v15);
    }
    uint64_t v16 = v34;
    uint64_t v34 = 0;
    if (v16) {
      WTF::RefCounted<WebCore::UserGestureToken>::deref(v16);
    }
    uint64_t v17 = v5 + 32;
    uint64_t v18 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 296) + 768);
    {
      uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v30);
    }
    int v36 = (IPC::Encoder *)&unk_1EE9E6F68;
    WebKit::UserData::transform(v35, (uint64_t)&v36, &v31);
    uint64_t v19 = v31;
    if (v31) {
      CFRetain(*(CFTypeRef *)(v31 + 8));
    }
    uint64_t v32 = v19;
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 56))(v5 + 32);
    int v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)int v21 = 1949;
    *((void *)v21 + 1) = v20;
    *((void *)v21 + 66) = (char *)v21 + 16;
    *((void *)v21 + 67) = 512;
    *((void *)v21 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v21 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v21 + 69) = 0;
    IPC::Encoder::encodeHeader(v21);
    int v36 = v21;
    char v37 = a2;
    IPC::Encoder::operator<<<BOOL>(v21, &v37);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, v18);
    IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v21, (uint64_t)&v38);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(v21, &v32);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v17 + 32))(v5 + 32, &v36, 0);
    uint64_t v23 = v36;
    int v36 = 0;
    if (v23)
    {
      IPC::Encoder::~Encoder(v23, v22);
      WTF::fastFree(v26, v27);
    }
    if (v19) {
      CFRelease(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v24 = v31;
    uint64_t v31 = 0;
    if (v24) {
      CFRelease(*(CFTypeRef *)(v24 + 8));
    }
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)&v38);
    __int16 v25 = (CFTypeRef *)v35;
    __int16 v35 = 0;
    if (v25) {
      CFRelease(v25[1]);
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidPushStateWithinPage(WebKit::WebLocalFrameLoaderClient *this)
{
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReplaceStateWithinPage(WebKit::WebLocalFrameLoaderClient *this)
{
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidPopStateWithinPage(WebKit::WebLocalFrameLoaderClient *this)
{
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidExplicitOpen(WebKit::WebFrame **this, const WTF::URL *a2, const WTF::String *a3)
{
  uint64_t v6 = WebKit::WebFrame::page(this[2]);
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    *(_OWORD *)uint64_t v14 = *((_OWORD *)this[2] + 5);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 32) + 56))(v7 + 32);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1914;
    *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v15 = v9;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v9, v14);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)a3);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v7 + 32) + 32))(v7 + 32, &v15, 0);
    uint64_t v11 = v15;
    uint64_t v15 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v12, v13);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidStartProvisionalLoad(WebKit::WebFrame **this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = *(void *)(*((void *)this[11] + 1) + 296);
    if (v4)
    {
      uint64_t v5 = *(WebCore::FullscreenManager **)(v4 + 2032);
      if (!v5) {
        uint64_t v5 = (WebCore::FullscreenManager *)WebCore::Document::ensureFullscreenManager(*(WebCore::Document **)(*((void *)this[11] + 1) + 296));
      }
      if (WebCore::FullscreenManager::fullscreenElement(v5))
      {
        __int16 v27 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v3);
        long long v28 = WebKit::WebPage::fullScreenManager((WebKit::WebPage *)v3);
        __int16 v29 = (WebCore::Element *)WebKit::WebFullScreenManager::element(v28);
        WebKit::WebFullScreenManager::exitFullScreenForElement(v27, v29);
      }
    }
    WebKit::FindController::hideFindUI(*(WebKit::FindController **)(v3 + 448));
    WebKit::WebPage::SandboxExtensionTracker::didStartProvisionalLoad((const char ***)(v3 + 688), this[2]);
    __int16 v35 = 0;
    (*(void (**)(void, uint64_t, WebKit::WebFrame *, void **))(**(void **)(v3 + 360) + 32))(*(void *)(v3 + 360), v3, this[2], &v35);
    uint64_t v6 = *(void *)(*(void *)(*((void *)this[11] + 1) + 280) + 96);
    if (v6)
    {
      int v7 = *(_DWORD *)(v6 + 24);
      *(_DWORD *)(v6 + ++*(_DWORD *)(this + 24) = v7 + 1;
      if (!*(unsigned char *)(v6 + 3544))
      {
        uint64_t v8 = (const WTF::URL *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v6 + 872));
        uint64_t v9 = *(void *)(v3 + 632);
        if (v9)
        {
          uint64_t v10 = (unsigned int **)(v9 + 16);
          ++*(_DWORD *)(v9 + 16);
          WebKit::WebExtensionControllerProxy::didStartProvisionalLoadForFrame((void *)v9, (WebKit::WebPage *)v3, this[2], v8);
          WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v10);
        }
        uint64_t v11 = v3 + 32;
        uint64_t v12 = this[2];
        long long v34 = *((_OWORD *)v12 + 5);
        WebKit::WebFrame::info(v12, (uint64_t)v37);
        v33[0] = *(void *)(v6 + 2528);
        v33[1] = v33[0] != 0;
        {
          uint64_t v30 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v30);
        }
        int v36 = (IPC::Encoder *)&unk_1EE9E6F68;
        uint64_t v13 = (WTF::WallTime *)WebKit::UserData::transform(v35, (uint64_t)&v36, &v31);
        uint64_t v14 = v31;
        if (v31) {
          uint64_t v13 = (WTF::WallTime *)CFRetain(*(CFTypeRef *)(v31 + 8));
        }
        uint64_t v32 = v14;
        WTF::WallTime::now(v13);
        double v16 = v15;
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v3 + 32);
        uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v18 = 1952;
        *((void *)v18 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v17;
        *((void *)v18 + 66) = (char *)v18 + 16;
        *((void *)v18 + 67) = 512;
        *((void *)v18 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v18 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v18 + 69) = 0;
        IPC::Encoder::encodeHeader(v18);
        int v36 = v18;
        IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v18, (uint64_t *)&v34);
        IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v18, v37);
        IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v18, (WebCore::ResourceRequest *)(v6 + 872));
        IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v18, (uint64_t)v33);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)v8);
        IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v18, (uint64_t *)(v6 + 368));
        IPC::ArgumentCoder<WebKit::UserData,void>::encode(v18, &v32);
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v18, v16);
        (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v11 + 32))(v3 + 32, &v36, 0);
        uint64_t v20 = v36;
        int v36 = 0;
        if (v20)
        {
          IPC::Encoder::~Encoder(v20, v19);
          WTF::fastFree(v25, v26);
        }
        if (v14) {
          CFRelease(*(CFTypeRef *)(v14 + 8));
        }
        uint64_t v21 = v31;
        uint64_t v31 = 0;
        if (v21) {
          CFRelease(*(CFTypeRef *)(v21 + 8));
        }
        uint64_t v22 = v42;
        __int16 v42 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2) {
            WTF::StringImpl::destroy(v22, (WTF::StringImpl *)v19);
          }
          else {
            *(_DWORD *)v22 -= 2;
          }
        }
        if (v41 != -1) {
          ((void (*)(void *, uint64_t *))off_1EE9F6B08[v41])(v33, &v40);
        }
        int v41 = -1;
        CFTypeRef v23 = cf;
        CFTypeRef cf = 0;
        if (v23) {
          CFRelease(v23);
        }
        WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v38);
        int v7 = *(_DWORD *)(v6 + 24) - 1;
      }
      if (v7) {
        *(_DWORD *)(v6 + ++*(_DWORD *)(this + 24) = v7;
      }
      else {
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
    }
    uint64_t v24 = (CFTypeRef *)v35;
    __int16 v35 = 0;
    if (v24) {
      CFRelease(v24[1]);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReceiveTitle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v4)
  {
    uint64_t v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    WTF::String::left((WTF::StringImpl **)a2, 0x3E8u, &v22);
    char v23 = *(unsigned char *)(a2 + 8);
    uint64_t v21 = 0;
    (*(void (**)(void, uint64_t, WTF::StringImpl **, void, void **))(**(void **)(v5 + 360) + 104))(*(void *)(v5 + 360), v5, &v22, *(void *)(a1 + 16), &v21);
    uint64_t v6 = v5 + 32;
    long long v20 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
    {
      uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v17);
    }
    uint64_t v24 = (IPC::Encoder *)&unk_1EE9E6F68;
    WebKit::UserData::transform(v21, (uint64_t)&v24, &v18);
    uint64_t v7 = v18;
    if (v18) {
      CFRetain(*(CFTypeRef *)(v18 + 8));
    }
    uint64_t v19 = v7;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v5 + 32);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1943;
    *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    uint64_t v24 = v9;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v9, (uint64_t *)&v20);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, (uint64_t *)&v22);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(v9, &v19);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v6 + 32))(v5 + 32, &v24, 0);
    uint64_t v11 = v24;
    uint64_t v24 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v15, v16);
    }
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
    uint64_t v12 = v18;
    uint64_t v18 = 0;
    if (v12) {
      CFRelease(*(CFTypeRef *)(v12 + 8));
    }
    uint64_t v13 = (CFTypeRef *)v21;
    uint64_t v21 = 0;
    if (v13) {
      CFRelease(v13[1]);
    }
    uint64_t v14 = v22;
    uint64_t v22 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidCommitLoad(uint64_t a1, __int16 a2, __int16 a3, __int16 a4)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v8) {
    return;
  }
  uint64_t v9 = v8;
  CFRetain(*(CFTypeRef *)(v8 + 8));
  uint64_t v10 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 88);
  ++*(_DWORD *)(v10 + 24);
  char v56 = 0;
  (*(void (**)(void, uint64_t, void, void **))(**(void **)(v9 + 360) + 56))(*(void *)(v9 + 360), v9, *(void *)(a1 + 16), &v56);
  WebKit::WebPage::SandboxExtensionTracker::didCommitProvisionalLoad((const char ***)(v9 + 688), *(WebKit::WebFrame **)(a1 + 16));
  if ((*(unsigned char *)(v10 + 1410) & 0x10) != 0)
  {
    BOOL v42 = 1;
  }
  else
  {
    if ((a3 & 0xFF00) == 0)
    {
      BOOL v49 = 0;
      goto LABEL_5;
    }
    BOOL v42 = a3 != 0;
  }
  BOOL v49 = v42;
LABEL_5:
  if ((*(unsigned char *)(v10 + 1410) & 0x20) != 0)
  {
    BOOL v43 = 1;
  }
  else
  {
    if ((a4 & 0xFF00) == 0)
    {
      BOOL v48 = 0;
      goto LABEL_8;
    }
    BOOL v43 = a4 != 0;
  }
  BOOL v48 = v43;
LABEL_8:
  if (*(unsigned char *)(v10 + 1400) && (__n128 v39 = *(const void **)(v10 + 1392)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v10 + 1392));
    CFTypeRef v55 = v39;
    CFRetain(v39);
    CFRelease(v39);
  }
  else
  {
    CFTypeRef v55 = 0;
  }
  if ((a2 & 0xFF00) != 0) {
    char v45 = a2 != 0;
  }
  else {
    char v45 = WebCore::CertificateInfo::containsNonRootSHA1SignedCertificate((WebCore::CertificateInfo *)&v55);
  }
  uint64_t v11 = *(void *)(v9 + 632);
  if (v11)
  {
    ++*(_DWORD *)(v11 + 16);
    uint64_t v12 = *(WebKit::WebFrame **)(a1 + 16);
    WebKit::WebFrame::url(v12, (uint64_t)&v59);
    WebKit::WebExtensionControllerProxy::didCommitLoadForFrame((void *)v11, (WebKit::WebPage *)v9, v12, (const WTF::URL *)&v59);
    uint64_t v14 = v59;
    char v59 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v13);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v11 + 16));
  }
  WebKit::WebFrame::commitProvisionalFrame(*(unsigned int **)(a1 + 16));
  uint64_t v15 = v9 + 32;
  double v16 = *(WebKit::WebFrame **)(a1 + 16);
  long long v54 = *((_OWORD *)v16 + 5);
  WebKit::WebFrame::info(v16, (uint64_t)&v59);
  v53[0] = *(void *)(v10 + 2528);
  v53[1] = v53[0] != 0;
  uint64_t v17 = (uint64_t *)WebCore::ResourceResponseBase::mimeType((WebCore::ResourceResponseBase *)(v10 + 1272));
  char v50 = *(unsigned char *)(a1 + 50);
  char Type = WebCore::FrameLoader::loadType(*(WebCore::FrameLoader **)(*(void *)(*(void *)(a1 + 88) + 8) + 280));
  __int16 v47 = *(_WORD *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 296) + 3406);
  char v46 = WebCore::DocumentLoader::mouseEventPolicy((WebCore::DocumentLoader *)v10);
  {
    uint64_t v44 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v44);
  }
  char v57 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(v56, (uint64_t)&v57, &v51);
  uint64_t v19 = v51;
  if (v51) {
    CFRetain(*(CFTypeRef *)(v51 + 8));
  }
  uint64_t v52 = v19;
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 56))(v9 + 32);
  uint64_t v21 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v21 = 1905;
  *((void *)v21 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v20;
  *((void *)v21 + 66) = (char *)v21 + 16;
  *((void *)v21 + 67) = 512;
  *((void *)v21 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v21 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v21 + 69) = 0;
  IPC::Encoder::encodeHeader(v21);
  char v57 = v21;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v21, (uint64_t *)&v54);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v21, (char *)&v59);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v21, (WebCore::ResourceRequest *)(v10 + 872));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v21, (uint64_t)v53);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v21, v17);
  uint64_t v22 = (unsigned char *)IPC::Encoder::grow(v21, 1uLL, 1);
  if (!v23)
  {
    __break(0xC471u);
    JUMPOUT(0x1991D381CLL);
  }
  *uint64_t v22 = v50;
  char v58 = Type;
  IPC::Encoder::operator<<<BOOL>(v21, &v58);
  IPC::ArgumentCoder<__SecTrust *,void>::encode(v21);
  uint64_t v24 = (unsigned char *)IPC::Encoder::grow(v21, 1uLL, 1);
  if (!v25)
  {
    __break(0xC471u);
    JUMPOUT(0x1991D383CLL);
  }
  *uint64_t v24 = v49;
  uint64_t v26 = (unsigned char *)IPC::Encoder::grow(v21, 1uLL, 1);
  if (!v27)
  {
    __break(0xC471u);
    JUMPOUT(0x1991D385CLL);
  }
  *uint64_t v26 = v48;
  long long v28 = (unsigned char *)IPC::Encoder::grow(v21, 1uLL, 1);
  if (!v29)
  {
    __break(0xC471u);
    JUMPOUT(0x1991D387CLL);
  }
  unsigned char *v28 = (v47 & 8) != 0;
  uint64_t v30 = (unsigned char *)IPC::Encoder::grow(v21, 1uLL, 1);
  if (!v31)
  {
    __break(0xC471u);
    JUMPOUT(0x1991D389CLL);
  }
  *uint64_t v30 = v45;
  char v58 = v46;
  IPC::Encoder::operator<<<BOOL>(v21, &v58);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v21, &v52);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v15 + 32))(v9 + 32, &v57, 0);
  uint64_t v33 = v57;
  char v57 = 0;
  if (v33)
  {
    IPC::Encoder::~Encoder(v33, v32);
    WTF::fastFree(v40, v41);
  }
  if (v19) {
    CFRelease(*(CFTypeRef *)(v19 + 8));
  }
  uint64_t v34 = v51;
  uint64_t v51 = 0;
  if (v34) {
    CFRelease(*(CFTypeRef *)(v34 + 8));
  }
  __int16 v35 = v64;
  char v64 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2) {
      WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v32);
    }
    else {
      *(_DWORD *)v35 -= 2;
    }
  }
  if (v63 != -1) {
    ((void (*)(void *, uint64_t *))off_1EE9F6B08[v63])(v53, &v62);
  }
  int v63 = -1;
  CFTypeRef v36 = cf;
  CFTypeRef cf = 0;
  if (v36) {
    CFRelease(v36);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v60);
  WebKit::WebPage::didCommitLoad((WebKit::WebPage *)v9, *(WebKit::WebFrame **)(a1 + 16));
  CFTypeRef v37 = v55;
  CFTypeRef v55 = 0;
  if (v37) {
    CFRelease(v37);
  }
  uint64_t v38 = (CFTypeRef *)v56;
  char v56 = 0;
  if (v38) {
    CFRelease(v38[1]);
  }
  if (*(_DWORD *)(v10 + 24) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  }
  else {
    --*(_DWORD *)(v10 + 24);
  }
  CFRelease(*(CFTypeRef *)(v9 + 8));
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFailProvisionalLoad(uint64_t a1, WebCore::ResourceError *a2, char a3, char a4)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v8)
  {
    uint64_t v9 = v8;
    CFRetain(*(CFTypeRef *)(v8 + 8));
    if (*(unsigned char *)(v9 + 2254))
    {
LABEL_38:
      CFRelease(*(CFTypeRef *)(v9 + 8));
      return;
    }
    uint64_t v10 = off_1EB358988;
    if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(WebKit::WebFrame **)(a1 + 16);
      uint64_t v12 = *((void *)v11 + 10);
      uint64_t v13 = WebKit::WebFrame::page(v11);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16))) {
        uint64_t v14 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      }
      else {
        uint64_t v14 = 0;
      }
      *(_DWORD *)buf = 134219008;
      uint64_t v51 = a1;
      __int16 v52 = 2048;
      long long v53 = v11;
      __int16 v54 = 2048;
      uint64_t v55 = v12;
      __int16 v56 = 2048;
      uint64_t v57 = v13;
      __int16 v58 = 2048;
      uint64_t v59 = v14;
      _os_log_impl(&dword_1985F2000, v10, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidFailProvisionalLoad:", buf, 0x34u);
    }
    BOOL v48 = 0;
    (*(void (**)(void, uint64_t, void, WebCore::ResourceError *, void **))(**(void **)(v9 + 360) + 48))(*(void *)(v9 + 360), v9, *(void *)(a1 + 16), a2, &v48);
    uint64_t v15 = *(void *)(v9 + 632);
    if (v15)
    {
      double v16 = (unsigned int **)(v15 + 16);
      ++*(_DWORD *)(v15 + 16);
      WebKit::WebExtensionControllerProxy::didFailLoadForFrame(v15, (WebKit::WebPage *)v9, *(WebKit::WebFrame **)(a1 + 16), (const WTF::URL *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 112));
      WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v16);
    }
    WebKit::WebPage::SandboxExtensionTracker::didFailProvisionalLoad((const char ***)(v9 + 688), *(WebKit::WebFrame **)(a1 + 16));
    LOBYTE(v46) = 0;
    BOOL v47 = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v44);
    uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 96);
    if (v17)
    {
      BOOL v18 = *(void *)(v17 + 2528) != 0;
      uint64_t v46 = *(void *)(v17 + 2528);
      BOOL v47 = v18;
      WebCore::ResourceRequestBase::operator=((uint64_t)v44, v17 + 872);
      uint64_t v19 = *(const void **)(v17 + 1064);
      if (v19) {
        CFRetain(v19);
      }
      CFTypeRef v20 = v45;
      CFTypeRef v45 = v19;
      if (v20) {
        CFRelease(v20);
      }
    }
    uint64_t v21 = v9 + 32;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)buf);
    uint64_t v22 = (uint64_t *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 112);
    {
      int v41 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v41);
    }
    BOOL v49 = (IPC::Encoder *)&unk_1EE9E6F68;
    WebKit::UserData::transform(v48, (uint64_t)&v49, &v42);
    uint64_t v23 = v42;
    if (v42) {
      CFRetain(*(CFTypeRef *)(v42 + 8));
    }
    uint64_t v43 = v23;
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 56))(v9 + 32);
    uint64_t v25 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v25 = 1916;
    *((void *)v25 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v24;
    *((void *)v25 + 66) = (char *)v25 + 16;
    *((void *)v25 + 67) = 512;
    *((void *)v25 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v25 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v25 + 69) = 0;
    IPC::Encoder::encodeHeader(v25);
    BOOL v49 = v25;
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v25, (char *)buf);
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v25, (WebCore::ResourceRequest *)v44);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v25, (uint64_t)&v46);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, v22);
    IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v25, a2);
    uint64_t v26 = (unsigned char *)IPC::Encoder::grow(v25, 1uLL, 1);
    if (!v27)
    {
      __break(0xC471u);
      JUMPOUT(0x1991D3DCCLL);
    }
    *uint64_t v26 = a3;
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(v25, &v43);
    long long v28 = (unsigned char *)IPC::Encoder::grow(v25, 1uLL, 1);
    if (!v29)
    {
      __break(0xC471u);
      JUMPOUT(0x1991D3DECLL);
    }
    unsigned char *v28 = a4;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v21 + 32))(v9 + 32, &v49, 0);
    uint64_t v31 = v49;
    BOOL v49 = 0;
    if (v31)
    {
      IPC::Encoder::~Encoder(v31, v30);
      WTF::fastFree(v38, v39);
      if (!v23) {
        goto LABEL_23;
      }
    }
    else if (!v23)
    {
LABEL_23:
      uint64_t v32 = v42;
      uint64_t v42 = 0;
      if (v32) {
        CFRelease(*(CFTypeRef *)(v32 + 8));
      }
      uint64_t v33 = v63;
      int v63 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2) {
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v30);
        }
        else {
          *(_DWORD *)v33 -= 2;
        }
      }
      if (v62 != -1) {
        ((void (*)(IPC::Encoder **, uint64_t *))off_1EE9F6B08[v62])(&v49, &v61);
      }
      int v62 = -1;
      CFTypeRef v34 = cf;
      CFTypeRef cf = 0;
      if (v34) {
        CFRelease(v34);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)((char *)&v51 + 4));
      uint64_t v35 = *(void *)(*(void *)(a1 + 16) + 72);
      if (v35)
      {
        uint64_t v40 = *(void *)(v35 + 8);
        if (v40) {
          (*(void (**)(uint64_t))(*(void *)v40 + 24))(v40);
        }
      }
      CFTypeRef v36 = v45;
      CFTypeRef v45 = 0;
      if (v36) {
        CFRelease(v36);
      }
      WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v44);
      CFTypeRef v37 = (CFTypeRef *)v48;
      BOOL v48 = 0;
      if (v37) {
        CFRelease(v37[1]);
      }
      goto LABEL_38;
    }
    CFRelease(*(CFTypeRef *)(v23 + 8));
    goto LABEL_23;
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFailLoad(WebKit::WebFrame **this, const WebCore::ResourceError *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = WebKit::WebFrame::page(this[2]);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  CFRetain(*(CFTypeRef *)(v4 + 8));
  uint64_t v6 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = this[2];
    uint64_t v8 = *((void *)v7 + 10);
    uint64_t v9 = WebKit::WebFrame::page(v7);
    if (WebKit::WebFrame::page(this[2])) {
      uint64_t v10 = *(void *)(WebKit::WebFrame::page(this[2]) + 40);
    }
    else {
      uint64_t v10 = 0;
    }
    *(_DWORD *)buf = 134219008;
    *(void *)&uint8_t buf[4] = this;
    __int16 v39 = 2048;
    uint64_t v40 = v7;
    __int16 v41 = 2048;
    uint64_t v42 = v8;
    __int16 v43 = 2048;
    uint64_t v44 = v9;
    __int16 v45 = 2048;
    uint64_t v46 = v10;
    _os_log_impl(&dword_1985F2000, v6, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDidFailLoad:", buf, 0x34u);
  }
  CFTypeRef v36 = 0;
  uint64_t v11 = *(void *)(*(void *)(*((void *)this[11] + 1) + 280) + 88);
  ++*(_DWORD *)(v11 + 24);
  (*(void (**)(void, uint64_t, WebKit::WebFrame *, const WebCore::ResourceError *, void **))(**(void **)(v5 + 360) + 88))(*(void *)(v5 + 360), v5, this[2], a2, &v36);
  uint64_t v12 = *(void *)(v5 + 632);
  if (v12)
  {
    ++*(_DWORD *)(v12 + 16);
    uint64_t v13 = this[2];
    WebKit::WebFrame::url(v13, (uint64_t)buf);
    WebKit::WebExtensionControllerProxy::didFailLoadForFrame(v12, (WebKit::WebPage *)v5, v13, (const WTF::URL *)buf);
    uint64_t v15 = *(WTF::StringImpl **)buf;
    *(void *)buf = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v14);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v12 + 16));
  }
  uint64_t v16 = v5 + 32;
  uint64_t v17 = this[2];
  long long v35 = *((_OWORD *)v17 + 5);
  WebKit::WebFrame::info(v17, (uint64_t)buf);
  v34[0] = *(void *)(v11 + 2528);
  v34[1] = v34[0] != 0;
  {
    uint64_t v31 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v31);
  }
  CFTypeRef v37 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(v36, (uint64_t)&v37, &v32);
  uint64_t v18 = v32;
  if (v32) {
    CFRetain(*(CFTypeRef *)(v32 + 8));
  }
  uint64_t v33 = v18;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v5 + 32);
  CFTypeRef v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)CFTypeRef v20 = 1915;
  *((void *)v20 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v19;
  *((void *)v20 + 66) = (char *)v20 + 16;
  *((void *)v20 + 67) = 512;
  *((void *)v20 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v20 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v20 + 69) = 0;
  IPC::Encoder::encodeHeader(v20);
  CFTypeRef v37 = v20;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v20, (uint64_t *)&v35);
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v20, buf);
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v20, (WebCore::ResourceRequest *)(v11 + 872));
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v20, (uint64_t)v34);
  IPC::ArgumentCoder<WebCore::ResourceError,void>::encode(v20, a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v20, &v33);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v16 + 32))(v5 + 32, &v37, 0);
  uint64_t v22 = v37;
  CFTypeRef v37 = 0;
  if (v22)
  {
    IPC::Encoder::~Encoder(v22, v21);
    WTF::fastFree(v28, v29);
    if (!v18) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v18) {
LABEL_18:
  }
    CFRelease(*(CFTypeRef *)(v18 + 8));
LABEL_19:
  uint64_t v23 = v32;
  uint64_t v32 = 0;
  if (v23) {
    CFRelease(*(CFTypeRef *)(v23 + 8));
  }
  uint64_t v24 = v50;
  char v50 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2) {
      WTF::StringImpl::destroy(v24, (WTF::StringImpl *)v21);
    }
    else {
      *(_DWORD *)v24 -= 2;
    }
  }
  if (v49 != -1) {
    ((void (*)(void *, uint64_t *))off_1EE9F6B08[v49])(v34, &v48);
  }
  int v49 = -1;
  CFTypeRef v25 = cf;
  CFTypeRef cf = 0;
  if (v25) {
    CFRelease(v25);
  }
  WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&buf[8]);
  uint64_t v26 = *((void *)this[2] + 9);
  if (v26)
  {
    uint64_t v30 = *(void *)(v26 + 8);
    if (v30) {
      (*(void (**)(uint64_t))(*(void *)v30 + 24))(v30);
    }
  }
  if (*(_DWORD *)(v11 + 24) == 1) {
    (*(void (**)(uint64_t))(*(void *)v11 + 24))(v11);
  }
  else {
    --*(_DWORD *)(v11 + 24);
  }
  uint64_t v27 = (CFTypeRef *)v36;
  CFTypeRef v36 = 0;
  if (v27) {
    CFRelease(v27[1]);
  }
  CFRelease(*(CFTypeRef *)(v5 + 8));
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishDocumentLoad(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v23 = 0;
    uint64_t v4 = *(void *)(*(void *)(*((void *)this[11] + 1) + 280) + 88);
    if (v4) {
      ++*(_DWORD *)(v4 + 24);
    }
    (*(void (**)(void, uint64_t, WebKit::WebFrame *, void **))(**(void **)(v3 + 360) + 64))(*(void *)(v3 + 360), v3, this[2], &v23);
    uint64_t v5 = v3 + 32;
    long long v22 = *((_OWORD *)this[2] + 5);
    v21[0] = *(void *)(v4 + 2528);
    v21[1] = v21[0] != 0;
    {
      uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v18);
    }
    uint64_t v24 = (IPC::Encoder *)&unk_1EE9E6F68;
    uint64_t v6 = (WTF::WallTime *)WebKit::UserData::transform(v23, (uint64_t)&v24, &v19);
    uint64_t v7 = v19;
    if (v19) {
      uint64_t v6 = (WTF::WallTime *)CFRetain(*(CFTypeRef *)(v19 + 8));
    }
    uint64_t v20 = v7;
    WTF::WallTime::now(v6);
    double v9 = v8;
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v3 + 32);
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1919;
    *((void *)v11 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v24 = v11;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, (uint64_t *)&v22);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v11, (uint64_t)v21);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(v11, &v20);
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v11, v9);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v3 + 32, &v24, 0);
    uint64_t v13 = v24;
    uint64_t v24 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v16, v17);
    }
    if (v7) {
      CFRelease(*(CFTypeRef *)(v7 + 8));
    }
    uint64_t v14 = v19;
    uint64_t v19 = 0;
    if (v14) {
      CFRelease(*(CFTypeRef *)(v14 + 8));
    }
    WebKit::WebPage::didFinishDocumentLoad((unsigned int *)v3, this[2]);
    if (*(_DWORD *)(v4 + 24) == 1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      --*(_DWORD *)(v4 + 24);
    }
    uint64_t v15 = (CFTypeRef *)v23;
    uint64_t v23 = 0;
    if (v15) {
      CFRelease(v15[1]);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidFinishLoad(WebKit::WebFrame **this)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v30 = 0;
    uint64_t v4 = *(void *)(*(void *)(*((void *)this[11] + 1) + 280) + 88);
    ++*(_DWORD *)(v4 + 24);
    (*(void (**)(void, uint64_t, WebKit::WebFrame *, void **))(**(void **)(v3 + 360) + 72))(*(void *)(v3 + 360), v3, this[2], &v30);
    uint64_t v5 = *(void *)(v3 + 632);
    if (v5)
    {
      ++*(_DWORD *)(v5 + 16);
      uint64_t v6 = this[2];
      WebKit::WebFrame::url(v6, (uint64_t)&v32);
      WebKit::WebExtensionControllerProxy::didFinishLoadForFrame((void *)v5, (WebKit::WebPage *)v3, v6, (const WTF::URL *)&v32);
      double v8 = v32;
      uint64_t v32 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2) {
          WTF::StringImpl::destroy(v8, v7);
        }
        else {
          *(_DWORD *)v8 -= 2;
        }
      }
      WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref((unsigned int **)(v5 + 16));
    }
    uint64_t v9 = v3 + 32;
    uint64_t v10 = this[2];
    long long v29 = *((_OWORD *)v10 + 5);
    WebKit::WebFrame::info(v10, (uint64_t)&v32);
    v28[0] = *(void *)(v4 + 2528);
    v28[1] = v28[0] != 0;
    {
      CFTypeRef v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v25);
    }
    uint64_t v31 = (IPC::Encoder *)&unk_1EE9E6F68;
    WebKit::UserData::transform(v30, (uint64_t)&v31, &v26);
    uint64_t v11 = v26;
    if (v26) {
      CFRetain(*(CFTypeRef *)(v26 + 8));
    }
    uint64_t v27 = v11;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v3 + 32);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 1920;
    *((void *)v13 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v13 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v31 = v13;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v13, (uint64_t *)&v29);
    IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v13, (char *)&v32);
    IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v13, (WebCore::ResourceRequest *)(v4 + 872));
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v13, (uint64_t)v28);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(v13, &v27);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v3 + 32, &v31, 0);
    uint64_t v15 = v31;
    uint64_t v31 = 0;
    if (v15)
    {
      IPC::Encoder::~Encoder(v15, v14);
      WTF::fastFree(v22, v23);
    }
    if (v11) {
      CFRelease(*(CFTypeRef *)(v11 + 8));
    }
    uint64_t v16 = v26;
    uint64_t v26 = 0;
    if (v16) {
      CFRelease(*(CFTypeRef *)(v16 + 8));
    }
    uint64_t v17 = v37;
    CFTypeRef v37 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    if (v36 != -1) {
      ((void (*)(void *, uint64_t *))off_1EE9F6B08[v36])(v28, &v35);
    }
    int v36 = -1;
    CFTypeRef v18 = cf;
    CFTypeRef cf = 0;
    if (v18) {
      CFRelease(v18);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)&v33);
    uint64_t v19 = this[2];
    uint64_t v20 = *((void *)v19 + 9);
    if (v20)
    {
      uint64_t v24 = *(void *)(v20 + 8);
      if (v24)
      {
        (*(void (**)(uint64_t))(*(void *)v24 + 16))(v24);
        uint64_t v19 = this[2];
      }
    }
    WebKit::WebPage::didFinishLoad((unsigned int *)v3, v19);
    if (*(_DWORD *)(v4 + 24) == 1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      --*(_DWORD *)(v4 + 24);
    }
    uint64_t v21 = (CFTypeRef *)v30;
    uint64_t v30 = 0;
    if (v21) {
      CFRelease(v21[1]);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidFirstVisuallyNonEmptyLayoutForFrame>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::DidFirstVisuallyNonEmptyLayoutForFrame>(a1, a2, v4);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReachVisuallyNonEmptyState(WebKit::WebFrame **this)
{
  if (WebKit::WebFrame::page(this[2])
    && (*(unsigned char *)(*(void *)(*(void *)(WebKit::WebFrame::page(this[2]) + 48) + 112) + 704) & 8) == 0)
  {
    WebKit::WebLocalFrameLoaderClient::completePageTransitionIfNeeded(this);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::dispatchCreatePage(uint64_t a1, const WebCore::NavigationAction *a2, int a3)
{
  uint64_t v6 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (!v6) {
    return 0;
  }
  uint64_t v7 = v6;
  CFRetain(*(CFTypeRef *)(v6 + 8));
  v13[0] = 0;
  v13[4] = 0;
  v13[8] = 0;
  v13[12] = 0;
  v13[16] = 0;
  v13[20] = 0;
  unsigned char v13[24] = 0;
  v13[28] = 0;
  v13[32] = 0;
  v18[0] = 0;
  v18[1] = 0;
  __int16 v16 = 0;
  uint64_t v15 = 0;
  uint64_t v14 = 0;
  int v17 = (a3 == 0) | 0x100;
  WebCore::Chrome::createWindow(&v12, *(WebCore::Chrome **)(*(void *)(v7 + 48) + 48), *(WebCore::LocalFrame **)(*(void *)(a1 + 88) + 8), (const WebCore::WindowFeatures *)v13, a2);
  uint64_t v9 = (_DWORD *)v12;
  if (v12)
  {
    if (*(unsigned char *)(*(void *)(v12 + 160) + 144)) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = *(void *)(v12 + 160);
    }
    uint64_t v12 = 0;
    WTF::RefCounted<WebCore::Page>::deref(v9);
  }
  else
  {
    uint64_t v10 = 0;
  }
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v18, v8);
  CFRelease(*(CFTypeRef *)(v7 + 8));
  return v10;
}

void WebKit::WebLocalFrameLoaderClient::dispatchShow(WebKit::WebFrame **this)
{
  uint64_t v1 = WebKit::WebFrame::page(this[2]);
  if (v1)
  {
    uint64_t v2 = (WebKit::WebPage *)v1;
    CFRetain(*(CFTypeRef *)(v1 + 8));
    WebKit::WebPage::show(v2);
    uint64_t v3 = (const void *)*((void *)v2 + 1);
    CFRelease(v3);
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(uint64_t a1, const WebCore::ResourceResponse *a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v10)
  {
    uint64_t v11 = (CFTypeRef *)v10;
    CFRetain(*(CFTypeRef *)(v10 + 8));
    if (*(void *)WebCore::ResourceRequestBase::url(a3))
    {
      if (!WebKit::WebPage::shouldSkipDecidePolicyForResponse((WebKit::WebPage *)v11, a2))
      {
        char canShowResponse = WebKit::WebPage::canShowResponse((WebKit::WebPage *)v11, a2);
        uint64_t v24 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 96);
        char v36 = canShowResponse;
        if (v24)
        {
          ++*(_DWORD *)(v24 + 24);
          uint64_t v43 = *(void *)(v24 + 2528);
          BOOL v44 = v43 != 0;
        }
        else
        {
          LOBYTE(v4WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
          LOBYTE(v44) = 0;
        }
        CFTypeRef v25 = *(CFTypeRef **)(a1 + 16);
        CFRetain(v25[1]);
        uint64_t v35 = WebKit::WebFrame::setUpPolicyListener((uint64_t)v25, a5, 0);
        char isDisplayingInitialEmptyDocument = WebCore::FrameLoaderStateMachine::isDisplayingInitialEmptyDocument((WebCore::FrameLoaderStateMachine *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 64));
        uint64_t v27 = *(WebCore::Document **)(*(void *)(*(void *)(a1 + 88) + 8) + 296);
        if (v27) {
          char v28 = *(unsigned char *)WebCore::Document::crossOriginOpenerPolicy(v27);
        }
        else {
          char v28 = 1;
        }
        WebKit::WebFrame::info((WebKit::WebFrame *)v25, (uint64_t)buf);
        v38[0] = buf;
        v38[1] = &v43;
        v38[2] = a2;
        v38[3] = a3;
        char v39 = v36;
        uint64_t v40 = a4;
        char v41 = isDisplayingInitialEmptyDocument;
        char v42 = v28;
        CFRetain(v25[1]);
        v37[0] = (uint64_t)v25;
        v37[1] = v35;
        IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>((uint64_t)(v11 + 4), (uint64_t)v38, v37);
        if (v37[0]) {
          CFRelease(*(CFTypeRef *)(v37[0] + 8));
        }
        WebKit::FrameInfoData::~FrameInfoData((WebKit::FrameInfoData *)buf);
        CFRelease(v25[1]);
        if (v24)
        {
          if (*(_DWORD *)(v24 + 24) == 1) {
            (*(void (**)(uint64_t))(*(void *)v24 + 24))(v24);
          }
          else {
            --*(_DWORD *)(v24 + 24);
          }
        }
        goto LABEL_10;
      }
      uint64_t v12 = off_1EB358988;
      if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
      {
LABEL_9:
        uint64_t v18 = *a5;
        *a5 = 0;
        (*(void (**)(uint64_t, void))(*(void *)v18 + 16))(v18, 0);
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
LABEL_10:
        CFRelease(v11[1]);
        return;
      }
      uint64_t v13 = *(WebKit::WebFrame **)(a1 + 16);
      uint64_t v14 = *((void *)v13 + 10);
      uint64_t v15 = WebKit::WebFrame::page(v13);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16))) {
        uint64_t v16 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      }
      else {
        uint64_t v16 = 0;
      }
      *(_DWORD *)buf = 134219008;
      uint64_t v46 = a1;
      __int16 v47 = 2048;
      uint64_t v48 = v13;
      __int16 v49 = 2048;
      uint64_t v50 = v14;
      __int16 v51 = 2048;
      uint64_t v52 = v15;
      __int16 v53 = 2048;
      uint64_t v54 = v16;
      int v17 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDecidePol"
            "icyForResponse: continuing because injected bundle says so";
    }
    else
    {
      uint64_t v12 = off_1EB358988;
      if (!os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_9;
      }
      uint64_t v19 = *(WebKit::WebFrame **)(a1 + 16);
      uint64_t v20 = *((void *)v19 + 10);
      uint64_t v21 = WebKit::WebFrame::page(v19);
      if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16))) {
        uint64_t v22 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
      }
      else {
        uint64_t v22 = 0;
      }
      *(_DWORD *)buf = 134219008;
      uint64_t v46 = a1;
      __int16 v47 = 2048;
      uint64_t v48 = v19;
      __int16 v49 = 2048;
      uint64_t v50 = v20;
      __int16 v51 = 2048;
      uint64_t v52 = v21;
      __int16 v53 = 2048;
      uint64_t v54 = v22;
      int v17 = "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDecidePol"
            "icyForResponse: continuing because the url string is null";
    }
    _os_log_impl(&dword_1985F2000, v12, OS_LOG_TYPE_DEFAULT, v17, buf, 0x34u);
    goto LABEL_9;
  }
  long long v29 = off_1EB358988;
  if (os_log_type_enabled((os_log_t)off_1EB358988, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = *(WebKit::WebFrame **)(a1 + 16);
    uint64_t v31 = *((void *)v30 + 10);
    uint64_t v32 = WebKit::WebFrame::page(v30);
    if (WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16))) {
      uint64_t v33 = *(void *)(WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16)) + 40);
    }
    else {
      uint64_t v33 = 0;
    }
    *(_DWORD *)buf = 134219008;
    uint64_t v46 = a1;
    __int16 v47 = 2048;
    uint64_t v48 = v30;
    __int16 v49 = 2048;
    uint64_t v50 = v31;
    __int16 v51 = 2048;
    uint64_t v52 = v32;
    __int16 v53 = 2048;
    uint64_t v54 = v33;
    _os_log_impl(&dword_1985F2000, v29, OS_LOG_TYPE_DEFAULT, "%p - [webFrame=%p, webFrameID=%llu, webPage=%p, webPageID=%llu] WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse: ignoring because there's no web page", buf, 0x34u);
  }
  uint64_t v34 = *a5;
  *a5 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 16))(v34, 2);
  (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
}

IPC::Encoder *IPC::MessageSender::sendWithAsyncReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1889;
  *((void *)v7 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v26 = v7;
  IPC::ArgumentCoder<WebKit::FrameInfoData,void>::encode(v7, *(char **)a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::NavigationIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v7, *(void *)(a2 + 8));
  IPC::ArgumentCoder<WebCore::ResourceResponse,void>::encode(v7, *(WebCore::ResourceResponseBase **)(a2 + 16));
  IPC::ArgumentCoder<WebCore::ResourceRequest,void>::encode(v7, *(WebCore::ResourceRequest **)(a2 + 24));
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v10) {
    goto LABEL_11;
  }
  unsigned char *v9 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v7, *(uint64_t **)(a2 + 40));
  char v11 = *(unsigned char *)(a2 + 48);
  uint64_t v12 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1991D52A0);
  }
  *uint64_t v12 = v11;
  char v14 = *(unsigned char *)(a2 + 49);
  uint64_t v15 = (unsigned char *)IPC::Encoder::grow(v7, 1uLL, 1);
  if (!v16)
  {
LABEL_11:
    __break(0xC471u);
    JUMPOUT(0x1991D5280);
  }
  *uint64_t v15 = v14;
  uint64_t v17 = *a3;
  uint64_t v18 = a3[1];
  *a3 = 0;
  uint64_t v19 = (void *)WTF::fastMalloc((WTF *)0x18);
  *uint64_t v19 = &unk_1EE9F6B38;
  v19[1] = v17;
  uint64_t v19[2] = v18;
  v25[0] = v19;
  v25[1] = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)a1 + 40))(a1, &v26, v25, 0);
  uint64_t v21 = v25[0];
  v25[0] = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t result = v26;
  uint64_t v26 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v20);
    return (IPC::Encoder *)WTF::fastFree(v23, v24);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(uint64_t a1, uint64_t a2, WebKit::WebPage *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t *a7)
{
  v82[27] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v13 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v13)
  {
    uint64_t v14 = v13;
    CFRetain(*(CFTypeRef *)(v13 + 8));
    uint64_t v40 = WebKit::WebFrame::setUpPolicyListener(*(void *)(a1 + 16), a7, 0);
    v45[0] = *(unsigned char *)(a2 + 868);
    v45[1] = WebKit::modifiersForNavigationAction((unsigned char *)a2);
    char v15 = WebKit::mouseButton((unsigned char *)a2);
    char v16 = 0;
    void v45[2] = v15;
    if (*(unsigned char *)(a2 + 476))
    {
      char v16 = 0;
      if (*(unsigned char *)(a2 + 474))
      {
        if (*(unsigned char *)(a2 + 448)) {
          char v16 = *(unsigned char *)(a2 + 473);
        }
      }
    }
    void v45[3] = v16;
    {
      char v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v39);
    }
    uint64_t v17 = WebKit::WebProcess::singleton(void)::process;
    uint64_t v18 = *(void *)(v14 + 40);
    uint64_t v19 = *(_DWORD **)(a2 + 480);
    if (v19) {
      ++*v19;
    }
    char v41 = v19;
    WebKit::WebProcess::userGestureTokenIdentifier(v17, v18, 1, (uint64_t *)&v41, &v46);
    uint64_t v21 = *(void *)(a2 + 480);
    if (v21)
    {
      *(_DWORD *)v21 += 2;
      long long v22 = *(_OWORD *)(v21 + 112);
      long long v47 = *(_OWORD *)(v21 + 96);
      long long v48 = v22;
    }
    else
    {
      LOBYTE(v47) = 0;
      LOBYTE(v4++*(_DWORD *)(this + 8) = 0;
    }
    char canHandleRequest = WebKit::WebPage::canHandleRequest(a3, v20);
    char v50 = *(unsigned char *)(a2 + 871);
    uint64_t v23 = *(_DWORD **)(a2 + 488);
    if (v23) {
      *v23 += 2;
    }
    if (*(unsigned char *)(a2 + 476)) {
      uint64_t v24 = *(void *)(a2 + 464);
    }
    else {
      uint64_t v24 = 0;
    }
    __int16 v51 = v23;
    uint64_t v52 = v24;
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)&v53);
    uint64_t v55 = 0;
    char v56 = 0;
    char v54 = v54 & 0xF1 | 4;
    int v57 = 0;
    BOOL v58 = *(unsigned char *)(a2 + 880) == 1;
    char v59 = *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 394);
    char v65 = 0;
    char v66 = 0;
    char v67 = 0;
    __int16 v68 = 0;
    uint64_t v69 = 0;
    __int16 v70 = 0;
    char v71 = 0;
    char v72 = 0;
    v73[0] = 0;
    char v74 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    char v64 = 0;
    if (*(unsigned char *)(a2 + 856))
    {
      WebCore::PrivateClickMeasurement::PrivateClickMeasurement((WebCore::PrivateClickMeasurement *)v73, (const WebCore::PrivateClickMeasurement *)(a2 + 544));
      char v74 = 1;
    }
    __int16 v75 = 0;
    char v76 = 0;
    char v77 = 0;
    int v25 = *(unsigned __int8 *)(a6 + 136);
    if (*(unsigned char *)(a6 + 136))
    {
      WebKit::WebHitTestResultData::WebHitTestResultData((WebKit::WebHitTestResultData *)v44, (WebKit::WebHitTestResultData **)a6, 0);
      WebKit::WebHitTestResultData::WebHitTestResultData((uint64_t)v78, v44);
      char v26 = 1;
    }
    else
    {
      char v26 = 0;
      v78[0] = 0;
    }
    v78[664] = v26;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v79);
    v79[296] = 0;
    v79[304] = 0;
    WebKit::WebFrame::info(*(WebKit::WebFrame **)(a1 + 16), (uint64_t)v80);
    v80[296] = 0;
    v80[304] = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)&v81);
    WebCore::ResourceRequest::ResourceRequest(v82, (const String *)a3);
    if (v25) {
      WebKit::WebHitTestResultData::~WebHitTestResultData((WebKit::WebHitTestResultData *)v44);
    }
    if (v21)
    {
      WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v21);
      WTF::RefCounted<WebCore::UserGestureToken>::deref((_DWORD *)v21);
    }
    if (v19) {
      WTF::RefCounted<WebCore::UserGestureToken>::deref(v19);
    }
    uint64_t v27 = *(void *)(a1 + 16);
    CFRetain(*(CFTypeRef *)(v27 + 8));
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)(v14 + 32) + 56))(v14 + 32);
    long long v29 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)long long v29 = 1888;
    *((void *)v29 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v28;
    *((void *)v29 + 66) = (char *)v29 + 16;
    *((void *)v29 + 67) = 512;
    *((void *)v29 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v29 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v29 + 69) = 0;
    IPC::Encoder::encodeHeader(v29);
    uint64_t v43 = v29;
    IPC::ArgumentCoder<WebKit::NavigationActionData,void>::encode(v29, (uint64_t)v45);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v29, a5);
    uint64_t v30 = (void *)WTF::fastMalloc((WTF *)0x18);
    *uint64_t v30 = &unk_1EE9F6B60;
    v30[1] = v27;
    v30[2] = v40;
    uint64_t v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v42[0] = v30;
    v42[1] = v31;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)(v14 + 32) + 40))(v14 + 32, &v43, v42, 0);
    uint64_t v33 = v42[0];
    v42[0] = 0;
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
    }
    uint64_t v34 = v43;
    uint64_t v43 = 0;
    if (v34)
    {
      IPC::Encoder::~Encoder(v34, v32);
      WTF::fastFree(v35, v36);
    }
    WebKit::NavigationActionData::~NavigationActionData((WebKit::NavigationActionData *)v45);
    CFRelease(*(CFTypeRef *)(v14 + 8));
  }
  else
  {
    uint64_t v37 = *a7;
    *a7 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, 2);
    uint64_t v38 = *(void (**)(uint64_t))(*(void *)v37 + 8);
    v38(v37);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(uint64_t a1, uint64_t a2)
{
  uint64_t result = WebCore::FrameLoader::loaderForWebsitePolicies();
  if (v4)
  {
    WebKit::WebsitePoliciesData::applyToDocumentLoader(a2, (uint64_t)v4);
    uint64_t result = (uint64_t)v4;
    if (v4[6] == 1) {
      return (*(uint64_t (**)())(*(void *)v4 + 24))();
    }
    else {
      --v4[6];
    }
  }
  return result;
}

uint64_t non-virtual thunk to'WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(uint64_t a1, uint64_t a2)
{
  return WebKit::WebLocalFrameLoaderClient::applyWebsitePolicies(a1 - 8, a2);
}

void WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t a5, _DWORD **a6, uint64_t a7, char a8, uint64_t a9, char a10, char a11, int a12, __int16 a13, int a14, unsigned int a15, uint64_t *a16)
{
}

void WebKit::WebLocalFrameLoaderClient::cancelPolicyCheck(CFTypeRef **this)
{
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillSendSubmitEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v4)
  {
    uint64_t v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)(*a2 + 32);
    *(_DWORD *)(v7 + 28) += 2;
    uint64_t v11 = v7;
    WebKit::WebFrame::fromCoreFrame(*(void *)(*(void *)(*(void *)(v6 + 56) + 544) + 8), &v10);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = v10;
    (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v5 + 352) + 72))(*(void *)(v5 + 352), v5, v7, v8, v10, *a2 + 40);
    if (v9) {
      CFRelease(*(CFTypeRef *)(v9 + 8));
    }
    WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v11);
    CFRelease(*(CFTypeRef *)(v5 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillSubmitForm(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    uint64_t v8 = *(void *)(a2 + 32);
    *(_DWORD *)(v8 + 28) += 2;
    uint64_t v40 = v8;
    uint64_t v9 = *(void *)(*(void *)(a2 + 56) + 544);
    if (!v9 || (uint64_t v10 = *(void *)(v9 + 8)) == 0)
    {
      uint64_t v30 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
      (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
      goto LABEL_20;
    }
    uint64_t v11 = (unsigned int *)(v10 + 8);
    atomic_fetch_add((atomic_uint *volatile)(v10 + 8), 1u);
    WebKit::WebFrame::fromCoreFrame(v10, &v39);
    uint64_t v12 = v39;
    if (!v39)
    {
      uint64_t v27 = *a3;
      *a3 = 0;
      (*(void (**)(uint64_t))(*(void *)v27 + 16))(v27);
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
LABEL_19:
      WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v11);
LABEL_20:
      WTF::Ref<WebCore::Node,WTF::RawPtrTraits<WebCore::Node>,WTF::DefaultRefDerefTraits<WebCore::Node>>::~Ref(&v40);
      CFRelease(*(CFTypeRef *)(v7 + 8));
      return;
    }
    uint64_t v13 = a2 + 40;
    uint64_t v38 = 0;
    (*(void (**)(void, uint64_t, uint64_t, void, uint64_t, uint64_t, void **))(**(void **)(v7 + 352) + 64))(*(void *)(v7 + 352), v7, v40, *(void *)(a1 + 16), v39, a2 + 40, &v38);
    uint64_t v14 = v7 + 32;
    long long v15 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
    long long v36 = *(_OWORD *)(v12 + 80);
    long long v37 = v15;
    {
      uint64_t v33 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v33);
    }
    v41[0] = &unk_1EE9E6F68;
    WebKit::UserData::transform(v38, (uint64_t)v41, &v34);
    uint64_t v16 = v34;
    if (v34) {
      CFRetain(*(CFTypeRef *)(v34 + 8));
    }
    uint64_t v35 = v16;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 56))(v7 + 32);
    uint64_t v18 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v18 = 2125;
    *((void *)v18 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v17;
    *((void *)v18 + 66) = (char *)v18 + 16;
    *((void *)v18 + 67) = 512;
    *((void *)v18 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v18 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v18 + 69) = 0;
    IPC::Encoder::encodeHeader(v18);
    char v42 = v18;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v18, (uint64_t *)&v37);
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v18, (uint64_t *)&v36);
    IPC::VectorArgumentCoder<false,WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v18, v13);
    IPC::ArgumentCoder<WebKit::UserData,void>::encode(v18, &v35);
    uint64_t v19 = *a3;
    *a3 = 0;
    uint64_t v20 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v20 = &unk_1EE9F6B88;
    v20[1] = v19;
    uint64_t v21 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    v41[0] = v20;
    v41[1] = v21;
    (*(void (**)(uint64_t, IPC::Encoder **, void *, void))(*(void *)v14 + 40))(v7 + 32, &v42, v41, 0);
    uint64_t v23 = v41[0];
    v41[0] = 0;
    if (v23) {
      (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
    }
    uint64_t v24 = v42;
    char v42 = 0;
    if (v24)
    {
      IPC::Encoder::~Encoder(v24, v22);
      WTF::fastFree(v28, v29);
      if (!v16) {
        goto LABEL_13;
      }
    }
    else if (!v16)
    {
LABEL_13:
      uint64_t v25 = v34;
      uint64_t v34 = 0;
      if (v25) {
        CFRelease(*(CFTypeRef *)(v25 + 8));
      }
      char v26 = (CFTypeRef *)v38;
      uint64_t v38 = 0;
      if (v26) {
        CFRelease(v26[1]);
      }
      CFRelease(*(CFTypeRef *)(v12 + 8));
      goto LABEL_19;
    }
    CFRelease(*(CFTypeRef *)(v16 + 8));
    goto LABEL_13;
  }
  uint64_t v31 = *a3;
  *a3 = 0;
  (*(void (**)(uint64_t))(*(void *)v31 + 16))(v31);
  uint64_t v32 = *(void (**)(uint64_t))(*(void *)v31 + 8);

  v32(v31);
}

unsigned int *WebKit::WebLocalFrameLoaderClient::setMainDocumentError(WebKit::WebLocalFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::ResourceError *a3)
{
  uint64_t result = (unsigned int *)*((void *)this + 5);
  if (result)
  {
    WebKit::PluginView::manualLoadDidFail(result, a2);
    uint64_t result = (unsigned int *)*((void *)this + 5);
    *((void *)this + 5) = 0;
    if (result)
    {
      if (result[2] == 1) {
        uint64_t result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(void *)result + 8))(result);
      }
      else {
        --result[2];
      }
    }
    *((unsigned char *)this + 4++*(_DWORD *)(this + 8) = 0;
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::startDownload(uint64_t a1, WebCore::ResourceRequest *a2, uint64_t *a3, char a4)
{
  return WebKit::WebFrame::startDownload(*(void *)(a1 + 16), a2, a3, a4);
}

void WebKit::WebLocalFrameLoaderClient::willReplaceMultipartContent(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = (WebKit::WebPage *)v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    WebKit::WebPage::willReplaceMultipartContent(v3, this[2]);
    uint64_t v4 = (const void *)*((void *)v3 + 1);
    CFRelease(v4);
  }
}

void WebKit::WebLocalFrameLoaderClient::didReplaceMultipartContent(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    WebKit::WebPage::didReplaceMultipartContent(v3, this[2]);
    uint64_t v4 = *(const void **)(v3 + 8);
    CFRelease(v4);
  }
}

WebKit::PluginView *WebKit::WebLocalFrameLoaderClient::committedLoad(WebKit::WebLocalFrameLoaderClient *this, WebCore::DocumentLoader *a2, const WebCore::SharedBuffer *a3)
{
  if (*((void *)this + 5)) {
    uint64_t v6 = WTF::RefPtr<WebKit::PluginView,WTF::RawPtrTraits<WebKit::PluginView>,WTF::DefaultRefDerefTraits<WebKit::PluginView>>::unspecifiedBoolTypeInstance;
  }
  else {
    uint64_t v6 = 0;
  }
  if (!v6) {
    WebCore::DocumentLoader::commitData(a2, a3);
  }
  uint64_t v7 = *(void *)(*(void *)(*((void *)this + 11) + 8) + 296);
  if (v7)
  {
    if ((*(_WORD *)(v7 + 3406) & 0x10) != 0)
    {
      WebKit::pluginWillHandleLoadError((WebCore::DocumentLoader *)((char *)a2 + 1272), (uint64_t)v10);
      WebCore::DocumentLoader::cancelMainResourceLoad();
      WebCore::ResourceError::~ResourceError((WebCore::ResourceError *)v10, v9);
    }
  }
  uint64_t result = (WebKit::PluginView *)*((void *)this + 5);
  if (result)
  {
    if (!*((unsigned char *)this + 48))
    {
      WebKit::PluginView::manualLoadDidReceiveResponse(result, (CFTypeRef *)a2 + 159);
      uint64_t result = (WebKit::PluginView *)*((void *)this + 5);
      if (!result) {
        return result;
      }
      *((unsigned char *)this + 4++*(_DWORD *)(this + 8) = 1;
    }
    return (WebKit::PluginView *)WebKit::PluginView::manualLoadDidReceiveData(result, a3);
  }
  return result;
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::pluginWillHandleLoadError@<X0>(const WebCore::ResourceResponse *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::pluginWillHandleLoadError(a1, a2);
}

IPC::Encoder *IPC::MessageSender::send<Messages::WebPageProxy::DidFinishLoadingDataForCustomContentProvider>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v5 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v5 = 1922;
  *((void *)v5 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v4;
  *((void *)v5 + 66) = (char *)v5 + 16;
  *((void *)v5 + 67) = 512;
  *((void *)v5 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v5 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v5 + 69) = 0;
  IPC::Encoder::encodeHeader(v5);
  uint64_t v10 = v5;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v5, *(uint64_t **)a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v5, **(const void ***)(a2 + 8), *(void *)(*(void *)(a2 + 8) + 8));
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v10, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v6);
    return (IPC::Encoder *)WTF::fastFree(v8, v9);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::updateGlobalHistory(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = *(void *)(*(void *)(*((void *)this[11] + 1) + 280) + 88);
    if (v4) {
      ++*(_DWORD *)(v4 + 24);
    }
    long long v22 = 0;
    uint64_t v23 = 0;
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v24);
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v26);
    CFTypeRef v28 = 0;
    char v29 = 0;
    char v27 = v27 & 0xF1 | 4;
    uint64_t v5 = (WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v4 + 872));
    WTF::String::operator=((uint64_t *)&v22, v5);
    WTF::String::operator=((uint64_t *)&v23, (WTF::StringImpl **)(v4 + 1608));
    WebCore::ResourceRequestBase::operator=((uint64_t)v24, v4 + 672);
    uint64_t v6 = *(const void **)(v4 + 864);
    if (v6) {
      CFRetain(*(CFTypeRef *)(v4 + 864));
    }
    CFTypeRef v7 = cf;
    CFTypeRef cf = v6;
    if (v7) {
      CFRelease(v7);
    }
    WebCore::ResourceResponseBase::operator=((uint64_t)v26, v4 + 1272);
    uint64_t v8 = *(const void **)(v4 + 1512);
    if (v8) {
      CFRetain(*(CFTypeRef *)(v4 + 1512));
    }
    CFTypeRef v9 = v28;
    CFTypeRef v28 = v8;
    if (v9) {
      CFRelease(v9);
    }
    char v29 = *(unsigned char *)(v4 + 1520);
    long long v21 = *((_OWORD *)this[2] + 5);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 32) + 56))(v3 + 32);
    uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v11 = 1933;
    *((void *)v11 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
    *((void *)v11 + 66) = (char *)v11 + 16;
    *((void *)v11 + 67) = 512;
    *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v11 + 69) = 0;
    IPC::Encoder::encodeHeader(v11);
    uint64_t v30 = v11;
    IPC::ArgumentCoder<WebKit::WebNavigationDataStore,void>::encode(v11, (uint64_t *)&v22);
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, (uint64_t *)&v21);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v3 + 32) + 32))(v3 + 32, &v30, 0);
    uint64_t v13 = v30;
    uint64_t v30 = 0;
    if (v13)
    {
      IPC::Encoder::~Encoder(v13, v12);
      WTF::fastFree(v19, v20);
    }
    CFTypeRef v14 = v28;
    CFTypeRef v28 = 0;
    if (v14) {
      CFRelease(v14);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v26, (WTF::StringImpl *)v12);
    CFTypeRef v15 = cf;
    CFTypeRef cf = 0;
    if (v15) {
      CFRelease(v15);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v24);
    uint64_t v17 = v23;
    uint64_t v23 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, v16);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v22;
    long long v22 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v16);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 24) == 1) {
      (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
    }
    else {
      --*(_DWORD *)(v4 + 24);
    }
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }
}

void WebKit::WebLocalFrameLoaderClient::updateGlobalHistoryRedirectLinks(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v5 = *(void **)(*(void *)(*((void *)this[11] + 1) + 280) + 88);
  uint64_t v6 = (WTF::StringImpl *)v5[340];
  if (v6)
  {
    int v7 = *(_DWORD *)v6;
    int v8 = *(_DWORD *)v6 + 2;
    *(_DWORD *)uint64_t v6 = v8;
    if (v7)
    {
      *(_DWORD *)uint64_t v6 = v7;
      uint64_t v9 = v3 + 32;
    }
    else
    {
      WTF::StringImpl::destroy(v6, v4);
      uint64_t v6 = (WTF::StringImpl *)v5[340];
      uint64_t v9 = v3 + 32;
      if (!v6) {
        goto LABEL_6;
      }
      int v8 = *(_DWORD *)v6 + 2;
    }
    *(_DWORD *)uint64_t v6 = v8;
LABEL_6:
    uint64_t v33 = v6;
    WebCore::DocumentLoader::urlForHistory((uint64_t *)v36, (WebCore::DocumentLoader *)v5);
    uint64_t v11 = v36[0];
    if (v36[0])
    {
      int v12 = *(_DWORD *)v36[0];
      *(_DWORD *)v36[0] += 2;
      uint64_t v32 = v11;
      v36[0] = 0;
      if (v12) {
        *(_DWORD *)uint64_t v11 = v12;
      }
      else {
        WTF::StringImpl::destroy(v11, v10);
      }
    }
    else
    {
      uint64_t v32 = 0;
    }
    *(_OWORD *)long long v36 = *((_OWORD *)this[2] + 5);
    *(void *)&long long v34 = &v33;
    *((void *)&v34 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = &v32;
    uint64_t v35 = v36;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
    CFTypeRef v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)CFTypeRef v14 = 1935;
    *((void *)v14 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v13;
    *((void *)v14 + 66) = (char *)v14 + 16;
    *((void *)v14 + 67) = 512;
    *((void *)v14 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v14 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v14 + 69) = 0;
    IPC::Encoder::encodeHeader(v14);
    uint64_t v38 = v14;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul>(v14, (uint64_t **)&v34);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v9 + 32))(v9, &v38, 0);
    uint64_t v16 = v38;
    uint64_t v38 = 0;
    if (v16)
    {
      IPC::Encoder::~Encoder(v16, v15);
      WTF::fastFree(v28, v29);
    }
    uint64_t v17 = v32;
    uint64_t v32 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2) {
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v17 -= 2;
      }
    }
    uint64_t v18 = v33;
    uint64_t v33 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
  }
  WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)v36, (uint64_t)v5);
  if (v36[0])
  {
    if (*(_DWORD *)v36[0] == 2) {
      WTF::StringImpl::destroy(v36[0], v19);
    }
    else {
      *(_DWORD *)v36[0] -= 2;
    }
    uint64_t v20 = v3 + 32;
    WebCore::DocumentLoader::serverRedirectSourceForHistory((WebCore::DocumentLoader *)&v33, (uint64_t)v5);
    long long v21 = *(WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(v5 + 109));
    if (v21) {
      *(_DWORD *)v21 += 2;
    }
    uint64_t v32 = v21;
    long long v34 = *((_OWORD *)this[2] + 5);
    v36[0] = (WTF::StringImpl *)&v33;
    v36[1] = (WTF::StringImpl *)&v32;
    long long v37 = &v34;
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 56))(v3 + 32);
    uint64_t v23 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v23 = 1937;
    *((void *)v23 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v22;
    *((void *)v23 + 66) = (char *)v23 + 16;
    *((void *)v23 + 67) = 512;
    *((void *)v23 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v23 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v23 + 69) = 0;
    IPC::Encoder::encodeHeader(v23);
    uint64_t v38 = v23;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul>(v23, (uint64_t **)v36);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v20 + 32))(v3 + 32, &v38, 0);
    uint64_t v25 = v38;
    uint64_t v38 = 0;
    if (v25)
    {
      IPC::Encoder::~Encoder(v25, v24);
      WTF::fastFree(v30, v31);
    }
    char v26 = v32;
    uint64_t v32 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, (WTF::StringImpl *)v24);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    char v27 = v33;
    uint64_t v33 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2) {
        WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v24);
      }
      else {
        *(_DWORD *)v27 -= 2;
      }
    }
  }
  CFRelease(*(CFTypeRef *)(v3 + 8));
}

WTF::StringImpl *WebCore::DocumentLoader::serverRedirectSourceForHistory(WebCore::DocumentLoader *this, uint64_t a2)
{
  WebCore::DocumentLoader::urlForHistory((uint64_t *)&v14, (WebCore::DocumentLoader *)a2);
  uint64_t v4 = (const WTF::StringImpl **)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872));
  if ((WTF::equal(v14, *v4, v5) & 1) != 0
    || (int v8 = (WTF *)WebCore::ResourceRequestBase::url((WebCore::ResourceRequestBase *)(a2 + 872)),
        uint64_t v9 = (const WTF::StringImpl **)WTF::aboutBlankURL(v8),
        WTF::equal(*(WTF **)v8, *v9, v10))
    || (WebCore::DocumentLoader::urlForHistory((uint64_t *)&v13, (WebCore::DocumentLoader *)a2), (uint64_t v11 = v13) == 0))
  {
    *(void *)this = 0;
  }
  else
  {
    int v12 = *(_DWORD *)v13;
    *(_DWORD *)v13 += 2;
    *(void *)this = v11;
    uint64_t v13 = 0;
    if (v12) {
      *(_DWORD *)uint64_t v11 = v12;
    }
    else {
      WTF::StringImpl::destroy(v11, v6);
    }
  }
  uint64_t result = v14;
  CFTypeRef v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldGoToHistoryItem(WebKit::WebFrame **this, WebCore::HistoryItem *a2)
{
  uint64_t v3 = WebKit::WebFrame::page(this[2]);
  uint64_t v4 = v3;
  if (!v3) {
    return v4 != 0;
  }
  CFRetain(*(CFTypeRef *)(v3 + 8));
  uint64_t v5 = (uint64_t *)((char *)a2 + 336);
  uint64_t v6 = *((void *)a2 + 25);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 32) + 56))(v4 + 32);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 2122;
  *((void *)v8 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, v5);
  uint64_t v9 = (unsigned char *)IPC::Encoder::grow(v8, 1uLL, 1);
  if (v10)
  {
    unsigned char *v9 = v6 != 0;
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v4 + 32) + 32))(v4 + 32, &v16, 0);
    int v12 = v16;
    uint64_t v16 = 0;
    if (v12)
    {
      IPC::Encoder::~Encoder(v12, v11);
      WTF::fastFree(v14, v15);
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
    return v4 != 0;
  }
  uint64_t result = 831;
  __break(0xC471u);
  return result;
}

void WebKit::WebLocalFrameLoaderClient::didDisplayInsecureContent(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (!v2) {
    return;
  }
  uint64_t v3 = v2;
  CFRetain(*(CFTypeRef *)(v2 + 8));
  uint64_t v18 = 0;
  (*(void (**)(void, uint64_t, WebKit::WebFrame *, void **))(**(void **)(v3 + 360) + 120))(*(void *)(v3 + 360), v3, this[2], &v18);
  uint64_t v4 = v3 + 32;
  long long v17 = *((_OWORD *)this[2] + 5);
  {
    CFTypeRef v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v19 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(v18, (uint64_t)&v19, &v15);
  uint64_t v5 = v15;
  if (v15) {
    CFRetain(*(CFTypeRef *)(v15 + 8));
  }
  uint64_t v16 = v5;
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 56))(v3 + 32);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 1912;
  *((void *)v7 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v6;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  uint64_t v19 = v7;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v7, (uint64_t *)&v17);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v7, &v16);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v4 + 32))(v3 + 32, &v19, 0);
  uint64_t v9 = v19;
  uint64_t v19 = 0;
  if (v9)
  {
    IPC::Encoder::~Encoder(v9, v8);
    WTF::fastFree(v12, v13);
    if (!v5) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v5) {
LABEL_7:
  }
    CFRelease(*(CFTypeRef *)(v5 + 8));
LABEL_8:
  uint64_t v10 = v15;
  uint64_t v15 = 0;
  if (v10) {
    CFRelease(*(CFTypeRef *)(v10 + 8));
  }
  uint64_t v11 = (CFTypeRef *)v18;
  uint64_t v18 = 0;
  if (v11) {
    CFRelease(v11[1]);
  }
  CFRelease(*(CFTypeRef *)(v3 + 8));
}

void WebKit::WebLocalFrameLoaderClient::didRunInsecureContent(WebKit::WebFrame **this, WebCore::SecurityOrigin *a2)
{
  uint64_t v3 = WebKit::WebFrame::page(this[2]);
  if (!v3) {
    return;
  }
  uint64_t v4 = v3;
  CFRetain(*(CFTypeRef *)(v3 + 8));
  uint64_t v19 = 0;
  (*(void (**)(void, uint64_t, WebKit::WebFrame *, void **))(**(void **)(v4 + 360) + 128))(*(void *)(v4 + 360), v4, this[2], &v19);
  uint64_t v5 = v4 + 32;
  long long v18 = *((_OWORD *)this[2] + 5);
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v20 = (IPC::Encoder *)&unk_1EE9E6F68;
  WebKit::UserData::transform(v19, (uint64_t)&v20, &v16);
  uint64_t v6 = v16;
  if (v16) {
    CFRetain(*(CFTypeRef *)(v16 + 8));
  }
  uint64_t v17 = v6;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v4 + 32);
  int v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v8 = 1947;
  *((void *)v8 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v7;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v20 = v8;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v8, (uint64_t *)&v18);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(v8, &v17);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v5 + 32))(v4 + 32, &v20, 0);
  uint64_t v10 = v20;
  uint64_t v20 = 0;
  if (v10)
  {
    IPC::Encoder::~Encoder(v10, v9);
    WTF::fastFree(v13, v14);
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (v6) {
LABEL_7:
  }
    CFRelease(*(CFTypeRef *)(v6 + 8));
LABEL_8:
  uint64_t v11 = v16;
  uint64_t v16 = 0;
  if (v11) {
    CFRelease(*(CFTypeRef *)(v11 + 8));
  }
  int v12 = (CFTypeRef *)v19;
  uint64_t v19 = 0;
  if (v12) {
    CFRelease(v12[1]);
  }
  CFRelease(*(CFTypeRef *)(v4 + 8));
}

void WebKit::WebLocalFrameLoaderClient::cancelledError(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::blockedError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::blockedError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::blockedByContentBlockerError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::blockedByContentBlockerError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::cannotShowURLError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::cannotShowURLError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::interruptedForPolicyChangeError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::interruptedForPolicyChangeError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::blockedByContentFilterError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::blockedByContentFilterError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::cannotShowMIMETypeError@<X0>(const WebCore::ResourceResponse *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::cannotShowMIMETypeError(a1, a2);
}

void WebKit::WebLocalFrameLoaderClient::fileDoesNotExistError(const WebCore::ResourceResponse *a1@<X1>, uint64_t a2@<X8>)
{
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::httpsUpgradeRedirectLoopError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::httpsUpgradeRedirectLoopError(a1, a2);
}

WTF::StringImpl *WebKit::WebLocalFrameLoaderClient::httpNavigationWithHTTPSOnlyError@<X0>(const WebCore::ResourceRequest *a1@<X1>, uint64_t a2@<X8>)
{
  return WebKit::httpNavigationWithHTTPSOnlyError(a1, a2);
}

BOOL WebKit::WebLocalFrameLoaderClient::shouldFallBack(WebKit::WebLocalFrameLoaderClient *this, const WebCore::ResourceError *a2)
{
  if ((_MergedGlobals_111 & 1) == 0)
  {
    WebCore::ResourceRequest::ResourceRequest((StringImpl *)v18);
    WebKit::cancelledError((WebKit *)v18, (uint64_t)&v23);
    uint64_t v8 = (uint64_t)v23;
    uint64_t v23 = 0;
    qword_1EB359EA0 = v8;
    WTF::URL::URL((uint64_t)&unk_1EB359EA8, v24);
    uint64_t v10 = (WTF::StringImpl *)v24[0];
    qword_1EB359ED0 = v25;
    dword_1EB359ED8 = v26;
    word_1EB359EDC = v27;
    qword_1EB359EE0 = v28;
    byte_1EB359EE8 = v29;
    uint64_t v28 = 0;
    uint64_t v25 = 0;
    v24[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2) {
        WTF::StringImpl::destroy(v10, v9);
      }
      else {
        *(_DWORD *)v10 -= 2;
      }
    }
    CFTypeRef v14 = v23;
    uint64_t v23 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v9);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    CFTypeRef v16 = cf;
    CFTypeRef cf = 0;
    if (v16) {
      CFRelease(v16);
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v18);
    _MergedGlobals_111 = 1;
  }
  if ((byte_1EB359E99 & 1) == 0)
  {
    WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v18);
    CFTypeRef v21 = 0;
    char v22 = 0;
    char v19 = v19 & 0xF1 | 4;
    WebKit::pluginWillHandleLoadError((WebKit *)v18, (uint64_t)&v23);
    uint64_t v11 = (uint64_t)v23;
    uint64_t v23 = 0;
    qword_1EB359EF0 = v11;
    WTF::URL::URL((uint64_t)&unk_1EB359EF8, v24);
    uint64_t v13 = (WTF::StringImpl *)v24[0];
    qword_1EB359F20 = v25;
    dword_1EB359F28 = v26;
    word_1EB359F2C = v27;
    qword_1EB359F30 = v28;
    byte_1EB359F38 = v29;
    uint64_t v28 = 0;
    uint64_t v25 = 0;
    v24[0] = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2) {
        WTF::StringImpl::destroy(v13, v12);
      }
      else {
        *(_DWORD *)v13 -= 2;
      }
    }
    uint64_t v15 = v23;
    uint64_t v23 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2) {
        WTF::StringImpl::destroy(v15, v12);
      }
      else {
        *(_DWORD *)v15 -= 2;
      }
    }
    CFTypeRef v17 = v21;
    CFTypeRef v21 = 0;
    if (v17) {
      CFRelease(v17);
    }
    WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v18, v12);
    byte_1EB359E99 = 1;
  }
  MEMORY[0x19973EC60](a2);
  int v3 = *((_DWORD *)a2 + 14);
  MEMORY[0x19973EC60](&qword_1EB359EA0);
  BOOL result = 0;
  if (v3 != dword_1EB359ED8
    || (MEMORY[0x19973EC60](a2),
        MEMORY[0x19973EC60](&qword_1EB359EA0),
        (WTF::equal(*(WTF **)a2, (const WTF::StringImpl *)qword_1EB359EA0, v4) & 1) == 0))
  {
    MEMORY[0x19973EC60](a2);
    int v5 = *((_DWORD *)a2 + 14);
    MEMORY[0x19973EC60](&qword_1EB359EF0);
    if (v5 != dword_1EB359F28) {
      return 1;
    }
    MEMORY[0x19973EC60](a2);
    MEMORY[0x19973EC60](&qword_1EB359EF0);
    if ((WTF::equal(*(WTF **)a2, (const WTF::StringImpl *)qword_1EB359EF0, v6) & 1) == 0) {
      return 1;
    }
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canHandleRequest(WebKit::WebLocalFrameLoaderClient *this, const ResourceRequest *a2)
{
  return 1;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canShowMIMEType(WebKit::WebLocalFrameLoaderClient *this, const WTF::String *a2)
{
  return 1;
}

uint64_t WebKit::WebLocalFrameLoaderClient::canShowMIMETypeAsHTML(WebKit::WebLocalFrameLoaderClient *this, const WTF::String *a2)
{
  return 1;
}

uint64_t WebKit::WebLocalFrameLoaderClient::representationExistsForURLScheme()
{
  return 0;
}

IPC::Encoder *IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(os_unfair_lock_s *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9F6BB0;
  v6[1] = v5;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 287;
  *((void *)v8 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v15 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, *a2);
  v14[0] = (uint64_t)v6;
  v14[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v15, v14, 0, 0);
  uint64_t v10 = v14[0];
  v14[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  BOOL result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::generatedMIMETypeForURLScheme(void *a1@<X8>)
{
  *a1 = 0;
}

double WebKit::WebLocalFrameLoaderClient::saveViewStateToItem(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(WebKit::WebFrame **)(a1 + 16);
  uint64_t v3 = *((void *)v2 + 3);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      if (*(void *)(*(void *)(v4 + 128) + 8) == v4)
      {
        uint64_t v6 = WebKit::WebFrame::page(v2);
        *(unsigned char *)(a2 + 28IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = *(unsigned char *)(v6 + 1283) ^ 1;
        double result = *(double *)(v6 + 1072);
        *(double *)(a2 + 244) = result;
        *(void *)(a2 + 25WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = *(void *)(v6 + 1064);
      }
    }
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::restoreViewState(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 88) + 8);
  uint64_t v2 = *(WebCore::LocalFrameView **)(v1 + 288);
  if (v2)
  {
    uint64_t v3 = *(const WebCore::HistoryItem **)(*(void *)(v1 + 184) + 16);
    uint64_t v4 = *(WebKit::WebFrame **)(this + 16);
    uint64_t v5 = *((void *)v4 + 3);
    if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0 && *(void *)(*(void *)(v6 + 128) + 8) == v6)
    {
      uint64_t v7 = (WebKit::WebPage *)WebKit::WebFrame::page(v4);
      return (uint64_t)WebKit::WebPage::restorePageState(v7, v3);
    }
    else
    {
      this = WebCore::LocalFrameView::wasScrolledByUser(v2);
      if ((this & 1) == 0)
      {
        WebCore::HistoryItem::scrollPosition(v3);
        return WebCore::LocalFrameView::setScrollPosition();
      }
    }
  }
  return this;
}

void WebKit::WebLocalFrameLoaderClient::provisionalLoadStarted(WebKit::WebFrame **this)
{
  uint64_t v2 = WebKit::WebFrame::page(this[2]);
  if (v2)
  {
    uint64_t v3 = (WebKit::WebPage *)v2;
    CFRetain(*(CFTypeRef *)(v2 + 8));
    uint64_t v4 = *((void *)this[2] + 3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        if (*(void *)(*(void *)(v5 + 128) + 8) == v5)
        {
          WebKit::WebPage::didStartPageTransition(v3);
          *((unsigned char *)this + 49) = 0;
        }
      }
    }
    uint64_t v6 = (const void *)*((void *)v3 + 1);
    CFRelease(v6);
  }
}

void *WebKit::WebLocalFrameLoaderClient::didFinishLoad(void *this)
{
  uint64_t v1 = *(void *)(this[2] + 72);
  if (v1)
  {
    this = *(void **)(v1 + 8);
    if (this) {
      return (void *)(*(uint64_t (**)(void))(*this + 16))();
    }
  }
  return this;
}

uint64_t WebKit::WebLocalFrameLoaderClient::updateCachedDocumentLoader(WebKit::WebFrame **this, WebCore::DocumentLoader *a2)
{
  uint64_t result = WebKit::WebFrame::page(this[2]);
  if (*(void *)(result + 1888))
  {
    if (*(void *)(*(void *)(*((void *)this[11] + 1) + 128) + 8) == *((void *)this[11] + 1))
    {
      uint64_t v4 = result;
      uint64_t result = WebCore::DocumentLoader::setNavigationID();
      *(void *)(v4 + 188++*(_DWORD *)(this + 8) = 0;
    }
  }
  return result;
}

void WebKit::WebLocalFrameLoaderClient::setTitle(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v6)
  {
    uint64_t v7 = v6;
    CFRetain(*(CFTypeRef *)(v6 + 8));
    long long v14 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
    v15[0] = a2;
    v15[1] = a3;
    uint64_t v15[2] = (uint64_t *)&v14;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(v7 + 32) + 56))(v7 + 32);
    uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v9 = 1955;
    *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v8;
    *((void *)v9 + 66) = (char *)v9 + 16;
    *((void *)v9 + 67) = 512;
    *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v9 + 69) = 0;
    IPC::Encoder::encodeHeader(v9);
    CFTypeRef v16 = v9;
    IPC::ArgumentCoder<std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::URL const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>,0ul,1ul,2ul>(v9, v15);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v7 + 32) + 32))(v7 + 32, &v16, 0);
    uint64_t v11 = v16;
    CFTypeRef v16 = 0;
    if (v11)
    {
      IPC::Encoder::~Encoder(v11, v10);
      WTF::fastFree(v12, v13);
    }
    CFRelease(*(CFTypeRef *)(v7 + 8));
  }
}

BOOL WebKit::WebLocalFrameLoaderClient::hasCustomUserAgent(WebKit::WebFrame **this)
{
  uint64_t v1 = WebKit::WebFrame::page(this[2]);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  CFRetain(*(CFTypeRef *)(v1 + 8));
  BOOL v3 = *(unsigned char *)(v2 + 112) != 0;
  CFRelease(*(CFTypeRef *)(v2 + 8));
  return v3;
}

void WebKit::WebLocalFrameLoaderClient::userAgent(WebKit::WebFrame **this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = WebKit::WebFrame::page(this[2]);
  if (v4)
  {
    uint64_t v5 = v4;
    CFRetain(*(CFTypeRef *)(v4 + 8));
    uint64_t v6 = *(_DWORD **)(v5 + 104);
    if (v6) {
      *v6 += 2;
    }
    *a2 = v6;
    uint64_t v7 = *(const void **)(v5 + 8);
    CFRelease(v7);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::transitionToCommittedFromCachedFrame(uint64_t a1)
{
  uint64_t v2 = *(WebKit::WebFrame **)(a1 + 16);
  uint64_t v3 = *((void *)v2 + 3);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0 && *(void *)(*(void *)(v4 + 128) + 8) == v4)
  {
    uint64_t v6 = (const WebCore::ResourceResponse *)(*(void *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280)
                                                       + 88)
                                           + 1272);
    uint64_t v7 = (WebKit::WebPage *)WebKit::WebFrame::page(v2);
    uint64_t result = WebKit::WebPage::shouldUseCustomContentProviderForResponse(v7, v6);
  }
  else
  {
    uint64_t result = 0;
  }
  *(unsigned char *)(a1 + 5IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = result;
  *(unsigned char *)(a1 + 5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 1;
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::didRestoreFromBackForwardCache(uint64_t this)
{
  *(unsigned char *)(this + 5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 1;
  return this;
}

BOOL WebKit::WebLocalFrameLoaderClient::canCachePage(WebKit::WebLocalFrameLoaderClient *this)
{
  return *((unsigned char *)this + 50) == 0;
}

IPC::Encoder *WebKit::WebLocalFrameLoaderClient::convertMainResourceLoadToDownload(IPC::Encoder **this, WebCore::DocumentLoader *a2, const WebCore::ResourceRequest *a3, const WebCore::ResourceResponse *a4)
{
  return WebKit::WebFrame::convertMainResourceLoadToDownload(this[2], a2, a3, a4);
}

void WebKit::WebLocalFrameLoaderClient::createFrame(WebKit::WebFrame **this@<X0>, const WTF::AtomString *a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = WebKit::WebFrame::page(this[2]);
  uint64_t v8 = (CFTypeRef *)v7;
  if (v7) {
    CFRetain(*(CFTypeRef *)(v7 + 8));
  }
  WebKit::WebFrame::createSubframe((WebKit::WebFrame *)v8, this[2], a2, &v13);
  uint64_t v9 = v13;
  uint64_t v10 = *(void *)(v13 + 24);
  if (v10
    && (uint64_t v11 = *(void *)(v10 + 8)) != 0
    && !*(unsigned char *)(v11 + 144)
    && (uint64_t v12 = *(void *)(v11 + 24)) != 0
    && *(void *)(v12 + 8))
  {
    atomic_fetch_add((atomic_uint *volatile)(v11 + 8), 1u);
    uint64_t v9 = v13;
    *a3 = v11;
    uint64_t v13 = 0;
    if (!v9) {
      goto LABEL_8;
    }
  }
  else
  {
    *a3 = 0;
    uint64_t v13 = 0;
  }
  CFRelease(*(CFTypeRef *)(v9 + 8));
LABEL_8:
  CFRelease(v8[1]);
}

unsigned int *WebKit::WebLocalFrameLoaderClient::createPlugin@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, WTF::URL *a3@<X2>, WebCore::MIMETypeRegistry *a4@<X5>, int a5@<W6>, uint64_t *a6@<X8>)
{
  if (a5) {
    char v6 = *(unsigned char *)(a1 + 51) == 0;
  }
  else {
    char v6 = 0;
  }
  return WebKit::PluginView::create(a2, a3, a4, v6, a6);
}

_DWORD *WebKit::WebLocalFrameLoaderClient::redirectDataToPlugin(WebKit::WebLocalFrameLoaderClient *this, WebCore::Widget *a2)
{
  ++*((_DWORD *)a2 + 2);
  uint64_t result = (_DWORD *)*((void *)this + 5);
  *((void *)this + 5) = a2;
  if (result)
  {
    if (result[2] == 1) {
      return (_DWORD *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
    else {
      --result[2];
    }
  }
  return result;
}

uint64_t WebKit::WebLocalFrameLoaderClient::objectContentType(WebKit::WebFrame **this, const WTF::URL *a2, WTF::StringImpl **a3)
{
  uint64_t v4 = *a3;
  if (*a3)
  {
    *(_DWORD *)v4 += 2;
    int v26 = v4;
    if (*((_DWORD *)v4 + 1)) {
      goto LABEL_3;
    }
  }
  else
  {
    int v26 = 0;
  }
  uint64_t v9 = WTF::URL::path(a2);
  v25[0] = v9;
  v25[1] = a2;
  if (((unint64_t)a2 & 0xFF00000000) != 0)
  {
    if (a2)
    {
      uint64_t v10 = a2 - 1;
      while (*(unsigned char *)(v9 + v10) != 46)
      {
        if (--v10 == -1) {
          goto LABEL_21;
        }
      }
      goto LABEL_27;
    }
LABEL_21:
    LOBYTE(v5) = 2;
    goto LABEL_22;
  }
  if (!a2) {
    goto LABEL_21;
  }
  uint64_t v10 = a2 - 1;
  while (*(_WORD *)(v9 + 2 * v10) != 46)
  {
    if (--v10 == -1) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __int16 v27 = (WTF::StringImpl *)WTF::StringView::substring((const char *)v25, (int)v10 + 1, 0xFFFFFFFF);
  uint64_t v28 = v13;
  WTF::StringView::convertToASCIILowercase((uint64_t *)&v24, (WTF::StringView *)&v27);
  WebCore::MIMETypeRegistry::mimeTypeForExtension();
  uint64_t v5 = v27;
  int v26 = v27;
  __int16 v27 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
    {
      WTF::StringImpl::destroy(v4, a2);
      long long v14 = v27;
      __int16 v27 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2) {
          WTF::StringImpl::destroy(v14, a2);
        }
        else {
          *(_DWORD *)v14 -= 2;
        }
      }
    }
    else
    {
      *(_DWORD *)v4 -= 2;
    }
  }
  if (v5 && *((_DWORD *)v5 + 1))
  {
    LODWORD(v15) = 1;
  }
  else
  {
    uint64_t v16 = WebKit::WebFrame::page(this[2]);
    uint64_t v15 = v16;
    if (v16)
    {
      CFRetain(*(CFTypeRef *)(v16 + 8));
      CFTypeRef v17 = (WebCore::PluginData *)WebCore::Page::pluginData(*(WebCore::Page **)(v15 + 48));
      WebCore::PluginData::webVisibleMimeTypes((uint64_t *)&v27, v17);
      if (HIDWORD(v28))
      {
        uint64_t v20 = v27;
        CFTypeRef v21 = (WTF::StringImpl *)((char *)v27 + 32 * HIDWORD(v28));
        while (!*((_DWORD *)v20 + 7))
        {
LABEL_44:
          uint64_t v20 = (WTF::StringImpl *)((char *)v20 + 32);
          if (v20 == v21) {
            goto LABEL_45;
          }
        }
        uint64_t v22 = 0;
        while ((WTF::equal(*(WTF **)(*((void *)v20 + 2) + 8 * v22), v24, v19) & 1) == 0)
        {
          if (++v22 >= (unint64_t)*((unsigned int *)v20 + 7)) {
            goto LABEL_44;
          }
        }
        WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v18);
        LOBYTE(v5) = 3;
      }
      else
      {
LABEL_45:
        WTF::Vector<WebCore::MimeClassInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v18);
        LOBYTE(v5) = 2;
      }
      CFRelease(*(CFTypeRef *)(v15 + 8));
      LODWORD(v15) = 0;
    }
    else
    {
      LOBYTE(v5) = 2;
    }
  }
  uint64_t v23 = v24;
  uint64_t v24 = 0;
  if (!v23)
  {
LABEL_51:
    if (!v15) {
      goto LABEL_22;
    }
LABEL_3:
    if (WebCore::MIMETypeRegistry::isSupportedImageMIMEType((WebCore::MIMETypeRegistry *)&v26, a2))
    {
      LOBYTE(v5) = 1;
      goto LABEL_22;
    }
    uint64_t v6 = WebKit::WebFrame::page(this[2]);
    if (v6)
    {
      uint64_t v7 = v6;
      CFRetain(*(CFTypeRef *)(v6 + 8));
      WebCore::Page::pluginData(*(WebCore::Page **)(v7 + 48));
      char v8 = WebCore::PluginData::supportsMimeType();
      CFRelease(*(CFTypeRef *)(v7 + 8));
      if (v8)
      {
        LOBYTE(v5) = 3;
        goto LABEL_22;
      }
    }
    if ((WebCore::MIMETypeRegistry::isSupportedNonImageMIMEType((WebCore::MIMETypeRegistry *)&v26, a2) & 1) == 0)
    {
      LOBYTE(v5) = WebCore::MIMETypeRegistry::isPDFMIMEType((WebCore::MIMETypeRegistry *)&v26, a2);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    goto LABEL_51;
  }
  WTF::StringImpl::destroy(v23, a2);
  if (v15) {
    goto LABEL_3;
  }
LABEL_22:
  uint64_t v11 = v26;
  int v26 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2) {
      WTF::StringImpl::destroy(v11, a2);
    }
    else {
      *(_DWORD *)v11 -= 2;
    }
  }
  return v5;
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidClearWindowObjectInWorld(WebKit::WebLocalFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          char v8 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              (*(void (**)(void, uint64_t, void, WebCore::DOMWrapperWorld *))(**(void **)(v9 + 344)
                                                                                          + 168))(*(void *)(v9 + 344), v9 - 16, *((void *)this + 2), a2);
              {
                uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                WebKit::WebProcess::WebProcess(v12);
              }
              uint64_t v10 = *(WebKit::WebAutomationSessionProxy **)(WebKit::WebProcess::singleton(void)::process + 496);
              if (v10 && !*((_DWORD *)a2 + 12)) {
                WebKit::WebAutomationSessionProxy::didClearWindowObjectForFrame(v10, *((WebKit::WebFrame **)this + 2));
              }
              uint64_t v11 = *(const void **)(v9 - 8);
              CFRelease(v11);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchGlobalObjectAvailable(WebKit::WebLocalFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          char v8 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              uint64_t v10 = *(unsigned int ***)(v9 + 616);
              if (v10)
              {
                uint64_t v11 = v10 + 2;
                ++*((_DWORD *)v10 + 4);
                WebKit::WebExtensionControllerProxy::globalObjectIsAvailableForFrame((WebKit::WebExtensionControllerProxy *)v10, (WebKit::WebPage *)(v9 - 16), *((WebKit::WebFrame **)this + 2), a2);
                WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v11);
              }
              (*(void (**)(void, uint64_t, void, WebCore::DOMWrapperWorld *))(**(void **)(v9 + 344)
                                                                                          + 200))(*(void *)(v9 + 344), v9 - 16, *((void *)this + 2), a2);
              uint64_t v12 = *(const void **)(v9 - 8);
              CFRelease(v12);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchServiceWorkerGlobalObjectAvailable(WebKit::WebLocalFrameLoaderClient *this, WebCore::DOMWrapperWorld *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          char v8 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              uint64_t v10 = *(unsigned int ***)(v9 + 616);
              if (v10)
              {
                uint64_t v11 = v10 + 2;
                ++*((_DWORD *)v10 + 4);
                WebKit::WebExtensionControllerProxy::serviceWorkerGlobalObjectIsAvailableForFrame((WebKit::WebExtensionControllerProxy *)v10, (WebKit::WebPage *)(v9 - 16), *((WebKit::WebFrame **)this + 2), a2);
                WTF::RefCounted<WebKit::WebExtensionControllerProxy>::deref(v11);
              }
              (*(void (**)(void, uint64_t, void, WebCore::DOMWrapperWorld *))(**(void **)(v9 + 344)
                                                                                          + 208))(*(void *)(v9 + 344), v9 - 16, *((void *)this + 2), a2);
              uint64_t v12 = *(const void **)(v9 - 8);
              CFRelease(v12);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::willInjectUserScript(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          char v8 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(v9 + 344) + 240))(*(void *)(v9 + 344), v9 - 16, *(void *)(a1 + 16), a2);
              uint64_t v10 = *(const void **)(v9 - 8);
              CFRelease(v10);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillDisconnectDOMWindowExtensionFromGlobalObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v7 + 1368))(v7) & 1) == 0)
          {
            uint64_t v8 = *(void *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 344) + 216))(*(void *)(v8 + 344), v8 - 16, a2);
              uint64_t v9 = *(const void **)(v8 - 8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchDidReconnectDOMWindowExtensionToGlobalObject(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v7 + 1368))(v7) & 1) == 0)
          {
            uint64_t v8 = *(void *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 344) + 224))(*(void *)(v8 + 344), v8 - 16, a2);
              uint64_t v9 = *(const void **)(v8 - 8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::dispatchWillDestroyGlobalObjectForDOMWindowExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v7 + 1368))(v7) & 1) == 0)
          {
            uint64_t v8 = *(void *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v8 + 344) + 232))(*(void *)(v8 + 344), v8 - 16, a2);
              uint64_t v9 = *(const void **)(v8 - 8);
              CFRelease(v9);
            }
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::accessibilityRemoteFrameOffset(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v5 + 1368))(v5) & 1) == 0)
          {
            uint64_t v6 = *(void *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              CFRelease(*(CFTypeRef *)(v6 - 8));
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::accessibilityRemoteObject(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v5 + 1368))(v5) & 1) == 0)
          {
            uint64_t v6 = *(void *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              CFRelease(*(CFTypeRef *)(v6 - 8));
            }
          }
        }
      }
    }
  }
  return 0;
}

void WebKit::WebLocalFrameLoaderClient::willCacheResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v7
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && (uint64_t v9 = *(void *)(v8 + 24)) != 0
    && (uint64_t v10 = *(void *)(v9 + 8)) != 0
    && (uint64_t v13 = *(void **)(*(void *)(v10 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v13 + 1368))(v13) & 1) == 0)
    && (uint64_t v14 = *(void *)(v13[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v14 - 8));
    if ((*(unsigned int (**)(void, uint64_t, void, uint64_t))(**(void **)(v14 + 352) + 64))(*(void *)(v14 + 352), v14 - 16, *(void *)(a1 + 16), a3))
    {
      uint64_t v15 = a4;
    }
    else
    {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v15);
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    CFTypeRef v17 = *(const void **)(v14 - 8);
    CFRelease(v17);
  }
  else
  {
    uint64_t v18 = *a5;
    *a5 = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, a4);
    char v19 = *(void (**)(uint64_t))(*(void *)v18 + 8);
    v19(v18);
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::dataDetectionReferenceDate(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v5 + 1368))(v5)) {
    return 0;
  }
  uint64_t v6 = *(void *)(v5[2] + 8);
  if (!v6) {
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v6 - 8));
  uint64_t v7 = *(void *)(v6 + 264);
  CFRelease(*(CFTypeRef *)(v6 - 8));
  return v7;
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldForceUniversalAccessFromLocalURL(WebKit::WebLocalFrameLoaderClient *this, const URL *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v7 + 1368))(v7)) {
    return 0;
  }
  uint64_t v8 = *(void *)(v7[2] + 8);
  if (!v8) {
    return 0;
  }
  CFRetain(*(CFTypeRef *)(v8 - 8));
  uint64_t v9 = (*(uint64_t (**)(void, uint64_t, const URL *))(**(void **)(v8 + 344) + 248))(*(void *)(v8 + 344), v8 - 16, a2);
  CFRelease(*(CFTypeRef *)(v8 - 8));
  return v9;
}

uint64_t WebKit::WebLocalFrameLoaderClient::contentFilterDidBlockLoad(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t result = WebCore::ContentFilterUnblockHandler::needsUIProcess((WebCore::ContentFilterUnblockHandler *)a2);
  if (result)
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 8);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 24);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 8);
          if (v8)
          {
            uint64_t v9 = *(void **)(*(void *)(v8 + 48) + 16);
            uint64_t result = (*(uint64_t (**)(void *))(*v9 + 1368))(v9);
            if ((result & 1) == 0)
            {
              uint64_t v10 = *(void *)(v9[2] + 8);
              if (v10)
              {
                long long v29 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
                uint64_t v12 = *(void *)(v10 + 16);
                uint64_t v11 = v10 + 16;
                uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
                uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                *(_WORD *)uint64_t v14 = 1883;
                *((void *)v14 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v13;
                *((void *)v14 + 66) = (char *)v14 + 16;
                *((void *)v14 + 67) = 512;
                *((void *)v14 + 6++*(_DWORD *)(this + 8) = 0;
                *((void *)v14 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
                *((void *)v14 + 69) = 0;
                IPC::Encoder::encodeHeader(v14);
                uint64_t v30 = v14;
                IPC::ArgumentCoder<WebCore::ContentFilterUnblockHandler,void>::encode(v14, a2);
                IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v14, (uint64_t *)&v29);
                (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v11 + 32))(v11, &v30, 0);
                uint64_t result = (uint64_t)v30;
                uint64_t v30 = 0;
                if (result)
                {
                  IPC::Encoder::~Encoder((IPC::Encoder *)result, v15);
                  return WTF::fastFree(v16, v17);
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v18 = *(void *)(*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 280) + 24);
    char v19 = *(WTF::StringImpl **)a2;
    *(void *)a2 = 0;
    uint64_t v31 = v19;
    WTF::URL::URL((uint64_t)v32, (uint64_t *)(a2 + 8));
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::__value_func[abi:sn180100]((uint64_t)v33, a2 + 48);
    CFTypeRef v21 = *(const void **)(a2 + 80);
    *(void *)(a2 + 8IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    char v35 = *(unsigned char *)(a2 + 88);
    uint64_t v22 = v31;
    CFTypeRef cf = v21;
    uint64_t v31 = 0;
    uint64_t v23 = *(WTF::StringImpl **)(v18 + 32);
    *(void *)(v18 + ++*(_DWORD *)(this + 32) = v22;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v20);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    WTF::URL::operator=(v18 + 40, (uint64_t)v32);
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::operator=[abi:sn180100]((void *)(v18 + 80), (uint64_t)v33);
    CFTypeRef v24 = cf;
    CFTypeRef cf = 0;
    uint64_t v25 = *(const void **)(v18 + 112);
    *(void *)(v18 + 11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v24;
    if (v25)
    {
      CFRelease(v25);
      CFTypeRef v26 = cf;
      *(unsigned char *)(v18 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v35;
      CFTypeRef cf = 0;
      if (v26) {
        CFRelease(v26);
      }
    }
    else
    {
      *(unsigned char *)(v18 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v35;
      CFTypeRef cf = 0;
    }
    std::__function::__value_func<void ()(std::function<void ()(BOOL)>)>::~__value_func[abi:sn180100](v33);
    uint64_t v28 = v32[0];
    v32[0] = 0;
    if (v28)
    {
      if (*(_DWORD *)v28 == 2) {
        WTF::StringImpl::destroy(v28, v27);
      }
      else {
        *(_DWORD *)v28 -= 2;
      }
    }
    uint64_t result = (uint64_t)v31;
    uint64_t v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t *WebKit::WebLocalFrameLoaderClient::prefetchDNS(WebKit::WebLocalFrameLoaderClient *this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  {
    uint64_t v5 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v5);
  }
  uint64_t v3 = (uint64_t *)WebKit::WebProcess::singleton(void)::process;

  return WebKit::WebProcess::prefetchDNS(v3, a2, a3);
}

void WebKit::WebLocalFrameLoaderClient::sendH2Ping(uint64_t a1, const String *a2, uint64_t *a3)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v5
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (uint64_t v7 = *(void *)(v6 + 24)) != 0
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && (uint64_t v10 = *(void **)(*(void *)(v8 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v10 + 1368))(v10) & 1) == 0)
    && (uint64_t v11 = *(void *)(v10[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v11 - 8));
    WebKit::NetworkResourceLoadParameters::NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v62);
    WebCore::ResourceRequestBase::ResourceRequestBase((uint64_t)v47, a2, 0);
    CFTypeRef v60 = 0;
    WebCore::ResourceRequestBase::RequestData::operator=((uint64_t)&v67, (uint64_t)v47);
    uint64_t v13 = v55;
    uint64_t v55 = 0;
    uint64_t v14 = v68;
    __int16 v68 = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2) {
        WTF::StringImpl::destroy(v14, v12);
      }
      else {
        *(_DWORD *)v14 -= 2;
      }
    }
    uint64_t v22 = v56;
    char v56 = 0;
    uint64_t v23 = v69;
    uint64_t v69 = v22;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2) {
        WTF::StringImpl::destroy(v23, v12);
      }
      else {
        *(_DWORD *)v23 -= 2;
      }
    }
    CFTypeRef v24 = v57;
    int v57 = 0;
    uint64_t v25 = v70;
    __int16 v70 = v24;
    if (v25) {
      WTF::RefCounted<WebCore::FormData>::deref(v25);
    }
    uint64_t v71 = v58;
    char v72 = v59;
    CFTypeRef v26 = v60;
    CFTypeRef v60 = 0;
    CFTypeRef v27 = cf;
    CFTypeRef cf = v26;
    if (v27)
    {
      CFRelease(v27);
      CFTypeRef v44 = v60;
      CFTypeRef v60 = 0;
      if (v44) {
        CFRelease(v44);
      }
    }
    WebCore::ResourceRequestBase::~ResourceRequestBase((WebCore::ResourceRequestBase *)v47);
    char v76 = (WebCore *)WTF::ObjectIdentifierGeneric<WebCore::ResourceLoader,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v28 = *(void *)(v11 + 24);
    *(void *)&long long v62 = *(void *)(v11 + 2104);
    *((void *)&v62 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v28;
    long long v63 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
    *(_DWORD *)char v65 = WebCore::presentingApplicationPID(v76);
    {
      __int16 v45 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v45);
    }
    uint64_t v29 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    char v30 = *(unsigned char *)(v29 + 64);
    long long v31 = *(_OWORD *)(v29 + 48);
    *(_OWORD *)&v65[4] = *(_OWORD *)(v29 + 32);
    *(_OWORD *)&v65[20] = v31;
    char v66 = v30;
    char v74 = 1;
    char v77 = 0;
    __int16 isTopFrameNavigatingToAppBoundDomain = WebKit::WebFrame::isTopFrameNavigatingToAppBoundDomain(*(WebKit::WebFrame **)(a1 + 16));
    {
      __n128 v46 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v46);
    }
    uint64_t v32 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                               + 24);
    uint64_t v33 = *a3;
    *a3 = 0;
    long long v34 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)long long v34 = &unk_1EE9F6BD8;
    *((void *)v34 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v33;
    char v35 = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    uint64_t v36 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v36 = 278;
    *((void *)v36 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    *((void *)v36 + 66) = (char *)v36 + 16;
    *((void *)v36 + 67) = 512;
    *((void *)v36 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v36 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v36 + 69) = 0;
    IPC::Encoder::encodeHeader(v36);
    long long v61 = v36;
    IPC::ArgumentCoder<WebKit::NetworkResourceLoadParameters,void>::encode(v36, (uint64_t)&v62);
    v47[0] = v34;
    v47[1] = v35;
    IPC::Connection::sendMessageWithAsyncReply(v32, &v61, (uint64_t *)v47, 0, 0);
    uint64_t v38 = v47[0];
    v47[0] = 0;
    if (v38) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v38 + 8))(v38);
    }
    uint64_t v39 = v61;
    long long v61 = 0;
    if (v39)
    {
      IPC::Encoder::~Encoder(v39, v37);
      WTF::fastFree(v42, v43);
    }
    WebKit::NetworkResourceLoadParameters::~NetworkResourceLoadParameters((WebKit::NetworkResourceLoadParameters *)&v62, (WTF::StringImpl *)v37);
    CFRelease(*(CFTypeRef *)(v11 - 8));
  }
  else
  {
    WebCore::createInternalError();
    uint64_t v15 = v50;
    *(_WORD *)&v65[12] = v52;
    *(_DWORD *)&char v65[8] = v51;
    CFTypeRef v16 = v53;
    char v50 = 0;
    CFTypeRef v53 = 0;
    long long v17 = *(_OWORD *)v47;
    v47[0] = 0;
    v47[1] = 0;
    long long v62 = v17;
    long long v63 = v48;
    LODWORD(v4++*(_DWORD *)(this + 8) = v48 & 0xFFFFFFFE;
    long long v64 = v49;
    *(void *)char v65 = v15;
    *(void *)&v65[16] = v16;
    v65[24] = v54;
    *(_DWORD *)&v65[32] = 1;
    uint64_t v18 = *a3;
    *a3 = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v18 + 16))(v18, &v62);
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
    if (*(_DWORD *)&v65[32] != -1) {
      ((void (*)(IPC::Encoder **, long long *))off_1EE9F6B18[*(unsigned int *)&v65[32]])(&v61, &v62);
    }
    *(_DWORD *)&v65[32] = -1;
    CFTypeRef v20 = v53;
    CFTypeRef v53 = 0;
    if (v20) {
      CFRelease(v20);
    }
    CFTypeRef v21 = v50;
    char v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2) {
        WTF::StringImpl::destroy(v21, v19);
      }
      else {
        *(_DWORD *)v21 -= 2;
      }
    }
    uint64_t v40 = v47[1];
    v47[1] = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2) {
        WTF::StringImpl::destroy(v40, v19);
      }
      else {
        *(_DWORD *)v40 -= 2;
      }
    }
    char v41 = v47[0];
    v47[0] = 0;
    if (v41)
    {
      if (*(_DWORD *)v41 == 2) {
        WTF::StringImpl::destroy(v41, v19);
      }
      else {
        *(_DWORD *)v41 -= 2;
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::didRestoreScrollPosition(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v5 + 1368))(v5) & 1) == 0)
          {
            uint64_t v6 = *(void *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              WebKit::WebPage::didRestoreScrollPosition((WebKit::WebPage *)(v6 - 16));
              uint64_t v7 = *(const void **)(v6 - 8);
              CFRelease(v7);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::getLoadDecisionForIcons(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = WebKit::WebFrame::page(*(WebKit::WebFrame **)(a1 + 16));
  if (v3)
  {
    uint64_t v4 = v3;
    CFRetain(*(CFTypeRef *)(v3 + 8));
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    if (v5)
    {
      uint64_t v6 = *(uint64_t **)a2;
      uint64_t v7 = *(void *)a2 + 16 * v5;
      while (1)
      {
        uint64_t v8 = v6[1];
        if ((unint64_t)(v8 - 1) >= 0xFFFFFFFFFFFFFFFELL) {
          break;
        }
        uint64_t v9 = *v6;
        v6 += 2;
        uint64_t v10 = v8;
        v11[0] = v9;
        v11[1] = (uint64_t)&v10;
        IPC::MessageSender::send<Messages::WebPageProxy::GetLoadDecisionForIcon>(v4 + 32, v11);
        if (v6 == (uint64_t *)v7) {
          goto LABEL_3;
        }
      }
      __break(0xC471u);
    }
    else
    {
LABEL_3:
      CFRelease(*(CFTypeRef *)(v4 + 8));
    }
  }
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::GetLoadDecisionForIcon>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::GetLoadDecisionForIcon>(a1, a2, v4);
}

void WebKit::WebLocalFrameLoaderClient::broadcastMainFrameURLChangeToOtherProcesses(WebKit::WebLocalFrameLoaderClient *this, const WTF::URL *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v7 + 1368))(v7) & 1) == 0)
          {
            uint64_t v8 = *(void *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 16) + 56))(v8 + 16);
              uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v10 = 1874;
              *((void *)v10 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v9;
              *((void *)v10 + 66) = (char *)v10 + 16;
              *((void *)v10 + 67) = 512;
              *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v10 + 69) = 0;
              IPC::Encoder::encodeHeader(v10);
              uint64_t v15 = v10;
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a2);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v8 + 16) + 32))(v8 + 16, &v15, 0);
              uint64_t v12 = v15;
              uint64_t v15 = 0;
              if (v12)
              {
                IPC::Encoder::~Encoder(v12, v11);
                WTF::fastFree(v13, v14);
              }
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::didFinishServiceWorkerPageRegistration(WebKit::WebLocalFrameLoaderClient *this, char a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v7 + 1368))(v7) & 1) == 0)
          {
            uint64_t v8 = *(void *)(v7[2] + 8);
            if (v8)
            {
              CFRetain(*(CFTypeRef *)(v8 - 8));
              char v15 = a2;
              uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(v8 + 16) + 56))(v8 + 16);
              uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v10 = 1924;
              *((void *)v10 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v9;
              *((void *)v10 + 66) = (char *)v10 + 16;
              *((void *)v10 + 67) = 512;
              *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v10 + 69) = 0;
              IPC::Encoder::encodeHeader(v10);
              CFTypeRef v16 = v10;
              IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v15);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v8 + 16) + 32))(v8 + 16, &v16, 0);
              uint64_t v12 = v16;
              CFTypeRef v16 = 0;
              if (v12)
              {
                IPC::Encoder::~Encoder(v12, v11);
                WTF::fastFree(v13, v14);
              }
              CFRelease(*(CFTypeRef *)(v8 - 8));
            }
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldEnableInAppBrowserPrivacyProtections(WebKit::WebFrame **this)
{
  return WebKit::WebFrame::shouldEnableInAppBrowserPrivacyProtections(this[2]);
}

void WebKit::WebLocalFrameLoaderClient::notifyPageOfAppBoundBehavior(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (*(void *)(*(void *)(v2 + 128) + 8) == v2)
      {
        uint64_t v3 = *(void *)(v2 + 24);
        if (v3)
        {
          uint64_t v4 = *(void *)(v3 + 8);
          if (v4)
          {
            uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
            if (((*(uint64_t (**)(void *))(*v5 + 1368))(v5) & 1) == 0)
            {
              uint64_t v6 = *(void *)(v5[2] + 8);
              if (v6)
              {
                CFRetain(*(CFTypeRef *)(v6 - 8));
                WebKit::WebPage::notifyPageOfAppBoundBehavior((IPC::Encoder *)(v6 - 16));
                uint64_t v7 = *(const void **)(v6 - 8);
                CFRelease(v7);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebKit::WebLocalFrameLoaderClient::shouldUsePDFPlugin(uint64_t a1, WebCore::MIMETypeRegistry *a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 16) + 24);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 8);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void *)(v4 + 8);
  if (!v5) {
    return 0;
  }
  uint64_t v7 = *(void **)(*(void *)(v5 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v7 + 1368))(v7)) {
    return 0;
  }
  uint64_t v8 = *(void *)(v7[2] + 8);
  if (!v8) {
    return 0;
  }

  return WebKit::WebPage::shouldUsePDFPlugin(v8 - 16, a2);
}

uint64_t WebKit::WebLocalFrameLoaderClient::isParentProcessAFullWebBrowser(WebKit::WebLocalFrameLoaderClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 8);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 24);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(void *)(v3 + 8);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
  if ((*(uint64_t (**)(void *))(*v5 + 1368))(v5)) {
    return 0;
  }
  uint64_t v7 = *(void *)(v5[2] + 8);
  if (!v7) {
    return 0;
  }

  return WebKit::WebPage::isParentProcessAWebBrowser((WebKit::WebPage *)(v7 - 16), v6);
}

uint64_t WebKit::WebLocalFrameLoaderClient::dispatchLoadEventToOwnerElementInAnotherProcess(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 16) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = this;
          uint64_t v6 = *(void **)(*(void *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(void *))(*v6 + 1368))(v6);
          if ((this & 1) == 0)
          {
            uint64_t v7 = *(void *)(v6[2] + 8);
            if (v7)
            {
              *(_OWORD *)char v15 = *(_OWORD *)(*(void *)(v5 + 16) + 80);
              uint64_t v9 = *(void *)(v7 + 16);
              uint64_t v8 = v7 + 16;
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
              uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v11 = 1959;
              *((void *)v11 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
              *((void *)v11 + 66) = (char *)v11 + 16;
              *((void *)v11 + 67) = 512;
              *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v11 + 69) = 0;
              IPC::Encoder::encodeHeader(v11);
              CFTypeRef v16 = v11;
              IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, v15);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v16, 0);
              this = (uint64_t)v16;
              CFTypeRef v16 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v12);
                return WTF::fastFree(v13, v14);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

void WebKit::WebLocalFrameLoaderClient::didAccessWindowProxyPropertyViaOpener(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 8);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 24);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 8);
        if (v6)
        {
          uint64_t v10 = *(void **)(*(void *)(v6 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v10 + 1368))(v10) & 1) == 0)
          {
            uint64_t v11 = *(void *)(v10[2] + 8);
            if (v11)
            {
              CFRetain(*(CFTypeRef *)(v11 - 8));
              uint64_t v12 = *(void *)(v11 + 16);
              *(_OWORD *)CFTypeRef v21 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
              uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11 + 16);
              uint64_t v14 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v14 = 1891;
              *((void *)v14 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v13;
              *((void *)v14 + 66) = (char *)v14 + 16;
              *((void *)v14 + 67) = 512;
              *((void *)v14 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v14 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v14 + 69) = 0;
              IPC::Encoder::encodeHeader(v14);
              uint64_t v22 = v14;
              IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v14, v21);
              IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v14, a2);
              char v15 = (unsigned char *)IPC::Encoder::grow(v14, 1uLL, 1);
              if (v16)
              {
                *char v15 = a3;
                (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v11 + 16) + 32))(v11 + 16, &v22, 0);
                uint64_t v18 = v22;
                uint64_t v22 = 0;
                if (v18)
                {
                  IPC::Encoder::~Encoder(v18, v17);
                  WTF::fastFree(v19, v20);
                }
                CFRelease(*(CFTypeRef *)(v11 - 8));
              }
              else
              {
                __break(0xC471u);
              }
            }
          }
        }
      }
    }
  }
}

void WebKit::WebLocalFrameLoaderClient::frameNameChanged(WebKit::WebLocalFrameLoaderClient *this, const WTF::String *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (v5)
        {
          uint64_t v8 = *(void **)(*(void *)(v5 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              *(_OWORD *)uint64_t v16 = *(_OWORD *)(*((void *)this + 2) + 80);
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 16) + 56))(v9 + 16);
              uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v11 = 1975;
              *((void *)v11 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
              *((void *)v11 + 66) = (char *)v11 + 16;
              *((void *)v11 + 67) = 512;
              *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v11 + 69) = 0;
              IPC::Encoder::encodeHeader(v11);
              long long v17 = v11;
              IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, v16);
              IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v11, (uint64_t *)a2);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v9 + 16) + 32))(v9 + 16, &v17, 0);
              uint64_t v13 = v17;
              long long v17 = 0;
              if (v13)
              {
                IPC::Encoder::~Encoder(v13, v12);
                WTF::fastFree(v14, v15);
              }
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

WebKit::WebMediaKeySystemClient *WebKit::WebMediaKeySystemClient::pageDestroyed(WebKit::WebMediaKeySystemClient *this, void *a2)
{
  if (this)
  {
    WebKit::WebMediaKeySystemClient::~WebMediaKeySystemClient(this, a2);
    return (WebKit::WebMediaKeySystemClient *)WTF::fastFree(v2, v3);
  }
  return this;
}

void WebKit::WebMediaKeySystemClient::requestMediaKeySystem(WebKit::WebMediaKeySystemClient *this, WebCore::MediaKeySystemRequest *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  WebKit::MediaKeySystemPermissionRequestManager::startMediaKeySystemRequest(*(WebKit::MediaKeySystemPermissionRequestManager **)(v3 + 664), a2);
}

void *WebKit::WebMediaKeySystemClient::cancelMediaKeySystemRequest(WebKit::WebMediaKeySystemClient *this, WebCore::MediaKeySystemRequest *a2)
{
  uint64_t v2 = *(void *)(*((void *)this + 2) + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  return WebKit::MediaKeySystemPermissionRequestManager::cancelMediaKeySystemRequest(*(WebKit::MediaKeySystemPermissionRequestManager **)(v3 + 664), a2);
}

void WebKit::WebMessagePortChannelProvider::~WebMessagePortChannelProvider(WebKit::WebMessagePortChannelProvider *this, void *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(v3 - 4);
    if (v4)
    {
      uint64_t v5 = v3 + 16;
      do
      {
        if (*(void *)(v5 - 16) != -1) {
          uint64_t v5 = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
        }
        v5 += 32;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  uint64_t v6 = *((void *)this + 1);
  if (v6)
  {
    *(void *)(v6 + ++*(_DWORD *)(this + 8) = 0;
    uint64_t v7 = (unsigned int *)*((void *)this + 1);
    *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    if (v7)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v7, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v7);
        WTF::fastFree((WTF *)v7, a2);
      }
    }
  }
  else
  {
    *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebMessagePortChannelProvider::~WebMessagePortChannelProvider(this, a2);

  WTF::fastFree(v2, v3);
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::createNewMessagePortChannel(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 16);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v15, (uint64_t *)(a1 + 16), a2, &v16);
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v6);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v15, v5, a3, &v16);
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v16, v7);
  {
    uint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 233;
  *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  v15[0] = v9;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, a2 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, a3);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, a3 + 1);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)v15, 0, 0);
  uint64_t result = v15[0];
  v15[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *a2;
  if (*a2
    || (WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a2, 0), (uint64_t v8 = *a2) != 0))
  {
    unsigned int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  LODWORD(v32[0]) = -1640531527;
  WORD2(v32[0]) = 0;
  BYTE6(v32[0]) = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(v32, a3, a3 + 1);
  uint64_t result = WTF::SuperFastHash::hash((WTF::SuperFastHash *)v32);
  uint64_t v12 = result & v9;
  uint64_t v13 = v8 + 32 * v12;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  if (*(_OWORD *)v13 != 0)
  {
    uint64_t v28 = 0;
    int v29 = 1;
    do
    {
      if (v14 == *a3 && v15 == a3[1])
      {
        uint64_t v30 = *a2;
        if (*a2) {
          uint64_t v31 = *(unsigned int *)(v30 - 4);
        }
        else {
          uint64_t v31 = 0;
        }
        char v27 = 0;
        uint64_t v26 = v30 + 32 * v31;
        goto LABEL_15;
      }
      if (v14 == -1) {
        uint64_t v28 = (_OWORD *)v13;
      }
      uint64_t v12 = (v12 + v29) & v9;
      uint64_t v13 = v8 + 32 * v12;
      uint64_t v14 = *(void *)v13;
      uint64_t v15 = *(void *)(v13 + 8);
      ++v29;
    }
    while (*(_OWORD *)v13 != 0);
    if (v28)
    {
      _OWORD *v28 = 0u;
      v28[1] = 0u;
      --*(_DWORD *)(*a2 - 16);
      uint64_t v13 = (uint64_t)v28;
    }
  }
  *(_OWORD *)uint64_t v13 = *(_OWORD *)a3;
  uint64_t v16 = *a4;
  uint64_t v17 = a4[1];
  *a4 = 0;
  a4[1] = 0;
  unsigned int v18 = *(_DWORD *)(v13 + 28);
  if (v18) {
    WTF::VectorDestructor<true,WebCore::MessageWithMessagePorts>::destruct(*(unsigned int **)(v13 + 16), (unsigned int *)(*(void *)(v13 + 16) + 24 * v18));
  }
  char v19 = *(WTF **)(v13 + 16);
  if (v19)
  {
    *(void *)(v13 + 16) = 0;
    *(_DWORD *)(v13 + ++*(_DWORD *)(this + 24) = 0;
    WTF::fastFree(v19, v11);
  }
  v32[0] = 0;
  v32[1] = 0;
  *(void *)(v13 + 16) = v16;
  *(void *)(v13 + ++*(_DWORD *)(this + 24) = v17;
  uint64_t result = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v32, v11);
  uint64_t v20 = *a2;
  if (*a2) {
    int v21 = *(_DWORD *)(v20 - 12) + 1;
  }
  else {
    int v21 = 1;
  }
  *(_DWORD *)(v20 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v21;
  uint64_t v22 = *a2;
  if (*a2) {
    int v23 = *(_DWORD *)(v22 - 12);
  }
  else {
    int v23 = 0;
  }
  uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
  unint64_t v25 = *(unsigned int *)(v22 - 4);
  if (v25 > 0x400)
  {
    if (v25 > 2 * v24) {
      goto LABEL_14;
    }
LABEL_27:
    uint64_t result = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(a2, v13);
    uint64_t v13 = result;
    uint64_t v22 = *a2;
    if (*a2) {
      unint64_t v25 = *(unsigned int *)(v22 - 4);
    }
    else {
      unint64_t v25 = 0;
    }
    goto LABEL_14;
  }
  if (3 * v25 <= 4 * v24) {
    goto LABEL_27;
  }
LABEL_14:
  uint64_t v26 = v22 + 32 * v25;
  char v27 = 1;
LABEL_15:
  *(void *)a1 = v13;
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = v26;
  *(unsigned char *)(a1 + 16) = v27;
  return result;
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::entangleLocalPortInThisProcessToRemote(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  v14[0] = 0;
  v14[1] = 0;
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v13, (uint64_t *)(a1 + 16), a2, v14);
  WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v14, v5);
  {
    uint64_t v12 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v12);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v7 = 239;
  *((void *)v7 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v7 + 66) = (char *)v7 + 16;
  *((void *)v7 + 67) = 512;
  *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v7 + 69) = 0;
  IPC::Encoder::encodeHeader(v7);
  v13[0] = v7;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, a2 + 1);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v7, a3);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v7, a3 + 1);
  IPC::Connection::sendMessageImpl(v6, (uint64_t *)v13, 0, 0);
  uint64_t result = v13[0];
  v13[0] = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v8);
    return (IPC::Encoder *)WTF::fastFree(v10, v11);
  }
  return result;
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::messagePortDisentangled(uint64_t a1, uint64_t *a2)
{
  {
    unsigned int v9 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v9);
  }
  uint64_t v3 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 252;
  *((void *)v4 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v4 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v10 = v4;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, a2 + 1);
  IPC::Connection::sendMessageImpl(v3, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v5);
    return (IPC::Encoder *)WTF::fastFree(v7, v8);
  }
  return result;
}

uint64_t WebKit::WebMessagePortChannelProvider::messagePortSentToRemote(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v5 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 16), a2);
  WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take(v4, v5, &v10);
  if (v11)
  {
    unint64_t v7 = v10;
    uint64_t v8 = 24 * v11;
    do
    {
      WebKit::WebMessagePortChannelProvider::postMessageToRemote(a1, v7, a2);
      v7 += 24;
      v8 -= 24;
    }
    while (v8);
  }
  return WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v10, v6);
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::postMessageToRemote(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 16), a3);
  unint64_t v7 = *(uint64_t **)(a1 + 16);
  if (v7) {
    v7 += 4 * *((unsigned int *)v7 - 1);
  }
  if (v7 == v6)
  {
    uint64_t v9 = *(unsigned int *)(a2 + 20);
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 8);
      uint64_t v11 = 32 * v9;
      do
      {
        uint64_t v6 = (uint64_t *)WebKit::WebMessagePortChannelProvider::messagePortSentToRemote(a1, v10);
        v10 += 32;
        v11 -= 32;
      }
      while (v11);
    }
    uint64_t v12 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)v6);
    uint64_t v13 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection(v12) + 24);
    v19[0] = (uint64_t *)a2;
    v19[1] = a3;
    return IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PostMessageToRemote>(v13, v19);
  }
  else
  {
    unsigned int v8 = *((_DWORD *)v6 + 7);
    if (v8 == *((_DWORD *)v6 + 6))
    {
      WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>((uint64_t)(v6 + 2), a2);
    }
    else
    {
      uint64_t v14 = v6[2] + 24 * v8;
      uint64_t v15 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(v14 + ++*(_DWORD *)(this + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)uint64_t v14 = v15;
      uint64_t v16 = *(void *)(a2 + 8);
      *(void *)(a2 + ++*(_DWORD *)(this + 8) = 0;
      *(void *)(v14 + ++*(_DWORD *)(this + 8) = v16;
      LODWORD(v16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = 0;
      *(_DWORD *)(v14 + 16) = v16;
      LODWORD(v16) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a2 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *(_DWORD *)(v14 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v16;
      ++*((_DWORD *)v6 + 7);
    }
    {
      uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v17);
    }
    return (IPC::Encoder *)MEMORY[0x1F416CAE8](a3);
  }
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::messagePortClosed(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 16);
  uint64_t v5 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>((uint64_t *)(a1 + 16), a2);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)(v6 + 32 * *(unsigned int *)(v6 - 4));
    if (v7 == v5) {
      goto LABEL_5;
    }
  }
  else
  {
    if (!v5) {
      goto LABEL_5;
    }
    unint64_t v7 = 0;
  }
  if (v7 != v5) {
    WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(v4, v5);
  }
LABEL_5:
  {
    uint64_t v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 251;
  *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v15 = v9;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, a2 + 1);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v15, 0, 0);
  uint64_t result = v15;
  uint64_t v15 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  {
    uint64_t v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v5 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  uint64_t v6 = *a3;
  *a3 = 0;
  long long v17 = *(_OWORD *)a2;
  uint64_t v7 = WTF::fastMalloc((WTF *)0x20);
  *(void *)uint64_t v7 = &unk_1EE9F6C00;
  *(void *)(v7 + ++*(_DWORD *)(this + 8) = v6;
  *(_OWORD *)(v7 + 16) = v17;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 289;
  *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v16 = v9;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, a2);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v9, a2 + 1);
  *(void *)&long long v17 = v7;
  *((void *)&v17 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v8;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v16, (uint64_t *)&v17, 0, 0);
  uint64_t v11 = v17;
  *(void *)&long long v17 = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *IPC::Connection::send<Messages::NetworkConnectionToWebProcess::PostMessageToRemote>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v4 = 258;
  *((void *)v4 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v4 + 66) = (char *)v4 + 16;
  *((void *)v4 + 67) = 512;
  *((void *)v4 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v4 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v4 + 69) = 0;
  IPC::Encoder::encodeHeader(v4);
  uint64_t v11 = v4;
  uint64_t v5 = *a2;
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SerializedScriptValue,WTF::RawPtrTraits<WebCore::SerializedScriptValue>,WTF::DefaultRefDerefTraits<WebCore::SerializedScriptValue>>,void>::encode<IPC::Encoder,WebCore::SerializedScriptValue>(v4, *a2);
  IPC::VectorArgumentCoder<false,std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v4, (uint64_t)(v5 + 1));
  uint64_t v6 = a2[1];
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v4, v6);
  IPC::ArgumentCoder<WTF::ObjectIdentifierGeneric<WebKit::StorageAreaMapIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,void>::encode(v4, v6 + 1);
  IPC::Connection::sendMessageImpl(a1, (uint64_t *)&v11, 0, 0);
  uint64_t result = v11;
  uint64_t v11 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v7);
    return (IPC::Encoder *)WTF::fastFree(v9, v10);
  }
  return result;
}

void WebKit::WebNotificationClient::~WebNotificationClient(WebKit::WebNotificationClient *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::deallocateTable(v4, a2);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebNotificationClient::~WebNotificationClient(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebNotificationClient::show(uint64_t a1, uint64_t a2, uint64_t a3, WTF **a4)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v25 = 0;
  uint64_t v26 = &v25;
  WebCore::NotificationData::isolatedCopy();
  uint64_t v7 = *a4;
  *a4 = 0;
  v42[0] = v7;
  uint64_t v8 = *(atomic_uint **)(a1 + 16);
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  v42[1] = (WTF *)v8;
  long long v9 = *(_OWORD *)(a2 + 240);
  long long v43 = *(_OWORD *)(a2 + 224);
  long long v44 = v9;
  uint64_t v45 = WebCore::ScriptExecutionContext::addNotificationCallback();
  uint64_t v10 = WTF::fastMalloc((WTF *)0x160);
  *(void *)uint64_t v10 = &unk_1EE9F6C50;
  *(void *)(v10 + 16) = v26;
  WTF::URL::URL(v10 + 32, v27);
  long long v11 = v28;
  long long v28 = 0u;
  *(_OWORD *)(v10 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v11;
  long long v12 = v29;
  long long v29 = 0u;
  *(_OWORD *)(v10 + 8++*(_DWORD *)(this + 8) = v12;
  *(void *)(v10 + 104) = v30;
  *(unsigned char *)(v10 + 11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v31;
  uint64_t v13 = v32;
  uint64_t v30 = 0;
  uint64_t v32 = 0;
  *(void *)(v10 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v13;
  WTF::URL::URL(v10 + 128, v33);
  long long v14 = v38;
  long long v15 = v36;
  *(_OWORD *)(v10 + 2++*(_DWORD *)(this + 24) = v37;
  *(_OWORD *)(v10 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v14;
  long long v16 = v34;
  *(_OWORD *)(v10 + 19WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v35;
  *(_OWORD *)(v10 + 20++*(_DWORD *)(this + 8) = v15;
  *(_OWORD *)(v10 + 176) = v16;
  *(void *)(v10 + 256) = v39;
  uint64_t v17 = v40;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  *(void *)(v10 + 264) = v17;
  *(_WORD *)(v10 + 27WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v41;
  long long v18 = *(_OWORD *)v42;
  *(_OWORD *)char v42 = 0u;
  *(_OWORD *)(v10 + 28++*(_DWORD *)(this + 8) = v18;
  long long v19 = v43;
  long long v20 = v44;
  *(void *)(v10 + 336) = v45;
  *(_OWORD *)(v10 + 304) = v19;
  *(_OWORD *)(v10 + 32IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v20;
  WTF::callOnMainRunLoopAndWait();
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v22 = (unsigned int *)v42[1];
  v42[1] = 0;
  if (v22 && atomic_fetch_add((atomic_uint *volatile)v22, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v22);
    WTF::fastFree((WTF *)v22, v21);
  }
  int v23 = v42[0];
  v42[0] = 0;
  if (v23) {
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v23, v21);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v27, v21);
  return v25;
}

void WebKit::WebNotificationClient::cancel(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  WebCore::NotificationData::isolatedCopy();
  uint64_t v2 = *(atomic_uint **)(a1 + 16);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  long long v29 = (WTF *)v2;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x120);
  *(void *)uint64_t v3 = &unk_1EE9F6CC8;
  WTF::URL::URL(v3 + 16, v14);
  long long v4 = v15;
  long long v15 = 0u;
  *(_OWORD *)(v3 + 56) = v4;
  long long v5 = v16;
  long long v16 = 0u;
  *(_OWORD *)(v3 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v5;
  *(void *)(v3 + 8++*(_DWORD *)(this + 8) = v17;
  *(unsigned char *)(v3 + 96) = v18;
  uint64_t v6 = v19;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  *(void *)(v3 + 104) = v6;
  WTF::URL::URL(v3 + 112, v20);
  long long v7 = v25;
  long long v8 = v23;
  *(_OWORD *)(v3 + 20++*(_DWORD *)(this + 8) = v24;
  *(_OWORD *)(v3 + 2++*(_DWORD *)(this + 24) = v7;
  long long v9 = v21;
  *(_OWORD *)(v3 + 176) = v22;
  *(_OWORD *)(v3 + 19WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v8;
  *(_OWORD *)(v3 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v9;
  *(void *)(v3 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v26;
  uint64_t v10 = v27;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  *(void *)(v3 + 24++*(_DWORD *)(this + 8) = v10;
  *(_WORD *)(v3 + 256) = v28;
  long long v11 = v29;
  long long v29 = 0;
  *(void *)(v3 + 27WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v11;
  WTF::callOnMainRunLoopAndWait();
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v13 = (unsigned int *)v29;
  long long v29 = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v14, v12);
}

void WebKit::WebNotificationClient::notificationObjectDestroyed(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  WebCore::NotificationData::isolatedCopy();
  uint64_t v2 = *(atomic_uint **)(a1 + 16);
  if (v2) {
    atomic_fetch_add(v2, 1u);
  }
  long long v29 = (WTF *)v2;
  uint64_t v3 = WTF::fastMalloc((WTF *)0x120);
  *(void *)uint64_t v3 = &unk_1EE9F6CF0;
  WTF::URL::URL(v3 + 16, v14);
  long long v4 = v15;
  long long v15 = 0u;
  *(_OWORD *)(v3 + 56) = v4;
  long long v5 = v16;
  long long v16 = 0u;
  *(_OWORD *)(v3 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v5;
  *(void *)(v3 + 8++*(_DWORD *)(this + 8) = v17;
  *(unsigned char *)(v3 + 96) = v18;
  uint64_t v6 = v19;
  uint64_t v17 = 0;
  uint64_t v19 = 0;
  *(void *)(v3 + 104) = v6;
  WTF::URL::URL(v3 + 112, v20);
  long long v7 = v25;
  long long v8 = v23;
  *(_OWORD *)(v3 + 20++*(_DWORD *)(this + 8) = v24;
  *(_OWORD *)(v3 + 2++*(_DWORD *)(this + 24) = v7;
  long long v9 = v21;
  *(_OWORD *)(v3 + 176) = v22;
  *(_OWORD *)(v3 + 19WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v8;
  *(_OWORD *)(v3 + 16IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v9;
  *(void *)(v3 + 24IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v26;
  uint64_t v10 = v27;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  *(void *)(v3 + 24++*(_DWORD *)(this + 8) = v10;
  *(_WORD *)(v3 + 256) = v28;
  long long v11 = v29;
  long long v29 = 0;
  *(void *)(v3 + 27WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v11;
  WTF::callOnMainRunLoopAndWait();
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v13 = (unsigned int *)v29;
  long long v29 = 0;
  if (v13 && atomic_fetch_add((atomic_uint *volatile)v13, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v13);
    WTF::fastFree((WTF *)v13, v12);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)v14, v12);
}

uint64_t WebKit::WebNotificationClient::notificationControllerDestroyed(WebKit::WebNotificationClient *this)
{
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9F6D18;
  v2[1] = this;
  uint64_t v4 = (uint64_t)v2;
  WTF::callOnMainRunLoop();
  uint64_t result = v4;
  if (v4) {
    return (*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return result;
}

uint64_t WebKit::WebNotificationClient::requestPermission(uint64_t *a1, WebCore::SecurityContext *a2, WTF::StringImpl *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!WTF::isMainRunLoop((WTF *)a1) || *((unsigned char *)a2 + 274)) {
    goto LABEL_28;
  }
  {
    long long v25 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v25);
  }
  uint64_t v6 = *(unsigned __int8 *)(WebKit::WebProcess::singleton(void)::process + 672);
  if (!*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
  {
    __break(1u);
LABEL_27:
    if (v6 != -1) {
      goto LABEL_28;
    }
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
  if (v6 < 0) {
    goto LABEL_27;
  }
LABEL_6:
  long long v7 = (atomic_uint *)WebCore::SecurityContext::securityOrigin(a2);
  if (v7)
  {
    uint64_t v8 = (uint64_t)v7;
    atomic_fetch_add(v7, 1u);
    long long v9 = (WebCore::DeprecatedGlobalSettings *)WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::add(a1 + 1, (uint64_t)(v7 + 2), (uint64_t)v29);
    if (!WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(v9))
    {
      uint64_t v15 = a1[2];
      if (v15)
      {
        uint64_t v16 = *(void *)(v15 + 8);
        if (v16) {
          uint64_t v17 = (CFTypeRef *)(v16 - 16);
        }
        else {
          uint64_t v17 = 0;
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      CFRetain(v17[1]);
      uint64_t v18 = WebKit::WebPage::notificationPermissionRequestManager((WebKit::WebPage *)v17);
      WebKit::NotificationPermissionRequestManager::startRequest(v18, (WebCore::SecurityOriginData *)(v8 + 8), a3);
      CFRelease(v17[1]);
      return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, v19);
    }
    uint64_t v10 = *(void *)a3;
    *(void *)a3 = 0;
    {
      uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v26);
    }
    v29[0] = "WebNotificationManager";
    v29[1] = 23;
    long long v11 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v29);
    LOBYTE(v29[0]) = 0;
    int v30 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v29, v8 + 8);
    uint64_t v12 = a1[2];
    if (v12 && (uint64_t v13 = *(void *)(v12 + 8)) != 0)
    {
      long long v14 = (CFTypeRef *)(v13 - 16);
      CFRetain(*(CFTypeRef *)(v13 - 8));
    }
    else
    {
      long long v14 = 0;
    }
    __int16 v28 = v14;
    long long v20 = (void *)WTF::fastMalloc((WTF *)0x10);
    void *v20 = &unk_1EE9F6D40;
    v20[1] = v10;
    uint64_t v27 = v20;
    WebKit::WebNotificationManager::requestPermission((uint64_t)v11, (uint64_t)v29, (WebCore::DeprecatedGlobalSettings **)&v28, (uint64_t)&v27);
    long long v21 = v27;
    uint64_t v27 = 0;
    if (v21)
    {
      (*(void (**)(void *))(*v21 + 8))(v21);
      if (!v14)
      {
LABEL_21:
        if (v30 != -1) {
          ((void (*)(void **, void *))off_1EE9F6B08[v30])(&v27, v29);
        }
        return WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v8, v19);
      }
    }
    else if (!v14)
    {
      goto LABEL_21;
    }
    CFRelease(v14[1]);
    goto LABEL_21;
  }
LABEL_28:
  uint64_t v23 = *(void *)a3;
  *(void *)a3 = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 16))(v23, 1);
  long long v24 = *(uint64_t (**)(uint64_t))(*(void *)v23 + 8);

  return v24(v23);
}

uint64_t WebKit::WebNotificationClient::checkPermission(WebKit::WebNotificationClient *this, WebCore::ScriptExecutionContext *a2)
{
  if (!a2
    || *((unsigned char *)a2 + 274)
    && !(*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(void *)a2 + 72))(a2))
  {
    return 1;
  }
  uint64_t v4 = (atomic_uint *)WebCore::SecurityContext::securityOrigin(a2);
  uint64_t v5 = 1;
  if (v4)
  {
    uint64_t v6 = (uint64_t)v4;
    atomic_fetch_add(v4, 1u);
    uint64_t v5 = WTF::HashTable<WebCore::SecurityOriginData,WebCore::SecurityOriginData,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>,WTF::HashTraits<WebCore::SecurityOriginData>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::SecurityOriginData>,WTF::DefaultHash<WebCore::SecurityOriginData>>,WebCore::SecurityOriginData>((uint64_t *)this + 1, (uint64_t)(v4 + 2));
    {
      uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v27);
    }
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
    {
      uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
      if (v8 < 0 && v8 != -1)
      {
LABEL_32:
        WTF::ThreadSafeRefCounted<WebCore::SecurityOrigin,(WTF::DestructionThread)0>::deref(v6, v7);
        return v5;
      }
      unsigned int v31 = 0;
      if (!*((unsigned char *)a2 + 274))
      {
        *((_DWORD *)a2 - 45) += 2;
        uint64_t v9 = *((void *)a2 + 42);
        if (v9
          && (uint64_t v10 = *(void *)(v9 + 8)) != 0
          && (uint64_t v11 = *(void *)(v10 + 24)) != 0
          && (uint64_t v12 = *(void *)(v11 + 8)) != 0
          && (uint64_t v13 = *(void **)(*(void *)(v12 + 48) + 16),
              ((*(uint64_t (**)(void *))(*v13 + 1368))(v13) & 1) == 0)
          && (uint64_t v14 = *(void *)(v13[2] + 8)) != 0)
        {
          uint64_t v15 = (CFTypeRef *)(v14 - 16);
          CFRetain(*(CFTypeRef *)(v14 - 8));
          char v16 = 0;
        }
        else
        {
          uint64_t v15 = 0;
          char v16 = 1;
        }
        {
          __int16 v28 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v28);
        }
        uint64_t v32 = (WTF::StringImpl *)"WebNotificationManager";
        uint64_t v33 = (WTF::StringImpl *)23;
        uint64_t v17 = (WebKit::WebNotificationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)&v32);
        WebCore::SecurityOriginData::toString((uint64_t *)&v32, (WebCore::SecurityOriginData *)(v6 + 8));
        unsigned int v18 = WebKit::WebNotificationManager::policyForOrigin(v17, &v32, (WebKit::WebPage *)v15);
        unsigned int v31 = v18;
        uint64_t v19 = v32;
        uint64_t v32 = 0;
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
          {
            WTF::StringImpl::destroy(v19, v7);
            if (v16)
            {
LABEL_24:
              if (*((_DWORD *)a2 - 45) == 2)
              {
                if ((*((_WORD *)a2 - 87) & 0x400) == 0) {
                  WebCore::Node::removedLastRef((WebCore::ScriptExecutionContext *)((char *)a2 - 208));
                }
              }
              else
              {
                *((_DWORD *)a2 - 45) -= 2;
              }
LABEL_26:
              if (v18 == 1) {
                int v20 = v5;
              }
              else {
                int v20 = 1;
              }
              if (v20) {
                uint64_t v5 = v18;
              }
              else {
                uint64_t v5 = 0;
              }
              goto LABEL_32;
            }
LABEL_23:
            CFRelease(v15[1]);
            goto LABEL_24;
          }
          *(_DWORD *)v19 -= 2;
        }
        if (v16) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
    }
    else
    {
      __break(1u);
    }
    uint64_t v32 = (WTF::StringImpl *)&v31;
    WebCore::SecurityOriginData::toString((uint64_t *)&v29, (WebCore::SecurityOriginData *)(v6 + 8));
    WTF::String::isolatedCopy();
    long long v22 = (void *)WTF::fastMalloc((WTF *)0x18);
    *long long v22 = &unk_1EE9F6D68;
    v22[1] = v32;
    uint64_t v23 = v33;
    uint64_t v33 = 0;
    uint64_t v22[2] = v23;
    int v30 = v22;
    WTF::callOnMainRunLoopAndWait();
    long long v24 = v30;
    int v30 = 0;
    if (v24) {
      (*(void (**)(void *))(*v24 + 8))(v24);
    }
    long long v25 = v33;
    uint64_t v33 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v7);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    uint64_t v26 = v29;
    long long v29 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2) {
        WTF::StringImpl::destroy(v26, v7);
      }
      else {
        *(_DWORD *)v26 -= 2;
      }
    }
    unsigned int v18 = v31;
    goto LABEL_26;
  }
  return v5;
}

unsigned int *WebKit::WebPasteboardOverrides::addOverride(uint64_t *a1, WTF::StringImpl **a2, WTF::StringImpl **a3, const WTF::StringImpl *a4)
{
  uint64_t v9 = 0;
  WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>(a1, a2, (const WTF::StringImpl *)&v9, (uint64_t)v10);
  uint64_t v7 = v10[0];
  if (v9) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v9, v6);
  }
  return WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>((uint64_t *)(v7 + 8), a3, a4, (uint64_t)v10);
}

uint64_t WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::add<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = (uint64_t *)(v8 + 16 * (v11 & v9));
    char v16 = (WTF *)*v15;
    if (*v15 != -1) {
      break;
    }
    uint64_t v12 = (uint64_t *)(v8 + 16 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = v12;
    }
    WTF::String::operator=(v15, a2);
    uint64_t v19 = *(void *)a3;
    *(void *)a3 = 0;
    uint64_t result = v15[1];
    v15[1] = v19;
    if (result) {
      uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v18);
    }
    uint64_t v20 = *a1;
    if (*a1) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v21;
    uint64_t v24 = *a1;
    if (*a1) {
      int v25 = *(_DWORD *)(v24 - 12);
    }
    else {
      int v25 = 0;
    }
    uint64_t v26 = (*(_DWORD *)(v24 - 16) + v25);
    unint64_t v27 = *(unsigned int *)(v24 - 4);
    if (v27 > 0x400)
    {
      if (v27 <= 2 * v26)
      {
LABEL_28:
        uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, (WTF::StringImpl **)v15);
        uint64_t v15 = (uint64_t *)result;
        uint64_t v24 = *a1;
        if (*a1) {
          unint64_t v27 = *(unsigned int *)(v24 - 4);
        }
        else {
          unint64_t v27 = 0;
        }
      }
    }
    else if (3 * v27 <= 4 * v26)
    {
      goto LABEL_28;
    }
    uint64_t v29 = v24 + 16 * v27;
    char v28 = 1;
    goto LABEL_35;
  }
  uint64_t result = WTF::equal(v16, *a2, a3);
  if (!result) {
    goto LABEL_13;
  }
  uint64_t v22 = *a1;
  if (*a1) {
    uint64_t v23 = *(unsigned int *)(v22 - 4);
  }
  else {
    uint64_t v23 = 0;
  }
  char v28 = 0;
  uint64_t v29 = v22 + 16 * v23;
LABEL_35:
  *(void *)a4 = v15;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = v29;
  *(unsigned char *)(a4 + 16) = v28;
  return result;
}

uint64_t *WebKit::WebPasteboardOverrides::removeOverride(WebKit::WebPasteboardOverrides *this, WTF::StringImpl **a2, const WTF::String *a3)
{
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this, a2, a3);
  uint64_t v7 = result;
  uint64_t v8 = *(void *)this;
  if (*(void *)this) {
    v8 += 16 * *(unsigned int *)(v8 - 4);
  }
  if ((uint64_t *)v8 == result) {
    return result;
  }
  int v9 = result + 1;
  uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(result + 1, (WTF::StringImpl **)a3, v6);
  uint64_t v10 = v7[1];
  if (v10)
  {
    unsigned int v11 = (uint64_t *)(v10 + 24 * *(unsigned int *)(v10 - 4));
    if (v11 == result) {
      goto LABEL_12;
    }
  }
  else
  {
    if (!result) {
      goto LABEL_13;
    }
    unsigned int v11 = 0;
  }
  if (v11 != result)
  {
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(v7 + 1, (WTF::StringImpl *)result);
    uint64_t v10 = *v9;
  }
  if (v10)
  {
LABEL_12:
    if (*(_DWORD *)(v10 - 12)) {
      return result;
    }
  }
LABEL_13:
  if (*(void *)this)
  {
    uint64_t v12 = *(void *)this + 16 * *(unsigned int *)(*(void *)this - 4);
    if ((uint64_t *)v12 == v7) {
      return result;
    }
  }
  else
  {
    if (!v7) {
      return result;
    }
    uint64_t v12 = 0;
  }
  if ((uint64_t *)v12 != v7)
  {
    return (uint64_t *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove((uint64_t *)this, (WTF::StringImpl *)v7);
  }
  return result;
}

uint64_t WebKit::WebPasteboardOverrides::overriddenTypes@<X0>(WebKit::WebPasteboardOverrides *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)this, a2, a3);
  uint64_t v7 = result;
  uint64_t v8 = *(void *)this;
  if (*(void *)this) {
    v8 += 16 * *(unsigned int *)(v8 - 4);
  }
  if (v8 == result)
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    int v9 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,std::variant<WTF::String,unsigned long long,long long,BOOL,double>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<std::variant<WTF::String,unsigned long long,long long,BOOL,double>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::begin((void **)(result + 8));
    uint64_t v11 = *(void *)(v7 + 8);
    if (v11)
    {
      unsigned int v12 = *(_DWORD *)(v11 - 4);
      uint64_t v13 = (uint64_t *)(v11 + 24 * v12);
    }
    else
    {
      uint64_t v13 = 0;
      unsigned int v12 = 0;
    }
    v14[0] = (uint64_t *)(v7 + 8);
    v14[1] = v9;
    uint64_t v14[2] = v10;
    uint64_t v14[3] = v13;
    v14[4] = (uint64_t *)(v11 + 24 * v12);
    *a4 = 0;
    a4[1] = 0;
    return WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&,void>::map((uint64_t)a4, v14);
  }
  return result;
}

uint64_t WebKit::WebPasteboardOverrides::overriddenInfo@<X0>(WebKit::WebPasteboardOverrides *this@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  WebKit::WebPasteboardOverrides::overriddenTypes(this, a2, a3, &v28);
  if (v29)
  {
    v22[32] = 0;
    LOBYTE(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
    BYTE8(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
    __int16 v24 = 0;
    long long v20 = 0u;
    long long v21 = 0u;
    memset(v22, 0, 25);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    char v27 = 0;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)v22, (uint64_t)&v28);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)&v21, (uint64_t)&v28);
    *(void *)&long long v20 = 0;
    *(void *)a4 = 0;
    uint64_t v6 = *((void *)&v20 + 1);
    *((void *)&v20 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    *(void *)(a4 + ++*(_DWORD *)(this + 8) = v6;
    uint64_t v7 = v21;
    *(void *)&long long v21 = 0;
    *(void *)(a4 + 16) = v7;
    uint64_t v8 = *((void *)&v21 + 1);
    *((void *)&v21 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    *(void *)(a4 + ++*(_DWORD *)(this + 24) = v8;
    uint64_t v9 = *(void *)v22;
    *(void *)uint64_t v22 = 0;
    *(void *)(a4 + ++*(_DWORD *)(this + 32) = v9;
    uint64_t v10 = *(void *)&v22[8];
    *(void *)&unsigned char v22[8] = 0;
    *(void *)(a4 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v10;
    *(void *)(a4 + 4++*(_DWORD *)(this + 8) = *(void *)&v22[16];
    long long v11 = *(_OWORD *)&v22[24];
    long long v12 = v23;
    *(_WORD *)(a4 + 8++*(_DWORD *)(this + 8) = v24;
    *(_OWORD *)(a4 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v12;
    *(_OWORD *)(a4 + 56) = v11;
    uint64_t v13 = v25;
    *(void *)&v22[16] = 0;
    uint64_t v25 = 0;
    *(void *)(a4 + 96) = v13;
    *(void *)&long long v11 = v26;
    uint64_t v26 = 0;
    *(void *)(a4 + 104) = v11;
    *(unsigned char *)(a4 + 11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v27;
    *(unsigned char *)(a4 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v25, v14);
    char v16 = *(WTF::StringImpl **)&v22[16];
    *(void *)&v22[16] = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2) {
        WTF::StringImpl::destroy(v16, v15);
      }
      else {
        *(_DWORD *)v16 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v22, v15);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v21, v17);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v20, v18);
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  }
  return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v28, v5);
}

uint64_t WebKit::WebPasteboardOverrides::getDataForOverride(uint64_t *a1, WTF::StringImpl **a2, const WTF::StringImpl *a3, unsigned int *a4)
{
  uint64_t v7 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::FileSystemHandleIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>(a1, a2, a3);
  uint64_t v9 = v7;
  uint64_t v10 = *a1;
  if (*a1) {
    v10 += 16 * *(unsigned int *)(v10 - 4);
  }
  if (v10 == v7) {
    return 0;
  }
  uint64_t v11 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebKit::ExtensionCapabilityGrant>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WTF::String,WebKit::ExtensionCapabilityGrant,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebKit::ExtensionCapabilityGrant>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>,WTF::String>((uint64_t *)(v7 + 8), (WTF::StringImpl **)a3, v8);
  uint64_t v12 = *(void *)(v9 + 8);
  if (v12) {
    v12 += 24 * *(unsigned int *)(v12 - 4);
  }
  if (v12 == v11) {
    return 0;
  }
  WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a4, v11 + 8);
  return 1;
}

IPC::Encoder *WebKit::WebPerformanceLoggingClient::logScrollingEvent(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v8 = v7 + 32;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
  uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v11 = 2002;
  *((void *)v11 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
  *((void *)v11 + 66) = (char *)v11 + 16;
  *((void *)v11 + 67) = 512;
  *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v11 + 69) = 0;
  IPC::Encoder::encodeHeader(v11);
  long long v20 = v11;
  uint64_t v12 = (_DWORD *)IPC::Encoder::grow(v11, 4uLL, 4);
  if (v13 <= 3
    || (*uint64_t v12 = a2,
        IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v11, a4),
        unsigned int v14 = (void *)IPC::Encoder::grow(v11, 8uLL, 8),
        v15 <= 7))
  {
    __break(0xC471u);
    JUMPOUT(0x1991DBCB0);
  }
  void *v14 = a3;
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v20, 0);
  uint64_t result = v20;
  long long v20 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v16);
    return (IPC::Encoder *)WTF::fastFree(v18, v19);
  }
  return result;
}

void WebKit::WebPermissionController::~WebPermissionController(WebKit::WebPermissionController *this)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  IPC::MessageReceiverMap::removeMessageReceiver((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 48), 0xBDu);
  uint64_t v3 = (unsigned int **)*((void *)this + 4);
  if (v3) {
    WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::deallocateTable(v3, v2);
  }
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = &unk_1EE9B71B0;
  WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::~WeakPtrFactory((unsigned int **)this + 3, v2);
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPermissionController::~WebPermissionController(this);

  WTF::fastFree(v1, v2);
}

void non-virtual thunk to'WebKit::WebPermissionController::~WebPermissionController(WebKit::WebPermissionController *this)
{
}

{
  WTF *v1;
  void *v2;
  uint64_t vars8;

  WebKit::WebPermissionController::~WebPermissionController((WebKit::WebPermissionController *)((char *)this - 16));

  WTF::fastFree(v1, v2);
}

IPC::Encoder *WebKit::WebPermissionController::query(WebCore::DeprecatedGlobalSettings *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned int a5, uint64_t *a6)
{
  int v10 = a3;
  if (WebCore::DeprecatedGlobalSettings::builtInNotificationsEnabled(a1) && (v10 - 11) <= 1)
  {
    {
      uint64_t v39 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v39);
    }
    uint64_t v11 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
    WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v45, *(atomic_uchar *volatile **)(v11 + 24));
    uint64_t v12 = *a6;
    *a6 = 0;
    unint64_t v13 = (os_unfair_lock_s *)v45;
    {
      uint64_t v40 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v40);
    }
    if (*(unsigned char *)(WebKit::WebProcess::singleton(void)::process + 672))
    {
      uint64_t v14 = *(void *)(WebKit::WebProcess::singleton(void)::process + 664);
      unint64_t v15 = (void *)WTF::fastMalloc((WTF *)0x10);
      *unint64_t v15 = &unk_1EE9F6D90;
      v15[1] = v12;
      uint64_t v16 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
      uint64_t v17 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v17 = 605;
      *((void *)v17 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v14;
      *((void *)v17 + 66) = (char *)v17 + 16;
      *((void *)v17 + 67) = 512;
      *((void *)v17 + 6++*(_DWORD *)(this + 8) = 0;
      *((void *)v17 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *((void *)v17 + 69) = 0;
      IPC::Encoder::encodeHeader(v17);
      __int16 v41 = v17;
      IPC::ArgumentCoder<WebCore::SecurityOriginData,void>::encode(v17, a2 + 32);
      long long v43 = v15;
      uint64_t v44 = v16;
      IPC::Connection::sendMessageWithAsyncReply(v13, &v41, (uint64_t *)&v43, 0, 0);
      uint64_t v19 = (uint64_t)v43;
      long long v43 = 0;
      if (v19) {
        (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
      }
      long long v20 = v41;
      __int16 v41 = 0;
      if (v20)
      {
        IPC::Encoder::~Encoder(v20, v18);
        WTF::fastFree(v36, v37);
      }
      return (IPC::Encoder *)WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v45);
    }
    __break(1u);
LABEL_23:
    long long v38 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v38);
  }
  LOBYTE(v4WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  char v42 = 0;
  if (a5 <= 1)
  {
    uint64_t v22 = *(void **)(*(void *)(*(void *)(*(void *)a4 + 8) + 48) + 16);
    (*(void (**)(void *))(*v22 + 1368))(v22);
    uint64_t v23 = *(void *)(v22[2] + 8);
    if (v23) {
      uint64_t v24 = v23 - 16;
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = *(IPC::Encoder **)(v24 + 2120);
    char v42 = 1;
    __int16 v41 = v25;
  }
    goto LABEL_23;
  uint64_t v26 = WebKit::WebProcess::singleton(void)::process + 24;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)(WebKit::WebProcess::singleton(void)::process + 24) + 56))(WebKit::WebProcess::singleton(void)::process + 24);
  uint64_t v28 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v28 = 2581;
  *((void *)v28 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v27;
  *((void *)v28 + 66) = (char *)v28 + 16;
  *((void *)v28 + 67) = 512;
  *((void *)v28 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v28 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v28 + 69) = 0;
  IPC::Encoder::encodeHeader(v28);
  uint64_t v45 = v28;
  IPC::ArgumentCoder<WebCore::ClientOrigin,void>::encode(v28, a2);
  LOBYTE(v4WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v10;
  IPC::Encoder::operator<<<BOOL>(v28, (char *)&v43);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebKit::WebPageProxyIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&>(v28, (uint64_t)&v41);
  LOBYTE(v4WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = a5;
  IPC::Encoder::operator<<<BOOL>(v28, (char *)&v43);
  uint64_t v29 = *a6;
  *a6 = 0;
  int v30 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v30 = &unk_1EE9F6DB8;
  v30[1] = v29;
  uint64_t v31 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  long long v43 = v30;
  uint64_t v44 = v31;
  (*(void (**)(uint64_t, IPC::Encoder **, void **, void))(*(void *)v26 + 40))(v26, &v45, &v43, 0);
  uint64_t v33 = (uint64_t)v43;
  long long v43 = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t result = v45;
  uint64_t v45 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v32);
    return (IPC::Encoder *)WTF::fastFree(v34, v35);
  }
  return result;
}

unsigned int *WebKit::WebPermissionController::addObserver(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = (uint64_t *)(a1 + 32);
  unsigned int v4 = *(_DWORD *)(a1 + 44);
  unsigned int v5 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v5;
  if (v5 > v4)
  {
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(v7 + 8 * v10);
        if ((unint64_t)(v12 + 1) >= 2 && !*(void *)(v12 + 8))
        {
          *(void *)(v7 + 8 * v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)v12, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)v12);
            WTF::fastFree((WTF *)v12, a2);
          }
          *(void *)(v7 + 8 * v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v13 = *v3;
        if (*v3) {
          int v14 = *(_DWORD *)(v13 - 12);
        }
        else {
          int v14 = 0;
        }
        *(_DWORD *)(v13 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v14 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v15 = *(_DWORD *)(v7 - 4);
        if (v15 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v15)
        {
          WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = *(void *)(a1 + 32);
          *(_DWORD *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          if (!v7)
          {
            unsigned int v17 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *(_DWORD *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
LABEL_25:
        unsigned int v17 = *(_DWORD *)(v7 - 12);
        int v18 = 0x7FFFFFFF;
        if (v17 >= 0x7FFFFFFF)
        {
LABEL_27:
          *(_DWORD *)(a1 + 44) = 2 * v18;
          goto LABEL_28;
        }
LABEL_26:
        int v18 = v17;
        goto LABEL_27;
      }
    }
    unsigned int v17 = 0;
    *(_DWORD *)(a1 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    goto LABEL_26;
  }
LABEL_28:
  WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(a2 + 2, (uint64_t)a2);
  uint64_t v19 = (atomic_uint *)*((void *)a2 + 1);
  atomic_fetch_add(v19, 1u);
  atomic_fetch_add(v19, 1u);
  uint64_t v23 = (WTF *)v19;
  WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::add(v3, &v23, (uint64_t)&v22);
  uint64_t result = (unsigned int *)v23;
  uint64_t v23 = 0;
  if (result && atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, result);
    uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v20);
  }
  if (v19)
  {
    if (atomic_fetch_add(v19, 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, (unsigned int *)v19);
      return (unsigned int *)WTF::fastFree((WTF *)v19, v20);
    }
  }
  return result;
}

uint64_t *WebKit::WebPermissionController::removeObserver(uint64_t *result, void *a2)
{
  uint64_t v3 = result + 4;
  unsigned int v4 = *((_DWORD *)result + 11);
  unsigned int v5 = *((_DWORD *)result + 10) + 1;
  *((_DWORD *)result + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v5;
  if (v5 > v4)
  {
    uint64_t v6 = result;
    uint64_t v7 = *v3;
    if (*v3)
    {
      int v8 = *(_DWORD *)(v7 - 4);
      if (!v8) {
        goto LABEL_22;
      }
      int v9 = 0;
      unsigned int v10 = v8 - 1;
      do
      {
        uint64_t v11 = v10;
        uint64_t result = *(uint64_t **)(v7 + 8 * v10);
        if ((unint64_t)result + 1 >= 2 && !result[1])
        {
          *(void *)(v7 + 8 * v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          if (atomic_fetch_add((atomic_uint *volatile)result, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, (unsigned int *)result);
            uint64_t result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
          }
          *(void *)(v7 + 8 * v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = -1;
          ++v9;
        }
        --v10;
      }
      while (v11);
      uint64_t v7 = *v3;
      if (v9)
      {
        *(_DWORD *)(v7 - 16) += v9;
        uint64_t v12 = *v3;
        if (*v3) {
          int v13 = *(_DWORD *)(v12 - 12);
        }
        else {
          int v13 = 0;
        }
        *(_DWORD *)(v12 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v13 - v9;
        uint64_t v7 = *v3;
      }
      if (v7)
      {
        unsigned int v14 = *(_DWORD *)(v7 - 4);
        if (v14 >= 9 && 6 * *(_DWORD *)(v7 - 12) < v14)
        {
          uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::shrinkToBestSize(v3);
          uint64_t v7 = v6[4];
          *((_DWORD *)v6 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          if (!v7)
          {
            unsigned int v16 = 0;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
LABEL_22:
        *((_DWORD *)v6 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
LABEL_25:
        unsigned int v16 = *(_DWORD *)(v7 - 12);
        int v17 = 0x7FFFFFFF;
        if (v16 >= 0x7FFFFFFF)
        {
LABEL_27:
          *((_DWORD *)v6 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 2 * v17;
          goto LABEL_28;
        }
LABEL_26:
        int v17 = v16;
        goto LABEL_27;
      }
    }
    unsigned int v16 = 0;
    *((_DWORD *)v6 + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    goto LABEL_26;
  }
LABEL_28:
  uint64_t v18 = a2[1];
  if (v18 && *(void *)(v18 + 8))
  {
    uint64_t v20 = a2[1];
    uint64_t result = (uint64_t *)WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::find<WTF::HashSetTranslator<WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>,WTF::DefaultWeakPtrImpl const*>(v3, &v20);
    if (*v3)
    {
      uint64_t v19 = *v3 + 8 * *(unsigned int *)(*v3 - 4);
      if ((uint64_t *)v19 == result) {
        return result;
      }
    }
    else
    {
      if (!result) {
        return result;
      }
      uint64_t v19 = 0;
    }
    if ((uint64_t *)v19 != result) {
      return WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::remove(v3, (unsigned int **)result);
    }
  }
  return result;
}

uint64_t WebKit::WebPermissionController::permissionChanged(uint64_t a1, int a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 32;
  uint64_t v24 = a1 + 32;
  uint64_t v25 = WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::begin((void **)(a1 + 32));
  uint64_t v26 = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = *(unsigned int *)(v6 - 4);
    int v8 = (void *)(v6 + 8 * v7);
    uint64_t v27 = v8;
    uint64_t v28 = v8;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
  }
  else
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
    int v8 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v19 = v4;
  uint64_t v20 = v8;
  long long v21 = v8;
  uint64_t v22 = v8;
  uint64_t v23 = v6 + 8 * v7;
  uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v19);
  for (int i = v25; i != v20; ++*(_DWORD *)(v24 + 8))
  {
    uint64_t v11 = *(unsigned int **)(*i + 8);
    uint64_t result = (*(uint64_t (**)(unsigned int *))(*(void *)v11 + 40))(v11);
    if (a2 != result) {
      break;
    }
    (*(void (**)(unsigned int *))(*(void *)v11 + 32))(v11);
    uint64_t result = WebCore::operator==();
    if (!result) {
      break;
    }
    unsigned int v12 = (*(uint64_t (**)(unsigned int *))(*(void *)v11 + 48))(v11);
    uint64_t result = (*(uint64_t (**)(unsigned int *))(*(void *)v11 + 56))(v11);
    if ((!*(void *)result || !*(void *)(*(void *)result + 8)) && v12 < 2) {
      break;
    }
    uint64_t v13 = (*(uint64_t (**)(unsigned int *))(*(void *)v11 + 32))(v11);
    v29[0] = 0;
    int v30 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v29, v13);
    v31[0] = 0;
    int v32 = -1;
    std::__variant_detail::__ctor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>>::__generic_construct[abi:sn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<WebCore::SecurityOriginData::Tuple,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::OpaqueOriginIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>>,(std::__variant_detail::_Trait)1> const&>((uint64_t)v31, v13 + 32);
    uint64_t v14 = (*(uint64_t (**)(unsigned int *))(*(void *)v11 + 56))(v11);
    WTF::WeakPtrFactory<WebPushD::PushServiceConnection,WTF::DefaultWeakPtrImpl>::initializeIfNeeded(v11 + 2, (uint64_t)v11);
    unsigned int v15 = (atomic_uint *)*((void *)v11 + 1);
    if (v15) {
      atomic_fetch_add(v15, 1u);
    }
    unsigned int v16 = (WebCore::DeprecatedGlobalSettings *)WTF::fastMalloc((WTF *)0x10);
    *(void *)unsigned int v16 = &unk_1EE9F6DE0;
    *((void *)v16 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v15;
    uint64_t v18 = v16;
    WebKit::WebPermissionController::query(v16, (uint64_t)v29, a2, v14, v12, (uint64_t *)&v18);
    if (v18) {
      (*(void (**)(WebCore::DeprecatedGlobalSettings *))(*(void *)v18 + 8))(v18);
    }
    if (v32 != -1) {
      ((void (*)(WebCore::DeprecatedGlobalSettings **, unsigned char *))off_1EE9F6B08[v32])(&v18, v31);
    }
    int v32 = -1;
    if (v30 != -1) {
      ((void (*)(WebCore::DeprecatedGlobalSettings **, unsigned char *))off_1EE9F6B08[v30])(&v18, v29);
    }
    int v17 = v25 + 1;
    uint64_t v25 = v17;
    if (v17 != v26)
    {
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        if (++v17 == v26)
        {
          int v17 = v26;
          break;
        }
      }
      uint64_t v25 = v17;
    }
    uint64_t result = (uint64_t)WTF::WeakHashSet<WebKit::RemoteAudioSessionProxy,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v24);
    int i = v25;
  }
  return result;
}

uint64_t WebCore::LocalFrameLoaderClient::isRemoteWorkerFrameLoaderClient(WebCore::LocalFrameLoaderClient *this)
{
  return 0;
}

uint64_t WebKit::WebLocalFrameLoaderClient::hasFrameSpecificStorageAccess(WebKit::WebLocalFrameLoaderClient *this)
{
  return *((unsigned __int8 *)this + 80);
}

void WebKit::WebMediaKeySystemClient::~WebMediaKeySystemClient(WebKit::WebMediaKeySystemClient *this, void *a2)
{
  WebKit::WebMediaKeySystemClient::~WebMediaKeySystemClient(this, a2);

  WTF::fastFree(v2, v3);
}

{
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;

  uint64_t v3 = (unsigned int *)*((void *)this + 2);
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4)
  {
    *(void *)(v4 + ++*(_DWORD *)(this + 8) = 0;
    unsigned int v5 = (unsigned int *)*((void *)this + 1);
    *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    if (v5)
    {
      if (atomic_fetch_add((atomic_uint *volatile)v5, 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  }
}

uint64_t *WTF::Mapper<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>(WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&)::{lambda(WebCore::RegistrableDomain&&)#1},WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits> const&,void>::map(uint64_t *result, uint64_t *a2, const WTF::StringImpl *a3)
{
  uint64_t v4 = result;
  if (*a2)
  {
    uint64_t v5 = *(unsigned int *)(*a2 - 12);
    if (v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t v6 = WTF::fastMalloc((WTF *)(8 * v5));
      *((_DWORD *)v4 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v5;
      *uint64_t v4 = v6;
    }
  }
  uint64_t result = (uint64_t *)WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::begin(a2, (uint64_t)a2, a3);
  v12[0] = result;
  v12[1] = v7;
  if (*a2) {
    uint64_t v9 = *a2 + 8 * *(unsigned int *)(*a2 - 4);
  }
  else {
    uint64_t v9 = 0;
  }
  if ((uint64_t *)v9 != result)
  {
    do
    {
      unsigned int v10 = (_DWORD *)*result;
      if (*result) {
        *v10 += 2;
      }
      uint64_t v11 = *((unsigned int *)v4 + 3);
      *(void *)(*v4 + 8 * v1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
      *((_DWORD *)v4 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v11 + 1;
      v12[0] = result + 1;
      WTF::HashTableConstIterator<WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::skipEmptyBuckets((uint64_t)v12, v7, v8);
      uint64_t result = (uint64_t *)v12[0];
    }
    while (v12[0] != v9);
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidFirstVisuallyNonEmptyLayoutForFrame>(uint64_t a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1926;
  *((void *)v6 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  uint64_t v9 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&,WTF::WallTime const&>,0ul,1ul,2ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

unint64_t IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&,WTF::WallTime const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WebKit::UserData const&,WTF::WallTime const&>,0ul,1ul,2ul>(IPC::Encoder *a1, uint64_t **a2)
{
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(a1, *a2);
  IPC::ArgumentCoder<WebKit::UserData,void>::encode(a1, a2[1]);
  double v4 = *(double *)a2[2];

  return IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(a1, v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6B38;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6B38;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>(a2, v7);
    if (v8)
    {
      WebKit::WebFrame::didReceivePolicyDecision(*(CFTypeRef **)(a1 + 8), *(void *)(a1 + 16), v7);
      std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
    }
    else
    {
      std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v3);
      IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(*(CFTypeRef **)(a1 + 8), *(void *)(a1 + 16));
    }
  }
  else
  {
    uint64_t v5 = *(CFTypeRef **)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(v5, v6);
  }
}

void IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(CFTypeRef *a1, uint64_t a2)
{
  __int16 v4 = 0;
  char v5 = 2;
  char v6 = 0;
  char v7 = 0;
  char v8 = 0;
  char v9 = 0;
  v10[0] = 0;
  char v11 = 0;
  LOBYTE(v1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
  char v13 = 0;
  char v14 = 0;
  char v16 = 0;
  WebKit::WebFrame::didReceivePolicyDecision(a1, a2, &v4);
  if (v16)
  {
    uint64_t v3 = v15;
    unsigned int v15 = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2) {
        WTF::StringImpl::destroy(v3, v2);
      }
      else {
        *(_DWORD *)v3 -= 2;
      }
    }
  }
  if (v13) {
    WebKit::SandboxExtensionHandle::~SandboxExtensionHandle(&v12);
  }
  if (v11) {
    WebKit::WebsitePoliciesData::~WebsitePoliciesData((WebKit::WebsitePoliciesData *)v10, v2);
  }
}

void *WTF::Detail::CallableWrapper<std::optional<WebCore::HitTestResult> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNewWindowAction,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6B60;
  a1[1] = 0;
  if (v2) {
    CFRelease(*(CFTypeRef *)(v2 + 8));
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<std::optional<WebCore::HitTestResult> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNewWindowAction,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6B60;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    CFRelease(*(CFTypeRef *)(v3 + 8));
  }

  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<std::optional<WebCore::HitTestResult> &&<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::DecidePolicyForNewWindowAction,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0)#1},void,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForNewWindowAction(WebCore::NavigationAction const&,WebCore::ResourceRequest const&,WebCore::FormState *,WTF::String const&,std::optional<WebCore::HitTestResult> &&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>::call(uint64_t a1, IPC::Decoder *a2)
{
  if (a2 && *(void *)a2)
  {
    IPC::Decoder::decode<std::tuple<WebKit::PolicyDecision>>(a2, v7);
    if (v8)
    {
      WebKit::WebFrame::didReceivePolicyDecision(*(CFTypeRef **)(a1 + 8), *(void *)(a1 + 16), v7);
      std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v4);
    }
    else
    {
      std::__optional_destruct_base<WebKit::PolicyDecision,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v7, v3);
      IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(*(CFTypeRef **)(a1 + 8), *(void *)(a1 + 16));
    }
  }
  else
  {
    char v5 = *(CFTypeRef **)(a1 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    IPC::Connection::cancelReply<Messages::WebPageProxy::DecidePolicyForResponse,WebKit::WebLocalFrameLoaderClient::dispatchDecidePolicyForResponse(WebCore::ResourceResponse const&,WebCore::ResourceRequest const&,WTF::String const&,WTF::CompletionHandler<void ()(WebCore::PolicyAction)> &&)::$_0>(v5, v6);
  }
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::WillSubmitForm,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6B88;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::WillSubmitForm,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6B88;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPageProxy::WillSubmitForm,WTF::CompletionHandler<void ()(void)>>(WTF::CompletionHandler<void ()(void)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t))(*(void *)v1 + 16))(v1);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 8);

  return v2(v1);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F6BB0;
  a1[1] = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F6BB0;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    WTF::ThreadSafeRefCounted<WebCore::WeakPtrImplWithEventTargetData,(WTF::DestructionThread)0>::deref(v3, a2);
  }

  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::StorageAccessQuirkForTopFrameDomain,WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0>(WebKit::WebLocalFrameLoaderClient::loadStorageAccessQuirksIfNeeded(void)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, void *a2)
{
  if (!a2
    || !*a2
    || (IPC::Decoder::decode<std::tuple<WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>((IPC::Decoder *)a2, a2, (uint64_t)&v9), !v11))
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  }
  if (!HIDWORD(v10)) {
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  }
  __int16 v4 = *(WebCore::Document **)(v3 + 8);
  if (!v4) {
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  }
  uint64_t v5 = *((void *)v4 + 90);
  if (!v5) {
    uint64_t v5 = WebCore::Document::ensureQuirks(v4);
  }
  uint64_t v6 = *(unsigned int *)(v5 + 100);
  if (v6) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)(v5 + 88), (WTF::StringImpl *)(*(void *)(v5 + 88) + 8 * v6));
  }
  uint64_t result = *(WTF **)(v5 + 88);
  if (result)
  {
    *(void *)(v5 + 8++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(v5 + 96) = 0;
    uint64_t result = (WTF *)WTF::fastFree(result, a2);
  }
  *(void *)(v5 + 8++*(_DWORD *)(this + 8) = v9;
  uint64_t v8 = v10;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  *(void *)(v5 + 96) = v8;
  if (v11) {
    return (WTF *)WTF::Vector<WebCore::RegistrableDomain,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v9, a2);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6BD8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6BD8;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder)#1},void,IPC::Decoder>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (uint64_t *)(a1 + 8);
  if (a2 && *a2)
  {
    IPC::Decoder::decode<std::tuple<std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError>>>(a2, (uint64_t)v7);
    if (v9)
    {
      uint64_t v3 = *v2;
      uint64_t *v2 = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 16))(v3, v7);
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 8))(v3);
      if (v9)
      {
        if (v8 != -1) {
          return ((uint64_t (*)(char *, unsigned char *))off_1EE9F6B18[v8])(&v6, v7);
        }
      }
    }
    else
    {
      return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(v2);
    }
  }
  else
  {
    uint64_t v5 = (uint64_t *)(a1 + 8);
    return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(v5);
  }
  return result;
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::SendH2Ping,WTF::CompletionHandler<void ()(std::experimental::fundamentals_v3::expected<WTF::Seconds,WebCore::ResourceError> &&)>>(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  int v5 = 0;
  uint64_t v1 = *a1;
  *a1 = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v1 + 16))(v1, v4);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 8))(v1);
  if (v5 != -1) {
    return ((uint64_t (*)(char *, void *))off_1EE9F6B18[v5])(&v3, v4);
  }
  return result;
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::GetLoadDecisionForIcon>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v6 = 1977;
  *((void *)v6 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = a3;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  char v9 = v6;
  IPC::ArgumentCoder<std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,0ul,1ul>(v6, a2);
  (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)a1 + 32))(a1, &v9, 0);
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v9, v7);
}

uint64_t IPC::ArgumentCoder<std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::LinkIcon const&,WebKit::CallbackID const&>,0ul,1ul>(IPC::Encoder *a1, uint64_t *a2)
{
  IPC::ArgumentCoder<WebCore::LinkIcon,void>::encode(a1, *a2);
  uint64_t v4 = a2[1];

  return IPC::ArgumentCoder<WebKit::CallbackID,void>::encode(a1, v4);
}

uint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 12);
  if (v3) {
    WTF::VectorDestructor<true,WebCore::MessageWithMessagePorts>::destruct(*(unsigned int **)a1, (unsigned int *)(*(void *)a1 + 24 * v3));
  }
  uint64_t v4 = *(unsigned int **)a1;
  if (*(void *)a1)
  {
    *(void *)a1 = 0;
    *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree((WTF *)v4, a2);
  }
  return a1;
}

unsigned int *WTF::VectorDestructor<true,WebCore::MessageWithMessagePorts>::destruct(unsigned int *result, unsigned int *a2)
{
  if (result != a2)
  {
    unsigned int v3 = result;
    do
    {
      uint64_t v4 = (WTF *)*((void *)v3 + 1);
      if (v4)
      {
        *((void *)v3 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
        v3[4] = 0;
        WTF::fastFree(v4, a2);
      }
      uint64_t result = *(unsigned int **)v3;
      *(void *)unsigned int v3 = 0;
      if (result) {
        uint64_t result = WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(result);
      }
      v3 += 6;
    }
    while (v3 != a2);
  }
  return result;
}

void WebCore::MessageWithMessagePorts::~MessageWithMessagePorts(WebCore::MessageWithMessagePorts *this, void *a2)
{
  unsigned int v3 = (WTF *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v3, a2);
  }
  uint64_t v4 = *(unsigned int **)this;
  *(void *)this = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::SerializedScriptValue,(WTF::DestructionThread)0>::deref(v4);
  }
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::expand(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 32 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = v6 + 32 * v13;
      if (*(void *)v15 != -1)
      {
        if (*(_OWORD *)v15 == 0)
        {
          WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v6 + 32 * v13 + 16, v10);
        }
        else
        {
          uint64_t v16 = *a1;
          if (*a1) {
            unsigned int v17 = *(_DWORD *)(v16 - 8);
          }
          else {
            unsigned int v17 = 0;
          }
          int v29 = -1640531527;
          __int16 v30 = 0;
          char v31 = 0;
          WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&v29, (void *)(v6 + 32 * v13), (void *)(v15 + 8));
          int v18 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v29);
          int v20 = 0;
          do
          {
            uint64_t v21 = v18 & v17;
            uint64_t v22 = v16 + 32 * v21;
            int v18 = ++v20 + v21;
          }
          while (*(_OWORD *)v22 != 0);
          WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v22 + 16, v19);
          *(_OWORD *)uint64_t v22 = *(_OWORD *)v15;
          uint64_t v23 = v6 + 32 * v13;
          *(void *)(v22 + 16) = 0;
          *(void *)(v22 + ++*(_DWORD *)(this + 24) = 0;
          uint64_t v24 = *(void *)(v23 + 16);
          v23 += 16;
          *(void *)uint64_t v23 = 0;
          *(void *)(v22 + 16) = v24;
          int v25 = *(_DWORD *)(v23 + 8);
          *(_DWORD *)(v23 + ++*(_DWORD *)(this + 8) = 0;
          *(_DWORD *)(v22 + ++*(_DWORD *)(this + 24) = v25;
          int v26 = *(_DWORD *)(v23 + 12);
          *(_DWORD *)(v23 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
          *(_DWORD *)(v22 + 2++*(_DWORD *)(this + 8) = v26;
          WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v23, v27);
          if (v15 == a3) {
            uint64_t v14 = v22;
          }
        }
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t *WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::take@<X0>(uint64_t *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *result;
  if (*result) {
    v3 += 32 * *(unsigned int *)(v3 - 4);
  }
  if ((void *)v3 == a2)
  {
    v6[0] = 0;
    *a3 = 0;
    v6[1] = 0;
    a3[1] = 0;
    return (uint64_t *)WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v6, a2);
  }
  *a3 = a2[2];
  uint64_t v4 = a2[3];
  a2[2] = 0;
  a2[3] = 0;
  a3[1] = v4;
  if (*result)
  {
    uint64_t v5 = *result + 32 * *(unsigned int *)(*result - 4);
    if ((void *)v5 == a2) {
      return result;
    }
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v5 = 0;
  }
  if ((void *)v5 != a2)
  {
    return (uint64_t *)WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(result, a2);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::remove(uint64_t *a1, void *a2)
{
  *a2 = -1;
  uint64_t result = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a2 + 2), a2 + 2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t *WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v5 = *(_DWORD *)(v2 - 8);
  int v15 = -1640531527;
  __int16 v16 = 0;
  char v17 = 0;
  WTF::add<WTF::ObjectIdentifierGeneric<WebCore::ProcessIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>,WTF::ObjectIdentifierGeneric<WebCore::PortIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>(&v15, a2, a2 + 1);
  int v6 = WTF::SuperFastHash::hash((WTF::SuperFastHash *)&v15);
  uint64_t v7 = a2[1];
  uint64_t v8 = v6 & v5;
  uint64_t result = (uint64_t *)(v2 + 32 * v8);
  uint64_t v10 = *result;
  uint64_t v11 = result[1];
  if (*result != *a2 || v11 != v7)
  {
    int v13 = 1;
    while (v10 | v11)
    {
      uint64_t v8 = (v8 + v13) & v5;
      uint64_t result = (uint64_t *)(v2 + 32 * v8);
      uint64_t v10 = *result;
      uint64_t v11 = result[1];
      ++v13;
      if (*result == *a2 && v11 == v7) {
        return result;
      }
    }
    if (*a1) {
      return (uint64_t *)(*a1 + 32 * *(unsigned int *)(*a1 - 4));
    }
    else {
      return 0;
    }
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6C00;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6C00;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)#1},void,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&>::call(uint64_t a1, IPC::Decoder *this)
{
  uint64_t v2 = (WebKit::WebMessagePortChannelProvider *)(a1 + 8);
  if (this)
  {
    uint64_t v4 = *(void **)this;
    if (v4)
    {
      unint64_t v5 = *((void *)this + 1);
      unint64_t v6 = ((*((void *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v4;
      if (v5 >= v6 && v5 - v6 > 7)
      {
        uint64_t v8 = (unint64_t *)((*((void *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v9 = *v8;
        *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v8 + 1;
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        if (v9 >= 0xAAAA)
        {
          while (1)
          {
            IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(this, (uint64_t)&v47);
            if (!v51) {
              break;
            }
            int v27 = HIDWORD(v53);
            if (HIDWORD(v53) == v53)
            {
              WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>((uint64_t)&v52, (unint64_t)&v47);
            }
            else
            {
              uint64_t v33 = v52 + 24 * HIDWORD(v53);
              uint64_t v34 = v47;
              uint64_t v47 = 0;
              *(void *)(v33 + ++*(_DWORD *)(this + 8) = 0;
              *(void *)(v33 + 16) = 0;
              *(void *)uint64_t v33 = v34;
              uint64_t v35 = v48;
              uint64_t v48 = 0;
              *(void *)(v33 + ++*(_DWORD *)(this + 8) = v35;
              LODWORD(v35) = v49;
              int v49 = 0;
              *(_DWORD *)(v33 + 16) = v35;
              LODWORD(v35) = v50;
              int v50 = 0;
              *(_DWORD *)(v33 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v35;
              HIDWORD(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v27 + 1;
            }
            std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v21);
            if (!--v9)
            {
              WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((uint64_t)&v52, HIDWORD(v53));
              uint64_t v11 = v52;
              uint64_t v52 = 0;
              uint64_t v44 = v11;
              LODWORD(v9) = v53;
              unsigned int v10 = HIDWORD(v53);
              goto LABEL_12;
            }
          }
        }
        else
        {
          if (!v9)
          {
            unsigned int v10 = 0;
            uint64_t v11 = 0;
LABEL_11:
            uint64_t v52 = 0;
            uint64_t v44 = v11;
LABEL_12:
            uint64_t v53 = 0;
            unint64_t v45 = __PAIR64__(v10, v9);
            char v46 = 1;
            WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v4);
            unint64_t v12 = *((void *)this + 1);
            int v13 = *(char **)this;
            unint64_t v14 = ((*((void *)this + 2) + 7) & 0xFFFFFFFFFFFFFFF8) - *(void *)this;
            if (v12 < v14 || v12 - v14 <= 7)
            {
              unint64_t v28 = 0;
              uint64_t v29 = 0;
              *(void *)this = 0;
              *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
              uint64_t v30 = *((void *)this + 3);
              if (v30)
              {
                if (v12)
                {
                  (*(void (**)(uint64_t))(*(void *)v30 + 16))(v30);
                  uint64_t v29 = *(void *)this;
                  unint64_t v28 = *((void *)this + 1);
                }
                else
                {
                  unint64_t v28 = 0;
                  uint64_t v29 = 0;
                }
              }
            }
            else
            {
              int v15 = (uint64_t *)&v13[v14];
              *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v15 + 1;
              if (v13)
              {
                uint64_t v16 = *v15;
                uint64_t v44 = 0;
                unint64_t v45 = 0;
                uint64_t v39 = v11;
                int v40 = v9;
                unsigned int v41 = v10;
                uint64_t v42 = v16;
                char v43 = 1;
                WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v13);
                uint64_t result = WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(v2, (uint64_t)&v39, v16);
                if (!v43) {
                  return result;
                }
                uint64_t v19 = &v39;
                return WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
              }
              unint64_t v28 = v12;
              uint64_t v29 = 0;
            }
            *(void *)this = 0;
            *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
            uint64_t v31 = *((void *)this + 3);
            if (v31 && v28) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v29);
            }
            WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v44, v13);
LABEL_43:
            IPC::Decoder::markInvalid(this);
            uint64_t v47 = 0;
            uint64_t v48 = 0;
            WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(v2, (uint64_t)&v47, 0);
            uint64_t v19 = &v47;
            return WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v19, v18);
          }
          LODWORD(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 24 * (int)v9 / 0x18u;
          uint64_t v52 = WTF::fastMalloc((WTF *)(24 * v9));
          while (1)
          {
            IPC::Decoder::decode<WebCore::MessageWithMessagePorts>(this, (uint64_t)&v47);
            if (!v51) {
              break;
            }
            int v22 = HIDWORD(v53);
            if (HIDWORD(v53) == v53)
            {
              WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>((uint64_t)&v52, (unint64_t)&v47);
            }
            else
            {
              uint64_t v36 = v52 + 24 * HIDWORD(v53);
              uint64_t v37 = v47;
              uint64_t v47 = 0;
              *(void *)(v36 + ++*(_DWORD *)(this + 8) = 0;
              *(void *)(v36 + 16) = 0;
              *(void *)uint64_t v36 = v37;
              uint64_t v38 = v48;
              uint64_t v48 = 0;
              *(void *)(v36 + ++*(_DWORD *)(this + 8) = v38;
              LODWORD(v3++*(_DWORD *)(this + 8) = v49;
              int v49 = 0;
              *(_DWORD *)(v36 + 16) = v38;
              LODWORD(v3++*(_DWORD *)(this + 8) = v50;
              int v50 = 0;
              *(_DWORD *)(v36 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v38;
              HIDWORD(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v22 + 1;
            }
            std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v21);
            if (!--v9)
            {
              uint64_t v11 = v52;
              LODWORD(v9) = v53;
              unsigned int v10 = HIDWORD(v53);
              goto LABEL_11;
            }
          }
        }
        std::__optional_destruct_base<WebCore::MessageWithMessagePorts,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v21);
        WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v52, v32);
      }
      else
      {
        *(void *)this = 0;
        *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
        uint64_t v23 = *((void *)this + 3);
        if (v23)
        {
          if (v5)
          {
            (*(void (**)(uint64_t))(*(void *)v23 + 16))(v23);
            uint64_t v24 = *(void *)this;
            uint64_t v25 = *((void *)this + 1);
            uint64_t v26 = *((void *)this + 3);
            *(void *)this = 0;
            *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
            if (v26)
            {
              if (v25) {
                (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 16))(v26, v24);
              }
            }
          }
        }
      }
      IPC::Decoder::markInvalid(this);
      goto LABEL_43;
    }
  }
  int v20 = (WebKit::WebMessagePortChannelProvider *)(a1 + 8);

  return IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(v20);
}

uint64_t IPC::Connection::cancelReply<Messages::NetworkConnectionToWebProcess::TakeAllMessagesForPort,WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0>(WebKit::WebMessagePortChannelProvider *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(a1, (uint64_t)v3, 0);
  return WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v3, v1);
}

uint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity(uint64_t result, unint64_t this)
{
  if (*(unsigned int *)(result + 8) > this)
  {
    uint64_t v3 = result;
    unint64_t v4 = *(unsigned int *)(result + 12);
    if (v4 > this)
    {
      uint64_t result = (uint64_t)WTF::VectorDestructor<true,WebCore::MessageWithMessagePorts>::destruct((unsigned int *)(*(void *)result + 24 * this), (unsigned int *)(*(void *)result + 24 * v4));
      *(_DWORD *)(v3 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = this;
      LODWORD(v4) = this;
    }
    unint64_t v5 = *(uint64_t **)v3;
    if (this)
    {
      if (this >= 0xAAAAAAB)
      {
        __break(0xC471u);
        JUMPOUT(0x1991DE160);
      }
      unint64_t v6 = (WTF *)(24 * this);
      uint64_t result = WTF::fastMalloc(v6);
      *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = (v6 & 0xFFFFFFF8) / 0x18;
      *(void *)uint64_t v3 = result;
      if ((uint64_t *)result != v5) {
        uint64_t result = (uint64_t)WTF::VectorMover<false,WebCore::MessageWithMessagePorts>::move(v5, &v5[3 * v4], result);
      }
    }
    if (v5)
    {
      if (*(uint64_t **)v3 == v5)
      {
        *(void *)uint64_t v3 = 0;
        *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = 0;
      }
      return WTF::fastFree((WTF *)v5, (void *)this);
    }
  }
  return result;
}

uint64_t *WTF::VectorMover<false,WebCore::MessageWithMessagePorts>::move(uint64_t *result, uint64_t *a2, uint64_t a3)
{
  for (; result != a2; a3 += 24)
  {
    uint64_t v5 = *result;
    uint64_t *result = 0;
    *(void *)(a3 + ++*(_DWORD *)(this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = v5;
    uint64_t v6 = result[1];
    result[1] = 0;
    *(void *)(a3 + ++*(_DWORD *)(this + 8) = v6;
    LODWORD(v6) = *((_DWORD *)result + 4);
    *((_DWORD *)result + 4) = 0;
    *(_DWORD *)(a3 + 16) = v6;
    LODWORD(v6) = *((_DWORD *)result + 5);
    *((_DWORD *)result + 5) = 0;
    *(_DWORD *)(a3 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v6;
    WebCore::MessageWithMessagePorts::~MessageWithMessagePorts((WebCore::MessageWithMessagePorts *)result, a2);
    uint64_t result = (uint64_t *)(v7 + 24);
  }
  return result;
}

uint64_t WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(WebKit::WebMessagePortChannelProvider *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = WebKit::WebMessagePortChannelProvider::singleton(a1);
  uint64_t v7 = WTF::HashTable<WebCore::MessagePortIdentifier,WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::MessagePortIdentifier>>::find<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::MessagePortIdentifier,WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WebCore::MessagePortIdentifier>,WTF::HashTraits<WebCore::MessagePortIdentifier>,WTF::HashTraits<WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::MessagePortIdentifier>>,WebCore::MessagePortIdentifier>(v6 + 2, (void *)a1 + 1);
  unint64_t v9 = (uint64_t *)v6[2];
  if (v9) {
    v9 += 4 * *((unsigned int *)v9 - 1);
  }
  if (v9 != v7)
  {
    uint64_t v10 = v7[2];
    int v27 = (void *)v10;
    uint64_t v11 = *((unsigned int *)v7 + 7);
    int v28 = *((_DWORD *)v7 + 6);
    int v29 = v11;
    v26[0] = 0;
    void v7[2] = 0;
    v26[1] = 0;
    v7[3] = 0;
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v26, v8);
    unint64_t v13 = *(unsigned int *)(a2 + 8);
    unint64_t v14 = *(unsigned int *)(a2 + 12) + v11;
    if (v14 > v13)
    {
      unint64_t v15 = v13 + (v13 >> 2);
      if (v15 >= 0x10) {
        unint64_t v16 = v15 + 1;
      }
      else {
        unint64_t v16 = 16;
      }
      if (v16 <= v14) {
        unint64_t v17 = *(unsigned int *)(a2 + 12) + v11;
      }
      else {
        unint64_t v17 = v16;
      }
      WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a2, v17);
    }
    if (v11)
    {
      uint64_t v21 = v10 + 24 * v11;
      unsigned int v22 = *(_DWORD *)(a2 + 12);
      do
      {
        uint64_t v23 = *(void *)a2 + 24 * v22;
        uint64_t v24 = *(void *)v10;
        *(void *)uint64_t v10 = 0;
        *(void *)(v23 + ++*(_DWORD *)(this + 8) = 0;
        *(void *)(v23 + 16) = 0;
        *(void *)uint64_t v23 = v24;
        uint64_t v25 = *(void *)(v10 + 8);
        *(void *)(v10 + ++*(_DWORD *)(this + 8) = 0;
        *(void *)(v23 + ++*(_DWORD *)(this + 8) = v25;
        LODWORD(v25) = *(_DWORD *)(v10 + 16);
        *(_DWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v23 + 16) = v25;
        LODWORD(v25) = *(_DWORD *)(v10 + 20);
        *(_DWORD *)(v10 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *(_DWORD *)(v23 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v25;
        unsigned int v22 = *(_DWORD *)(a2 + 12) + 1;
        *(_DWORD *)(a2 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v22;
        v10 += 24;
      }
      while (v10 != v21);
    }
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v27, v12);
  }
  int v18 = (void *)WTF::fastMalloc((WTF *)0x10);
  *int v18 = &unk_1EE9F6C28;
  v18[1] = a3;
  int v27 = v18;
  uint64_t v19 = *(void *)a1;
  *(void *)a1 = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v19 + 16))(v19, a2, &v27);
  (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  uint64_t result = (uint64_t)v27;
  int v27 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t *result, unint64_t a2)
{
  if (*((unsigned int *)result + 2) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      uint64_t v2 = result;
      uint64_t v3 = (uint64_t *)*result;
      unint64_t v4 = (uint64_t *)(*result + 24 * *((unsigned int *)result + 3));
      int v5 = 24 * a2;
      uint64_t v6 = WTF::fastMalloc((WTF *)(24 * a2));
      *((_DWORD *)v2 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = (v5 & 0xFFFFFFF8) / 0x18;
      uint64_t *v2 = v6;
      uint64_t result = WTF::VectorMover<false,WebCore::MessageWithMessagePorts>::move(v3, v4, v6);
      if (v3)
      {
        if ((uint64_t *)*v2 == v3)
        {
          uint64_t *v2 = 0;
          *((_DWORD *)v2 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
        }
        return (uint64_t *)WTF::fastFree((WTF *)v3, v7);
      }
    }
  }
  return result;
}

IPC::Encoder *WTF::Detail::CallableWrapper<WebKit::WebMessagePortChannelProvider::takeAllMessagesForPort(WebCore::MessagePortIdentifier const&,WTF::CompletionHandler<void ()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&,WTF::CompletionHandler<void ()(void)> &&)> &&)::$_0::operator()(WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned long long)::{lambda(void)#1},void>::call(uint64_t a1)
{
  {
    uint64_t v8 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v8);
  }
  uint64_t v2 = *(void *)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                 + 24);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v3 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v3 = 238;
  *((void *)v3 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v3 + 66) = (char *)v3 + 16;
  *((void *)v3 + 67) = 512;
  *((void *)v3 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v3 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v3 + 69) = 0;
  IPC::Encoder::encodeHeader(v3);
  uint64_t v10 = v3;
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v3, &v9);
  IPC::Connection::sendMessageImpl(v2, (uint64_t *)&v10, 0, 0);
  uint64_t result = v10;
  uint64_t v10 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v4);
    return (IPC::Encoder *)WTF::fastFree(v6, v7);
  }
  return result;
}

unint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::MessageWithMessagePorts>(uint64_t a1, unint64_t a2)
{
  unint64_t result = WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  uint64_t v4 = *(void *)a1 + 24 * *(unsigned int *)(a1 + 12);
  uint64_t v5 = *(void *)result;
  *(void *)unint64_t result = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)uint64_t v4 = v5;
  uint64_t v6 = *(void *)(result + 8);
  *(void *)(result + ++*(_DWORD *)(this + 8) = 0;
  *(void *)(v4 + ++*(_DWORD *)(this + 8) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(v4 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(result + 20);
  *(_DWORD *)(result + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *(_DWORD *)(v4 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v6;
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v5 = *(void *)a1;
  if (*(void *)a1 <= a3 && v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    unint64_t v9 = a3 - v5;
    unint64_t v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10) {
      unint64_t v11 = v10 + 1;
    }
    else {
      unint64_t v11 = 16;
    }
    if (v11 > a2) {
      a2 = v11;
    }
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
    return *(void *)a1 + v9;
  }
  else
  {
    unint64_t v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10) {
      unint64_t v7 = v6 + 1;
    }
    else {
      unint64_t v7 = 16;
    }
    if (v7 > a2) {
      a2 = v7;
    }
    WTF::Vector<WebCore::MessageWithMessagePorts,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t *)a1, a2);
  }
  return v3;
}

void *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F6C50;
  unint64_t v3 = (unsigned int *)a1[37];
  a1[37] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (WTF *)a1[36];
  a1[36] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F6C50;
  unint64_t v3 = (unsigned int *)a1[37];
  a1[37] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = (WTF *)a1[36];
  a1[36] = 0;
  if (v4) {
    WTF::ThreadSafeRefCounted<WebCore::NotificationResources,(WTF::DestructionThread)0>::deref(v4, a2);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 4), a2);

  return WTF::fastFree((WTF *)a1, v5);
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  {
    unint64_t v10 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v10);
  }
  *(void *)&long long v12 = "WebNotificationManager";
  *((void *)&v12 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 23;
  uint64_t v2 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)&v12);
  uint64_t v3 = *(void *)(a1 + 296);
  if (v3 && (uint64_t v4 = *(void *)(v3 + 8)) != 0)
  {
    uint64_t v5 = (CFTypeRef *)(v4 - 16);
    CFRetain(*(CFTypeRef *)(v4 - 8));
    char v6 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 1;
  }
  long long v12 = *(_OWORD *)(a1 + 304);
  *(void *)&long long v13 = *(void *)(a1 + 320);
  uint64_t v7 = *(void *)(a1 + 336);
  uint64_t v8 = WTF::fastMalloc((WTF *)0x40);
  *(void *)uint64_t v8 = &unk_1EE9F6C78;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)(v8 + ++*(_DWORD *)(this + 32) = v13;
  *(void *)(v8 + 4++*(_DWORD *)(this + 8) = v7;
  uint64_t v11 = v8;
  **(unsigned char **)(a1 + 16) = WebKit::WebNotificationManager::show((uint64_t)v2, a1 + 32, a1 + 288, (WebCore::DeprecatedGlobalSettings *)v5, &v11);
  uint64_t v9 = v11;
  uint64_t v11 = 0;
  if (!v9)
  {
    if (v6) {
      return;
    }
    goto LABEL_8;
  }
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  if ((v6 & 1) == 0) {
LABEL_8:
  }
    CFRelease(v5[1]);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::show(WebCore::ScriptExecutionContext &,WebCore::NotificationData &&,WTF::RefPtr<WebCore::NotificationResources,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v2 = &unk_1EE9F6CA0;
  v2[1] = v1;
  uint64_t v4 = v2;
  WebCore::ScriptExecutionContext::ensureOnContextThread();
  uint64_t result = (uint64_t)v4;
  if (v4) {
    return (*(uint64_t (**)(void *))(*v4 + 8))(v4);
  }
  return result;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN6WebKit21WebNotificationClient4showERN7WebCore22ScriptExecutionContextEONS4_16NotificationDataEONS_6RefPtrINS4_21NotificationResourcesENS_12RawPtrTraitsISA_EENS_21DefaultRefDerefTraitsISA_EEEEONS_17CompletionHandlerIFvvEEEEN3__0clEvENKUlvE_clEvEUlRT_E_vJS6_EE4callES6_()
{
  uint64_t result = WebCore::ScriptExecutionContext::takeNotificationCallback();
  if (v1)
  {
    (*(void (**)())(*(void *)v1 + 16))();
    (*(void (**)())(*(void *)v1 + 8))();
    return 0;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::cancel(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F6CC8;
  uint64_t v3 = (unsigned int *)a1[34];
  a1[34] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::cancel(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F6CC8;
  uint64_t v3 = (unsigned int *)a1[34];
  a1[34] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::cancel(WebCore::NotificationData &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  v8[0] = "WebNotificationManager";
  v8[1] = 23;
  uint64_t v3 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v8);
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = *(void *)(a1 + 272);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v6 - 8));
    WebKit::WebNotificationManager::cancel(v4, v2, (WebCore::DeprecatedGlobalSettings *)(v6 - 16));
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    WebKit::WebNotificationManager::cancel((uint64_t)v3, v2, 0);
  }
}

void *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationObjectDestroyed(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F6CF0;
  uint64_t v3 = (unsigned int *)a1[34];
  a1[34] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationObjectDestroyed(WebCore::NotificationData &&)::$_0,void>::~CallableWrapper(void *a1, void *a2)
{
  *a1 = &unk_1EE9F6CF0;
  uint64_t v3 = (unsigned int *)a1[34];
  a1[34] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::NotificationData::~NotificationData((WebCore::NotificationData *)(a1 + 2), a2);

  return WTF::fastFree((WTF *)a1, v4);
}

void WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationObjectDestroyed(WebCore::NotificationData &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  {
    uint64_t v7 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v7);
  }
  v8[0] = "WebNotificationManager";
  v8[1] = 23;
  uint64_t v3 = WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v8);
  uint64_t v4 = (uint64_t)v3;
  uint64_t v5 = *(void *)(a1 + 272);
  if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v6 - 8));
    WebKit::WebNotificationManager::didDestroyNotification(v4, v2, (WebCore::DeprecatedGlobalSettings *)(v6 - 16));
    CFRelease(*(CFTypeRef *)(v6 - 8));
  }
  else
  {
    WebKit::WebNotificationManager::didDestroyNotification((uint64_t)v3, v2, 0);
  }
}

WebKit::WebNotificationClient *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::notificationControllerDestroyed(void)::$_0,void>::call(uint64_t a1, void *a2)
{
  uint64_t result = *(WebKit::WebNotificationClient **)(a1 + 8);
  if (result)
  {
    WebKit::WebNotificationClient::~WebNotificationClient(result, a2);
    return (WebKit::WebNotificationClient *)WTF::fastFree(v3, v4);
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::requestPermission(WebCore::ScriptExecutionContext &,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0,void,BOOL>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6D40;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::requestPermission(WebCore::ScriptExecutionContext &,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6D40;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::requestPermission(WebCore::ScriptExecutionContext &,WTF::CompletionHandler<void ()(WebCore::NotificationPermission)> &&)::$_0,void,BOOL>::call(uint64_t a1, int a2)
{
  if (a2) {
    uint64_t v2 = 2;
  }
  else {
    uint64_t v2 = 1;
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 16))(v3, v2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v3 + 8);

  return v4(v3);
}

void *WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::checkPermission(WebCore::ScriptExecutionContext *)::$_0,void>::~CallableWrapper(void *a1, WTF::StringImpl *a2)
{
  *a1 = &unk_1EE9F6D68;
  uint64_t v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::checkPermission(WebCore::ScriptExecutionContext *)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  *(void *)this = &unk_1EE9F6D68;
  uint64_t v3 = (WTF::StringImpl *)*((void *)this + 2);
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2) {
      WTF::StringImpl::destroy(v3, a2);
    }
    else {
      *(_DWORD *)v3 -= 2;
    }
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebNotificationClient::checkPermission(WebCore::ScriptExecutionContext *)::$_0,void>::call(uint64_t a1)
{
  {
    uint64_t v4 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v4);
  }
  v5[0] = "WebNotificationManager";
  v5[1] = 23;
  uint64_t v2 = (WebKit::WebNotificationManager *)WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebKit::WebProcessSupplement>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebKit::WebProcessSupplement>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>,WTF::ASCIILiteral>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 272), (WTF::ASCIILiteralHash *)v5);
  uint64_t result = WebKit::WebNotificationManager::policyForOrigin(v2, (const WTF::StringImpl **)(a1 + 16), 0);
  **(_DWORD **)(a1 + ++*(_DWORD *)(this + 8) = result;
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(uint64_t *a1, WTF::StringImpl **a2)
{
  uint64_t v3 = *a1;
  if (*a1 && (int v4 = *(_DWORD *)(v3 - 4)) != 0) {
    unsigned int v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  }
  else {
    unsigned int v5 = 8;
  }
  return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v5, a2);
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(uint64_t *a1, unsigned int a2, WTF::StringImpl **a3)
{
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = *(_DWORD *)(v6 - 4);
    int v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    unsigned int v7 = 0;
    int v8 = 0;
  }
  uint64_t v9 = WTF::fastMalloc((WTF *)(16 * a2 + 16));
  uint64_t v11 = v9;
  uint64_t v12 = v9 + 16;
  if (a2) {
    bzero((void *)(v9 + 16), 16 * a2);
  }
  *a1 = v12;
  *(_DWORD *)(v11 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = a2;
  *(_DWORD *)(*a1 - ++*(_DWORD *)(this + 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v8;
  if (v7)
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = v7;
    do
    {
      unint64_t v16 = (WTF::StringImpl **)(v6 + 16 * v13);
      unint64_t v17 = *v16;
      if (*v16 != (WTF::StringImpl *)-1)
      {
        if (v17)
        {
          uint64_t v18 = *a1;
          if (*a1) {
            int v19 = *(_DWORD *)(v18 - 8);
          }
          else {
            int v19 = 0;
          }
          unsigned int v20 = *((_DWORD *)v17 + 4);
          if (v20 >= 0x100) {
            unsigned int v21 = v20 >> 8;
          }
          else {
            unsigned int v21 = WTF::StringImpl::hashSlowCase(v17);
          }
          int v22 = 0;
          do
          {
            uint64_t v23 = v21 & v19;
            unsigned int v21 = ++v22 + v23;
          }
          while (*(void *)(v18 + 16 * v23));
          uint64_t v24 = v18 + 16 * v23;
          uint64_t v26 = (void *)(v24 + 8);
          uint64_t v25 = *(void *)(v24 + 8);
          if (v25)
          {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v25, v10);
            int v27 = *(WTF::StringImpl **)v24;
            *(void *)uint64_t v24 = 0;
            if (v27)
            {
              if (*(_DWORD *)v27 == 2) {
                WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v10);
              }
              else {
                *(_DWORD *)v27 -= 2;
              }
            }
          }
          else
          {
            *(void *)uint64_t v24 = 0;
          }
          int v28 = *v16;
          WebCore::DeprecatedGlobalSettings *v16 = 0;
          *(void *)uint64_t v24 = v28;
          uint64_t v29 = v6 + 16 * v13;
          *uint64_t v26 = 0;
          uint64_t v30 = *(void *)(v29 + 8);
          *(void *)(v29 + ++*(_DWORD *)(this + 8) = 0;
          *uint64_t v26 = v30;
          uint64_t v31 = *(void *)(v29 + 8);
          if (v31) {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v31, v10);
          }
          int v32 = *v16;
          WebCore::DeprecatedGlobalSettings *v16 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2) {
              WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v32 -= 2;
            }
          }
          if (v16 == a3) {
            uint64_t v14 = v24;
          }
        }
        else
        {
          if (*(void *)(v6 + 16 * v13 + 8))
          {
            WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(*(void *)(v6 + 16 * v13 + 8), v10);
            unint64_t v17 = *v16;
          }
          WebCore::DeprecatedGlobalSettings *v16 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2) {
              WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v10);
            }
            else {
              *(_DWORD *)v17 -= 2;
            }
          }
        }
      }
      ++v13;
    }
    while (v13 != v15);
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
  }
  WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

unsigned int *WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>@<X0>(uint64_t *a1@<X0>, WTF::StringImpl **a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *a1;
  if (*a1
    || (WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, 0), (uint64_t v8 = *a1) != 0))
  {
    int v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    int v9 = 0;
  }
  unsigned int v10 = *((_DWORD *)*a2 + 4);
  uint64_t v29 = (uint64_t)a3;
  if (v10 >= 0x100) {
    unsigned int v11 = v10 >> 8;
  }
  else {
    unsigned int v11 = WTF::StringImpl::hashSlowCase(*a2);
  }
  uint64_t v12 = 0;
  for (int i = 1; ; ++i)
  {
    unsigned int v14 = v11 & v9;
    uint64_t v15 = v8 + 24 * (v11 & v9);
    unint64_t v16 = *(WTF **)v15;
    if (*(void *)v15 != -1) {
      break;
    }
    uint64_t v12 = (void *)(v8 + 24 * v14);
LABEL_13:
    unsigned int v11 = i + v14;
  }
  if (!v16)
  {
    if (v12)
    {
      *uint64_t v12 = 0;
      v12[1] = 0;
      void v12[2] = 0;
      --*(_DWORD *)(*a1 - 16);
      uint64_t v15 = (uint64_t)v12;
    }
    WTF::String::operator=((uint64_t *)v15, a2);
    int v18 = *(_DWORD *)(v29 + 12);
    if (v18)
    {
      int v19 = (void *)WTF::fastMalloc((WTF *)*(unsigned int *)(v29 + 12));
      memcpy(v19, *(const void **)v29, *(unsigned int *)(v29 + 12));
    }
    else
    {
      int v19 = 0;
    }
    uint64_t result = *(unsigned int **)(v15 + 8);
    if (result)
    {
      *(void *)(v15 + ++*(_DWORD *)(this + 8) = 0;
      *(_DWORD *)(v15 + 16) = 0;
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v17);
    }
    *(void *)(v15 + ++*(_DWORD *)(this + 8) = v19;
    *(_DWORD *)(v15 + 16) = v18;
    *(_DWORD *)(v15 + 2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v18;
    uint64_t v21 = *a1;
    if (*a1) {
      int v22 = *(_DWORD *)(v21 - 12) + 1;
    }
    else {
      int v22 = 1;
    }
    *(_DWORD *)(v21 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v22;
    uint64_t v25 = *a1;
    if (*a1) {
      int v26 = *(_DWORD *)(v25 - 12);
    }
    else {
      int v26 = 0;
    }
    uint64_t v27 = (*(_DWORD *)(v25 - 16) + v26);
    unint64_t v28 = *(unsigned int *)(v25 - 4);
    if (v28 > 0x400)
    {
      if (v28 <= 2 * v27)
      {
LABEL_30:
        uint64_t result = (unsigned int *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::expand(a1, v15);
        uint64_t v15 = (uint64_t)result;
        uint64_t v25 = *a1;
        if (*a1) {
          LODWORD(v2++*(_DWORD *)(this + 8) = *(_DWORD *)(v25 - 4);
        }
        else {
          LODWORD(v2++*(_DWORD *)(this + 8) = 0;
        }
      }
    }
    else if (3 * v28 <= 4 * v27)
    {
      goto LABEL_30;
    }
    *(void *)a4 = v15;
    *(void *)(a4 + ++*(_DWORD *)(this + 8) = v25 + 24 * v28;
    *(unsigned char *)(a4 + 16) = 1;
    return result;
  }
  if (!WTF::equal(v16, *a2, a3)) {
    goto LABEL_13;
  }
  uint64_t v23 = *a1;
  if (*a1) {
    unsigned int v24 = *(_DWORD *)(v23 - 4);
  }
  else {
    unsigned int v24 = 0;
  }
  *(void *)a4 = v15;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = v23 + 24 * v24;
  *(unsigned char *)(a4 + 16) = 0;

  return WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((unsigned int *)(v8 + 24 * v14 + 8), v29);
}

WTF *WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return (WTF *)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

WTF *WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  uint64_t result = *(WTF **)(a1 + 8);
  if (result)
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return (WTF *)WTF::fastFree(result, v3);
  }
  return result;
}

uint64_t WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::remove(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t result = WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>::customDeleteBucket((uint64_t)a2, a2);
  ++*(_DWORD *)(*a1 - 16);
  uint64_t v4 = *a1;
  if (*a1) {
    int v5 = *(_DWORD *)(v4 - 12) - 1;
  }
  else {
    int v5 = -1;
  }
  *(_DWORD *)(v4 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v5;
  uint64_t v6 = *a1;
  if (*a1)
  {
    unsigned int v7 = 6 * *(_DWORD *)(v6 - 12);
    unsigned int v8 = *(_DWORD *)(v6 - 4);
    if (v7 < v8 && v8 >= 9)
    {
      return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::rehash(a1, v8 >> 1, 0);
    }
  }
  return result;
}

uint64_t WTF::KeyValuePairHashTraits<WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>>>::customDeleteBucket(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::HashTraits<WTF::String>::customDeleteBucket((WTF::StringImpl **)a1, a2);
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    return WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, v3);
  }
  return result;
}

uint64_t WTF::Mapper<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVectorOf<WTF::String,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>>(WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&)::{lambda(WTF::String&&)#1},WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::SizedIteratorRange<WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>,WTF::HashTableKeysIterator<WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>,WTF::String,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>> const&,void>::map(uint64_t result, uint64_t **a2)
{
  uint64_t v3 = result;
  uint64_t v4 = **a2;
  if (v4)
  {
    uint64_t v5 = *(unsigned int *)(v4 - 12);
    if (v5)
    {
      if (v5 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      uint64_t result = WTF::fastMalloc((WTF *)(8 * v5));
      *(_DWORD *)(v3 + ++*(_DWORD *)(this + 8) = v5;
      *(void *)uint64_t v3 = result;
    }
  }
  uint64_t v6 = a2[1];
  unsigned int v7 = a2[3];
  if (v6 != v7)
  {
    unsigned int v8 = a2[2];
    uint64_t v9 = *(void *)v3;
    unsigned int v10 = *(_DWORD *)(v3 + 12);
    do
    {
      unsigned int v11 = (_DWORD *)*v6;
      if (*v6) {
        *v11 += 2;
      }
      *(void *)(v9 + 8 * v1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v11;
      while (1)
      {
        v6 += 3;
        if (v6 == v8) {
          break;
        }
        if ((unint64_t)(*v6 + 1) > 1) {
          goto LABEL_14;
        }
      }
      uint64_t v6 = v8;
LABEL_14:
      ++v10;
    }
    while (v6 != v7);
    *(_DWORD *)(v3 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v10;
  }
  return result;
}

void *WTF::Detail::CallableWrapper<WebCore::PermissionQuerySource<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::GetPermissionState,WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)#1},void,WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6D90;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PermissionQuerySource<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::GetPermissionState,WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)#1},void,WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6D90;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PermissionQuerySource<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::NotificationManagerMessageHandler::GetPermissionState,WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>(WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0 &&,WTF::ThreadLikeAssertion)::{lambda(WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0)#1},void,WebKit::WebPermissionController::query(WebCore::ClientOrigin &&,WebCore::PermissionDescriptor,WTF::WeakPtr<WebCore::Page,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WebCore::Page>> const&,WebCore::PermissionQuerySource,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&)::$_0>::call(uint64_t a1, uint64_t *a2)
{
  if (a2
    && *a2
    && (unsigned __int16 v3 = IPC::Decoder::decode<std::tuple<WebCore::InspectorFrontendClientAppearance>>(a2), v3 >= 0x100u))
  {
    if (v3 >= 3u)
    {
      uint64_t result = 79;
      __break(0xC471u);
      return result;
    }
    uint64_t v7 = qword_1994F7890[(char)v3];
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v7);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, 257);
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);

  return v5(v4);
}

void *WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPermissionControllerProxy::Query,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(void *a1)
{
  uint64_t v2 = a1[1];
  *a1 = &unk_1EE9F6DB8;
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPermissionControllerProxy::Query,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = *((void *)this + 1);
  *(void *)this = &unk_1EE9F6DB8;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WTF::CompletionHandler<void ()(IPC::Decoder *)> IPC::Connection::makeAsyncReplyCompletionHandler<Messages::WebPermissionControllerProxy::Query,WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)>>(WTF::CompletionHandler<void ()(std::optional<WebCore::PermissionState>)> &&,WTF::ThreadLikeAssertion)::{lambda(IPC::Decoder *)#1},void,IPC::Decoder *>::call(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t v4 = *a2;
  if (!v4) {
    goto LABEL_24;
  }
  unint64_t v5 = a2[1];
  if (v5 <= a2[2] - v4)
  {
    unint64_t v8 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v12 = a2[3];
    if (v12)
    {
      if (v5)
      {
        (*(void (**)(uint64_t))(*(void *)v12 + 16))(v12);
        unint64_t v8 = 0;
        uint64_t v22 = *a2;
        uint64_t v23 = a2[1];
        uint64_t v24 = a2[3];
        *a2 = 0;
        a2[1] = 0;
        uint64_t v11 = 0;
        if (v24 && v23)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 16))(v24, v22);
          uint64_t v11 = *a2;
          unint64_t v8 = a2[1];
        }
      }
      else
      {
        unint64_t v8 = 0;
        uint64_t v11 = 0;
      }
    }
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v13 = a2[3];
    if (v13)
    {
      if (!v8) {
        goto LABEL_14;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v13 + 16))(v13, v11, v8);
    }
    LODWORD(v++*(_DWORD *)(this + 8) = 0;
LABEL_14:
    LOWORD(v7) = 0;
    __int16 v10 = 0;
    goto LABEL_19;
  }
  uint64_t v6 = (unsigned __int8 *)a2[2];
  a2[2] = (uint64_t)(v6 + 1);
  unsigned int v7 = *v6;
  if (v7 >= 2)
  {
    unint64_t v8 = v5;
    uint64_t v11 = v4;
    goto LABEL_12;
  }
  if (!*v6)
  {
    __int16 v10 = 0;
    goto LABEL_10;
  }
  if (v5 <= (unint64_t)&v6[-v4 + 1])
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    *a2 = 0;
    a2[1] = 0;
    uint64_t v14 = a2[3];
    if (v14)
    {
      (*(void (**)(uint64_t))(*(void *)v14 + 16))(v14);
      unint64_t v8 = 0;
      uint64_t v28 = *a2;
      uint64_t v29 = a2[1];
      uint64_t v30 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      uint64_t v9 = 0;
      if (v30)
      {
        if (v29)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v28);
          uint64_t v9 = *a2;
          unint64_t v8 = a2[1];
        }
      }
    }
LABEL_16:
    *a2 = 0;
    a2[1] = 0;
    uint64_t v15 = a2[3];
    if (v15)
    {
      if (!v8) {
        goto LABEL_18;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v15 + 16))(v15, v9, v8);
    }
    LODWORD(v++*(_DWORD *)(this + 8) = 0;
LABEL_18:
    LOWORD(v7) = 0;
    __int16 v10 = 256;
    goto LABEL_19;
  }
  a2[2] = (uint64_t)(v6 + 2);
  unsigned int v7 = v6[1];
  unint64_t v8 = v5;
  uint64_t v9 = v4;
  if (v7 > 2) {
    goto LABEL_16;
  }
  __int16 v10 = 256;
LABEL_10:
  LODWORD(v++*(_DWORD *)(this + 8) = 0x10000;
LABEL_19:
  if (WORD1(v8))
  {
    uint64_t v16 = *(void *)(a1 + 8);
    *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
    (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, ((unsigned __int16)(v7 | v8) | (unsigned __int16)v10) & 0x1FF);
    goto LABEL_25;
  }
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v19 = a2[3];
  if (v19)
  {
    if (v18)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v17);
      uint64_t v25 = *a2;
      uint64_t v26 = a2[1];
      uint64_t v27 = a2[3];
      *a2 = 0;
      a2[1] = 0;
      if (v27)
      {
        if (v26) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v25);
        }
      }
    }
  }
LABEL_24:
  uint64_t v16 = *(void *)(a1 + 8);
  *(void *)(a1 + ++*(_DWORD *)(this + 8) = 0;
  (*(void (**)(uint64_t, void))(*(void *)v16 + 16))(v16, 0);
LABEL_25:
  unsigned int v20 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 8);

  return v20(v16);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPermissionController::permissionChanged(WebCore::PermissionName,WebCore::SecurityOriginData const&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(void *a1, void *a2)
{
  uint64_t v3 = (unsigned int *)a1[1];
  *a1 = &unk_1EE9F6DE0;
  a1[1] = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebKit::WebPermissionController::permissionChanged(WebCore::PermissionName,WebCore::SecurityOriginData const&)::$_0,void,std::optional<WebCore::PermissionState>>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3 = (unsigned int *)*((void *)this + 1);
  *(void *)this = &unk_1EE9F6DE0;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }

  return WTF::fastFree(this, a2);
}

void *WTF::Detail::CallableWrapper<WebKit::WebPermissionController::permissionChanged(WebCore::PermissionName,WebCore::SecurityOriginData const&)::$_0,void,std::optional<WebCore::PermissionState>>::call(void *result, __int16 a2)
{
  uint64_t v2 = result[1];
  if (!v2) {
    return result;
  }
  uint64_t v3 = result;
  uint64_t result = *(void **)(v2 + 8);
  if (!result) {
    return result;
  }
  uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 16))(result);
  if ((a2 & 0xFF00) != 0 && result == a2) {
    return result;
  }
  uint64_t v5 = v3[1];
  if (!v5)
  {
    uint64_t result = 0;
    if ((a2 & 0xFF00) != 0) {
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t result = *(void **)(v5 + 8);
  if ((a2 & 0xFF00) == 0) {
    goto LABEL_12;
  }
LABEL_8:
  uint64_t v6 = *(uint64_t (**)(void))(*result + 24);

  return (void *)v6();
}

uint64_t WebKit::WebPlatformStrategies::createPasteboardStrategy(WebKit::WebPlatformStrategies *this)
{
  return (uint64_t)this + 56;
}

void WebKit::WebPlatformStrategies::createBlobRegistry(WebKit::WebPlatformStrategies *this)
{
}

uint64_t WebKit::WebPlatformStrategies::createPushStrategy(WebKit::WebPlatformStrategies *this)
{
  return (uint64_t)this + 64;
}

uint64_t WebKit::WebPlatformStrategies::getTypes(int a1, uint64_t a2, WTF::StringImpl **a3, IPC::Encoder *a4)
{
  uint64_t v5 = a3;
  p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
    goto LABEL_29;
  while (1)
  {
    WebKit::WebPasteboardOverrides::overriddenTypes((WebKit::WebPasteboardOverrides *)&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, v5, (const WTF::StringImpl *)a3, &v29);
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    if (v9) {
      WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a2, (WTF::StringImpl *)(*(void *)a2 + 8 * v9));
    }
    __int16 v10 = *(WTF **)a2;
    if (*(void *)a2)
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + ++*(_DWORD *)(this + 8) = 0;
      WTF::fastFree(v10, v8);
    }
    *(void *)a2 = v29;
    uint64_t v11 = v30;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    *(void *)(a2 + ++*(_DWORD *)(this + 8) = v11;
    uint64_t result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v29, v8);
    if (*(_DWORD *)(a2 + 12)) {
      return result;
    }
    {
      uint64_t v27 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v27);
    }
    uint64_t v14 = *(WTF::StringImpl ***)(WebKit::WebProcess::singleton(void)::process + 40);
    v28[0] = WebKit::pageIdentifier((uint64_t)a4, v13);
    v28[1] = v15;
    uint64_t v39 = 0;
    IPC::Connection::createSyncMessageEncoder(3805, 0, &v39, &v38);
    a4 = v38;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v38, (uint64_t *)v5);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a4, (uint64_t)v28);
    IPC::Connection::sendSyncMessage((uint64_t)v14, v39, (uint64_t *)&v38, 0, (uint64_t)&v36, INFINITY);
    if (v37)
    {
      if (v37 == 1)
      {
        LOBYTE(v29) = (_BYTE)v36;
        int v16 = 1;
        int v32 = 1;
        int v17 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      LOBYTE(v3WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
      char v35 = 0;
      IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v36, &v33);
      if (!v35)
      {
        LOBYTE(v29) = 13;
        int v16 = 1;
        int v32 = 1;
        goto LABEL_18;
      }
      if (!v37)
      {
        uint64_t v19 = v36;
        uint64_t v36 = 0;
        uint64_t v14 = v33;
        uint64_t v33 = 0;
        LODWORD(a4) = v34;
        LODWORD(v5) = HIDWORD(v34);
        uint64_t v34 = 0;
        int v40 = 0;
        v41[0] = 0;
        uint64_t v29 = v19;
        uint64_t v30 = v14;
        v41[1] = 0;
        unint64_t v31 = __PAIR64__(v5, a4);
        int v32 = 0;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v41, v18);
        unsigned int v20 = (IPC::Decoder *)v40;
        int v40 = 0;
        if (v20)
        {
          IPC::Decoder::~Decoder(v20);
          WTF::fastFree(v25, v26);
        }
        if (v35) {
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v33, v18);
        }
        int v16 = 0;
LABEL_18:
        int v17 = v37;
        if (v37 != -1) {
LABEL_19:
        }
          ((void (*)(WTF::StringImpl ***, IPC::Decoder **))off_1EE9F7690[v17])(&v40, &v36);
        uint64_t v21 = v38;
        uint64_t v38 = 0;
        if (v21)
        {
          IPC::Encoder::~Encoder(v21, v18);
          WTF::fastFree(v23, v24);
          if (!v16)
          {
LABEL_22:
            uint64_t v30 = 0;
            unint64_t v31 = 0;
            int v40 = v14;
            v41[0] = __PAIR64__(v5, a4);
            uint64_t v33 = (WTF::StringImpl **)a2;
            std::__memberwise_forward_assign[abi:sn180100]<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &>,std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul>(&v33, &v40);
            WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v40, v22);
          }
        }
        else if (!v16)
        {
          goto LABEL_22;
        }
        return ((uint64_t (*)(WTF::StringImpl ***, IPC::Decoder **))off_1EE9F74B0[v16])(&v40, &v29);
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
    *((unsigned char *)p_opt_inst_meths + 352++*(_DWORD *)(this + 8) = 1;
  }
}

uint64_t WebKit::pageIdentifier(uint64_t a1, __n128 a2)
{
  int8x16_t v2 = 0uLL;
  if (!a1)
  {
    int8x16_t v5 = 0uLL;
    return vorrq_s8(v2, v5).u64[0];
  }
  int v4 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(void *)a1 + 16))(a1, a2, (__n128)0);
  int8x16_t v2 = 0uLL;
  int8x16_t v5 = 0uLL;
  if (!v4) {
    return vorrq_s8(v2, v5).u64[0];
  }
  if ((*(uint64_t (**)(uint64_t, __n128, __n128))(*(void *)a1 + 16))(a1, (__n128)0, (__n128)0))
  {
    int8x16_t v6 = *(int8x16_t *)(a1 + 8);
    v7.i64[0] = -256;
    v7.i64[1] = -256;
    int8x16_t v5 = vandq_s8(v6, v7);
    v8.i64[0] = 255;
    v8.i64[1] = 255;
    int8x16_t v2 = vandq_s8(v6, v8);
    return vorrq_s8(v2, v5).u64[0];
  }
  uint64_t result = 96;
  __break(0xC471u);
  return result;
}

WTF *WebKit::WebPlatformStrategies::bufferForType@<X0>(IPC::Decoder *a1@<X1>, WTF::StringImpl **a2@<X2>, atomic_uint *a3@<X3>, atomic_uint **a4@<X8>)
{
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
    goto LABEL_39;
  while (1)
  {
    if (WebKit::WebPasteboardOverrides::getDataForOverride(&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, a2, a1, (unsigned int *)&v34))
    {
      WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a4);
      goto LABEL_26;
    }
    {
      uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v26);
    }
    uint64_t v11 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    v27[0] = WebKit::pageIdentifier((uint64_t)a3, v9);
    v27[1] = v12;
    v28[0] = a2;
    v28[1] = a1;
    void v28[2] = v27;
    uint64_t v41 = 0;
    IPC::Connection::createSyncMessageEncoder(3798, 0, &v41, &v40);
    IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v40, (uint64_t)v28);
    IPC::Connection::sendSyncMessage(v11, v41, (uint64_t *)&v40, 0, (uint64_t)&v38, INFINITY);
    if (v39)
    {
      if (v39 == 1)
      {
        LOBYTE(v29) = (_BYTE)v38;
        int v13 = 1;
        int v33 = 1;
        int v14 = 1;
        goto LABEL_12;
      }
      goto LABEL_38;
    }
    LOBYTE(v36[0]) = 0;
    char v37 = 0;
    a1 = v38;
    IPC::ArgumentCoder<WebCore::PasteboardBuffer,void>::decode(v38, (uint64_t)&v29);
    if (!(_BYTE)v32)
    {
      uint64_t v22 = *(void **)a1;
      uint64_t v23 = *((void *)a1 + 1);
      *(void *)a1 = 0;
      *((void *)a1 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
      uint64_t v24 = *((void *)a1 + 3);
      if (!v24)
      {
        uint64_t v23 = 0;
LABEL_35:
        uint64_t v25 = 0;
        goto LABEL_36;
      }
      if (!v23) {
        goto LABEL_35;
      }
      (*(void (**)(uint64_t, void *))(*(void *)v24 + 16))(v24, v22);
      if (!(_BYTE)v32) {
        break;
      }
    }
    a1 = v29;
    a2 = v30;
    a3 = (atomic_uint *)v31;
    char v43 = 1;
    memset(v42, 0, sizeof(v42));
    char v37 = 1;
    std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v15);
    if (!v39)
    {
      int v13 = 0;
      int v17 = v38;
      uint64_t v38 = 0;
      memset(v36, 0, sizeof(v36));
      uint64_t v29 = v17;
      uint64_t v30 = (WTF::StringImpl **)a1;
      unint64_t v31 = a2;
      int v32 = a3;
      goto LABEL_11;
    }
LABEL_38:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_39:
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
    *((unsigned char *)p_opt_inst_meths + 352++*(_DWORD *)(this + 8) = 1;
  }
  uint64_t v25 = *(void **)a1;
  uint64_t v23 = *((void *)a1 + 1);
  uint64_t v24 = *((void *)a1 + 3);
LABEL_36:
  LOBYTE(v42[0]) = 0;
  char v43 = 0;
  *(void *)a1 = 0;
  *((void *)a1 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  if (v24 && v23) {
    (*(void (**)(uint64_t, void *))(*(void *)v24 + 16))(v24, v25);
  }
  std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v42, v25);
  LOBYTE(v29) = 13;
  int v13 = 1;
LABEL_11:
  int v33 = v13;
  std::__optional_destruct_base<WebCore::SerializedAttachmentData,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v36, v16);
  int v14 = v39;
  if (v39 == -1) {
    goto LABEL_13;
  }
LABEL_12:
  ((void (*)(void *, IPC::Decoder **))off_1EE9F7690[v14])(v42, &v38);
LABEL_13:
  uint64_t v18 = v40;
  int v40 = 0;
  if (!v18)
  {
    if (!v13) {
      goto LABEL_15;
    }
LABEL_30:
    a1 = 0;
    a2 = 0;
    goto LABEL_31;
  }
  IPC::Encoder::~Encoder(v18, v10);
  WTF::fastFree(v20, v21);
  if (v13) {
    goto LABEL_30;
  }
LABEL_15:
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  int v32 = 0;
  if (a3)
  {
    atomic_fetch_add(a3, 1u);
    *a4 = a3;
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)a3, v10);
    if (a2)
    {
LABEL_17:
      if (*(_DWORD *)a2 == 2) {
        WTF::StringImpl::destroy((WTF::StringImpl *)a2, (WTF::StringImpl *)v10);
      }
      else {
        *(_DWORD *)a2 -= 2;
      }
    }
  }
  else
  {
LABEL_31:
    *a4 = 0;
    if (a2) {
      goto LABEL_17;
    }
  }
  if (a1)
  {
    if (*(_DWORD *)a1 == 2) {
      WTF::StringImpl::destroy(a1, (WTF::StringImpl *)v10);
    }
    else {
      *(_DWORD *)a1 -= 2;
    }
  }
  if (v33 != -1) {
    ((void (*)(void *, IPC::Decoder **))off_1EE9F74C0[v33])(v42, &v29);
  }
LABEL_26:
  uint64_t result = v34;
  if (v34)
  {
    uint64_t v34 = 0;
    LODWORD(v35) = 0;
    return (WTF *)WTF::fastFree(result, v10);
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::getPathnamesForType(__n128 a1, uint64_t a2, uint64_t a3, const char ***a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  {
LABEL_45:
    uint64_t v44 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v44);
  }
  uint64_t v13 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v45[0] = WebKit::pageIdentifier(a6, a1);
  v45[1] = v14;
  v46[0] = a5;
  v46[1] = a4;
  v46[2] = v45;
  uint64_t v60 = 0;
  IPC::Connection::createSyncMessageEncoder(3802, 0, &v60, &v59);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v59, (uint64_t)v46);
  IPC::Connection::sendSyncMessage(v13, v60, (uint64_t *)&v59, 0, (uint64_t)&v57, INFINITY);
  if (!v58)
  {
    LOBYTE(v55[0]) = 0;
    char v56 = 0;
    uint64_t v18 = v57;
    IPC::Decoder::decode<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v57, v15, (uint64_t)&v61);
    if (v63)
    {
      IPC::Decoder::decode<WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v18, v19, (uint64_t)&v64);
      int v21 = v66;
      if ((_BYTE)v66)
      {
        if (!v63)
        {
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v22 = v61;
        long long v61 = 0;
        uint64_t v47 = v22;
        unsigned int v8 = v62;
        unsigned int v7 = HIDWORD(v62);
        uint64_t v62 = 0;
        unint64_t v48 = __PAIR64__(v7, v8);
        a4 = v64;
        long long v64 = 0;
        unint64_t v49 = (unint64_t)a4;
        unsigned int v6 = v65;
        LODWORD(v1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = HIDWORD(v65);
        uint64_t v65 = 0;
        unint64_t v50 = __PAIR64__(v13, v6);
        uint64_t v9 = 1;
        LOBYTE(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 1;
        WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v20);
      }
      else
      {
        uint64_t v9 = 0;
        LOBYTE(v47) = 0;
        LOBYTE(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
      }
      if (v63) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v20);
      }
      if (v21)
      {
LABEL_13:
        if (v9)
        {
          uint64_t v23 = v47;
          uint64_t v47 = 0;
          *(void *)&v55[0] = v23;
          unint64_t v48 = 0;
          unint64_t v49 = 0;
          unint64_t v50 = 0;
          char v56 = 1;
          std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v20);
          if (v58) {
            goto LABEL_44;
          }
          uint64_t v25 = v57;
          int v57 = 0;
          uint64_t v9 = *(void *)&v55[0];
          memset(v55, 0, sizeof(v55));
          long long v64 = 0;
          uint64_t v65 = 0;
          uint64_t v47 = v25;
          unint64_t v48 = v9;
          uint64_t v66 = 0;
          unint64_t v49 = __PAIR64__(v7, v8);
          v67[0] = 0;
          unint64_t v50 = (unint64_t)a4;
          v67[1] = 0;
          unint64_t v51 = __PAIR64__(v13, v6);
          int v52 = 0;
          WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v67, v24);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v65, v26);
          uint64_t v28 = (IPC::Decoder *)v64;
          long long v64 = 0;
          if (v28)
          {
            IPC::Decoder::~Decoder(v28);
            WTF::fastFree(v39, v40);
          }
          int v16 = 0;
        }
        else
        {
          std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v47, v20);
          LOBYTE(v47) = 13;
          int v16 = 1;
          int v52 = 1;
        }
        std::__optional_destruct_base<std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v55, v27);
        int v17 = v58;
        if (v58 == -1) {
          goto LABEL_21;
        }
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v9 = 0;
      LOBYTE(v47) = 0;
      LOBYTE(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    }
    unsigned int v20 = *(void **)v18;
    uint64_t v42 = *((void *)v18 + 1);
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    uint64_t v43 = *((void *)v18 + 3);
    if (v43 && v42) {
      (*(void (**)(uint64_t, void *))(*(void *)v43 + 16))(v43, v20);
    }
    goto LABEL_13;
  }
  if (v58 != 1)
  {
LABEL_44:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_45;
  }
  LOBYTE(v47) = (_BYTE)v57;
  int v16 = 1;
  int v52 = 1;
  int v17 = 1;
LABEL_20:
  ((void (*)(const char ****, IPC::Decoder **))off_1EE9F7690[v17])(&v64, &v57);
LABEL_21:
  uint64_t v30 = v59;
  char v59 = 0;
  if (v30)
  {
    IPC::Encoder::~Encoder(v30, v29);
    WTF::fastFree(v32, v33);
    if (v16) {
      goto LABEL_23;
    }
  }
  else if (v16)
  {
LABEL_23:
    int v31 = 1;
LABEL_31:
    ((void (*)(const char ****, IPC::Decoder **))off_1EE9F74D0[v31])(&v64, &v47);
    return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v37);
  }
  unint64_t v48 = 0;
  unint64_t v49 = 0;
  unint64_t v50 = 0;
  unint64_t v51 = 0;
  uint64_t v34 = *(unsigned int *)(a3 + 12);
  if (v34) {
    WTF::VectorDestructor<true,WTF::String>::destruct(*(WTF::StringImpl **)a3, (WTF::StringImpl *)(*(void *)a3 + 8 * v34));
  }
  uint64_t v35 = *(WTF **)a3;
  if (*(void *)a3)
  {
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + ++*(_DWORD *)(this + 8) = 0;
    WTF::fastFree(v35, v29);
  }
  long long v64 = 0;
  *(void *)a3 = v9;
  uint64_t v65 = 0;
  *(_DWORD *)(a3 + ++*(_DWORD *)(this + 8) = v8;
  *(_DWORD *)(a3 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v7;
  uint64_t v66 = 0;
  uint64_t v53 = a4;
  v67[0] = 0;
  unint64_t v54 = __PAIR64__(v13, v6);
  WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v66, v29);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v64, v36);
  if (!v13)
  {
    int v31 = 0;
    goto LABEL_31;
  }
  uint64_t v41 = 8 * v13;
  do
  {
    if (*a4) {
      WebKit::SandboxExtension::consumePermanently(a4, (const WebKit::SandboxExtensionHandle *)v37);
    }
    ++a4;
    v41 -= 8;
  }
  while (v41);
  int v31 = v52;
  if (v52 != -1) {
    goto LABEL_31;
  }
  return WTF::Vector<WebKit::SandboxExtensionHandle,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v53, v37);
}

uint64_t WebKit::WebPlatformStrategies::stringForType@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, WTF::StringImpl **a4@<X8>, __n128 a5@<Q0>)
{
  {
LABEL_25:
    unsigned int v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v21[0] = WebKit::pageIdentifier(a3, a5);
  v21[1] = v9;
  v22[0] = a2;
  v22[1] = a1;
  uint64_t v22[2] = v21;
  uint64_t v31 = 0;
  IPC::Connection::createSyncMessageEncoder(3803, 0, &v31, &v30);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v30, (uint64_t)v22);
  IPC::Connection::sendSyncMessage(v8, v31, (uint64_t *)&v30, 0, (uint64_t)&v28, INFINITY);
  if (!v29)
  {
    LOBYTE(v26) = 0;
    char v27 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v28, &v26);
    if (!v27)
    {
      LOBYTE(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 13;
      int v10 = 1;
      int v25 = 1;
      int v11 = v29;
      if (v29 == -1) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v11 = v29;
    if (!v29)
    {
      int v10 = 0;
      uint64_t v13 = v28;
      uint64_t v28 = 0;
      a2 = v26;
      uint64_t v23 = v13;
      uint64_t v24 = v26;
      int v25 = 0;
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  if (v29 != 1)
  {
LABEL_24:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_25;
  }
  LOBYTE(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = (_BYTE)v28;
  int v10 = 1;
  int v25 = 1;
  int v11 = 1;
LABEL_9:
  ((void (*)(uint64_t *, IPC::Decoder **))off_1EE9F7690[v11])(&v26, &v28);
LABEL_10:
  uint64_t v14 = v30;
  uint64_t v30 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v18, v19);
  }
  if (v10) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = (WTF::StringImpl *)a2;
  }
  if (!v10) {
    uint64_t v24 = 0;
  }
  if (!v15)
  {
    *a4 = 0;
    return ((uint64_t (*)(void *, IPC::Decoder **))off_1EE9F74E0[v10])(v22, &v23);
  }
  int v16 = *(_DWORD *)v15;
  *(_DWORD *)v15 += 2;
  *a4 = v15;
  if (v16)
  {
    *(_DWORD *)uint64_t v15 = v16;
    return ((uint64_t (*)(void *, IPC::Decoder **))off_1EE9F74E0[v10])(v22, &v23);
  }
  uint64_t result = WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v12);
  int v10 = v25;
  if (v25 != -1) {
    return ((uint64_t (*)(void, void))off_1EE9F74E0[v10])(v22, &v23);
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::allStringsForType@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  {
LABEL_22:
    uint64_t v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v24[0] = WebKit::pageIdentifier(a3, a5);
  v24[1] = v9;
  v25[0] = a2;
  v25[1] = a1;
  void v25[2] = v24;
  uint64_t v36 = 0;
  IPC::Connection::createSyncMessageEncoder(3804, 0, &v36, &v35);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v35, (uint64_t)v25);
  IPC::Connection::sendSyncMessage(v8, v36, (uint64_t *)&v35, 0, (uint64_t)&v33, INFINITY);
  if (!v34)
  {
    LOBYTE(v3IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    char v32 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v33, &v30);
    if (v32)
    {
      if (v34) {
        goto LABEL_21;
      }
      uint64_t v13 = v33;
      int v33 = 0;
      uint64_t v8 = v30;
      uint64_t v30 = 0;
      LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v31;
      LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = HIDWORD(v31);
      uint64_t v31 = 0;
      char v37 = 0;
      v38[0] = 0;
      uint64_t v26 = v13;
      uint64_t v27 = v8;
      v38[1] = 0;
      unint64_t v28 = __PAIR64__(a1, a2);
      int v29 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v12);
      uint64_t v14 = v37;
      char v37 = 0;
      if (v14)
      {
        IPC::Decoder::~Decoder(v14);
        WTF::fastFree(v21, v22);
      }
      if (v32) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v12);
      }
      int v10 = 0;
    }
    else
    {
      LOBYTE(v26) = 13;
      int v10 = 1;
      int v29 = 1;
    }
    int v11 = v34;
    if (v34 == -1) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v34 != 1)
  {
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  LOBYTE(v26) = (_BYTE)v33;
  int v10 = 1;
  int v29 = 1;
  int v11 = 1;
LABEL_13:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7690[v11])(&v37, &v33);
LABEL_14:
  uint64_t v15 = v35;
  uint64_t v35 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v19, v20);
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v10)
  {
    uint64_t v8 = 0;
    LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
    LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
  }
  char v37 = (IPC::Decoder *)v8;
  v38[0] = __PAIR64__(a1, a2);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a4, (uint64_t)&v37);
  uint64_t v17 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v16);
  return ((uint64_t (*)(uint64_t, IPC::Decoder **))off_1EE9F74F0[v10])(v17, &v26);
}

uint64_t *WebKit::WebPlatformStrategies::changeCount(int a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  int v4 = (uint64_t *)a2;
  {
LABEL_19:
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  WebKit::WebProcess::waitForPendingPasteboardWritesToFinish((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process, a2, a3);
  {
    uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v20[0] = WebKit::pageIdentifier((uint64_t)a3, v5);
  v20[1] = v7;
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3799, 0, &v26, &v25);
  uint64_t v8 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, v4);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v8, (uint64_t)v20);
  IPC::Connection::sendSyncMessage(v6, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
  int v9 = v24;
  if (v24)
  {
    if (v24 == 1)
    {
      LOBYTE(v21[0]) = (_BYTE)v23;
LABEL_9:
      int v22 = v9;
      int v13 = v9;
LABEL_10:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v13])(&v27, &v23);
      goto LABEL_11;
    }
LABEL_18:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_19;
  }
  unint64_t v10 = IPC::Decoder::decode<std::tuple<long long>>(v23);
  if ((_BYTE)v11)
  {
    if (!v24)
    {
      int v4 = (uint64_t *)v10;
      uint64_t v12 = v23;
      uint64_t v23 = 0;
      v21[0] = v12;
      v21[1] = v10;
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  LOBYTE(v21[0]) = 13;
  int v9 = 1;
  int v22 = 1;
  int v13 = v24;
  if (v24 != -1) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v14 = v25;
  int v25 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v16, v17);
  }
  if (v9) {
    int v4 = 0;
  }
  ((void (*)(IPC::Decoder **, void *))off_1EE9F7500[v9])(&v23, v21);
  return v4;
}

unsigned int *WebKit::WebPlatformStrategies::color@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, WebCore::Color *a3@<X8>, __n128 a4@<Q0>)
{
  {
LABEL_36:
    uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v26);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v27[0] = WebKit::pageIdentifier(a2, a4);
  v27[1] = v7;
  uint64_t v36 = 0;
  IPC::Connection::createSyncMessageEncoder(3800, 0, &v36, &v35);
  uint64_t v8 = v35;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v35, a1);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v8, (uint64_t)v27);
  IPC::Connection::sendSyncMessage(v6, v36, (uint64_t *)&v35, 0, (uint64_t)&v33, INFINITY);
  if (!v34)
  {
    LOBYTE(v3WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    char v32 = 0;
    IPC::Decoder::decode<std::tuple<WebCore::Color>>(v33, &v28);
    if (v29)
    {
      WebCore::Color::Color();
      char v32 = 1;
      if (!v29) {
        goto LABEL_9;
      }
      if ((v28 & 0x8000000000000) != 0)
      {
        int v25 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v25);
          WTF::fastFree((WTF *)v25, v10);
        }
      }
    }
    if (!v32)
    {
      LOBYTE(v2++*(_DWORD *)(this + 8) = 13;
      int v30 = 1;
      goto LABEL_18;
    }
LABEL_9:
    if (v34) {
      goto LABEL_35;
    }
    int v11 = v33;
    int v33 = 0;
    v37.unint64_t m_colorAndFlags = (unint64_t)v11;
    WebCore::Color::Color();
    unint64_t m_colorAndFlags = v37.m_colorAndFlags;
    v37.unint64_t m_colorAndFlags = 0;
    unint64_t v28 = m_colorAndFlags;
    WebCore::Color::Color();
    int v30 = 0;
    if ((v38 & 0x8000000000000) != 0)
    {
      int v24 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFLL);
      if (atomic_fetch_add((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
      {
        atomic_store(1u, v24);
        WTF::fastFree((WTF *)v24, v10);
      }
    }
    int v13 = (IPC::Decoder *)v37.m_colorAndFlags;
    v37.unint64_t m_colorAndFlags = 0;
    if (v13)
    {
      IPC::Decoder::~Decoder(v13);
      WTF::fastFree(v21, v22);
    }
    if (v32)
    {
      if ((v31 & 0x8000000000000) != 0)
      {
        uint64_t v14 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
        if (atomic_fetch_add((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v10);
        }
      }
    }
LABEL_18:
    int v9 = v34;
    if (v34 == -1) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v34 != 1)
  {
LABEL_35:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_36;
  }
  LOBYTE(v2++*(_DWORD *)(this + 8) = (_BYTE)v33;
  int v9 = 1;
  int v30 = 1;
LABEL_19:
  ((void (*)(Color *, uint64_t **))off_1EE9F7690[v9])(&v37, &v33);
LABEL_20:
  uint64_t v15 = v35;
  uint64_t v35 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v10);
    WTF::fastFree(v19, v20);
  }
  int v33 = 0;
  WebCore::Color::Color();
  if (((unint64_t)v33 & 0x8000000000000) != 0)
  {
    uint64_t v23 = (unsigned int *)((unint64_t)v33 & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, v16);
    }
  }
  uint64_t result = (unsigned int *)WebCore::Color::Color(a3, &v37);
  if ((v37.m_colorAndFlags & 0x8000000000000) != 0)
  {
    uint64_t result = (unsigned int *)(v37.m_colorAndFlags & 0xFFFFFFFFFFFFLL);
    if (atomic_fetch_add((atomic_uint *volatile)(v37.m_colorAndFlags & 0xFFFFFFFFFFFFLL), 0xFFFFFFFF) == 1)
    {
      atomic_store(1u, result);
      uint64_t result = (unsigned int *)WTF::fastFree((WTF *)result, v18);
    }
  }
  if (v30 != -1) {
    return (unsigned int *)((uint64_t (*)(Color *, unint64_t *))off_1EE9F7510[v30])(&v37, &v28);
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::url@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  {
LABEL_27:
    int v21 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v21);
  }
  uint64_t v6 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v24[0] = WebKit::pageIdentifier(a2, a4);
  v24[1] = v7;
  uint64_t v31 = 0;
  IPC::Connection::createSyncMessageEncoder(3806, 0, &v31, &v30);
  uint64_t v8 = v30;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v30, a1);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v8, (uint64_t)v24);
  IPC::Connection::sendSyncMessage(v6, v31, (uint64_t *)&v30, 0, (uint64_t)&v22, INFINITY);
  if (!v23)
  {
    LOBYTE(v2++*(_DWORD *)(this + 8) = 0;
    char v29 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v22, (uint64_t *)&v28);
    if (!v29)
    {
      LOBYTE(v25) = 13;
      int v9 = 1;
      int v27 = 1;
      int v10 = v23;
      if (v23 == -1) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v10 = v23;
    if (!v23)
    {
      int v9 = 0;
      uint64_t v12 = v22;
      int v22 = 0;
      uint64_t v6 = (uint64_t)v28;
      int v25 = v12;
      uint64_t v26 = (uint64_t)v28;
      int v27 = 0;
      goto LABEL_9;
    }
    goto LABEL_26;
  }
  if (v23 != 1)
  {
LABEL_26:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_27;
  }
  LOBYTE(v25) = (_BYTE)v22;
  int v9 = 1;
  int v27 = 1;
  int v10 = 1;
LABEL_9:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9F7690[v10])(&v28, &v22);
LABEL_10:
  int v13 = v30;
  int v30 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v19, v20);
  }
  if (v9) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v6;
  }
  if (!v9) {
    uint64_t v26 = 0;
  }
  unint64_t v28 = (WTF::StringImpl *)v14;
  int v22 = 0;
  WTF::URL::invalidate((WTF::URL *)&v22);
  MEMORY[0x19972E8B0](a3, &v22, &v28, 0);
  int v16 = v22;
  int v22 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2) {
      WTF::StringImpl::destroy(v16, v15);
    }
    else {
      *(_DWORD *)v16 -= 2;
    }
  }
  uint64_t v17 = v28;
  unint64_t v28 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2) {
      WTF::StringImpl::destroy(v17, v15);
    }
    else {
      *(_DWORD *)v17 -= 2;
    }
  }
  return ((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1EE9F7520[v9])(&v22, &v25);
}

unint64_t WebKit::WebPlatformStrategies::addTypes(__n128 a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  {
LABEL_18:
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v19[0] = WebKit::pageIdentifier(a5, a1);
  v19[1] = v8;
  v20[0] = a4;
  v20[1] = a3;
  void v20[2] = v19;
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3793, 0, &v26, &v25);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v25, (uint64_t)v20);
  IPC::Connection::sendSyncMessage(v7, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
  int v9 = v24;
  if (v24)
  {
    if (v24 == 1)
    {
      LOBYTE(v21[0]) = (_BYTE)v23;
LABEL_8:
      int v22 = v9;
      int v13 = v9;
LABEL_9:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v13])(&v27, &v23);
      goto LABEL_10;
    }
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  unint64_t v10 = IPC::Decoder::decode<std::tuple<long long>>(v23);
  if ((_BYTE)v11)
  {
    if (!v24)
    {
      a3 = v10;
      uint64_t v12 = v23;
      int v23 = 0;
      v21[0] = v12;
      v21[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  LOBYTE(v21[0]) = 13;
  int v9 = 1;
  int v22 = 1;
  int v13 = v24;
  if (v24 != -1) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v14 = v25;
  int v25 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v16, v17);
  }
  if (v9) {
    a3 = 0;
  }
  ((void (*)(void *, void *))off_1EE9F7530[v9])(v20, v21);
  return a3;
}

unint64_t WebKit::WebPlatformStrategies::setTypes(__n128 a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  {
LABEL_18:
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v19[0] = WebKit::pageIdentifier(a5, a1);
  v19[1] = v8;
  v20[0] = a4;
  v20[1] = a3;
  void v20[2] = v19;
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3814, 0, &v26, &v25);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v25, (uint64_t)v20);
  IPC::Connection::sendSyncMessage(v7, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
  int v9 = v24;
  if (v24)
  {
    if (v24 == 1)
    {
      LOBYTE(v21[0]) = (_BYTE)v23;
LABEL_8:
      int v22 = v9;
      int v13 = v9;
LABEL_9:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v13])(&v27, &v23);
      goto LABEL_10;
    }
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  unint64_t v10 = IPC::Decoder::decode<std::tuple<long long>>(v23);
  if ((_BYTE)v11)
  {
    if (!v24)
    {
      a3 = v10;
      uint64_t v12 = v23;
      int v23 = 0;
      v21[0] = v12;
      v21[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  LOBYTE(v21[0]) = 13;
  int v9 = 1;
  int v22 = 1;
  int v13 = v24;
  if (v24 != -1) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v14 = v25;
  int v25 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v16, v17);
  }
  if (v9) {
    a3 = 0;
  }
  ((void (*)(void *, void *))off_1EE9F7540[v9])(v20, v21);
  return a3;
}

unint64_t WebKit::WebPlatformStrategies::setBufferForType(__n128 a1, uint64_t a2, atomic_uint *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  int v9 = (WebCore::SharedBuffer *)a3;
  {
LABEL_24:
    int v24 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v24);
  }
  uint64_t v10 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  if (a3)
  {
    atomic_fetch_add(a3, 1u);
  }
  else
  {
    int v9 = (WebCore::SharedBuffer *)WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v9);
  }
  uint64_t v26 = (atomic_uint *)v9;
  v25[0] = WebKit::pageIdentifier(a6, a1);
  v25[1] = v11;
  uint64_t v33 = 0;
  IPC::Connection::createSyncMessageEncoder(3811, 0, &v33, &v32);
  uint64_t v12 = v32;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v32, a5);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a4);
  IPC::ArgumentCoder<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>,void>::encode<IPC::Encoder,WebCore::SharedBuffer>(v12, &v26);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v12, (uint64_t)v25);
  IPC::Connection::sendSyncMessage(v10, v33, (uint64_t *)&v32, 0, (uint64_t)&v30, INFINITY);
  int v13 = v31;
  if (v31)
  {
    if (v31 == 1)
    {
      LOBYTE(v27) = (_BYTE)v30;
LABEL_11:
      int v29 = v13;
      int v17 = v13;
LABEL_12:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v17])(&v34, &v30);
      goto LABEL_13;
    }
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_24;
  }
  unint64_t v14 = IPC::Decoder::decode<std::tuple<long long>>(v30);
  if ((_BYTE)v15)
  {
    if (!v31)
    {
      int v16 = v30;
      int v30 = 0;
      char v27 = v16;
      unint64_t v28 = v14;
      goto LABEL_11;
    }
    goto LABEL_23;
  }
  LOBYTE(v27) = 13;
  int v13 = 1;
  int v29 = 1;
  int v17 = v31;
  if (v31 != -1) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v18 = v32;
  char v32 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v22, v23);
  }
  uint64_t v19 = (unsigned int *)v26;
  uint64_t v26 = 0;
  if (v19) {
    WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref(v19, v15);
  }
  if (v13) {
    unint64_t v20 = 0;
  }
  else {
    unint64_t v20 = v28;
  }
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7550[v13])(&v30, &v27);
  return v20;
}

unint64_t WebKit::WebPlatformStrategies::setURL(__n128 a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  {
LABEL_18:
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v19[0] = WebKit::pageIdentifier(a5, a1);
  v19[1] = v8;
  v20[0] = a3;
  v20[1] = a4;
  void v20[2] = v19;
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3815, 0, &v26, &v25);
  IPC::ArgumentCoder<std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v25, (uint64_t)v20);
  IPC::Connection::sendSyncMessage(v7, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
  int v9 = v24;
  if (v24)
  {
    if (v24 == 1)
    {
      LOBYTE(v21[0]) = (_BYTE)v23;
LABEL_8:
      int v22 = v9;
      int v13 = v9;
LABEL_9:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v13])(&v27, &v23);
      goto LABEL_10;
    }
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  unint64_t v10 = IPC::Decoder::decode<std::tuple<long long>>(v23);
  if ((_BYTE)v11)
  {
    if (!v24)
    {
      a4 = v10;
      uint64_t v12 = v23;
      int v23 = 0;
      v21[0] = v12;
      v21[1] = v10;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  LOBYTE(v21[0]) = 13;
  int v9 = 1;
  int v22 = 1;
  int v13 = v24;
  if (v24 != -1) {
    goto LABEL_9;
  }
LABEL_10:
  unint64_t v14 = v25;
  int v25 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v11);
    WTF::fastFree(v16, v17);
  }
  if (v9) {
    a4 = 0;
  }
  ((void (*)(void *, void *))off_1EE9F7560[v9])(v20, v21);
  return a4;
}

WebCore::Color *WebKit::WebPlatformStrategies::setColor(__n128 a1, uint64_t a2, WebCore::Color *a3, uint64_t *a4, uint64_t a5)
{
  {
LABEL_18:
    uint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v20[0] = WebKit::pageIdentifier(a5, a1);
  v20[1] = v8;
  uint64_t v26 = 0;
  IPC::Connection::createSyncMessageEncoder(3812, 0, &v26, &v25);
  int v9 = v25;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v25, a4);
  IPC::ArgumentCoder<WebCore::Color,void>::encode(v9, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v9, (uint64_t)v20);
  IPC::Connection::sendSyncMessage(v7, v26, (uint64_t *)&v25, 0, (uint64_t)&v23, INFINITY);
  int v10 = v24;
  if (v24)
  {
    if (v24 == 1)
    {
      LOBYTE(v21[0]) = (_BYTE)v23;
LABEL_8:
      int v22 = v10;
      int v14 = v10;
LABEL_9:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v14])(&v27, &v23);
      goto LABEL_10;
    }
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  unint64_t v11 = IPC::Decoder::decode<std::tuple<long long>>(v23);
  if ((_BYTE)v12)
  {
    if (!v24)
    {
      a3 = (WebCore::Color *)v11;
      int v13 = v23;
      int v23 = 0;
      v21[0] = v13;
      v21[1] = v11;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  LOBYTE(v21[0]) = 13;
  int v10 = 1;
  int v22 = 1;
  int v14 = v24;
  if (v24 != -1) {
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v15 = v25;
  int v25 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v17, v18);
  }
  if (v10) {
    a3 = 0;
  }
  ((void (*)(IPC::Decoder **, void *))off_1EE9F7570[v10])(&v23, v21);
  return a3;
}

unint64_t WebKit::WebPlatformStrategies::setStringForType(__n128 a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  {
LABEL_18:
    unint64_t v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v20);
  }
  uint64_t v9 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v21[0] = WebKit::pageIdentifier(a6, a1);
  v21[1] = v10;
  v22[0] = a5;
  v22[1] = a4;
  uint64_t v22[2] = a3;
  void v22[3] = v21;
  uint64_t v28 = 0;
  IPC::Connection::createSyncMessageEncoder(3813, 0, &v28, &v27);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul,3ul>(v27, (uint64_t)v22);
  IPC::Connection::sendSyncMessage(v9, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
  int v11 = v26;
  if (v26)
  {
    if (v26 == 1)
    {
      LOBYTE(v23[0]) = (_BYTE)v25;
LABEL_8:
      int v24 = v11;
      int v15 = v11;
LABEL_9:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v15])(&v29, &v25);
      goto LABEL_10;
    }
LABEL_17:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_18;
  }
  unint64_t v12 = IPC::Decoder::decode<std::tuple<long long>>(v25);
  if ((_BYTE)v13)
  {
    if (!v26)
    {
      a3 = v12;
      int v14 = v25;
      int v25 = 0;
      v23[0] = v14;
      v23[1] = v12;
      goto LABEL_8;
    }
    goto LABEL_17;
  }
  LOBYTE(v23[0]) = 13;
  int v11 = 1;
  int v24 = 1;
  int v15 = v26;
  if (v26 != -1) {
    goto LABEL_9;
  }
LABEL_10:
  int v16 = v27;
  char v27 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v11) {
    a3 = 0;
  }
  ((void (*)(void *, void *))off_1EE9F7580[v11])(v22, v23);
  return a3;
}

uint64_t *WebKit::WebPlatformStrategies::getNumberOfFiles(__n128 a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  {
LABEL_19:
    int v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v18[0] = WebKit::pageIdentifier(a4, a1);
  v18[1] = v6;
  uint64_t v24 = 0;
  IPC::Connection::createSyncMessageEncoder(3797, 0, &v24, &v23);
  uint64_t v7 = v23;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v23, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v7, (uint64_t)v18);
  IPC::Connection::sendSyncMessage(v5, v24, (uint64_t *)&v23, 0, (uint64_t)&v21, INFINITY);
  int v8 = v22;
  if (v22)
  {
    if (v22 == 1)
    {
      LOBYTE(v19[0]) = (_BYTE)v21;
LABEL_8:
      int v20 = v8;
      int v12 = v8;
LABEL_9:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v12])(&v25, &v21);
      goto LABEL_10;
    }
LABEL_18:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_19;
  }
  unint64_t v9 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v21);
  if ((_BYTE)v10)
  {
    if (!v22)
    {
      LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v9;
      int v11 = v21;
      int v21 = 0;
      v19[0] = v11;
      v19[1] = v9;
      goto LABEL_8;
    }
    goto LABEL_18;
  }
  LOBYTE(v19[0]) = 13;
  int v8 = 1;
  int v20 = 1;
  int v12 = v22;
  if (v22 != -1) {
    goto LABEL_9;
  }
LABEL_10:
  int v13 = v23;
  int v23 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v10);
    WTF::fastFree(v15, v16);
  }
  if (v8) {
    a3 = 0;
  }
  else {
    a3 = (uint64_t *)a3;
  }
  ((void (*)(IPC::Decoder **, void *))off_1EE9F7590[v8])(&v21, v19);
  return a3;
}

BOOL WebKit::WebPlatformStrategies::containsURLStringSuitableForLoading(__n128 a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  {
LABEL_19:
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v5 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v19[0] = WebKit::pageIdentifier(a4, a1);
  v19[1] = v6;
  uint64_t v27 = 0;
  IPC::Connection::createSyncMessageEncoder(3796, 0, &v27, &v26);
  uint64_t v7 = v26;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v26, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v7, (uint64_t)v19);
  IPC::Connection::sendSyncMessage(v5, v27, (uint64_t *)&v26, 0, (uint64_t)&v24, INFINITY);
  if (!v25)
  {
    __int16 v23 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v24, &v23);
    if (!HIBYTE(v23))
    {
      int v8 = 0;
      LOBYTE(v2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 13;
      int v9 = 1;
      int v22 = 1;
      int v10 = v25;
      if (v25 == -1) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v10 = v25;
    if (!v25)
    {
      int v9 = 0;
      int v12 = v24;
      uint64_t v24 = 0;
      int v8 = v23;
      int v20 = v12;
      char v21 = v23;
      int v22 = 0;
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  if (v25 != 1)
  {
LABEL_18:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_19;
  }
  int v8 = 0;
  LOBYTE(v2IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = (_BYTE)v24;
  int v9 = 1;
  int v22 = 1;
  int v10 = 1;
LABEL_9:
  ((void (*)(__int16 *, uint64_t **))off_1EE9F7690[v10])(&v23, &v24);
LABEL_10:
  int v13 = v26;
  int v26 = 0;
  if (v13)
  {
    IPC::Encoder::~Encoder(v13, v11);
    WTF::fastFree(v16, v17);
  }
  ((void (*)(uint64_t **, uint64_t **))off_1EE9F75A0[v9])(&v24, &v20);
  if (v9) {
    BOOL v14 = 1;
  }
  else {
    BOOL v14 = v8 == 0;
  }
  return !v14;
}

uint64_t WebKit::WebPlatformStrategies::urlStringSuitableForLoading@<X0>(uint64_t *a1@<X1>, WTF::StringImpl **a2@<X2>, uint64_t a3@<X3>, IPC::Encoder **a4@<X8>, __n128 a5@<Q0>)
{
  *a4 = 0;
  {
LABEL_22:
    int v22 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v22);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v23[0] = WebKit::pageIdentifier(a3, a5);
  v23[1] = v9;
  uint64_t v34 = 0;
  IPC::Connection::createSyncMessageEncoder(3817, 0, &v34, &v33);
  int v10 = v33;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v33, a1);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v10, (uint64_t)v23);
  IPC::Connection::sendSyncMessage(v8, v34, (uint64_t *)&v33, 0, (uint64_t)&v31, INFINITY);
  if (!v32)
  {
    LOBYTE(v2++*(_DWORD *)(this + 8) = 0;
    char v30 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String,WTF::String>>(v31, (uint64_t)&v28);
    if (v30)
    {
      if (v32) {
        goto LABEL_21;
      }
      int v11 = 0;
      BOOL v14 = v31;
      int v31 = 0;
      int v10 = v28;
      uint64_t v8 = v29;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v24 = v14;
      int v25 = v10;
      uint64_t v26 = v8;
    }
    else
    {
      LOBYTE(v++*(_DWORD *)(this + 24) = 13;
      int v11 = 1;
    }
    int v27 = v11;
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v28, v13);
    int v12 = v32;
    if (v32 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v32 != 1)
  {
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  LOBYTE(v++*(_DWORD *)(this + 24) = (_BYTE)v31;
  int v11 = 1;
  int v27 = 1;
  int v12 = 1;
LABEL_10:
  ((void (*)(IPC::Encoder **, IPC::Decoder **))off_1EE9F7690[v12])(&v28, &v31);
LABEL_11:
  int v16 = v33;
  uint64_t v33 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v15);
    WTF::fastFree(v18, v19);
    if (v11) {
      goto LABEL_13;
    }
LABEL_15:
    int v25 = 0;
    uint64_t v26 = 0;
    *a4 = v10;
    int v20 = *a2;
    *a2 = (WTF::StringImpl *)v8;
    if (v20)
    {
      if (*(_DWORD *)v20 != 2)
      {
        uint64_t v17 = 0;
        *(_DWORD *)v20 -= 2;
        return ((uint64_t (*)(IPC::Encoder **, IPC::Decoder **))off_1EE9F75B0[v17])(&v28, &v24);
      }
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v15);
    }
    uint64_t v17 = 0;
    return ((uint64_t (*)(IPC::Encoder **, IPC::Decoder **))off_1EE9F75B0[v17])(&v28, &v24);
  }
  if (!v11) {
    goto LABEL_15;
  }
LABEL_13:
  uint64_t v17 = 1;
  return ((uint64_t (*)(void, void))off_1EE9F75B0[v17])(&v28, &v24);
}

IPC::Encoder *WebKit::WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, uint64_t a4)
{
  {
    int v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  LODWORD(v17[0]) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 704), a3, (const WTF::StringImpl *)v17, (uint64_t)v18);
  ++*(_DWORD *)(v18[0] + 8);
  {
    int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v17[0] = WebKit::pageIdentifier(a4, v7);
  v17[1] = v9;
  v18[0] = a2;
  v18[1] = a3;
  void v18[2] = v17;
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 2559;
  *((void *)v10 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v19 = v10;
  IPC::ArgumentCoder<std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::PasteboardURL const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v10, (uint64_t)v18);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v19, 0, 0);
  uint64_t result = v19;
  uint64_t v19 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

{
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  WebKit::WebProcess *v16;
  void v17[3];
  IPC::Encoder *v18;

  {
    int v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  LODWORD(v1++*(_DWORD *)(this + 8) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 704), a3, (const WTF::StringImpl *)&v18, (uint64_t)v17);
  ++*(_DWORD *)(v17[0] + 8);
  {
    int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v17[0] = WebKit::pageIdentifier(a4, v7);
  v17[1] = v9;
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 2560;
  *((void *)v10 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v18 = v10;
  IPC::ArgumentCoder<WebCore::PasteboardWebContent,void>::encode(v10, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v10, (uint64_t)v17);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v18, 0, 0);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

{
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  IPC::Encoder *v10;
  void *v11;
  IPC::Encoder *result;
  WTF *v13;
  void *v14;
  WebKit::WebProcess *v15;
  WebKit::WebProcess *v16;
  void v17[3];
  IPC::Encoder *v18;

  {
    int v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  LODWORD(v1++*(_DWORD *)(this + 8) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 704), a3, (const WTF::StringImpl *)&v18, (uint64_t)v17);
  ++*(_DWORD *)(v17[0] + 8);
  {
    int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v17[0] = WebKit::pageIdentifier(a4, v7);
  v17[1] = v9;
  int v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v10 = 2557;
  *((void *)v10 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v18 = v10;
  IPC::ArgumentCoder<WebCore::PasteboardImage,void>::encode(v10, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, (uint64_t *)a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v10, (uint64_t)v17);
  IPC::Connection::sendMessageImpl(v8, (uint64_t *)&v18, 0, 0);
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::writeToPasteboard(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl **a4, uint64_t a5)
{
  {
    uint64_t v17 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v17);
  }
  LODWORD(v19[0]) = 0;
  WTF::HashMap<WTF::String,unsigned int,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::add<int>((uint64_t *)(WebKit::WebProcess::singleton(void)::process + 704), a4, (const WTF::StringImpl *)v19, (uint64_t)v20);
  ++*(_DWORD *)(v20[0] + 8);
  {
    uint64_t v18 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v18);
  }
  uint64_t v10 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v19[0] = WebKit::pageIdentifier(a5, v9);
  v19[1] = v11;
  v20[0] = a2;
  v20[1] = a3;
  void v20[2] = a4;
  void v20[3] = v19;
  int v12 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)int v12 = 2558;
  *((void *)v12 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v12 + 66) = (char *)v12 + 16;
  *((void *)v12 + 67) = 512;
  *((void *)v12 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v12 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v12 + 69) = 0;
  IPC::Encoder::encodeHeader(v12);
  char v21 = v12;
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul,3ul>(v12, (uint64_t)v20);
  IPC::Connection::sendMessageImpl(v10, (uint64_t *)&v21, 0, 0);
  uint64_t result = v21;
  char v21 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v13);
    return (IPC::Encoder *)WTF::fastFree(v15, v16);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::updateSupportedTypeIdentifiers(__n128 a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  {
    BOOL v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v15[0] = WebKit::pageIdentifier(a5, a1);
  v15[1] = v8;
  __n128 v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)__n128 v9 = 2556;
  *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  int v16 = v9;
  IPC::VectorArgumentCoder<false,WTF::String,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v9, a3);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a4);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v9, (uint64_t)v15);
  IPC::Connection::sendMessageImpl(v7, (uint64_t *)&v16, 0, 0);
  uint64_t result = v16;
  int v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::typesSafeForDOMToReadAndWrite@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>, __n128 a5@<Q0>)
{
  {
LABEL_22:
    __int16 v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v8 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v24[0] = WebKit::pageIdentifier(a3, a5);
  v24[1] = v9;
  v25[0] = a1;
  v25[1] = a2;
  void v25[2] = v24;
  uint64_t v36 = 0;
  IPC::Connection::createSyncMessageEncoder(3816, 0, &v36, &v35);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v35, (uint64_t)v25);
  IPC::Connection::sendSyncMessage(v8, v36, (uint64_t *)&v35, 0, (uint64_t)&v33, INFINITY);
  if (!v34)
  {
    LOBYTE(v3IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    char v32 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>(v33, &v30);
    if (v32)
    {
      if (v34) {
        goto LABEL_21;
      }
      int v13 = v33;
      uint64_t v33 = 0;
      uint64_t v8 = v30;
      uint64_t v30 = 0;
      LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v31;
      LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = HIDWORD(v31);
      uint64_t v31 = 0;
      Color v37 = 0;
      v38[0] = 0;
      uint64_t v26 = v13;
      uint64_t v27 = v8;
      v38[1] = 0;
      unint64_t v28 = __PAIR64__(a2, a1);
      int v29 = 0;
      WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v38, v12);
      BOOL v14 = v37;
      Color v37 = 0;
      if (v14)
      {
        IPC::Decoder::~Decoder(v14);
        WTF::fastFree(v21, v22);
      }
      if (v32) {
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v12);
      }
      int v10 = 0;
    }
    else
    {
      LOBYTE(v26) = 13;
      int v10 = 1;
      int v29 = 1;
    }
    int v11 = v34;
    if (v34 == -1) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v34 != 1)
  {
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  LOBYTE(v26) = (_BYTE)v33;
  int v10 = 1;
  int v29 = 1;
  int v11 = 1;
LABEL_13:
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7690[v11])(&v37, &v33);
LABEL_14:
  int v15 = v35;
  uint64_t v35 = 0;
  if (v15)
  {
    IPC::Encoder::~Encoder(v15, v12);
    WTF::fastFree(v19, v20);
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  if (v10)
  {
    uint64_t v8 = 0;
    LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0;
  }
  Color v37 = (IPC::Decoder *)v8;
  v38[0] = __PAIR64__(a2, a1);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v30, v12);
  WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a4, (uint64_t)&v37);
  uint64_t v17 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v37, v16);
  return ((uint64_t (*)(uint64_t, IPC::Decoder **))off_1EE9F75C0[v10])(v17, &v26);
}

unint64_t WebKit::WebPlatformStrategies::writeCustomData(__n128 a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  {
LABEL_22:
    __int16 v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v24[0] = WebKit::pageIdentifier(a5, a1);
  v24[1] = v8;
  uint64_t v31 = 0;
  IPC::Connection::createSyncMessageEncoder(3818, 0, &v31, &v30);
  uint64_t v9 = v30;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v30, *(unsigned int *)(a3 + 12));
  unsigned int v10 = *(_DWORD *)(a3 + 12);
  if (v10)
  {
    int v11 = *(uint64_t **)a3;
    int v12 = &v11[3 * v10];
    do
    {
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, v11);
      IPC::VectorArgumentCoder<false,WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::PasteboardCustomData::Entry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v9, (uint64_t)(v11 + 1));
      v11 += 3;
    }
    while (v11 != v12);
  }
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a4);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v9, (uint64_t)v24);
  IPC::Connection::sendSyncMessage(v7, v31, (uint64_t *)&v30, 0, (uint64_t)&v28, INFINITY);
  int v13 = v29;
  if (v29)
  {
    if (v29 == 1)
    {
      LOBYTE(v25) = (_BYTE)v28;
LABEL_11:
      int v27 = v13;
      int v17 = v13;
LABEL_12:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v17])(&v32, &v28);
      goto LABEL_13;
    }
LABEL_21:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_22;
  }
  unint64_t v14 = IPC::Decoder::decode<std::tuple<long long>>(v28);
  if ((_BYTE)v15)
  {
    if (!v29)
    {
      int v16 = v28;
      unint64_t v28 = 0;
      int v25 = v16;
      unint64_t v26 = v14;
      goto LABEL_11;
    }
    goto LABEL_21;
  }
  LOBYTE(v25) = 13;
  int v13 = 1;
  int v27 = 1;
  int v17 = v29;
  if (v29 != -1) {
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v18 = v30;
  uint64_t v30 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v15);
    WTF::fastFree(v21, v22);
  }
  if (v13) {
    unint64_t v19 = 0;
  }
  else {
    unint64_t v19 = v26;
  }
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F75D0[v13])(&v28, &v25);
  return v19;
}

BOOL WebKit::WebPlatformStrategies::containsStringSafeForDOMToReadForType(__n128 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  {
LABEL_19:
    unint64_t v19 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v19);
  }
  uint64_t v7 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v20[0] = WebKit::pageIdentifier(a5, a1);
  v20[1] = v8;
  v21[0] = a3;
  v21[1] = a4;
  void v21[2] = v20;
  uint64_t v29 = 0;
  IPC::Connection::createSyncMessageEncoder(3795, 0, &v29, &v28);
  IPC::ArgumentCoder<std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,void>::encode<IPC::Encoder,std::tuple<WTF::String const&,WTF::String const&,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>,0ul,1ul,2ul>(v28, (uint64_t)v21);
  IPC::Connection::sendSyncMessage(v7, v29, (uint64_t *)&v28, 0, (uint64_t)&v26, INFINITY);
  if (!v27)
  {
    __int16 v25 = 0;
    IPC::Decoder::operator>><std::tuple<BOOL>>(v26, &v25);
    if (!HIBYTE(v25))
    {
      int v9 = 0;
      LOBYTE(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 13;
      int v10 = 1;
      int v24 = 1;
      int v11 = v27;
      if (v27 == -1) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v11 = v27;
    if (!v27)
    {
      int v10 = 0;
      int v13 = v26;
      unint64_t v26 = 0;
      int v9 = v25;
      int v22 = v13;
      char v23 = v25;
      int v24 = 0;
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  if (v27 != 1)
  {
LABEL_18:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_19;
  }
  int v9 = 0;
  LOBYTE(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = (_BYTE)v26;
  int v10 = 1;
  int v24 = 1;
  int v11 = 1;
LABEL_9:
  ((void (*)(__int16 *, uint64_t **))off_1EE9F7690[v11])(&v25, &v26);
LABEL_10:
  unint64_t v14 = v28;
  unint64_t v28 = 0;
  if (v14)
  {
    IPC::Encoder::~Encoder(v14, v12);
    WTF::fastFree(v17, v18);
  }
  ((void (*)(void *, uint64_t **))off_1EE9F75E0[v10])(v21, &v22);
  if (v10) {
    BOOL v15 = 1;
  }
  else {
    BOOL v15 = v9 == 0;
  }
  return !v15;
}

uint64_t WebKit::WebPlatformStrategies::getPasteboardItemsCount(int a1, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  uint64_t v3 = (uint64_t)a3;
  p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
    goto LABEL_23;
  while (1)
  {
    WebKit::WebPasteboardOverrides::overriddenTypes((WebKit::WebPasteboardOverrides *)&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, a2, a3, &v22);
    int v6 = HIDWORD(v23);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v22, v7);
    if (v6) {
      return 1;
    }
    {
      int v20 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v20);
    }
    uint64_t v9 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    v21[0] = WebKit::pageIdentifier(v3, v8);
    v21[1] = v10;
    uint64_t v28 = 0;
    IPC::Connection::createSyncMessageEncoder(3801, 0, &v28, &v27);
    int v11 = v27;
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v27, (uint64_t *)a2);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v11, (uint64_t)v21);
    IPC::Connection::sendSyncMessage(v9, v28, (uint64_t *)&v27, 0, (uint64_t)&v25, INFINITY);
    uint64_t v3 = v26;
    if (v26)
    {
      if (v26 == 1)
      {
        LOBYTE(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = (_BYTE)v25;
        goto LABEL_11;
      }
      goto LABEL_22;
    }
    unint64_t v12 = IPC::Decoder::decode<std::tuple<unsigned long long>>(v25);
    if (!(_BYTE)v13) {
      break;
    }
    if (!v26)
    {
      LODWORD(aWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v12;
      unint64_t v14 = v25;
      __int16 v25 = 0;
      int v22 = v14;
      unint64_t v23 = v12;
LABEL_11:
      int v24 = v3;
      int v15 = v3;
LABEL_12:
      ((void (*)(char *, IPC::Decoder **))off_1EE9F7690[v15])(&v29, &v25);
      goto LABEL_13;
    }
LABEL_22:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_23:
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
    *((unsigned char *)p_opt_inst_meths + 352++*(_DWORD *)(this + 8) = 1;
  }
  LOBYTE(v2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 13;
  LODWORD(vWebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 1;
  int v24 = 1;
  int v15 = v26;
  if (v26 != -1) {
    goto LABEL_12;
  }
LABEL_13:
  int v16 = v27;
  int v27 = 0;
  if (v16)
  {
    IPC::Encoder::~Encoder(v16, v13);
    WTF::fastFree(v18, v19);
  }
  if (v3) {
    a2 = 0;
  }
  else {
    a2 = (WTF::StringImpl **)a2;
  }
  ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F75F0[v3])(&v25, &v22);
  return (uint64_t)a2;
}

IPC::Encoder *WebKit::WebPlatformStrategies::allPasteboardItemInfo@<X0>(WTF::StringImpl **a1@<X1>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t)a2;
  int v6 = (uint64_t *)a1;
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  {
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
  }
  WebKit::WebPasteboardOverrides::overriddenInfo((WebKit::WebPasteboardOverrides *)&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, a1, a2, (uint64_t)&v118);
  if (v131)
  {
    uint64_t v9 = v118;
    uint64_t v118 = 0;
    __int16 v134 = v9;
    unint64_t v10 = v119;
    unint64_t v119 = 0;
    unint64_t v135 = v10;
    unint64_t v11 = v120;
    unint64_t v120 = 0;
    unint64_t v136 = v11;
    uint64_t v12 = v121;
    uint64_t v121 = 0;
    uint64_t v137 = v12;
    uint64_t v13 = v122;
    uint64_t v122 = 0;
    v138[0] = v13;
    uint64_t v14 = v123;
    uint64_t v123 = 0;
    v138[1] = v14;
    char v139 = v124;
    __int16 v142 = v127;
    long long v141 = v126;
    long long v140 = v125;
    uint64_t v15 = v128;
    char v124 = 0;
    uint64_t v128 = 0;
    v143[0] = v15;
    uint64_t v16 = v129;
    uint64_t v129 = 0;
    v143[1] = v16;
    char v144 = v130;
    uint64_t v17 = WTF::fastMalloc((WTF *)0x78);
    uint64_t v18 = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17, (uint64_t)&v134);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v18 + 16, (uint64_t)&v136);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17 + 32, (uint64_t)v138);
    unint64_t v19 = v139;
    if (v139) {
      *(_DWORD *)v139 += 2;
    }
    *(void *)(v17 + 4++*(_DWORD *)(this + 8) = v19;
    long long v20 = v140;
    long long v21 = v141;
    *(_WORD *)(v17 + 8++*(_DWORD *)(this + 8) = v142;
    *(_OWORD *)(v17 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v21;
    *(_OWORD *)(v17 + 56) = v20;
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(v17 + 96, (uint64_t)v143);
    *(unsigned char *)(v17 + 11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v144;
    char v108 = 0;
    unint64_t v109 = 0;
    *(void *)a4 = v17;
    *(void *)(a4 + ++*(_DWORD *)(this + 8) = 0x100000001;
    *(unsigned char *)(a4 + 16) = 1;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v22);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v143, v23);
    __int16 v25 = v139;
    char v139 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2) {
        WTF::StringImpl::destroy(v25, v24);
      }
      else {
        *(_DWORD *)v25 -= 2;
      }
    }
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v138, v24);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v136, v53);
    WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v54);
    return (IPC::Encoder *)std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v55);
  }
  std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v8);
  {
    __int16 v106 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v106);
  }
  uint64_t v27 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v107[0] = WebKit::pageIdentifier(a3, v26);
  v107[1] = v28;
  uint64_t v115 = 0;
  IPC::Connection::createSyncMessageEncoder(3794, 0, &v115, &v114);
  char v29 = v114;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v114, v6);
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v29, v5);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v29, (uint64_t)v107);
  IPC::Connection::sendSyncMessage(v27, v115, (uint64_t *)&v114, 0, (uint64_t)&v112, INFINITY);
  if (!v113)
  {
    LOBYTE(v10++*(_DWORD *)(this + 8) = 0;
    unsigned __int8 v111 = 0;
    uint64_t v33 = v112;
    unint64_t v34 = *((void *)v112 + 1);
    uint64_t v35 = *(char **)v112;
    unint64_t v36 = *((void *)v112 + 2) - *(void *)v112;
    if (v34 <= v36)
    {
      unint64_t v82 = 0;
      char v83 = 0;
      *(void *)char v112 = 0;
      *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
      uint64_t v84 = *((void *)v33 + 3);
      if (v84)
      {
        if (v34)
        {
          (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
          char v83 = *(char **)v33;
          unint64_t v82 = *((void *)v33 + 1);
        }
        else
        {
          unint64_t v82 = 0;
          char v83 = 0;
        }
      }
    }
    else
    {
      Color v37 = &v35[v36];
      uint64_t v38 = (uint64_t)&v35[v36 + 1];
      *((void *)v112 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v38;
      if (v35)
      {
        unsigned int v39 = *v37;
        if (v39 < 2)
        {
          if (!v39)
          {
            LODWORD(v6) = 0;
            LOBYTE(v11++*(_DWORD *)(this + 8) = 0;
            LOBYTE(v12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
            LOBYTE(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 1;
            goto LABEL_33;
          }
          unint64_t v40 = ((v38 + 7) & 0xFFFFFFFFFFFFFFF8) - (void)v35;
          if (v34 < v40 || v34 - v40 <= 7)
          {
            *(void *)uint64_t v33 = 0;
            *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
            uint64_t v86 = *((void *)v33 + 3);
            if (v86)
            {
              (*(void (**)(uint64_t))(*(void *)v86 + 16))(v86);
              uint64_t v87 = *(char **)v33;
              uint64_t v88 = *((void *)v33 + 1);
              uint64_t v89 = *((void *)v33 + 3);
              *(void *)uint64_t v33 = 0;
              *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
              if (v89)
              {
                if (v88) {
                  (*(void (**)(uint64_t, char *))(*(void *)v89 + 16))(v89, v87);
                }
              }
            }
          }
          else
          {
            uint64_t v41 = (IPC::Encoder **)&v35[v40];
            char v29 = *v41;
            *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v41 + 1;
            uint64_t v132 = 0;
            uint64_t v133 = 0;
            if ((unint64_t)v29 >= 0x2222)
            {
              LODWORD(v27) = 120;
              do
              {
                IPC::Decoder::decode<WebCore::PasteboardItemInfo>((uint64_t)&v118, v33);
                if (!v131) {
                  goto LABEL_107;
                }
                int v90 = HIDWORD(v133);
                if (HIDWORD(v133) == v133)
                {
                  WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardItemInfo>((uint64_t)&v132, (unint64_t)&v118);
                }
                else
                {
                  uint64_t v91 = v132 + 120 * HIDWORD(v133);
                  *(void *)uint64_t v91 = 0;
                  *(void *)(v91 + ++*(_DWORD *)(this + 8) = 0;
                  char v92 = v118;
                  uint64_t v118 = 0;
                  *(void *)uint64_t v91 = v92;
                  LODWORD(v9WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v119;
                  LODWORD(v119) = 0;
                  *(_DWORD *)(v91 + ++*(_DWORD *)(this + 8) = v92;
                  LODWORD(v9WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = HIDWORD(v119);
                  HIDWORD(v119) = 0;
                  *(_DWORD *)(v91 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v92;
                  *(void *)(v91 + 16) = 0;
                  *(void *)(v91 + ++*(_DWORD *)(this + 24) = 0;
                  unint64_t v93 = v120;
                  unint64_t v120 = 0;
                  *(void *)(v91 + 16) = v93;
                  LODWORD(v9WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v121;
                  LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
                  *(_DWORD *)(v91 + ++*(_DWORD *)(this + 24) = v93;
                  LODWORD(v9WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = HIDWORD(v121);
                  HIDWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
                  *(_DWORD *)(v91 + 2++*(_DWORD *)(this + 8) = v93;
                  *(void *)(v91 + ++*(_DWORD *)(this + 32) = 0;
                  *(void *)(v91 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
                  uint64_t v94 = v122;
                  uint64_t v122 = 0;
                  *(void *)(v91 + ++*(_DWORD *)(this + 32) = v94;
                  LODWORD(v94) = v123;
                  LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
                  *(_DWORD *)(v91 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v94;
                  LODWORD(v94) = HIDWORD(v123);
                  HIDWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
                  *(_DWORD *)(v91 + 44) = v94;
                  char v95 = v124;
                  char v124 = 0;
                  *(void *)(v91 + 4++*(_DWORD *)(this + 8) = v95;
                  long long v96 = v125;
                  long long v97 = v126;
                  *(_WORD *)(v91 + 8++*(_DWORD *)(this + 8) = v127;
                  *(_OWORD *)(v91 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v97;
                  *(_OWORD *)(v91 + 56) = v96;
                  *(void *)(v91 + 96) = 0;
                  *(void *)(v91 + 104) = 0;
                  uint64_t v98 = v128;
                  uint64_t v128 = 0;
                  *(void *)(v91 + 96) = v98;
                  LODWORD(v9++*(_DWORD *)(this + 8) = v129;
                  LODWORD(v129) = 0;
                  *(_DWORD *)(v91 + 104) = v98;
                  LODWORD(v9++*(_DWORD *)(this + 8) = HIDWORD(v129);
                  HIDWORD(v129) = 0;
                  *(_DWORD *)(v91 + 10++*(_DWORD *)(this + 8) = v98;
                  *(unsigned char *)(v91 + 11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v130;
                  HIDWORD(v13WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v90 + 1;
                }
                std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v43);
                char v29 = (IPC::Encoder *)((char *)v29 - 1);
              }
              while (v29);
              LODWORD(v29) = v133;
              LODWORD(v27) = HIDWORD(v133);
              uint64_t v5 = v132;
              if (v133 <= HIDWORD(v133)) {
                goto LABEL_32;
              }
              uint64_t v99 = v132;
              if (!HIDWORD(v133)) {
                goto LABEL_123;
              }
              if (HIDWORD(v133) < 0x2222223)
              {
                uint64_t v100 = WTF::fastMalloc((WTF *)(120 * HIDWORD(v133)));
                LODWORD(v29) = 120 * (int)v27 / 0x78u;
                if (v100 != v5)
                {
                  uint64_t v99 = v100;
                  WTF::VectorMover<false,WebCore::PasteboardItemInfo>::move(v5, (void *)(v5 + 120 * v27), v100);
                  goto LABEL_123;
                }
                goto LABEL_122;
              }
              goto LABEL_135;
            }
            if (!v29)
            {
              LODWORD(v27) = 0;
              uint64_t v5 = 0;
              goto LABEL_32;
            }
            uint64_t v42 = WTF::fastMalloc((WTF *)(120 * (void)v29));
            LODWORD(v13WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 120 * (int)v29 / 0x78u;
            uint64_t v132 = v42;
            LODWORD(v27) = 120;
            while (1)
            {
              IPC::Decoder::decode<WebCore::PasteboardItemInfo>((uint64_t)&v118, v33);
              if (!v131) {
                break;
              }
              int v44 = HIDWORD(v133);
              if (HIDWORD(v133) == v133)
              {
                WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::PasteboardItemInfo>((uint64_t)&v132, (unint64_t)&v118);
              }
              else
              {
                uint64_t v45 = v132 + 120 * HIDWORD(v133);
                *(void *)uint64_t v45 = 0;
                *(void *)(v45 + ++*(_DWORD *)(this + 8) = 0;
                char v46 = v118;
                uint64_t v118 = 0;
                *(void *)uint64_t v45 = v46;
                LODWORD(v46) = v119;
                LODWORD(v119) = 0;
                *(_DWORD *)(v45 + ++*(_DWORD *)(this + 8) = v46;
                LODWORD(v46) = HIDWORD(v119);
                HIDWORD(v119) = 0;
                *(_DWORD *)(v45 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v46;
                *(void *)(v45 + 16) = 0;
                *(void *)(v45 + ++*(_DWORD *)(this + 24) = 0;
                unint64_t v47 = v120;
                unint64_t v120 = 0;
                *(void *)(v45 + 16) = v47;
                LODWORD(v47) = v121;
                LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
                *(_DWORD *)(v45 + ++*(_DWORD *)(this + 24) = v47;
                LODWORD(v47) = HIDWORD(v121);
                HIDWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
                *(_DWORD *)(v45 + 2++*(_DWORD *)(this + 8) = v47;
                *(void *)(v45 + ++*(_DWORD *)(this + 32) = 0;
                *(void *)(v45 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
                uint64_t v48 = v122;
                uint64_t v122 = 0;
                *(void *)(v45 + ++*(_DWORD *)(this + 32) = v48;
                LODWORD(v4++*(_DWORD *)(this + 8) = v123;
                LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
                *(_DWORD *)(v45 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v48;
                LODWORD(v4++*(_DWORD *)(this + 8) = HIDWORD(v123);
                HIDWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
                *(_DWORD *)(v45 + 44) = v48;
                unint64_t v49 = v124;
                char v124 = 0;
                *(void *)(v45 + 4++*(_DWORD *)(this + 8) = v49;
                long long v50 = v125;
                long long v51 = v126;
                *(_WORD *)(v45 + 8++*(_DWORD *)(this + 8) = v127;
                *(_OWORD *)(v45 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v51;
                *(_OWORD *)(v45 + 56) = v50;
                *(void *)(v45 + 96) = 0;
                *(void *)(v45 + 104) = 0;
                uint64_t v52 = v128;
                uint64_t v128 = 0;
                *(void *)(v45 + 96) = v52;
                LODWORD(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v129;
                LODWORD(v129) = 0;
                *(_DWORD *)(v45 + 104) = v52;
                LODWORD(v5WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = HIDWORD(v129);
                HIDWORD(v129) = 0;
                *(_DWORD *)(v45 + 10++*(_DWORD *)(this + 8) = v52;
                *(unsigned char *)(v45 + 11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v130;
                HIDWORD(v13WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v44 + 1;
              }
              std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v43);
              char v29 = (IPC::Encoder *)((char *)v29 - 1);
              if (!v29)
              {
                uint64_t v5 = v132;
                LODWORD(v29) = v133;
                LODWORD(v27) = HIDWORD(v133);
                goto LABEL_32;
              }
            }
LABEL_107:
            std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v118, v43);
            WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v132, v101);
          }
LABEL_108:
          uint64_t v35 = *(char **)v33;
          unint64_t v34 = *((void *)v33 + 1);
          goto LABEL_109;
        }
        goto LABEL_109;
      }
      unint64_t v82 = v34;
      char v83 = 0;
    }
    unint64_t v34 = 0;
    uint64_t v35 = 0;
    *(void *)uint64_t v33 = 0;
    *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    uint64_t v85 = *((void *)v33 + 3);
    if (v85)
    {
      if (!v82)
      {
        unint64_t v34 = 0;
        uint64_t v35 = 0;
        goto LABEL_109;
      }
      (*(void (**)(uint64_t, char *, unint64_t))(*(void *)v85 + 16))(v85, v83, v82);
      goto LABEL_108;
    }
LABEL_109:
    *(void *)uint64_t v33 = 0;
    *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    uint64_t v102 = *((void *)v33 + 3);
    if (v102 && v34) {
      (*(void (**)(uint64_t, char *))(*(void *)v102 + 16))(v102, v35);
    }
    uint64_t v103 = *(char **)v33;
    uint64_t v104 = *((void *)v33 + 1);
    *(void *)uint64_t v33 = 0;
    *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    uint64_t v105 = *((void *)v33 + 3);
    if (v105)
    {
      if (v104)
      {
        (*(void (**)(uint64_t, char *))(*(void *)v105 + 16))(v105, v103);
        uint64_t v35 = *(char **)v33;
        uint64_t v104 = *((void *)v33 + 1);
        uint64_t v105 = *((void *)v33 + 3);
LABEL_113:
        LOBYTE(v11++*(_DWORD *)(this + 8) = 0;
        LOBYTE(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
        *(void *)uint64_t v33 = 0;
        *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
        if (v105 && v104) {
          (*(void (**)(uint64_t, char *))(*(void *)v105 + 16))(v105, v35);
        }
        int v59 = 0;
        LODWORD(v6) = 0;
        uint64_t v5 = 1;
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v104 = 0;
    }
    uint64_t v35 = 0;
    goto LABEL_113;
  }
  if (v113 == 1)
  {
    int v30 = 0;
    LOBYTE(v11++*(_DWORD *)(this + 8) = (_BYTE)v112;
    int v31 = 1;
    LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 1;
    int v32 = 1;
LABEL_69:
    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7690[v32])(&v134, &v112);
    goto LABEL_70;
  }
  do
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_122:
    uint64_t v99 = v5;
LABEL_123:
    if (v5)
    {
      if (v99 == v5)
      {
        LODWORD(v29) = 0;
        uint64_t v99 = 0;
        uint64_t v132 = 0;
        LODWORD(v13WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
      }
      WTF::fastFree((WTF *)v5, v35);
    }
    uint64_t v5 = v99;
LABEL_32:
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    LODWORD(v6) = 1;
    char v117 = 1;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v132, v35);
    v116[0] = 0;
    v116[1] = 0;
    LOBYTE(v136) = 1;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v116, v57);
    LOBYTE(v137) = 1;
    __int16 v134 = 0;
    unint64_t v135 = 0;
    uint64_t v118 = (WTF *)v5;
    unint64_t v119 = __PAIR64__(v27, v29);
    LOBYTE(v12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 1;
    LOBYTE(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 1;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v58);
LABEL_33:
    uint64_t v5 = 0;
    int v59 = 1;
LABEL_34:
    if (v111 == v59)
    {
      if (v111)
      {
        if (v110 == v6)
        {
          if (v110)
          {
            if (HIDWORD(v109)) {
              WTF::VectorDestructor<true,WebCore::PasteboardItemInfo>::destruct((uint64_t)v108, (char *)v108 + 120 * HIDWORD(v109));
            }
            uint64_t v60 = v108;
            if (v108)
            {
              char v108 = 0;
              LODWORD(v109) = 0;
              WTF::fastFree(v60, v35);
            }
            long long v61 = v118;
            uint64_t v118 = 0;
            unint64_t v119 = 0;
            char v108 = v61;
            unint64_t v109 = __PAIR64__(v27, v29);
          }
        }
        else if (v110)
        {
          WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v35);
          unsigned __int8 v110 = 0;
        }
        else
        {
          char v63 = v118;
          uint64_t v118 = 0;
          unint64_t v119 = 0;
          char v108 = v63;
          unint64_t v109 = __PAIR64__(v27, v29);
          unsigned __int8 v110 = 1;
        }
      }
    }
    else if (v111)
    {
      if (v110) {
        WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v35);
      }
      unsigned __int8 v111 = 0;
    }
    else
    {
      LOBYTE(v10++*(_DWORD *)(this + 8) = 0;
      unsigned __int8 v110 = 0;
      if (v6)
      {
        uint64_t v62 = v118;
        uint64_t v118 = 0;
        unint64_t v119 = 0;
        char v108 = v62;
        unint64_t v109 = __PAIR64__(v27, v29);
        unsigned __int8 v110 = 1;
      }
      unsigned __int8 v111 = 1;
    }
    if (v6) {
      char v64 = v5;
    }
    else {
      char v64 = 1;
    }
    if ((v64 & 1) == 0) {
      WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v118, v35);
    }
    if (!v111)
    {
      int v30 = 0;
      LOBYTE(v11++*(_DWORD *)(this + 8) = 13;
      int v31 = 1;
      LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 1;
      goto LABEL_68;
    }
  }
  while (v113);
  uint64_t v65 = v112;
  char v112 = 0;
  if (v110)
  {
    uint64_t v66 = v108;
    char v108 = 0;
    LODWORD(v6) = v109;
    LODWORD(v5) = HIDWORD(v109);
    unint64_t v109 = 0;
    int v30 = 1;
    LOBYTE(v137) = 1;
    __int16 v134 = 0;
    unint64_t v135 = 0;
    uint64_t v118 = v65;
    unint64_t v119 = (unint64_t)v66;
    unint64_t v136 = 0;
    unint64_t v120 = __PAIR64__(v5, v6);
    LOBYTE(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 1;
    LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v135, v35);
    uint64_t v67 = v134;
    __int16 v134 = 0;
    if (v67)
    {
      IPC::Decoder::~Decoder(v67);
      WTF::fastFree(v68, v69);
    }
  }
  else
  {
    int v30 = 0;
    uint64_t v118 = v65;
    LOBYTE(v119) = 0;
    LOBYTE(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    LODWORD(v12WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
  }
  int v31 = 0;
  if (v111 && v110)
  {
    WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v108, v35);
    int v31 = 0;
  }
LABEL_68:
  int v32 = v113;
  if (v113 != -1) {
    goto LABEL_69;
  }
LABEL_70:
  uint64_t result = v114;
  char v114 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v35);
    uint64_t result = (IPC::Encoder *)WTF::fastFree(v70, v71);
    if (v31) {
      goto LABEL_72;
    }
  }
  else if (v31)
  {
LABEL_72:
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    goto LABEL_73;
  }
  if (!v30) {
    goto LABEL_72;
  }
  unint64_t v72 = v119;
  unint64_t v119 = 0;
  unint64_t v120 = 0;
  __int16 v134 = (IPC::Decoder *)v72;
  unint64_t v135 = __PAIR64__(v5, v6);
  LOBYTE(v136) = 1;
  *(void *)a4 = 0;
  *(void *)(a4 + ++*(_DWORD *)(this + 8) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v5;
  if (v5)
  {
    if (v5 < 0x2222223)
    {
      char v73 = (WTF *)(120 * v5);
      uint64_t v74 = WTF::fastMalloc(v73);
      __int16 v75 = 0;
      *(_DWORD *)(a4 + ++*(_DWORD *)(this + 8) = (v73 & 0xFFFFFFF8) / 0x78;
      *(void *)a4 = v74;
      do
      {
        char v76 = (char *)v75 + v72;
        char v77 = (char *)v75 + v74;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v75 + v74, (uint64_t)v75 + v72);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v75 + v74 + 16, (uint64_t)v75 + v72 + 16);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)v75 + v74 + 32, (uint64_t)v75 + v72 + 32);
        uint64_t v78 = *(_DWORD **)((char *)v75 + v72 + 48);
        if (v78) {
          *v78 += 2;
        }
        *((void *)v77 + 6) = v78;
        long long v79 = *(_OWORD *)(v76 + 56);
        long long v80 = *(_OWORD *)(v76 + 72);
        *((_WORD *)v77 + 44) = *((_WORD *)v76 + 44);
        *(_OWORD *)(v77 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v80;
        *(_OWORD *)(v77 + 56) = v79;
        uint64_t result = (IPC::Encoder *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector((uint64_t)(v77 + 96), (uint64_t)(v76 + 96));
        v77[112] = v76[112];
        __int16 v75 = (WTF *)((char *)v75 + 120);
      }
      while (v73 != v75);
      int v81 = v136;
      *(unsigned char *)(a4 + 16) = 1;
      if (!v81) {
        goto LABEL_73;
      }
      goto LABEL_87;
    }
LABEL_135:
    __break(0xC471u);
    JUMPOUT(0x1991E41F0);
  }
  *(unsigned char *)(a4 + 16) = 1;
LABEL_87:
  uint64_t result = (IPC::Encoder *)WTF::Vector<WebCore::PasteboardItemInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v134, v35);
LABEL_73:
  if (v122 != -1) {
    return (IPC::Encoder *)((uint64_t (*)(IPC::Decoder **, WTF **))off_1EE9F7600[v122])(&v134, &v118);
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::informationForItemAtIndex@<X0>(WTF::StringImpl **a1@<X2>, uint64_t a2@<X1>, WTF **a3@<X3>, IPC::Encoder *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7 = a1;
  p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
    goto LABEL_93;
  while (1)
  {
    uint64_t result = WebKit::WebPasteboardOverrides::overriddenInfo((WebKit::WebPasteboardOverrides *)&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, v7, (const WTF::StringImpl *)a1, a5);
    if (*(unsigned char *)(a5 + 120)) {
      return result;
    }
    std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100](a5, v12);
    {
      uint64_t v99 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v99);
    }
    uint64_t v14 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    v100[0] = WebKit::pageIdentifier((uint64_t)a4, v13);
    v100[1] = v15;
    uint64_t v133 = 0;
    IPC::Connection::createSyncMessageEncoder(3807, 0, &v133, &v132);
    a4 = v132;
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v132, a2);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a4, (uint64_t *)v7);
    IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(a4, (uint64_t)a3);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a4, (uint64_t)v100);
    IPC::Connection::sendSyncMessage(v14, v133, (uint64_t *)&v132, 0, (uint64_t)&v130, INFINITY);
    if (v131)
    {
      if (v131 == 1)
      {
        LOBYTE(v10WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v130;
        int v16 = 1;
        int v114 = 1;
        int v17 = 1;
        goto LABEL_71;
      }
      goto LABEL_92;
    }
    LOBYTE(v115) = 0;
    char v129 = 0;
    a3 = (WTF **)v130;
    uint64_t v18 = *(WTF **)(v130 + 8);
    unint64_t v19 = *(WTF **)v130;
    unint64_t v20 = *(void *)(v130 + 16) - *(void *)v130;
    if ((unint64_t)v18 <= v20)
    {
      uint64_t v94 = 0;
      char v95 = 0;
      *(void *)uint64_t v130 = 0;
      a3[1] = 0;
      long long v96 = a3[3];
      if (v96)
      {
        if (v18)
        {
          (*(void (**)(WTF *))(*(void *)v96 + 16))(v96);
          char v95 = *a3;
          uint64_t v94 = a3[1];
        }
        else
        {
          uint64_t v94 = 0;
          char v95 = 0;
        }
      }
      goto LABEL_88;
    }
    long long v21 = (unsigned __int8 *)v19 + v20;
    *(void *)(v130 + 16) = v21 + 1;
    if (!v19)
    {
      uint64_t v94 = v18;
      char v95 = 0;
LABEL_88:
      uint64_t v18 = 0;
      unint64_t v19 = 0;
      *a3 = 0;
      a3[1] = 0;
      long long v97 = a3[3];
      if (v97)
      {
        if (v94)
        {
          (*(void (**)(WTF *, WTF *, WTF *))(*(void *)v97 + 16))(v97, v95, v94);
          unint64_t v19 = *a3;
          uint64_t v18 = a3[1];
        }
        else
        {
          uint64_t v18 = 0;
          unint64_t v19 = 0;
        }
      }
LABEL_89:
      *a3 = 0;
      a3[1] = 0;
      uint64_t v98 = a3[3];
      if (v98 && v18) {
        (*(void (**)(WTF *, WTF *))(*(void *)v98 + 16))(v98, v19);
      }
      goto LABEL_16;
    }
    unsigned int v22 = *v21;
    if (v22 >= 2) {
      goto LABEL_89;
    }
    if (!v22)
    {
      LOBYTE(v134) = 0;
      char v145 = 0;
      LOBYTE(v10WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
      char v112 = 0;
      char v113 = 1;
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v134, v19);
      LOBYTE(v134) = 0;
      char v145 = 0;
      goto LABEL_14;
    }
    IPC::Decoder::decode<WebCore::PasteboardItemInfo>((uint64_t)&v134, (IPC::Decoder *)a3);
    if (v145)
    {
      a3 = (WTF **)v134;
      __int16 v134 = 0;
      uint64_t v7 = (WTF::StringImpl **)v136;
      unint64_t v136 = 0;
      a2 = (uint64_t)v138;
      v138 = 0;
      a4 = v140;
      *(_OWORD *)char v108 = *(_OWORD *)v141;
      *(_OWORD *)&v108[16] = *(_OWORD *)&v141[16];
      *(_WORD *)&v108[32] = *(_WORD *)&v141[32];
      int v24 = v142;
      long long v140 = 0;
      __int16 v142 = 0;
      char v25 = v144;
      LOBYTE(v11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v144;
      char v112 = 1;
      char v113 = 1;
      uint64_t v26 = v135;
      uint64_t v135 = 0;
      uint64_t v27 = v137;
      uint64_t v137 = 0;
      uint64_t v28 = v139;
      uint64_t v139 = 0;
      uint64_t v29 = v143;
      uint64_t v143 = 0;
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v134, v23);
      uint64_t v101 = 0;
      __int16 v134 = (WTF *)a3;
      uint64_t v102 = 0;
      uint64_t v135 = v26;
      uint64_t v103 = 0;
      unint64_t v136 = (WTF *)v7;
      uint64_t v104 = 0;
      uint64_t v137 = v27;
      uint64_t v105 = 0;
      v138 = (WTF *)a2;
      __int16 v106 = 0;
      uint64_t v139 = v28;
      long long v140 = a4;
      *(_OWORD *)long long v141 = *(_OWORD *)v108;
      *(_OWORD *)&v141[16] = *(_OWORD *)&v108[16];
      *(_WORD *)&v141[32] = *(_WORD *)&v108[32];
      uint64_t v107 = 0;
      uint64_t v109 = 0;
      __int16 v142 = v24;
      unsigned __int8 v110 = 0;
      uint64_t v143 = v29;
      LOBYTE(v144) = v25;
      char v145 = 1;
LABEL_14:
      char v146 = 1;
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v101, v30);
      goto LABEL_20;
    }
    std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v134, v23);
LABEL_16:
    int v32 = *a3;
    uint64_t v33 = a3[1];
    *a3 = 0;
    a3[1] = 0;
    unint64_t v34 = a3[3];
    if (v34)
    {
      if (v33)
      {
        (*(void (**)(WTF *, WTF *))(*(void *)v34 + 16))(v34, v32);
        int v31 = *a3;
        uint64_t v33 = a3[1];
        unint64_t v34 = a3[3];
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    int v31 = 0;
LABEL_19:
    LOBYTE(v134) = 0;
    char v146 = 0;
    *a3 = 0;
    a3[1] = 0;
    if (v34 && v33) {
      (*(void (**)(WTF *, WTF *))(*(void *)v34 + 16))(v34, v31);
    }
LABEL_20:
    if (v129 == v146)
    {
      if (!v129) {
        goto LABEL_59;
      }
      if (v128 == v145)
      {
        if (v128)
        {
          if (HIDWORD(v116)) {
            WTF::VectorDestructor<true,WTF::String>::destruct(v115, (WTF *)((char *)v115 + 8 * HIDWORD(v116)));
          }
          uint64_t v35 = v115;
          if (v115)
          {
            uint64_t v115 = 0;
            LODWORD(v116) = 0;
            WTF::fastFree(v35, v31);
          }
          uint64_t v115 = v134;
          uint64_t v36 = v135;
          __int16 v134 = 0;
          uint64_t v135 = 0;
          uint64_t v116 = v36;
          if (HIDWORD(v118)) {
            WTF::VectorDestructor<true,WTF::String>::destruct(v117, (WTF *)((char *)v117 + 8 * HIDWORD(v118)));
          }
          Color v37 = v117;
          if (v117)
          {
            char v117 = 0;
            LODWORD(v11++*(_DWORD *)(this + 8) = 0;
            WTF::fastFree(v37, v31);
          }
          char v117 = v136;
          uint64_t v38 = v137;
          unint64_t v136 = 0;
          uint64_t v137 = 0;
          uint64_t v118 = v38;
          if (HIDWORD(v120)) {
            WTF::VectorDestructor<true,WTF::String>::destruct(v119, (WTF *)((char *)v119 + 8 * HIDWORD(v120)));
          }
          unsigned int v39 = v119;
          if (v119)
          {
            unint64_t v119 = 0;
            LODWORD(v12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
            WTF::fastFree(v39, v31);
          }
          unint64_t v119 = v138;
          uint64_t v40 = v139;
          v138 = 0;
          uint64_t v139 = 0;
          uint64_t v120 = v40;
          uint64_t v41 = v140;
          long long v140 = 0;
          uint64_t v42 = v121;
          uint64_t v121 = v41;
          if (v42)
          {
            if (*(_DWORD *)v42 == 2) {
              WTF::StringImpl::destroy(v42, v31);
            }
            else {
              *(_DWORD *)v42 -= 2;
            }
          }
          long long v122 = *(_OWORD *)v141;
          long long v123 = *(_OWORD *)&v141[16];
          __int16 v124 = *(_WORD *)&v141[32];
          if (HIDWORD(v126)) {
            WTF::VectorDestructor<true,WTF::String>::destruct(v125, (WTF *)((char *)v125 + 8 * HIDWORD(v126)));
          }
          long long v61 = v125;
          if (v125)
          {
            long long v125 = 0;
            LODWORD(v126) = 0;
            WTF::fastFree(v61, v31);
          }
          long long v125 = v142;
          uint64_t v62 = v143;
          __int16 v142 = 0;
          uint64_t v143 = 0;
          uint64_t v126 = v62;
          char v127 = v144;
        }
      }
      else if (v128)
      {
        a3 = &v115;
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v125, v31);
        uint64_t v52 = v121;
        uint64_t v121 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2) {
            WTF::StringImpl::destroy(v52, v51);
          }
          else {
            *(_DWORD *)v52 -= 2;
          }
        }
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v119, v51);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v117, v63);
        WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v115, v64);
        char v128 = 0;
      }
      else
      {
        uint64_t v53 = v134;
        __int16 v134 = 0;
        uint64_t v115 = v53;
        uint64_t v54 = v135;
        uint64_t v135 = 0;
        uint64_t v116 = v54;
        uint64_t v55 = v136;
        unint64_t v136 = 0;
        char v117 = v55;
        uint64_t v56 = v137;
        uint64_t v137 = 0;
        uint64_t v118 = v56;
        int v57 = v138;
        v138 = 0;
        unint64_t v119 = v57;
        uint64_t v58 = v139;
        uint64_t v139 = 0;
        uint64_t v120 = v58;
        uint64_t v121 = v140;
        __int16 v124 = *(_WORD *)&v141[32];
        long long v123 = *(_OWORD *)&v141[16];
        long long v122 = *(_OWORD *)v141;
        int v59 = v142;
        long long v140 = 0;
        __int16 v142 = 0;
        long long v125 = v59;
        uint64_t v60 = v143;
        uint64_t v143 = 0;
        uint64_t v126 = v60;
        char v127 = v144;
        char v128 = 1;
      }
    }
    else if (v129)
    {
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v115, v31);
      char v129 = 0;
    }
    else
    {
      LOBYTE(v115) = 0;
      char v128 = 0;
      if (v145)
      {
        uint64_t v43 = v134;
        __int16 v134 = 0;
        uint64_t v115 = v43;
        uint64_t v44 = v135;
        uint64_t v135 = 0;
        uint64_t v116 = v44;
        uint64_t v45 = v136;
        unint64_t v136 = 0;
        char v117 = v45;
        uint64_t v46 = v137;
        uint64_t v137 = 0;
        uint64_t v118 = v46;
        unint64_t v47 = v138;
        v138 = 0;
        unint64_t v119 = v47;
        uint64_t v48 = v139;
        uint64_t v139 = 0;
        uint64_t v120 = v48;
        uint64_t v121 = v140;
        __int16 v124 = *(_WORD *)&v141[32];
        long long v123 = *(_OWORD *)&v141[16];
        long long v122 = *(_OWORD *)v141;
        unint64_t v49 = v142;
        long long v140 = 0;
        __int16 v142 = 0;
        long long v125 = v49;
        uint64_t v50 = v143;
        uint64_t v143 = 0;
        uint64_t v126 = v50;
        char v127 = v144;
        char v128 = 1;
      }
      char v129 = 1;
    }
    if (v146) {
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v134, v31);
    }
LABEL_59:
    if (!v129)
    {
      LOBYTE(v10WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 13;
      int v16 = 1;
      int v114 = 1;
      goto LABEL_70;
    }
    if (!v131)
    {
      uint64_t v65 = v130;
      uint64_t v130 = 0;
      LOBYTE(v135) = 0;
      char v146 = 0;
      char v66 = v128;
      if (v128)
      {
        uint64_t v67 = v115;
        uint64_t v115 = 0;
        __int16 v68 = v117;
        char v117 = 0;
        uint64_t v69 = v119;
        unint64_t v119 = 0;
        __int16 v70 = v121;
        *(_OWORD *)&v141[8] = v122;
        *(_OWORD *)&v141[24] = v123;
        LOWORD(v14WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v124;
        uint64_t v71 = v125;
        uint64_t v121 = 0;
        long long v125 = 0;
        char v145 = v127;
        char v66 = 1;
        char v146 = 1;
        __int16 v134 = 0;
        uint64_t v135 = 0;
        uint64_t v102 = v67;
        unint64_t v136 = 0;
        uint64_t v72 = v116;
        uint64_t v116 = 0;
        uint64_t v103 = v72;
        uint64_t v137 = 0;
        uint64_t v104 = v68;
        v138 = 0;
        uint64_t v73 = v118;
        uint64_t v118 = 0;
        uint64_t v105 = v73;
        uint64_t v139 = 0;
        __int16 v106 = v69;
        long long v140 = 0;
        uint64_t v74 = v120;
        uint64_t v120 = 0;
        uint64_t v107 = v74;
        *(void *)long long v141 = 0;
        *(void *)char v108 = v70;
        LOWORD(v109) = v124;
        *(_OWORD *)&v108[8] = v122;
        *(_OWORD *)&v108[24] = v123;
        uint64_t v143 = 0;
        unsigned __int8 v110 = v71;
        uint64_t v144 = 0;
        uint64_t v75 = v126;
        uint64_t v126 = 0;
        uint64_t v111 = v75;
        char v112 = v127;
      }
      else
      {
        __int16 v134 = 0;
        LOBYTE(v10WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
      }
      uint64_t v101 = v65;
      char v113 = v66;
      int v114 = 0;
      std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v135, v31);
      char v76 = v134;
      __int16 v134 = 0;
      if (v76)
      {
        IPC::Decoder::~Decoder(v76);
        WTF::fastFree(v92, v93);
      }
      if (v129) {
        std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v115, v31);
      }
      int v16 = 0;
LABEL_70:
      int v17 = v131;
      if (v131 != -1) {
LABEL_71:
      }
        ((void (*)(WTF **, uint64_t *))off_1EE9F7690[v17])(&v134, &v130);
      char v77 = v132;
      uint64_t v132 = 0;
      if (v77)
      {
        IPC::Encoder::~Encoder(v77, v31);
        WTF::fastFree(v79, v80);
        if (!v16) {
          goto LABEL_77;
        }
LABEL_74:
        char v78 = 0;
        LOBYTE(v134) = 0;
        char v145 = 0;
      }
      else
      {
        if (v16) {
          goto LABEL_74;
        }
LABEL_77:
        LOBYTE(v134) = 0;
        char v145 = 0;
        char v78 = v113;
        if (v113)
        {
          int v81 = v102;
          uint64_t v102 = 0;
          __int16 v134 = v81;
          uint64_t v82 = v103;
          uint64_t v103 = 0;
          uint64_t v135 = v82;
          char v83 = v104;
          uint64_t v104 = 0;
          unint64_t v136 = v83;
          uint64_t v84 = v105;
          uint64_t v105 = 0;
          uint64_t v137 = v84;
          uint64_t v85 = v106;
          __int16 v106 = 0;
          v138 = v85;
          uint64_t v86 = v107;
          uint64_t v107 = 0;
          uint64_t v139 = v86;
          long long v140 = *(WTF::StringImpl **)v108;
          *(_WORD *)&v141[32] = v109;
          *(_OWORD *)long long v141 = *(_OWORD *)&v108[8];
          *(_OWORD *)&v141[16] = *(_OWORD *)&v108[24];
          uint64_t v87 = v110;
          *(void *)char v108 = 0;
          unsigned __int8 v110 = 0;
          __int16 v142 = v87;
          uint64_t v88 = v111;
          uint64_t v111 = 0;
          uint64_t v143 = v88;
          LOBYTE(v144) = v112;
          char v145 = 1;
          *(unsigned char *)a5 = 0;
          *(unsigned char *)(a5 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5, (uint64_t)&v134);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5 + 16, (uint64_t)&v136);
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5 + 32, (uint64_t)&v138);
          uint64_t v89 = v140;
          if (v140) {
            *(_DWORD *)v140 += 2;
          }
          *(void *)(a5 + 4++*(_DWORD *)(this + 8) = v89;
          long long v90 = *(_OWORD *)&v141[16];
          *(_OWORD *)(a5 + 56) = *(_OWORD *)v141;
          *(_OWORD *)(a5 + 7WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v90;
          *(_WORD *)(a5 + 8++*(_DWORD *)(this + 8) = *(_WORD *)&v141[32];
          WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::Vector(a5 + 96, (uint64_t)&v142);
          *(unsigned char *)(a5 + 11WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v144;
          char v78 = 1;
          goto LABEL_81;
        }
      }
      *(unsigned char *)a5 = 0;
LABEL_81:
      *(unsigned char *)(a5 + 12IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v78;
      uint64_t v91 = std::__optional_destruct_base<WebCore::PasteboardItemInfo,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v134, v31);
      return ((uint64_t (*)(uint64_t, uint64_t *))off_1EE9F7610[v16])(v91, &v101);
    }
LABEL_92:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_93:
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
    *((unsigned char *)p_opt_inst_meths + 352++*(_DWORD *)(this + 8) = 1;
  }
}

WTF *WebKit::WebPlatformStrategies::readBufferFromPasteboard@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, const WTF::StringImpl *a3@<X3>, WTF::StringImpl **a4@<X4>, IPC::Encoder *a5@<X5>, WTF::StringImpl ***a6@<X8>)
{
  v30[0] = a1;
  v30[1] = a2;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  p_opt_inst_meths = &OBJC_PROTOCOL___BEDragInteractionDelegate.opt_inst_meths;
    goto LABEL_24;
  while (1)
  {
    if (WebKit::WebPasteboardOverrides::getDataForOverride(&WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides, a4, a3, (unsigned int *)&v28))
    {
      WebCore::SharedBuffer::create<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(a6);
      goto LABEL_18;
    }
    {
      unint64_t v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
      WebKit::WebProcess::WebProcess(v23);
    }
    uint64_t v13 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
    v24[0] = WebKit::pageIdentifier((uint64_t)a5, v11);
    v24[1] = v14;
    uint64_t v36 = 0;
    IPC::Connection::createSyncMessageEncoder(3808, 0, &v36, &v35);
    a5 = v35;
    IPC::ArgumentCoder<std::optional<unsigned long>,void>::encode<IPC::Encoder,std::optional<unsigned long> const&>(v35, (uint64_t)v30);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a5, (uint64_t *)a3);
    IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(a5, (uint64_t *)a4);
    IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(a5, (uint64_t)v24);
    IPC::Connection::sendSyncMessage(v13, v36, (uint64_t *)&v35, 0, (uint64_t)&v33, INFINITY);
    if (v34)
    {
      if (v34 == 1)
      {
        LOBYTE(v25) = (_BYTE)v33;
        int v15 = 1;
        int v27 = 1;
        int v16 = 1;
        goto LABEL_12;
      }
      goto LABEL_23;
    }
    LOBYTE(v3WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
    char v32 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::RefPtr<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>>>(v33, (unsigned int *)&v31);
    if (!v32) {
      break;
    }
    int v16 = v34;
    if (!v34)
    {
      int v15 = 0;
      uint64_t v18 = v33;
      uint64_t v33 = 0;
      a4 = v31;
      char v25 = v18;
      uint64_t v26 = v31;
      int v27 = 0;
      goto LABEL_12;
    }
LABEL_23:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_24:
    WebKit::WebPasteboardOverrides::sharedPasteboardOverrides(void)::sharedOverrides = 0;
    *((unsigned char *)p_opt_inst_meths + 352++*(_DWORD *)(this + 8) = 1;
  }
  LOBYTE(v25) = 13;
  int v15 = 1;
  int v27 = 1;
  int v16 = v34;
  if (v34 == -1) {
    goto LABEL_13;
  }
LABEL_12:
  ((void (*)(WTF::StringImpl ***, IPC::Decoder **))off_1EE9F7690[v16])(&v31, &v33);
LABEL_13:
  unint64_t v19 = v35;
  uint64_t v35 = 0;
  if (!v19)
  {
    if (!v15) {
      goto LABEL_15;
    }
LABEL_22:
    *a6 = 0;
    goto LABEL_17;
  }
  IPC::Encoder::~Encoder(v19, v17);
  WTF::fastFree(v21, v22);
  if (v15) {
    goto LABEL_22;
  }
LABEL_15:
  uint64_t v26 = 0;
  if (!a4) {
    goto LABEL_22;
  }
  atomic_fetch_add((atomic_uint *volatile)a4, 1u);
  *a6 = a4;
  WTF::ThreadSafeRefCounted<WebCore::FragmentedSharedBuffer,(WTF::DestructionThread)0>::deref((unsigned int *)a4, v17);
  int v15 = v27;
  if (v27 != -1) {
LABEL_17:
  }
    ((void (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7620[v15])(&v33, &v25);
LABEL_18:
  uint64_t result = v28;
  if (v28)
  {
    uint64_t v28 = 0;
    LODWORD(v29) = 0;
    return (WTF *)WTF::fastFree(result, v12);
  }
  return result;
}

WTF::StringImpl *WebKit::WebPlatformStrategies::readURLFromPasteboard@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, WTF::StringImpl **a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v35 = 0;
  {
LABEL_29:
    uint64_t v26 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v26);
  }
  unint64_t v10 = *(WTF::StringImpl **)(WebKit::WebProcess::singleton(void)::process + 40);
  v30[0] = WebKit::pageIdentifier(a4, a6);
  v30[1] = v11;
  uint64_t v39 = 0;
  IPC::Connection::createSyncMessageEncoder(3810, 0, &v39, &v38);
  uint64_t v12 = v38;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v38, a1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v12, (uint64_t)v30);
  IPC::Connection::sendSyncMessage((uint64_t)v10, v39, (uint64_t *)&v38, 0, (uint64_t)&v36, INFINITY);
  if (!v37)
  {
    LOBYTE(v27) = 0;
    char v29 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String,WTF::String>>(v36, (uint64_t)&v27);
    if (v29)
    {
      if (v37) {
        goto LABEL_28;
      }
      int v13 = 0;
      int v16 = v36;
      uint64_t v36 = 0;
      unint64_t v10 = v27;
      a1 = v28;
      int v27 = 0;
      uint64_t v28 = 0;
      int v31 = v16;
      char v32 = v10;
      uint64_t v33 = a1;
    }
    else
    {
      LOBYTE(v3WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 13;
      int v13 = 1;
    }
    int v34 = v13;
    std::__optional_destruct_base<WebCore::HTTPHeaderField,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v27, v15);
    int v14 = v37;
    if (v37 == -1) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v37 != 1)
  {
LABEL_28:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_29;
  }
  LOBYTE(v3WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = (_BYTE)v36;
  int v13 = 1;
  int v34 = 1;
  int v14 = 1;
LABEL_10:
  ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9F7690[v14])(&v27, &v36);
LABEL_11:
  uint64_t v18 = v38;
  uint64_t v38 = 0;
  if (v18)
  {
    IPC::Encoder::~Encoder(v18, v17);
    WTF::fastFree(v20, v21);
    if (v13) {
      goto LABEL_19;
    }
  }
  else if (v13)
  {
    goto LABEL_19;
  }
  char v32 = 0;
  uint64_t v33 = 0;
  uint64_t v35 = v10;
  unint64_t v19 = *a3;
  *a3 = (WTF::StringImpl *)a1;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2) {
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v17);
    }
    else {
      *(_DWORD *)v19 -= 2;
    }
  }
LABEL_19:
  int v27 = 0;
  WTF::URL::invalidate((WTF::URL *)&v27);
  MEMORY[0x19972E8B0](a5, &v27, &v35, 0);
  unint64_t v23 = v27;
  int v27 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2) {
      WTF::StringImpl::destroy(v23, v22);
    }
    else {
      *(_DWORD *)v23 -= 2;
    }
  }
  ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9F7630[v13])(&v27, &v31);
  uint64_t result = v35;
  uint64_t v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v24);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebKit::WebPlatformStrategies::readStringFromPasteboard@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, WTF::StringImpl **a5@<X8>, __n128 a6@<Q0>)
{
  {
LABEL_25:
    unint64_t v23 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v23);
  }
  uint64_t v10 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  v24[0] = WebKit::pageIdentifier(a4, a6);
  v24[1] = v11;
  uint64_t v33 = 0;
  IPC::Connection::createSyncMessageEncoder(3809, 0, &v33, &v32);
  uint64_t v12 = v32;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v32, a1);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a2);
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v12, a3);
  IPC::ArgumentCoder<std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>>,void>::encode<IPC::Encoder,std::optional<WTF::ObjectIdentifierGeneric<WebCore::PageIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)0>> const&>(v12, (uint64_t)v24);
  IPC::Connection::sendSyncMessage(v10, v33, (uint64_t *)&v32, 0, (uint64_t)&v30, INFINITY);
  if (!v31)
  {
    LOBYTE(v2++*(_DWORD *)(this + 8) = 0;
    char v29 = 0;
    IPC::Decoder::operator>><std::tuple<WTF::String>>(v30, (uint64_t *)&v28);
    if (!v29)
    {
      LOBYTE(v25) = 13;
      int v13 = 1;
      int v27 = 1;
      int v14 = v31;
      if (v31 == -1) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
    int v14 = v31;
    if (!v31)
    {
      int v13 = 0;
      int v16 = v30;
      int v30 = 0;
      a2 = v28;
      char v25 = v16;
      uint64_t v26 = (uint64_t)v28;
      int v27 = 0;
      goto LABEL_9;
    }
    goto LABEL_24;
  }
  if (v31 != 1)
  {
LABEL_24:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_25;
  }
  LOBYTE(v25) = (_BYTE)v30;
  int v13 = 1;
  int v27 = 1;
  int v14 = 1;
LABEL_9:
  ((void (*)(uint64_t **, IPC::Decoder **))off_1EE9F7690[v14])(&v28, &v30);
LABEL_10:
  int v17 = v32;
  char v32 = 0;
  if (v17)
  {
    IPC::Encoder::~Encoder(v17, v15);
    WTF::fastFree(v21, v22);
  }
  if (v13) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = (WTF::StringImpl *)a2;
  }
  if (!v13) {
    uint64_t v26 = 0;
  }
  if (!v18)
  {
    *a5 = 0;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7640[v13])(&v30, &v25);
  }
  int v19 = *(_DWORD *)v18;
  *(_DWORD *)v18 += 2;
  *a5 = v18;
  if (v19)
  {
    *(_DWORD *)uint64_t v18 = v19;
    return ((uint64_t (*)(IPC::Decoder **, IPC::Decoder **))off_1EE9F7640[v13])(&v30, &v25);
  }
  uint64_t result = WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
  int v13 = v27;
  if (v27 != -1) {
    return ((uint64_t (*)(void, void))off_1EE9F7640[v13])(&v30, &v25);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorSubscribeToPushService(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  *a4 = 0;
  {
    int v16 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v16);
  }
  uint64_t v7 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  __n128 v8 = (void *)WTF::fastMalloc((WTF *)0x10);
  *__n128 v8 = &unk_1EE9F76B0;
  v8[1] = v6;
  uint64_t v9 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v10 = 255;
  *((void *)v10 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v10 + 66) = (char *)v10 + 16;
  *((void *)v10 + 67) = 512;
  *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v10 + 69) = 0;
  IPC::Encoder::encodeHeader(v10);
  uint64_t v18 = v10;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v10, a2);
  IPC::ArgumentCoder<std::span<unsigned char const,18446744073709551615ul>,void>::encode<IPC::Encoder>(v10, *(const void **)a3, *(unsigned int *)(a3 + 12));
  v17[0] = (uint64_t)v8;
  v17[1] = v9;
  IPC::Connection::sendMessageWithAsyncReply(v7, &v18, v17, 0, 0);
  uint64_t v12 = v17[0];
  v17[0] = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v11);
    return (IPC::Encoder *)WTF::fastFree(v14, v15);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorUnsubscribeFromPushService(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v16 = a3;
  uint64_t v5 = *a4;
  *a4 = 0;
  {
    int v15 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v15);
  }
  uint64_t v6 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  uint64_t v7 = (void *)WTF::fastMalloc((WTF *)0x10);
  *uint64_t v7 = &unk_1EE9F76F8;
  v7[1] = v5;
  uint64_t v8 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v9 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v9 = 256;
  *((void *)v9 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v9 + 66) = (char *)v9 + 16;
  *((void *)v9 + 67) = 512;
  *((void *)v9 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v9 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v9 + 69) = 0;
  IPC::Encoder::encodeHeader(v9);
  uint64_t v18 = v9;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v9, a2);
  IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v9, &v16);
  v17[0] = (uint64_t)v7;
  v17[1] = v8;
  IPC::Connection::sendMessageWithAsyncReply(v6, &v18, v17, 0, 0);
  uint64_t v11 = v17[0];
  v17[0] = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t result = v18;
  uint64_t v18 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v10);
    return (IPC::Encoder *)WTF::fastFree(v13, v14);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorGetPushSubscription(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  {
    int v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v5 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9F7740;
  v6[1] = v4;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 254;
  *((void *)v8 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2);
  v15[0] = (uint64_t)v6;
  v15[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v16, v15, 0, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

IPC::Encoder *WebKit::WebPlatformStrategies::navigatorGetPushPermissionState(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a3;
  *a3 = 0;
  {
    int v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v14);
  }
  uint64_t v5 = *(os_unfair_lock_s **)(WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process)
                            + 24);
  uint64_t v6 = (void *)WTF::fastMalloc((WTF *)0x10);
  void *v6 = &unk_1EE9F7788;
  v6[1] = v4;
  uint64_t v7 = WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
  uint64_t v8 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v8 = 253;
  *((void *)v8 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v8 + 66) = (char *)v8 + 16;
  *((void *)v8 + 67) = 512;
  *((void *)v8 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v8 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v8 + 69) = 0;
  IPC::Encoder::encodeHeader(v8);
  uint64_t v16 = v8;
  IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v8, a2);
  v15[0] = (uint64_t)v6;
  v15[1] = v7;
  IPC::Connection::sendMessageWithAsyncReply(v5, &v16, v15, 0, 0);
  uint64_t v10 = v15[0];
  v15[0] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t result = v16;
  uint64_t v16 = 0;
  if (result)
  {
    IPC::Encoder::~Encoder(result, v9);
    return (IPC::Encoder *)WTF::fastFree(v12, v13);
  }
  return result;
}

uint64_t WebKit::WebPopupMenu::WebPopupMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)(a1 + ++*(_DWORD *)(this + 8) = 1;
  *(void *)a1 = &unk_1EE9F7120;
  *(void *)(a1 + 16) = a3;
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 256))(a3);
  }
  if (a2)
  {
    WTF::WeakPtrFactory<IPC::MessageReceiver,WTF::DefaultWeakPtrImpl>::initializeIfNeeded((unsigned int *)(a2 + 24), a2 + 16);
    uint64_t v5 = *(atomic_uint **)(a2 + 24);
    if (v5) {
      atomic_fetch_add(v5, 1u);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(a1 + ++*(_DWORD *)(this + 24) = v5;
  return a1;
}

void WebKit::WebPopupMenu::~WebPopupMenu(WebKit::WebPopupMenu *this, void *a2)
{
  *(void *)this = &unk_1EE9F7120;
  uint64_t v3 = (unsigned int *)*((void *)this + 3);
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
  if (v3 && atomic_fetch_add((atomic_uint *volatile)v3, 0xFFFFFFFF) == 1)
  {
    atomic_store(1u, v3);
    WTF::fastFree((WTF *)v3, a2);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 264))(v4);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebPopupMenu::~WebPopupMenu(this, a2);

  WTF::fastFree(v2, v3);
}

uint64_t WebKit::WebPopupMenu::disconnectClient(WebKit::WebPopupMenu *this)
{
  uint64_t result = *((void *)this + 2);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 264))(result);
  }
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
  return result;
}

uint64_t WebKit::WebPopupMenu::didChangeSelectedIndex(WebKit::WebPopupMenu *this, int a2)
{
  uint64_t result = *((void *)this + 2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
    if ((a2 & 0x80000000) == 0)
    {
      uint64_t v5 = *(uint64_t (**)(void))(**((void **)this + 2) + 16);
      return v5();
    }
  }
  return result;
}

uint64_t WebKit::WebPopupMenu::show(WebKit::WebPopupMenu *this, const WebCore::IntRect *a2, WebCore::LocalFrameView *a3, unsigned int a4)
{
  signed int v8 = (*(uint64_t (**)(void))(**((void **)this + 2) + 136))(*((void *)this + 2));
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  if (!v8) {
    goto LABEL_40;
  }
  unint64_t v49 = a2;
  uint64_t v50 = a3;
  unsigned int v52 = a4;
  if (v8 >= 0x5555556)
  {
    __break(0xC471u);
LABEL_47:
    JUMPOUT(0x1991E6194);
  }
  unsigned int v51 = v8;
  uint64_t v54 = v8;
  uint64_t v9 = 0;
  LODWORD(v59) = 48 * v8 / 0x30u;
  uint64_t v58 = WTF::fastMalloc((WTF *)(48 * v8));
  uint64_t v48 = v58;
  uint64_t v10 = (unsigned char *)(v58 + 42);
  do
  {
    if ((*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 160))(*((void *)this + 2), v9))
    {
      char v11 = 0;
      uint64_t v12 = 0;
      char v13 = 0;
      __int16 v14 = 0;
      int v15 = 0;
      CFTypeRef v16 = 0;
      char v17 = 0;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 88))(v60);
      (*(void (**)(WTF::StringImpl **__return_ptr))(**((void **)this + 2) + 40))(v57);
      __int16 v19 = v61;
      __int16 v53 = v62;
      (*(void (**)(CFTypeRef *__return_ptr))(**((void **)this + 2) + 64))(cf);
      (*(void (**)(WTF::StringImpl **__return_ptr))(**((void **)this + 2) + 72))(v55);
      char v18 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 80))(*((void *)this + 2), v9);
      char v11 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 168))(*((void *)this + 2), v9);
      char v13 = (*(uint64_t (**)(void, uint64_t))(**((void **)this + 2) + 176))(*((void *)this + 2), v9);
      int v15 = v57[0];
      if (v57[0]) {
        *(_DWORD *)v57[0] += 2;
      }
      CFTypeRef v16 = cf[0];
      if (cf[0]) {
        *(_DWORD *)cf[0] += 2;
      }
      uint64_t v12 = v55[0];
      if (v55[0])
      {
        int v21 = *(_DWORD *)v55[0];
        *(_DWORD *)v55[0] += 2;
        v55[0] = 0;
        if (v21) {
          *(_DWORD *)uint64_t v12 = v21;
        }
        else {
          WTF::StringImpl::destroy(v12, v20);
        }
      }
      unsigned int v22 = (WTF::StringImpl *)cf[0];
      cf[0] = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2) {
          WTF::StringImpl::destroy(v22, v20);
        }
        else {
          *(_DWORD *)v22 -= 2;
        }
      }
      unint64_t v23 = v57[0];
      v57[0] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2) {
          WTF::StringImpl::destroy(v23, v20);
        }
        else {
          *(_DWORD *)v23 -= 2;
        }
      }
      __int16 v14 = v19 | (v53 << 8);
      WebCore::PopupMenuStyle::~PopupMenuStyle((WebCore::PopupMenuStyle *)v60, v20);
      char v17 = 1;
    }
    *(v10 - 4WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v17;
    *(void *)(v10 - 34) = v15;
    *((_WORD *)v10 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v14;
    *(void *)(v10 - 1++*(_DWORD *)(this + 8) = v16;
    *(void *)(v10 - 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = v12;
    *(v10 - WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v18;
    ++v9;
    *(v10 - WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v11;
    unsigned char *v10 = v13;
    v10 += 48;
  }
  while (v54 != v9);
  HIDWORD(v59) = v51;
  uint64_t v24 = *((void *)this + 3);
  if (!v24 || (uint64_t v25 = *(void *)(v24 + 8)) == 0)
  {
LABEL_40:
    (*(void (**)(void))(**((void **)this + 2) + 152))(*((void *)this + 2));
    return WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v42);
  }
  if (v52 != -1 && v51 <= v52)
  {
    __break(0xC471u);
    JUMPOUT(0x1991E61D4);
  }
  WebKit::WebPage::setActivePopupMenu((WebKit::WebPage *)(v25 - 16), this);
  v60[0] = *(void *)v49;
  uint64_t v26 = (WTF::StringImpl *)WebCore::ScrollView::contentsToWindow(v50, (const WebCore::IntPoint *)v60);
  int v27 = (WTF::StringImpl *)*((void *)v49 + 1);
  v57[0] = v26;
  v57[1] = v27;
  memset(cf, 0, 11);
  {
    unint64_t v47 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
    WebKit::WebProcess::WebProcess(v47);
  }
  uint64_t v28 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
  *(_OWORD *)uint64_t v55 = *(_OWORD *)(WebCore::LocalFrameView::frame(v50) + 32);
  (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 96))(v60);
  uint64_t v29 = v61;
  uint64_t v30 = *(void *)(*((void *)this + 3) + 8);
  if (v30) {
    uint64_t v31 = v30 - 16;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(void *)(v31 + 40);
  uint64_t v33 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)uint64_t v33 = 2097;
  *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v32;
  *((void *)v33 + 66) = (char *)v33 + 16;
  *((void *)v33 + 67) = 512;
  *((void *)v33 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v33 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v33 + 69) = 0;
  IPC::Encoder::encodeHeader(v33);
  char v63 = v33;
  IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v33, (uint64_t *)v55);
  IPC::ArgumentCoder<WebCore::IntRect,void>::encode(v33, v57);
  int v34 = (void *)IPC::Encoder::grow(v33, 8uLL, 8);
  if (v35 <= 7)
  {
    __break(0xC471u);
    goto LABEL_47;
  }
  *int v34 = v29;
  IPC::ArgumentCoder<unsigned long,void>::encode<IPC::Encoder>(v33, v51);
  uint64_t v36 = 48 * v51;
  uint64_t v37 = v48;
  do
  {
    IPC::ArgumentCoder<WebKit::WebPopupItem,void>::encode(v33, v37);
    v37 += 48;
    v36 -= 48;
  }
  while (v36);
  uint64_t v38 = (_DWORD *)IPC::Encoder::grow(v33, 4uLL, 4);
  if (v39 <= 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1991E61B4);
  }
  *uint64_t v38 = v52;
  IPC::ArgumentCoder<WebKit::PlatformPopupMenuData,void>::encode(v33, (uint64_t)cf);
  IPC::Connection::sendMessageImpl(v28, (uint64_t *)&v63, 0, 0);
  uint64_t v41 = v63;
  char v63 = 0;
  if (v41)
  {
    IPC::Encoder::~Encoder(v41, v40);
    WTF::fastFree(v45, v46);
  }
  WebCore::PopupMenuStyle::~PopupMenuStyle((WebCore::PopupMenuStyle *)v60, (WTF::StringImpl *)v40);
  CFTypeRef v43 = cf[0];
  cf[0] = 0;
  if (v43) {
    CFRelease(v43);
  }
  return WTF::Vector<WebKit::WebPopupItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v58, v42);
}

uint64_t WebKit::WebPopupMenu::hide(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = this;
      if (*(void *)(this + 16))
      {
        {
          __int16 v14 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
          WebKit::WebProcess::WebProcess(v14);
        }
        uint64_t v4 = *(void *)(WebKit::WebProcess::singleton(void)::process + 40);
        uint64_t v5 = *(void *)(v2 + 24);
        uint64_t v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
        *(_WORD *)uint64_t v6 = 1989;
        *((void *)v6 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v5;
        *((void *)v6 + 66) = (char *)v6 + 16;
        *((void *)v6 + 67) = 512;
        *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
        *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
        *((void *)v6 + 69) = 0;
        IPC::Encoder::encodeHeader(v6);
        int v15 = v6;
        IPC::Connection::sendMessageImpl(v4, (uint64_t *)&v15, 0, 0);
        signed int v8 = v15;
        int v15 = 0;
        if (v8)
        {
          IPC::Encoder::~Encoder(v8, v7);
          WTF::fastFree(v12, v13);
        }
        uint64_t v9 = *(void *)(*(void *)(v3 + 24) + 8);
        if (v9) {
          uint64_t v10 = v9 - 16;
        }
        else {
          uint64_t v10 = 0;
        }
        char v11 = *(_DWORD **)(v10 + 576);
        *(void *)(v10 + 576) = 0;
        if (v11)
        {
          if (v11[2] == 1) {
            (*(void (**)(_DWORD *))(*(void *)v11 + 8))(v11);
          }
          else {
            --v11[2];
          }
        }
        return (*(uint64_t (**)(void))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16));
      }
    }
  }
  return this;
}

void WebKit::WebProgressTrackerClient::progressStarted(WebKit::WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  if (*(WebCore::LocalFrame **)(*((void *)a2 + 16) + 8) == a2)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3) {
        uint64_t v4 = v3 - 16;
      }
      else {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    *(unsigned char *)(v4 + 20++*(_DWORD *)(this + 24) = 0;
    IPC::MessageSender::send<Messages::WebPageProxy::DidStartProgress>(v4 + 32);
    uint64_t v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidStartProgress>(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::DidStartProgress>(a1, v2);
}

void WebKit::WebProgressTrackerClient::progressEstimateChanged(WebKit::WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  if (*(WebCore::LocalFrame **)(*((void *)a2 + 16) + 8) == a2)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3) {
        uint64_t v4 = v3 - 16;
      }
      else {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    double v5 = *(double *)(*(void *)(*(void *)(v4 + 48) + 128) + 128);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(v4 + 32) + 56))(v4 + 32);
    uint64_t v7 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v7 = 1900;
    *((void *)v7 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v6;
    *((void *)v7 + 66) = (char *)v7 + 16;
    *((void *)v7 + 67) = 512;
    *((void *)v7 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v7 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v7 + 69) = 0;
    IPC::Encoder::encodeHeader(v7);
    uint64_t v12 = v7;
    IPC::ArgumentCoder<double,void>::encode<IPC::Encoder>(v7, v5);
    (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v4 + 32) + 32))(v4 + 32, &v12, 0);
    uint64_t v9 = v12;
    uint64_t v12 = 0;
    if (v9)
    {
      IPC::Encoder::~Encoder(v9, v8);
      WTF::fastFree(v10, v11);
    }
    CFRelease(*(CFTypeRef *)(v4 + 8));
  }
}

void WebKit::WebProgressTrackerClient::progressFinished(WebKit::WebProgressTrackerClient *this, WebCore::LocalFrame *a2)
{
  if (*(WebCore::LocalFrame **)(*((void *)a2 + 16) + 8) == a2)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3) {
        uint64_t v4 = v3 - 16;
      }
      else {
        uint64_t v4 = 0;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    CFRetain(*(CFTypeRef *)(v4 + 8));
    *(unsigned char *)(v4 + 20++*(_DWORD *)(this + 24) = 1;
    (*(void (**)(void, uint64_t))(**(void **)(v4 + 360) + 80))(*(void *)(v4 + 360), v4);
    IPC::MessageSender::send<Messages::WebPageProxy::DidFinishProgress>(v4 + 32);
    double v5 = *(const void **)(v4 + 8);
    CFRelease(v5);
  }
}

IPC::Encoder **IPC::MessageSender::send<Messages::WebPageProxy::DidFinishProgress>(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);

  return IPC::MessageSender::send<Messages::WebPageProxy::DidFinishProgress>(a1, v2);
}

void WebKit::WebRemoteFrameClient::~WebRemoteFrameClient(WebKit::WebRemoteFrameClient *this)
{
}

{
  void *v2;
  uint64_t vars8;

  WebKit::WebFrameLoaderClient::~WebFrameLoaderClient((WebKit::WebRemoteFrameClient *)((char *)this + 8));

  WTF::fastFree(this, v2);
}

void non-virtual thunk to'WebKit::WebRemoteFrameClient::~WebRemoteFrameClient(WebKit::WebRemoteFrameClient *this)
{
  uint64_t v1 = (WebKit::WebRemoteFrameClient *)((char *)this - 8);
  WebKit::WebFrameLoaderClient::~WebFrameLoaderClient(this);

  WTF::fastFree(v1, v2);
}

unsigned int *WebKit::WebRemoteFrameClient::frameDetached(unsigned int *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      if (*(unsigned char *)(v2 + 144))
      {
        uint64_t v3 = (uint64_t)this;
        atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 1u);
        uint64_t v4 = WebCore::FrameTree::parent((WebCore::FrameTree *)(v2 + 48));
        if (v4)
        {
          uint64_t v6 = v4;
          uint64_t v7 = (unsigned int *)(v4 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v4 + 8), 1u);
          signed int v8 = *(unsigned int **)(v2 + 56);
          *(void *)(v2 + 56) = 0;
          if (v8 && atomic_fetch_add((atomic_uint *volatile)v8, 0xFFFFFFFF) == 1)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, v5);
          }
          WebCore::FrameTree::removeChild((WebCore::FrameTree *)(v6 + 48), (WebCore::Frame *)v2);
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v7);
        }
        WebKit::WebFrame::invalidate(*(WebKit::WebFrame **)(v3 + 16));
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v2 + 8));
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebRemoteFrameClient::sizeDidChange(uint64_t a1, uint64_t a2)
{
  return WebKit::WebFrame::updateRemoteFrameSize(*(IPC::Encoder **)(a1 + 16), a2);
}

uint64_t WebKit::WebRemoteFrameClient::postMessageToRemote(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v26[0] = a2;
  v26[1] = a3;
  v25[0] = a5;
  v25[1] = a6;
  uint64_t v8 = *(void *)(*(void *)(result + 16) + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 8);
        if (v11)
        {
          int v15 = *(void **)(*(void *)(v11 + 48) + 16);
          uint64_t result = (*(uint64_t (**)(void *))(*v15 + 1368))(v15);
          if ((result & 1) == 0)
          {
            uint64_t v16 = *(void *)(v15[2] + 8);
            if (v16)
            {
              v24[0] = v26;
              v24[1] = a4;
              void v24[2] = v25;
              uint64_t v24[3] = a7;
              void v24[4] = a8;
              uint64_t v18 = *(void *)(v16 + 16);
              uint64_t v17 = v16 + 16;
              uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
              unint64_t v20 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)unint64_t v20 = 2027;
              *((void *)v20 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v19;
              *((void *)v20 + 66) = (char *)v20 + 16;
              *((void *)v20 + 67) = 512;
              *((void *)v20 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v20 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v20 + 69) = 0;
              IPC::Encoder::encodeHeader(v20);
              int v27 = v20;
              IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::String const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,std::optional<WebCore::SecurityOriginData> const&,WebCore::MessageWithMessagePorts const&>,0ul,1ul,2ul,3ul,4ul>(v20, (uint64_t)v24);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v17 + 32))(v17, &v27, 0);
              uint64_t result = (uint64_t)v27;
              int v27 = 0;
              if (result)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)result, v21);
                return WTF::fastFree(v22, v23);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebRemoteFrameClient::changeLocation(uint64_t a1, WebCore::FrameLoadRequest *this)
{
  v22[83] = *MEMORY[0x1E4F143B8];
  WebCore::FrameLoadRequest::requester(this);
  WebCore::NavigationAction::NavigationAction();
  WebCore::ResourceResponseBase::ResourceResponseBase((WebCore::ResourceResponseBase *)v17);
  CFTypeRef cf = 0;
  char v20 = 0;
  char v18 = v18 & 0xF1 | 4;
  uint64_t v16 = 0;
  v14[0] = 0;
  char v15 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  CFRetain(*(CFTypeRef *)(v4 + 8));
  MEMORY[0x1997330C0](v12, this);
  double v5 = (void *)WTF::fastMalloc((WTF *)0x258);
  void *v5 = &unk_1EE9F77D0;
  v5[1] = v4;
  MEMORY[0x1997330C0](v5 + 2, v12);
  char v13 = v5;
  WebKit::WebFrameLoaderClient::dispatchDecidePolicyForNavigationAction(a1 + 8, (uint64_t)v21, (WebCore::ResourceRequestBase *)v22, (uint64_t)v17, 0, (_DWORD **)&v16, 0, 0, (uint64_t)v14, 0, 0, v11, 0, 0, 1u, (uint64_t *)&v13);
  uint64_t v6 = (uint64_t)v13;
  char v13 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  MEMORY[0x1997330E0](v12);
  if (v15) {
    MEMORY[0x199731400](v14);
  }
  uint64_t v8 = v16;
  uint64_t v16 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2) {
      WTF::StringImpl::destroy(v8, v7);
    }
    else {
      *(_DWORD *)v8 -= 2;
    }
  }
  CFTypeRef v9 = cf;
  CFTypeRef cf = 0;
  if (v9) {
    CFRelease(v9);
  }
  WebCore::ResourceResponseBase::~ResourceResponseBase((WebCore::ResourceResponseBase *)v17, v7);
  return MEMORY[0x199733430](v21);
}

void WebKit::WebRemoteFrameClient::dispatchDecidePolicyForNavigationAction(uint64_t a1, uint64_t a2, WebCore::ResourceRequestBase *a3, uint64_t a4, uint64_t a5, _DWORD **a6, uint64_t a7, char a8, uint64_t a9, char a10, char a11, int a12, __int16 a13, int a14, unsigned int a15, uint64_t *a16)
{
}

void WebKit::WebRemoteFrameClient::renderTreeAsText(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, WTF::StringImpl **a4@<X8>)
{
  __int16 v32 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v5
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (uint64_t v7 = *(void *)(v6 + 24)) != 0
    && (uint64_t v8 = *(void *)(v7 + 8)) != 0
    && (int v11 = *(void **)(*(void *)(v8 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v11 + 1368))(v11) & 1) == 0)
    && (uint64_t v12 = *(void *)(v11[2] + 8)) != 0)
  {
    CFRetain(*(CFTypeRef *)(v12 - 8));
    long long v27 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
    v28[0] = &v27;
    v28[1] = a2;
    void v28[2] = &v32;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v12 + 16) + 56))(v12 + 16);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(v12 + 16) + 48))(v12 + 16);
    if (!v14)
    {
      LOBYTE(v29) = 3;
      int v31 = 1;
LABEL_22:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      int v21 = 1;
      goto LABEL_23;
    }
    char v15 = (WTF::StringImpl *)v14;
    uint64_t v38 = 0;
    IPC::Connection::createSyncMessageEncoder(3768, v13, &v38, &v37);
    IPC::ArgumentCoder<std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,void>::encode<IPC::Encoder,std::tuple<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,unsigned long,WTF::OptionSet<WebCore::RenderAsTextFlag> const&>,0ul,1ul,2ul>(v37, (uint64_t)v28);
    IPC::Connection::sendSyncMessage((uint64_t)v15, v38, (uint64_t *)&v37, 0, (uint64_t)&v35, INFINITY);
    if (v36)
    {
      if (v36 == 1)
      {
        LOBYTE(v29) = (_BYTE)v35;
        int v16 = 1;
        int v31 = 1;
        int v17 = 1;
LABEL_19:
        ((void (*)(WTF::StringImpl **, IPC::Decoder **))off_1EE9F7690[v17])(&v33, &v35);
LABEL_20:
        char v20 = v37;
        uint64_t v37 = 0;
        if (v20)
        {
          IPC::Encoder::~Encoder(v20, v18);
          WTF::fastFree(v22, v23);
          if (v16) {
            goto LABEL_22;
          }
        }
        else if (v16)
        {
          goto LABEL_22;
        }
        uint64_t v30 = 0;
        if (v15)
        {
          int v24 = *(_DWORD *)v15;
          *(_DWORD *)v15 += 2;
          *a4 = v15;
          if (v24)
          {
            int v21 = 0;
            *(_DWORD *)char v15 = v24;
          }
          else
          {
            WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v18);
            int v21 = v31;
            if (v31 == -1) {
              goto LABEL_24;
            }
          }
        }
        else
        {
          int v21 = 0;
          *a4 = 0;
        }
LABEL_23:
        ((void (*)(void *, IPC::Decoder **))off_1EE9F7650[v21])(v28, &v29);
LABEL_24:
        CFRelease(*(CFTypeRef *)(v12 - 8));
        return;
      }
    }
    else
    {
      LOBYTE(v3WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
      char v34 = 0;
      IPC::Decoder::operator>><std::tuple<WTF::String>>(v35, (uint64_t *)&v33);
      if (!v34)
      {
        LOBYTE(v29) = 13;
        int v16 = 1;
        int v31 = 1;
        int v17 = v36;
        if (v36 == -1) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
      int v17 = v36;
      if (!v36)
      {
        int v16 = 0;
        uint64_t v19 = v35;
        unint64_t v35 = 0;
        char v15 = v33;
        uint64_t v29 = v19;
        uint64_t v30 = (uint64_t)v33;
        int v31 = 0;
        goto LABEL_19;
      }
    }
    uint64_t v25 = (WebKit::WebRemoteFrameClient *)std::__throw_bad_variant_access[abi:sn180100]();
    WebKit::WebRemoteFrameClient::unbindRemoteAccessibilityFrames(v25, v26);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  }
}

void WebKit::WebRemoteFrameClient::unbindRemoteAccessibilityFrames(WebKit::WebRemoteFrameClient *this)
{
  uint64_t v1 = *(void *)(*((void *)this + 2) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v5 + 1368))(v5) & 1) == 0)
          {
            uint64_t v6 = *(void *)(v5[2] + 8);
            if (v6)
            {
              CFRetain(*(CFTypeRef *)(v6 - 8));
              uint64_t v7 = *(const void **)(v6 - 8);
              CFRelease(v7);
            }
          }
        }
      }
    }
  }
}

void WebKit::WebRemoteFrameClient::updateRemoteFrameAccessibilityOffset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v17[0] = a2;
  v17[1] = a3;
  uint64_t v16 = a4;
  uint64_t v4 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(v5 + 24);
      if (v6)
      {
        uint64_t v7 = *(void *)(v6 + 8);
        if (v7)
        {
          uint64_t v8 = *(void **)(*(void *)(v7 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
          {
            uint64_t v9 = *(void *)(v8[2] + 8);
            if (v9)
            {
              CFRetain(*(CFTypeRef *)(v9 - 8));
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 16) + 56))(v9 + 16);
              int v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)int v11 = 2115;
              *((void *)v11 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
              *((void *)v11 + 66) = (char *)v11 + 16;
              *((void *)v11 + 67) = 512;
              *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v11 + 69) = 0;
              IPC::Encoder::encodeHeader(v11);
              char v18 = v11;
              IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, v17);
              IPC::ArgumentCoder<WebCore::IntPoint,void>::encode(v11, (int *)&v16);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)(v9 + 16) + 32))(v9 + 16, &v18, 0);
              uint64_t v13 = v18;
              char v18 = 0;
              if (v13)
              {
                IPC::Encoder::~Encoder(v13, v12);
                WTF::fastFree(v14, v15);
              }
              CFRelease(*(CFTypeRef *)(v9 - 8));
            }
          }
        }
      }
    }
  }
}

void WebKit::WebRemoteFrameClient::bindRemoteAccessibilityFrames(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  v45[0] = a3;
  v45[1] = a4;
  int v44 = a2;
  uint64_t v8 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(v8 + 8);
    if (v9)
    {
      uint64_t v10 = *(void *)(v9 + 24);
      if (v10)
      {
        uint64_t v11 = *(void *)(v10 + 8);
        if (v11)
        {
          uint64_t v13 = *(void **)(*(void *)(v11 + 48) + 16);
          if (((*(uint64_t (**)(void *))(*v13 + 1368))(v13) & 1) == 0)
          {
            uint64_t v14 = *(void *)(v13[2] + 8);
            if (v14)
            {
              CFRetain(*(CFTypeRef *)(v14 - 8));
              v36[0] = &v44;
              v36[1] = v45;
              v36[2] = a5;
              uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v14 + 16) + 56))(v14 + 16);
              uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(v14 + 16) + 48))(v14 + 16);
              if (!v16)
              {
                LOBYTE(v37) = 3;
                int v41 = 1;
LABEL_21:
                char v34 = 0;
                uint64_t v35 = 0;
                WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v34);
                int v17 = v34;
                if (v34)
                {
                  char v34 = 0;
                  LODWORD(v35) = 0;
                  goto LABEL_30;
                }
                int v26 = 1;
                goto LABEL_33;
              }
              int v17 = (WTF *)v16;
              uint64_t v53 = 0;
              IPC::Connection::createSyncMessageEncoder(3745, v15, &v53, &v52);
              IPC::ArgumentCoder<std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,void>::encode<IPC::Encoder,std::tuple<int const&,WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::FrameIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>> const&,WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>,0ul,1ul,2ul>(v52, (uint64_t)v36);
              IPC::Connection::sendSyncMessage((uint64_t)v17, v53, (uint64_t *)&v52, 0, (uint64_t)&v50, INFINITY);
              if (v51)
              {
                if (v51 == 1)
                {
                  LOBYTE(v37) = (_BYTE)v50;
                  int v18 = 1;
                  int v41 = 1;
                  int v19 = 1;
LABEL_18:
                  ((void (*)(WTF **, IPC::Decoder **))off_1EE9F7690[v19])(&v46, &v50);
LABEL_19:
                  int v24 = v52;
                  unsigned int v52 = 0;
                  if (v24)
                  {
                    IPC::Encoder::~Encoder(v24, v22);
                    WTF::fastFree(v27, v28);
                    if (v18) {
                      goto LABEL_21;
                    }
                  }
                  else if (v18)
                  {
                    goto LABEL_21;
                  }
                  uint64_t v38 = 0;
                  uint64_t v39 = 0;
                  int v31 = 0;
                  unsigned int v32 = 0;
                  unsigned int v33 = v6;
                  if (v6)
                  {
                    unsigned int v32 = v6;
                    int v31 = (WTF *)WTF::fastMalloc((WTF *)v6);
                    memcpy(v31, v17, v6);
                  }
                  WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v31);
                  uint64_t v29 = v31;
                  if (v31)
                  {
                    int v31 = 0;
                    unsigned int v32 = 0;
                    WTF::fastFree(v29, v25);
                  }
                  if (v17)
                  {
LABEL_30:
                    WTF::fastFree(v17, v25);
                    int v26 = v41;
                    if (v41 == -1) {
                      goto LABEL_34;
                    }
                    goto LABEL_33;
                  }
                  int v26 = 0;
LABEL_33:
                  ((void (*)(WTF **, IPC::Decoder **))off_1EE9F7660[v26])(&v46, &v37);
LABEL_34:
                  CFRelease(*(CFTypeRef *)(v14 - 8));
                  return;
                }
              }
              else
              {
                LOBYTE(v46) = 0;
                char v49 = 0;
                IPC::Decoder::operator>><std::tuple<WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int>>(v50, (uint64_t)&v46);
                if (!v49)
                {
                  LOBYTE(v37) = 13;
                  int v18 = 1;
                  int v41 = 1;
                  int v19 = v51;
                  if (v51 == -1) {
                    goto LABEL_19;
                  }
                  goto LABEL_18;
                }
                int v19 = v51;
                if (!v51)
                {
                  int v18 = 0;
                  unint64_t v23 = v50;
                  uint64_t v50 = 0;
                  int v17 = v46;
                  unsigned int v6 = HIDWORD(v47);
                  uint64_t v37 = v23;
                  uint64_t v38 = v46;
                  uint64_t v39 = v47;
                  int v40 = v48;
                  int v41 = 0;
                  goto LABEL_18;
                }
              }
              uint64_t v30 = (WebKit::WebRemoteFrameClient *)std::__throw_bad_variant_access[abi:sn180100]();
              WebKit::WebRemoteFrameClient::closePage(v30);
              return;
            }
          }
        }
      }
    }
  }
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  WTF::CompletionHandler<void ()(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,int)>::operator()(a6, (uint64_t)&v42);
  int v21 = v42;
  if (v42)
  {
    uint64_t v42 = 0;
    LODWORD(v4WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
    WTF::fastFree(v21, v20);
  }
}

uint64_t WebKit::WebRemoteFrameClient::closePage(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 16) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(void *))(*v5 + 1368))(v5);
          if ((this & 1) == 0)
          {
            uint64_t v6 = *(void *)(v5[2] + 8);
            if (v6)
            {
              return (uint64_t)WebKit::WebPage::sendClose((WebKit::WebPage *)(v6 - 16));
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebRemoteFrameClient::focus(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 16) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = this;
          uint64_t v6 = *(void **)(*(void *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(void *))(*v6 + 1368))(v6);
          if ((this & 1) == 0)
          {
            uint64_t v7 = *(void *)(v6[2] + 8);
            if (v7)
            {
              *(_OWORD *)uint64_t v15 = *(_OWORD *)(*(void *)(v5 + 16) + 80);
              uint64_t v9 = *(void *)(v7 + 16);
              uint64_t v8 = v7 + 16;
              uint64_t v10 = (*(uint64_t (**)(uint64_t))(v9 + 56))(v8);
              uint64_t v11 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v11 = 1972;
              *((void *)v11 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v10;
              *((void *)v11 + 66) = (char *)v11 + 16;
              *((void *)v11 + 67) = 512;
              *((void *)v11 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v11 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v11 + 69) = 0;
              IPC::Encoder::encodeHeader(v11);
              uint64_t v16 = v11;
              IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v11, v15);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v8 + 32))(v8, &v16, 0);
              this = (uint64_t)v16;
              uint64_t v16 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v12);
                return WTF::fastFree(v13, v14);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebRemoteFrameClient::unfocus(uint64_t this)
{
  uint64_t v1 = *(void *)(*(void *)(this + 16) + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 24);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 8);
        if (v4)
        {
          uint64_t v5 = *(void **)(*(void *)(v4 + 48) + 16);
          this = (*(uint64_t (**)(void *))(*v5 + 1368))(v5);
          if ((this & 1) == 0)
          {
            uint64_t v6 = *(void *)(v5[2] + 8);
            if (v6)
            {
              char v14 = 0;
              uint64_t v8 = *(void *)(v6 + 16);
              uint64_t v7 = v6 + 16;
              uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 56))(v7);
              uint64_t v10 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
              *(_WORD *)uint64_t v10 = 2069;
              *((void *)v10 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v9;
              *((void *)v10 + 66) = (char *)v10 + 16;
              *((void *)v10 + 67) = 512;
              *((void *)v10 + 6++*(_DWORD *)(this + 8) = 0;
              *((void *)v10 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
              *((void *)v10 + 69) = 0;
              IPC::Encoder::encodeHeader(v10);
              uint64_t v15 = v10;
              IPC::ArgumentCoder<std::tuple<BOOL>,void>::encode<IPC::Encoder,std::tuple<BOOL>,0ul>(v10, &v14);
              (*(void (**)(uint64_t, IPC::Encoder **, void))(*(void *)v7 + 32))(v7, &v15, 0);
              this = (uint64_t)v15;
              uint64_t v15 = 0;
              if (this)
              {
                IPC::Encoder::~Encoder((IPC::Encoder *)this, v11);
                return WTF::fastFree(v12, v13);
              }
            }
          }
        }
      }
    }
  }
  return this;
}

IPC::Encoder *WebKit::WebRemoteFrameClient::documentURLForConsoleLog(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 24);
  if (v3
    && (uint64_t v4 = *(void *)(v3 + 8)) != 0
    && (uint64_t v5 = *(void *)(v4 + 24)) != 0
    && (uint64_t v6 = *(void *)(v5 + 8)) != 0
    && (uint64_t v8 = *(void **)(*(void *)(v6 + 48) + 16),
        ((*(uint64_t (**)(void *))(*v8 + 1368))(v8) & 1) == 0)
    && (uint64_t v9 = *(void *)(v8[2] + 8)) != 0)
  {
    *(_OWORD *)int v24 = *(_OWORD *)(*(void *)(a1 + 16) + 80);
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v10 = v9 + 16;
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(v11 + 56))(v10);
    uint64_t v13 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
    *(_WORD *)uint64_t v13 = 1960;
    *((void *)v13 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v12;
    *((void *)v13 + 66) = (char *)v13 + 16;
    *((void *)v13 + 67) = 512;
    *((void *)v13 + 6++*(_DWORD *)(this + 8) = 0;
    *((void *)v13 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
    *((void *)v13 + 69) = 0;
    IPC::Encoder::encodeHeader(v13);
    uint64_t v25 = v13;
    IPC::ArgumentCoder<WebCore::ProcessQualified<WTF::ObjectIdentifierGeneric<WebCore::BackForwardItemIdentifierType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>>,void>::encode(v13, v24);
    uint64_t v14 = *a2;
    *a2 = 0;
    uint64_t v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(void *)uint64_t v15 = &unk_1EE9F77F8;
    *((void *)v15 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v14;
    v23[0] = v15;
    v23[1] = (WTF::StringImpl *)WTF::ObjectIdentifierGeneric<IPC::AsyncReplyIDType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long,(WTF::SupportsObjectIdentifierNullState)1>::generate();
    (*(void (**)(uint64_t, IPC::Encoder **, WTF::StringImpl **, void))(*(void *)v10 + 40))(v10, &v25, v23, 0);
    int v17 = v23[0];
    v23[0] = 0;
    if (v17) {
      (*(void (**)(WTF::StringImpl *))(*(void *)v17 + 8))(v17);
    }
    uint64_t result = v25;
    uint64_t v25 = 0;
    if (result)
    {
      IPC::Encoder::~Encoder(result, v16);
      return (IPC::Encoder *)WTF::fastFree(v19, v20);
    }
  }
  else
  {
    v23[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v23);
    uint64_t v21 = *a2;
    *a2 = 0;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(void *)v21 + 16))(v21, v23);
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t result = v23[0];
    v23[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (IPC::Encoder *)WTF::StringImpl::destroy(result, v22);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebRemoteFrameClient::applyWebsitePolicies(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*((void *)result + 2) + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    if (v3)
    {
      if (*(unsigned char *)(v3 + 144))
      {
        atomic_fetch_add((atomic_uint *volatile)(v3 + 8), 1u);
        WTF::String::operator=((uint64_t *)(v3 + 280), (WTF::StringImpl **)(a2 + 40));
        WTF::String::operator=((uint64_t *)(v3 + 288), (WTF::StringImpl **)(a2 + 48));
        *(_WORD *)(v3 + 304) = *(_WORD *)(a2 + 72);
        WTF::String::operator=((uint64_t *)(v3 + 296), (WTF::StringImpl **)(a2 + 56));
        return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref((unsigned int *)(v3 + 8));
      }
    }
  }
  return result;
}

unsigned int *non-virtual thunk to'WebKit::WebRemoteFrameClient::applyWebsitePolicies(uint64_t a1, uint64_t a2)
{
  return WebKit::WebRemoteFrameClient::applyWebsitePolicies((unsigned int *)(a1 - 8), a2);
}

void WebKit::WebResourceLoadObserver::~WebResourceLoadObserver(WebKit::WebResourceLoadObserver *this, WTF::StringImpl *a2)
{
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    if (*(_DWORD *)(v3 - 12))
    {
      uint64_t v10 = (void *)WTF::fastMalloc((WTF *)0x10);
      void *v10 = &unk_1EE9F7870;
      uint64_t v11 = v10;
      WebKit::WebResourceLoadObserver::updateCentralStatisticsStore(this, (uint64_t *)&v11);
      if (v11) {
        (*(void (**)(void *))(*v11 + 8))(v11);
      }
    }
  }
  uint64_t v4 = *((void *)this + 12);
  if (v4) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::HashSet<WebCore::RegistrableDomain,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTableTraits>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v4, a2);
  }
  uint64_t v5 = (WTF::StringImpl **)*((void *)this + 11);
  if (v5) {
    WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::deallocateTable(v5, a2);
  }
  *((void *)this + 4) = &unk_1EE9BA5F0;
  uint64_t v6 = *((void *)this + 10);
  *((void *)this + 1IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  WebCore::TimerBase::~TimerBase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
  uint64_t v8 = (WTF::StringImpl **)*((void *)this + 3);
  if (v8) {
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v8, v7);
  }
  uint64_t v9 = *((void *)this + 2);
  if (v9) {
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v9, v7);
  }
}

{
  WTF *v2;
  void *v3;
  uint64_t vars8;

  WebKit::WebResourceLoadObserver::~WebResourceLoadObserver(this, a2);

  WTF::fastFree(v2, v3);
}

BOOL WebKit::WebResourceLoadObserver::hasStatistics(WebKit::WebResourceLoadObserver *this)
{
  uint64_t v1 = *((void *)this + 2);
  return v1 && *(_DWORD *)(v1 - 12) != 0;
}

atomic_uchar *volatile **WebKit::WebResourceLoadObserver::updateCentralStatisticsStore(void *a1, uint64_t *a2)
{
  uint64_t v3 = (uint64_t)a1;
  if ((a1[8] & 0xFFFFFFFFFFFFLL) != 0) {
    a1 = (void *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(a1 + 4));
  }
  uint64_t v4 = (WebKit::WebProcess *)WebKit::WebProcess::singleton((WebKit::WebProcess *)a1);
  uint64_t v5 = WebKit::WebProcess::ensureNetworkProcessConnection(v4);
  WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref(&v12, *(atomic_uchar *volatile **)(v5 + 24));
  uint64_t v6 = (os_unfair_lock_s *)v12;
  WebKit::WebResourceLoadObserver::takeStatistics((WebKit::WebResourceLoadObserver *)v10, v3, v7);
  uint64_t v11 = v10;
  IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(v6, (uint64_t *)&v11, a2);
  WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v10, v8);
  return WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref(&v12);
}

WTF *WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(WebKit::WebResourceLoadObserver *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v3 = (uint64_t *)((char *)this + 16);
    uint64_t v4 = *((void *)this + 2);
    if (v4
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)this + 2, 0), (uint64_t v4 = *v3) != 0))
    {
      int v5 = *(_DWORD *)(v4 - 8);
    }
    else
    {
      int v5 = 0;
    }
    unsigned int v6 = WTF::ASCIICaseInsensitiveHash::hash(*a2, (const WTF::StringImpl *)a2) & v5;
    uint64_t v7 = (WTF **)(v4 + 16 * v6);
    if ((WTF::equal(*v7, 0, v8) & 1) == 0)
    {
      uint64_t v10 = 0;
      int v11 = 1;
      do
      {
        if (*v7 == (WTF *)-1)
        {
          uint64_t v10 = v7;
        }
        else if (WTF::equalIgnoringASCIICase(*v7, *a2, v9))
        {
          return v7[1];
        }
        unsigned int v6 = (v6 + v11) & v5;
        uint64_t v7 = (WTF **)(v4 + 16 * v6);
        ++v11;
      }
      while (!WTF::equal(*v7, 0, v9));
      if (v10)
      {
        void *v10 = 0;
        v10[1] = 0;
        --*(_DWORD *)(*v3 - 16);
        uint64_t v7 = v10;
      }
    }
    WTF::String::operator=((uint64_t *)v7, a2);
    uint64_t v12 = WTF::fastMalloc((WTF *)0xC8);
    uint64_t v13 = *a2;
    if (*a2) {
      *(_DWORD *)v13 += 2;
    }
    *(void *)uint64_t v12 = v13;
    *(void *)(v12 + ++*(_DWORD *)(this + 8) = 0;
    *(unsigned char *)(v12 + 16) = 0;
    *(void *)(v12 + ++*(_DWORD *)(this + 24) = 0xBFF0000000000000;
    *(unsigned char *)(v12 + ++*(_DWORD *)(this + 32) = 0;
    *(_OWORD *)(v12 + 4IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(_OWORD *)(v12 + 65) = 0u;
    *(_OWORD *)(v12 + 8++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v12 + 104) = 0u;
    *(_OWORD *)(v12 + 114) = 0u;
    *(_OWORD *)(v12 + 1++*(_DWORD *)(this + 32) = 0u;
    *(_OWORD *)(v12 + 14++*(_DWORD *)(this + 8) = 0u;
    *(_OWORD *)(v12 + 16WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0u;
    *(void *)(v12 + 184) = 0;
    *(void *)(v12 + 19WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
    std::unique_ptr<WebCore::ResourceLoadStatistics>::reset[abi:sn180100](v7 + 1, (WTF::StringImpl *)v12);
    uint64_t v14 = *v3;
    if (*v3) {
      int v15 = *(_DWORD *)(v14 - 12) + 1;
    }
    else {
      int v15 = 1;
    }
    *(_DWORD *)(v14 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v15;
    uint64_t v16 = *v3;
    if (*v3) {
      int v17 = *(_DWORD *)(v16 - 12);
    }
    else {
      int v17 = 0;
    }
    uint64_t v18 = (*(_DWORD *)(v16 - 16) + v17);
    unint64_t v19 = *(unsigned int *)(v16 - 4);
    if (v19 > 0x400)
    {
      if (v19 > 2 * v18) {
        return v7[1];
      }
    }
    else if (3 * v19 > 4 * v18)
    {
      return v7[1];
    }
    uint64_t v7 = (WTF **)WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v3, v7);
    return v7[1];
  }
  uint64_t result = (WTF *)93;
  __break(0xC471u);
  return result;
}

double WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(WebKit::WebResourceLoadObserver *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1 && *(_DWORD *)(v1 - 12))
  {
    if ((*((void *)this + 8) & 0xFFFFFFFFFFFFLL) == 0
      || (double result = *(double *)((*((void *)this + 8) & 0xFFFFFFFFFFFFLL) + 8), result == 0.0))
    {
      WebCore::TimerBase::start();
    }
  }
  else if ((*((void *)this + 8) & 0xFFFFFFFFFFFFLL) != 0)
  {
    WebCore::TimerBase::stopSlowCase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
  }
  return result;
}

IPC::Encoder **IPC::Connection::sendWithAsyncReply<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(os_unfair_lock_s *a1, uint64_t *a2, uint64_t *a3)
{
  IPC::Connection::makeAsyncReplyHandler<Messages::NetworkConnectionToWebProcess::ResourceLoadStatisticsUpdated,WTF::CompletionHandler<void ()(void)>>(v12, a3);
  uint64_t v5 = v12[1];
  unsigned int v6 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
  *(_WORD *)unsigned int v6 = 276;
  *((void *)v6 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  *((void *)v6 + 66) = (char *)v6 + 16;
  *((void *)v6 + 67) = 512;
  *((void *)v6 + 6++*(_DWORD *)(this + 8) = 0;
  *((void *)v6 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
  *((void *)v6 + 69) = 0;
  IPC::Encoder::encodeHeader(v6);
  int v11 = v6;
  IPC::VectorArgumentCoder<false,WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul>::encode<IPC::Encoder,WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&>(v6, *a2);
  v10[0] = v12[0];
  v10[1] = v5;
  IPC::Connection::sendMessageWithAsyncReply(a1, &v11, v10, 0, 0);
  uint64_t v8 = v10[0];
  v10[0] = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return std::unique_ptr<IPC::Encoder>::~unique_ptr[abi:sn180100](&v11, v7);
}

uint64_t WebKit::WebResourceLoadObserver::takeStatistics(WebKit::WebResourceLoadObserver *this, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v3 = v6;
  *(void *)(a2 + 16) = 0;
  *(void *)this = 0;
  *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
  uint64_t result = WTF::Mapper<WebKit::WebResourceLoadObserver::takeStatistics(void)::$_0,WTF::Vector<WebCore::ResourceLoadStatistics,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>,void>::map((uint64_t)this, &v6, a3);
  if (v3)
  {
    return WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, v5);
  }
  return result;
}

WTF::StringImpl *WebKit::WebResourceLoadObserver::statisticsForURL@<X0>(WebKit::WebResourceLoadObserver *this@<X0>, const WTF::URL *a2@<X1>, void *a3@<X8>)
{
  WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v22, a2);
  uint64_t v7 = *((void *)this + 2);
  if (v7)
  {
    unsigned int v8 = *(_DWORD *)(v7 - 8);
    uint64_t v9 = WTF::ASCIICaseInsensitiveHash::hash(v22, v6) & v8;
    uint64_t v10 = (WTF **)(v7 + 16 * v9);
    uint64_t v13 = 0;
    if ((WTF::equal(*v10, 0, v11) & 1) == 0)
    {
      int v14 = 1;
      while (*v10 == (WTF *)-1 || (WTF::equalIgnoringASCIICase(*v10, v22, v12) & 1) == 0)
      {
        uint64_t v9 = (v9 + v14) & v8;
        uint64_t v10 = (WTF **)(v7 + 16 * v9);
        ++v14;
        if (WTF::equal(*v10, 0, v12)) {
          goto LABEL_7;
        }
      }
      uint64_t v13 = *(WebCore::ResourceLoadStatistics **)(v7 + 16 * v9 + 8);
    }
  }
  else
  {
LABEL_7:
    uint64_t v13 = 0;
  }
  uint64_t result = v22;
  unsigned int v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      uint64_t result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      if (v13) {
        goto LABEL_12;
      }
      goto LABEL_18;
    }
    *(_DWORD *)result -= 2;
  }
  if (v13)
  {
LABEL_12:
    WTF::URL::host(a2);
    if ((v16 & 0xFF00000000) != 0) {
      WTF::String::String();
    }
    else {
      WTF::String::String();
    }
    WebCore::ResourceLoadStatistics::toString((uint64_t *)&v20, v13);
    WTF::makeString<WTF::ASCIILiteral,WTF::String,WTF::ASCIILiteral,WTF::String>((uint64_t)"Statistics for ", 16, (uint64_t *)&v21, (uint64_t)":\n", 3, (uint64_t *)&v20, a3);
    uint64_t v18 = v20;
    char v20 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2) {
        WTF::StringImpl::destroy(v18, v17);
      }
      else {
        *(_DWORD *)v18 -= 2;
      }
    }
    uint64_t result = v21;
    uint64_t v21 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2) {
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
      }
      else {
        *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
LABEL_18:
  unint64_t v19 = (_DWORD *)*MEMORY[0x1E4F30980];
  if (*MEMORY[0x1E4F30980]) {
    *v19 += 2;
  }
  *a3 = v19;
  return result;
}

WTF::StringImpl **WebKit::WebResourceLoadObserver::clearState(WebKit::WebResourceLoadObserver *this, WTF::StringImpl *a2)
{
  if ((*((void *)this + 8) & 0xFFFFFFFFFFFFLL) != 0) {
    WebCore::TimerBase::stopSlowCase((WebKit::WebResourceLoadObserver *)((char *)this + 32));
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3)
  {
    *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = 0;
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,std::unique_ptr<WebCore::ResourceLoadStatistics>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<std::unique_ptr<WebCore::ResourceLoadStatistics>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::deallocateTable(v3, a2);
  }
  uint64_t result = (WTF::StringImpl **)*((void *)this + 3);
  if (result)
  {
    *((void *)this + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = 0;
    return (WTF::StringImpl **)WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,Inspector::SupplementalBackendDispatcher *>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,Inspector::SupplementalBackendDispatcher *,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<Inspector::SupplementalBackendDispatcher *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(result, a2);
  }
  return result;
}

uint64_t WebKit::WebResourceLoadObserver::hasHadUserInteraction(WebKit::WebResourceLoadObserver *this, WTF::ASCIICaseInsensitiveHash **a2)
{
  return WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::contains<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::RegistrableDomain>,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 11, a2);
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logFontLoad(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2, WTF::StringImpl **a3, char a4)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v4 = *((void *)a2 + 68);
    if (v4)
    {
      uint64_t v5 = *(void *)(v4 + 8);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 24);
        if (v6)
        {
          uint64_t v7 = *(_DWORD **)(v6 + 8);
          if (v7)
          {
            uint64_t v10 = this;
            ++*v7;
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v22, (const WebCore::Document *)((char *)a2 + 768));
            int v11 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v10, &v22);
            uint64_t v13 = v11;
            if (a4) {
              int v14 = (uint64_t *)((char *)v11 + 160);
            }
            else {
              int v14 = (uint64_t *)((char *)v11 + 152);
            }
            WTF::HashTable<WTF::String,WTF::String,WTF::IdentityExtractor,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::String>>::add(v14, a3, v12, (uint64_t)v20);
            int v15 = v21;
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v19, (const WTF::URL *)(v7 + 42));
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v13 + 18, &v19, (uint64_t)v20);
            if (v21 | v15) {
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v10);
            }
            int v17 = v19;
            unint64_t v19 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2) {
                WTF::StringImpl::destroy(v17, v16);
              }
              else {
                *(_DWORD *)v17 -= 2;
              }
            }
            uint64_t v18 = v22;
            unsigned int v22 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2) {
                WTF::StringImpl::destroy(v18, v16);
              }
              else {
                *(_DWORD *)v18 -= 2;
              }
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v7);
          }
        }
      }
    }
  }
  return this;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logCanvasRead(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v2 = *((void *)a2 + 68);
    if (v2)
    {
      uint64_t v3 = *(void *)(v2 + 8);
      if (v3)
      {
        uint64_t v4 = *(void *)(v3 + 24);
        if (v4)
        {
          uint64_t v5 = *(_DWORD **)(v4 + 8);
          if (v5)
          {
            uint64_t v6 = this;
            ++*v5;
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v13, (const WebCore::Document *)((char *)a2 + 768));
            uint64_t v7 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v6, &v13);
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v12, (const WTF::URL *)(v5 + 42));
            *((unsigned char *)v7 + 176) = 1;
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v7 + 18, &v12, (uint64_t)v11);
            if (v11[16]) {
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v6);
            }
            uint64_t v9 = v12;
            uint64_t v12 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2) {
                WTF::StringImpl::destroy(v9, v8);
              }
              else {
                *(_DWORD *)v9 -= 2;
              }
            }
            uint64_t v10 = v13;
            uint64_t v13 = 0;
            if (v10)
            {
              if (*(_DWORD *)v10 == 2) {
                WTF::StringImpl::destroy(v10, v8);
              }
              else {
                *(_DWORD *)v10 -= 2;
              }
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v5);
          }
        }
      }
    }
  }
  return this;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logCanvasWriteOrMeasure(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2, const WTF::String *a3)
{
  if (!*((unsigned char *)this + 8))
  {
    uint64_t v3 = *((void *)a2 + 68);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          uint64_t v6 = *(_DWORD **)(v5 + 8);
          if (v6)
          {
            unsigned int v8 = this;
            ++*v6;
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v16, (const WebCore::Document *)((char *)a2 + 768));
            uint64_t v9 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v8, &v16);
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v15, (const WTF::URL *)(v6 + 42));
            int v10 = WebCore::CanvasActivityRecord::recordWrittenOrMeasuredText((WTF *)((char *)v9 + 168), a3);
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v9 + 18, &v15, (uint64_t)v14);
            if (v14[16] || v10) {
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v8);
            }
            uint64_t v12 = v15;
            int v15 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2) {
                WTF::StringImpl::destroy(v12, v11);
              }
              else {
                *(_DWORD *)v12 -= 2;
              }
            }
            uint64_t v13 = v16;
            uint64_t v16 = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2) {
                WTF::StringImpl::destroy(v13, v11);
              }
              else {
                *(_DWORD *)v13 -= 2;
              }
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v6);
          }
        }
      }
    }
  }
  return this;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logNavigatorAPIAccessed(WebKit::WebResourceLoadObserver *result, uint64_t a2, uint64_t a3)
{
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v3 = *(void *)(a2 + 544);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          uint64_t v6 = *(_DWORD **)(v5 + 8);
          if (v6)
          {
            unsigned int v8 = result;
            ++*v6;
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v18, (const WTF::URL *)(a2 + 768));
            uint64_t v9 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v8, &v18);
            int v10 = v9;
            uint64_t v11 = *((void *)v9 + 23);
            uint64_t v12 = v11 & a3;
            if ((v11 & a3) == 0) {
              *((void *)v9 + 2WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v11 | a3;
            }
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, (const WTF::URL *)(v6 + 42));
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v10 + 18, &v17, (uint64_t)v16);
            if (!v12 || v16[16]) {
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v8);
            }
            int v14 = v17;
            int v17 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                WTF::StringImpl::destroy(v14, v13);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
            int v15 = v18;
            uint64_t v18 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2) {
                WTF::StringImpl::destroy(v15, v13);
              }
              else {
                *(_DWORD *)v15 -= 2;
              }
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v6);
          }
        }
      }
    }
  }
  return result;
}

WebKit::WebResourceLoadObserver *WebKit::WebResourceLoadObserver::logScreenAPIAccessed(WebKit::WebResourceLoadObserver *result, uint64_t a2, uint64_t a3)
{
  if (!*((unsigned char *)result + 8))
  {
    uint64_t v3 = *(void *)(a2 + 544);
    if (v3)
    {
      uint64_t v4 = *(void *)(v3 + 8);
      if (v4)
      {
        uint64_t v5 = *(void *)(v4 + 24);
        if (v5)
        {
          uint64_t v6 = *(_DWORD **)(v5 + 8);
          if (v6)
          {
            unsigned int v8 = result;
            ++*v6;
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v18, (const WTF::URL *)(a2 + 768));
            uint64_t v9 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v8, &v18);
            int v10 = v9;
            uint64_t v11 = *((void *)v9 + 24);
            uint64_t v12 = v11 & a3;
            if ((v11 & a3) == 0) {
              *((void *)v9 + ++*(_DWORD *)(this + 24) = v11 | a3;
            }
            WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v17, (const WTF::URL *)(v6 + 42));
            WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v10 + 18, &v17, (uint64_t)v16);
            if (!v12 || v16[16]) {
              WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v8);
            }
            int v14 = v17;
            int v17 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2) {
                WTF::StringImpl::destroy(v14, v13);
              }
              else {
                *(_DWORD *)v14 -= 2;
              }
            }
            int v15 = v18;
            uint64_t v18 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 2) {
                WTF::StringImpl::destroy(v15, v13);
              }
              else {
                *(_DWORD *)v15 -= 2;
              }
            }
            return (WebKit::WebResourceLoadObserver *)WTF::RefCounted<WebCore::Page>::deref(v6);
          }
        }
      }
    }
  }
  return result;
}

unsigned int *WebKit::WebResourceLoadObserver::logSubresourceLoading(unsigned int *result, uint64_t a2, WebCore::ResourceRequestBase *a3, WebCore::ResourceResponseBase *this, int a5)
{
  if (a2)
  {
    uint64_t v5 = (WebKit::WebResourceLoadObserver *)result;
    if (!*((unsigned char *)result + 8))
    {
      uint64_t v7 = *(void *)(a2 + 24);
      if (v7)
      {
        if (*(void *)(v7 + 8))
        {
          BOOL v11 = (int)WebCore::ResourceResponseBase::httpStatusCode(this) >= 300
             && (int)WebCore::ResourceResponseBase::httpStatusCode(this) < 400;
          uint64_t v12 = (const WTF::URL *)WebCore::ResourceResponseBase::url(this);
          uint64_t result = (unsigned int *)WebCore::ResourceRequestBase::url(a3);
          uint64_t v13 = *(void *)(*(void *)(a2 + 128) + 8);
          if (v13)
          {
            if (!*(unsigned char *)(v13 + 144))
            {
              int v14 = (const WTF::URL *)result;
              int v15 = (unsigned int *)(v13 + 8);
              atomic_fetch_add((atomic_uint *volatile)(v13 + 8), 1u);
              uint64_t v16 = *(void *)(v13 + 296);
              int v17 = *(WTF::StringImpl **)(v16 + 768);
              if (v17) {
                *(_DWORD *)v17 += 2;
              }
              uint64_t v42 = v17;
              uint64_t v18 = v16 + 768;
              long long v19 = *(_OWORD *)(v18 + 24);
              long long v43 = *(_OWORD *)(v18 + 8);
              long long v44 = v19;
              char v20 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)result);
              uint64_t v22 = v21;
              unint64_t v23 = (unsigned __int8 *)WTF::URL::host((WTF::URL *)&v42);
              if (v22)
              {
                if (!WTF::operator==(v20, v22, v23, (uint64_t)v24))
                {
                  if (!v11 || (int v26 = (unsigned __int8 *)WTF::URL::host(v12), !WTF::operator==(v20, v22, v26, v27)))
                  {
                    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v41, v14);
                    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v40, (const WTF::URL *)&v42);
                    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v39, v12);
                    if ((WTF::equal(v41, v40, v28) & 1) == 0 && (!v11 || (WTF::equal(v41, v39, v29) & 1) == 0))
                    {
                      unsigned int v33 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v41);
                      WTF::WallTime::now(v33);
                      WebCore::ResourceLoadStatistics::reduceTimeResolution();
                      *((void *)v33 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v34;
                      WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v33 + 13, &v40, (uint64_t)v38);
                      WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
                      if (*(void *)(*(void *)(a2 + 128) + 8) == a2 && a5)
                      {
                        uint64_t v35 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v40);
                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v35 + 11, &v41, (uint64_t)v38);
                        WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
                      }
                      if (v11)
                      {
                        int v36 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v39);
                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v36 + 14, &v41, (uint64_t)v38);
                        uint64_t v37 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v41);
                        WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v37 + 15, &v39, (uint64_t)v38);
                        WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
                      }
                    }
                    uint64_t v30 = v39;
                    uint64_t v39 = 0;
                    if (v30)
                    {
                      if (*(_DWORD *)v30 == 2) {
                        WTF::StringImpl::destroy(v30, v24);
                      }
                      else {
                        *(_DWORD *)v30 -= 2;
                      }
                    }
                    int v31 = v40;
                    int v40 = 0;
                    if (v31)
                    {
                      if (*(_DWORD *)v31 == 2) {
                        WTF::StringImpl::destroy(v31, v24);
                      }
                      else {
                        *(_DWORD *)v31 -= 2;
                      }
                    }
                    unsigned int v32 = v41;
                    int v41 = 0;
                    if (v32)
                    {
                      if (*(_DWORD *)v32 == 2) {
                        WTF::StringImpl::destroy(v32, v24);
                      }
                      else {
                        *(_DWORD *)v32 -= 2;
                      }
                    }
                  }
                }
              }
              uint64_t v25 = v42;
              uint64_t v42 = 0;
              if (v25)
              {
                if (*(_DWORD *)v25 == 2) {
                  WTF::StringImpl::destroy(v25, v24);
                }
                else {
                  *(_DWORD *)v25 -= 2;
                }
              }
              return WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v15);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebKit::WebResourceLoadObserver::logWebSocketLoading(uint64_t this, const WTF::URL *a2, const WTF::URL *a3)
{
  if (!*(unsigned char *)(this + 8))
  {
    uint64_t v5 = (WebKit::WebResourceLoadObserver *)this;
    uint64_t v6 = (unsigned __int8 *)WTF::URL::host(a2);
    uint64_t v8 = v7;
    this = WTF::URL::host(a3);
    if (v8)
    {
      this = WTF::operator==(v6, v8, (unsigned __int8 *)this, v9);
      if ((this & 1) == 0)
      {
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v19, a2);
        WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v18, a3);
        BOOL v11 = (WTF::WallTime *)WTF::equal(v19, v18, v10);
        if ((v11 & 1) == 0)
        {
          WTF::WallTime::now(v11);
          WebCore::ResourceLoadStatistics::reduceTimeResolution();
          uint64_t v14 = v13;
          int v15 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v5, &v19);
          *((void *)v15 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v14;
          WTF::HashTable<WebCore::RegistrableDomain,WebCore::RegistrableDomain,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>>::add((uint64_t *)v15 + 13, &v18, (uint64_t)v17);
          WebKit::WebResourceLoadObserver::scheduleNotificationIfNeeded(v5);
        }
        uint64_t v16 = v18;
        uint64_t v18 = 0;
        if (v16)
        {
          if (*(_DWORD *)v16 == 2) {
            WTF::StringImpl::destroy(v16, v12);
          }
          else {
            *(_DWORD *)v16 -= 2;
          }
        }
        this = (uint64_t)v19;
        long long v19 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2) {
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v12);
          }
          else {
            *(_DWORD *)this -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebKit::WebResourceLoadObserver::logUserInteractionWithReducedTimeResolution(WebKit::WebResourceLoadObserver *this, const WebCore::Document *a2)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (const WebCore::Document *)((char *)a2 + 768);
  uint64_t result = WTF::URL::protocolIs();
  if (result) {
    return result;
  }
  uint64_t result = WTF::URL::protocolIs();
  if ((result & 1) != 0 || !*(void *)v4 || !*(_DWORD *)(*(void *)v4 + 4)) {
    return result;
  }
  uint64_t v6 = WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v79, v4);
  WTF::WallTime::now(v6);
  WebCore::ResourceLoadStatistics::reduceTimeResolution();
  double v8 = v7;
  uint64_t v9 = (uint64_t *)((char *)this + 24);
  if (v7 != WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::get<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::RegistrableDomain>>,WebCore::RegistrableDomain>((uint64_t *)this + 3, &v79))
  {
    uint64_t v11 = *v9;
    char v78 = this;
    if (*v9
      || (WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand((uint64_t *)this + 3, 0), (uint64_t v11 = *v9) != 0))
    {
      unsigned int v12 = *(_DWORD *)(v11 - 8);
    }
    else
    {
      unsigned int v12 = 0;
    }
    uint64_t v13 = WTF::ASCIICaseInsensitiveHash::hash(v79, v10) & v12;
    uint64_t v14 = v11 + 16 * v13;
    if ((WTF::equal(*(WTF **)v14, 0, v15) & 1) == 0)
    {
      int v17 = 0;
      int v18 = 1;
      do
      {
        long long v19 = (void *)v14;
        if (*(void *)v14 != -1)
        {
          long long v19 = v17;
          if (WTF::equalIgnoringASCIICase(*(WTF **)v14, v79, v16))
          {
            *(double *)(v11 + 16 * v13 + ++*(_DWORD *)(this + 8) = v8;
            goto LABEL_26;
          }
        }
        uint64_t v13 = (v13 + v18) & v12;
        uint64_t v14 = v11 + 16 * v13;
        ++v18;
        int v17 = v19;
      }
      while (!WTF::equal(*(WTF **)v14, 0, v16));
      if (v19)
      {
        *long long v19 = 0;
        v19[1] = 0;
        --*(_DWORD *)(*v9 - 16);
        uint64_t v14 = (uint64_t)v19;
      }
    }
    WTF::String::operator=((uint64_t *)v14, &v79);
    *(double *)(v14 + ++*(_DWORD *)(this + 8) = v8;
    uint64_t v20 = *v9;
    if (*v9) {
      int v21 = *(_DWORD *)(v20 - 12) + 1;
    }
    else {
      int v21 = 1;
    }
    *(_DWORD *)(v20 - 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 2) = v21;
    uint64_t v22 = *v9;
    if (*v9) {
      int v23 = *(_DWORD *)(v22 - 12);
    }
    else {
      int v23 = 0;
    }
    uint64_t v24 = (*(_DWORD *)(v22 - 16) + v23);
    unint64_t v25 = *(unsigned int *)(v22 - 4);
    if (v25 > 0x400)
    {
      if (v25 > 2 * v24) {
        goto LABEL_26;
      }
    }
    else if (3 * v25 > 4 * v24)
    {
LABEL_26:
      if (!*((unsigned char *)v78 + 8))
      {
        int v26 = WebKit::WebResourceLoadObserver::ensureResourceStatisticsForRegistrableDomain(v78, &v79);
        *((unsigned char *)v26 + 16) = 1;
        *((double *)v26 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = v8;
        *((double *)v26 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v8;
      }
      uint64_t v27 = *((void *)a2 + 68);
      if (v27)
      {
        uint64_t v28 = *(void *)(v27 + 8);
        if (v28)
        {
          uint64_t v29 = (unsigned int *)(v28 + 8);
          atomic_fetch_add((atomic_uint *volatile)(v28 + 8), 1u);
          uint64_t v30 = *(void *)(v28 + 160);
          if (v30)
          {
            uint64_t v31 = *(void *)(v30 + 8);
            if (v31)
            {
              if (!*(unsigned char *)(v31 + 144))
              {
                unsigned int v32 = (unsigned int *)(v31 + 8);
                atomic_fetch_add((atomic_uint *volatile)(v31 + 8), 1u);
                uint64_t v33 = *(void *)(v31 + 296);
                if (v33)
                {
                  int v34 = *(_DWORD *)(v33 + 28) + 2;
                  *(_DWORD *)(v33 + 2++*(_DWORD *)(this + 8) = v34;
                  uint64_t v35 = *(void *)(v33 + 544);
                  if (v35)
                  {
                    uint64_t v36 = *(void *)(v35 + 8);
                    if (v36)
                    {
                      uint64_t v37 = *(void *)(v36 + 24);
                      if (v37)
                      {
                        uint64_t v38 = *(void *)(v37 + 8);
                        if (v38)
                        {
                          uint64_t v39 = *(void **)(*(void *)(v38 + 48) + 16);
                          if ((*(uint64_t (**)(void *))(*v39 + 1368))(v39))
                          {
                            uint64_t v41 = 0;
                          }
                          else
                          {
                            uint64_t v40 = *(void *)(v39[2] + 8);
                            if (v40) {
                              uint64_t v41 = v40 - 16;
                            }
                            else {
                              uint64_t v41 = 0;
                            }
                          }
                          CFRetain(*(CFTypeRef *)(v41 + 8));
                          uint64_t v42 = *(_DWORD **)(v33 + 768);
                          if (v42) {
                            *v42 += 2;
                          }
                          *(void *)buf = v42;
                          *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)(v33 + 776);
                          long long v85 = *(_OWORD *)(v33 + 792);
                          WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)&v82, (const WTF::URL *)buf);
                          if ((WTF::equal(v79, v82, v43) & 1) == 0
                            && (WebCore::Document::hasRequestedPageSpecificStorageAccessWithUserInteraction() & 1) == 0
                            && (WTF::URL::isAboutBlank((WTF::URL *)buf) & 1) == 0)
                          {
                            {
                              char v77 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
                              WebKit::WebProcess::WebProcess(v77);
                            }
                            uint64_t v45 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
                            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v81, *(atomic_uchar *volatile **)(v45 + 24));
                            uint64_t v46 = v81;
                            uint64_t v80 = *(void *)(v41 + 40);
                            uint64_t v47 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
                            *(_WORD *)uint64_t v47 = 274;
                            *((void *)v47 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
                            *((void *)v47 + 66) = (char *)v47 + 16;
                            *((void *)v47 + 67) = 512;
                            *((void *)v47 + 6++*(_DWORD *)(this + 8) = 0;
                            *((void *)v47 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
                            *((void *)v47 + 69) = 0;
                            IPC::Encoder::encodeHeader(v47);
                            char v83 = v47;
                            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v47, (uint64_t *)&v79);
                            IPC::ArgumentCoder<WebKit::MonotonicObjectIdentifier<WebKit::EditorStateIdentifierType>,void>::encode(v47, &v80);
                            IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v47, (uint64_t *)&v82);
                            IPC::Connection::sendMessageImpl((uint64_t)v46, (uint64_t *)&v83, 0, 0);
                            char v49 = v83;
                            char v83 = 0;
                            if (v49)
                            {
                              IPC::Encoder::~Encoder(v49, v48);
                              WTF::fastFree(v74, v75);
                            }
                            WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v81);
                            WebKit::WebPage::addDomainWithPageLevelStorageAccess((WebKit::WebPage *)v41, &v82, &v79);
                            WebCore::Document::setHasRequestedPageSpecificStorageAccessWithUserInteraction();
                          }
                          uint64_t v50 = v82;
                          uint64_t v82 = 0;
                          if (v50)
                          {
                            if (*(_DWORD *)v50 == 2) {
                              WTF::StringImpl::destroy(v50, v44);
                            }
                            else {
                              *(_DWORD *)v50 -= 2;
                            }
                          }
                          int v51 = *(WTF::StringImpl **)buf;
                          *(void *)buf = 0;
                          if (v51)
                          {
                            if (*(_DWORD *)v51 == 2) {
                              WTF::StringImpl::destroy(v51, v44);
                            }
                            else {
                              *(_DWORD *)v51 -= 2;
                            }
                          }
                          CFRelease(*(CFTypeRef *)(v41 + 8));
                          int v34 = *(_DWORD *)(v33 + 28);
                        }
                      }
                    }
                  }
                  int v52 = v34 - 2;
                  if (v52)
                  {
                    *(_DWORD *)(v33 + 2++*(_DWORD *)(this + 8) = v52;
                  }
                  else if ((*(_WORD *)(v33 + 34) & 0x400) == 0)
                  {
                    WebCore::Node::removedLastRef((WebCore::Node *)v33);
                  }
                }
                WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v32);
              }
            }
          }
          WTF::ThreadSafeRefCounted<WebCore::Frame,(WTF::DestructionThread)1>::deref(v29);
        }
      }
      {
        char v76 = (WebKit::WebProcess *)WTF::fastMalloc((WTF *)0x330);
        WebKit::WebProcess::WebProcess(v76);
      }
      uint64_t v53 = WebKit::WebProcess::ensureNetworkProcessConnection((WebKit::WebProcess *)WebKit::WebProcess::singleton(void)::process);
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::Ref((atomic_uchar *volatile **)&v83, *(atomic_uchar *volatile **)(v53 + 24));
      uint64_t v54 = v83;
      uint64_t v55 = (IPC::Encoder *)WTF::fastMalloc((WTF *)0x238);
      *(_WORD *)uint64_t v55 = 250;
      *((void *)v55 + WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 1) = 0;
      *((void *)v55 + 66) = (char *)v55 + 16;
      *((void *)v55 + 67) = 512;
      *((void *)v55 + 6++*(_DWORD *)(this + 8) = 0;
      *((void *)v55 + 7IPC::Connection::removeWorkQueueMessageReceiver(*((void *)this + 5), 0xC6u, 0) = 0;
      *((void *)v55 + 69) = 0;
      IPC::Encoder::encodeHeader(v55);
      *(void *)buf = v55;
      IPC::ArgumentCoder<WTF::String,void>::encode<IPC::Encoder>(v55, (uint64_t *)&v79);
      IPC::Connection::sendMessageImpl((uint64_t)v54, (uint64_t *)buf, 0, 0);
      int v57 = *(IPC::Encoder **)buf;
      *(void *)buf = 0;
      if (v57)
      {
        IPC::Encoder::~Encoder(v57, v56);
        WTF::fastFree(v67, v68);
      }
      WTF::Ref<IPC::Connection,WTF::RawPtrTraits<IPC::Connection>,WTF::DefaultRefDerefTraits<IPC::Connection>>::~Ref((atomic_uchar *volatile **)&v83);
      if (WebKit::WebResourceLoadObserver::shouldLogUserInteraction)
      {
        uint64_t v58 = *((void *)v78 + 13) + 1;
        *((void *)v78 + 1WebKit::WebLocalFrameLoaderClient::didSameDocumentNavigationForFrameViaJSHistoryAPI((uint64_t)this, 3) = v58;
        if (*(void *)v4 && (WTF::StringImpl::replace(), (uint64_t v59 = *(WTF::StringImpl **)buf) != 0))
        {
          WTF::StringImpl::replace();
          if (*(_DWORD *)v59 == 2) {
            WTF::StringImpl::destroy(v59, v60);
          }
          else {
            *(_DWORD *)v59 -= 2;
          }
        }
        else
        {
          char v83 = 0;
        }
        if (v79 && (WTF::StringImpl::replace(), (unsigned __int8 v61 = *(WTF::StringImpl **)buf) != 0))
        {
          WTF::StringImpl::replace();
          if (*(_DWORD *)v61 == 2) {
            WTF::StringImpl::destroy(v61, v62);
          }
          else {
            *(_DWORD *)v61 -= 2;
          }
        }
        else
        {
          uint64_t v82 = 0;
        }
        char v63 = qword_1EB358460;
        if (os_log_type_enabled((os_log_t)qword_1EB358460, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          if (v81) {
            char v64 = (char *)v81 + 16;
          }
          else {
            char v64 = 0;
          }
          *(_DWORD *)buf = 134218242;
          *(void *)&uint8_t buf[4] = v58;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v64;
          _os_log_impl(&dword_1985F2000, v63, OS_LOG_TYPE_DEFAULT, "ResourceLoadObserver::logUserInteraction: counter=%llu: { \"url\": \"%{public}s\",", buf, 0x16u);
          char v66 = v81;
          int v81 = 0;
          if (v66)
          {
            if (*(_DWORD *)v66 == 1) {
              WTF::fastFree(v66, v65);
            }
            else {
              --*(_DWORD *)v66;
            }
          }
          char v63 = qword_1EB358460;
        }
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          WTF::String::utf8();
          if (v81) {
            uint64_t v69 = (char *)v81 + 16;
          }
          else {
            uint64_t v69 = 0;
          }
          *(_DWORD *)buf = 134218242;
          *(void *)&uint8_t buf[4] = v58;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v69;
          _os_log_impl(&dword_1985F2000, v63, OS_LOG_TYPE_DEFAULT, "ResourceLoadObserver::logUserInteraction: counter=%llu:   \"domain\" : \"%{public}s\",", buf, 0x16u);
          uint64_t v71 = v81;
          int v81 = 0;
          if (v71)
          {
            if (*(_DWORD *)v71 == 1) {
              WTF::fastFree(v71, v70);
            }
            else {
              --*(_DWORD *)v71;
            }
          }
          char v63 = qword_1EB358460;
        }
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          *(void *)&uint8_t buf[4] = v58;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = v8;
          _os_log_impl(&dword_1985F2000, v63, OS_LOG_TYPE_DEFAULT, "ResourceLoadObserver::logUserInteraction: counter=%llu:   \"until\" : %f }", buf, 0x16u);
        }
        uint64_t v72 = v82;
        uint64_t v82 = 0;
        if (v72)
        {
          if (*(_DWORD *)v72 == 2) {
            WTF::StringImpl::destroy(v72, v10);
          }
          else {
            *(_DWORD *)v72 -= 2;
          }
        }
        uint64_t v73 = v83;
        char v83 = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 2) {
            WTF::StringImpl::destroy(v73, v10);
          }
          else {
            *(_DWORD *)v73 -= 2;
          }
        }
      }
      goto LABEL_107;
    }
    WTF::HashTable<WebCore::RegistrableDomain,WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::RegistrableDomain,WTF::WallTime>>,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashMap<WebCore::RegistrableDomain,WTF::WallTime,WTF::DefaultHash<WebCore::RegistrableDomain>,WTF::HashTraits<WebCore::RegistrableDomain>,WTF::HashTraits<WTF::WallTime>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::RegistrableDomain>>::expand(v9, v14);
    goto LABEL_26;
  }
LABEL_107:
  uint64_t result = (uint64_t)v79;
  long long v79 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2) {
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
    }
    else {
      *(_DWORD *)result -= 2;
    }
  }
  return result;
}